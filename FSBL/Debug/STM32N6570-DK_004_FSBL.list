
STM32N6570-DK_004_FSBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34180400  34180400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b64  3418074c  3418074c  0000074c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  341912b0  341912b0  000112b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  3419133c  3419133c  00012480  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  3419133c  3419133c  0001133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  34191344  34191344  00012480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  34191344  34191344  00011344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  34191348  34191348  00011348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  341c0000  3419134c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noncacheable 00000004  341c0114  34191460  00013114  2**0
                  ALLOC
 10 .gnu.sgstubs  00000020  34191460  34191460  00012460  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          0000045c  341c0118  341c0118  00013118  2**2
                  ALLOC
 12 ._user_heap_stack 00001504  341c0574  341c0574  00013118  2**0
                  ALLOC
 13 .ARM.attributes 0000003a  00000000  00000000  00012480  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026fa9  00000000  00000000  000124ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a5c  00000000  00000000  00039463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001dd0  00000000  00000000  0003cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016c1  00000000  00000000  0003ec90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006208  00000000  00000000  00040351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022e51  00000000  00000000  00046559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    002325dc  00000000  00000000  000693aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0029b986  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008304  00000000  00000000  0029b9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  002a3cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

3418074c <__do_global_dtors_aux>:
3418074c:	b510      	push	{r4, lr}
3418074e:	4c05      	ldr	r4, [pc, #20]	@ (34180764 <__do_global_dtors_aux+0x18>)
34180750:	7823      	ldrb	r3, [r4, #0]
34180752:	b933      	cbnz	r3, 34180762 <__do_global_dtors_aux+0x16>
34180754:	4b04      	ldr	r3, [pc, #16]	@ (34180768 <__do_global_dtors_aux+0x1c>)
34180756:	b113      	cbz	r3, 3418075e <__do_global_dtors_aux+0x12>
34180758:	4804      	ldr	r0, [pc, #16]	@ (3418076c <__do_global_dtors_aux+0x20>)
3418075a:	f3af 8000 	nop.w
3418075e:	2301      	movs	r3, #1
34180760:	7023      	strb	r3, [r4, #0]
34180762:	bd10      	pop	{r4, pc}
34180764:	341c0118 	.word	0x341c0118
34180768:	00000000 	.word	0x00000000
3418076c:	34191298 	.word	0x34191298

34180770 <frame_dummy>:
34180770:	b508      	push	{r3, lr}
34180772:	4b03      	ldr	r3, [pc, #12]	@ (34180780 <frame_dummy+0x10>)
34180774:	b11b      	cbz	r3, 3418077e <frame_dummy+0xe>
34180776:	4903      	ldr	r1, [pc, #12]	@ (34180784 <frame_dummy+0x14>)
34180778:	4803      	ldr	r0, [pc, #12]	@ (34180788 <frame_dummy+0x18>)
3418077a:	f3af 8000 	nop.w
3418077e:	bd08      	pop	{r3, pc}
34180780:	00000000 	.word	0x00000000
34180784:	341c011c 	.word	0x341c011c
34180788:	34191298 	.word	0x34191298

3418078c <__aeabi_uldivmod>:
3418078c:	b953      	cbnz	r3, 341807a4 <__aeabi_uldivmod+0x18>
3418078e:	b94a      	cbnz	r2, 341807a4 <__aeabi_uldivmod+0x18>
34180790:	2900      	cmp	r1, #0
34180792:	bf08      	it	eq
34180794:	2800      	cmpeq	r0, #0
34180796:	bf1c      	itt	ne
34180798:	f04f 31ff 	movne.w	r1, #4294967295
3418079c:	f04f 30ff 	movne.w	r0, #4294967295
341807a0:	f000 b9b0 	b.w	34180b04 <__aeabi_idiv0>
341807a4:	f1ad 0c08 	sub.w	ip, sp, #8
341807a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
341807ac:	f000 f806 	bl	341807bc <__udivmoddi4>
341807b0:	f8dd e004 	ldr.w	lr, [sp, #4]
341807b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
341807b8:	b004      	add	sp, #16
341807ba:	4770      	bx	lr

341807bc <__udivmoddi4>:
341807bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341807c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
341807c2:	4688      	mov	r8, r1
341807c4:	4604      	mov	r4, r0
341807c6:	468e      	mov	lr, r1
341807c8:	2b00      	cmp	r3, #0
341807ca:	d14a      	bne.n	34180862 <__udivmoddi4+0xa6>
341807cc:	428a      	cmp	r2, r1
341807ce:	4617      	mov	r7, r2
341807d0:	d95f      	bls.n	34180892 <__udivmoddi4+0xd6>
341807d2:	fab2 f682 	clz	r6, r2
341807d6:	b14e      	cbz	r6, 341807ec <__udivmoddi4+0x30>
341807d8:	f1c6 0320 	rsb	r3, r6, #32
341807dc:	fa01 fe06 	lsl.w	lr, r1, r6
341807e0:	40b7      	lsls	r7, r6
341807e2:	40b4      	lsls	r4, r6
341807e4:	fa20 f303 	lsr.w	r3, r0, r3
341807e8:	ea43 0e0e 	orr.w	lr, r3, lr
341807ec:	ea4f 4817 	mov.w	r8, r7, lsr #16
341807f0:	fa1f fc87 	uxth.w	ip, r7
341807f4:	0c23      	lsrs	r3, r4, #16
341807f6:	fbbe f1f8 	udiv	r1, lr, r8
341807fa:	fb08 ee11 	mls	lr, r8, r1, lr
341807fe:	fb01 f20c 	mul.w	r2, r1, ip
34180802:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
34180806:	429a      	cmp	r2, r3
34180808:	d907      	bls.n	3418081a <__udivmoddi4+0x5e>
3418080a:	18fb      	adds	r3, r7, r3
3418080c:	f101 30ff 	add.w	r0, r1, #4294967295
34180810:	d202      	bcs.n	34180818 <__udivmoddi4+0x5c>
34180812:	429a      	cmp	r2, r3
34180814:	f200 8154 	bhi.w	34180ac0 <__udivmoddi4+0x304>
34180818:	4601      	mov	r1, r0
3418081a:	1a9b      	subs	r3, r3, r2
3418081c:	b2a2      	uxth	r2, r4
3418081e:	fbb3 f0f8 	udiv	r0, r3, r8
34180822:	fb08 3310 	mls	r3, r8, r0, r3
34180826:	fb00 fc0c 	mul.w	ip, r0, ip
3418082a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3418082e:	4594      	cmp	ip, r2
34180830:	d90b      	bls.n	3418084a <__udivmoddi4+0x8e>
34180832:	18ba      	adds	r2, r7, r2
34180834:	f100 33ff 	add.w	r3, r0, #4294967295
34180838:	bf2c      	ite	cs
3418083a:	2401      	movcs	r4, #1
3418083c:	2400      	movcc	r4, #0
3418083e:	4594      	cmp	ip, r2
34180840:	d902      	bls.n	34180848 <__udivmoddi4+0x8c>
34180842:	2c00      	cmp	r4, #0
34180844:	f000 813f 	beq.w	34180ac6 <__udivmoddi4+0x30a>
34180848:	4618      	mov	r0, r3
3418084a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
3418084e:	eba2 020c 	sub.w	r2, r2, ip
34180852:	2100      	movs	r1, #0
34180854:	b11d      	cbz	r5, 3418085e <__udivmoddi4+0xa2>
34180856:	40f2      	lsrs	r2, r6
34180858:	2300      	movs	r3, #0
3418085a:	e9c5 2300 	strd	r2, r3, [r5]
3418085e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34180862:	428b      	cmp	r3, r1
34180864:	d905      	bls.n	34180872 <__udivmoddi4+0xb6>
34180866:	b10d      	cbz	r5, 3418086c <__udivmoddi4+0xb0>
34180868:	e9c5 0100 	strd	r0, r1, [r5]
3418086c:	2100      	movs	r1, #0
3418086e:	4608      	mov	r0, r1
34180870:	e7f5      	b.n	3418085e <__udivmoddi4+0xa2>
34180872:	fab3 f183 	clz	r1, r3
34180876:	2900      	cmp	r1, #0
34180878:	d14e      	bne.n	34180918 <__udivmoddi4+0x15c>
3418087a:	4543      	cmp	r3, r8
3418087c:	f0c0 8112 	bcc.w	34180aa4 <__udivmoddi4+0x2e8>
34180880:	4282      	cmp	r2, r0
34180882:	f240 810f 	bls.w	34180aa4 <__udivmoddi4+0x2e8>
34180886:	4608      	mov	r0, r1
34180888:	2d00      	cmp	r5, #0
3418088a:	d0e8      	beq.n	3418085e <__udivmoddi4+0xa2>
3418088c:	e9c5 4e00 	strd	r4, lr, [r5]
34180890:	e7e5      	b.n	3418085e <__udivmoddi4+0xa2>
34180892:	2a00      	cmp	r2, #0
34180894:	f000 80ac 	beq.w	341809f0 <__udivmoddi4+0x234>
34180898:	fab2 f682 	clz	r6, r2
3418089c:	2e00      	cmp	r6, #0
3418089e:	f040 80bb 	bne.w	34180a18 <__udivmoddi4+0x25c>
341808a2:	1a8b      	subs	r3, r1, r2
341808a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
341808a8:	b2bc      	uxth	r4, r7
341808aa:	2101      	movs	r1, #1
341808ac:	0c02      	lsrs	r2, r0, #16
341808ae:	b280      	uxth	r0, r0
341808b0:	fbb3 fcfe 	udiv	ip, r3, lr
341808b4:	fb0e 331c 	mls	r3, lr, ip, r3
341808b8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
341808bc:	fb04 f20c 	mul.w	r2, r4, ip
341808c0:	429a      	cmp	r2, r3
341808c2:	d90e      	bls.n	341808e2 <__udivmoddi4+0x126>
341808c4:	18fb      	adds	r3, r7, r3
341808c6:	f10c 38ff 	add.w	r8, ip, #4294967295
341808ca:	bf2c      	ite	cs
341808cc:	f04f 0901 	movcs.w	r9, #1
341808d0:	f04f 0900 	movcc.w	r9, #0
341808d4:	429a      	cmp	r2, r3
341808d6:	d903      	bls.n	341808e0 <__udivmoddi4+0x124>
341808d8:	f1b9 0f00 	cmp.w	r9, #0
341808dc:	f000 80ec 	beq.w	34180ab8 <__udivmoddi4+0x2fc>
341808e0:	46c4      	mov	ip, r8
341808e2:	1a9b      	subs	r3, r3, r2
341808e4:	fbb3 f8fe 	udiv	r8, r3, lr
341808e8:	fb0e 3318 	mls	r3, lr, r8, r3
341808ec:	fb04 f408 	mul.w	r4, r4, r8
341808f0:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
341808f4:	4294      	cmp	r4, r2
341808f6:	d90b      	bls.n	34180910 <__udivmoddi4+0x154>
341808f8:	18ba      	adds	r2, r7, r2
341808fa:	f108 33ff 	add.w	r3, r8, #4294967295
341808fe:	bf2c      	ite	cs
34180900:	2001      	movcs	r0, #1
34180902:	2000      	movcc	r0, #0
34180904:	4294      	cmp	r4, r2
34180906:	d902      	bls.n	3418090e <__udivmoddi4+0x152>
34180908:	2800      	cmp	r0, #0
3418090a:	f000 80d1 	beq.w	34180ab0 <__udivmoddi4+0x2f4>
3418090e:	4698      	mov	r8, r3
34180910:	1b12      	subs	r2, r2, r4
34180912:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
34180916:	e79d      	b.n	34180854 <__udivmoddi4+0x98>
34180918:	f1c1 0620 	rsb	r6, r1, #32
3418091c:	408b      	lsls	r3, r1
3418091e:	fa08 f401 	lsl.w	r4, r8, r1
34180922:	fa00 f901 	lsl.w	r9, r0, r1
34180926:	fa22 f706 	lsr.w	r7, r2, r6
3418092a:	fa28 f806 	lsr.w	r8, r8, r6
3418092e:	408a      	lsls	r2, r1
34180930:	431f      	orrs	r7, r3
34180932:	fa20 f306 	lsr.w	r3, r0, r6
34180936:	0c38      	lsrs	r0, r7, #16
34180938:	4323      	orrs	r3, r4
3418093a:	fa1f fc87 	uxth.w	ip, r7
3418093e:	0c1c      	lsrs	r4, r3, #16
34180940:	fbb8 fef0 	udiv	lr, r8, r0
34180944:	fb00 881e 	mls	r8, r0, lr, r8
34180948:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
3418094c:	fb0e f80c 	mul.w	r8, lr, ip
34180950:	45a0      	cmp	r8, r4
34180952:	d90e      	bls.n	34180972 <__udivmoddi4+0x1b6>
34180954:	193c      	adds	r4, r7, r4
34180956:	f10e 3aff 	add.w	sl, lr, #4294967295
3418095a:	bf2c      	ite	cs
3418095c:	f04f 0b01 	movcs.w	fp, #1
34180960:	f04f 0b00 	movcc.w	fp, #0
34180964:	45a0      	cmp	r8, r4
34180966:	d903      	bls.n	34180970 <__udivmoddi4+0x1b4>
34180968:	f1bb 0f00 	cmp.w	fp, #0
3418096c:	f000 80b8 	beq.w	34180ae0 <__udivmoddi4+0x324>
34180970:	46d6      	mov	lr, sl
34180972:	eba4 0408 	sub.w	r4, r4, r8
34180976:	fa1f f883 	uxth.w	r8, r3
3418097a:	fbb4 f3f0 	udiv	r3, r4, r0
3418097e:	fb00 4413 	mls	r4, r0, r3, r4
34180982:	fb03 fc0c 	mul.w	ip, r3, ip
34180986:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
3418098a:	45a4      	cmp	ip, r4
3418098c:	d90e      	bls.n	341809ac <__udivmoddi4+0x1f0>
3418098e:	193c      	adds	r4, r7, r4
34180990:	f103 30ff 	add.w	r0, r3, #4294967295
34180994:	bf2c      	ite	cs
34180996:	f04f 0801 	movcs.w	r8, #1
3418099a:	f04f 0800 	movcc.w	r8, #0
3418099e:	45a4      	cmp	ip, r4
341809a0:	d903      	bls.n	341809aa <__udivmoddi4+0x1ee>
341809a2:	f1b8 0f00 	cmp.w	r8, #0
341809a6:	f000 809f 	beq.w	34180ae8 <__udivmoddi4+0x32c>
341809aa:	4603      	mov	r3, r0
341809ac:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
341809b0:	eba4 040c 	sub.w	r4, r4, ip
341809b4:	fba0 ec02 	umull	lr, ip, r0, r2
341809b8:	4564      	cmp	r4, ip
341809ba:	4673      	mov	r3, lr
341809bc:	46e0      	mov	r8, ip
341809be:	d302      	bcc.n	341809c6 <__udivmoddi4+0x20a>
341809c0:	d107      	bne.n	341809d2 <__udivmoddi4+0x216>
341809c2:	45f1      	cmp	r9, lr
341809c4:	d205      	bcs.n	341809d2 <__udivmoddi4+0x216>
341809c6:	ebbe 0302 	subs.w	r3, lr, r2
341809ca:	eb6c 0c07 	sbc.w	ip, ip, r7
341809ce:	3801      	subs	r0, #1
341809d0:	46e0      	mov	r8, ip
341809d2:	b15d      	cbz	r5, 341809ec <__udivmoddi4+0x230>
341809d4:	ebb9 0203 	subs.w	r2, r9, r3
341809d8:	eb64 0408 	sbc.w	r4, r4, r8
341809dc:	fa04 f606 	lsl.w	r6, r4, r6
341809e0:	fa22 f301 	lsr.w	r3, r2, r1
341809e4:	40cc      	lsrs	r4, r1
341809e6:	431e      	orrs	r6, r3
341809e8:	e9c5 6400 	strd	r6, r4, [r5]
341809ec:	2100      	movs	r1, #0
341809ee:	e736      	b.n	3418085e <__udivmoddi4+0xa2>
341809f0:	fbb1 fcf2 	udiv	ip, r1, r2
341809f4:	0c01      	lsrs	r1, r0, #16
341809f6:	4614      	mov	r4, r2
341809f8:	b280      	uxth	r0, r0
341809fa:	4696      	mov	lr, r2
341809fc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34180a00:	2620      	movs	r6, #32
34180a02:	4690      	mov	r8, r2
34180a04:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34180a08:	4610      	mov	r0, r2
34180a0a:	fbb1 f1f2 	udiv	r1, r1, r2
34180a0e:	eba3 0308 	sub.w	r3, r3, r8
34180a12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34180a16:	e74b      	b.n	341808b0 <__udivmoddi4+0xf4>
34180a18:	40b7      	lsls	r7, r6
34180a1a:	f1c6 0320 	rsb	r3, r6, #32
34180a1e:	fa01 f206 	lsl.w	r2, r1, r6
34180a22:	fa21 f803 	lsr.w	r8, r1, r3
34180a26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34180a2a:	fa20 f303 	lsr.w	r3, r0, r3
34180a2e:	b2bc      	uxth	r4, r7
34180a30:	40b0      	lsls	r0, r6
34180a32:	4313      	orrs	r3, r2
34180a34:	0c02      	lsrs	r2, r0, #16
34180a36:	0c19      	lsrs	r1, r3, #16
34180a38:	b280      	uxth	r0, r0
34180a3a:	fbb8 f9fe 	udiv	r9, r8, lr
34180a3e:	fb0e 8819 	mls	r8, lr, r9, r8
34180a42:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34180a46:	fb09 f804 	mul.w	r8, r9, r4
34180a4a:	4588      	cmp	r8, r1
34180a4c:	d951      	bls.n	34180af2 <__udivmoddi4+0x336>
34180a4e:	1879      	adds	r1, r7, r1
34180a50:	f109 3cff 	add.w	ip, r9, #4294967295
34180a54:	bf2c      	ite	cs
34180a56:	f04f 0a01 	movcs.w	sl, #1
34180a5a:	f04f 0a00 	movcc.w	sl, #0
34180a5e:	4588      	cmp	r8, r1
34180a60:	d902      	bls.n	34180a68 <__udivmoddi4+0x2ac>
34180a62:	f1ba 0f00 	cmp.w	sl, #0
34180a66:	d031      	beq.n	34180acc <__udivmoddi4+0x310>
34180a68:	eba1 0108 	sub.w	r1, r1, r8
34180a6c:	fbb1 f9fe 	udiv	r9, r1, lr
34180a70:	fb09 f804 	mul.w	r8, r9, r4
34180a74:	fb0e 1119 	mls	r1, lr, r9, r1
34180a78:	b29b      	uxth	r3, r3
34180a7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34180a7e:	4543      	cmp	r3, r8
34180a80:	d235      	bcs.n	34180aee <__udivmoddi4+0x332>
34180a82:	18fb      	adds	r3, r7, r3
34180a84:	f109 31ff 	add.w	r1, r9, #4294967295
34180a88:	bf2c      	ite	cs
34180a8a:	f04f 0a01 	movcs.w	sl, #1
34180a8e:	f04f 0a00 	movcc.w	sl, #0
34180a92:	4543      	cmp	r3, r8
34180a94:	d2bb      	bcs.n	34180a0e <__udivmoddi4+0x252>
34180a96:	f1ba 0f00 	cmp.w	sl, #0
34180a9a:	d1b8      	bne.n	34180a0e <__udivmoddi4+0x252>
34180a9c:	f1a9 0102 	sub.w	r1, r9, #2
34180aa0:	443b      	add	r3, r7
34180aa2:	e7b4      	b.n	34180a0e <__udivmoddi4+0x252>
34180aa4:	1a84      	subs	r4, r0, r2
34180aa6:	eb68 0203 	sbc.w	r2, r8, r3
34180aaa:	2001      	movs	r0, #1
34180aac:	4696      	mov	lr, r2
34180aae:	e6eb      	b.n	34180888 <__udivmoddi4+0xcc>
34180ab0:	443a      	add	r2, r7
34180ab2:	f1a8 0802 	sub.w	r8, r8, #2
34180ab6:	e72b      	b.n	34180910 <__udivmoddi4+0x154>
34180ab8:	f1ac 0c02 	sub.w	ip, ip, #2
34180abc:	443b      	add	r3, r7
34180abe:	e710      	b.n	341808e2 <__udivmoddi4+0x126>
34180ac0:	3902      	subs	r1, #2
34180ac2:	443b      	add	r3, r7
34180ac4:	e6a9      	b.n	3418081a <__udivmoddi4+0x5e>
34180ac6:	443a      	add	r2, r7
34180ac8:	3802      	subs	r0, #2
34180aca:	e6be      	b.n	3418084a <__udivmoddi4+0x8e>
34180acc:	eba7 0808 	sub.w	r8, r7, r8
34180ad0:	f1a9 0c02 	sub.w	ip, r9, #2
34180ad4:	4441      	add	r1, r8
34180ad6:	fbb1 f9fe 	udiv	r9, r1, lr
34180ada:	fb09 f804 	mul.w	r8, r9, r4
34180ade:	e7c9      	b.n	34180a74 <__udivmoddi4+0x2b8>
34180ae0:	f1ae 0e02 	sub.w	lr, lr, #2
34180ae4:	443c      	add	r4, r7
34180ae6:	e744      	b.n	34180972 <__udivmoddi4+0x1b6>
34180ae8:	3b02      	subs	r3, #2
34180aea:	443c      	add	r4, r7
34180aec:	e75e      	b.n	341809ac <__udivmoddi4+0x1f0>
34180aee:	4649      	mov	r1, r9
34180af0:	e78d      	b.n	34180a0e <__udivmoddi4+0x252>
34180af2:	eba1 0108 	sub.w	r1, r1, r8
34180af6:	46cc      	mov	ip, r9
34180af8:	fbb1 f9fe 	udiv	r9, r1, lr
34180afc:	fb09 f804 	mul.w	r8, r9, r4
34180b00:	e7b8      	b.n	34180a74 <__udivmoddi4+0x2b8>
34180b02:	bf00      	nop

34180b04 <__aeabi_idiv0>:
34180b04:	4770      	bx	lr
34180b06:	bf00      	nop

34180b08 <MX_EXTMEM_Init>:
/**
  * Init Secure Manager API
  * @retval None
  */
void MX_EXTMEM_Init(void)
{
34180b08:	b580      	push	{r7, lr}
34180b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MX_EXTMEM_Init_PreTreatment */
    
  /* USER CODE END MX_EXTMEM_Init_PreTreatment */

  EXTMEM_Init(EXTMEMORY_1, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI2));
34180b0c:	f04f 0000 	mov.w	r0, #0
34180b10:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
34180b14:	f007 f9f4 	bl	34187f00 <HAL_RCCEx_GetPeriphCLKFreq>
34180b18:	4603      	mov	r3, r0
34180b1a:	4619      	mov	r1, r3
34180b1c:	2000      	movs	r0, #0
34180b1e:	f00d fa55 	bl	3418dfcc <EXTMEM_Init>
//  EXTMEM_Init(EXTMEMORY_2, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI1));

  /* USER CODE BEGIN MX_EXTMEM_Init_PostTreatment */

  /* USER CODE END MX_EXTMEM_Init_PostTreatment */
}
34180b22:	bf00      	nop
34180b24:	bd80      	pop	{r7, pc}
	...

34180b28 <LL_AHB4_GRP1_EnableClock>:
  *         @arg @ref LL_AHB4_GRP1_PERIPH_PWR
  *         @arg @ref LL_AHB4_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
34180b28:	b480      	push	{r7}
34180b2a:	b085      	sub	sp, #20
34180b2c:	af00      	add	r7, sp, #0
34180b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34180b30:	4a07      	ldr	r2, [pc, #28]	@ (34180b50 <LL_AHB4_GRP1_EnableClock+0x28>)
34180b32:	687b      	ldr	r3, [r7, #4]
34180b34:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
34180b38:	4b05      	ldr	r3, [pc, #20]	@ (34180b50 <LL_AHB4_GRP1_EnableClock+0x28>)
34180b3a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34180b3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180b40:	68fb      	ldr	r3, [r7, #12]
}
34180b42:	bf00      	nop
34180b44:	3714      	adds	r7, #20
34180b46:	46bd      	mov	sp, r7
34180b48:	f85d 7b04 	ldr.w	r7, [sp], #4
34180b4c:	4770      	bx	lr
34180b4e:	bf00      	nop
34180b50:	56028000 	.word	0x56028000

34180b54 <MX_GPIO_Init>:
     CSI_D0N   ------> CSI_D0N
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PB5(JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
34180b54:	b580      	push	{r7, lr}
34180b56:	b086      	sub	sp, #24
34180b58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
34180b5a:	1d3b      	adds	r3, r7, #4
34180b5c:	2200      	movs	r2, #0
34180b5e:	601a      	str	r2, [r3, #0]
34180b60:	605a      	str	r2, [r3, #4]
34180b62:	609a      	str	r2, [r3, #8]
34180b64:	60da      	str	r2, [r3, #12]
34180b66:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
34180b68:	2001      	movs	r0, #1
34180b6a:	f7ff ffdd 	bl	34180b28 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
34180b6e:	2002      	movs	r0, #2
34180b70:	f7ff ffda 	bl	34180b28 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
34180b74:	2004      	movs	r0, #4
34180b76:	f7ff ffd7 	bl	34180b28 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
34180b7a:	2008      	movs	r0, #8
34180b7c:	f7ff ffd4 	bl	34180b28 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
34180b80:	2010      	movs	r0, #16
34180b82:	f7ff ffd1 	bl	34180b28 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOG_CLK_ENABLE();
34180b86:	2040      	movs	r0, #64	@ 0x40
34180b88:	f7ff ffce 	bl	34180b28 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
34180b8c:	2080      	movs	r0, #128	@ 0x80
34180b8e:	f7ff ffcb 	bl	34180b28 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOO_CLK_ENABLE();
34180b92:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
34180b96:	f7ff ffc7 	bl	34180b28 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOP_CLK_ENABLE();
34180b9a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
34180b9e:	f7ff ffc3 	bl	34180b28 <LL_AHB4_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
34180ba2:	2200      	movs	r2, #0
34180ba4:	2102      	movs	r1, #2
34180ba6:	4814      	ldr	r0, [pc, #80]	@ (34180bf8 <MX_GPIO_Init+0xa4>)
34180ba8:	f001 fe2e 	bl	34182808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
34180bac:	2200      	movs	r2, #0
34180bae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
34180bb2:	4812      	ldr	r0, [pc, #72]	@ (34180bfc <MX_GPIO_Init+0xa8>)
34180bb4:	f001 fe28 	bl	34182808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
34180bb8:	2302      	movs	r3, #2
34180bba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
34180bbc:	2301      	movs	r3, #1
34180bbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
34180bc0:	2300      	movs	r3, #0
34180bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34180bc4:	2300      	movs	r3, #0
34180bc6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
34180bc8:	1d3b      	adds	r3, r7, #4
34180bca:	4619      	mov	r1, r3
34180bcc:	480a      	ldr	r0, [pc, #40]	@ (34180bf8 <MX_GPIO_Init+0xa4>)
34180bce:	f001 fc69 	bl	341824a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
34180bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34180bd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
34180bd8:	2301      	movs	r3, #1
34180bda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
34180bdc:	2300      	movs	r3, #0
34180bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34180be0:	2300      	movs	r3, #0
34180be2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
34180be4:	1d3b      	adds	r3, r7, #4
34180be6:	4619      	mov	r1, r3
34180be8:	4804      	ldr	r0, [pc, #16]	@ (34180bfc <MX_GPIO_Init+0xa8>)
34180bea:	f001 fc5b 	bl	341824a4 <HAL_GPIO_Init>

}
34180bee:	bf00      	nop
34180bf0:	3718      	adds	r7, #24
34180bf2:	46bd      	mov	sp, r7
34180bf4:	bd80      	pop	{r7, pc}
34180bf6:	bf00      	nop
34180bf8:	56023800 	.word	0x56023800
34180bfc:	56021800 	.word	0x56021800

34180c00 <__io_putchar>:
#endif /* NO_OTP_FUSE */

/* Private functions ---------------------------------------------------------*/

int __io_putchar(int ch)
{
34180c00:	b580      	push	{r7, lr}
34180c02:	b082      	sub	sp, #8
34180c04:	af00      	add	r7, sp, #0
34180c06:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
34180c08:	1d39      	adds	r1, r7, #4
34180c0a:	f04f 33ff 	mov.w	r3, #4294967295
34180c0e:	2201      	movs	r2, #1
34180c10:	4803      	ldr	r0, [pc, #12]	@ (34180c20 <__io_putchar+0x20>)
34180c12:	f00b fb8d 	bl	3418c330 <HAL_UART_Transmit>
  return ch;
34180c16:	687b      	ldr	r3, [r7, #4]
}
34180c18:	4618      	mov	r0, r3
34180c1a:	3708      	adds	r7, #8
34180c1c:	46bd      	mov	sp, r7
34180c1e:	bd80      	pop	{r7, pc}
34180c20:	341c0138 	.word	0x341c0138

34180c24 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
34180c24:	b580      	push	{r7, lr}
34180c26:	b084      	sub	sp, #16
34180c28:	af00      	add	r7, sp, #0
  /* Enable and set up the MPU------------------------------------------------*/
  MPU_Config();
34180c2a:	f000 f925 	bl	34180e78 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34180c2e:	4b3d      	ldr	r3, [pc, #244]	@ (34180d24 <main+0x100>)
34180c30:	695b      	ldr	r3, [r3, #20]
34180c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34180c36:	2b00      	cmp	r3, #0
34180c38:	d11b      	bne.n	34180c72 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34180c3a:	f3bf 8f4f 	dsb	sy
}
34180c3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34180c40:	f3bf 8f6f 	isb	sy
}
34180c44:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
34180c46:	4b37      	ldr	r3, [pc, #220]	@ (34180d24 <main+0x100>)
34180c48:	2200      	movs	r2, #0
34180c4a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
34180c4e:	f3bf 8f4f 	dsb	sy
}
34180c52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34180c54:	f3bf 8f6f 	isb	sy
}
34180c58:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
34180c5a:	4b32      	ldr	r3, [pc, #200]	@ (34180d24 <main+0x100>)
34180c5c:	695b      	ldr	r3, [r3, #20]
34180c5e:	4a31      	ldr	r2, [pc, #196]	@ (34180d24 <main+0x100>)
34180c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34180c64:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
34180c66:	f3bf 8f4f 	dsb	sy
}
34180c6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34180c6c:	f3bf 8f6f 	isb	sy
}
34180c70:	e000      	b.n	34180c74 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34180c72:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
34180c74:	4b2b      	ldr	r3, [pc, #172]	@ (34180d24 <main+0x100>)
34180c76:	695b      	ldr	r3, [r3, #20]
34180c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34180c7c:	2b00      	cmp	r3, #0
34180c7e:	d138      	bne.n	34180cf2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
34180c80:	4b28      	ldr	r3, [pc, #160]	@ (34180d24 <main+0x100>)
34180c82:	2200      	movs	r2, #0
34180c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
34180c88:	f3bf 8f4f 	dsb	sy
}
34180c8c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
34180c8e:	4b25      	ldr	r3, [pc, #148]	@ (34180d24 <main+0x100>)
34180c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34180c94:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
34180c96:	68fb      	ldr	r3, [r7, #12]
34180c98:	0b5b      	lsrs	r3, r3, #13
34180c9a:	f3c3 030e 	ubfx	r3, r3, #0, #15
34180c9e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
34180ca0:	68fb      	ldr	r3, [r7, #12]
34180ca2:	08db      	lsrs	r3, r3, #3
34180ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
34180ca8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
34180caa:	68bb      	ldr	r3, [r7, #8]
34180cac:	015a      	lsls	r2, r3, #5
34180cae:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
34180cb2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
34180cb4:	687a      	ldr	r2, [r7, #4]
34180cb6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
34180cb8:	491a      	ldr	r1, [pc, #104]	@ (34180d24 <main+0x100>)
34180cba:	4313      	orrs	r3, r2
34180cbc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
34180cc0:	687b      	ldr	r3, [r7, #4]
34180cc2:	1e5a      	subs	r2, r3, #1
34180cc4:	607a      	str	r2, [r7, #4]
34180cc6:	2b00      	cmp	r3, #0
34180cc8:	d1ef      	bne.n	34180caa <main+0x86>
    } while(sets-- != 0U);
34180cca:	68bb      	ldr	r3, [r7, #8]
34180ccc:	1e5a      	subs	r2, r3, #1
34180cce:	60ba      	str	r2, [r7, #8]
34180cd0:	2b00      	cmp	r3, #0
34180cd2:	d1e5      	bne.n	34180ca0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
34180cd4:	f3bf 8f4f 	dsb	sy
}
34180cd8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
34180cda:	4b12      	ldr	r3, [pc, #72]	@ (34180d24 <main+0x100>)
34180cdc:	695b      	ldr	r3, [r3, #20]
34180cde:	4a11      	ldr	r2, [pc, #68]	@ (34180d24 <main+0x100>)
34180ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34180ce4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
34180ce6:	f3bf 8f4f 	dsb	sy
}
34180cea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34180cec:	f3bf 8f6f 	isb	sy
}
34180cf0:	e000      	b.n	34180cf4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
34180cf2:	bf00      	nop
             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
             handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
34180cf4:	f001 f81f 	bl	34181d36 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
34180cf8:	f000 f81a 	bl	34180d30 <SystemClock_Config>
  {
    Error_Handler();
  }
#endif /* NO_OTP_FUSE */

  MX_GPIO_Init();
34180cfc:	f7ff ff2a 	bl	34180b54 <MX_GPIO_Init>
//  HAL_Delay(2000);

  MX_USART1_UART_Init();
34180d00:	f000 fcca 	bl	34181698 <MX_USART1_UART_Init>

  printf("Hello world\n");
34180d04:	4808      	ldr	r0, [pc, #32]	@ (34180d28 <main+0x104>)
34180d06:	f00f ff27 	bl	34190b58 <puts>

  /* Add your application code here */
  MX_XSPI1_Init();
34180d0a:	f000 fdc5 	bl	34181898 <MX_XSPI1_Init>
  MX_XSPI2_Init();
34180d0e:	f000 fe1f 	bl	34181950 <MX_XSPI2_Init>

  /* Initialise the serial memory */
  MX_EXTMEM_Init();
34180d12:	f7ff fef9 	bl	34180b08 <MX_EXTMEM_Init>
  {
    printf("PSRAM test failed.\n");
  }
#endif

  printf("BOOT_Application\n");
34180d16:	4805      	ldr	r0, [pc, #20]	@ (34180d2c <main+0x108>)
34180d18:	f00f ff1e 	bl	34190b58 <puts>
  BOOT_Application();
34180d1c:	f00d f862 	bl	3418dde4 <BOOT_Application>
  /* We should never get here as execution is now from user application */
  while(1)
  {
    __NOP();
34180d20:	bf00      	nop
34180d22:	e7fd      	b.n	34180d20 <main+0xfc>
34180d24:	e000ed00 	.word	0xe000ed00
34180d28:	341912b0 	.word	0x341912b0
34180d2c:	341912bc 	.word	0x341912bc

34180d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
34180d30:	b580      	push	{r7, lr}
34180d32:	b0b6      	sub	sp, #216	@ 0xd8
34180d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34180d36:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180d3a:	2298      	movs	r2, #152	@ 0x98
34180d3c:	2100      	movs	r1, #0
34180d3e:	4618      	mov	r0, r3
34180d40:	f00f ffea 	bl	34190d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34180d44:	463b      	mov	r3, r7
34180d46:	2240      	movs	r2, #64	@ 0x40
34180d48:	2100      	movs	r1, #0
34180d4a:	4618      	mov	r0, r3
34180d4c:	f00f ffe4 	bl	34190d18 <memset>

  /** Configure the System Power Supply
  */
  if (HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY) != HAL_OK)
34180d50:	2000      	movs	r0, #0
34180d52:	f001 fd8b 	bl	3418286c <HAL_PWREx_ConfigSupply>
34180d56:	4603      	mov	r3, r0
34180d58:	2b00      	cmp	r3, #0
34180d5a:	d001      	beq.n	34180d60 <SystemClock_Config+0x30>
  {
    Error_Handler();
34180d5c:	f000 f8e2 	bl	34180f24 <Error_Handler>
  }

  /* Enable HSI */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
34180d60:	2302      	movs	r3, #2
34180d62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
34180d64:	2308      	movs	r3, #8
34180d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
34180d68:	2300      	movs	r3, #0
34180d6a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
34180d6c:	2300      	movs	r3, #0
34180d6e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
34180d70:	2300      	movs	r3, #0
34180d72:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180d74:	2300      	movs	r3, #0
34180d76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180d7a:	2300      	movs	r3, #0
34180d7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180d80:	2300      	movs	r3, #0
34180d82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180d86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180d8a:	4618      	mov	r0, r3
34180d8c:	f002 f864 	bl	34182e58 <HAL_RCC_OscConfig>
34180d90:	4603      	mov	r3, r0
34180d92:	2b00      	cmp	r3, #0
34180d94:	d001      	beq.n	34180d9a <SystemClock_Config+0x6a>
  {
    Error_Handler();
34180d96:	f000 f8c5 	bl	34180f24 <Error_Handler>
  }

  /** Get current CPU/System buses clocks configuration and if necessary switch
 to intermediate HSI clock to ensure target clock can be set
  */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct);
34180d9a:	463b      	mov	r3, r7
34180d9c:	4618      	mov	r0, r3
34180d9e:	f002 fecf 	bl	34183b40 <HAL_RCC_GetClockConfig>
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180da2:	687b      	ldr	r3, [r7, #4]
34180da4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34180da8:	d003      	beq.n	34180db2 <SystemClock_Config+0x82>
     (RCC_ClkInitStruct.SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11))
34180daa:	68bb      	ldr	r3, [r7, #8]
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180dac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34180db0:	d10e      	bne.n	34180dd0 <SystemClock_Config+0xa0>
  {
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK);
34180db2:	2303      	movs	r3, #3
34180db4:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
34180db6:	2300      	movs	r3, #0
34180db8:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
34180dba:	2300      	movs	r3, #0
34180dbc:	60bb      	str	r3, [r7, #8]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180dbe:	463b      	mov	r3, r7
34180dc0:	4618      	mov	r0, r3
34180dc2:	f002 fc29 	bl	34183618 <HAL_RCC_ClockConfig>
34180dc6:	4603      	mov	r3, r0
34180dc8:	2b00      	cmp	r3, #0
34180dca:	d001      	beq.n	34180dd0 <SystemClock_Config+0xa0>
    {
      /* Initialization Error */
      Error_Handler();
34180dcc:	f000 f8aa 	bl	34180f24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34180dd0:	2300      	movs	r3, #0
34180dd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34180dd4:	2302      	movs	r3, #2
34180dd6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34180dd8:	2300      	movs	r3, #0
34180dda:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL1.PLLM = 4;
34180ddc:	2304      	movs	r3, #4
34180dde:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL1.PLLN = 75;
34180de0:	234b      	movs	r3, #75	@ 0x4b
34180de2:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34180de4:	2300      	movs	r3, #0
34180de6:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34180de8:	2301      	movs	r3, #1
34180dea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34180dec:	2301      	movs	r3, #1
34180dee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180df2:	2300      	movs	r3, #0
34180df4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180df8:	2300      	movs	r3, #0
34180dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180dfe:	2300      	movs	r3, #0
34180e00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180e04:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180e08:	4618      	mov	r0, r3
34180e0a:	f002 f825 	bl	34182e58 <HAL_RCC_OscConfig>
34180e0e:	4603      	mov	r3, r0
34180e10:	2b00      	cmp	r3, #0
34180e12:	d001      	beq.n	34180e18 <SystemClock_Config+0xe8>
  {
    Error_Handler();
34180e14:	f000 f886 	bl	34180f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_CPUCLK|RCC_CLOCKTYPE_HCLK
34180e18:	237f      	movs	r3, #127	@ 0x7f
34180e1a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2|RCC_CLOCKTYPE_PCLK5
                              |RCC_CLOCKTYPE_PCLK4;
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34180e1c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34180e20:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34180e22:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34180e26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34180e28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34180e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34180e2e:	2300      	movs	r3, #0
34180e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
34180e32:	2300      	movs	r3, #0
34180e34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34180e36:	2300      	movs	r3, #0
34180e38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34180e3a:	2300      	movs	r3, #0
34180e3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.IC1Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180e3e:	2300      	movs	r3, #0
34180e40:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 2;
34180e42:	2302      	movs	r3, #2
34180e44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180e46:	2300      	movs	r3, #0
34180e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 3;
34180e4a:	2303      	movs	r3, #3
34180e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180e4e:	2300      	movs	r3, #0
34180e50:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 4;
34180e52:	2304      	movs	r3, #4
34180e54:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180e56:	2300      	movs	r3, #0
34180e58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 4;
34180e5a:	2304      	movs	r3, #4
34180e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180e5e:	463b      	mov	r3, r7
34180e60:	4618      	mov	r0, r3
34180e62:	f002 fbd9 	bl	34183618 <HAL_RCC_ClockConfig>
34180e66:	4603      	mov	r3, r0
34180e68:	2b00      	cmp	r3, #0
34180e6a:	d001      	beq.n	34180e70 <SystemClock_Config+0x140>
  {
    Error_Handler();
34180e6c:	f000 f85a 	bl	34180f24 <Error_Handler>
  }
}
34180e70:	bf00      	nop
34180e72:	37d8      	adds	r7, #216	@ 0xd8
34180e74:	46bd      	mov	sp, r7
34180e76:	bd80      	pop	{r7, pc}

34180e78 <MPU_Config>:
  return retr;
}
#endif /* NO_OTP_FUSE */

static void MPU_Config(void)
{
34180e78:	b580      	push	{r7, lr}
34180e7a:	b088      	sub	sp, #32
34180e7c:	af00      	add	r7, sp, #0
  /*
   * XSPI2 0x70000000 128MB FLASH (1-Gbit   Octo-SPI)
   * XSPI1 0x90000000  32MB PSRAM (256-Mbit Hexadeca-SPI)
   */
  MPU_Region_InitTypeDef default_config = {0};
34180e7e:	1d3b      	adds	r3, r7, #4
34180e80:	2200      	movs	r2, #0
34180e82:	601a      	str	r2, [r3, #0]
34180e84:	605a      	str	r2, [r3, #4]
34180e86:	609a      	str	r2, [r3, #8]
34180e88:	60da      	str	r2, [r3, #12]
  MPU_Attributes_InitTypeDef attr_config = {0};
34180e8a:	2300      	movs	r3, #0
34180e8c:	803b      	strh	r3, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
34180e8e:	f3ef 8310 	mrs	r3, PRIMASK
34180e92:	617b      	str	r3, [r7, #20]
  return(result);
34180e94:	697b      	ldr	r3, [r7, #20]
  uint32_t primask_bit = __get_PRIMASK();
34180e96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
34180e98:	b672      	cpsid	i
}
34180e9a:	bf00      	nop
  __disable_irq();

  /* disable the MPU */
  HAL_MPU_Disable();
34180e9c:	f001 f9de 	bl	3418225c <HAL_MPU_Disable>

  /* create an attribute configuration for the MPU */
  attr_config.Attributes = INNER_OUTER(MPU_WRITE_BACK | MPU_NON_TRANSIENT | MPU_RW_ALLOCATE);
34180ea0:	23ff      	movs	r3, #255	@ 0xff
34180ea2:	707b      	strb	r3, [r7, #1]
  attr_config.Number = MPU_ATTRIBUTES_NUMBER0;
34180ea4:	2300      	movs	r3, #0
34180ea6:	703b      	strb	r3, [r7, #0]

  HAL_MPU_ConfigMemoryAttributes(&attr_config);
34180ea8:	463b      	mov	r3, r7
34180eaa:	4618      	mov	r0, r3
34180eac:	f001 fa04 	bl	341822b8 <HAL_MPU_ConfigMemoryAttributes>

  /* Create a region associated with memory address 0x70000000 */
  /*Normal memory type, code execution allowed */
  default_config.Number = MPU_REGION_NUMBER0;
34180eb0:	2300      	movs	r3, #0
34180eb2:	717b      	strb	r3, [r7, #5]
  default_config.Enable = MPU_REGION_ENABLE;
34180eb4:	2301      	movs	r3, #1
34180eb6:	713b      	strb	r3, [r7, #4]
  default_config.BaseAddress = XSPI2_BASE; /* FLASH 128MB 0x70000000 */
34180eb8:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
34180ebc:	60bb      	str	r3, [r7, #8]
  default_config.LimitAddress = XSPI2_BASE + 0x08000000-1;
34180ebe:	f06f 4308 	mvn.w	r3, #2281701376	@ 0x88000000
34180ec2:	60fb      	str	r3, [r7, #12]
  default_config.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
34180ec4:	2300      	movs	r3, #0
34180ec6:	747b      	strb	r3, [r7, #17]
  default_config.AccessPermission = MPU_REGION_ALL_RO;
34180ec8:	2303      	movs	r3, #3
34180eca:	743b      	strb	r3, [r7, #16]
  default_config.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
34180ecc:	2300      	movs	r3, #0
34180ece:	74fb      	strb	r3, [r7, #19]
  default_config.AttributesIndex = MPU_ATTRIBUTES_NUMBER0;
34180ed0:	2300      	movs	r3, #0
34180ed2:	71bb      	strb	r3, [r7, #6]
  HAL_MPU_ConfigRegion(&default_config);
34180ed4:	1d3b      	adds	r3, r7, #4
34180ed6:	4618      	mov	r0, r3
34180ed8:	f001 f9e0 	bl	3418229c <HAL_MPU_ConfigRegion>

  /* Ensure the FSBL enables MPU access for the PSRAM region before mapping it: */
  default_config.Number = MPU_REGION_NUMBER1;
34180edc:	2301      	movs	r3, #1
34180ede:	717b      	strb	r3, [r7, #5]
  default_config.Enable = MPU_REGION_ENABLE;
34180ee0:	2301      	movs	r3, #1
34180ee2:	713b      	strb	r3, [r7, #4]
  default_config.BaseAddress = XSPI1_BASE; /* PSRAM 32MB 0x90000000 */
34180ee4:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
34180ee8:	60bb      	str	r3, [r7, #8]
  default_config.LimitAddress = XSPI1_BASE + 0x02000000-1;
34180eea:	f06f 43dc 	mvn.w	r3, #1845493760	@ 0x6e000000
34180eee:	60fb      	str	r3, [r7, #12]
//  default_config.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  default_config.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
34180ef0:	2300      	movs	r3, #0
34180ef2:	747b      	strb	r3, [r7, #17]
  default_config.AccessPermission = MPU_REGION_ALL_RW;
34180ef4:	2301      	movs	r3, #1
34180ef6:	743b      	strb	r3, [r7, #16]
  default_config.IsShareable = MPU_ACCESS_INNER_SHAREABLE | MPU_ACCESS_OUTER_SHAREABLE;
34180ef8:	2303      	movs	r3, #3
34180efa:	74fb      	strb	r3, [r7, #19]
//  default_config.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  default_config.AttributesIndex = MPU_ATTRIBUTES_NUMBER0;
34180efc:	2300      	movs	r3, #0
34180efe:	71bb      	strb	r3, [r7, #6]
//  default_config.Size = MPU_REGION_SIZE_64MB;
//  default_config.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
//  default_config.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//  default_config.TypeExtField = MPU_TEX_LEVEL0;
//  default_config.SubRegionDisable = 0x00;
  HAL_MPU_ConfigRegion(&default_config);
34180f00:	1d3b      	adds	r3, r7, #4
34180f02:	4618      	mov	r0, r3
34180f04:	f001 f9ca 	bl	3418229c <HAL_MPU_ConfigRegion>

  /* enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
34180f08:	2004      	movs	r0, #4
34180f0a:	f001 f985 	bl	34182218 <HAL_MPU_Enable>
34180f0e:	69fb      	ldr	r3, [r7, #28]
34180f10:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
34180f12:	69bb      	ldr	r3, [r7, #24]
34180f14:	f383 8810 	msr	PRIMASK, r3
}
34180f18:	bf00      	nop

  /* Exit critical section to lock the system and avoid any issue around MPU mechanisme */
  __set_PRIMASK(primask_bit);
}
34180f1a:	bf00      	nop
34180f1c:	3720      	adds	r7, #32
34180f1e:	46bd      	mov	sp, r7
34180f20:	bd80      	pop	{r7, pc}
	...

34180f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
34180f24:	b580      	push	{r7, lr}
34180f26:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
  {
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
34180f28:	2102      	movs	r1, #2
34180f2a:	4806      	ldr	r0, [pc, #24]	@ (34180f44 <Error_Handler+0x20>)
34180f2c:	f001 fc84 	bl	34182838 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
34180f30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
34180f34:	4804      	ldr	r0, [pc, #16]	@ (34180f48 <Error_Handler+0x24>)
34180f36:	f001 fc7f 	bl	34182838 <HAL_GPIO_TogglePin>
//    for (volatile uint32_t i = 0; i < 1000000; i++);
    HAL_Delay(200);
34180f3a:	20c8      	movs	r0, #200	@ 0xc8
34180f3c:	f000 ff66 	bl	34181e0c <HAL_Delay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
34180f40:	bf00      	nop
34180f42:	e7f1      	b.n	34180f28 <Error_Handler+0x4>
34180f44:	56023800 	.word	0x56023800
34180f48:	56021800 	.word	0x56021800

34180f4c <HAL_MspInit>:
/**
  * @brief  Initialize the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
34180f4c:	b480      	push	{r7}
34180f4e:	af00      	add	r7, sp, #0
}
34180f50:	bf00      	nop
34180f52:	46bd      	mov	sp, r7
34180f54:	f85d 7b04 	ldr.w	r7, [sp], #4
34180f58:	4770      	bx	lr

34180f5a <NMI_Handler>:
/**
  * @brief  This function handles NMI exception.
  * @retval None
  */
void NMI_Handler(void)
{
34180f5a:	b480      	push	{r7}
34180f5c:	af00      	add	r7, sp, #0
}
34180f5e:	bf00      	nop
34180f60:	46bd      	mov	sp, r7
34180f62:	f85d 7b04 	ldr.w	r7, [sp], #4
34180f66:	4770      	bx	lr

34180f68 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @retval None
  */
void HardFault_Handler(void)
{
34180f68:	b580      	push	{r7, lr}
34180f6a:	b082      	sub	sp, #8
34180f6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
34180f6e:	2102      	movs	r1, #2
34180f70:	4809      	ldr	r0, [pc, #36]	@ (34180f98 <HardFault_Handler+0x30>)
34180f72:	f001 fc61 	bl	34182838 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
34180f76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
34180f7a:	4808      	ldr	r0, [pc, #32]	@ (34180f9c <HardFault_Handler+0x34>)
34180f7c:	f001 fc5c 	bl	34182838 <HAL_GPIO_TogglePin>
    for (volatile uint32_t i = 0; i < 20000000; i++);
34180f80:	2300      	movs	r3, #0
34180f82:	607b      	str	r3, [r7, #4]
34180f84:	e002      	b.n	34180f8c <HardFault_Handler+0x24>
34180f86:	687b      	ldr	r3, [r7, #4]
34180f88:	3301      	adds	r3, #1
34180f8a:	607b      	str	r3, [r7, #4]
34180f8c:	687b      	ldr	r3, [r7, #4]
34180f8e:	4a04      	ldr	r2, [pc, #16]	@ (34180fa0 <HardFault_Handler+0x38>)
34180f90:	4293      	cmp	r3, r2
34180f92:	d9f8      	bls.n	34180f86 <HardFault_Handler+0x1e>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
34180f94:	e7eb      	b.n	34180f6e <HardFault_Handler+0x6>
34180f96:	bf00      	nop
34180f98:	56023800 	.word	0x56023800
34180f9c:	56021800 	.word	0x56021800
34180fa0:	01312cff 	.word	0x01312cff

34180fa4 <MemManage_Handler>:
/**
  * @brief  This function handles Memory Manage exception.
  * @retval None
  */
void MemManage_Handler(void)
{
34180fa4:	b480      	push	{r7}
34180fa6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
34180fa8:	bf00      	nop
34180faa:	e7fd      	b.n	34180fa8 <MemManage_Handler+0x4>

34180fac <BusFault_Handler>:
/**
  * @brief  This function handles Bus Fault exception.
  * @retval None
  */
void BusFault_Handler(void)
{
34180fac:	b480      	push	{r7}
34180fae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
34180fb0:	bf00      	nop
34180fb2:	e7fd      	b.n	34180fb0 <BusFault_Handler+0x4>

34180fb4 <UsageFault_Handler>:
/**
  * @brief  This function handles Usage Fault exception.
  * @retval None
  */
void UsageFault_Handler(void)
{
34180fb4:	b480      	push	{r7}
34180fb6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
34180fb8:	bf00      	nop
34180fba:	e7fd      	b.n	34180fb8 <UsageFault_Handler+0x4>

34180fbc <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @retval None
  */
void SVC_Handler(void)
{
34180fbc:	b480      	push	{r7}
34180fbe:	af00      	add	r7, sp, #0
}
34180fc0:	bf00      	nop
34180fc2:	46bd      	mov	sp, r7
34180fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
34180fc8:	4770      	bx	lr

34180fca <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @retval None
  */
void DebugMon_Handler(void)
{
34180fca:	b480      	push	{r7}
34180fcc:	af00      	add	r7, sp, #0
  while (1)
34180fce:	bf00      	nop
34180fd0:	e7fd      	b.n	34180fce <DebugMon_Handler+0x4>

34180fd2 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @retval None
  */
void PendSV_Handler(void)
{
34180fd2:	b480      	push	{r7}
34180fd4:	af00      	add	r7, sp, #0
  while (1)
34180fd6:	bf00      	nop
34180fd8:	e7fd      	b.n	34180fd6 <PendSV_Handler+0x4>

34180fda <SysTick_Handler>:
/**
  * @brief  This function handles SysTick Handler.
  * @retval None
  */
void SysTick_Handler(void)
{
34180fda:	b580      	push	{r7, lr}
34180fdc:	af00      	add	r7, sp, #0
  HAL_IncTick();
34180fde:	f000 fef5 	bl	34181dcc <HAL_IncTick>
}
34180fe2:	bf00      	nop
34180fe4:	bd80      	pop	{r7, pc}

34180fe6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
34180fe6:	b580      	push	{r7, lr}
34180fe8:	b086      	sub	sp, #24
34180fea:	af00      	add	r7, sp, #0
34180fec:	60f8      	str	r0, [r7, #12]
34180fee:	60b9      	str	r1, [r7, #8]
34180ff0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34180ff2:	2300      	movs	r3, #0
34180ff4:	617b      	str	r3, [r7, #20]
34180ff6:	e00a      	b.n	3418100e <_read+0x28>
  {
    *ptr++ = __io_getchar();
34180ff8:	f3af 8000 	nop.w
34180ffc:	4601      	mov	r1, r0
34180ffe:	68bb      	ldr	r3, [r7, #8]
34181000:	1c5a      	adds	r2, r3, #1
34181002:	60ba      	str	r2, [r7, #8]
34181004:	b2ca      	uxtb	r2, r1
34181006:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34181008:	697b      	ldr	r3, [r7, #20]
3418100a:	3301      	adds	r3, #1
3418100c:	617b      	str	r3, [r7, #20]
3418100e:	697a      	ldr	r2, [r7, #20]
34181010:	687b      	ldr	r3, [r7, #4]
34181012:	429a      	cmp	r2, r3
34181014:	dbf0      	blt.n	34180ff8 <_read+0x12>
  }

  return len;
34181016:	687b      	ldr	r3, [r7, #4]
}
34181018:	4618      	mov	r0, r3
3418101a:	3718      	adds	r7, #24
3418101c:	46bd      	mov	sp, r7
3418101e:	bd80      	pop	{r7, pc}

34181020 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
34181020:	b580      	push	{r7, lr}
34181022:	b086      	sub	sp, #24
34181024:	af00      	add	r7, sp, #0
34181026:	60f8      	str	r0, [r7, #12]
34181028:	60b9      	str	r1, [r7, #8]
3418102a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
3418102c:	2300      	movs	r3, #0
3418102e:	617b      	str	r3, [r7, #20]
34181030:	e009      	b.n	34181046 <_write+0x26>
  {
    __io_putchar(*ptr++);
34181032:	68bb      	ldr	r3, [r7, #8]
34181034:	1c5a      	adds	r2, r3, #1
34181036:	60ba      	str	r2, [r7, #8]
34181038:	781b      	ldrb	r3, [r3, #0]
3418103a:	4618      	mov	r0, r3
3418103c:	f7ff fde0 	bl	34180c00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34181040:	697b      	ldr	r3, [r7, #20]
34181042:	3301      	adds	r3, #1
34181044:	617b      	str	r3, [r7, #20]
34181046:	697a      	ldr	r2, [r7, #20]
34181048:	687b      	ldr	r3, [r7, #4]
3418104a:	429a      	cmp	r2, r3
3418104c:	dbf1      	blt.n	34181032 <_write+0x12>
  }
  return len;
3418104e:	687b      	ldr	r3, [r7, #4]
}
34181050:	4618      	mov	r0, r3
34181052:	3718      	adds	r7, #24
34181054:	46bd      	mov	sp, r7
34181056:	bd80      	pop	{r7, pc}

34181058 <_close>:

int _close(int file)
{
34181058:	b480      	push	{r7}
3418105a:	b083      	sub	sp, #12
3418105c:	af00      	add	r7, sp, #0
3418105e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
34181060:	f04f 33ff 	mov.w	r3, #4294967295
}
34181064:	4618      	mov	r0, r3
34181066:	370c      	adds	r7, #12
34181068:	46bd      	mov	sp, r7
3418106a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418106e:	4770      	bx	lr

34181070 <_fstat>:


int _fstat(int file, struct stat *st)
{
34181070:	b480      	push	{r7}
34181072:	b083      	sub	sp, #12
34181074:	af00      	add	r7, sp, #0
34181076:	6078      	str	r0, [r7, #4]
34181078:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
3418107a:	683b      	ldr	r3, [r7, #0]
3418107c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34181080:	605a      	str	r2, [r3, #4]
  return 0;
34181082:	2300      	movs	r3, #0
}
34181084:	4618      	mov	r0, r3
34181086:	370c      	adds	r7, #12
34181088:	46bd      	mov	sp, r7
3418108a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418108e:	4770      	bx	lr

34181090 <_isatty>:

int _isatty(int file)
{
34181090:	b480      	push	{r7}
34181092:	b083      	sub	sp, #12
34181094:	af00      	add	r7, sp, #0
34181096:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
34181098:	2301      	movs	r3, #1
}
3418109a:	4618      	mov	r0, r3
3418109c:	370c      	adds	r7, #12
3418109e:	46bd      	mov	sp, r7
341810a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341810a4:	4770      	bx	lr

341810a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
341810a6:	b480      	push	{r7}
341810a8:	b085      	sub	sp, #20
341810aa:	af00      	add	r7, sp, #0
341810ac:	60f8      	str	r0, [r7, #12]
341810ae:	60b9      	str	r1, [r7, #8]
341810b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
341810b2:	2300      	movs	r3, #0
}
341810b4:	4618      	mov	r0, r3
341810b6:	3714      	adds	r7, #20
341810b8:	46bd      	mov	sp, r7
341810ba:	f85d 7b04 	ldr.w	r7, [sp], #4
341810be:	4770      	bx	lr

341810c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
341810c0:	b580      	push	{r7, lr}
341810c2:	b086      	sub	sp, #24
341810c4:	af00      	add	r7, sp, #0
341810c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
341810c8:	4a14      	ldr	r2, [pc, #80]	@ (3418111c <_sbrk+0x5c>)
341810ca:	4b15      	ldr	r3, [pc, #84]	@ (34181120 <_sbrk+0x60>)
341810cc:	1ad3      	subs	r3, r2, r3
341810ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
341810d0:	697b      	ldr	r3, [r7, #20]
341810d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
341810d4:	4b13      	ldr	r3, [pc, #76]	@ (34181124 <_sbrk+0x64>)
341810d6:	681b      	ldr	r3, [r3, #0]
341810d8:	2b00      	cmp	r3, #0
341810da:	d102      	bne.n	341810e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
341810dc:	4b11      	ldr	r3, [pc, #68]	@ (34181124 <_sbrk+0x64>)
341810de:	4a12      	ldr	r2, [pc, #72]	@ (34181128 <_sbrk+0x68>)
341810e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
341810e2:	4b10      	ldr	r3, [pc, #64]	@ (34181124 <_sbrk+0x64>)
341810e4:	681a      	ldr	r2, [r3, #0]
341810e6:	687b      	ldr	r3, [r7, #4]
341810e8:	4413      	add	r3, r2
341810ea:	693a      	ldr	r2, [r7, #16]
341810ec:	429a      	cmp	r2, r3
341810ee:	d207      	bcs.n	34181100 <_sbrk+0x40>
  {
    errno = ENOMEM;
341810f0:	f00f fe60 	bl	34190db4 <__errno>
341810f4:	4603      	mov	r3, r0
341810f6:	220c      	movs	r2, #12
341810f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
341810fa:	f04f 33ff 	mov.w	r3, #4294967295
341810fe:	e009      	b.n	34181114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
34181100:	4b08      	ldr	r3, [pc, #32]	@ (34181124 <_sbrk+0x64>)
34181102:	681b      	ldr	r3, [r3, #0]
34181104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
34181106:	4b07      	ldr	r3, [pc, #28]	@ (34181124 <_sbrk+0x64>)
34181108:	681a      	ldr	r2, [r3, #0]
3418110a:	687b      	ldr	r3, [r7, #4]
3418110c:	4413      	add	r3, r2
3418110e:	4a05      	ldr	r2, [pc, #20]	@ (34181124 <_sbrk+0x64>)
34181110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
34181112:	68fb      	ldr	r3, [r7, #12]
}
34181114:	4618      	mov	r0, r3
34181116:	3718      	adds	r7, #24
34181118:	46bd      	mov	sp, r7
3418111a:	bd80      	pop	{r7, pc}
3418111c:	34200000 	.word	0x34200000
34181120:	00001000 	.word	0x00001000
34181124:	341c0134 	.word	0x341c0134
34181128:	341c0578 	.word	0x341c0578

3418112c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
3418112c:	b480      	push	{r7}
3418112e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34181130:	4b5d      	ldr	r3, [pc, #372]	@ (341812a8 <SystemInit+0x17c>)
34181132:	4a5e      	ldr	r2, [pc, #376]	@ (341812ac <SystemInit+0x180>)
34181134:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34181136:	4b5e      	ldr	r3, [pc, #376]	@ (341812b0 <SystemInit+0x184>)
34181138:	2201      	movs	r2, #1
3418113a:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
3418113e:	4b5c      	ldr	r3, [pc, #368]	@ (341812b0 <SystemInit+0x184>)
34181140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181144:	461a      	mov	r2, r3
34181146:	2301      	movs	r3, #1
34181148:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
3418114c:	4b58      	ldr	r3, [pc, #352]	@ (341812b0 <SystemInit+0x184>)
3418114e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181152:	461a      	mov	r2, r3
34181154:	2301      	movs	r3, #1
34181156:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
3418115a:	4b56      	ldr	r3, [pc, #344]	@ (341812b4 <SystemInit+0x188>)
3418115c:	2200      	movs	r2, #0
3418115e:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34181160:	4b54      	ldr	r3, [pc, #336]	@ (341812b4 <SystemInit+0x188>)
34181162:	2200      	movs	r2, #0
34181164:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34181166:	4b53      	ldr	r3, [pc, #332]	@ (341812b4 <SystemInit+0x188>)
34181168:	2200      	movs	r2, #0
3418116a:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
3418116c:	4b51      	ldr	r3, [pc, #324]	@ (341812b4 <SystemInit+0x188>)
3418116e:	2201      	movs	r2, #1
34181170:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34181172:	4b50      	ldr	r3, [pc, #320]	@ (341812b4 <SystemInit+0x188>)
34181174:	2200      	movs	r2, #0
34181176:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34181178:	4b4e      	ldr	r3, [pc, #312]	@ (341812b4 <SystemInit+0x188>)
3418117a:	2200      	movs	r2, #0
3418117c:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
3418117e:	4b4d      	ldr	r3, [pc, #308]	@ (341812b4 <SystemInit+0x188>)
34181180:	2202      	movs	r2, #2
34181182:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34181184:	4b4b      	ldr	r3, [pc, #300]	@ (341812b4 <SystemInit+0x188>)
34181186:	2200      	movs	r2, #0
34181188:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418118a:	4b4a      	ldr	r3, [pc, #296]	@ (341812b4 <SystemInit+0x188>)
3418118c:	2200      	movs	r2, #0
3418118e:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
34181190:	4b48      	ldr	r3, [pc, #288]	@ (341812b4 <SystemInit+0x188>)
34181192:	2203      	movs	r2, #3
34181194:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34181196:	4b47      	ldr	r3, [pc, #284]	@ (341812b4 <SystemInit+0x188>)
34181198:	2200      	movs	r2, #0
3418119a:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418119c:	4b45      	ldr	r3, [pc, #276]	@ (341812b4 <SystemInit+0x188>)
3418119e:	2200      	movs	r2, #0
341811a0:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
341811a2:	4b44      	ldr	r3, [pc, #272]	@ (341812b4 <SystemInit+0x188>)
341811a4:	2204      	movs	r2, #4
341811a6:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341811a8:	4b42      	ldr	r3, [pc, #264]	@ (341812b4 <SystemInit+0x188>)
341811aa:	2200      	movs	r2, #0
341811ac:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341811ae:	4b41      	ldr	r3, [pc, #260]	@ (341812b4 <SystemInit+0x188>)
341811b0:	2200      	movs	r2, #0
341811b2:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
341811b4:	4b3f      	ldr	r3, [pc, #252]	@ (341812b4 <SystemInit+0x188>)
341811b6:	2205      	movs	r2, #5
341811b8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341811ba:	4b3e      	ldr	r3, [pc, #248]	@ (341812b4 <SystemInit+0x188>)
341811bc:	2200      	movs	r2, #0
341811be:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341811c0:	4b3c      	ldr	r3, [pc, #240]	@ (341812b4 <SystemInit+0x188>)
341811c2:	2200      	movs	r2, #0
341811c4:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
341811c6:	4b3b      	ldr	r3, [pc, #236]	@ (341812b4 <SystemInit+0x188>)
341811c8:	2206      	movs	r2, #6
341811ca:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341811cc:	4b39      	ldr	r3, [pc, #228]	@ (341812b4 <SystemInit+0x188>)
341811ce:	2200      	movs	r2, #0
341811d0:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341811d2:	4b38      	ldr	r3, [pc, #224]	@ (341812b4 <SystemInit+0x188>)
341811d4:	2200      	movs	r2, #0
341811d6:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
341811d8:	4b36      	ldr	r3, [pc, #216]	@ (341812b4 <SystemInit+0x188>)
341811da:	2207      	movs	r2, #7
341811dc:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341811de:	4b35      	ldr	r3, [pc, #212]	@ (341812b4 <SystemInit+0x188>)
341811e0:	2200      	movs	r2, #0
341811e2:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341811e4:	4b33      	ldr	r3, [pc, #204]	@ (341812b4 <SystemInit+0x188>)
341811e6:	2200      	movs	r2, #0
341811e8:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
341811ea:	4b31      	ldr	r3, [pc, #196]	@ (341812b0 <SystemInit+0x184>)
341811ec:	2201      	movs	r2, #1
341811ee:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
341811f2:	4b2f      	ldr	r3, [pc, #188]	@ (341812b0 <SystemInit+0x184>)
341811f4:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
341811f8:	4b2b      	ldr	r3, [pc, #172]	@ (341812a8 <SystemInit+0x17c>)
341811fa:	4a2f      	ldr	r2, [pc, #188]	@ (341812b8 <SystemInit+0x18c>)
341811fc:	689b      	ldr	r3, [r3, #8]
341811fe:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34181200:	4b2e      	ldr	r3, [pc, #184]	@ (341812bc <SystemInit+0x190>)
34181202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34181204:	4a2d      	ldr	r2, [pc, #180]	@ (341812bc <SystemInit+0x190>)
34181206:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
3418120a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
3418120c:	4b2b      	ldr	r3, [pc, #172]	@ (341812bc <SystemInit+0x190>)
3418120e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34181210:	4a2a      	ldr	r2, [pc, #168]	@ (341812bc <SystemInit+0x190>)
34181212:	f043 0310 	orr.w	r3, r3, #16
34181216:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34181218:	4b28      	ldr	r3, [pc, #160]	@ (341812bc <SystemInit+0x190>)
3418121a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
3418121c:	4b24      	ldr	r3, [pc, #144]	@ (341812b0 <SystemInit+0x184>)
3418121e:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
34181222:	4a23      	ldr	r2, [pc, #140]	@ (341812b0 <SystemInit+0x184>)
34181224:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34181228:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
3418122c:	4b20      	ldr	r3, [pc, #128]	@ (341812b0 <SystemInit+0x184>)
3418122e:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34181232:	4a1f      	ldr	r2, [pc, #124]	@ (341812b0 <SystemInit+0x184>)
34181234:	f043 0310 	orr.w	r3, r3, #16
34181238:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
3418123c:	4b1c      	ldr	r3, [pc, #112]	@ (341812b0 <SystemInit+0x184>)
3418123e:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
34181242:	4b1b      	ldr	r3, [pc, #108]	@ (341812b0 <SystemInit+0x184>)
34181244:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34181248:	4a19      	ldr	r2, [pc, #100]	@ (341812b0 <SystemInit+0x184>)
3418124a:	f023 0310 	bic.w	r3, r3, #16
3418124e:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
34181252:	4b17      	ldr	r3, [pc, #92]	@ (341812b0 <SystemInit+0x184>)
34181254:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34181258:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
3418125c:	4b14      	ldr	r3, [pc, #80]	@ (341812b0 <SystemInit+0x184>)
3418125e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181262:	461a      	mov	r2, r3
34181264:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34181268:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
3418126c:	4b12      	ldr	r3, [pc, #72]	@ (341812b8 <SystemInit+0x18c>)
3418126e:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
34181270:	4b0f      	ldr	r3, [pc, #60]	@ (341812b0 <SystemInit+0x184>)
34181272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181276:	461a      	mov	r2, r3
34181278:	2301      	movs	r3, #1
3418127a:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
3418127e:	4b0a      	ldr	r3, [pc, #40]	@ (341812a8 <SystemInit+0x17c>)
34181280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34181284:	4a08      	ldr	r2, [pc, #32]	@ (341812a8 <SystemInit+0x17c>)
34181286:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3418128a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
3418128e:	4b0c      	ldr	r3, [pc, #48]	@ (341812c0 <SystemInit+0x194>)
34181290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34181294:	4a0a      	ldr	r2, [pc, #40]	@ (341812c0 <SystemInit+0x194>)
34181296:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3418129a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
3418129e:	bf00      	nop
341812a0:	46bd      	mov	sp, r7
341812a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341812a6:	4770      	bx	lr
341812a8:	e000ed00 	.word	0xe000ed00
341812ac:	34180400 	.word	0x34180400
341812b0:	56028000 	.word	0x56028000
341812b4:	e000edd0 	.word	0xe000edd0
341812b8:	56008000 	.word	0x56008000
341812bc:	56024800 	.word	0x56024800
341812c0:	e002ed00 	.word	0xe002ed00

341812c4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
341812c4:	b480      	push	{r7}
341812c6:	b08d      	sub	sp, #52	@ 0x34
341812c8:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
341812ca:	2300      	movs	r3, #0
341812cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
341812ce:	2300      	movs	r3, #0
341812d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
341812d2:	2300      	movs	r3, #0
341812d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
341812d6:	2300      	movs	r3, #0
341812d8:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
341812da:	2300      	movs	r3, #0
341812dc:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
341812de:	2300      	movs	r3, #0
341812e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
341812e2:	4b9b      	ldr	r3, [pc, #620]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
341812e4:	6a1b      	ldr	r3, [r3, #32]
341812e6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
341812ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341812ee:	d029      	beq.n	34181344 <SystemCoreClockUpdate+0x80>
341812f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341812f4:	f200 8180 	bhi.w	341815f8 <SystemCoreClockUpdate+0x334>
341812f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341812fc:	d01f      	beq.n	3418133e <SystemCoreClockUpdate+0x7a>
341812fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34181302:	f200 8179 	bhi.w	341815f8 <SystemCoreClockUpdate+0x334>
34181306:	2b00      	cmp	r3, #0
34181308:	d003      	beq.n	34181312 <SystemCoreClockUpdate+0x4e>
3418130a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418130e:	d00a      	beq.n	34181326 <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
34181310:	e172      	b.n	341815f8 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34181312:	4b8f      	ldr	r3, [pc, #572]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
34181314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181316:	09db      	lsrs	r3, r3, #7
34181318:	f003 0303 	and.w	r3, r3, #3
3418131c:	4a8d      	ldr	r2, [pc, #564]	@ (34181554 <SystemCoreClockUpdate+0x290>)
3418131e:	fa22 f303 	lsr.w	r3, r2, r3
34181322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34181324:	e169      	b.n	341815fa <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34181326:	4b8a      	ldr	r3, [pc, #552]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
34181328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418132a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418132e:	2b00      	cmp	r3, #0
34181330:	d102      	bne.n	34181338 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
34181332:	4b89      	ldr	r3, [pc, #548]	@ (34181558 <SystemCoreClockUpdate+0x294>)
34181334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34181336:	e160      	b.n	341815fa <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
34181338:	4b88      	ldr	r3, [pc, #544]	@ (3418155c <SystemCoreClockUpdate+0x298>)
3418133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
3418133c:	e15d      	b.n	341815fa <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
3418133e:	4b88      	ldr	r3, [pc, #544]	@ (34181560 <SystemCoreClockUpdate+0x29c>)
34181340:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34181342:	e15a      	b.n	341815fa <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34181344:	4b82      	ldr	r3, [pc, #520]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
34181346:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418134a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3418134e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181352:	d066      	beq.n	34181422 <SystemCoreClockUpdate+0x15e>
34181354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181358:	f200 8091 	bhi.w	3418147e <SystemCoreClockUpdate+0x1ba>
3418135c:	2b00      	cmp	r3, #0
3418135e:	d003      	beq.n	34181368 <SystemCoreClockUpdate+0xa4>
34181360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34181364:	d02f      	beq.n	341813c6 <SystemCoreClockUpdate+0x102>
34181366:	e08a      	b.n	3418147e <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34181368:	4b79      	ldr	r3, [pc, #484]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
3418136a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418136e:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34181370:	68fb      	ldr	r3, [r7, #12]
34181372:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34181376:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
34181378:	68fb      	ldr	r3, [r7, #12]
3418137a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418137e:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34181380:	693b      	ldr	r3, [r7, #16]
34181382:	2b00      	cmp	r3, #0
34181384:	f040 80a9 	bne.w	341814da <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
34181388:	68fb      	ldr	r3, [r7, #12]
3418138a:	0d1b      	lsrs	r3, r3, #20
3418138c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34181390:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34181392:	68fb      	ldr	r3, [r7, #12]
34181394:	0a1b      	lsrs	r3, r3, #8
34181396:	f3c3 030b 	ubfx	r3, r3, #0, #12
3418139a:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3418139c:	4b6c      	ldr	r3, [pc, #432]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
3418139e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
341813a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341813a6:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
341813a8:	4b69      	ldr	r3, [pc, #420]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
341813aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341813ae:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
341813b0:	68fb      	ldr	r3, [r7, #12]
341813b2:	0edb      	lsrs	r3, r3, #27
341813b4:	f003 0307 	and.w	r3, r3, #7
341813b8:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
341813ba:	68fb      	ldr	r3, [r7, #12]
341813bc:	0e1b      	lsrs	r3, r3, #24
341813be:	f003 0307 	and.w	r3, r3, #7
341813c2:	61bb      	str	r3, [r7, #24]
      break;
341813c4:	e089      	b.n	341814da <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
341813c6:	4b62      	ldr	r3, [pc, #392]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
341813c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341813cc:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
341813ce:	68fb      	ldr	r3, [r7, #12]
341813d0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341813d4:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
341813d6:	68fb      	ldr	r3, [r7, #12]
341813d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341813dc:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341813de:	693b      	ldr	r3, [r7, #16]
341813e0:	2b00      	cmp	r3, #0
341813e2:	d17c      	bne.n	341814de <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
341813e4:	68fb      	ldr	r3, [r7, #12]
341813e6:	0d1b      	lsrs	r3, r3, #20
341813e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341813ec:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
341813ee:	68fb      	ldr	r3, [r7, #12]
341813f0:	0a1b      	lsrs	r3, r3, #8
341813f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
341813f6:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
341813f8:	4b55      	ldr	r3, [pc, #340]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
341813fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341813fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34181402:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34181404:	4b52      	ldr	r3, [pc, #328]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
34181406:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3418140a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
3418140c:	68fb      	ldr	r3, [r7, #12]
3418140e:	0edb      	lsrs	r3, r3, #27
34181410:	f003 0307 	and.w	r3, r3, #7
34181414:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
34181416:	68fb      	ldr	r3, [r7, #12]
34181418:	0e1b      	lsrs	r3, r3, #24
3418141a:	f003 0307 	and.w	r3, r3, #7
3418141e:	61bb      	str	r3, [r7, #24]
      break;
34181420:	e05d      	b.n	341814de <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
34181422:	4b4b      	ldr	r3, [pc, #300]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
34181424:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34181428:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
3418142a:	68fb      	ldr	r3, [r7, #12]
3418142c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34181430:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
34181432:	68fb      	ldr	r3, [r7, #12]
34181434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34181438:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3418143a:	693b      	ldr	r3, [r7, #16]
3418143c:	2b00      	cmp	r3, #0
3418143e:	d150      	bne.n	341814e2 <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
34181440:	68fb      	ldr	r3, [r7, #12]
34181442:	0d1b      	lsrs	r3, r3, #20
34181444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34181448:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
3418144a:	68fb      	ldr	r3, [r7, #12]
3418144c:	0a1b      	lsrs	r3, r3, #8
3418144e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34181452:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34181454:	4b3e      	ldr	r3, [pc, #248]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
34181456:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418145a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3418145e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34181460:	4b3b      	ldr	r3, [pc, #236]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
34181462:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34181466:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
34181468:	68fb      	ldr	r3, [r7, #12]
3418146a:	0edb      	lsrs	r3, r3, #27
3418146c:	f003 0307 	and.w	r3, r3, #7
34181470:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
34181472:	68fb      	ldr	r3, [r7, #12]
34181474:	0e1b      	lsrs	r3, r3, #24
34181476:	f003 0307 	and.w	r3, r3, #7
3418147a:	61bb      	str	r3, [r7, #24]
      break;
3418147c:	e031      	b.n	341814e2 <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
3418147e:	4b34      	ldr	r3, [pc, #208]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
34181480:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34181484:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34181486:	68fb      	ldr	r3, [r7, #12]
34181488:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
3418148c:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
3418148e:	68fb      	ldr	r3, [r7, #12]
34181490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34181494:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34181496:	693b      	ldr	r3, [r7, #16]
34181498:	2b00      	cmp	r3, #0
3418149a:	d124      	bne.n	341814e6 <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
3418149c:	68fb      	ldr	r3, [r7, #12]
3418149e:	0d1b      	lsrs	r3, r3, #20
341814a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341814a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
341814a6:	68fb      	ldr	r3, [r7, #12]
341814a8:	0a1b      	lsrs	r3, r3, #8
341814aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
341814ae:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
341814b0:	4b27      	ldr	r3, [pc, #156]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
341814b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
341814b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341814ba:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
341814bc:	4b24      	ldr	r3, [pc, #144]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
341814be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341814c2:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
341814c4:	68fb      	ldr	r3, [r7, #12]
341814c6:	0edb      	lsrs	r3, r3, #27
341814c8:	f003 0307 	and.w	r3, r3, #7
341814cc:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
341814ce:	68fb      	ldr	r3, [r7, #12]
341814d0:	0e1b      	lsrs	r3, r3, #24
341814d2:	f003 0307 	and.w	r3, r3, #7
341814d6:	61bb      	str	r3, [r7, #24]
      break;
341814d8:	e005      	b.n	341814e6 <SystemCoreClockUpdate+0x222>
      break;
341814da:	bf00      	nop
341814dc:	e004      	b.n	341814e8 <SystemCoreClockUpdate+0x224>
      break;
341814de:	bf00      	nop
341814e0:	e002      	b.n	341814e8 <SystemCoreClockUpdate+0x224>
      break;
341814e2:	bf00      	nop
341814e4:	e000      	b.n	341814e8 <SystemCoreClockUpdate+0x224>
      break;
341814e6:	bf00      	nop
    switch (pllsource)
341814e8:	697b      	ldr	r3, [r7, #20]
341814ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341814ee:	d02c      	beq.n	3418154a <SystemCoreClockUpdate+0x286>
341814f0:	697b      	ldr	r3, [r7, #20]
341814f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341814f6:	d839      	bhi.n	3418156c <SystemCoreClockUpdate+0x2a8>
341814f8:	697b      	ldr	r3, [r7, #20]
341814fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341814fe:	d021      	beq.n	34181544 <SystemCoreClockUpdate+0x280>
34181500:	697b      	ldr	r3, [r7, #20]
34181502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181506:	d831      	bhi.n	3418156c <SystemCoreClockUpdate+0x2a8>
34181508:	697b      	ldr	r3, [r7, #20]
3418150a:	2b00      	cmp	r3, #0
3418150c:	d004      	beq.n	34181518 <SystemCoreClockUpdate+0x254>
3418150e:	697b      	ldr	r3, [r7, #20]
34181510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34181514:	d00a      	beq.n	3418152c <SystemCoreClockUpdate+0x268>
      break;
34181516:	e029      	b.n	3418156c <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34181518:	4b0d      	ldr	r3, [pc, #52]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
3418151a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418151c:	09db      	lsrs	r3, r3, #7
3418151e:	f003 0303 	and.w	r3, r3, #3
34181522:	4a0c      	ldr	r2, [pc, #48]	@ (34181554 <SystemCoreClockUpdate+0x290>)
34181524:	fa22 f303 	lsr.w	r3, r2, r3
34181528:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3418152a:	e020      	b.n	3418156e <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3418152c:	4b08      	ldr	r3, [pc, #32]	@ (34181550 <SystemCoreClockUpdate+0x28c>)
3418152e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34181530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34181534:	2b00      	cmp	r3, #0
34181536:	d102      	bne.n	3418153e <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
34181538:	4b07      	ldr	r3, [pc, #28]	@ (34181558 <SystemCoreClockUpdate+0x294>)
3418153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3418153c:	e017      	b.n	3418156e <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
3418153e:	4b07      	ldr	r3, [pc, #28]	@ (3418155c <SystemCoreClockUpdate+0x298>)
34181540:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181542:	e014      	b.n	3418156e <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
34181544:	4b06      	ldr	r3, [pc, #24]	@ (34181560 <SystemCoreClockUpdate+0x29c>)
34181546:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181548:	e011      	b.n	3418156e <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3418154a:	4b06      	ldr	r3, [pc, #24]	@ (34181564 <SystemCoreClockUpdate+0x2a0>)
3418154c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3418154e:	e00e      	b.n	3418156e <SystemCoreClockUpdate+0x2aa>
34181550:	56028000 	.word	0x56028000
34181554:	03d09000 	.word	0x03d09000
34181558:	003d0900 	.word	0x003d0900
3418155c:	00f42400 	.word	0x00f42400
34181560:	02dc6c00 	.word	0x02dc6c00
34181564:	00bb8000 	.word	0x00bb8000
34181568:	4b800000 	.word	0x4b800000
      break;
3418156c:	bf00      	nop
    if (pllbypass == 0U)
3418156e:	693b      	ldr	r3, [r7, #16]
34181570:	2b00      	cmp	r3, #0
34181572:	d134      	bne.n	341815de <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34181574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34181576:	ee07 3a90 	vmov	s15, r3
3418157a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34181580:	ee07 3a90 	vmov	s15, r3
34181584:	eef8 6a67 	vcvt.f32.u32	s13, s15
34181588:	6a3b      	ldr	r3, [r7, #32]
3418158a:	ee07 3a90 	vmov	s15, r3
3418158e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34181592:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 34181568 <SystemCoreClockUpdate+0x2a4>
34181596:	eec6 7a25 	vdiv.f32	s15, s12, s11
3418159a:	ee76 7aa7 	vadd.f32	s15, s13, s15
3418159e:	ee67 6a27 	vmul.f32	s13, s14, s15
341815a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341815a4:	ee07 3a90 	vmov	s15, r3
341815a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341815ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
341815b0:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
341815b4:	69fb      	ldr	r3, [r7, #28]
341815b6:	ee07 3a90 	vmov	s15, r3
341815ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341815be:	69bb      	ldr	r3, [r7, #24]
341815c0:	ee07 3a90 	vmov	s15, r3
341815c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
341815c8:	ee27 7a27 	vmul.f32	s14, s14, s15
341815cc:	edd7 6a02 	vldr	s13, [r7, #8]
341815d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
341815d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
341815d8:	ee17 3a90 	vmov	r3, s15
341815dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
341815de:	4b0b      	ldr	r3, [pc, #44]	@ (3418160c <SystemCoreClockUpdate+0x348>)
341815e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341815e4:	0c1b      	lsrs	r3, r3, #16
341815e6:	b2db      	uxtb	r3, r3
341815e8:	3301      	adds	r3, #1
341815ea:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
341815ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
341815ee:	687b      	ldr	r3, [r7, #4]
341815f0:	fbb2 f3f3 	udiv	r3, r2, r3
341815f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341815f6:	e000      	b.n	341815fa <SystemCoreClockUpdate+0x336>
    break;
341815f8:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
341815fa:	4a05      	ldr	r2, [pc, #20]	@ (34181610 <SystemCoreClockUpdate+0x34c>)
341815fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341815fe:	6013      	str	r3, [r2, #0]
}
34181600:	bf00      	nop
34181602:	3734      	adds	r7, #52	@ 0x34
34181604:	46bd      	mov	sp, r7
34181606:	f85d 7b04 	ldr.w	r7, [sp], #4
3418160a:	4770      	bx	lr
3418160c:	56028000 	.word	0x56028000
34181610:	341c0000 	.word	0x341c0000

34181614 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34181614:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34181618:	b588      	push	{r3, r7, lr}
3418161a:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
3418161c:	f7ff fe52 	bl	341812c4 <SystemCoreClockUpdate>

  return SystemCoreClock;
34181620:	4b06      	ldr	r3, [pc, #24]	@ (3418163c <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
34181622:	681b      	ldr	r3, [r3, #0]
}
34181624:	4618      	mov	r0, r3
34181626:	46bd      	mov	sp, r7
34181628:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
3418162c:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34181630:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34181634:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34181638:	4774      	bxns	lr
3418163a:	bf00      	nop
3418163c:	341c0000 	.word	0x341c0000

34181640 <LL_AHB4_GRP1_EnableClock>:
{
34181640:	b480      	push	{r7}
34181642:	b085      	sub	sp, #20
34181644:	af00      	add	r7, sp, #0
34181646:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34181648:	4a07      	ldr	r2, [pc, #28]	@ (34181668 <LL_AHB4_GRP1_EnableClock+0x28>)
3418164a:	687b      	ldr	r3, [r7, #4]
3418164c:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34181650:	4b05      	ldr	r3, [pc, #20]	@ (34181668 <LL_AHB4_GRP1_EnableClock+0x28>)
34181652:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34181656:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181658:	68fb      	ldr	r3, [r7, #12]
}
3418165a:	bf00      	nop
3418165c:	3714      	adds	r7, #20
3418165e:	46bd      	mov	sp, r7
34181660:	f85d 7b04 	ldr.w	r7, [sp], #4
34181664:	4770      	bx	lr
34181666:	bf00      	nop
34181668:	56028000 	.word	0x56028000

3418166c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_UART9
  *         @arg @ref LL_APB2_GRP1_PERIPH_USART10
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
3418166c:	b480      	push	{r7}
3418166e:	b085      	sub	sp, #20
34181670:	af00      	add	r7, sp, #0
34181672:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34181674:	4a07      	ldr	r2, [pc, #28]	@ (34181694 <LL_APB2_GRP1_EnableClock+0x28>)
34181676:	687b      	ldr	r3, [r7, #4]
34181678:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
3418167c:	4b05      	ldr	r3, [pc, #20]	@ (34181694 <LL_APB2_GRP1_EnableClock+0x28>)
3418167e:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34181682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181684:	68fb      	ldr	r3, [r7, #12]
}
34181686:	bf00      	nop
34181688:	3714      	adds	r7, #20
3418168a:	46bd      	mov	sp, r7
3418168c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181690:	4770      	bx	lr
34181692:	bf00      	nop
34181694:	56028000 	.word	0x56028000

34181698 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
34181698:	b580      	push	{r7, lr}
3418169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
3418169c:	4b22      	ldr	r3, [pc, #136]	@ (34181728 <MX_USART1_UART_Init+0x90>)
3418169e:	4a23      	ldr	r2, [pc, #140]	@ (3418172c <MX_USART1_UART_Init+0x94>)
341816a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
341816a2:	4b21      	ldr	r3, [pc, #132]	@ (34181728 <MX_USART1_UART_Init+0x90>)
341816a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
341816a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
341816aa:	4b1f      	ldr	r3, [pc, #124]	@ (34181728 <MX_USART1_UART_Init+0x90>)
341816ac:	2200      	movs	r2, #0
341816ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
341816b0:	4b1d      	ldr	r3, [pc, #116]	@ (34181728 <MX_USART1_UART_Init+0x90>)
341816b2:	2200      	movs	r2, #0
341816b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
341816b6:	4b1c      	ldr	r3, [pc, #112]	@ (34181728 <MX_USART1_UART_Init+0x90>)
341816b8:	2200      	movs	r2, #0
341816ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
341816bc:	4b1a      	ldr	r3, [pc, #104]	@ (34181728 <MX_USART1_UART_Init+0x90>)
341816be:	220c      	movs	r2, #12
341816c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
341816c2:	4b19      	ldr	r3, [pc, #100]	@ (34181728 <MX_USART1_UART_Init+0x90>)
341816c4:	2200      	movs	r2, #0
341816c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
341816c8:	4b17      	ldr	r3, [pc, #92]	@ (34181728 <MX_USART1_UART_Init+0x90>)
341816ca:	2200      	movs	r2, #0
341816cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
341816ce:	4b16      	ldr	r3, [pc, #88]	@ (34181728 <MX_USART1_UART_Init+0x90>)
341816d0:	2200      	movs	r2, #0
341816d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
341816d4:	4b14      	ldr	r3, [pc, #80]	@ (34181728 <MX_USART1_UART_Init+0x90>)
341816d6:	2200      	movs	r2, #0
341816d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
341816da:	4b13      	ldr	r3, [pc, #76]	@ (34181728 <MX_USART1_UART_Init+0x90>)
341816dc:	2200      	movs	r2, #0
341816de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
341816e0:	4811      	ldr	r0, [pc, #68]	@ (34181728 <MX_USART1_UART_Init+0x90>)
341816e2:	f00a fdd5 	bl	3418c290 <HAL_UART_Init>
341816e6:	4603      	mov	r3, r0
341816e8:	2b00      	cmp	r3, #0
341816ea:	d001      	beq.n	341816f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
341816ec:	f7ff fc1a 	bl	34180f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
341816f0:	2100      	movs	r1, #0
341816f2:	480d      	ldr	r0, [pc, #52]	@ (34181728 <MX_USART1_UART_Init+0x90>)
341816f4:	f00b faee 	bl	3418ccd4 <HAL_UARTEx_SetTxFifoThreshold>
341816f8:	4603      	mov	r3, r0
341816fa:	2b00      	cmp	r3, #0
341816fc:	d001      	beq.n	34181702 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
341816fe:	f7ff fc11 	bl	34180f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
34181702:	2100      	movs	r1, #0
34181704:	4808      	ldr	r0, [pc, #32]	@ (34181728 <MX_USART1_UART_Init+0x90>)
34181706:	f00b fb23 	bl	3418cd50 <HAL_UARTEx_SetRxFifoThreshold>
3418170a:	4603      	mov	r3, r0
3418170c:	2b00      	cmp	r3, #0
3418170e:	d001      	beq.n	34181714 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
34181710:	f7ff fc08 	bl	34180f24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
34181714:	4804      	ldr	r0, [pc, #16]	@ (34181728 <MX_USART1_UART_Init+0x90>)
34181716:	f00b faa4 	bl	3418cc62 <HAL_UARTEx_DisableFifoMode>
3418171a:	4603      	mov	r3, r0
3418171c:	2b00      	cmp	r3, #0
3418171e:	d001      	beq.n	34181724 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
34181720:	f7ff fc00 	bl	34180f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
34181724:	bf00      	nop
34181726:	bd80      	pop	{r7, pc}
34181728:	341c0138 	.word	0x341c0138
3418172c:	52001000 	.word	0x52001000

34181730 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
34181730:	b580      	push	{r7, lr}
34181732:	b0ec      	sub	sp, #432	@ 0x1b0
34181734:	af00      	add	r7, sp, #0
34181736:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
3418173a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
3418173e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181740:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181744:	2200      	movs	r2, #0
34181746:	601a      	str	r2, [r3, #0]
34181748:	605a      	str	r2, [r3, #4]
3418174a:	609a      	str	r2, [r3, #8]
3418174c:	60da      	str	r2, [r3, #12]
3418174e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181750:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181754:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181758:	4618      	mov	r0, r3
3418175a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
3418175e:	461a      	mov	r2, r3
34181760:	2100      	movs	r1, #0
34181762:	f00f fad9 	bl	34190d18 <memset>
  if(uartHandle->Instance==USART1)
34181766:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
3418176a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
3418176e:	681b      	ldr	r3, [r3, #0]
34181770:	681b      	ldr	r3, [r3, #0]
34181772:	4a25      	ldr	r2, [pc, #148]	@ (34181808 <HAL_UART_MspInit+0xd8>)
34181774:	4293      	cmp	r3, r2
34181776:	d141      	bne.n	341817fc <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
34181778:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
3418177c:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181780:	f04f 0200 	mov.w	r2, #0
34181784:	f44f 7380 	mov.w	r3, #256	@ 0x100
34181788:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_IC14;
3418178c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181790:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181794:	4a1d      	ldr	r2, [pc, #116]	@ (3418180c <HAL_UART_MspInit+0xdc>)
34181796:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    PeriphClkInitStruct.ICSelection[RCC_IC14].ClockSelection = RCC_ICCLKSOURCE_PLL1;
3418179a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
3418179e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341817a2:	2200      	movs	r2, #0
341817a4:	671a      	str	r2, [r3, #112]	@ 0x70
    PeriphClkInitStruct.ICSelection[RCC_IC14].ClockDivider = 16;
341817a6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341817aa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341817ae:	2210      	movs	r2, #16
341817b0:	675a      	str	r2, [r3, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
341817b2:	f107 0308 	add.w	r3, r7, #8
341817b6:	4618      	mov	r0, r3
341817b8:	f004 f8be 	bl	34185938 <HAL_RCCEx_PeriphCLKConfig>
341817bc:	4603      	mov	r3, r0
341817be:	2b00      	cmp	r3, #0
341817c0:	d001      	beq.n	341817c6 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
341817c2:	f7ff fbaf 	bl	34180f24 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
341817c6:	2010      	movs	r0, #16
341817c8:	f7ff ff50 	bl	3418166c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOE_CLK_ENABLE();
341817cc:	2010      	movs	r0, #16
341817ce:	f7ff ff37 	bl	34181640 <LL_AHB4_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PE5     ------> USART1_TX
    PE6     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
341817d2:	2360      	movs	r3, #96	@ 0x60
341817d4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
341817d8:	2302      	movs	r3, #2
341817da:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
341817de:	2300      	movs	r3, #0
341817e0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
341817e4:	2300      	movs	r3, #0
341817e6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
341817ea:	2307      	movs	r3, #7
341817ec:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
341817f0:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
341817f4:	4619      	mov	r1, r3
341817f6:	4806      	ldr	r0, [pc, #24]	@ (34181810 <HAL_UART_MspInit+0xe0>)
341817f8:	f000 fe54 	bl	341824a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
341817fc:	bf00      	nop
341817fe:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181802:	46bd      	mov	sp, r7
34181804:	bd80      	pop	{r7, pc}
34181806:	bf00      	nop
34181808:	52001000 	.word	0x52001000
3418180c:	07030030 	.word	0x07030030
34181810:	56021000 	.word	0x56021000

34181814 <LL_AHB4_GRP1_EnableClock>:
{
34181814:	b480      	push	{r7}
34181816:	b085      	sub	sp, #20
34181818:	af00      	add	r7, sp, #0
3418181a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3418181c:	4a07      	ldr	r2, [pc, #28]	@ (3418183c <LL_AHB4_GRP1_EnableClock+0x28>)
3418181e:	687b      	ldr	r3, [r7, #4]
34181820:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34181824:	4b05      	ldr	r3, [pc, #20]	@ (3418183c <LL_AHB4_GRP1_EnableClock+0x28>)
34181826:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3418182a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
3418182c:	68fb      	ldr	r3, [r7, #12]
}
3418182e:	bf00      	nop
34181830:	3714      	adds	r7, #20
34181832:	46bd      	mov	sp, r7
34181834:	f85d 7b04 	ldr.w	r7, [sp], #4
34181838:	4770      	bx	lr
3418183a:	bf00      	nop
3418183c:	56028000 	.word	0x56028000

34181840 <LL_AHB5_GRP1_EnableClock>:
{
34181840:	b480      	push	{r7}
34181842:	b085      	sub	sp, #20
34181844:	af00      	add	r7, sp, #0
34181846:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34181848:	4a07      	ldr	r2, [pc, #28]	@ (34181868 <LL_AHB5_GRP1_EnableClock+0x28>)
3418184a:	687b      	ldr	r3, [r7, #4]
3418184c:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34181850:	4b05      	ldr	r3, [pc, #20]	@ (34181868 <LL_AHB5_GRP1_EnableClock+0x28>)
34181852:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
34181856:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181858:	68fb      	ldr	r3, [r7, #12]
}
3418185a:	bf00      	nop
3418185c:	3714      	adds	r7, #20
3418185e:	46bd      	mov	sp, r7
34181860:	f85d 7b04 	ldr.w	r7, [sp], #4
34181864:	4770      	bx	lr
34181866:	bf00      	nop
34181868:	56028000 	.word	0x56028000

3418186c <LL_APB4_GRP2_EnableClock>:
  *         @arg @ref LL_APB4_GRP2_PERIPH_SYSCFG
  *         @arg @ref LL_APB4_GRP2_PERIPH_DTS
  * @retval None
  */
__STATIC_INLINE void LL_APB4_GRP2_EnableClock(uint32_t Periphs)
{
3418186c:	b480      	push	{r7}
3418186e:	b085      	sub	sp, #20
34181870:	af00      	add	r7, sp, #0
34181872:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB4ENSR2, Periphs);
34181874:	4a07      	ldr	r2, [pc, #28]	@ (34181894 <LL_APB4_GRP2_EnableClock+0x28>)
34181876:	687b      	ldr	r3, [r7, #4]
34181878:	f8c2 3a78 	str.w	r3, [r2, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB4ENR2);
3418187c:	4b05      	ldr	r3, [pc, #20]	@ (34181894 <LL_APB4_GRP2_EnableClock+0x28>)
3418187e:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34181882:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181884:	68fb      	ldr	r3, [r7, #12]
}
34181886:	bf00      	nop
34181888:	3714      	adds	r7, #20
3418188a:	46bd      	mov	sp, r7
3418188c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181890:	4770      	bx	lr
34181892:	bf00      	nop
34181894:	56028000 	.word	0x56028000

34181898 <MX_XSPI1_Init>:
XSPI_HandleTypeDef hxspi1;
XSPI_HandleTypeDef hxspi2;

/* XSPI1 init function */
void MX_XSPI1_Init(void)
{
34181898:	b580      	push	{r7, lr}
3418189a:	b084      	sub	sp, #16
3418189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI1_Init 0 */

  /* USER CODE END XSPI1_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
3418189e:	1d3b      	adds	r3, r7, #4
341818a0:	2200      	movs	r2, #0
341818a2:	601a      	str	r2, [r3, #0]
341818a4:	605a      	str	r2, [r3, #4]
341818a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI1_Init 1 */

  /* USER CODE END XSPI1_Init 1 */
  /* XSPI1 parameter configuration*/
  hxspi1.Instance = XSPI1;
341818a8:	4b27      	ldr	r3, [pc, #156]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818aa:	4a28      	ldr	r2, [pc, #160]	@ (3418194c <MX_XSPI1_Init+0xb4>)
341818ac:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
341818ae:	4b26      	ldr	r3, [pc, #152]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818b0:	2204      	movs	r2, #4
341818b2:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
341818b4:	4b24      	ldr	r3, [pc, #144]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818b6:	2200      	movs	r2, #0
341818b8:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM_16BITS;
341818ba:	4b23      	ldr	r3, [pc, #140]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818bc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
341818c0:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_256MB;
341818c2:	4b21      	ldr	r3, [pc, #132]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818c4:	2218      	movs	r2, #24
341818c6:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 5;
341818c8:	4b1f      	ldr	r3, [pc, #124]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818ca:	2205      	movs	r2, #5
341818cc:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
341818ce:	4b1e      	ldr	r3, [pc, #120]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818d0:	2200      	movs	r2, #0
341818d2:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
341818d4:	4b1c      	ldr	r3, [pc, #112]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818d6:	2200      	movs	r2, #0
341818d8:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
341818da:	4b1b      	ldr	r3, [pc, #108]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818dc:	2200      	movs	r2, #0
341818de:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 1;
341818e0:	4b19      	ldr	r3, [pc, #100]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818e2:	2201      	movs	r2, #1
341818e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
341818e6:	4b18      	ldr	r3, [pc, #96]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818e8:	2200      	movs	r2, #0
341818ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
341818ec:	4b16      	ldr	r3, [pc, #88]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818ee:	2200      	movs	r2, #0
341818f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_16KB;
341818f2:	4b15      	ldr	r3, [pc, #84]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818f4:	220b      	movs	r2, #11
341818f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
341818f8:	4b13      	ldr	r3, [pc, #76]	@ (34181948 <MX_XSPI1_Init+0xb0>)
341818fa:	2200      	movs	r2, #0
341818fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi1.Init.Refresh = 0;
341818fe:	4b12      	ldr	r3, [pc, #72]	@ (34181948 <MX_XSPI1_Init+0xb0>)
34181900:	2200      	movs	r2, #0
34181902:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
34181904:	4b10      	ldr	r3, [pc, #64]	@ (34181948 <MX_XSPI1_Init+0xb0>)
34181906:	2200      	movs	r2, #0
34181908:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
3418190a:	480f      	ldr	r0, [pc, #60]	@ (34181948 <MX_XSPI1_Init+0xb0>)
3418190c:	f00b fac4 	bl	3418ce98 <HAL_XSPI_Init>
34181910:	4603      	mov	r3, r0
34181912:	2b00      	cmp	r3, #0
34181914:	d001      	beq.n	3418191a <MX_XSPI1_Init+0x82>
  {
    Error_Handler();
34181916:	f7ff fb05 	bl	34180f24 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418191a:	2310      	movs	r3, #16
3418191c:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_1;
3418191e:	2300      	movs	r3, #0
34181920:	60bb      	str	r3, [r7, #8]
  sXspiManagerCfg.Req2AckTime = 1;
34181922:	2301      	movs	r3, #1
34181924:	60fb      	str	r3, [r7, #12]
  if (HAL_XSPIM_Config(&hxspi1, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34181926:	1d3b      	adds	r3, r7, #4
34181928:	f241 3288 	movw	r2, #5000	@ 0x1388
3418192c:	4619      	mov	r1, r3
3418192e:	4806      	ldr	r0, [pc, #24]	@ (34181948 <MX_XSPI1_Init+0xb0>)
34181930:	f00b fef4 	bl	3418d71c <HAL_XSPIM_Config>
34181934:	4603      	mov	r3, r0
34181936:	2b00      	cmp	r3, #0
34181938:	d001      	beq.n	3418193e <MX_XSPI1_Init+0xa6>
  {
    Error_Handler();
3418193a:	f7ff faf3 	bl	34180f24 <Error_Handler>
  }
  /* USER CODE BEGIN XSPI1_Init 2 */

  /* USER CODE END XSPI1_Init 2 */

}
3418193e:	bf00      	nop
34181940:	3710      	adds	r7, #16
34181942:	46bd      	mov	sp, r7
34181944:	bd80      	pop	{r7, pc}
34181946:	bf00      	nop
34181948:	341c01cc 	.word	0x341c01cc
3418194c:	58025000 	.word	0x58025000

34181950 <MX_XSPI2_Init>:

/* XSPI2 init function */
void MX_XSPI2_Init(void)
{
34181950:	b580      	push	{r7, lr}
34181952:	b084      	sub	sp, #16
34181954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
34181956:	1d3b      	adds	r3, r7, #4
34181958:	2200      	movs	r2, #0
3418195a:	601a      	str	r2, [r3, #0]
3418195c:	605a      	str	r2, [r3, #4]
3418195e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  hxspi2.Instance = XSPI2;
34181960:	4b27      	ldr	r3, [pc, #156]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
34181962:	4a28      	ldr	r2, [pc, #160]	@ (34181a04 <MX_XSPI2_Init+0xb4>)
34181964:	601a      	str	r2, [r3, #0]
  hxspi2.Init.FifoThresholdByte = 1;
34181966:	4b26      	ldr	r3, [pc, #152]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
34181968:	2201      	movs	r2, #1
3418196a:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
3418196c:	4b24      	ldr	r3, [pc, #144]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
3418196e:	2200      	movs	r2, #0
34181970:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
34181972:	4b23      	ldr	r3, [pc, #140]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
34181974:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34181978:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_1GB;
3418197a:	4b21      	ldr	r3, [pc, #132]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
3418197c:	221a      	movs	r2, #26
3418197e:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 1;
34181980:	4b1f      	ldr	r3, [pc, #124]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
34181982:	2201      	movs	r2, #1
34181984:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
34181986:	4b1e      	ldr	r3, [pc, #120]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
34181988:	2200      	movs	r2, #0
3418198a:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
3418198c:	4b1c      	ldr	r3, [pc, #112]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
3418198e:	2200      	movs	r2, #0
34181990:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
34181992:	4b1b      	ldr	r3, [pc, #108]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
34181994:	2200      	movs	r2, #0
34181996:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 1;
34181998:	4b19      	ldr	r3, [pc, #100]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
3418199a:	2201      	movs	r2, #1
3418199c:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
3418199e:	4b18      	ldr	r3, [pc, #96]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
341819a0:	2200      	movs	r2, #0
341819a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
341819a4:	4b16      	ldr	r3, [pc, #88]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
341819a6:	2200      	movs	r2, #0
341819a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
341819aa:	4b15      	ldr	r3, [pc, #84]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
341819ac:	2200      	movs	r2, #0
341819ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
341819b0:	4b13      	ldr	r3, [pc, #76]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
341819b2:	2200      	movs	r2, #0
341819b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 0;
341819b6:	4b12      	ldr	r3, [pc, #72]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
341819b8:	2200      	movs	r2, #0
341819ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
341819bc:	4b10      	ldr	r3, [pc, #64]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
341819be:	2200      	movs	r2, #0
341819c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
341819c2:	480f      	ldr	r0, [pc, #60]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
341819c4:	f00b fa68 	bl	3418ce98 <HAL_XSPI_Init>
341819c8:	4603      	mov	r3, r0
341819ca:	2b00      	cmp	r3, #0
341819cc:	d001      	beq.n	341819d2 <MX_XSPI2_Init+0x82>
  {
    Error_Handler();
341819ce:	f7ff faa9 	bl	34180f24 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
341819d2:	2310      	movs	r3, #16
341819d4:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
341819d6:	2301      	movs	r3, #1
341819d8:	60bb      	str	r3, [r7, #8]
  sXspiManagerCfg.Req2AckTime = 1;
341819da:	2301      	movs	r3, #1
341819dc:	60fb      	str	r3, [r7, #12]
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
341819de:	1d3b      	adds	r3, r7, #4
341819e0:	f241 3288 	movw	r2, #5000	@ 0x1388
341819e4:	4619      	mov	r1, r3
341819e6:	4806      	ldr	r0, [pc, #24]	@ (34181a00 <MX_XSPI2_Init+0xb0>)
341819e8:	f00b fe98 	bl	3418d71c <HAL_XSPIM_Config>
341819ec:	4603      	mov	r3, r0
341819ee:	2b00      	cmp	r3, #0
341819f0:	d001      	beq.n	341819f6 <MX_XSPI2_Init+0xa6>
  {
    Error_Handler();
341819f2:	f7ff fa97 	bl	34180f24 <Error_Handler>

  /* USER CODE BEGIN XSPI2_Init 2 */

  /* USER CODE END XSPI2_Init 2 */

}
341819f6:	bf00      	nop
341819f8:	3710      	adds	r7, #16
341819fa:	46bd      	mov	sp, r7
341819fc:	bd80      	pop	{r7, pc}
341819fe:	bf00      	nop
34181a00:	341c0230 	.word	0x341c0230
34181a04:	5802a000 	.word	0x5802a000

34181a08 <HAL_XSPI_MspInit>:

static uint32_t HAL_RCC_XSPIM_CLK_ENABLED=0;

void HAL_XSPI_MspInit(XSPI_HandleTypeDef* xspiHandle)
{
34181a08:	b580      	push	{r7, lr}
34181a0a:	f5ad 7d58 	sub.w	sp, sp, #864	@ 0x360
34181a0e:	af00      	add	r7, sp, #0
34181a10:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181a14:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
34181a18:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181a1a:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
34181a1e:	2200      	movs	r2, #0
34181a20:	601a      	str	r2, [r3, #0]
34181a22:	605a      	str	r2, [r3, #4]
34181a24:	609a      	str	r2, [r3, #8]
34181a26:	60da      	str	r2, [r3, #12]
34181a28:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181a2a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181a2e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181a32:	4618      	mov	r0, r3
34181a34:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181a38:	461a      	mov	r2, r3
34181a3a:	2100      	movs	r1, #0
34181a3c:	f00f f96c 	bl	34190d18 <memset>
  if(xspiHandle->Instance==XSPI1)
34181a40:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181a44:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
34181a48:	681b      	ldr	r3, [r3, #0]
34181a4a:	681b      	ldr	r3, [r3, #0]
34181a4c:	4a99      	ldr	r2, [pc, #612]	@ (34181cb4 <HAL_XSPI_MspInit+0x2ac>)
34181a4e:	4293      	cmp	r3, r2
34181a50:	d166      	bne.n	34181b20 <HAL_XSPI_MspInit+0x118>

  /* USER CODE END XSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_XSPI1;
34181a52:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181a56:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181a5a:	f04f 0200 	mov.w	r2, #0
34181a5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34181a62:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34181a66:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181a6a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181a6e:	4a92      	ldr	r2, [pc, #584]	@ (34181cb8 <HAL_XSPI_MspInit+0x2b0>)
34181a70:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181a74:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
34181a78:	4618      	mov	r0, r3
34181a7a:	f003 ff5d 	bl	34185938 <HAL_RCCEx_PeriphCLKConfig>
34181a7e:	4603      	mov	r3, r0
34181a80:	2b00      	cmp	r3, #0
34181a82:	d001      	beq.n	34181a88 <HAL_XSPI_MspInit+0x80>
    {
      Error_Handler();
34181a84:	f7ff fa4e 	bl	34180f24 <Error_Handler>
    }

    /* XSPI1 clock enable */
    HAL_RCC_XSPIM_CLK_ENABLED++;
34181a88:	4b8c      	ldr	r3, [pc, #560]	@ (34181cbc <HAL_XSPI_MspInit+0x2b4>)
34181a8a:	681b      	ldr	r3, [r3, #0]
34181a8c:	3301      	adds	r3, #1
34181a8e:	4a8b      	ldr	r2, [pc, #556]	@ (34181cbc <HAL_XSPI_MspInit+0x2b4>)
34181a90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
34181a92:	4b8a      	ldr	r3, [pc, #552]	@ (34181cbc <HAL_XSPI_MspInit+0x2b4>)
34181a94:	681b      	ldr	r3, [r3, #0]
34181a96:	2b01      	cmp	r3, #1
34181a98:	d103      	bne.n	34181aa2 <HAL_XSPI_MspInit+0x9a>
      __HAL_RCC_XSPIM_CLK_ENABLE();
34181a9a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34181a9e:	f7ff fecf 	bl	34181840 <LL_AHB5_GRP1_EnableClock>
    }
    __HAL_RCC_XSPI1_CLK_ENABLE();
34181aa2:	2020      	movs	r0, #32
34181aa4:	f7ff fecc 	bl	34181840 <LL_AHB5_GRP1_EnableClock>

    __HAL_RCC_GPIOP_CLK_ENABLE();
34181aa8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
34181aac:	f7ff feb2 	bl	34181814 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOO_CLK_ENABLE();
34181ab0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
34181ab4:	f7ff feae 	bl	34181814 <LL_AHB4_GRP1_EnableClock>
    PO0     ------> XSPIM_P1_NCS1
    PP9     ------> XSPIM_P1_IO9
    PP10     ------> XSPIM_P1_IO10
    PO4     ------> XSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = HEXASPI_IO_7_Pin|HEXASPI_IO_6_Pin|HEXASPI_IO_0_Pin|HEXASPI_IO_4_Pin
34181ab8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
34181abc:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
                          |HEXASPI_IO_1_Pin|HEXASPI_IO_15_Pin|HEXASPI_IO_5_Pin|HEXASPI_IO_12_Pin
                          |HEXASPI_IO_3_Pin|HEXASPI_IO_2_Pin|HEXASPI_IO_13_Pin|HEXASPI_IO_11_Pin
                          |HEXASPI_IO_8_Pin|HEXASPI_IO_14_Pin|HEXASPI_IO_9_Pin|HEXASPI_IO_10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181ac0:	2302      	movs	r3, #2
34181ac2:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181ac6:	2300      	movs	r3, #0
34181ac8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34181acc:	2303      	movs	r3, #3
34181ace:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
34181ad2:	2309      	movs	r3, #9
34181ad4:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
    HAL_GPIO_Init(GPIOP, &GPIO_InitStruct);
34181ad8:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
34181adc:	4619      	mov	r1, r3
34181ade:	4878      	ldr	r0, [pc, #480]	@ (34181cc0 <HAL_XSPI_MspInit+0x2b8>)
34181ae0:	f000 fce0 	bl	341824a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HEXASPI_DQS0_Pin|HEXASPI_DQS1_Pin|HEXASPI_NCS_Pin|HEXASPI_CLK_Pin;
34181ae4:	231d      	movs	r3, #29
34181ae6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181aea:	2302      	movs	r3, #2
34181aec:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181af0:	2300      	movs	r3, #0
34181af2:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34181af6:	2303      	movs	r3, #3
34181af8:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
34181afc:	2309      	movs	r3, #9
34181afe:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
    HAL_GPIO_Init(GPIOO, &GPIO_InitStruct);
34181b02:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
34181b06:	4619      	mov	r1, r3
34181b08:	486e      	ldr	r0, [pc, #440]	@ (34181cc4 <HAL_XSPI_MspInit+0x2bc>)
34181b0a:	f000 fccb 	bl	341824a4 <HAL_GPIO_Init>

    /* XSPI1 interrupt Init */
    HAL_NVIC_SetPriority(XSPI1_IRQn, 0, 0);
34181b0e:	2200      	movs	r2, #0
34181b10:	2100      	movs	r1, #0
34181b12:	20aa      	movs	r0, #170	@ 0xaa
34181b14:	f000 fb49 	bl	341821aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(XSPI1_IRQn);
34181b18:	20aa      	movs	r0, #170	@ 0xaa
34181b1a:	f000 fb63 	bl	341821e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END XSPI2_MspInit 1 */
#endif

  }
}
34181b1e:	e0c4      	b.n	34181caa <HAL_XSPI_MspInit+0x2a2>
  else if(xspiHandle->Instance==XSPI2)
34181b20:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181b24:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
34181b28:	681b      	ldr	r3, [r3, #0]
34181b2a:	681b      	ldr	r3, [r3, #0]
34181b2c:	4a66      	ldr	r2, [pc, #408]	@ (34181cc8 <HAL_XSPI_MspInit+0x2c0>)
34181b2e:	4293      	cmp	r3, r2
34181b30:	f040 80bb 	bne.w	34181caa <HAL_XSPI_MspInit+0x2a2>
    uint32_t fuse_data = 0;
34181b34:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181b38:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
34181b3c:	2200      	movs	r2, #0
34181b3e:	601a      	str	r2, [r3, #0]
    __HAL_RCC_BSEC_CLK_ENABLE();
34181b40:	2002      	movs	r0, #2
34181b42:	f7ff fe93 	bl	3418186c <LL_APB4_GRP2_EnableClock>
    __HAL_RCC_SYSCFG_CLK_ENABLE();
34181b46:	2001      	movs	r0, #1
34181b48:	f7ff fe90 	bl	3418186c <LL_APB4_GRP2_EnableClock>
    hbsec.Instance = BSEC;
34181b4c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181b50:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
34181b54:	4a5d      	ldr	r2, [pc, #372]	@ (34181ccc <HAL_XSPI_MspInit+0x2c4>)
34181b56:	601a      	str	r2, [r3, #0]
    if (HAL_BSEC_OTP_Read(&hbsec, HSLV_OTP, &fuse_data) != HAL_OK)
34181b58:	f507 72d6 	add.w	r2, r7, #428	@ 0x1ac
34181b5c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181b60:	217c      	movs	r1, #124	@ 0x7c
34181b62:	4618      	mov	r0, r3
34181b64:	f000 f996 	bl	34181e94 <HAL_BSEC_OTP_Read>
34181b68:	4603      	mov	r3, r0
34181b6a:	2b00      	cmp	r3, #0
34181b6c:	d001      	beq.n	34181b72 <HAL_XSPI_MspInit+0x16a>
      Error_Handler();
34181b6e:	f7ff f9d9 	bl	34180f24 <Error_Handler>
    if (fuse_data & VDDIO3_HSLV_MASK)
34181b72:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181b76:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
34181b7a:	681b      	ldr	r3, [r3, #0]
34181b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34181b80:	2b00      	cmp	r3, #0
34181b82:	d027      	beq.n	34181bd4 <HAL_XSPI_MspInit+0x1cc>
      PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
34181b84:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181b88:	f5a3 7156 	sub.w	r1, r3, #856	@ 0x358
34181b8c:	f04f 0200 	mov.w	r2, #0
34181b90:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
34181b94:	e9c1 2300 	strd	r2, r3, [r1]
      PeriphClkInit.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_IC3;
34181b98:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181b9c:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
34181ba0:	4a4b      	ldr	r2, [pc, #300]	@ (34181cd0 <HAL_XSPI_MspInit+0x2c8>)
34181ba2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      PeriphClkInit.ICSelection[RCC_IC3].ClockSelection = RCC_ICCLKSOURCE_PLL1;
34181ba6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181baa:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
34181bae:	2200      	movs	r2, #0
34181bb0:	619a      	str	r2, [r3, #24]
      PeriphClkInit.ICSelection[RCC_IC3].ClockDivider = 6;
34181bb2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181bb6:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
34181bba:	2206      	movs	r2, #6
34181bbc:	61da      	str	r2, [r3, #28]
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
34181bbe:	f107 0308 	add.w	r3, r7, #8
34181bc2:	4618      	mov	r0, r3
34181bc4:	f003 feb8 	bl	34185938 <HAL_RCCEx_PeriphCLKConfig>
34181bc8:	4603      	mov	r3, r0
34181bca:	2b00      	cmp	r3, #0
34181bcc:	d029      	beq.n	34181c22 <HAL_XSPI_MspInit+0x21a>
        Error_Handler();
34181bce:	f7ff f9a9 	bl	34180f24 <Error_Handler>
34181bd2:	e026      	b.n	34181c22 <HAL_XSPI_MspInit+0x21a>
      PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
34181bd4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181bd8:	f5a3 7156 	sub.w	r1, r3, #856	@ 0x358
34181bdc:	f04f 0200 	mov.w	r2, #0
34181be0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
34181be4:	e9c1 2300 	strd	r2, r3, [r1]
      PeriphClkInit.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_IC3;
34181be8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181bec:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
34181bf0:	4a37      	ldr	r2, [pc, #220]	@ (34181cd0 <HAL_XSPI_MspInit+0x2c8>)
34181bf2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      PeriphClkInit.ICSelection[RCC_IC3].ClockSelection = RCC_ICCLKSOURCE_PLL1;
34181bf6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181bfa:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
34181bfe:	2200      	movs	r2, #0
34181c00:	619a      	str	r2, [r3, #24]
      PeriphClkInit.ICSelection[RCC_IC3].ClockDivider = 24;
34181c02:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181c06:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
34181c0a:	2218      	movs	r2, #24
34181c0c:	61da      	str	r2, [r3, #28]
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
34181c0e:	f107 0308 	add.w	r3, r7, #8
34181c12:	4618      	mov	r0, r3
34181c14:	f003 fe90 	bl	34185938 <HAL_RCCEx_PeriphCLKConfig>
34181c18:	4603      	mov	r3, r0
34181c1a:	2b00      	cmp	r3, #0
34181c1c:	d001      	beq.n	34181c22 <HAL_XSPI_MspInit+0x21a>
        Error_Handler();
34181c1e:	f7ff f981 	bl	34180f24 <Error_Handler>
    __HAL_RCC_PWR_CLK_ENABLE();
34181c22:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34181c26:	f7ff fdf5 	bl	34181814 <LL_AHB4_GRP1_EnableClock>
    HAL_PWREx_EnableVddIO3();
34181c2a:	f000 fe99 	bl	34182960 <HAL_PWREx_EnableVddIO3>
    HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
34181c2e:	2101      	movs	r1, #1
34181c30:	2002      	movs	r0, #2
34181c32:	f000 fe43 	bl	341828bc <HAL_PWREx_ConfigVddIORange>
    HAL_SYSCFG_EnableVDDIO3CompensationCell();
34181c36:	f000 f91d 	bl	34181e74 <HAL_SYSCFG_EnableVDDIO3CompensationCell>
    __HAL_RCC_XSPI2_CLK_ENABLE();
34181c3a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34181c3e:	f7ff fdff 	bl	34181840 <LL_AHB5_GRP1_EnableClock>
      __HAL_RCC_GPION_CLK_ENABLE();
34181c42:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34181c46:	f7ff fde5 	bl	34181814 <LL_AHB4_GRP1_EnableClock>
      GPIO_InitTypeDef GPIO_InitStruct = {0};
34181c4a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181c4e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
34181c52:	461a      	mov	r2, r3
34181c54:	2300      	movs	r3, #0
34181c56:	6013      	str	r3, [r2, #0]
34181c58:	6053      	str	r3, [r2, #4]
34181c5a:	6093      	str	r3, [r2, #8]
34181c5c:	60d3      	str	r3, [r2, #12]
34181c5e:	6113      	str	r3, [r2, #16]
      GPIO_InitStruct.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
34181c60:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181c64:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
34181c68:	f640 727f 	movw	r2, #3967	@ 0xf7f
34181c6c:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34181c6e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181c72:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
34181c76:	2202      	movs	r2, #2
34181c78:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34181c7a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181c7e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
34181c82:	2203      	movs	r2, #3
34181c84:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Pull      = GPIO_NOPULL;
34181c86:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181c8a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
34181c8e:	2200      	movs	r2, #0
34181c90:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
34181c92:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181c96:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
34181c9a:	2209      	movs	r2, #9
34181c9c:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init(GPION, &GPIO_InitStruct);
34181c9e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
34181ca2:	4619      	mov	r1, r3
34181ca4:	480b      	ldr	r0, [pc, #44]	@ (34181cd4 <HAL_XSPI_MspInit+0x2cc>)
34181ca6:	f000 fbfd 	bl	341824a4 <HAL_GPIO_Init>
}
34181caa:	bf00      	nop
34181cac:	f507 7758 	add.w	r7, r7, #864	@ 0x360
34181cb0:	46bd      	mov	sp, r7
34181cb2:	bd80      	pop	{r7, pc}
34181cb4:	58025000 	.word	0x58025000
34181cb8:	03000014 	.word	0x03000014
34181cbc:	341c0294 	.word	0x341c0294
34181cc0:	56023c00 	.word	0x56023c00
34181cc4:	56023800 	.word	0x56023800
34181cc8:	5802a000 	.word	0x5802a000
34181ccc:	56009000 	.word	0x56009000
34181cd0:	03020414 	.word	0x03020414
34181cd4:	56023400 	.word	0x56023400

34181cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
34181cd8:	480f      	ldr	r0, [pc, #60]	@ (34181d18 <LoopForever+0x4>)
  msr   MSPLIM, r0
34181cda:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
34181cde:	480f      	ldr	r0, [pc, #60]	@ (34181d1c <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
34181ce0:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
34181ce2:	f7ff fa23 	bl	3418112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
34181ce6:	480e      	ldr	r0, [pc, #56]	@ (34181d20 <LoopForever+0xc>)
  ldr r1, =_edata
34181ce8:	490e      	ldr	r1, [pc, #56]	@ (34181d24 <LoopForever+0x10>)
  ldr r2, =_sidata
34181cea:	4a0f      	ldr	r2, [pc, #60]	@ (34181d28 <LoopForever+0x14>)
  movs r3, #0
34181cec:	2300      	movs	r3, #0
  b LoopCopyDataInit
34181cee:	e002      	b.n	34181cf6 <LoopCopyDataInit>

34181cf0 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
34181cf0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
34181cf2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
34181cf4:	3304      	adds	r3, #4

34181cf6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
34181cf6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
34181cf8:	428c      	cmp	r4, r1
  bcc CopyDataInit
34181cfa:	d3f9      	bcc.n	34181cf0 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
34181cfc:	4a0b      	ldr	r2, [pc, #44]	@ (34181d2c <LoopForever+0x18>)
  ldr r4, =_ebss
34181cfe:	4c0c      	ldr	r4, [pc, #48]	@ (34181d30 <LoopForever+0x1c>)
  movs r3, #0
34181d00:	2300      	movs	r3, #0
  b LoopFillZerobss
34181d02:	e001      	b.n	34181d08 <LoopFillZerobss>

34181d04 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
34181d04:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
34181d06:	3204      	adds	r2, #4

34181d08 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
34181d08:	42a2      	cmp	r2, r4
  bcc FillZerobss
34181d0a:	d3fb      	bcc.n	34181d04 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
34181d0c:	f00f f858 	bl	34190dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
34181d10:	f7fe ff88 	bl	34180c24 <main>

34181d14 <LoopForever>:

LoopForever:
  b LoopForever
34181d14:	e7fe      	b.n	34181d14 <LoopForever>
34181d16:	0000      	.short	0x0000
  ldr   r0, =_sstack
34181d18:	341ff000 	.word	0x341ff000
  ldr   r0, =_estack
34181d1c:	34200000 	.word	0x34200000
  ldr r0, =_sdata
34181d20:	341c0000 	.word	0x341c0000
  ldr r1, =_edata
34181d24:	341c0114 	.word	0x341c0114
  ldr r2, =_sidata
34181d28:	3419134c 	.word	0x3419134c
  ldr r2, =_sbss
34181d2c:	341c0118 	.word	0x341c0118
  ldr r4, =_ebss
34181d30:	341c0574 	.word	0x341c0574

34181d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
34181d34:	e7fe      	b.n	34181d34 <ADC1_2_IRQHandler>

34181d36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
34181d36:	b580      	push	{r7, lr}
34181d38:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34181d3a:	2003      	movs	r0, #3
34181d3c:	f000 fa2a 	bl	34182194 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
34181d40:	f7ff fac0 	bl	341812c4 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34181d44:	200f      	movs	r0, #15
34181d46:	f000 f80b 	bl	34181d60 <HAL_InitTick>
34181d4a:	4603      	mov	r3, r0
34181d4c:	2b00      	cmp	r3, #0
34181d4e:	d001      	beq.n	34181d54 <HAL_Init+0x1e>
  {
    return HAL_ERROR;
34181d50:	2301      	movs	r3, #1
34181d52:	e002      	b.n	34181d5a <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
34181d54:	f7ff f8fa 	bl	34180f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
34181d58:	2300      	movs	r3, #0
}
34181d5a:	4618      	mov	r0, r3
34181d5c:	bd80      	pop	{r7, pc}
	...

34181d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34181d60:	b580      	push	{r7, lr}
34181d62:	b082      	sub	sp, #8
34181d64:	af00      	add	r7, sp, #0
34181d66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34181d68:	4b15      	ldr	r3, [pc, #84]	@ (34181dc0 <HAL_InitTick+0x60>)
34181d6a:	781b      	ldrb	r3, [r3, #0]
34181d6c:	2b00      	cmp	r3, #0
34181d6e:	d101      	bne.n	34181d74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
34181d70:	2301      	movs	r3, #1
34181d72:	e021      	b.n	34181db8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
34181d74:	4b13      	ldr	r3, [pc, #76]	@ (34181dc4 <HAL_InitTick+0x64>)
34181d76:	681a      	ldr	r2, [r3, #0]
34181d78:	4b11      	ldr	r3, [pc, #68]	@ (34181dc0 <HAL_InitTick+0x60>)
34181d7a:	781b      	ldrb	r3, [r3, #0]
34181d7c:	4619      	mov	r1, r3
34181d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34181d82:	fbb3 f3f1 	udiv	r3, r3, r1
34181d86:	fbb2 f3f3 	udiv	r3, r2, r3
34181d8a:	4618      	mov	r0, r3
34181d8c:	f000 fa38 	bl	34182200 <HAL_SYSTICK_Config>
34181d90:	4603      	mov	r3, r0
34181d92:	2b00      	cmp	r3, #0
34181d94:	d001      	beq.n	34181d9a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
34181d96:	2301      	movs	r3, #1
34181d98:	e00e      	b.n	34181db8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
34181d9a:	687b      	ldr	r3, [r7, #4]
34181d9c:	2b0f      	cmp	r3, #15
34181d9e:	d80a      	bhi.n	34181db6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34181da0:	2200      	movs	r2, #0
34181da2:	6879      	ldr	r1, [r7, #4]
34181da4:	f04f 30ff 	mov.w	r0, #4294967295
34181da8:	f000 f9ff 	bl	341821aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
34181dac:	4a06      	ldr	r2, [pc, #24]	@ (34181dc8 <HAL_InitTick+0x68>)
34181dae:	687b      	ldr	r3, [r7, #4]
34181db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
34181db2:	2300      	movs	r3, #0
34181db4:	e000      	b.n	34181db8 <HAL_InitTick+0x58>
    return HAL_ERROR;
34181db6:	2301      	movs	r3, #1
}
34181db8:	4618      	mov	r0, r3
34181dba:	3708      	adds	r7, #8
34181dbc:	46bd      	mov	sp, r7
34181dbe:	bd80      	pop	{r7, pc}
34181dc0:	341c0008 	.word	0x341c0008
34181dc4:	341c0000 	.word	0x341c0000
34181dc8:	341c0004 	.word	0x341c0004

34181dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
34181dcc:	b480      	push	{r7}
34181dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
34181dd0:	4b06      	ldr	r3, [pc, #24]	@ (34181dec <HAL_IncTick+0x20>)
34181dd2:	781b      	ldrb	r3, [r3, #0]
34181dd4:	461a      	mov	r2, r3
34181dd6:	4b06      	ldr	r3, [pc, #24]	@ (34181df0 <HAL_IncTick+0x24>)
34181dd8:	681b      	ldr	r3, [r3, #0]
34181dda:	4413      	add	r3, r2
34181ddc:	4a04      	ldr	r2, [pc, #16]	@ (34181df0 <HAL_IncTick+0x24>)
34181dde:	6013      	str	r3, [r2, #0]
}
34181de0:	bf00      	nop
34181de2:	46bd      	mov	sp, r7
34181de4:	f85d 7b04 	ldr.w	r7, [sp], #4
34181de8:	4770      	bx	lr
34181dea:	bf00      	nop
34181dec:	341c0008 	.word	0x341c0008
34181df0:	341c0298 	.word	0x341c0298

34181df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
34181df4:	b480      	push	{r7}
34181df6:	af00      	add	r7, sp, #0
  return uwTick;
34181df8:	4b03      	ldr	r3, [pc, #12]	@ (34181e08 <HAL_GetTick+0x14>)
34181dfa:	681b      	ldr	r3, [r3, #0]
}
34181dfc:	4618      	mov	r0, r3
34181dfe:	46bd      	mov	sp, r7
34181e00:	f85d 7b04 	ldr.w	r7, [sp], #4
34181e04:	4770      	bx	lr
34181e06:	bf00      	nop
34181e08:	341c0298 	.word	0x341c0298

34181e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34181e0c:	b580      	push	{r7, lr}
34181e0e:	b084      	sub	sp, #16
34181e10:	af00      	add	r7, sp, #0
34181e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
34181e14:	f7ff ffee 	bl	34181df4 <HAL_GetTick>
34181e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
34181e1a:	687b      	ldr	r3, [r7, #4]
34181e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
34181e1e:	68fb      	ldr	r3, [r7, #12]
34181e20:	f1b3 3fff 	cmp.w	r3, #4294967295
34181e24:	d005      	beq.n	34181e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
34181e26:	4b0a      	ldr	r3, [pc, #40]	@ (34181e50 <HAL_Delay+0x44>)
34181e28:	781b      	ldrb	r3, [r3, #0]
34181e2a:	461a      	mov	r2, r3
34181e2c:	68fb      	ldr	r3, [r7, #12]
34181e2e:	4413      	add	r3, r2
34181e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
34181e32:	bf00      	nop
34181e34:	f7ff ffde 	bl	34181df4 <HAL_GetTick>
34181e38:	4602      	mov	r2, r0
34181e3a:	68bb      	ldr	r3, [r7, #8]
34181e3c:	1ad3      	subs	r3, r2, r3
34181e3e:	68fa      	ldr	r2, [r7, #12]
34181e40:	429a      	cmp	r2, r3
34181e42:	d8f7      	bhi.n	34181e34 <HAL_Delay+0x28>
  {
  }
}
34181e44:	bf00      	nop
34181e46:	bf00      	nop
34181e48:	3710      	adds	r7, #16
34181e4a:	46bd      	mov	sp, r7
34181e4c:	bd80      	pop	{r7, pc}
34181e4e:	bf00      	nop
34181e50:	341c0008 	.word	0x341c0008

34181e54 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
34181e54:	b480      	push	{r7}
34181e56:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
34181e58:	4b05      	ldr	r3, [pc, #20]	@ (34181e70 <HAL_SuspendTick+0x1c>)
34181e5a:	681b      	ldr	r3, [r3, #0]
34181e5c:	4a04      	ldr	r2, [pc, #16]	@ (34181e70 <HAL_SuspendTick+0x1c>)
34181e5e:	f023 0302 	bic.w	r3, r3, #2
34181e62:	6013      	str	r3, [r2, #0]
}
34181e64:	bf00      	nop
34181e66:	46bd      	mov	sp, r7
34181e68:	f85d 7b04 	ldr.w	r7, [sp], #4
34181e6c:	4770      	bx	lr
34181e6e:	bf00      	nop
34181e70:	e000e010 	.word	0xe000e010

34181e74 <HAL_SYSCFG_EnableVDDIO3CompensationCell>:
/**
  * @brief  Enable the VDDIO3 compensation cell.
  * @retval None
  */
void HAL_SYSCFG_EnableVDDIO3CompensationCell(void)
{
34181e74:	b480      	push	{r7}
34181e76:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->VDDIO3CCCR, SYSCFG_VDDIO3CCCR_EN);
34181e78:	4b05      	ldr	r3, [pc, #20]	@ (34181e90 <HAL_SYSCFG_EnableVDDIO3CompensationCell+0x1c>)
34181e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34181e7c:	4a04      	ldr	r2, [pc, #16]	@ (34181e90 <HAL_SYSCFG_EnableVDDIO3CompensationCell+0x1c>)
34181e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34181e82:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
34181e84:	bf00      	nop
34181e86:	46bd      	mov	sp, r7
34181e88:	f85d 7b04 	ldr.w	r7, [sp], #4
34181e8c:	4770      	bx	lr
34181e8e:	bf00      	nop
34181e90:	56008000 	.word	0x56008000

34181e94 <HAL_BSEC_OTP_Read>:
  * @param  pFuseData  Returned value of fuse. The returned value is between 0 and 0xFFFFFFFFU
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Read(BSEC_HandleTypeDef * hbsec, uint32_t FuseId, uint32_t *pFuseData)
{
34181e94:	b580      	push	{r7, lr}
34181e96:	b084      	sub	sp, #16
34181e98:	af00      	add	r7, sp, #0
34181e9a:	60f8      	str	r0, [r7, #12]
34181e9c:	60b9      	str	r1, [r7, #8]
34181e9e:	607a      	str	r2, [r7, #4]
  /* Check the handle pointer */
  if (hbsec == NULL)
34181ea0:	68fb      	ldr	r3, [r7, #12]
34181ea2:	2b00      	cmp	r3, #0
34181ea4:	d101      	bne.n	34181eaa <HAL_BSEC_OTP_Read+0x16>
  {
    return HAL_ERROR;
34181ea6:	2301      	movs	r3, #1
34181ea8:	e026      	b.n	34181ef8 <HAL_BSEC_OTP_Read+0x64>
  }

  /* Check the address of returned value and instance */
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
34181eaa:	687b      	ldr	r3, [r7, #4]
34181eac:	2b00      	cmp	r3, #0
34181eae:	d004      	beq.n	34181eba <HAL_BSEC_OTP_Read+0x26>
34181eb0:	68fb      	ldr	r3, [r7, #12]
34181eb2:	681b      	ldr	r3, [r3, #0]
34181eb4:	4a12      	ldr	r2, [pc, #72]	@ (34181f00 <HAL_BSEC_OTP_Read+0x6c>)
34181eb6:	4293      	cmp	r3, r2
34181eb8:	d004      	beq.n	34181ec4 <HAL_BSEC_OTP_Read+0x30>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34181eba:	68fb      	ldr	r3, [r7, #12]
34181ebc:	2201      	movs	r2, #1
34181ebe:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34181ec0:	2301      	movs	r3, #1
34181ec2:	e019      	b.n	34181ef8 <HAL_BSEC_OTP_Read+0x64>
  }

  if (FuseId < BSEC_NB_FUSES)
34181ec4:	68bb      	ldr	r3, [r7, #8]
34181ec6:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34181eca:	d211      	bcs.n	34181ef0 <HAL_BSEC_OTP_Read+0x5c>
  {
    /* Reload the data :
       - Unshadowed fuse are not automatically reload and data no more available after register read
       - Shadowed fuse contains by default the shadow value in the register */
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
34181ecc:	68b9      	ldr	r1, [r7, #8]
34181ece:	68f8      	ldr	r0, [r7, #12]
34181ed0:	f000 f818 	bl	34181f04 <HAL_BSEC_OTP_Reload>
34181ed4:	4603      	mov	r3, r0
34181ed6:	2b00      	cmp	r3, #0
34181ed8:	d108      	bne.n	34181eec <HAL_BSEC_OTP_Read+0x58>
    {
      /* Read data from shadow register */
      *pFuseData = hbsec->Instance->FVRw[FuseId];
34181eda:	68fb      	ldr	r3, [r7, #12]
34181edc:	681b      	ldr	r3, [r3, #0]
34181ede:	68ba      	ldr	r2, [r7, #8]
34181ee0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34181ee4:	687b      	ldr	r3, [r7, #4]
34181ee6:	601a      	str	r2, [r3, #0]
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
34181ee8:	2300      	movs	r3, #0
34181eea:	e005      	b.n	34181ef8 <HAL_BSEC_OTP_Read+0x64>
      return HAL_ERROR;
34181eec:	2301      	movs	r3, #1
34181eee:	e003      	b.n	34181ef8 <HAL_BSEC_OTP_Read+0x64>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34181ef0:	68fb      	ldr	r3, [r7, #12]
34181ef2:	2201      	movs	r2, #1
34181ef4:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34181ef6:	2301      	movs	r3, #1
}
34181ef8:	4618      	mov	r0, r3
34181efa:	3710      	adds	r7, #16
34181efc:	46bd      	mov	sp, r7
34181efe:	bd80      	pop	{r7, pc}
34181f00:	56009000 	.word	0x56009000

34181f04 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
34181f04:	b580      	push	{r7, lr}
34181f06:	b086      	sub	sp, #24
34181f08:	af00      	add	r7, sp, #0
34181f0a:	6078      	str	r0, [r7, #4]
34181f0c:	6039      	str	r1, [r7, #0]
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
34181f0e:	f7ff ff71 	bl	34181df4 <HAL_GetTick>
34181f12:	6178      	str	r0, [r7, #20]

  /* Check the handle pointer */
  if (hbsec == NULL)
34181f14:	687b      	ldr	r3, [r7, #4]
34181f16:	2b00      	cmp	r3, #0
34181f18:	d101      	bne.n	34181f1e <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
34181f1a:	2301      	movs	r3, #1
34181f1c:	e063      	b.n	34181fe6 <HAL_BSEC_OTP_Reload+0xe2>
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
34181f1e:	687b      	ldr	r3, [r7, #4]
34181f20:	681b      	ldr	r3, [r3, #0]
34181f22:	4a33      	ldr	r2, [pc, #204]	@ (34181ff0 <HAL_BSEC_OTP_Reload+0xec>)
34181f24:	4293      	cmp	r3, r2
34181f26:	d004      	beq.n	34181f32 <HAL_BSEC_OTP_Reload+0x2e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34181f28:	687b      	ldr	r3, [r7, #4]
34181f2a:	2201      	movs	r2, #1
34181f2c:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34181f2e:	2301      	movs	r3, #1
34181f30:	e059      	b.n	34181fe6 <HAL_BSEC_OTP_Reload+0xe2>
  }

  if (FuseId < BSEC_NB_FUSES)
34181f32:	683b      	ldr	r3, [r7, #0]
34181f34:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34181f38:	d24f      	bcs.n	34181fda <HAL_BSEC_OTP_Reload+0xd6>
  {
    status_reg = FuseId / 32U;
34181f3a:	683b      	ldr	r3, [r7, #0]
34181f3c:	095b      	lsrs	r3, r3, #5
34181f3e:	613b      	str	r3, [r7, #16]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34181f40:	683b      	ldr	r3, [r7, #0]
34181f42:	f003 031f 	and.w	r3, r3, #31
34181f46:	2201      	movs	r2, #1
34181f48:	fa02 f303 	lsl.w	r3, r2, r3
34181f4c:	60fb      	str	r3, [r7, #12]

    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34181f4e:	687b      	ldr	r3, [r7, #4]
34181f50:	681b      	ldr	r3, [r3, #0]
34181f52:	693a      	ldr	r2, [r7, #16]
34181f54:	f502 7208 	add.w	r2, r2, #544	@ 0x220
34181f58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34181f5c:	68fb      	ldr	r3, [r7, #12]
34181f5e:	4013      	ands	r3, r2
34181f60:	2b00      	cmp	r3, #0
34181f62:	d135      	bne.n	34181fd0 <HAL_BSEC_OTP_Reload+0xcc>
    {
      /* Perform a reload of the fuse register */
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
34181f64:	687b      	ldr	r3, [r7, #4]
34181f66:	681b      	ldr	r3, [r3, #0]
34181f68:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34181f6c:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
34181f70:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34181f74:	687a      	ldr	r2, [r7, #4]
34181f76:	6812      	ldr	r2, [r2, #0]
34181f78:	6839      	ldr	r1, [r7, #0]
34181f7a:	430b      	orrs	r3, r1
34181f7c:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04

      /* Wait the operation is finished */
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34181f80:	e00c      	b.n	34181f9c <HAL_BSEC_OTP_Reload+0x98>
      {
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34181f82:	f7ff ff37 	bl	34181df4 <HAL_GetTick>
34181f86:	4602      	mov	r2, r0
34181f88:	697b      	ldr	r3, [r7, #20]
34181f8a:	1ad3      	subs	r3, r2, r3
34181f8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34181f90:	d904      	bls.n	34181f9c <HAL_BSEC_OTP_Reload+0x98>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34181f92:	687b      	ldr	r3, [r7, #4]
34181f94:	220a      	movs	r2, #10
34181f96:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
34181f98:	2301      	movs	r3, #1
34181f9a:	e024      	b.n	34181fe6 <HAL_BSEC_OTP_Reload+0xe2>
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34181f9c:	687b      	ldr	r3, [r7, #4]
34181f9e:	681b      	ldr	r3, [r3, #0]
34181fa0:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34181fa4:	f003 0301 	and.w	r3, r3, #1
34181fa8:	2b00      	cmp	r3, #0
34181faa:	d1ea      	bne.n	34181f82 <HAL_BSEC_OTP_Reload+0x7e>
        }
      }

      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
34181fac:	687b      	ldr	r3, [r7, #4]
34181fae:	681b      	ldr	r3, [r3, #0]
34181fb0:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34181fb4:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
34181fb8:	2b00      	cmp	r3, #0
34181fba:	d013      	beq.n	34181fe4 <HAL_BSEC_OTP_Reload+0xe0>
      {
        /* An error occurred during reloading, value can't be relied on */
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
34181fbc:	687b      	ldr	r3, [r7, #4]
34181fbe:	681b      	ldr	r3, [r3, #0]
34181fc0:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34181fc4:	f403 028c 	and.w	r2, r3, #4587520	@ 0x460000
34181fc8:	687b      	ldr	r3, [r7, #4]
34181fca:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
34181fcc:	2301      	movs	r3, #1
34181fce:	e00a      	b.n	34181fe6 <HAL_BSEC_OTP_Reload+0xe2>
      }
    }
    else
    {
      /* Shadow register is sticky reload locked */
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34181fd0:	687b      	ldr	r3, [r7, #4]
34181fd2:	2204      	movs	r2, #4
34181fd4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
34181fd6:	2301      	movs	r3, #1
34181fd8:	e005      	b.n	34181fe6 <HAL_BSEC_OTP_Reload+0xe2>
    }
  }
  else
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34181fda:	687b      	ldr	r3, [r7, #4]
34181fdc:	2201      	movs	r2, #1
34181fde:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34181fe0:	2301      	movs	r3, #1
34181fe2:	e000      	b.n	34181fe6 <HAL_BSEC_OTP_Reload+0xe2>
  }

  return HAL_OK;
34181fe4:	2300      	movs	r3, #0
}
34181fe6:	4618      	mov	r0, r3
34181fe8:	3718      	adds	r7, #24
34181fea:	46bd      	mov	sp, r7
34181fec:	bd80      	pop	{r7, pc}
34181fee:	bf00      	nop
34181ff0:	56009000 	.word	0x56009000

34181ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34181ff4:	b480      	push	{r7}
34181ff6:	b085      	sub	sp, #20
34181ff8:	af00      	add	r7, sp, #0
34181ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
34181ffc:	687b      	ldr	r3, [r7, #4]
34181ffe:	f003 0307 	and.w	r3, r3, #7
34182002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34182004:	4b0c      	ldr	r3, [pc, #48]	@ (34182038 <__NVIC_SetPriorityGrouping+0x44>)
34182006:	68db      	ldr	r3, [r3, #12]
34182008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
3418200a:	68ba      	ldr	r2, [r7, #8]
3418200c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
34182010:	4013      	ands	r3, r2
34182012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34182014:	68fb      	ldr	r3, [r7, #12]
34182016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34182018:	68bb      	ldr	r3, [r7, #8]
3418201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
3418201c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34182020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34182024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
34182026:	4a04      	ldr	r2, [pc, #16]	@ (34182038 <__NVIC_SetPriorityGrouping+0x44>)
34182028:	68bb      	ldr	r3, [r7, #8]
3418202a:	60d3      	str	r3, [r2, #12]
}
3418202c:	bf00      	nop
3418202e:	3714      	adds	r7, #20
34182030:	46bd      	mov	sp, r7
34182032:	f85d 7b04 	ldr.w	r7, [sp], #4
34182036:	4770      	bx	lr
34182038:	e000ed00 	.word	0xe000ed00

3418203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
3418203c:	b480      	push	{r7}
3418203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34182040:	4b04      	ldr	r3, [pc, #16]	@ (34182054 <__NVIC_GetPriorityGrouping+0x18>)
34182042:	68db      	ldr	r3, [r3, #12]
34182044:	0a1b      	lsrs	r3, r3, #8
34182046:	f003 0307 	and.w	r3, r3, #7
}
3418204a:	4618      	mov	r0, r3
3418204c:	46bd      	mov	sp, r7
3418204e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182052:	4770      	bx	lr
34182054:	e000ed00 	.word	0xe000ed00

34182058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
34182058:	b480      	push	{r7}
3418205a:	b083      	sub	sp, #12
3418205c:	af00      	add	r7, sp, #0
3418205e:	4603      	mov	r3, r0
34182060:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34182062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34182066:	2b00      	cmp	r3, #0
34182068:	db0b      	blt.n	34182082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3418206a:	88fb      	ldrh	r3, [r7, #6]
3418206c:	f003 021f 	and.w	r2, r3, #31
34182070:	4907      	ldr	r1, [pc, #28]	@ (34182090 <__NVIC_EnableIRQ+0x38>)
34182072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34182076:	095b      	lsrs	r3, r3, #5
34182078:	2001      	movs	r0, #1
3418207a:	fa00 f202 	lsl.w	r2, r0, r2
3418207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
34182082:	bf00      	nop
34182084:	370c      	adds	r7, #12
34182086:	46bd      	mov	sp, r7
34182088:	f85d 7b04 	ldr.w	r7, [sp], #4
3418208c:	4770      	bx	lr
3418208e:	bf00      	nop
34182090:	e000e100 	.word	0xe000e100

34182094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
34182094:	b480      	push	{r7}
34182096:	b083      	sub	sp, #12
34182098:	af00      	add	r7, sp, #0
3418209a:	4603      	mov	r3, r0
3418209c:	6039      	str	r1, [r7, #0]
3418209e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
341820a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
341820a4:	2b00      	cmp	r3, #0
341820a6:	db0a      	blt.n	341820be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
341820a8:	683b      	ldr	r3, [r7, #0]
341820aa:	b2da      	uxtb	r2, r3
341820ac:	490c      	ldr	r1, [pc, #48]	@ (341820e0 <__NVIC_SetPriority+0x4c>)
341820ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
341820b2:	0112      	lsls	r2, r2, #4
341820b4:	b2d2      	uxtb	r2, r2
341820b6:	440b      	add	r3, r1
341820b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
341820bc:	e00a      	b.n	341820d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
341820be:	683b      	ldr	r3, [r7, #0]
341820c0:	b2da      	uxtb	r2, r3
341820c2:	4908      	ldr	r1, [pc, #32]	@ (341820e4 <__NVIC_SetPriority+0x50>)
341820c4:	88fb      	ldrh	r3, [r7, #6]
341820c6:	f003 030f 	and.w	r3, r3, #15
341820ca:	3b04      	subs	r3, #4
341820cc:	0112      	lsls	r2, r2, #4
341820ce:	b2d2      	uxtb	r2, r2
341820d0:	440b      	add	r3, r1
341820d2:	761a      	strb	r2, [r3, #24]
}
341820d4:	bf00      	nop
341820d6:	370c      	adds	r7, #12
341820d8:	46bd      	mov	sp, r7
341820da:	f85d 7b04 	ldr.w	r7, [sp], #4
341820de:	4770      	bx	lr
341820e0:	e000e100 	.word	0xe000e100
341820e4:	e000ed00 	.word	0xe000ed00

341820e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
341820e8:	b480      	push	{r7}
341820ea:	b089      	sub	sp, #36	@ 0x24
341820ec:	af00      	add	r7, sp, #0
341820ee:	60f8      	str	r0, [r7, #12]
341820f0:	60b9      	str	r1, [r7, #8]
341820f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
341820f4:	68fb      	ldr	r3, [r7, #12]
341820f6:	f003 0307 	and.w	r3, r3, #7
341820fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
341820fc:	69fb      	ldr	r3, [r7, #28]
341820fe:	f1c3 0307 	rsb	r3, r3, #7
34182102:	2b04      	cmp	r3, #4
34182104:	bf28      	it	cs
34182106:	2304      	movcs	r3, #4
34182108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3418210a:	69fb      	ldr	r3, [r7, #28]
3418210c:	3304      	adds	r3, #4
3418210e:	2b06      	cmp	r3, #6
34182110:	d902      	bls.n	34182118 <NVIC_EncodePriority+0x30>
34182112:	69fb      	ldr	r3, [r7, #28]
34182114:	3b03      	subs	r3, #3
34182116:	e000      	b.n	3418211a <NVIC_EncodePriority+0x32>
34182118:	2300      	movs	r3, #0
3418211a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3418211c:	f04f 32ff 	mov.w	r2, #4294967295
34182120:	69bb      	ldr	r3, [r7, #24]
34182122:	fa02 f303 	lsl.w	r3, r2, r3
34182126:	43da      	mvns	r2, r3
34182128:	68bb      	ldr	r3, [r7, #8]
3418212a:	401a      	ands	r2, r3
3418212c:	697b      	ldr	r3, [r7, #20]
3418212e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34182130:	f04f 31ff 	mov.w	r1, #4294967295
34182134:	697b      	ldr	r3, [r7, #20]
34182136:	fa01 f303 	lsl.w	r3, r1, r3
3418213a:	43d9      	mvns	r1, r3
3418213c:	687b      	ldr	r3, [r7, #4]
3418213e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34182140:	4313      	orrs	r3, r2
         );
}
34182142:	4618      	mov	r0, r3
34182144:	3724      	adds	r7, #36	@ 0x24
34182146:	46bd      	mov	sp, r7
34182148:	f85d 7b04 	ldr.w	r7, [sp], #4
3418214c:	4770      	bx	lr
	...

34182150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
34182150:	b580      	push	{r7, lr}
34182152:	b082      	sub	sp, #8
34182154:	af00      	add	r7, sp, #0
34182156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34182158:	687b      	ldr	r3, [r7, #4]
3418215a:	3b01      	subs	r3, #1
3418215c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34182160:	d301      	bcc.n	34182166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
34182162:	2301      	movs	r3, #1
34182164:	e00f      	b.n	34182186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34182166:	4a0a      	ldr	r2, [pc, #40]	@ (34182190 <SysTick_Config+0x40>)
34182168:	687b      	ldr	r3, [r7, #4]
3418216a:	3b01      	subs	r3, #1
3418216c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
3418216e:	210f      	movs	r1, #15
34182170:	f04f 30ff 	mov.w	r0, #4294967295
34182174:	f7ff ff8e 	bl	34182094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34182178:	4b05      	ldr	r3, [pc, #20]	@ (34182190 <SysTick_Config+0x40>)
3418217a:	2200      	movs	r2, #0
3418217c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
3418217e:	4b04      	ldr	r3, [pc, #16]	@ (34182190 <SysTick_Config+0x40>)
34182180:	2207      	movs	r2, #7
34182182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34182184:	2300      	movs	r3, #0
}
34182186:	4618      	mov	r0, r3
34182188:	3708      	adds	r7, #8
3418218a:	46bd      	mov	sp, r7
3418218c:	bd80      	pop	{r7, pc}
3418218e:	bf00      	nop
34182190:	e000e010 	.word	0xe000e010

34182194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34182194:	b580      	push	{r7, lr}
34182196:	b082      	sub	sp, #8
34182198:	af00      	add	r7, sp, #0
3418219a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
3418219c:	6878      	ldr	r0, [r7, #4]
3418219e:	f7ff ff29 	bl	34181ff4 <__NVIC_SetPriorityGrouping>
}
341821a2:	bf00      	nop
341821a4:	3708      	adds	r7, #8
341821a6:	46bd      	mov	sp, r7
341821a8:	bd80      	pop	{r7, pc}

341821aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
341821aa:	b580      	push	{r7, lr}
341821ac:	b086      	sub	sp, #24
341821ae:	af00      	add	r7, sp, #0
341821b0:	4603      	mov	r3, r0
341821b2:	60b9      	str	r1, [r7, #8]
341821b4:	607a      	str	r2, [r7, #4]
341821b6:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
341821b8:	f7ff ff40 	bl	3418203c <__NVIC_GetPriorityGrouping>
341821bc:	4603      	mov	r3, r0
341821be:	f003 0307 	and.w	r3, r3, #7
341821c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
341821c4:	687a      	ldr	r2, [r7, #4]
341821c6:	68b9      	ldr	r1, [r7, #8]
341821c8:	6978      	ldr	r0, [r7, #20]
341821ca:	f7ff ff8d 	bl	341820e8 <NVIC_EncodePriority>
341821ce:	4602      	mov	r2, r0
341821d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
341821d4:	4611      	mov	r1, r2
341821d6:	4618      	mov	r0, r3
341821d8:	f7ff ff5c 	bl	34182094 <__NVIC_SetPriority>
}
341821dc:	bf00      	nop
341821de:	3718      	adds	r7, #24
341821e0:	46bd      	mov	sp, r7
341821e2:	bd80      	pop	{r7, pc}

341821e4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32n6xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
341821e4:	b580      	push	{r7, lr}
341821e6:	b082      	sub	sp, #8
341821e8:	af00      	add	r7, sp, #0
341821ea:	4603      	mov	r3, r0
341821ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
341821ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
341821f2:	4618      	mov	r0, r3
341821f4:	f7ff ff30 	bl	34182058 <__NVIC_EnableIRQ>
}
341821f8:	bf00      	nop
341821fa:	3708      	adds	r7, #8
341821fc:	46bd      	mov	sp, r7
341821fe:	bd80      	pop	{r7, pc}

34182200 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
34182200:	b580      	push	{r7, lr}
34182202:	b082      	sub	sp, #8
34182204:	af00      	add	r7, sp, #0
34182206:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
34182208:	6878      	ldr	r0, [r7, #4]
3418220a:	f7ff ffa1 	bl	34182150 <SysTick_Config>
3418220e:	4603      	mov	r3, r0
}
34182210:	4618      	mov	r0, r3
34182212:	3708      	adds	r7, #8
34182214:	46bd      	mov	sp, r7
34182216:	bd80      	pop	{r7, pc}

34182218 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
34182218:	b480      	push	{r7}
3418221a:	b083      	sub	sp, #12
3418221c:	af00      	add	r7, sp, #0
3418221e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
34182220:	f3bf 8f5f 	dmb	sy
}
34182224:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before enabling MPU */

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
34182226:	4a0b      	ldr	r2, [pc, #44]	@ (34182254 <HAL_MPU_Enable+0x3c>)
34182228:	687b      	ldr	r3, [r7, #4]
3418222a:	f043 0301 	orr.w	r3, r3, #1
3418222e:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
34182230:	4b09      	ldr	r3, [pc, #36]	@ (34182258 <HAL_MPU_Enable+0x40>)
34182232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182234:	4a08      	ldr	r2, [pc, #32]	@ (34182258 <HAL_MPU_Enable+0x40>)
34182236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3418223a:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
3418223c:	f3bf 8f4f 	dsb	sy
}
34182240:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34182242:	f3bf 8f6f 	isb	sy
}
34182246:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
34182248:	bf00      	nop
3418224a:	370c      	adds	r7, #12
3418224c:	46bd      	mov	sp, r7
3418224e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182252:	4770      	bx	lr
34182254:	e000ed90 	.word	0xe000ed90
34182258:	e000ed00 	.word	0xe000ed00

3418225c <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
3418225c:	b480      	push	{r7}
3418225e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
34182260:	f3bf 8f5f 	dmb	sy
}
34182264:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
34182266:	4b0b      	ldr	r3, [pc, #44]	@ (34182294 <HAL_MPU_Disable+0x38>)
34182268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418226a:	4a0a      	ldr	r2, [pc, #40]	@ (34182294 <HAL_MPU_Disable+0x38>)
3418226c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182270:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU */
  MPU->CTRL &= ~MPU_CTRL_ENABLE_Msk;
34182272:	4b09      	ldr	r3, [pc, #36]	@ (34182298 <HAL_MPU_Disable+0x3c>)
34182274:	685b      	ldr	r3, [r3, #4]
34182276:	4a08      	ldr	r2, [pc, #32]	@ (34182298 <HAL_MPU_Disable+0x3c>)
34182278:	f023 0301 	bic.w	r3, r3, #1
3418227c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
3418227e:	f3bf 8f4f 	dsb	sy
}
34182282:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34182284:	f3bf 8f6f 	isb	sy
}
34182288:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
3418228a:	bf00      	nop
3418228c:	46bd      	mov	sp, r7
3418228e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182292:	4770      	bx	lr
34182294:	e000ed00 	.word	0xe000ed00
34182298:	e000ed90 	.word	0xe000ed90

3418229c <HAL_MPU_ConfigRegion>:
  * @param  pMPU_RegionInit Pointer to a MPU_Region_InitTypeDef structure that contains
  *                         the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
3418229c:	b580      	push	{r7, lr}
3418229e:	b082      	sub	sp, #8
341822a0:	af00      	add	r7, sp, #0
341822a2:	6078      	str	r0, [r7, #4]
  MPU_ConfigRegion(MPU, pMPU_RegionInit);
341822a4:	6879      	ldr	r1, [r7, #4]
341822a6:	4803      	ldr	r0, [pc, #12]	@ (341822b4 <HAL_MPU_ConfigRegion+0x18>)
341822a8:	f000 f814 	bl	341822d4 <MPU_ConfigRegion>
}
341822ac:	bf00      	nop
341822ae:	3708      	adds	r7, #8
341822b0:	46bd      	mov	sp, r7
341822b2:	bd80      	pop	{r7, pc}
341822b4:	e000ed90 	.word	0xe000ed90

341822b8 <HAL_MPU_ConfigMemoryAttributes>:
  * @param  pMPU_AttributesInit Pointer to a MPU_Attributes_InitTypeDef structure that contains
  *                             the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigMemoryAttributes(const MPU_Attributes_InitTypeDef *pMPU_AttributesInit)
{
341822b8:	b580      	push	{r7, lr}
341822ba:	b082      	sub	sp, #8
341822bc:	af00      	add	r7, sp, #0
341822be:	6078      	str	r0, [r7, #4]
  MPU_ConfigMemoryAttributes(MPU, pMPU_AttributesInit);
341822c0:	6879      	ldr	r1, [r7, #4]
341822c2:	4803      	ldr	r0, [pc, #12]	@ (341822d0 <HAL_MPU_ConfigMemoryAttributes+0x18>)
341822c4:	f000 f83e 	bl	34182344 <MPU_ConfigMemoryAttributes>
}
341822c8:	bf00      	nop
341822ca:	3708      	adds	r7, #8
341822cc:	46bd      	mov	sp, r7
341822ce:	bd80      	pop	{r7, pc}
341822d0:	e000ed90 	.word	0xe000ed90

341822d4 <MPU_ConfigRegion>:

/** @addtogroup CORTEX_Private_Functions
  * @{
  */
static void MPU_ConfigRegion(MPU_Type *MPUx, const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
341822d4:	b480      	push	{r7}
341822d6:	b083      	sub	sp, #12
341822d8:	af00      	add	r7, sp, #0
341822da:	6078      	str	r0, [r7, #4]
341822dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPUx->RNR = pMPU_RegionInit->Number;
341822de:	683b      	ldr	r3, [r7, #0]
341822e0:	785b      	ldrb	r3, [r3, #1]
341822e2:	461a      	mov	r2, r3
341822e4:	687b      	ldr	r3, [r7, #4]
341822e6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPUx->RLAR, MPU_RLAR_EN_Msk);
341822e8:	687b      	ldr	r3, [r7, #4]
341822ea:	691b      	ldr	r3, [r3, #16]
341822ec:	f023 0201 	bic.w	r2, r3, #1
341822f0:	687b      	ldr	r3, [r7, #4]
341822f2:	611a      	str	r2, [r3, #16]
  assert_param(IS_MPU_PRIV_INSTRUCTION_ACCESS(pMPU_RegionInit->DisablePrivExec));
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(pMPU_RegionInit->AccessPermission));
  assert_param(IS_MPU_ACCESS_SHAREABLE(pMPU_RegionInit->IsShareable));
  assert_param(IS_MPU_ATTRIBUTES_NUMBER(pMPU_RegionInit->AttributesIndex));

  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress & 0xFFFFFFE0UL)  |
341822f4:	683b      	ldr	r3, [r7, #0]
341822f6:	685b      	ldr	r3, [r3, #4]
341822f8:	f023 021f 	bic.w	r2, r3, #31
                ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RBAR_SH_Pos)  |
341822fc:	683b      	ldr	r3, [r7, #0]
341822fe:	7bdb      	ldrb	r3, [r3, #15]
34182300:	00db      	lsls	r3, r3, #3
  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress & 0xFFFFFFE0UL)  |
34182302:	431a      	orrs	r2, r3
                ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RBAR_AP_Pos)  |
34182304:	683b      	ldr	r3, [r7, #0]
34182306:	7b1b      	ldrb	r3, [r3, #12]
34182308:	005b      	lsls	r3, r3, #1
                ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RBAR_SH_Pos)  |
3418230a:	4313      	orrs	r3, r2
                ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RBAR_XN_Pos));
3418230c:	683a      	ldr	r2, [r7, #0]
3418230e:	7b52      	ldrb	r2, [r2, #13]
                ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RBAR_AP_Pos)  |
34182310:	431a      	orrs	r2, r3
  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress & 0xFFFFFFE0UL)  |
34182312:	687b      	ldr	r3, [r7, #4]
34182314:	60da      	str	r2, [r3, #12]

  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress & 0xFFFFFFE0UL) |
34182316:	683b      	ldr	r3, [r7, #0]
34182318:	689b      	ldr	r3, [r3, #8]
3418231a:	f023 021f 	bic.w	r2, r3, #31
                ((uint32_t)pMPU_RegionInit->DisablePrivExec << MPU_RLAR_PXN_Pos) |
3418231e:	683b      	ldr	r3, [r7, #0]
34182320:	7b9b      	ldrb	r3, [r3, #14]
34182322:	011b      	lsls	r3, r3, #4
  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress & 0xFFFFFFE0UL) |
34182324:	431a      	orrs	r2, r3
                ((uint32_t)pMPU_RegionInit->AttributesIndex  << MPU_RLAR_AttrIndx_Pos) |
34182326:	683b      	ldr	r3, [r7, #0]
34182328:	789b      	ldrb	r3, [r3, #2]
3418232a:	005b      	lsls	r3, r3, #1
                ((uint32_t)pMPU_RegionInit->DisablePrivExec << MPU_RLAR_PXN_Pos) |
3418232c:	4313      	orrs	r3, r2
                ((uint32_t)pMPU_RegionInit->Enable           << MPU_RLAR_EN_Pos));
3418232e:	683a      	ldr	r2, [r7, #0]
34182330:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)pMPU_RegionInit->AttributesIndex  << MPU_RLAR_AttrIndx_Pos) |
34182332:	431a      	orrs	r2, r3
  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress & 0xFFFFFFE0UL) |
34182334:	687b      	ldr	r3, [r7, #4]
34182336:	611a      	str	r2, [r3, #16]
}
34182338:	bf00      	nop
3418233a:	370c      	adds	r7, #12
3418233c:	46bd      	mov	sp, r7
3418233e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182342:	4770      	bx	lr

34182344 <MPU_ConfigMemoryAttributes>:

static void MPU_ConfigMemoryAttributes(MPU_Type *MPUx, const MPU_Attributes_InitTypeDef *pMPU_AttributesInit)
{
34182344:	b480      	push	{r7}
34182346:	b087      	sub	sp, #28
34182348:	af00      	add	r7, sp, #0
3418234a:	6078      	str	r0, [r7, #4]
3418234c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_MPU_ATTRIBUTES_NUMBER(pMPU_AttributesInit->Number));
  /* No need to check Attributes value as all 0x0..0xFF possible */

  if (pMPU_AttributesInit->Number < MPU_ATTRIBUTES_NUMBER4)
3418234e:	683b      	ldr	r3, [r7, #0]
34182350:	781b      	ldrb	r3, [r3, #0]
34182352:	2b03      	cmp	r3, #3
34182354:	d806      	bhi.n	34182364 <MPU_ConfigMemoryAttributes+0x20>
  {
    /* Program MPU_MAIR0 */
    p_mair = &(MPUx->MAIR0);
34182356:	687b      	ldr	r3, [r7, #4]
34182358:	3330      	adds	r3, #48	@ 0x30
3418235a:	617b      	str	r3, [r7, #20]
    attr_number = pMPU_AttributesInit->Number;
3418235c:	683b      	ldr	r3, [r7, #0]
3418235e:	781b      	ldrb	r3, [r3, #0]
34182360:	613b      	str	r3, [r7, #16]
34182362:	e006      	b.n	34182372 <MPU_ConfigMemoryAttributes+0x2e>
  }
  else
  {
    /* Program MPU_MAIR1 */
    p_mair = &(MPUx->MAIR1);
34182364:	687b      	ldr	r3, [r7, #4]
34182366:	3334      	adds	r3, #52	@ 0x34
34182368:	617b      	str	r3, [r7, #20]
    attr_number = (uint32_t)pMPU_AttributesInit->Number - 4U;
3418236a:	683b      	ldr	r3, [r7, #0]
3418236c:	781b      	ldrb	r3, [r3, #0]
3418236e:	3b04      	subs	r3, #4
34182370:	613b      	str	r3, [r7, #16]
  }

  attr_values = *(p_mair);
34182372:	697b      	ldr	r3, [r7, #20]
34182374:	681b      	ldr	r3, [r3, #0]
34182376:	60fb      	str	r3, [r7, #12]
  attr_values &=  ~(0xFFU << (attr_number * 8U));
34182378:	693b      	ldr	r3, [r7, #16]
3418237a:	00db      	lsls	r3, r3, #3
3418237c:	22ff      	movs	r2, #255	@ 0xff
3418237e:	fa02 f303 	lsl.w	r3, r2, r3
34182382:	43db      	mvns	r3, r3
34182384:	68fa      	ldr	r2, [r7, #12]
34182386:	4013      	ands	r3, r2
34182388:	60fb      	str	r3, [r7, #12]
  *(p_mair) = attr_values | ((uint32_t)pMPU_AttributesInit->Attributes << (attr_number * 8U));
3418238a:	683b      	ldr	r3, [r7, #0]
3418238c:	785b      	ldrb	r3, [r3, #1]
3418238e:	461a      	mov	r2, r3
34182390:	693b      	ldr	r3, [r7, #16]
34182392:	00db      	lsls	r3, r3, #3
34182394:	409a      	lsls	r2, r3
34182396:	68fb      	ldr	r3, [r7, #12]
34182398:	431a      	orrs	r2, r3
3418239a:	697b      	ldr	r3, [r7, #20]
3418239c:	601a      	str	r2, [r3, #0]
}
3418239e:	bf00      	nop
341823a0:	371c      	adds	r7, #28
341823a2:	46bd      	mov	sp, r7
341823a4:	f85d 7b04 	ldr.w	r7, [sp], #4
341823a8:	4770      	bx	lr

341823aa <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
341823aa:	b580      	push	{r7, lr}
341823ac:	b084      	sub	sp, #16
341823ae:	af00      	add	r7, sp, #0
341823b0:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
341823b2:	f7ff fd1f 	bl	34181df4 <HAL_GetTick>
341823b6:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
341823b8:	687b      	ldr	r3, [r7, #4]
341823ba:	2b00      	cmp	r3, #0
341823bc:	d101      	bne.n	341823c2 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
341823be:	2301      	movs	r3, #1
341823c0:	e06b      	b.n	3418249a <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
341823c2:	687b      	ldr	r3, [r7, #4]
341823c4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
341823c8:	b2db      	uxtb	r3, r3
341823ca:	2b02      	cmp	r3, #2
341823cc:	d008      	beq.n	341823e0 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
341823ce:	687b      	ldr	r3, [r7, #4]
341823d0:	2220      	movs	r2, #32
341823d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
341823d4:	687b      	ldr	r3, [r7, #4]
341823d6:	2200      	movs	r2, #0
341823d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
341823dc:	2301      	movs	r3, #1
341823de:	e05c      	b.n	3418249a <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
341823e0:	687b      	ldr	r3, [r7, #4]
341823e2:	681b      	ldr	r3, [r3, #0]
341823e4:	695a      	ldr	r2, [r3, #20]
341823e6:	687b      	ldr	r3, [r7, #4]
341823e8:	681b      	ldr	r3, [r3, #0]
341823ea:	f042 0204 	orr.w	r2, r2, #4
341823ee:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
341823f0:	687b      	ldr	r3, [r7, #4]
341823f2:	2205      	movs	r2, #5
341823f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
341823f8:	e020      	b.n	3418243c <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
341823fa:	f7ff fcfb 	bl	34181df4 <HAL_GetTick>
341823fe:	4602      	mov	r2, r0
34182400:	68fb      	ldr	r3, [r7, #12]
34182402:	1ad3      	subs	r3, r2, r3
34182404:	2b05      	cmp	r3, #5
34182406:	d919      	bls.n	3418243c <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
34182408:	687b      	ldr	r3, [r7, #4]
3418240a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418240c:	f043 0210 	orr.w	r2, r3, #16
34182410:	687b      	ldr	r3, [r7, #4]
34182412:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
34182414:	687b      	ldr	r3, [r7, #4]
34182416:	2203      	movs	r2, #3
34182418:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
3418241c:	687b      	ldr	r3, [r7, #4]
3418241e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34182420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34182424:	2b00      	cmp	r3, #0
34182426:	d003      	beq.n	34182430 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34182428:	687b      	ldr	r3, [r7, #4]
3418242a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418242c:	2201      	movs	r2, #1
3418242e:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
34182430:	687b      	ldr	r3, [r7, #4]
34182432:	2200      	movs	r2, #0
34182434:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
34182438:	2301      	movs	r3, #1
3418243a:	e02e      	b.n	3418249a <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
3418243c:	687b      	ldr	r3, [r7, #4]
3418243e:	681b      	ldr	r3, [r3, #0]
34182440:	691b      	ldr	r3, [r3, #16]
34182442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34182446:	2b00      	cmp	r3, #0
34182448:	d0d7      	beq.n	341823fa <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
3418244a:	687b      	ldr	r3, [r7, #4]
3418244c:	681b      	ldr	r3, [r3, #0]
3418244e:	695a      	ldr	r2, [r3, #20]
34182450:	687b      	ldr	r3, [r7, #4]
34182452:	681b      	ldr	r3, [r3, #0]
34182454:	f042 0202 	orr.w	r2, r2, #2
34182458:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
3418245a:	687b      	ldr	r3, [r7, #4]
3418245c:	2204      	movs	r2, #4
3418245e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
34182462:	687b      	ldr	r3, [r7, #4]
34182464:	681b      	ldr	r3, [r3, #0]
34182466:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
3418246a:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
3418246c:	687b      	ldr	r3, [r7, #4]
3418246e:	2201      	movs	r2, #1
34182470:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34182474:	687b      	ldr	r3, [r7, #4]
34182476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34182478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418247c:	2b00      	cmp	r3, #0
3418247e:	d007      	beq.n	34182490 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34182480:	687b      	ldr	r3, [r7, #4]
34182482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34182484:	2201      	movs	r2, #1
34182486:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
34182488:	687b      	ldr	r3, [r7, #4]
3418248a:	681b      	ldr	r3, [r3, #0]
3418248c:	2200      	movs	r2, #0
3418248e:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
34182490:	687b      	ldr	r3, [r7, #4]
34182492:	2200      	movs	r2, #0
34182494:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
34182498:	2300      	movs	r3, #0
}
3418249a:	4618      	mov	r0, r3
3418249c:	3710      	adds	r7, #16
3418249e:	46bd      	mov	sp, r7
341824a0:	bd80      	pop	{r7, pc}
	...

341824a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
341824a4:	b480      	push	{r7}
341824a6:	b087      	sub	sp, #28
341824a8:	af00      	add	r7, sp, #0
341824aa:	6078      	str	r0, [r7, #4]
341824ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
341824ae:	2300      	movs	r3, #0
341824b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
341824b2:	e180      	b.n	341827b6 <HAL_GPIO_Init+0x312>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
341824b4:	683b      	ldr	r3, [r7, #0]
341824b6:	681a      	ldr	r2, [r3, #0]
341824b8:	2101      	movs	r1, #1
341824ba:	697b      	ldr	r3, [r7, #20]
341824bc:	fa01 f303 	lsl.w	r3, r1, r3
341824c0:	4013      	ands	r3, r2
341824c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
341824c4:	68fb      	ldr	r3, [r7, #12]
341824c6:	2b00      	cmp	r3, #0
341824c8:	f000 8172 	beq.w	341827b0 <HAL_GPIO_Init+0x30c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
341824cc:	683b      	ldr	r3, [r7, #0]
341824ce:	685b      	ldr	r3, [r3, #4]
341824d0:	f003 0303 	and.w	r3, r3, #3
341824d4:	2b01      	cmp	r3, #1
341824d6:	d005      	beq.n	341824e4 <HAL_GPIO_Init+0x40>
341824d8:	683b      	ldr	r3, [r7, #0]
341824da:	685b      	ldr	r3, [r3, #4]
341824dc:	f003 0303 	and.w	r3, r3, #3
341824e0:	2b02      	cmp	r3, #2
341824e2:	d130      	bne.n	34182546 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
341824e4:	687b      	ldr	r3, [r7, #4]
341824e6:	689b      	ldr	r3, [r3, #8]
341824e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
341824ea:	697b      	ldr	r3, [r7, #20]
341824ec:	005b      	lsls	r3, r3, #1
341824ee:	2203      	movs	r2, #3
341824f0:	fa02 f303 	lsl.w	r3, r2, r3
341824f4:	43db      	mvns	r3, r3
341824f6:	693a      	ldr	r2, [r7, #16]
341824f8:	4013      	ands	r3, r2
341824fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
341824fc:	683b      	ldr	r3, [r7, #0]
341824fe:	68da      	ldr	r2, [r3, #12]
34182500:	697b      	ldr	r3, [r7, #20]
34182502:	005b      	lsls	r3, r3, #1
34182504:	fa02 f303 	lsl.w	r3, r2, r3
34182508:	693a      	ldr	r2, [r7, #16]
3418250a:	4313      	orrs	r3, r2
3418250c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
3418250e:	687b      	ldr	r3, [r7, #4]
34182510:	693a      	ldr	r2, [r7, #16]
34182512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34182514:	687b      	ldr	r3, [r7, #4]
34182516:	685b      	ldr	r3, [r3, #4]
34182518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
3418251a:	2201      	movs	r2, #1
3418251c:	697b      	ldr	r3, [r7, #20]
3418251e:	fa02 f303 	lsl.w	r3, r2, r3
34182522:	43db      	mvns	r3, r3
34182524:	693a      	ldr	r2, [r7, #16]
34182526:	4013      	ands	r3, r2
34182528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
3418252a:	683b      	ldr	r3, [r7, #0]
3418252c:	685b      	ldr	r3, [r3, #4]
3418252e:	091b      	lsrs	r3, r3, #4
34182530:	f003 0201 	and.w	r2, r3, #1
34182534:	697b      	ldr	r3, [r7, #20]
34182536:	fa02 f303 	lsl.w	r3, r2, r3
3418253a:	693a      	ldr	r2, [r7, #16]
3418253c:	4313      	orrs	r3, r2
3418253e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
34182540:	687b      	ldr	r3, [r7, #4]
34182542:	693a      	ldr	r2, [r7, #16]
34182544:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34182546:	683b      	ldr	r3, [r7, #0]
34182548:	685b      	ldr	r3, [r3, #4]
3418254a:	f003 0303 	and.w	r3, r3, #3
3418254e:	2b03      	cmp	r3, #3
34182550:	d109      	bne.n	34182566 <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34182552:	683b      	ldr	r3, [r7, #0]
34182554:	685b      	ldr	r3, [r3, #4]
34182556:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
3418255a:	2b03      	cmp	r3, #3
3418255c:	d11b      	bne.n	34182596 <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
3418255e:	683b      	ldr	r3, [r7, #0]
34182560:	689b      	ldr	r3, [r3, #8]
34182562:	2b01      	cmp	r3, #1
34182564:	d017      	beq.n	34182596 <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
34182566:	687b      	ldr	r3, [r7, #4]
34182568:	68db      	ldr	r3, [r3, #12]
3418256a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
3418256c:	697b      	ldr	r3, [r7, #20]
3418256e:	005b      	lsls	r3, r3, #1
34182570:	2203      	movs	r2, #3
34182572:	fa02 f303 	lsl.w	r3, r2, r3
34182576:	43db      	mvns	r3, r3
34182578:	693a      	ldr	r2, [r7, #16]
3418257a:	4013      	ands	r3, r2
3418257c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
3418257e:	683b      	ldr	r3, [r7, #0]
34182580:	689a      	ldr	r2, [r3, #8]
34182582:	697b      	ldr	r3, [r7, #20]
34182584:	005b      	lsls	r3, r3, #1
34182586:	fa02 f303 	lsl.w	r3, r2, r3
3418258a:	693a      	ldr	r2, [r7, #16]
3418258c:	4313      	orrs	r3, r2
3418258e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
34182590:	687b      	ldr	r3, [r7, #4]
34182592:	693a      	ldr	r2, [r7, #16]
34182594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34182596:	683b      	ldr	r3, [r7, #0]
34182598:	685b      	ldr	r3, [r3, #4]
3418259a:	f003 0303 	and.w	r3, r3, #3
3418259e:	2b02      	cmp	r3, #2
341825a0:	d123      	bne.n	341825ea <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
341825a2:	697b      	ldr	r3, [r7, #20]
341825a4:	08da      	lsrs	r2, r3, #3
341825a6:	687b      	ldr	r3, [r7, #4]
341825a8:	3208      	adds	r2, #8
341825aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
341825ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
341825b0:	697b      	ldr	r3, [r7, #20]
341825b2:	f003 0307 	and.w	r3, r3, #7
341825b6:	009b      	lsls	r3, r3, #2
341825b8:	220f      	movs	r2, #15
341825ba:	fa02 f303 	lsl.w	r3, r2, r3
341825be:	43db      	mvns	r3, r3
341825c0:	693a      	ldr	r2, [r7, #16]
341825c2:	4013      	ands	r3, r2
341825c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
341825c6:	683b      	ldr	r3, [r7, #0]
341825c8:	691a      	ldr	r2, [r3, #16]
341825ca:	697b      	ldr	r3, [r7, #20]
341825cc:	f003 0307 	and.w	r3, r3, #7
341825d0:	009b      	lsls	r3, r3, #2
341825d2:	fa02 f303 	lsl.w	r3, r2, r3
341825d6:	693a      	ldr	r2, [r7, #16]
341825d8:	4313      	orrs	r3, r2
341825da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
341825dc:	697b      	ldr	r3, [r7, #20]
341825de:	08da      	lsrs	r2, r3, #3
341825e0:	687b      	ldr	r3, [r7, #4]
341825e2:	3208      	adds	r2, #8
341825e4:	6939      	ldr	r1, [r7, #16]
341825e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
341825ea:	687b      	ldr	r3, [r7, #4]
341825ec:	681b      	ldr	r3, [r3, #0]
341825ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
341825f0:	697b      	ldr	r3, [r7, #20]
341825f2:	005b      	lsls	r3, r3, #1
341825f4:	2203      	movs	r2, #3
341825f6:	fa02 f303 	lsl.w	r3, r2, r3
341825fa:	43db      	mvns	r3, r3
341825fc:	693a      	ldr	r2, [r7, #16]
341825fe:	4013      	ands	r3, r2
34182600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34182602:	683b      	ldr	r3, [r7, #0]
34182604:	685b      	ldr	r3, [r3, #4]
34182606:	f003 0203 	and.w	r2, r3, #3
3418260a:	697b      	ldr	r3, [r7, #20]
3418260c:	005b      	lsls	r3, r3, #1
3418260e:	fa02 f303 	lsl.w	r3, r2, r3
34182612:	693a      	ldr	r2, [r7, #16]
34182614:	4313      	orrs	r3, r2
34182616:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
34182618:	687b      	ldr	r3, [r7, #4]
3418261a:	693a      	ldr	r2, [r7, #16]
3418261c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
3418261e:	683b      	ldr	r3, [r7, #0]
34182620:	685b      	ldr	r3, [r3, #4]
34182622:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
34182626:	2b00      	cmp	r3, #0
34182628:	f000 80c2 	beq.w	341827b0 <HAL_GPIO_Init+0x30c>
      {
        temp = EXTI->EXTICR[position >> 2u];
3418262c:	4a69      	ldr	r2, [pc, #420]	@ (341827d4 <HAL_GPIO_Init+0x330>)
3418262e:	697b      	ldr	r3, [r7, #20]
34182630:	089b      	lsrs	r3, r3, #2
34182632:	3318      	adds	r3, #24
34182634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34182638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
3418263a:	697b      	ldr	r3, [r7, #20]
3418263c:	f003 0303 	and.w	r3, r3, #3
34182640:	00db      	lsls	r3, r3, #3
34182642:	220f      	movs	r2, #15
34182644:	fa02 f303 	lsl.w	r3, r2, r3
34182648:	43db      	mvns	r3, r3
3418264a:	693a      	ldr	r2, [r7, #16]
3418264c:	4013      	ands	r3, r2
3418264e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34182650:	687b      	ldr	r3, [r7, #4]
34182652:	4a61      	ldr	r2, [pc, #388]	@ (341827d8 <HAL_GPIO_Init+0x334>)
34182654:	4293      	cmp	r3, r2
34182656:	d043      	beq.n	341826e0 <HAL_GPIO_Init+0x23c>
34182658:	687b      	ldr	r3, [r7, #4]
3418265a:	4a60      	ldr	r2, [pc, #384]	@ (341827dc <HAL_GPIO_Init+0x338>)
3418265c:	4293      	cmp	r3, r2
3418265e:	d03d      	beq.n	341826dc <HAL_GPIO_Init+0x238>
34182660:	687b      	ldr	r3, [r7, #4]
34182662:	4a5f      	ldr	r2, [pc, #380]	@ (341827e0 <HAL_GPIO_Init+0x33c>)
34182664:	4293      	cmp	r3, r2
34182666:	d037      	beq.n	341826d8 <HAL_GPIO_Init+0x234>
34182668:	687b      	ldr	r3, [r7, #4]
3418266a:	4a5e      	ldr	r2, [pc, #376]	@ (341827e4 <HAL_GPIO_Init+0x340>)
3418266c:	4293      	cmp	r3, r2
3418266e:	d031      	beq.n	341826d4 <HAL_GPIO_Init+0x230>
34182670:	687b      	ldr	r3, [r7, #4]
34182672:	4a5d      	ldr	r2, [pc, #372]	@ (341827e8 <HAL_GPIO_Init+0x344>)
34182674:	4293      	cmp	r3, r2
34182676:	d02b      	beq.n	341826d0 <HAL_GPIO_Init+0x22c>
34182678:	687b      	ldr	r3, [r7, #4]
3418267a:	4a5c      	ldr	r2, [pc, #368]	@ (341827ec <HAL_GPIO_Init+0x348>)
3418267c:	4293      	cmp	r3, r2
3418267e:	d025      	beq.n	341826cc <HAL_GPIO_Init+0x228>
34182680:	687b      	ldr	r3, [r7, #4]
34182682:	4a5b      	ldr	r2, [pc, #364]	@ (341827f0 <HAL_GPIO_Init+0x34c>)
34182684:	4293      	cmp	r3, r2
34182686:	d01f      	beq.n	341826c8 <HAL_GPIO_Init+0x224>
34182688:	687b      	ldr	r3, [r7, #4]
3418268a:	4a5a      	ldr	r2, [pc, #360]	@ (341827f4 <HAL_GPIO_Init+0x350>)
3418268c:	4293      	cmp	r3, r2
3418268e:	d019      	beq.n	341826c4 <HAL_GPIO_Init+0x220>
34182690:	687b      	ldr	r3, [r7, #4]
34182692:	4a59      	ldr	r2, [pc, #356]	@ (341827f8 <HAL_GPIO_Init+0x354>)
34182694:	4293      	cmp	r3, r2
34182696:	d013      	beq.n	341826c0 <HAL_GPIO_Init+0x21c>
34182698:	687b      	ldr	r3, [r7, #4]
3418269a:	4a58      	ldr	r2, [pc, #352]	@ (341827fc <HAL_GPIO_Init+0x358>)
3418269c:	4293      	cmp	r3, r2
3418269e:	d00d      	beq.n	341826bc <HAL_GPIO_Init+0x218>
341826a0:	687b      	ldr	r3, [r7, #4]
341826a2:	4a57      	ldr	r2, [pc, #348]	@ (34182800 <HAL_GPIO_Init+0x35c>)
341826a4:	4293      	cmp	r3, r2
341826a6:	d007      	beq.n	341826b8 <HAL_GPIO_Init+0x214>
341826a8:	687b      	ldr	r3, [r7, #4]
341826aa:	4a56      	ldr	r2, [pc, #344]	@ (34182804 <HAL_GPIO_Init+0x360>)
341826ac:	4293      	cmp	r3, r2
341826ae:	d101      	bne.n	341826b4 <HAL_GPIO_Init+0x210>
341826b0:	230b      	movs	r3, #11
341826b2:	e016      	b.n	341826e2 <HAL_GPIO_Init+0x23e>
341826b4:	2310      	movs	r3, #16
341826b6:	e014      	b.n	341826e2 <HAL_GPIO_Init+0x23e>
341826b8:	230a      	movs	r3, #10
341826ba:	e012      	b.n	341826e2 <HAL_GPIO_Init+0x23e>
341826bc:	2309      	movs	r3, #9
341826be:	e010      	b.n	341826e2 <HAL_GPIO_Init+0x23e>
341826c0:	2308      	movs	r3, #8
341826c2:	e00e      	b.n	341826e2 <HAL_GPIO_Init+0x23e>
341826c4:	2307      	movs	r3, #7
341826c6:	e00c      	b.n	341826e2 <HAL_GPIO_Init+0x23e>
341826c8:	2306      	movs	r3, #6
341826ca:	e00a      	b.n	341826e2 <HAL_GPIO_Init+0x23e>
341826cc:	2305      	movs	r3, #5
341826ce:	e008      	b.n	341826e2 <HAL_GPIO_Init+0x23e>
341826d0:	2304      	movs	r3, #4
341826d2:	e006      	b.n	341826e2 <HAL_GPIO_Init+0x23e>
341826d4:	2303      	movs	r3, #3
341826d6:	e004      	b.n	341826e2 <HAL_GPIO_Init+0x23e>
341826d8:	2302      	movs	r3, #2
341826da:	e002      	b.n	341826e2 <HAL_GPIO_Init+0x23e>
341826dc:	2301      	movs	r3, #1
341826de:	e000      	b.n	341826e2 <HAL_GPIO_Init+0x23e>
341826e0:	2300      	movs	r3, #0
341826e2:	697a      	ldr	r2, [r7, #20]
341826e4:	f002 0203 	and.w	r2, r2, #3
341826e8:	00d2      	lsls	r2, r2, #3
341826ea:	4093      	lsls	r3, r2
341826ec:	693a      	ldr	r2, [r7, #16]
341826ee:	4313      	orrs	r3, r2
341826f0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
341826f2:	4938      	ldr	r1, [pc, #224]	@ (341827d4 <HAL_GPIO_Init+0x330>)
341826f4:	697b      	ldr	r3, [r7, #20]
341826f6:	089b      	lsrs	r3, r3, #2
341826f8:	3318      	adds	r3, #24
341826fa:	693a      	ldr	r2, [r7, #16]
341826fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34182700:	4b34      	ldr	r3, [pc, #208]	@ (341827d4 <HAL_GPIO_Init+0x330>)
34182702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34182706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34182708:	68fb      	ldr	r3, [r7, #12]
3418270a:	43db      	mvns	r3, r3
3418270c:	693a      	ldr	r2, [r7, #16]
3418270e:	4013      	ands	r3, r2
34182710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
34182712:	683b      	ldr	r3, [r7, #0]
34182714:	685b      	ldr	r3, [r3, #4]
34182716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418271a:	2b00      	cmp	r3, #0
3418271c:	d003      	beq.n	34182726 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
3418271e:	693a      	ldr	r2, [r7, #16]
34182720:	68fb      	ldr	r3, [r7, #12]
34182722:	4313      	orrs	r3, r2
34182724:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34182726:	4a2b      	ldr	r2, [pc, #172]	@ (341827d4 <HAL_GPIO_Init+0x330>)
34182728:	693b      	ldr	r3, [r7, #16]
3418272a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
3418272e:	4b29      	ldr	r3, [pc, #164]	@ (341827d4 <HAL_GPIO_Init+0x330>)
34182730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34182734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34182736:	68fb      	ldr	r3, [r7, #12]
34182738:	43db      	mvns	r3, r3
3418273a:	693a      	ldr	r2, [r7, #16]
3418273c:	4013      	ands	r3, r2
3418273e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34182740:	683b      	ldr	r3, [r7, #0]
34182742:	685b      	ldr	r3, [r3, #4]
34182744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34182748:	2b00      	cmp	r3, #0
3418274a:	d003      	beq.n	34182754 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
3418274c:	693a      	ldr	r2, [r7, #16]
3418274e:	68fb      	ldr	r3, [r7, #12]
34182750:	4313      	orrs	r3, r2
34182752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34182754:	4a1f      	ldr	r2, [pc, #124]	@ (341827d4 <HAL_GPIO_Init+0x330>)
34182756:	693b      	ldr	r3, [r7, #16]
34182758:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
3418275c:	4b1d      	ldr	r3, [pc, #116]	@ (341827d4 <HAL_GPIO_Init+0x330>)
3418275e:	681b      	ldr	r3, [r3, #0]
34182760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34182762:	68fb      	ldr	r3, [r7, #12]
34182764:	43db      	mvns	r3, r3
34182766:	693a      	ldr	r2, [r7, #16]
34182768:	4013      	ands	r3, r2
3418276a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
3418276c:	683b      	ldr	r3, [r7, #0]
3418276e:	685b      	ldr	r3, [r3, #4]
34182770:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34182774:	2b00      	cmp	r3, #0
34182776:	d003      	beq.n	34182780 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
34182778:	693a      	ldr	r2, [r7, #16]
3418277a:	68fb      	ldr	r3, [r7, #12]
3418277c:	4313      	orrs	r3, r2
3418277e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34182780:	4a14      	ldr	r2, [pc, #80]	@ (341827d4 <HAL_GPIO_Init+0x330>)
34182782:	693b      	ldr	r3, [r7, #16]
34182784:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34182786:	4b13      	ldr	r3, [pc, #76]	@ (341827d4 <HAL_GPIO_Init+0x330>)
34182788:	685b      	ldr	r3, [r3, #4]
3418278a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
3418278c:	68fb      	ldr	r3, [r7, #12]
3418278e:	43db      	mvns	r3, r3
34182790:	693a      	ldr	r2, [r7, #16]
34182792:	4013      	ands	r3, r2
34182794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
34182796:	683b      	ldr	r3, [r7, #0]
34182798:	685b      	ldr	r3, [r3, #4]
3418279a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3418279e:	2b00      	cmp	r3, #0
341827a0:	d003      	beq.n	341827aa <HAL_GPIO_Init+0x306>
        {
          temp |= iocurrent;
341827a2:	693a      	ldr	r2, [r7, #16]
341827a4:	68fb      	ldr	r3, [r7, #12]
341827a6:	4313      	orrs	r3, r2
341827a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
341827aa:	4a0a      	ldr	r2, [pc, #40]	@ (341827d4 <HAL_GPIO_Init+0x330>)
341827ac:	693b      	ldr	r3, [r7, #16]
341827ae:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
341827b0:	697b      	ldr	r3, [r7, #20]
341827b2:	3301      	adds	r3, #1
341827b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
341827b6:	683b      	ldr	r3, [r7, #0]
341827b8:	681a      	ldr	r2, [r3, #0]
341827ba:	697b      	ldr	r3, [r7, #20]
341827bc:	fa22 f303 	lsr.w	r3, r2, r3
341827c0:	2b00      	cmp	r3, #0
341827c2:	f47f ae77 	bne.w	341824b4 <HAL_GPIO_Init+0x10>
  }
}
341827c6:	bf00      	nop
341827c8:	bf00      	nop
341827ca:	371c      	adds	r7, #28
341827cc:	46bd      	mov	sp, r7
341827ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341827d2:	4770      	bx	lr
341827d4:	56025000 	.word	0x56025000
341827d8:	56020000 	.word	0x56020000
341827dc:	56020400 	.word	0x56020400
341827e0:	56020800 	.word	0x56020800
341827e4:	56020c00 	.word	0x56020c00
341827e8:	56021000 	.word	0x56021000
341827ec:	56021400 	.word	0x56021400
341827f0:	56021800 	.word	0x56021800
341827f4:	56021c00 	.word	0x56021c00
341827f8:	56023400 	.word	0x56023400
341827fc:	56023800 	.word	0x56023800
34182800:	56023c00 	.word	0x56023c00
34182804:	56024000 	.word	0x56024000

34182808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34182808:	b480      	push	{r7}
3418280a:	b083      	sub	sp, #12
3418280c:	af00      	add	r7, sp, #0
3418280e:	6078      	str	r0, [r7, #4]
34182810:	460b      	mov	r3, r1
34182812:	807b      	strh	r3, [r7, #2]
34182814:	4613      	mov	r3, r2
34182816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
34182818:	787b      	ldrb	r3, [r7, #1]
3418281a:	2b00      	cmp	r3, #0
3418281c:	d003      	beq.n	34182826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
3418281e:	887a      	ldrh	r2, [r7, #2]
34182820:	687b      	ldr	r3, [r7, #4]
34182822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34182824:	e002      	b.n	3418282c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34182826:	887a      	ldrh	r2, [r7, #2]
34182828:	687b      	ldr	r3, [r7, #4]
3418282a:	629a      	str	r2, [r3, #40]	@ 0x28
}
3418282c:	bf00      	nop
3418282e:	370c      	adds	r7, #12
34182830:	46bd      	mov	sp, r7
34182832:	f85d 7b04 	ldr.w	r7, [sp], #4
34182836:	4770      	bx	lr

34182838 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
34182838:	b480      	push	{r7}
3418283a:	b085      	sub	sp, #20
3418283c:	af00      	add	r7, sp, #0
3418283e:	6078      	str	r0, [r7, #4]
34182840:	460b      	mov	r3, r1
34182842:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
34182844:	687b      	ldr	r3, [r7, #4]
34182846:	695b      	ldr	r3, [r3, #20]
34182848:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
3418284a:	887a      	ldrh	r2, [r7, #2]
3418284c:	68fb      	ldr	r3, [r7, #12]
3418284e:	4013      	ands	r3, r2
34182850:	041a      	lsls	r2, r3, #16
34182852:	68fb      	ldr	r3, [r7, #12]
34182854:	43d9      	mvns	r1, r3
34182856:	887b      	ldrh	r3, [r7, #2]
34182858:	400b      	ands	r3, r1
3418285a:	431a      	orrs	r2, r3
3418285c:	687b      	ldr	r3, [r7, #4]
3418285e:	619a      	str	r2, [r3, #24]
}
34182860:	bf00      	nop
34182862:	3714      	adds	r7, #20
34182864:	46bd      	mov	sp, r7
34182866:	f85d 7b04 	ldr.w	r7, [sp], #4
3418286a:	4770      	bx	lr

3418286c <HAL_PWREx_ConfigSupply>:
  * @note: The power supply configuration is not reset by wakeup from Standby mode and
  *        application reset, but only reset by VDD POR.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
3418286c:	b580      	push	{r7, lr}
3418286e:	b084      	sub	sp, #16
34182870:	af00      	add	r7, sp, #0
34182872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR1, PWR_SUPPLY_CONFIG_MASK, SupplySource);
34182874:	4b10      	ldr	r3, [pc, #64]	@ (341828b8 <HAL_PWREx_ConfigSupply+0x4c>)
34182876:	681b      	ldr	r3, [r3, #0]
34182878:	f023 0204 	bic.w	r2, r3, #4
3418287c:	490e      	ldr	r1, [pc, #56]	@ (341828b8 <HAL_PWREx_ConfigSupply+0x4c>)
3418287e:	687b      	ldr	r3, [r7, #4]
34182880:	4313      	orrs	r3, r2
34182882:	600b      	str	r3, [r1, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
34182884:	f7ff fab6 	bl	34181df4 <HAL_GetTick>
34182888:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
3418288a:	e009      	b.n	341828a0 <HAL_PWREx_ConfigSupply+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
3418288c:	f7ff fab2 	bl	34181df4 <HAL_GetTick>
34182890:	4602      	mov	r2, r0
34182892:	68fb      	ldr	r3, [r7, #12]
34182894:	1ad3      	subs	r3, r2, r3
34182896:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
3418289a:	d901      	bls.n	341828a0 <HAL_PWREx_ConfigSupply+0x34>
    {
      return HAL_ERROR;
3418289c:	2301      	movs	r3, #1
3418289e:	e006      	b.n	341828ae <HAL_PWREx_ConfigSupply+0x42>
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
341828a0:	4b05      	ldr	r3, [pc, #20]	@ (341828b8 <HAL_PWREx_ConfigSupply+0x4c>)
341828a2:	6a1b      	ldr	r3, [r3, #32]
341828a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
341828a8:	2b00      	cmp	r3, #0
341828aa:	d0ef      	beq.n	3418288c <HAL_PWREx_ConfigSupply+0x20>
    }
  }

  return HAL_OK;
341828ac:	2300      	movs	r3, #0
}
341828ae:	4618      	mov	r0, r3
341828b0:	3710      	adds	r7, #16
341828b2:	46bd      	mov	sp, r7
341828b4:	bd80      	pop	{r7, pc}
341828b6:	bf00      	nop
341828b8:	56024800 	.word	0x56024800

341828bc <HAL_PWREx_ConfigVddIORange>:
  * @note   Setting this configuration while VDDIOx is in 3v3 range
  *         damages the device.
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
341828bc:	b480      	push	{r7}
341828be:	b083      	sub	sp, #12
341828c0:	af00      	add	r7, sp, #0
341828c2:	6078      	str	r0, [r7, #4]
341828c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));

  switch (VddIOPort)
341828c6:	687b      	ldr	r3, [r7, #4]
341828c8:	2b04      	cmp	r3, #4
341828ca:	d83f      	bhi.n	3418294c <HAL_PWREx_ConfigVddIORange+0x90>
341828cc:	a201      	add	r2, pc, #4	@ (adr r2, 341828d4 <HAL_PWREx_ConfigVddIORange+0x18>)
341828ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
341828d2:	bf00      	nop
341828d4:	341828e9 	.word	0x341828e9
341828d8:	341828fd 	.word	0x341828fd
341828dc:	34182911 	.word	0x34182911
341828e0:	34182925 	.word	0x34182925
341828e4:	34182939 	.word	0x34182939
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
341828e8:	4b1c      	ldr	r3, [pc, #112]	@ (3418295c <HAL_PWREx_ConfigVddIORange+0xa0>)
341828ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341828ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
341828f0:	683b      	ldr	r3, [r7, #0]
341828f2:	061b      	lsls	r3, r3, #24
341828f4:	4919      	ldr	r1, [pc, #100]	@ (3418295c <HAL_PWREx_ConfigVddIORange+0xa0>)
341828f6:	4313      	orrs	r3, r2
341828f8:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
341828fa:	e028      	b.n	3418294e <HAL_PWREx_ConfigVddIORange+0x92>

    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
341828fc:	4b17      	ldr	r3, [pc, #92]	@ (3418295c <HAL_PWREx_ConfigVddIORange+0xa0>)
341828fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34182900:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
34182904:	683b      	ldr	r3, [r7, #0]
34182906:	065b      	lsls	r3, r3, #25
34182908:	4914      	ldr	r1, [pc, #80]	@ (3418295c <HAL_PWREx_ConfigVddIORange+0xa0>)
3418290a:	4313      	orrs	r3, r2
3418290c:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
3418290e:	e01e      	b.n	3418294e <HAL_PWREx_ConfigVddIORange+0x92>

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34182910:	4b12      	ldr	r3, [pc, #72]	@ (3418295c <HAL_PWREx_ConfigVddIORange+0xa0>)
34182912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34182914:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
34182918:	683b      	ldr	r3, [r7, #0]
3418291a:	069b      	lsls	r3, r3, #26
3418291c:	490f      	ldr	r1, [pc, #60]	@ (3418295c <HAL_PWREx_ConfigVddIORange+0xa0>)
3418291e:	4313      	orrs	r3, r2
34182920:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
34182922:	e014      	b.n	3418294e <HAL_PWREx_ConfigVddIORange+0x92>

    case PWR_VDDIO4:
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
34182924:	4b0d      	ldr	r3, [pc, #52]	@ (3418295c <HAL_PWREx_ConfigVddIORange+0xa0>)
34182926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34182928:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
3418292c:	683b      	ldr	r3, [r7, #0]
3418292e:	061b      	lsls	r3, r3, #24
34182930:	490a      	ldr	r1, [pc, #40]	@ (3418295c <HAL_PWREx_ConfigVddIORange+0xa0>)
34182932:	4313      	orrs	r3, r2
34182934:	634b      	str	r3, [r1, #52]	@ 0x34
      break;
34182936:	e00a      	b.n	3418294e <HAL_PWREx_ConfigVddIORange+0x92>

    case PWR_VDDIO5:
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34182938:	4b08      	ldr	r3, [pc, #32]	@ (3418295c <HAL_PWREx_ConfigVddIORange+0xa0>)
3418293a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418293c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34182940:	683b      	ldr	r3, [r7, #0]
34182942:	061b      	lsls	r3, r3, #24
34182944:	4905      	ldr	r1, [pc, #20]	@ (3418295c <HAL_PWREx_ConfigVddIORange+0xa0>)
34182946:	4313      	orrs	r3, r2
34182948:	638b      	str	r3, [r1, #56]	@ 0x38
      break;
3418294a:	e000      	b.n	3418294e <HAL_PWREx_ConfigVddIORange+0x92>

    default:
      break;
3418294c:	bf00      	nop
  }
}
3418294e:	bf00      	nop
34182950:	370c      	adds	r7, #12
34182952:	46bd      	mov	sp, r7
34182954:	f85d 7b04 	ldr.w	r7, [sp], #4
34182958:	4770      	bx	lr
3418295a:	bf00      	nop
3418295c:	56024800 	.word	0x56024800

34182960 <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
34182960:	b480      	push	{r7}
34182962:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34182964:	4b05      	ldr	r3, [pc, #20]	@ (3418297c <HAL_PWREx_EnableVddIO3+0x1c>)
34182966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34182968:	4a04      	ldr	r2, [pc, #16]	@ (3418297c <HAL_PWREx_EnableVddIO3+0x1c>)
3418296a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
3418296e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34182970:	bf00      	nop
34182972:	46bd      	mov	sp, r7
34182974:	f85d 7b04 	ldr.w	r7, [sp], #4
34182978:	4770      	bx	lr
3418297a:	bf00      	nop
3418297c:	56024800 	.word	0x56024800

34182980 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll SR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
34182980:	b480      	push	{r7}
34182982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34182984:	4b06      	ldr	r3, [pc, #24]	@ (341829a0 <LL_RCC_HSE_IsReady+0x20>)
34182986:	685b      	ldr	r3, [r3, #4]
34182988:	f003 0310 	and.w	r3, r3, #16
3418298c:	2b00      	cmp	r3, #0
3418298e:	d001      	beq.n	34182994 <LL_RCC_HSE_IsReady+0x14>
34182990:	2301      	movs	r3, #1
34182992:	e000      	b.n	34182996 <LL_RCC_HSE_IsReady+0x16>
34182994:	2300      	movs	r3, #0
}
34182996:	4618      	mov	r0, r3
34182998:	46bd      	mov	sp, r7
3418299a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418299e:	4770      	bx	lr
341829a0:	56028000 	.word	0x56028000

341829a4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CSR          HSIONS        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
341829a4:	b480      	push	{r7}
341829a6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
341829a8:	4b04      	ldr	r3, [pc, #16]	@ (341829bc <LL_RCC_HSI_Enable+0x18>)
341829aa:	2208      	movs	r2, #8
341829ac:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
341829b0:	bf00      	nop
341829b2:	46bd      	mov	sp, r7
341829b4:	f85d 7b04 	ldr.w	r7, [sp], #4
341829b8:	4770      	bx	lr
341829ba:	bf00      	nop
341829bc:	56028000 	.word	0x56028000

341829c0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CCR          HSIONC        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
341829c0:	b480      	push	{r7}
341829c2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
341829c4:	4b05      	ldr	r3, [pc, #20]	@ (341829dc <LL_RCC_HSI_Disable+0x1c>)
341829c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341829ca:	461a      	mov	r2, r3
341829cc:	2308      	movs	r3, #8
341829ce:	6013      	str	r3, [r2, #0]
}
341829d0:	bf00      	nop
341829d2:	46bd      	mov	sp, r7
341829d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341829d8:	4770      	bx	lr
341829da:	bf00      	nop
341829dc:	56028000 	.word	0x56028000

341829e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
341829e0:	b480      	push	{r7}
341829e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
341829e4:	4b06      	ldr	r3, [pc, #24]	@ (34182a00 <LL_RCC_HSI_IsReady+0x20>)
341829e6:	685b      	ldr	r3, [r3, #4]
341829e8:	f003 0308 	and.w	r3, r3, #8
341829ec:	2b00      	cmp	r3, #0
341829ee:	d001      	beq.n	341829f4 <LL_RCC_HSI_IsReady+0x14>
341829f0:	2301      	movs	r3, #1
341829f2:	e000      	b.n	341829f6 <LL_RCC_HSI_IsReady+0x16>
341829f4:	2300      	movs	r3, #0
}
341829f6:	4618      	mov	r0, r3
341829f8:	46bd      	mov	sp, r7
341829fa:	f85d 7b04 	ldr.w	r7, [sp], #4
341829fe:	4770      	bx	lr
34182a00:	56028000 	.word	0x56028000

34182a04 <LL_RCC_HSI_SetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
34182a04:	b480      	push	{r7}
34182a06:	b083      	sub	sp, #12
34182a08:	af00      	add	r7, sp, #0
34182a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34182a0c:	4b06      	ldr	r3, [pc, #24]	@ (34182a28 <LL_RCC_HSI_SetDivider+0x24>)
34182a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34182a10:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
34182a14:	4904      	ldr	r1, [pc, #16]	@ (34182a28 <LL_RCC_HSI_SetDivider+0x24>)
34182a16:	687b      	ldr	r3, [r7, #4]
34182a18:	4313      	orrs	r3, r2
34182a1a:	648b      	str	r3, [r1, #72]	@ 0x48
}
34182a1c:	bf00      	nop
34182a1e:	370c      	adds	r7, #12
34182a20:	46bd      	mov	sp, r7
34182a22:	f85d 7b04 	ldr.w	r7, [sp], #4
34182a26:	4770      	bx	lr
34182a28:	56028000 	.word	0x56028000

34182a2c <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_2
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
34182a2c:	b480      	push	{r7}
34182a2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34182a30:	4b04      	ldr	r3, [pc, #16]	@ (34182a44 <LL_RCC_HSI_GetDivider+0x18>)
34182a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34182a34:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34182a38:	4618      	mov	r0, r3
34182a3a:	46bd      	mov	sp, r7
34182a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182a40:	4770      	bx	lr
34182a42:	bf00      	nop
34182a44:	56028000 	.word	0x56028000

34182a48 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll HSICFGR      HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value This parameter can be a value between 0 and 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
34182a48:	b480      	push	{r7}
34182a4a:	b083      	sub	sp, #12
34182a4c:	af00      	add	r7, sp, #0
34182a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34182a50:	4b07      	ldr	r3, [pc, #28]	@ (34182a70 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34182a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34182a54:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
34182a58:	687b      	ldr	r3, [r7, #4]
34182a5a:	041b      	lsls	r3, r3, #16
34182a5c:	4904      	ldr	r1, [pc, #16]	@ (34182a70 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34182a5e:	4313      	orrs	r3, r2
34182a60:	648b      	str	r3, [r1, #72]	@ 0x48
}
34182a62:	bf00      	nop
34182a64:	370c      	adds	r7, #12
34182a66:	46bd      	mov	sp, r7
34182a68:	f85d 7b04 	ldr.w	r7, [sp], #4
34182a6c:	4770      	bx	lr
34182a6e:	bf00      	nop
34182a70:	56028000 	.word	0x56028000

34182a74 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CSR          MSIONS        LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
34182a74:	b480      	push	{r7}
34182a76:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34182a78:	4b04      	ldr	r3, [pc, #16]	@ (34182a8c <LL_RCC_MSI_Enable+0x18>)
34182a7a:	2204      	movs	r2, #4
34182a7c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34182a80:	bf00      	nop
34182a82:	46bd      	mov	sp, r7
34182a84:	f85d 7b04 	ldr.w	r7, [sp], #4
34182a88:	4770      	bx	lr
34182a8a:	bf00      	nop
34182a8c:	56028000 	.word	0x56028000

34182a90 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CCR          MSIONC        LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
34182a90:	b480      	push	{r7}
34182a92:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34182a94:	4b05      	ldr	r3, [pc, #20]	@ (34182aac <LL_RCC_MSI_Disable+0x1c>)
34182a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182a9a:	461a      	mov	r2, r3
34182a9c:	2304      	movs	r3, #4
34182a9e:	6013      	str	r3, [r2, #0]
}
34182aa0:	bf00      	nop
34182aa2:	46bd      	mov	sp, r7
34182aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
34182aa8:	4770      	bx	lr
34182aaa:	bf00      	nop
34182aac:	56028000 	.word	0x56028000

34182ab0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI clock is ready
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
34182ab0:	b480      	push	{r7}
34182ab2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34182ab4:	4b06      	ldr	r3, [pc, #24]	@ (34182ad0 <LL_RCC_MSI_IsReady+0x20>)
34182ab6:	685b      	ldr	r3, [r3, #4]
34182ab8:	f003 0304 	and.w	r3, r3, #4
34182abc:	2b00      	cmp	r3, #0
34182abe:	d001      	beq.n	34182ac4 <LL_RCC_MSI_IsReady+0x14>
34182ac0:	2301      	movs	r3, #1
34182ac2:	e000      	b.n	34182ac6 <LL_RCC_MSI_IsReady+0x16>
34182ac4:	2300      	movs	r3, #0
}
34182ac6:	4618      	mov	r0, r3
34182ac8:	46bd      	mov	sp, r7
34182aca:	f85d 7b04 	ldr.w	r7, [sp], #4
34182ace:	4770      	bx	lr
34182ad0:	56028000 	.word	0x56028000

34182ad4 <LL_RCC_MSI_SetFrequency>:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_MSI_SetFrequency(uint32_t Value)
{
34182ad4:	b480      	push	{r7}
34182ad6:	b083      	sub	sp, #12
34182ad8:	af00      	add	r7, sp, #0
34182ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34182adc:	4b06      	ldr	r3, [pc, #24]	@ (34182af8 <LL_RCC_MSI_SetFrequency+0x24>)
34182ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34182ae0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34182ae4:	4904      	ldr	r1, [pc, #16]	@ (34182af8 <LL_RCC_MSI_SetFrequency+0x24>)
34182ae6:	687b      	ldr	r3, [r7, #4]
34182ae8:	4313      	orrs	r3, r2
34182aea:	644b      	str	r3, [r1, #68]	@ 0x44
}
34182aec:	bf00      	nop
34182aee:	370c      	adds	r7, #12
34182af0:	46bd      	mov	sp, r7
34182af2:	f85d 7b04 	ldr.w	r7, [sp], #4
34182af6:	4770      	bx	lr
34182af8:	56028000 	.word	0x56028000

34182afc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll MSICFGR      MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value can be a value between 0 and 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
34182afc:	b480      	push	{r7}
34182afe:	b083      	sub	sp, #12
34182b00:	af00      	add	r7, sp, #0
34182b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34182b04:	4b07      	ldr	r3, [pc, #28]	@ (34182b24 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34182b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34182b08:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
34182b0c:	687b      	ldr	r3, [r7, #4]
34182b0e:	041b      	lsls	r3, r3, #16
34182b10:	4904      	ldr	r1, [pc, #16]	@ (34182b24 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34182b12:	4313      	orrs	r3, r2
34182b14:	644b      	str	r3, [r1, #68]	@ 0x44
}
34182b16:	bf00      	nop
34182b18:	370c      	adds	r7, #12
34182b1a:	46bd      	mov	sp, r7
34182b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b20:	4770      	bx	lr
34182b22:	bf00      	nop
34182b24:	56028000 	.word	0x56028000

34182b28 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll SR           LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
34182b28:	b480      	push	{r7}
34182b2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34182b2c:	4b06      	ldr	r3, [pc, #24]	@ (34182b48 <LL_RCC_LSE_IsReady+0x20>)
34182b2e:	685b      	ldr	r3, [r3, #4]
34182b30:	f003 0302 	and.w	r3, r3, #2
34182b34:	2b00      	cmp	r3, #0
34182b36:	d001      	beq.n	34182b3c <LL_RCC_LSE_IsReady+0x14>
34182b38:	2301      	movs	r3, #1
34182b3a:	e000      	b.n	34182b3e <LL_RCC_LSE_IsReady+0x16>
34182b3c:	2300      	movs	r3, #0
}
34182b3e:	4618      	mov	r0, r3
34182b40:	46bd      	mov	sp, r7
34182b42:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b46:	4770      	bx	lr
34182b48:	56028000 	.word	0x56028000

34182b4c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSIONS        LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
34182b4c:	b480      	push	{r7}
34182b4e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34182b50:	4b04      	ldr	r3, [pc, #16]	@ (34182b64 <LL_RCC_LSI_Enable+0x18>)
34182b52:	2201      	movs	r2, #1
34182b54:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34182b58:	bf00      	nop
34182b5a:	46bd      	mov	sp, r7
34182b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b60:	4770      	bx	lr
34182b62:	bf00      	nop
34182b64:	56028000 	.word	0x56028000

34182b68 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CCR          LSIONC        LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
34182b68:	b480      	push	{r7}
34182b6a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34182b6c:	4b05      	ldr	r3, [pc, #20]	@ (34182b84 <LL_RCC_LSI_Disable+0x1c>)
34182b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182b72:	461a      	mov	r2, r3
34182b74:	2301      	movs	r3, #1
34182b76:	6013      	str	r3, [r2, #0]
}
34182b78:	bf00      	nop
34182b7a:	46bd      	mov	sp, r7
34182b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b80:	4770      	bx	lr
34182b82:	bf00      	nop
34182b84:	56028000 	.word	0x56028000

34182b88 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll SR           LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
34182b88:	b480      	push	{r7}
34182b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34182b8c:	4b04      	ldr	r3, [pc, #16]	@ (34182ba0 <LL_RCC_LSI_IsReady+0x18>)
34182b8e:	685b      	ldr	r3, [r3, #4]
34182b90:	f003 0301 	and.w	r3, r3, #1
}
34182b94:	4618      	mov	r0, r3
34182b96:	46bd      	mov	sp, r7
34182b98:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b9c:	4770      	bx	lr
34182b9e:	bf00      	nop
34182ba0:	56028000 	.word	0x56028000

34182ba4 <LL_RCC_GetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_IC1
  */
__STATIC_INLINE uint32_t LL_RCC_GetCpuClkSource(void)
{
34182ba4:	b480      	push	{r7}
34182ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34182ba8:	4b04      	ldr	r3, [pc, #16]	@ (34182bbc <LL_RCC_GetCpuClkSource+0x18>)
34182baa:	6a1b      	ldr	r3, [r3, #32]
34182bac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34182bb0:	4618      	mov	r0, r3
34182bb2:	46bd      	mov	sp, r7
34182bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
34182bb8:	4770      	bx	lr
34182bba:	bf00      	nop
34182bbc:	56028000 	.word	0x56028000

34182bc0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
34182bc0:	b480      	push	{r7}
34182bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34182bc4:	4b04      	ldr	r3, [pc, #16]	@ (34182bd8 <LL_RCC_GetSysClkSource+0x18>)
34182bc6:	6a1b      	ldr	r3, [r3, #32]
34182bc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34182bcc:	4618      	mov	r0, r3
34182bce:	46bd      	mov	sp, r7
34182bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34182bd4:	4770      	bx	lr
34182bd6:	bf00      	nop
34182bd8:	56028000 	.word	0x56028000

34182bdc <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
34182bdc:	b480      	push	{r7}
34182bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34182be0:	4b04      	ldr	r3, [pc, #16]	@ (34182bf4 <LL_RCC_PLL1_GetSource+0x18>)
34182be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34182be6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34182bea:	4618      	mov	r0, r3
34182bec:	46bd      	mov	sp, r7
34182bee:	f85d 7b04 	ldr.w	r7, [sp], #4
34182bf2:	4770      	bx	lr
34182bf4:	56028000 	.word	0x56028000

34182bf8 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
34182bf8:	b480      	push	{r7}
34182bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34182bfc:	4b07      	ldr	r3, [pc, #28]	@ (34182c1c <LL_RCC_PLL1_IsReady+0x24>)
34182bfe:	685b      	ldr	r3, [r3, #4]
34182c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34182c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34182c08:	d101      	bne.n	34182c0e <LL_RCC_PLL1_IsReady+0x16>
34182c0a:	2301      	movs	r3, #1
34182c0c:	e000      	b.n	34182c10 <LL_RCC_PLL1_IsReady+0x18>
34182c0e:	2300      	movs	r3, #0
}
34182c10:	4618      	mov	r0, r3
34182c12:	46bd      	mov	sp, r7
34182c14:	f85d 7b04 	ldr.w	r7, [sp], #4
34182c18:	4770      	bx	lr
34182c1a:	bf00      	nop
34182c1c:	56028000 	.word	0x56028000

34182c20 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
34182c20:	b480      	push	{r7}
34182c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34182c24:	4b07      	ldr	r3, [pc, #28]	@ (34182c44 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34182c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34182c2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182c2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34182c32:	d101      	bne.n	34182c38 <LL_RCC_PLL1_IsEnabledBypass+0x18>
34182c34:	2301      	movs	r3, #1
34182c36:	e000      	b.n	34182c3a <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34182c38:	2300      	movs	r3, #0
}
34182c3a:	4618      	mov	r0, r3
34182c3c:	46bd      	mov	sp, r7
34182c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182c42:	4770      	bx	lr
34182c44:	56028000 	.word	0x56028000

34182c48 <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
34182c48:	b480      	push	{r7}
34182c4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34182c4c:	4b04      	ldr	r3, [pc, #16]	@ (34182c60 <LL_RCC_PLL2_GetSource+0x18>)
34182c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34182c52:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34182c56:	4618      	mov	r0, r3
34182c58:	46bd      	mov	sp, r7
34182c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34182c5e:	4770      	bx	lr
34182c60:	56028000 	.word	0x56028000

34182c64 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
34182c64:	b480      	push	{r7}
34182c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34182c68:	4b07      	ldr	r3, [pc, #28]	@ (34182c88 <LL_RCC_PLL2_IsReady+0x24>)
34182c6a:	685b      	ldr	r3, [r3, #4]
34182c6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34182c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34182c74:	d101      	bne.n	34182c7a <LL_RCC_PLL2_IsReady+0x16>
34182c76:	2301      	movs	r3, #1
34182c78:	e000      	b.n	34182c7c <LL_RCC_PLL2_IsReady+0x18>
34182c7a:	2300      	movs	r3, #0
}
34182c7c:	4618      	mov	r0, r3
34182c7e:	46bd      	mov	sp, r7
34182c80:	f85d 7b04 	ldr.w	r7, [sp], #4
34182c84:	4770      	bx	lr
34182c86:	bf00      	nop
34182c88:	56028000 	.word	0x56028000

34182c8c <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
34182c8c:	b480      	push	{r7}
34182c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34182c90:	4b07      	ldr	r3, [pc, #28]	@ (34182cb0 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34182c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34182c96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182c9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34182c9e:	d101      	bne.n	34182ca4 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34182ca0:	2301      	movs	r3, #1
34182ca2:	e000      	b.n	34182ca6 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34182ca4:	2300      	movs	r3, #0
}
34182ca6:	4618      	mov	r0, r3
34182ca8:	46bd      	mov	sp, r7
34182caa:	f85d 7b04 	ldr.w	r7, [sp], #4
34182cae:	4770      	bx	lr
34182cb0:	56028000 	.word	0x56028000

34182cb4 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
34182cb4:	b480      	push	{r7}
34182cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34182cb8:	4b04      	ldr	r3, [pc, #16]	@ (34182ccc <LL_RCC_PLL3_GetSource+0x18>)
34182cba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34182cbe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34182cc2:	4618      	mov	r0, r3
34182cc4:	46bd      	mov	sp, r7
34182cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
34182cca:	4770      	bx	lr
34182ccc:	56028000 	.word	0x56028000

34182cd0 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
34182cd0:	b480      	push	{r7}
34182cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34182cd4:	4b07      	ldr	r3, [pc, #28]	@ (34182cf4 <LL_RCC_PLL3_IsReady+0x24>)
34182cd6:	685b      	ldr	r3, [r3, #4]
34182cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34182cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34182ce0:	d101      	bne.n	34182ce6 <LL_RCC_PLL3_IsReady+0x16>
34182ce2:	2301      	movs	r3, #1
34182ce4:	e000      	b.n	34182ce8 <LL_RCC_PLL3_IsReady+0x18>
34182ce6:	2300      	movs	r3, #0
}
34182ce8:	4618      	mov	r0, r3
34182cea:	46bd      	mov	sp, r7
34182cec:	f85d 7b04 	ldr.w	r7, [sp], #4
34182cf0:	4770      	bx	lr
34182cf2:	bf00      	nop
34182cf4:	56028000 	.word	0x56028000

34182cf8 <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
34182cf8:	b480      	push	{r7}
34182cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34182cfc:	4b07      	ldr	r3, [pc, #28]	@ (34182d1c <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34182cfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34182d02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182d06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34182d0a:	d101      	bne.n	34182d10 <LL_RCC_PLL3_IsEnabledBypass+0x18>
34182d0c:	2301      	movs	r3, #1
34182d0e:	e000      	b.n	34182d12 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34182d10:	2300      	movs	r3, #0
}
34182d12:	4618      	mov	r0, r3
34182d14:	46bd      	mov	sp, r7
34182d16:	f85d 7b04 	ldr.w	r7, [sp], #4
34182d1a:	4770      	bx	lr
34182d1c:	56028000 	.word	0x56028000

34182d20 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
34182d20:	b480      	push	{r7}
34182d22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34182d24:	4b04      	ldr	r3, [pc, #16]	@ (34182d38 <LL_RCC_PLL4_GetSource+0x18>)
34182d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34182d2a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34182d2e:	4618      	mov	r0, r3
34182d30:	46bd      	mov	sp, r7
34182d32:	f85d 7b04 	ldr.w	r7, [sp], #4
34182d36:	4770      	bx	lr
34182d38:	56028000 	.word	0x56028000

34182d3c <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
34182d3c:	b480      	push	{r7}
34182d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34182d40:	4b07      	ldr	r3, [pc, #28]	@ (34182d60 <LL_RCC_PLL4_IsReady+0x24>)
34182d42:	685b      	ldr	r3, [r3, #4]
34182d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34182d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34182d4c:	d101      	bne.n	34182d52 <LL_RCC_PLL4_IsReady+0x16>
34182d4e:	2301      	movs	r3, #1
34182d50:	e000      	b.n	34182d54 <LL_RCC_PLL4_IsReady+0x18>
34182d52:	2300      	movs	r3, #0
}
34182d54:	4618      	mov	r0, r3
34182d56:	46bd      	mov	sp, r7
34182d58:	f85d 7b04 	ldr.w	r7, [sp], #4
34182d5c:	4770      	bx	lr
34182d5e:	bf00      	nop
34182d60:	56028000 	.word	0x56028000

34182d64 <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
34182d64:	b480      	push	{r7}
34182d66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34182d68:	4b07      	ldr	r3, [pc, #28]	@ (34182d88 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
34182d6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34182d6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182d72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34182d76:	d101      	bne.n	34182d7c <LL_RCC_PLL4_IsEnabledBypass+0x18>
34182d78:	2301      	movs	r3, #1
34182d7a:	e000      	b.n	34182d7e <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34182d7c:	2300      	movs	r3, #0
}
34182d7e:	4618      	mov	r0, r3
34182d80:	46bd      	mov	sp, r7
34182d82:	f85d 7b04 	ldr.w	r7, [sp], #4
34182d86:	4770      	bx	lr
34182d88:	56028000 	.word	0x56028000

34182d8c <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
34182d8c:	b480      	push	{r7}
34182d8e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34182d90:	4b04      	ldr	r3, [pc, #16]	@ (34182da4 <LL_RCC_IC1_Enable+0x18>)
34182d92:	2201      	movs	r2, #1
34182d94:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34182d98:	bf00      	nop
34182d9a:	46bd      	mov	sp, r7
34182d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182da0:	4770      	bx	lr
34182da2:	bf00      	nop
34182da4:	56028000 	.word	0x56028000

34182da8 <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
34182da8:	b480      	push	{r7}
34182daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34182dac:	4b04      	ldr	r3, [pc, #16]	@ (34182dc0 <LL_RCC_IC1_GetSource+0x18>)
34182dae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34182db2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34182db6:	4618      	mov	r0, r3
34182db8:	46bd      	mov	sp, r7
34182dba:	f85d 7b04 	ldr.w	r7, [sp], #4
34182dbe:	4770      	bx	lr
34182dc0:	56028000 	.word	0x56028000

34182dc4 <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
34182dc4:	b480      	push	{r7}
34182dc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34182dc8:	4b05      	ldr	r3, [pc, #20]	@ (34182de0 <LL_RCC_IC1_GetDivider+0x1c>)
34182dca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34182dce:	0c1b      	lsrs	r3, r3, #16
34182dd0:	b2db      	uxtb	r3, r3
34182dd2:	3301      	adds	r3, #1
}
34182dd4:	4618      	mov	r0, r3
34182dd6:	46bd      	mov	sp, r7
34182dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
34182ddc:	4770      	bx	lr
34182dde:	bf00      	nop
34182de0:	56028000 	.word	0x56028000

34182de4 <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
34182de4:	b480      	push	{r7}
34182de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34182de8:	4b04      	ldr	r3, [pc, #16]	@ (34182dfc <LL_RCC_IC2_GetSource+0x18>)
34182dea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34182dee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34182df2:	4618      	mov	r0, r3
34182df4:	46bd      	mov	sp, r7
34182df6:	f85d 7b04 	ldr.w	r7, [sp], #4
34182dfa:	4770      	bx	lr
34182dfc:	56028000 	.word	0x56028000

34182e00 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
34182e00:	b480      	push	{r7}
34182e02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34182e04:	4b05      	ldr	r3, [pc, #20]	@ (34182e1c <LL_RCC_IC2_GetDivider+0x1c>)
34182e06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34182e0a:	0c1b      	lsrs	r3, r3, #16
34182e0c:	b2db      	uxtb	r3, r3
34182e0e:	3301      	adds	r3, #1
}
34182e10:	4618      	mov	r0, r3
34182e12:	46bd      	mov	sp, r7
34182e14:	f85d 7b04 	ldr.w	r7, [sp], #4
34182e18:	4770      	bx	lr
34182e1a:	bf00      	nop
34182e1c:	56028000 	.word	0x56028000

34182e20 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
34182e20:	b480      	push	{r7}
34182e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34182e24:	4b04      	ldr	r3, [pc, #16]	@ (34182e38 <LL_RCC_IC6_GetSource+0x18>)
34182e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34182e2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34182e2e:	4618      	mov	r0, r3
34182e30:	46bd      	mov	sp, r7
34182e32:	f85d 7b04 	ldr.w	r7, [sp], #4
34182e36:	4770      	bx	lr
34182e38:	56028000 	.word	0x56028000

34182e3c <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
34182e3c:	b480      	push	{r7}
34182e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34182e40:	4b04      	ldr	r3, [pc, #16]	@ (34182e54 <LL_RCC_IC11_GetSource+0x18>)
34182e42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34182e46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34182e4a:	4618      	mov	r0, r3
34182e4c:	46bd      	mov	sp, r7
34182e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182e52:	4770      	bx	lr
34182e54:	56028000 	.word	0x56028000

34182e58 <HAL_RCC_OscConfig>:
  * @note   This function activates HSE but does not wait for the startup time defined in the datasheet.
  *         This must be ensured by the application when the HSE is selected as PLL source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
34182e58:	b580      	push	{r7, lr}
34182e5a:	b0a2      	sub	sp, #136	@ 0x88
34182e5c:	af00      	add	r7, sp, #0
34182e5e:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
34182e60:	687b      	ldr	r3, [r7, #4]
34182e62:	2b00      	cmp	r3, #0
34182e64:	d101      	bne.n	34182e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
34182e66:	2301      	movs	r3, #1
34182e68:	e3d1      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  cpuclksrc = LL_RCC_GetCpuClkSource();
34182e6a:	f7ff fe9b 	bl	34182ba4 <LL_RCC_GetCpuClkSource>
34182e6e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
34182e72:	f7ff fea5 	bl	34182bc0 <LL_RCC_GetSysClkSource>
34182e76:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
34182e7a:	f7ff feaf 	bl	34182bdc <LL_RCC_PLL1_GetSource>
34182e7e:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
34182e80:	f7ff fee2 	bl	34182c48 <LL_RCC_PLL2_GetSource>
34182e84:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
34182e86:	f7ff ff15 	bl	34182cb4 <LL_RCC_PLL3_GetSource>
34182e8a:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
34182e8c:	f7ff ff48 	bl	34182d20 <LL_RCC_PLL4_GetSource>
34182e90:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
34182e92:	4b91      	ldr	r3, [pc, #580]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182e94:	685b      	ldr	r3, [r3, #4]
34182e96:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34182e98:	687b      	ldr	r3, [r7, #4]
34182e9a:	681b      	ldr	r3, [r3, #0]
34182e9c:	f003 0301 	and.w	r3, r3, #1
34182ea0:	2b00      	cmp	r3, #0
34182ea2:	f000 80a8 	beq.w	34182ff6 <HAL_RCC_OscConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34182ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34182eaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34182eae:	d028      	beq.n	34182f02 <HAL_RCC_OscConfig+0xaa>
34182eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182eb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182eb8:	d023      	beq.n	34182f02 <HAL_RCC_OscConfig+0xaa>
34182eba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34182ebc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182ec0:	d104      	bne.n	34182ecc <HAL_RCC_OscConfig+0x74>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34182ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34182ec8:	2b00      	cmp	r3, #0
34182eca:	d11a      	bne.n	34182f02 <HAL_RCC_OscConfig+0xaa>
34182ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34182ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182ed2:	d104      	bne.n	34182ede <HAL_RCC_OscConfig+0x86>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34182ed4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34182eda:	2b00      	cmp	r3, #0
34182edc:	d111      	bne.n	34182f02 <HAL_RCC_OscConfig+0xaa>
34182ede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34182ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182ee4:	d104      	bne.n	34182ef0 <HAL_RCC_OscConfig+0x98>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34182ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34182eec:	2b00      	cmp	r3, #0
34182eee:	d108      	bne.n	34182f02 <HAL_RCC_OscConfig+0xaa>
34182ef0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34182ef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182ef6:	d10a      	bne.n	34182f0e <HAL_RCC_OscConfig+0xb6>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34182ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34182efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34182efe:	2b00      	cmp	r3, #0
34182f00:	d005      	beq.n	34182f0e <HAL_RCC_OscConfig+0xb6>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
34182f02:	687b      	ldr	r3, [r7, #4]
34182f04:	685b      	ldr	r3, [r3, #4]
34182f06:	2b00      	cmp	r3, #0
34182f08:	d175      	bne.n	34182ff6 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
34182f0a:	2301      	movs	r3, #1
34182f0c:	e37f      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34182f0e:	687b      	ldr	r3, [r7, #4]
34182f10:	685b      	ldr	r3, [r3, #4]
34182f12:	2b10      	cmp	r3, #16
34182f14:	d104      	bne.n	34182f20 <HAL_RCC_OscConfig+0xc8>
34182f16:	4b70      	ldr	r3, [pc, #448]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f18:	2210      	movs	r2, #16
34182f1a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34182f1e:	e043      	b.n	34182fa8 <HAL_RCC_OscConfig+0x150>
34182f20:	687b      	ldr	r3, [r7, #4]
34182f22:	685b      	ldr	r3, [r3, #4]
34182f24:	2b00      	cmp	r3, #0
34182f26:	d10c      	bne.n	34182f42 <HAL_RCC_OscConfig+0xea>
34182f28:	4b6b      	ldr	r3, [pc, #428]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182f2e:	461a      	mov	r2, r3
34182f30:	2310      	movs	r3, #16
34182f32:	6013      	str	r3, [r2, #0]
34182f34:	4b68      	ldr	r3, [pc, #416]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34182f38:	4a67      	ldr	r2, [pc, #412]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f3a:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34182f3e:	6553      	str	r3, [r2, #84]	@ 0x54
34182f40:	e032      	b.n	34182fa8 <HAL_RCC_OscConfig+0x150>
34182f42:	687b      	ldr	r3, [r7, #4]
34182f44:	685b      	ldr	r3, [r3, #4]
34182f46:	f248 0210 	movw	r2, #32784	@ 0x8010
34182f4a:	4293      	cmp	r3, r2
34182f4c:	d110      	bne.n	34182f70 <HAL_RCC_OscConfig+0x118>
34182f4e:	4b62      	ldr	r3, [pc, #392]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34182f52:	4a61      	ldr	r2, [pc, #388]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34182f58:	6553      	str	r3, [r2, #84]	@ 0x54
34182f5a:	4b5f      	ldr	r3, [pc, #380]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34182f5e:	4a5e      	ldr	r2, [pc, #376]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182f64:	6553      	str	r3, [r2, #84]	@ 0x54
34182f66:	4b5c      	ldr	r3, [pc, #368]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f68:	2210      	movs	r2, #16
34182f6a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34182f6e:	e01b      	b.n	34182fa8 <HAL_RCC_OscConfig+0x150>
34182f70:	687b      	ldr	r3, [r7, #4]
34182f72:	685b      	ldr	r3, [r3, #4]
34182f74:	4a59      	ldr	r2, [pc, #356]	@ (341830dc <HAL_RCC_OscConfig+0x284>)
34182f76:	4293      	cmp	r3, r2
34182f78:	d10a      	bne.n	34182f90 <HAL_RCC_OscConfig+0x138>
34182f7a:	4b57      	ldr	r3, [pc, #348]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34182f7e:	4a56      	ldr	r2, [pc, #344]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f80:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
34182f84:	6553      	str	r3, [r2, #84]	@ 0x54
34182f86:	4b54      	ldr	r3, [pc, #336]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f88:	2210      	movs	r2, #16
34182f8a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34182f8e:	e00b      	b.n	34182fa8 <HAL_RCC_OscConfig+0x150>
34182f90:	4b51      	ldr	r3, [pc, #324]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182f96:	461a      	mov	r2, r3
34182f98:	2310      	movs	r3, #16
34182f9a:	6013      	str	r3, [r2, #0]
34182f9c:	4b4e      	ldr	r3, [pc, #312]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34182fa0:	4a4d      	ldr	r2, [pc, #308]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182fa2:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34182fa6:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34182fa8:	f7fe ff24 	bl	34181df4 <HAL_GetTick>
34182fac:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34182fae:	687b      	ldr	r3, [r7, #4]
34182fb0:	685b      	ldr	r3, [r3, #4]
34182fb2:	2b00      	cmp	r3, #0
34182fb4:	d019      	beq.n	34182fea <HAL_RCC_OscConfig+0x192>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34182fb6:	e008      	b.n	34182fca <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34182fb8:	f7fe ff1c 	bl	34181df4 <HAL_GetTick>
34182fbc:	4602      	mov	r2, r0
34182fbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34182fc0:	1ad3      	subs	r3, r2, r3
34182fc2:	2b64      	cmp	r3, #100	@ 0x64
34182fc4:	d901      	bls.n	34182fca <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
34182fc6:	2303      	movs	r3, #3
34182fc8:	e321      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34182fca:	4b43      	ldr	r3, [pc, #268]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182fcc:	685b      	ldr	r3, [r3, #4]
34182fce:	f003 0310 	and.w	r3, r3, #16
34182fd2:	2b00      	cmp	r3, #0
34182fd4:	d0f0      	beq.n	34182fb8 <HAL_RCC_OscConfig+0x160>
34182fd6:	e00e      	b.n	34182ff6 <HAL_RCC_OscConfig+0x19e>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34182fd8:	f7fe ff0c 	bl	34181df4 <HAL_GetTick>
34182fdc:	4602      	mov	r2, r0
34182fde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34182fe0:	1ad3      	subs	r3, r2, r3
34182fe2:	2b64      	cmp	r3, #100	@ 0x64
34182fe4:	d901      	bls.n	34182fea <HAL_RCC_OscConfig+0x192>
          {
            return HAL_TIMEOUT;
34182fe6:	2303      	movs	r3, #3
34182fe8:	e311      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
34182fea:	4b3b      	ldr	r3, [pc, #236]	@ (341830d8 <HAL_RCC_OscConfig+0x280>)
34182fec:	685b      	ldr	r3, [r3, #4]
34182fee:	f003 0310 	and.w	r3, r3, #16
34182ff2:	2b00      	cmp	r3, #0
34182ff4:	d1f0      	bne.n	34182fd8 <HAL_RCC_OscConfig+0x180>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
34182ff6:	687b      	ldr	r3, [r7, #4]
34182ff8:	681b      	ldr	r3, [r3, #0]
34182ffa:	f003 0302 	and.w	r3, r3, #2
34182ffe:	2b00      	cmp	r3, #0
34183000:	d073      	beq.n	341830ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34183002:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34183006:	2b00      	cmp	r3, #0
34183008:	d023      	beq.n	34183052 <HAL_RCC_OscConfig+0x1fa>
3418300a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418300e:	2b00      	cmp	r3, #0
34183010:	d01f      	beq.n	34183052 <HAL_RCC_OscConfig+0x1fa>
34183012:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34183014:	2b00      	cmp	r3, #0
34183016:	d104      	bne.n	34183022 <HAL_RCC_OscConfig+0x1ca>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34183018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418301a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418301e:	2b00      	cmp	r3, #0
34183020:	d117      	bne.n	34183052 <HAL_RCC_OscConfig+0x1fa>
34183022:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34183024:	2b00      	cmp	r3, #0
34183026:	d104      	bne.n	34183032 <HAL_RCC_OscConfig+0x1da>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34183028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418302a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418302e:	2b00      	cmp	r3, #0
34183030:	d10f      	bne.n	34183052 <HAL_RCC_OscConfig+0x1fa>
34183032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34183034:	2b00      	cmp	r3, #0
34183036:	d104      	bne.n	34183042 <HAL_RCC_OscConfig+0x1ea>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34183038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418303a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418303e:	2b00      	cmp	r3, #0
34183040:	d107      	bne.n	34183052 <HAL_RCC_OscConfig+0x1fa>
34183042:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34183044:	2b00      	cmp	r3, #0
34183046:	d115      	bne.n	34183074 <HAL_RCC_OscConfig+0x21c>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34183048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418304a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418304e:	2b00      	cmp	r3, #0
34183050:	d010      	beq.n	34183074 <HAL_RCC_OscConfig+0x21c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34183052:	687b      	ldr	r3, [r7, #4]
34183054:	68db      	ldr	r3, [r3, #12]
34183056:	2b00      	cmp	r3, #0
34183058:	d101      	bne.n	3418305e <HAL_RCC_OscConfig+0x206>
      {
        return HAL_ERROR;
3418305a:	2301      	movs	r3, #1
3418305c:	e2d7      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
3418305e:	687b      	ldr	r3, [r7, #4]
34183060:	691b      	ldr	r3, [r3, #16]
34183062:	4618      	mov	r0, r3
34183064:	f7ff fcce 	bl	34182a04 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34183068:	687b      	ldr	r3, [r7, #4]
3418306a:	695b      	ldr	r3, [r3, #20]
3418306c:	4618      	mov	r0, r3
3418306e:	f7ff fceb 	bl	34182a48 <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34183072:	e03a      	b.n	341830ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34183074:	687b      	ldr	r3, [r7, #4]
34183076:	68db      	ldr	r3, [r3, #12]
34183078:	2b00      	cmp	r3, #0
3418307a:	d01e      	beq.n	341830ba <HAL_RCC_OscConfig+0x262>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
3418307c:	f7ff fc92 	bl	341829a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34183080:	f7fe feb8 	bl	34181df4 <HAL_GetTick>
34183084:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
34183086:	e008      	b.n	3418309a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34183088:	f7fe feb4 	bl	34181df4 <HAL_GetTick>
3418308c:	4602      	mov	r2, r0
3418308e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34183090:	1ad3      	subs	r3, r2, r3
34183092:	2b01      	cmp	r3, #1
34183094:	d901      	bls.n	3418309a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
34183096:	2303      	movs	r3, #3
34183098:	e2b9      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_HSI_IsReady() == 0U)
3418309a:	f7ff fca1 	bl	341829e0 <LL_RCC_HSI_IsReady>
3418309e:	4603      	mov	r3, r0
341830a0:	2b00      	cmp	r3, #0
341830a2:	d0f1      	beq.n	34183088 <HAL_RCC_OscConfig+0x230>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
341830a4:	687b      	ldr	r3, [r7, #4]
341830a6:	691b      	ldr	r3, [r3, #16]
341830a8:	4618      	mov	r0, r3
341830aa:	f7ff fcab 	bl	34182a04 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
341830ae:	687b      	ldr	r3, [r7, #4]
341830b0:	695b      	ldr	r3, [r3, #20]
341830b2:	4618      	mov	r0, r3
341830b4:	f7ff fcc8 	bl	34182a48 <LL_RCC_HSI_SetCalibTrimming>
341830b8:	e017      	b.n	341830ea <HAL_RCC_OscConfig+0x292>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
341830ba:	f7ff fc81 	bl	341829c0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
341830be:	f7fe fe99 	bl	34181df4 <HAL_GetTick>
341830c2:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
341830c4:	e00c      	b.n	341830e0 <HAL_RCC_OscConfig+0x288>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
341830c6:	f7fe fe95 	bl	34181df4 <HAL_GetTick>
341830ca:	4602      	mov	r2, r0
341830cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341830ce:	1ad3      	subs	r3, r2, r3
341830d0:	2b01      	cmp	r3, #1
341830d2:	d905      	bls.n	341830e0 <HAL_RCC_OscConfig+0x288>
          {
            return HAL_TIMEOUT;
341830d4:	2303      	movs	r3, #3
341830d6:	e29a      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
341830d8:	56028000 	.word	0x56028000
341830dc:	00018010 	.word	0x00018010
        while (LL_RCC_HSI_IsReady() != 0U)
341830e0:	f7ff fc7e 	bl	341829e0 <LL_RCC_HSI_IsReady>
341830e4:	4603      	mov	r3, r0
341830e6:	2b00      	cmp	r3, #0
341830e8:	d1ed      	bne.n	341830c6 <HAL_RCC_OscConfig+0x26e>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
341830ea:	687b      	ldr	r3, [r7, #4]
341830ec:	681b      	ldr	r3, [r3, #0]
341830ee:	f003 0310 	and.w	r3, r3, #16
341830f2:	2b00      	cmp	r3, #0
341830f4:	d070      	beq.n	341831d8 <HAL_RCC_OscConfig+0x380>
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
341830f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
341830fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341830fe:	d028      	beq.n	34183152 <HAL_RCC_OscConfig+0x2fa>
34183100:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34183104:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183108:	d023      	beq.n	34183152 <HAL_RCC_OscConfig+0x2fa>
3418310a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3418310c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183110:	d104      	bne.n	3418311c <HAL_RCC_OscConfig+0x2c4>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34183112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34183118:	2b00      	cmp	r3, #0
3418311a:	d11a      	bne.n	34183152 <HAL_RCC_OscConfig+0x2fa>
3418311c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3418311e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183122:	d104      	bne.n	3418312e <HAL_RCC_OscConfig+0x2d6>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34183124:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418312a:	2b00      	cmp	r3, #0
3418312c:	d111      	bne.n	34183152 <HAL_RCC_OscConfig+0x2fa>
3418312e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34183130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183134:	d104      	bne.n	34183140 <HAL_RCC_OscConfig+0x2e8>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34183136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3418313c:	2b00      	cmp	r3, #0
3418313e:	d108      	bne.n	34183152 <HAL_RCC_OscConfig+0x2fa>
34183140:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34183142:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183146:	d110      	bne.n	3418316a <HAL_RCC_OscConfig+0x312>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34183148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418314a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418314e:	2b00      	cmp	r3, #0
34183150:	d00b      	beq.n	3418316a <HAL_RCC_OscConfig+0x312>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34183152:	687b      	ldr	r3, [r7, #4]
34183154:	69db      	ldr	r3, [r3, #28]
34183156:	2b00      	cmp	r3, #0
34183158:	d101      	bne.n	3418315e <HAL_RCC_OscConfig+0x306>
      {
        return HAL_ERROR;
3418315a:	2301      	movs	r3, #1
3418315c:	e257      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
3418315e:	687b      	ldr	r3, [r7, #4]
34183160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183162:	4618      	mov	r0, r3
34183164:	f7ff fcca 	bl	34182afc <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34183168:	e036      	b.n	341831d8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
3418316a:	687b      	ldr	r3, [r7, #4]
3418316c:	69db      	ldr	r3, [r3, #28]
3418316e:	2b00      	cmp	r3, #0
34183170:	d01e      	beq.n	341831b0 <HAL_RCC_OscConfig+0x358>
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
34183172:	687b      	ldr	r3, [r7, #4]
34183174:	6a1b      	ldr	r3, [r3, #32]
34183176:	4618      	mov	r0, r3
34183178:	f7ff fcac 	bl	34182ad4 <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
3418317c:	f7ff fc7a 	bl	34182a74 <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34183180:	f7fe fe38 	bl	34181df4 <HAL_GetTick>
34183184:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
34183186:	e008      	b.n	3418319a <HAL_RCC_OscConfig+0x342>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34183188:	f7fe fe34 	bl	34181df4 <HAL_GetTick>
3418318c:	4602      	mov	r2, r0
3418318e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34183190:	1ad3      	subs	r3, r2, r3
34183192:	2b01      	cmp	r3, #1
34183194:	d901      	bls.n	3418319a <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
34183196:	2303      	movs	r3, #3
34183198:	e239      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() == 0U)
3418319a:	f7ff fc89 	bl	34182ab0 <LL_RCC_MSI_IsReady>
3418319e:	4603      	mov	r3, r0
341831a0:	2b00      	cmp	r3, #0
341831a2:	d0f1      	beq.n	34183188 <HAL_RCC_OscConfig+0x330>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
341831a4:	687b      	ldr	r3, [r7, #4]
341831a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341831a8:	4618      	mov	r0, r3
341831aa:	f7ff fca7 	bl	34182afc <LL_RCC_MSI_SetCalibTrimming>
341831ae:	e013      	b.n	341831d8 <HAL_RCC_OscConfig+0x380>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
341831b0:	f7ff fc6e 	bl	34182a90 <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
341831b4:	f7fe fe1e 	bl	34181df4 <HAL_GetTick>
341831b8:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
341831ba:	e008      	b.n	341831ce <HAL_RCC_OscConfig+0x376>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
341831bc:	f7fe fe1a 	bl	34181df4 <HAL_GetTick>
341831c0:	4602      	mov	r2, r0
341831c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341831c4:	1ad3      	subs	r3, r2, r3
341831c6:	2b01      	cmp	r3, #1
341831c8:	d901      	bls.n	341831ce <HAL_RCC_OscConfig+0x376>
          {
            return HAL_TIMEOUT;
341831ca:	2303      	movs	r3, #3
341831cc:	e21f      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() != 0U)
341831ce:	f7ff fc6f 	bl	34182ab0 <LL_RCC_MSI_IsReady>
341831d2:	4603      	mov	r3, r0
341831d4:	2b00      	cmp	r3, #0
341831d6:	d1f1      	bne.n	341831bc <HAL_RCC_OscConfig+0x364>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
341831d8:	687b      	ldr	r3, [r7, #4]
341831da:	681b      	ldr	r3, [r3, #0]
341831dc:	f003 0308 	and.w	r3, r3, #8
341831e0:	2b00      	cmp	r3, #0
341831e2:	d02c      	beq.n	3418323e <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
341831e4:	687b      	ldr	r3, [r7, #4]
341831e6:	699b      	ldr	r3, [r3, #24]
341831e8:	2b00      	cmp	r3, #0
341831ea:	d014      	beq.n	34183216 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
341831ec:	f7ff fcae 	bl	34182b4c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341831f0:	f7fe fe00 	bl	34181df4 <HAL_GetTick>
341831f4:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
341831f6:	e008      	b.n	3418320a <HAL_RCC_OscConfig+0x3b2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
341831f8:	f7fe fdfc 	bl	34181df4 <HAL_GetTick>
341831fc:	4602      	mov	r2, r0
341831fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34183200:	1ad3      	subs	r3, r2, r3
34183202:	2b01      	cmp	r3, #1
34183204:	d901      	bls.n	3418320a <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
34183206:	2303      	movs	r3, #3
34183208:	e201      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() == 0U)
3418320a:	f7ff fcbd 	bl	34182b88 <LL_RCC_LSI_IsReady>
3418320e:	4603      	mov	r3, r0
34183210:	2b00      	cmp	r3, #0
34183212:	d0f1      	beq.n	341831f8 <HAL_RCC_OscConfig+0x3a0>
34183214:	e013      	b.n	3418323e <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
34183216:	f7ff fca7 	bl	34182b68 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418321a:	f7fe fdeb 	bl	34181df4 <HAL_GetTick>
3418321e:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
34183220:	e008      	b.n	34183234 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34183222:	f7fe fde7 	bl	34181df4 <HAL_GetTick>
34183226:	4602      	mov	r2, r0
34183228:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418322a:	1ad3      	subs	r3, r2, r3
3418322c:	2b01      	cmp	r3, #1
3418322e:	d901      	bls.n	34183234 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
34183230:	2303      	movs	r3, #3
34183232:	e1ec      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() != 0U)
34183234:	f7ff fca8 	bl	34182b88 <LL_RCC_LSI_IsReady>
34183238:	4603      	mov	r3, r0
3418323a:	2b00      	cmp	r3, #0
3418323c:	d1f1      	bne.n	34183222 <HAL_RCC_OscConfig+0x3ca>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
3418323e:	687b      	ldr	r3, [r7, #4]
34183240:	681b      	ldr	r3, [r3, #0]
34183242:	f003 0304 	and.w	r3, r3, #4
34183246:	2b00      	cmp	r3, #0
34183248:	f000 808c 	beq.w	34183364 <HAL_RCC_OscConfig+0x50c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3418324c:	687b      	ldr	r3, [r7, #4]
3418324e:	689b      	ldr	r3, [r3, #8]
34183250:	2b02      	cmp	r3, #2
34183252:	d104      	bne.n	3418325e <HAL_RCC_OscConfig+0x406>
34183254:	4b96      	ldr	r3, [pc, #600]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
34183256:	2202      	movs	r2, #2
34183258:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418325c:	e055      	b.n	3418330a <HAL_RCC_OscConfig+0x4b2>
3418325e:	687b      	ldr	r3, [r7, #4]
34183260:	689b      	ldr	r3, [r3, #8]
34183262:	2b00      	cmp	r3, #0
34183264:	d112      	bne.n	3418328c <HAL_RCC_OscConfig+0x434>
34183266:	4b92      	ldr	r3, [pc, #584]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
34183268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418326c:	461a      	mov	r2, r3
3418326e:	2302      	movs	r3, #2
34183270:	6013      	str	r3, [r2, #0]
34183272:	4b8f      	ldr	r3, [pc, #572]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
34183274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34183276:	4a8e      	ldr	r2, [pc, #568]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
34183278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418327c:	6413      	str	r3, [r2, #64]	@ 0x40
3418327e:	4b8c      	ldr	r3, [pc, #560]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
34183280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34183282:	4a8b      	ldr	r2, [pc, #556]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
34183284:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34183288:	6413      	str	r3, [r2, #64]	@ 0x40
3418328a:	e03e      	b.n	3418330a <HAL_RCC_OscConfig+0x4b2>
3418328c:	687b      	ldr	r3, [r7, #4]
3418328e:	689b      	ldr	r3, [r3, #8]
34183290:	f248 0202 	movw	r2, #32770	@ 0x8002
34183294:	4293      	cmp	r3, r2
34183296:	d110      	bne.n	341832ba <HAL_RCC_OscConfig+0x462>
34183298:	4b85      	ldr	r3, [pc, #532]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
3418329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418329c:	4a84      	ldr	r2, [pc, #528]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
3418329e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341832a2:	6413      	str	r3, [r2, #64]	@ 0x40
341832a4:	4b82      	ldr	r3, [pc, #520]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
341832a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341832a8:	4a81      	ldr	r2, [pc, #516]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
341832aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341832ae:	6413      	str	r3, [r2, #64]	@ 0x40
341832b0:	4b7f      	ldr	r3, [pc, #508]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
341832b2:	2202      	movs	r2, #2
341832b4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341832b8:	e027      	b.n	3418330a <HAL_RCC_OscConfig+0x4b2>
341832ba:	687b      	ldr	r3, [r7, #4]
341832bc:	689b      	ldr	r3, [r3, #8]
341832be:	4a7d      	ldr	r2, [pc, #500]	@ (341834b4 <HAL_RCC_OscConfig+0x65c>)
341832c0:	4293      	cmp	r3, r2
341832c2:	d110      	bne.n	341832e6 <HAL_RCC_OscConfig+0x48e>
341832c4:	4b7a      	ldr	r3, [pc, #488]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
341832c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341832c8:	4a79      	ldr	r2, [pc, #484]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
341832ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341832ce:	6413      	str	r3, [r2, #64]	@ 0x40
341832d0:	4b77      	ldr	r3, [pc, #476]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
341832d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341832d4:	4a76      	ldr	r2, [pc, #472]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
341832d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
341832da:	6413      	str	r3, [r2, #64]	@ 0x40
341832dc:	4b74      	ldr	r3, [pc, #464]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
341832de:	2202      	movs	r2, #2
341832e0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341832e4:	e011      	b.n	3418330a <HAL_RCC_OscConfig+0x4b2>
341832e6:	4b72      	ldr	r3, [pc, #456]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
341832e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341832ec:	461a      	mov	r2, r3
341832ee:	2302      	movs	r3, #2
341832f0:	6013      	str	r3, [r2, #0]
341832f2:	4b6f      	ldr	r3, [pc, #444]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
341832f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341832f6:	4a6e      	ldr	r2, [pc, #440]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
341832f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
341832fc:	6413      	str	r3, [r2, #64]	@ 0x40
341832fe:	4b6c      	ldr	r3, [pc, #432]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
34183300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34183302:	4a6b      	ldr	r2, [pc, #428]	@ (341834b0 <HAL_RCC_OscConfig+0x658>)
34183304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183308:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
3418330a:	687b      	ldr	r3, [r7, #4]
3418330c:	689b      	ldr	r3, [r3, #8]
3418330e:	2b00      	cmp	r3, #0
34183310:	d014      	beq.n	3418333c <HAL_RCC_OscConfig+0x4e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34183312:	f7fe fd6f 	bl	34181df4 <HAL_GetTick>
34183316:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
34183318:	e00a      	b.n	34183330 <HAL_RCC_OscConfig+0x4d8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3418331a:	f7fe fd6b 	bl	34181df4 <HAL_GetTick>
3418331e:	4602      	mov	r2, r0
34183320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34183322:	1ad3      	subs	r3, r2, r3
34183324:	f241 3288 	movw	r2, #5000	@ 0x1388
34183328:	4293      	cmp	r3, r2
3418332a:	d901      	bls.n	34183330 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
3418332c:	2303      	movs	r3, #3
3418332e:	e16e      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() == 0U)
34183330:	f7ff fbfa 	bl	34182b28 <LL_RCC_LSE_IsReady>
34183334:	4603      	mov	r3, r0
34183336:	2b00      	cmp	r3, #0
34183338:	d0ef      	beq.n	3418331a <HAL_RCC_OscConfig+0x4c2>
3418333a:	e013      	b.n	34183364 <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418333c:	f7fe fd5a 	bl	34181df4 <HAL_GetTick>
34183340:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
34183342:	e00a      	b.n	3418335a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34183344:	f7fe fd56 	bl	34181df4 <HAL_GetTick>
34183348:	4602      	mov	r2, r0
3418334a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418334c:	1ad3      	subs	r3, r2, r3
3418334e:	f241 3288 	movw	r2, #5000	@ 0x1388
34183352:	4293      	cmp	r3, r2
34183354:	d901      	bls.n	3418335a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
34183356:	2303      	movs	r3, #3
34183358:	e159      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() != 0U)
3418335a:	f7ff fbe5 	bl	34182b28 <LL_RCC_LSE_IsReady>
3418335e:	4603      	mov	r3, r0
34183360:	2b00      	cmp	r3, #0
34183362:	d1ef      	bne.n	34183344 <HAL_RCC_OscConfig+0x4ec>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34183364:	687b      	ldr	r3, [r7, #4]
34183366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34183368:	2b00      	cmp	r3, #0
3418336a:	d04c      	beq.n	34183406 <HAL_RCC_OscConfig+0x5ae>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
3418336c:	687b      	ldr	r3, [r7, #4]
3418336e:	3328      	adds	r3, #40	@ 0x28
34183370:	4619      	mov	r1, r3
34183372:	2000      	movs	r0, #0
34183374:	f000 fe38 	bl	34183fe8 <RCC_PLL_IsNewConfig>
34183378:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
3418337a:	f7ff fc3d 	bl	34182bf8 <LL_RCC_PLL1_IsReady>
3418337e:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
34183380:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
34183382:	2b01      	cmp	r3, #1
34183384:	d130      	bne.n	341833e8 <HAL_RCC_OscConfig+0x590>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34183386:	f7ff fd0f 	bl	34182da8 <LL_RCC_IC1_GetSource>
3418338a:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418338c:	f7ff fd2a 	bl	34182de4 <LL_RCC_IC2_GetSource>
34183390:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34183392:	f7ff fd45 	bl	34182e20 <LL_RCC_IC6_GetSource>
34183396:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34183398:	f7ff fd50 	bl	34182e3c <LL_RCC_IC11_GetSource>
3418339c:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
3418339e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
341833a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341833a6:	d104      	bne.n	341833b2 <HAL_RCC_OscConfig+0x55a>
341833a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
341833aa:	2b00      	cmp	r3, #0
341833ac:	d101      	bne.n	341833b2 <HAL_RCC_OscConfig+0x55a>
      {
        return HAL_ERROR;
341833ae:	2301      	movs	r3, #1
341833b0:	e12d      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
341833b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
341833b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341833ba:	d10a      	bne.n	341833d2 <HAL_RCC_OscConfig+0x57a>
341833bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
341833be:	2b00      	cmp	r3, #0
341833c0:	d005      	beq.n	341833ce <HAL_RCC_OscConfig+0x576>
341833c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
341833c4:	2b00      	cmp	r3, #0
341833c6:	d002      	beq.n	341833ce <HAL_RCC_OscConfig+0x576>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
341833c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
341833ca:	2b00      	cmp	r3, #0
341833cc:	d101      	bne.n	341833d2 <HAL_RCC_OscConfig+0x57a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
341833ce:	2301      	movs	r3, #1
341833d0:	e11d      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
341833d2:	687b      	ldr	r3, [r7, #4]
341833d4:	3328      	adds	r3, #40	@ 0x28
341833d6:	4619      	mov	r1, r3
341833d8:	2000      	movs	r0, #0
341833da:	f000 fca9 	bl	34183d30 <RCC_PLL_Config>
341833de:	4603      	mov	r3, r0
341833e0:	2b00      	cmp	r3, #0
341833e2:	d010      	beq.n	34183406 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
341833e4:	2301      	movs	r3, #1
341833e6:	e112      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
341833e8:	687b      	ldr	r3, [r7, #4]
341833ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
341833ec:	2b02      	cmp	r3, #2
341833ee:	d10a      	bne.n	34183406 <HAL_RCC_OscConfig+0x5ae>
341833f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
341833f2:	2b00      	cmp	r3, #0
341833f4:	d107      	bne.n	34183406 <HAL_RCC_OscConfig+0x5ae>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
341833f6:	2000      	movs	r0, #0
341833f8:	f000 fdca 	bl	34183f90 <RCC_PLL_Enable>
341833fc:	4603      	mov	r3, r0
341833fe:	2b00      	cmp	r3, #0
34183400:	d001      	beq.n	34183406 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
34183402:	2301      	movs	r3, #1
34183404:	e103      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34183406:	687b      	ldr	r3, [r7, #4]
34183408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418340a:	2b00      	cmp	r3, #0
3418340c:	d054      	beq.n	341834b8 <HAL_RCC_OscConfig+0x660>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
3418340e:	687b      	ldr	r3, [r7, #4]
34183410:	3344      	adds	r3, #68	@ 0x44
34183412:	4619      	mov	r1, r3
34183414:	2001      	movs	r0, #1
34183416:	f000 fde7 	bl	34183fe8 <RCC_PLL_IsNewConfig>
3418341a:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
3418341c:	f7ff fc22 	bl	34182c64 <LL_RCC_PLL2_IsReady>
34183420:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
34183422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34183424:	2b01      	cmp	r3, #1
34183426:	d134      	bne.n	34183492 <HAL_RCC_OscConfig+0x63a>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34183428:	f7ff fcbe 	bl	34182da8 <LL_RCC_IC1_GetSource>
3418342c:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418342e:	f7ff fcd9 	bl	34182de4 <LL_RCC_IC2_GetSource>
34183432:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34183434:	f7ff fcf4 	bl	34182e20 <LL_RCC_IC6_GetSource>
34183438:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3418343a:	f7ff fcff 	bl	34182e3c <LL_RCC_IC11_GetSource>
3418343e:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34183440:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34183444:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34183448:	d105      	bne.n	34183456 <HAL_RCC_OscConfig+0x5fe>
3418344a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3418344c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183450:	d101      	bne.n	34183456 <HAL_RCC_OscConfig+0x5fe>
      {
        return HAL_ERROR;
34183452:	2301      	movs	r3, #1
34183454:	e0db      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34183456:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418345a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418345e:	d10d      	bne.n	3418347c <HAL_RCC_OscConfig+0x624>
34183460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34183462:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183466:	d007      	beq.n	34183478 <HAL_RCC_OscConfig+0x620>
34183468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418346a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418346e:	d003      	beq.n	34183478 <HAL_RCC_OscConfig+0x620>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34183470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34183472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183476:	d101      	bne.n	3418347c <HAL_RCC_OscConfig+0x624>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
34183478:	2301      	movs	r3, #1
3418347a:	e0c8      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
3418347c:	687b      	ldr	r3, [r7, #4]
3418347e:	3344      	adds	r3, #68	@ 0x44
34183480:	4619      	mov	r1, r3
34183482:	2001      	movs	r0, #1
34183484:	f000 fc54 	bl	34183d30 <RCC_PLL_Config>
34183488:	4603      	mov	r3, r0
3418348a:	2b00      	cmp	r3, #0
3418348c:	d014      	beq.n	341834b8 <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
3418348e:	2301      	movs	r3, #1
34183490:	e0bd      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34183492:	687b      	ldr	r3, [r7, #4]
34183494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34183496:	2b02      	cmp	r3, #2
34183498:	d10e      	bne.n	341834b8 <HAL_RCC_OscConfig+0x660>
3418349a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3418349c:	2b00      	cmp	r3, #0
3418349e:	d10b      	bne.n	341834b8 <HAL_RCC_OscConfig+0x660>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
341834a0:	2001      	movs	r0, #1
341834a2:	f000 fd75 	bl	34183f90 <RCC_PLL_Enable>
341834a6:	4603      	mov	r3, r0
341834a8:	2b00      	cmp	r3, #0
341834aa:	d005      	beq.n	341834b8 <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
341834ac:	2301      	movs	r3, #1
341834ae:	e0ae      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
341834b0:	56028000 	.word	0x56028000
341834b4:	00018002 	.word	0x00018002

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
341834b8:	687b      	ldr	r3, [r7, #4]
341834ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
341834bc:	2b00      	cmp	r3, #0
341834be:	d050      	beq.n	34183562 <HAL_RCC_OscConfig+0x70a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
341834c0:	687b      	ldr	r3, [r7, #4]
341834c2:	3360      	adds	r3, #96	@ 0x60
341834c4:	4619      	mov	r1, r3
341834c6:	2002      	movs	r0, #2
341834c8:	f000 fd8e 	bl	34183fe8 <RCC_PLL_IsNewConfig>
341834cc:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
341834ce:	f7ff fb93 	bl	34182bf8 <LL_RCC_PLL1_IsReady>
341834d2:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
341834d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
341834d6:	2b01      	cmp	r3, #1
341834d8:	d134      	bne.n	34183544 <HAL_RCC_OscConfig+0x6ec>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
341834da:	f7ff fc65 	bl	34182da8 <LL_RCC_IC1_GetSource>
341834de:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
341834e0:	f7ff fc80 	bl	34182de4 <LL_RCC_IC2_GetSource>
341834e4:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
341834e6:	f7ff fc9b 	bl	34182e20 <LL_RCC_IC6_GetSource>
341834ea:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
341834ec:	f7ff fca6 	bl	34182e3c <LL_RCC_IC11_GetSource>
341834f0:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
341834f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
341834f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341834fa:	d105      	bne.n	34183508 <HAL_RCC_OscConfig+0x6b0>
341834fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341834fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183502:	d101      	bne.n	34183508 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
34183504:	2301      	movs	r3, #1
34183506:	e082      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34183508:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418350c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183510:	d10d      	bne.n	3418352e <HAL_RCC_OscConfig+0x6d6>
34183512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34183514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183518:	d007      	beq.n	3418352a <HAL_RCC_OscConfig+0x6d2>
3418351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418351c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183520:	d003      	beq.n	3418352a <HAL_RCC_OscConfig+0x6d2>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
34183522:	6a3b      	ldr	r3, [r7, #32]
34183524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183528:	d101      	bne.n	3418352e <HAL_RCC_OscConfig+0x6d6>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
3418352a:	2301      	movs	r3, #1
3418352c:	e06f      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
3418352e:	687b      	ldr	r3, [r7, #4]
34183530:	3360      	adds	r3, #96	@ 0x60
34183532:	4619      	mov	r1, r3
34183534:	2002      	movs	r0, #2
34183536:	f000 fbfb 	bl	34183d30 <RCC_PLL_Config>
3418353a:	4603      	mov	r3, r0
3418353c:	2b00      	cmp	r3, #0
3418353e:	d010      	beq.n	34183562 <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
34183540:	2301      	movs	r3, #1
34183542:	e064      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34183544:	687b      	ldr	r3, [r7, #4]
34183546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34183548:	2b02      	cmp	r3, #2
3418354a:	d10a      	bne.n	34183562 <HAL_RCC_OscConfig+0x70a>
3418354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418354e:	2b00      	cmp	r3, #0
34183550:	d107      	bne.n	34183562 <HAL_RCC_OscConfig+0x70a>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34183552:	2002      	movs	r0, #2
34183554:	f000 fd1c 	bl	34183f90 <RCC_PLL_Enable>
34183558:	4603      	mov	r3, r0
3418355a:	2b00      	cmp	r3, #0
3418355c:	d001      	beq.n	34183562 <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
3418355e:	2301      	movs	r3, #1
34183560:	e055      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34183562:	687b      	ldr	r3, [r7, #4]
34183564:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34183566:	2b00      	cmp	r3, #0
34183568:	d050      	beq.n	3418360c <HAL_RCC_OscConfig+0x7b4>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
3418356a:	687b      	ldr	r3, [r7, #4]
3418356c:	337c      	adds	r3, #124	@ 0x7c
3418356e:	4619      	mov	r1, r3
34183570:	2003      	movs	r0, #3
34183572:	f000 fd39 	bl	34183fe8 <RCC_PLL_IsNewConfig>
34183576:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
34183578:	f7ff fbe0 	bl	34182d3c <LL_RCC_PLL4_IsReady>
3418357c:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
3418357e:	69fb      	ldr	r3, [r7, #28]
34183580:	2b01      	cmp	r3, #1
34183582:	d134      	bne.n	341835ee <HAL_RCC_OscConfig+0x796>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34183584:	f7ff fc10 	bl	34182da8 <LL_RCC_IC1_GetSource>
34183588:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3418358a:	f7ff fc2b 	bl	34182de4 <LL_RCC_IC2_GetSource>
3418358e:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34183590:	f7ff fc46 	bl	34182e20 <LL_RCC_IC6_GetSource>
34183594:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34183596:	f7ff fc51 	bl	34182e3c <LL_RCC_IC11_GetSource>
3418359a:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
3418359c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
341835a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341835a4:	d105      	bne.n	341835b2 <HAL_RCC_OscConfig+0x75a>
341835a6:	697b      	ldr	r3, [r7, #20]
341835a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341835ac:	d101      	bne.n	341835b2 <HAL_RCC_OscConfig+0x75a>
      {
        return HAL_ERROR;
341835ae:	2301      	movs	r3, #1
341835b0:	e02d      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
341835b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
341835b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341835ba:	d10d      	bne.n	341835d8 <HAL_RCC_OscConfig+0x780>
341835bc:	693b      	ldr	r3, [r7, #16]
341835be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341835c2:	d007      	beq.n	341835d4 <HAL_RCC_OscConfig+0x77c>
341835c4:	68fb      	ldr	r3, [r7, #12]
341835c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341835ca:	d003      	beq.n	341835d4 <HAL_RCC_OscConfig+0x77c>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
341835cc:	68bb      	ldr	r3, [r7, #8]
341835ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341835d2:	d101      	bne.n	341835d8 <HAL_RCC_OscConfig+0x780>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
341835d4:	2301      	movs	r3, #1
341835d6:	e01a      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
341835d8:	687b      	ldr	r3, [r7, #4]
341835da:	337c      	adds	r3, #124	@ 0x7c
341835dc:	4619      	mov	r1, r3
341835de:	2003      	movs	r0, #3
341835e0:	f000 fba6 	bl	34183d30 <RCC_PLL_Config>
341835e4:	4603      	mov	r3, r0
341835e6:	2b00      	cmp	r3, #0
341835e8:	d010      	beq.n	3418360c <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
341835ea:	2301      	movs	r3, #1
341835ec:	e00f      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
341835ee:	687b      	ldr	r3, [r7, #4]
341835f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341835f2:	2b02      	cmp	r3, #2
341835f4:	d10a      	bne.n	3418360c <HAL_RCC_OscConfig+0x7b4>
341835f6:	69bb      	ldr	r3, [r7, #24]
341835f8:	2b00      	cmp	r3, #0
341835fa:	d107      	bne.n	3418360c <HAL_RCC_OscConfig+0x7b4>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
341835fc:	2003      	movs	r0, #3
341835fe:	f000 fcc7 	bl	34183f90 <RCC_PLL_Enable>
34183602:	4603      	mov	r3, r0
34183604:	2b00      	cmp	r3, #0
34183606:	d001      	beq.n	3418360c <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34183608:	2301      	movs	r3, #1
3418360a:	e000      	b.n	3418360e <HAL_RCC_OscConfig+0x7b6>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
3418360c:	2300      	movs	r3, #0
}
3418360e:	4618      	mov	r0, r3
34183610:	3788      	adds	r7, #136	@ 0x88
34183612:	46bd      	mov	sp, r7
34183614:	bd80      	pop	{r7, pc}
34183616:	bf00      	nop

34183618 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34183618:	b580      	push	{r7, lr}
3418361a:	b084      	sub	sp, #16
3418361c:	af00      	add	r7, sp, #0
3418361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
34183620:	687b      	ldr	r3, [r7, #4]
34183622:	2b00      	cmp	r3, #0
34183624:	d101      	bne.n	3418362a <HAL_RCC_ClockConfig+0x12>
  {
    return HAL_ERROR;
34183626:	2301      	movs	r3, #1
34183628:	e1f2      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
3418362a:	687b      	ldr	r3, [r7, #4]
3418362c:	681b      	ldr	r3, [r3, #0]
3418362e:	f003 0308 	and.w	r3, r3, #8
34183632:	2b00      	cmp	r3, #0
34183634:	d010      	beq.n	34183658 <HAL_RCC_ClockConfig+0x40>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34183636:	687b      	ldr	r3, [r7, #4]
34183638:	691a      	ldr	r2, [r3, #16]
3418363a:	4ba3      	ldr	r3, [pc, #652]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
3418363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418363e:	f003 0307 	and.w	r3, r3, #7
34183642:	429a      	cmp	r2, r3
34183644:	d908      	bls.n	34183658 <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34183646:	4ba0      	ldr	r3, [pc, #640]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
34183648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418364a:	f023 0207 	bic.w	r2, r3, #7
3418364e:	687b      	ldr	r3, [r7, #4]
34183650:	691b      	ldr	r3, [r3, #16]
34183652:	499d      	ldr	r1, [pc, #628]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
34183654:	4313      	orrs	r3, r2
34183656:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34183658:	687b      	ldr	r3, [r7, #4]
3418365a:	681b      	ldr	r3, [r3, #0]
3418365c:	f003 0310 	and.w	r3, r3, #16
34183660:	2b00      	cmp	r3, #0
34183662:	d010      	beq.n	34183686 <HAL_RCC_ClockConfig+0x6e>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34183664:	687b      	ldr	r3, [r7, #4]
34183666:	695a      	ldr	r2, [r3, #20]
34183668:	4b97      	ldr	r3, [pc, #604]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
3418366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418366c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34183670:	429a      	cmp	r2, r3
34183672:	d908      	bls.n	34183686 <HAL_RCC_ClockConfig+0x6e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34183674:	4b94      	ldr	r3, [pc, #592]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
34183676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183678:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
3418367c:	687b      	ldr	r3, [r7, #4]
3418367e:	695b      	ldr	r3, [r3, #20]
34183680:	4991      	ldr	r1, [pc, #580]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
34183682:	4313      	orrs	r3, r2
34183684:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34183686:	687b      	ldr	r3, [r7, #4]
34183688:	681b      	ldr	r3, [r3, #0]
3418368a:	f003 0320 	and.w	r3, r3, #32
3418368e:	2b00      	cmp	r3, #0
34183690:	d010      	beq.n	341836b4 <HAL_RCC_ClockConfig+0x9c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34183692:	687b      	ldr	r3, [r7, #4]
34183694:	699a      	ldr	r2, [r3, #24]
34183696:	4b8c      	ldr	r3, [pc, #560]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
34183698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418369a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
3418369e:	429a      	cmp	r2, r3
341836a0:	d908      	bls.n	341836b4 <HAL_RCC_ClockConfig+0x9c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
341836a2:	4b89      	ldr	r3, [pc, #548]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
341836a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341836a6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
341836aa:	687b      	ldr	r3, [r7, #4]
341836ac:	699b      	ldr	r3, [r3, #24]
341836ae:	4986      	ldr	r1, [pc, #536]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
341836b0:	4313      	orrs	r3, r2
341836b2:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
341836b4:	687b      	ldr	r3, [r7, #4]
341836b6:	681b      	ldr	r3, [r3, #0]
341836b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341836bc:	2b00      	cmp	r3, #0
341836be:	d010      	beq.n	341836e2 <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
341836c0:	687b      	ldr	r3, [r7, #4]
341836c2:	69da      	ldr	r2, [r3, #28]
341836c4:	4b80      	ldr	r3, [pc, #512]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
341836c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341836c8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
341836cc:	429a      	cmp	r2, r3
341836ce:	d908      	bls.n	341836e2 <HAL_RCC_ClockConfig+0xca>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
341836d0:	4b7d      	ldr	r3, [pc, #500]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
341836d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341836d4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
341836d8:	687b      	ldr	r3, [r7, #4]
341836da:	69db      	ldr	r3, [r3, #28]
341836dc:	497a      	ldr	r1, [pc, #488]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
341836de:	4313      	orrs	r3, r2
341836e0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
341836e2:	687b      	ldr	r3, [r7, #4]
341836e4:	681b      	ldr	r3, [r3, #0]
341836e6:	f003 0304 	and.w	r3, r3, #4
341836ea:	2b00      	cmp	r3, #0
341836ec:	d010      	beq.n	34183710 <HAL_RCC_ClockConfig+0xf8>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
341836ee:	687b      	ldr	r3, [r7, #4]
341836f0:	68da      	ldr	r2, [r3, #12]
341836f2:	4b75      	ldr	r3, [pc, #468]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
341836f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341836f6:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
341836fa:	429a      	cmp	r2, r3
341836fc:	d908      	bls.n	34183710 <HAL_RCC_ClockConfig+0xf8>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
341836fe:	4b72      	ldr	r3, [pc, #456]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
34183700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183702:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34183706:	687b      	ldr	r3, [r7, #4]
34183708:	68db      	ldr	r3, [r3, #12]
3418370a:	496f      	ldr	r1, [pc, #444]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
3418370c:	4313      	orrs	r3, r2
3418370e:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34183710:	687b      	ldr	r3, [r7, #4]
34183712:	681b      	ldr	r3, [r3, #0]
34183714:	f003 0301 	and.w	r3, r3, #1
34183718:	2b00      	cmp	r3, #0
3418371a:	d063      	beq.n	341837e4 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
3418371c:	687b      	ldr	r3, [r7, #4]
3418371e:	685b      	ldr	r3, [r3, #4]
34183720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34183724:	d106      	bne.n	34183734 <HAL_RCC_ClockConfig+0x11c>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34183726:	f7ff f92b 	bl	34182980 <LL_RCC_HSE_IsReady>
3418372a:	4603      	mov	r3, r0
3418372c:	2b00      	cmp	r3, #0
3418372e:	d134      	bne.n	3418379a <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34183730:	2301      	movs	r3, #1
34183732:	e16d      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34183734:	687b      	ldr	r3, [r7, #4]
34183736:	685b      	ldr	r3, [r3, #4]
34183738:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418373c:	d11a      	bne.n	34183774 <HAL_RCC_ClockConfig+0x15c>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
3418373e:	f7ff fb33 	bl	34182da8 <LL_RCC_IC1_GetSource>
34183742:	4602      	mov	r2, r0
34183744:	687b      	ldr	r3, [r7, #4]
34183746:	6a1b      	ldr	r3, [r3, #32]
34183748:	4619      	mov	r1, r3
3418374a:	4610      	mov	r0, r2
3418374c:	f000 fd00 	bl	34184150 <RCC_IC_CheckPLLSources>
34183750:	4603      	mov	r3, r0
34183752:	2b01      	cmp	r3, #1
34183754:	d001      	beq.n	3418375a <HAL_RCC_ClockConfig+0x142>
      {
        return HAL_ERROR;
34183756:	2301      	movs	r3, #1
34183758:	e15a      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
3418375a:	687b      	ldr	r3, [r7, #4]
3418375c:	6a1a      	ldr	r2, [r3, #32]
3418375e:	687b      	ldr	r3, [r7, #4]
34183760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183762:	3b01      	subs	r3, #1
34183764:	041b      	lsls	r3, r3, #16
34183766:	4958      	ldr	r1, [pc, #352]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
34183768:	4313      	orrs	r3, r2
3418376a:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
3418376e:	f7ff fb0d 	bl	34182d8c <LL_RCC_IC1_Enable>
34183772:	e012      	b.n	3418379a <HAL_RCC_ClockConfig+0x182>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34183774:	687b      	ldr	r3, [r7, #4]
34183776:	685b      	ldr	r3, [r3, #4]
34183778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418377c:	d106      	bne.n	3418378c <HAL_RCC_ClockConfig+0x174>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
3418377e:	f7ff f997 	bl	34182ab0 <LL_RCC_MSI_IsReady>
34183782:	4603      	mov	r3, r0
34183784:	2b00      	cmp	r3, #0
34183786:	d108      	bne.n	3418379a <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34183788:	2301      	movs	r3, #1
3418378a:	e141      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
3418378c:	f7ff f928 	bl	341829e0 <LL_RCC_HSI_IsReady>
34183790:	4603      	mov	r3, r0
34183792:	2b00      	cmp	r3, #0
34183794:	d101      	bne.n	3418379a <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34183796:	2301      	movs	r3, #1
34183798:	e13a      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
3418379a:	4b4b      	ldr	r3, [pc, #300]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
3418379c:	6a1b      	ldr	r3, [r3, #32]
3418379e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
341837a2:	687b      	ldr	r3, [r7, #4]
341837a4:	685b      	ldr	r3, [r3, #4]
341837a6:	4948      	ldr	r1, [pc, #288]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
341837a8:	4313      	orrs	r3, r2
341837aa:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341837ac:	f7fe fb22 	bl	34181df4 <HAL_GetTick>
341837b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
341837b2:	e00a      	b.n	341837ca <HAL_RCC_ClockConfig+0x1b2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
341837b4:	f7fe fb1e 	bl	34181df4 <HAL_GetTick>
341837b8:	4602      	mov	r2, r0
341837ba:	68fb      	ldr	r3, [r7, #12]
341837bc:	1ad3      	subs	r3, r2, r3
341837be:	f241 3288 	movw	r2, #5000	@ 0x1388
341837c2:	4293      	cmp	r3, r2
341837c4:	d901      	bls.n	341837ca <HAL_RCC_ClockConfig+0x1b2>
      {
        return HAL_TIMEOUT;
341837c6:	2303      	movs	r3, #3
341837c8:	e122      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
341837ca:	f7ff f9eb 	bl	34182ba4 <LL_RCC_GetCpuClkSource>
341837ce:	4602      	mov	r2, r0
341837d0:	687b      	ldr	r3, [r7, #4]
341837d2:	685b      	ldr	r3, [r3, #4]
341837d4:	011b      	lsls	r3, r3, #4
341837d6:	429a      	cmp	r2, r3
341837d8:	d1ec      	bne.n	341837b4 <HAL_RCC_ClockConfig+0x19c>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
341837da:	f000 f921 	bl	34183a20 <HAL_RCC_GetCpuClockFreq>
341837de:	4603      	mov	r3, r0
341837e0:	4a3a      	ldr	r2, [pc, #232]	@ (341838cc <HAL_RCC_ClockConfig+0x2b4>)
341837e2:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
341837e4:	687b      	ldr	r3, [r7, #4]
341837e6:	681b      	ldr	r3, [r3, #0]
341837e8:	f003 0302 	and.w	r3, r3, #2
341837ec:	2b00      	cmp	r3, #0
341837ee:	f000 8096 	beq.w	3418391e <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
341837f2:	687b      	ldr	r3, [r7, #4]
341837f4:	689b      	ldr	r3, [r3, #8]
341837f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
341837fa:	d106      	bne.n	3418380a <HAL_RCC_ClockConfig+0x1f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
341837fc:	f7ff f8c0 	bl	34182980 <LL_RCC_HSE_IsReady>
34183800:	4603      	mov	r3, r0
34183802:	2b00      	cmp	r3, #0
34183804:	d16b      	bne.n	341838de <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34183806:	2301      	movs	r3, #1
34183808:	e102      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
3418380a:	687b      	ldr	r3, [r7, #4]
3418380c:	689b      	ldr	r3, [r3, #8]
3418380e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34183812:	d14d      	bne.n	341838b0 <HAL_RCC_ClockConfig+0x298>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34183814:	f7ff fae6 	bl	34182de4 <LL_RCC_IC2_GetSource>
34183818:	4602      	mov	r2, r0
3418381a:	687b      	ldr	r3, [r7, #4]
3418381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418381e:	4619      	mov	r1, r3
34183820:	4610      	mov	r0, r2
34183822:	f000 fc95 	bl	34184150 <RCC_IC_CheckPLLSources>
34183826:	4603      	mov	r3, r0
34183828:	2b01      	cmp	r3, #1
3418382a:	d001      	beq.n	34183830 <HAL_RCC_ClockConfig+0x218>
      {
        return HAL_ERROR;
3418382c:	2301      	movs	r3, #1
3418382e:	e0ef      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34183830:	f7ff faf6 	bl	34182e20 <LL_RCC_IC6_GetSource>
34183834:	4602      	mov	r2, r0
34183836:	687b      	ldr	r3, [r7, #4]
34183838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418383a:	4619      	mov	r1, r3
3418383c:	4610      	mov	r0, r2
3418383e:	f000 fc87 	bl	34184150 <RCC_IC_CheckPLLSources>
34183842:	4603      	mov	r3, r0
34183844:	2b01      	cmp	r3, #1
34183846:	d001      	beq.n	3418384c <HAL_RCC_ClockConfig+0x234>
      {
        return HAL_ERROR;
34183848:	2301      	movs	r3, #1
3418384a:	e0e1      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
3418384c:	f7ff faf6 	bl	34182e3c <LL_RCC_IC11_GetSource>
34183850:	4602      	mov	r2, r0
34183852:	687b      	ldr	r3, [r7, #4]
34183854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34183856:	4619      	mov	r1, r3
34183858:	4610      	mov	r0, r2
3418385a:	f000 fc79 	bl	34184150 <RCC_IC_CheckPLLSources>
3418385e:	4603      	mov	r3, r0
34183860:	2b01      	cmp	r3, #1
34183862:	d001      	beq.n	34183868 <HAL_RCC_ClockConfig+0x250>
      {
        return HAL_ERROR;
34183864:	2301      	movs	r3, #1
34183866:	e0d3      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34183868:	687b      	ldr	r3, [r7, #4]
3418386a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418386c:	687b      	ldr	r3, [r7, #4]
3418386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34183870:	3b01      	subs	r3, #1
34183872:	041b      	lsls	r3, r3, #16
34183874:	4914      	ldr	r1, [pc, #80]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
34183876:	4313      	orrs	r3, r2
34183878:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
3418387c:	687b      	ldr	r3, [r7, #4]
3418387e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
34183880:	687b      	ldr	r3, [r7, #4]
34183882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34183884:	3b01      	subs	r3, #1
34183886:	041b      	lsls	r3, r3, #16
34183888:	490f      	ldr	r1, [pc, #60]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
3418388a:	4313      	orrs	r3, r2
3418388c:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34183890:	687b      	ldr	r3, [r7, #4]
34183892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34183894:	687b      	ldr	r3, [r7, #4]
34183896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34183898:	3b01      	subs	r3, #1
3418389a:	041b      	lsls	r3, r3, #16
3418389c:	490a      	ldr	r1, [pc, #40]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
3418389e:	4313      	orrs	r3, r2
341838a0:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
341838a4:	4b08      	ldr	r3, [pc, #32]	@ (341838c8 <HAL_RCC_ClockConfig+0x2b0>)
341838a6:	f240 4222 	movw	r2, #1058	@ 0x422
341838aa:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
341838ae:	e016      	b.n	341838de <HAL_RCC_ClockConfig+0x2c6>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
341838b0:	687b      	ldr	r3, [r7, #4]
341838b2:	689b      	ldr	r3, [r3, #8]
341838b4:	2b00      	cmp	r3, #0
341838b6:	d10b      	bne.n	341838d0 <HAL_RCC_ClockConfig+0x2b8>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
341838b8:	f7ff f892 	bl	341829e0 <LL_RCC_HSI_IsReady>
341838bc:	4603      	mov	r3, r0
341838be:	2b00      	cmp	r3, #0
341838c0:	d10d      	bne.n	341838de <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
341838c2:	2301      	movs	r3, #1
341838c4:	e0a4      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
341838c6:	bf00      	nop
341838c8:	56028000 	.word	0x56028000
341838cc:	341c0000 	.word	0x341c0000
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
341838d0:	f7ff f8ee 	bl	34182ab0 <LL_RCC_MSI_IsReady>
341838d4:	4603      	mov	r3, r0
341838d6:	2b00      	cmp	r3, #0
341838d8:	d101      	bne.n	341838de <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
341838da:	2301      	movs	r3, #1
341838dc:	e098      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
341838de:	4b4e      	ldr	r3, [pc, #312]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
341838e0:	6a1b      	ldr	r3, [r3, #32]
341838e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
341838e6:	687b      	ldr	r3, [r7, #4]
341838e8:	689b      	ldr	r3, [r3, #8]
341838ea:	494b      	ldr	r1, [pc, #300]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
341838ec:	4313      	orrs	r3, r2
341838ee:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341838f0:	f7fe fa80 	bl	34181df4 <HAL_GetTick>
341838f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
341838f6:	e00a      	b.n	3418390e <HAL_RCC_ClockConfig+0x2f6>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
341838f8:	f7fe fa7c 	bl	34181df4 <HAL_GetTick>
341838fc:	4602      	mov	r2, r0
341838fe:	68fb      	ldr	r3, [r7, #12]
34183900:	1ad3      	subs	r3, r2, r3
34183902:	f241 3288 	movw	r2, #5000	@ 0x1388
34183906:	4293      	cmp	r3, r2
34183908:	d901      	bls.n	3418390e <HAL_RCC_ClockConfig+0x2f6>
      {
        return HAL_TIMEOUT;
3418390a:	2303      	movs	r3, #3
3418390c:	e080      	b.n	34183a10 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
3418390e:	f7ff f957 	bl	34182bc0 <LL_RCC_GetSysClkSource>
34183912:	4602      	mov	r2, r0
34183914:	687b      	ldr	r3, [r7, #4]
34183916:	689b      	ldr	r3, [r3, #8]
34183918:	011b      	lsls	r3, r3, #4
3418391a:	429a      	cmp	r2, r3
3418391c:	d1ec      	bne.n	341838f8 <HAL_RCC_ClockConfig+0x2e0>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
3418391e:	687b      	ldr	r3, [r7, #4]
34183920:	681b      	ldr	r3, [r3, #0]
34183922:	f003 0304 	and.w	r3, r3, #4
34183926:	2b00      	cmp	r3, #0
34183928:	d010      	beq.n	3418394c <HAL_RCC_ClockConfig+0x334>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
3418392a:	687b      	ldr	r3, [r7, #4]
3418392c:	68da      	ldr	r2, [r3, #12]
3418392e:	4b3a      	ldr	r3, [pc, #232]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
34183930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183932:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34183936:	429a      	cmp	r2, r3
34183938:	d208      	bcs.n	3418394c <HAL_RCC_ClockConfig+0x334>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
3418393a:	4b37      	ldr	r3, [pc, #220]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
3418393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418393e:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34183942:	687b      	ldr	r3, [r7, #4]
34183944:	68db      	ldr	r3, [r3, #12]
34183946:	4934      	ldr	r1, [pc, #208]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
34183948:	4313      	orrs	r3, r2
3418394a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
3418394c:	687b      	ldr	r3, [r7, #4]
3418394e:	681b      	ldr	r3, [r3, #0]
34183950:	f003 0308 	and.w	r3, r3, #8
34183954:	2b00      	cmp	r3, #0
34183956:	d010      	beq.n	3418397a <HAL_RCC_ClockConfig+0x362>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34183958:	687b      	ldr	r3, [r7, #4]
3418395a:	691a      	ldr	r2, [r3, #16]
3418395c:	4b2e      	ldr	r3, [pc, #184]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
3418395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183960:	f003 0307 	and.w	r3, r3, #7
34183964:	429a      	cmp	r2, r3
34183966:	d208      	bcs.n	3418397a <HAL_RCC_ClockConfig+0x362>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34183968:	4b2b      	ldr	r3, [pc, #172]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
3418396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418396c:	f023 0207 	bic.w	r2, r3, #7
34183970:	687b      	ldr	r3, [r7, #4]
34183972:	691b      	ldr	r3, [r3, #16]
34183974:	4928      	ldr	r1, [pc, #160]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
34183976:	4313      	orrs	r3, r2
34183978:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
3418397a:	687b      	ldr	r3, [r7, #4]
3418397c:	681b      	ldr	r3, [r3, #0]
3418397e:	f003 0310 	and.w	r3, r3, #16
34183982:	2b00      	cmp	r3, #0
34183984:	d010      	beq.n	341839a8 <HAL_RCC_ClockConfig+0x390>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34183986:	687b      	ldr	r3, [r7, #4]
34183988:	695a      	ldr	r2, [r3, #20]
3418398a:	4b23      	ldr	r3, [pc, #140]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
3418398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418398e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34183992:	429a      	cmp	r2, r3
34183994:	d208      	bcs.n	341839a8 <HAL_RCC_ClockConfig+0x390>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34183996:	4b20      	ldr	r3, [pc, #128]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
34183998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418399a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
3418399e:	687b      	ldr	r3, [r7, #4]
341839a0:	695b      	ldr	r3, [r3, #20]
341839a2:	491d      	ldr	r1, [pc, #116]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
341839a4:	4313      	orrs	r3, r2
341839a6:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
341839a8:	687b      	ldr	r3, [r7, #4]
341839aa:	681b      	ldr	r3, [r3, #0]
341839ac:	f003 0320 	and.w	r3, r3, #32
341839b0:	2b00      	cmp	r3, #0
341839b2:	d010      	beq.n	341839d6 <HAL_RCC_ClockConfig+0x3be>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
341839b4:	687b      	ldr	r3, [r7, #4]
341839b6:	699a      	ldr	r2, [r3, #24]
341839b8:	4b17      	ldr	r3, [pc, #92]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
341839ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341839bc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
341839c0:	429a      	cmp	r2, r3
341839c2:	d208      	bcs.n	341839d6 <HAL_RCC_ClockConfig+0x3be>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
341839c4:	4b14      	ldr	r3, [pc, #80]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
341839c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341839c8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
341839cc:	687b      	ldr	r3, [r7, #4]
341839ce:	699b      	ldr	r3, [r3, #24]
341839d0:	4911      	ldr	r1, [pc, #68]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
341839d2:	4313      	orrs	r3, r2
341839d4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
341839d6:	687b      	ldr	r3, [r7, #4]
341839d8:	681b      	ldr	r3, [r3, #0]
341839da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341839de:	2b00      	cmp	r3, #0
341839e0:	d010      	beq.n	34183a04 <HAL_RCC_ClockConfig+0x3ec>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
341839e2:	687b      	ldr	r3, [r7, #4]
341839e4:	69da      	ldr	r2, [r3, #28]
341839e6:	4b0c      	ldr	r3, [pc, #48]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
341839e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341839ea:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
341839ee:	429a      	cmp	r2, r3
341839f0:	d208      	bcs.n	34183a04 <HAL_RCC_ClockConfig+0x3ec>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
341839f2:	4b09      	ldr	r3, [pc, #36]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
341839f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341839f6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
341839fa:	687b      	ldr	r3, [r7, #4]
341839fc:	69db      	ldr	r3, [r3, #28]
341839fe:	4906      	ldr	r1, [pc, #24]	@ (34183a18 <HAL_RCC_ClockConfig+0x400>)
34183a00:	4313      	orrs	r3, r2
34183a02:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
34183a04:	4b05      	ldr	r3, [pc, #20]	@ (34183a1c <HAL_RCC_ClockConfig+0x404>)
34183a06:	681b      	ldr	r3, [r3, #0]
34183a08:	4618      	mov	r0, r3
34183a0a:	f7fe f9a9 	bl	34181d60 <HAL_InitTick>
34183a0e:	4603      	mov	r3, r0
}
34183a10:	4618      	mov	r0, r3
34183a12:	3710      	adds	r7, #16
34183a14:	46bd      	mov	sp, r7
34183a16:	bd80      	pop	{r7, pc}
34183a18:	56028000 	.word	0x56028000
34183a1c:	341c0004 	.word	0x341c0004

34183a20 <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
34183a20:	b580      	push	{r7, lr}
34183a22:	b082      	sub	sp, #8
34183a24:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34183a26:	2300      	movs	r3, #0
34183a28:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
34183a2a:	f7ff f8bb 	bl	34182ba4 <LL_RCC_GetCpuClkSource>
34183a2e:	4603      	mov	r3, r0
34183a30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34183a34:	d026      	beq.n	34183a84 <HAL_RCC_GetCpuClockFreq+0x64>
34183a36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34183a3a:	d861      	bhi.n	34183b00 <HAL_RCC_GetCpuClockFreq+0xe0>
34183a3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34183a40:	d01d      	beq.n	34183a7e <HAL_RCC_GetCpuClockFreq+0x5e>
34183a42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34183a46:	d85b      	bhi.n	34183b00 <HAL_RCC_GetCpuClockFreq+0xe0>
34183a48:	2b00      	cmp	r3, #0
34183a4a:	d003      	beq.n	34183a54 <HAL_RCC_GetCpuClockFreq+0x34>
34183a4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34183a50:	d009      	beq.n	34183a66 <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34183a52:	e055      	b.n	34183b00 <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34183a54:	f7fe ffea 	bl	34182a2c <LL_RCC_HSI_GetDivider>
34183a58:	4603      	mov	r3, r0
34183a5a:	09db      	lsrs	r3, r3, #7
34183a5c:	4a2b      	ldr	r2, [pc, #172]	@ (34183b0c <HAL_RCC_GetCpuClockFreq+0xec>)
34183a5e:	fa22 f303 	lsr.w	r3, r2, r3
34183a62:	607b      	str	r3, [r7, #4]
      break;
34183a64:	e04d      	b.n	34183b02 <HAL_RCC_GetCpuClockFreq+0xe2>
      frequency = RCC_GET_MSI_FREQUENCY();
34183a66:	4b2a      	ldr	r3, [pc, #168]	@ (34183b10 <HAL_RCC_GetCpuClockFreq+0xf0>)
34183a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34183a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34183a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34183a72:	d101      	bne.n	34183a78 <HAL_RCC_GetCpuClockFreq+0x58>
34183a74:	4b27      	ldr	r3, [pc, #156]	@ (34183b14 <HAL_RCC_GetCpuClockFreq+0xf4>)
34183a76:	e000      	b.n	34183a7a <HAL_RCC_GetCpuClockFreq+0x5a>
34183a78:	4b27      	ldr	r3, [pc, #156]	@ (34183b18 <HAL_RCC_GetCpuClockFreq+0xf8>)
34183a7a:	607b      	str	r3, [r7, #4]
      break;
34183a7c:	e041      	b.n	34183b02 <HAL_RCC_GetCpuClockFreq+0xe2>
      frequency = HSE_VALUE;
34183a7e:	4b27      	ldr	r3, [pc, #156]	@ (34183b1c <HAL_RCC_GetCpuClockFreq+0xfc>)
34183a80:	607b      	str	r3, [r7, #4]
      break;
34183a82:	e03e      	b.n	34183b02 <HAL_RCC_GetCpuClockFreq+0xe2>
      ic_divider = LL_RCC_IC1_GetDivider();
34183a84:	f7ff f99e 	bl	34182dc4 <LL_RCC_IC1_GetDivider>
34183a88:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
34183a8a:	f7ff f98d 	bl	34182da8 <LL_RCC_IC1_GetSource>
34183a8e:	4603      	mov	r3, r0
34183a90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183a94:	d029      	beq.n	34183aea <HAL_RCC_GetCpuClockFreq+0xca>
34183a96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183a9a:	d82f      	bhi.n	34183afc <HAL_RCC_GetCpuClockFreq+0xdc>
34183a9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183aa0:	d01a      	beq.n	34183ad8 <HAL_RCC_GetCpuClockFreq+0xb8>
34183aa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183aa6:	d829      	bhi.n	34183afc <HAL_RCC_GetCpuClockFreq+0xdc>
34183aa8:	2b00      	cmp	r3, #0
34183aaa:	d003      	beq.n	34183ab4 <HAL_RCC_GetCpuClockFreq+0x94>
34183aac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183ab0:	d009      	beq.n	34183ac6 <HAL_RCC_GetCpuClockFreq+0xa6>
          break;
34183ab2:	e023      	b.n	34183afc <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34183ab4:	f004 fec0 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34183ab8:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34183aba:	687a      	ldr	r2, [r7, #4]
34183abc:	683b      	ldr	r3, [r7, #0]
34183abe:	fbb2 f3f3 	udiv	r3, r2, r3
34183ac2:	607b      	str	r3, [r7, #4]
          break;
34183ac4:	e01b      	b.n	34183afe <HAL_RCC_GetCpuClockFreq+0xde>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34183ac6:	f004 fefd 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34183aca:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34183acc:	687a      	ldr	r2, [r7, #4]
34183ace:	683b      	ldr	r3, [r7, #0]
34183ad0:	fbb2 f3f3 	udiv	r3, r2, r3
34183ad4:	607b      	str	r3, [r7, #4]
          break;
34183ad6:	e012      	b.n	34183afe <HAL_RCC_GetCpuClockFreq+0xde>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34183ad8:	f004 ff3a 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34183adc:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34183ade:	687a      	ldr	r2, [r7, #4]
34183ae0:	683b      	ldr	r3, [r7, #0]
34183ae2:	fbb2 f3f3 	udiv	r3, r2, r3
34183ae6:	607b      	str	r3, [r7, #4]
          break;
34183ae8:	e009      	b.n	34183afe <HAL_RCC_GetCpuClockFreq+0xde>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34183aea:	f004 ff77 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34183aee:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34183af0:	687a      	ldr	r2, [r7, #4]
34183af2:	683b      	ldr	r3, [r7, #0]
34183af4:	fbb2 f3f3 	udiv	r3, r2, r3
34183af8:	607b      	str	r3, [r7, #4]
          break;
34183afa:	e000      	b.n	34183afe <HAL_RCC_GetCpuClockFreq+0xde>
          break;
34183afc:	bf00      	nop
      break;
34183afe:	e000      	b.n	34183b02 <HAL_RCC_GetCpuClockFreq+0xe2>
      break;
34183b00:	bf00      	nop
  }

  return frequency;
34183b02:	687b      	ldr	r3, [r7, #4]
}
34183b04:	4618      	mov	r0, r3
34183b06:	3708      	adds	r7, #8
34183b08:	46bd      	mov	sp, r7
34183b0a:	bd80      	pop	{r7, pc}
34183b0c:	03d09000 	.word	0x03d09000
34183b10:	56028000 	.word	0x56028000
34183b14:	00f42400 	.word	0x00f42400
34183b18:	003d0900 	.word	0x003d0900
34183b1c:	02dc6c00 	.word	0x02dc6c00

34183b20 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
34183b20:	b598      	push	{r3, r4, r7, lr}
34183b22:	af00      	add	r7, sp, #0
  return RCC_GetSysClockFreq(LL_RCC_IC2_GetSource(), LL_RCC_IC2_GetDivider());
34183b24:	f7ff f95e 	bl	34182de4 <LL_RCC_IC2_GetSource>
34183b28:	4604      	mov	r4, r0
34183b2a:	f7ff f969 	bl	34182e00 <LL_RCC_IC2_GetDivider>
34183b2e:	4603      	mov	r3, r0
34183b30:	4619      	mov	r1, r3
34183b32:	4620      	mov	r0, r4
34183b34:	f000 f87a 	bl	34183c2c <RCC_GetSysClockFreq>
34183b38:	4603      	mov	r3, r0
}
34183b3a:	4618      	mov	r0, r3
34183b3c:	bd98      	pop	{r3, r4, r7, pc}
	...

34183b40 <HAL_RCC_GetClockConfig>:
  * @param  pRCC_ClkInitStruct  Pointer to an RCC_ClkInitTypeDef structure that
  *         will return the configuration.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34183b40:	b480      	push	{r7}
34183b42:	b085      	sub	sp, #20
34183b44:	af00      	add	r7, sp, #0
34183b46:	6078      	str	r0, [r7, #4]
  uint32_t cfgr_value;

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK | \
34183b48:	687b      	ldr	r3, [r7, #4]
34183b4a:	227f      	movs	r2, #127	@ 0x7f
34183b4c:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK   | \
                                  RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                  RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the configuration register 1 value */
  cfgr_value = RCC->CFGR1;
34183b4e:	4b36      	ldr	r3, [pc, #216]	@ (34183c28 <HAL_RCC_GetClockConfig+0xe8>)
34183b50:	6a1b      	ldr	r3, [r3, #32]
34183b52:	60fb      	str	r3, [r7, #12]

  /* Get the active CPU source -----------------------------------------------*/
  pRCC_ClkInitStruct->CPUCLKSource = (cfgr_value & RCC_CFGR1_CPUSWS) >> 4U;
34183b54:	68fb      	ldr	r3, [r7, #12]
34183b56:	091b      	lsrs	r3, r3, #4
34183b58:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
34183b5c:	687b      	ldr	r3, [r7, #4]
34183b5e:	605a      	str	r2, [r3, #4]

  /* Get the active SYSCLK bus source ----------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (cfgr_value & RCC_CFGR1_SYSSWS) >> 4U;
34183b60:	68fb      	ldr	r3, [r7, #12]
34183b62:	091b      	lsrs	r3, r3, #4
34183b64:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
34183b68:	687b      	ldr	r3, [r7, #4]
34183b6a:	609a      	str	r2, [r3, #8]

  /* Get the configuration register 2 value */
  cfgr_value = RCC->CFGR2;
34183b6c:	4b2e      	ldr	r3, [pc, #184]	@ (34183c28 <HAL_RCC_GetClockConfig+0xe8>)
34183b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183b70:	60fb      	str	r3, [r7, #12]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (cfgr_value & RCC_CFGR2_HPRE);
34183b72:	68fb      	ldr	r3, [r7, #12]
34183b74:	f403 02e0 	and.w	r2, r3, #7340032	@ 0x700000
34183b78:	687b      	ldr	r3, [r7, #4]
34183b7a:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (cfgr_value & RCC_CFGR2_PPRE1);
34183b7c:	68fb      	ldr	r3, [r7, #12]
34183b7e:	f003 0207 	and.w	r2, r3, #7
34183b82:	687b      	ldr	r3, [r7, #4]
34183b84:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (cfgr_value & RCC_CFGR2_PPRE2);
34183b86:	68fb      	ldr	r3, [r7, #12]
34183b88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
34183b8c:	687b      	ldr	r3, [r7, #4]
34183b8e:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB4CLKDivider = (cfgr_value & RCC_CFGR2_PPRE4);
34183b90:	68fb      	ldr	r3, [r7, #12]
34183b92:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
34183b96:	687b      	ldr	r3, [r7, #4]
34183b98:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB5CLKDivider = (cfgr_value & RCC_CFGR2_PPRE5);
34183b9a:	68fb      	ldr	r3, [r7, #12]
34183b9c:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
34183ba0:	687b      	ldr	r3, [r7, #4]
34183ba2:	61da      	str	r2, [r3, #28]

  /* Get the IC1 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC1CFGR;
34183ba4:	4b20      	ldr	r3, [pc, #128]	@ (34183c28 <HAL_RCC_GetClockConfig+0xe8>)
34183ba6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34183baa:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC1Selection.ClockSelection = cfgr_value & RCC_IC1CFGR_IC1SEL;
34183bac:	68fb      	ldr	r3, [r7, #12]
34183bae:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34183bb2:	687b      	ldr	r3, [r7, #4]
34183bb4:	621a      	str	r2, [r3, #32]
  pRCC_ClkInitStruct->IC1Selection.ClockDivider = ((cfgr_value & RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1U;
34183bb6:	68fb      	ldr	r3, [r7, #12]
34183bb8:	0c1b      	lsrs	r3, r3, #16
34183bba:	b2db      	uxtb	r3, r3
34183bbc:	1c5a      	adds	r2, r3, #1
34183bbe:	687b      	ldr	r3, [r7, #4]
34183bc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the IC2 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC2CFGR;
34183bc2:	4b19      	ldr	r3, [pc, #100]	@ (34183c28 <HAL_RCC_GetClockConfig+0xe8>)
34183bc4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34183bc8:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC2Selection.ClockSelection = cfgr_value & RCC_IC2CFGR_IC2SEL;
34183bca:	68fb      	ldr	r3, [r7, #12]
34183bcc:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34183bd0:	687b      	ldr	r3, [r7, #4]
34183bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  pRCC_ClkInitStruct->IC2Selection.ClockDivider = ((cfgr_value & RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1U;
34183bd4:	68fb      	ldr	r3, [r7, #12]
34183bd6:	0c1b      	lsrs	r3, r3, #16
34183bd8:	b2db      	uxtb	r3, r3
34183bda:	1c5a      	adds	r2, r3, #1
34183bdc:	687b      	ldr	r3, [r7, #4]
34183bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the IC6 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC6CFGR;
34183be0:	4b11      	ldr	r3, [pc, #68]	@ (34183c28 <HAL_RCC_GetClockConfig+0xe8>)
34183be2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34183be6:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC6Selection.ClockSelection = cfgr_value & RCC_IC6CFGR_IC6SEL;
34183be8:	68fb      	ldr	r3, [r7, #12]
34183bea:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34183bee:	687b      	ldr	r3, [r7, #4]
34183bf0:	631a      	str	r2, [r3, #48]	@ 0x30
  pRCC_ClkInitStruct->IC6Selection.ClockDivider = ((cfgr_value & RCC_IC6CFGR_IC6INT) >> RCC_IC6CFGR_IC6INT_Pos) + 1U;
34183bf2:	68fb      	ldr	r3, [r7, #12]
34183bf4:	0c1b      	lsrs	r3, r3, #16
34183bf6:	b2db      	uxtb	r3, r3
34183bf8:	1c5a      	adds	r2, r3, #1
34183bfa:	687b      	ldr	r3, [r7, #4]
34183bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the IC11 configuration ----------------------------------------------*/
  cfgr_value = RCC->IC11CFGR;
34183bfe:	4b0a      	ldr	r3, [pc, #40]	@ (34183c28 <HAL_RCC_GetClockConfig+0xe8>)
34183c00:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34183c04:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC11Selection.ClockSelection = cfgr_value & RCC_IC11CFGR_IC11SEL;
34183c06:	68fb      	ldr	r3, [r7, #12]
34183c08:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34183c0c:	687b      	ldr	r3, [r7, #4]
34183c0e:	639a      	str	r2, [r3, #56]	@ 0x38
  pRCC_ClkInitStruct->IC11Selection.ClockDivider = ((cfgr_value & RCC_IC11CFGR_IC11INT) >> RCC_IC11CFGR_IC11INT_Pos) + 1U;
34183c10:	68fb      	ldr	r3, [r7, #12]
34183c12:	0c1b      	lsrs	r3, r3, #16
34183c14:	b2db      	uxtb	r3, r3
34183c16:	1c5a      	adds	r2, r3, #1
34183c18:	687b      	ldr	r3, [r7, #4]
34183c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
34183c1c:	bf00      	nop
34183c1e:	3714      	adds	r7, #20
34183c20:	46bd      	mov	sp, r7
34183c22:	f85d 7b04 	ldr.w	r7, [sp], #4
34183c26:	4770      	bx	lr
34183c28:	56028000 	.word	0x56028000

34183c2c <RCC_GetSysClockFreq>:
  * @param  icx_divider The intermediate clock divider
  *
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreq(uint32_t icx_source, uint32_t icx_divider)
{
34183c2c:	b580      	push	{r7, lr}
34183c2e:	b084      	sub	sp, #16
34183c30:	af00      	add	r7, sp, #0
34183c32:	6078      	str	r0, [r7, #4]
34183c34:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
34183c36:	2300      	movs	r3, #0
34183c38:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
34183c3a:	f7fe ffc1 	bl	34182bc0 <LL_RCC_GetSysClkSource>
34183c3e:	4603      	mov	r3, r0
34183c40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183c44:	d026      	beq.n	34183c94 <RCC_GetSysClockFreq+0x68>
34183c46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183c4a:	d861      	bhi.n	34183d10 <RCC_GetSysClockFreq+0xe4>
34183c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183c50:	d01d      	beq.n	34183c8e <RCC_GetSysClockFreq+0x62>
34183c52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183c56:	d85b      	bhi.n	34183d10 <RCC_GetSysClockFreq+0xe4>
34183c58:	2b00      	cmp	r3, #0
34183c5a:	d003      	beq.n	34183c64 <RCC_GetSysClockFreq+0x38>
34183c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183c60:	d009      	beq.n	34183c76 <RCC_GetSysClockFreq+0x4a>
      }
      break;

    default:
      /* Unexpected case */
      break;
34183c62:	e055      	b.n	34183d10 <RCC_GetSysClockFreq+0xe4>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34183c64:	f7fe fee2 	bl	34182a2c <LL_RCC_HSI_GetDivider>
34183c68:	4603      	mov	r3, r0
34183c6a:	09db      	lsrs	r3, r3, #7
34183c6c:	4a2b      	ldr	r2, [pc, #172]	@ (34183d1c <RCC_GetSysClockFreq+0xf0>)
34183c6e:	fa22 f303 	lsr.w	r3, r2, r3
34183c72:	60fb      	str	r3, [r7, #12]
      break;
34183c74:	e04d      	b.n	34183d12 <RCC_GetSysClockFreq+0xe6>
      frequency = RCC_GET_MSI_FREQUENCY();
34183c76:	4b2a      	ldr	r3, [pc, #168]	@ (34183d20 <RCC_GetSysClockFreq+0xf4>)
34183c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34183c7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34183c7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34183c82:	d101      	bne.n	34183c88 <RCC_GetSysClockFreq+0x5c>
34183c84:	4b27      	ldr	r3, [pc, #156]	@ (34183d24 <RCC_GetSysClockFreq+0xf8>)
34183c86:	e000      	b.n	34183c8a <RCC_GetSysClockFreq+0x5e>
34183c88:	4b27      	ldr	r3, [pc, #156]	@ (34183d28 <RCC_GetSysClockFreq+0xfc>)
34183c8a:	60fb      	str	r3, [r7, #12]
      break;
34183c8c:	e041      	b.n	34183d12 <RCC_GetSysClockFreq+0xe6>
      frequency = HSE_VALUE;
34183c8e:	4b27      	ldr	r3, [pc, #156]	@ (34183d2c <RCC_GetSysClockFreq+0x100>)
34183c90:	60fb      	str	r3, [r7, #12]
      break;
34183c92:	e03e      	b.n	34183d12 <RCC_GetSysClockFreq+0xe6>
      switch (icx_source)
34183c94:	687b      	ldr	r3, [r7, #4]
34183c96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183c9a:	d02e      	beq.n	34183cfa <RCC_GetSysClockFreq+0xce>
34183c9c:	687b      	ldr	r3, [r7, #4]
34183c9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183ca2:	d833      	bhi.n	34183d0c <RCC_GetSysClockFreq+0xe0>
34183ca4:	687b      	ldr	r3, [r7, #4]
34183ca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183caa:	d01d      	beq.n	34183ce8 <RCC_GetSysClockFreq+0xbc>
34183cac:	687b      	ldr	r3, [r7, #4]
34183cae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183cb2:	d82b      	bhi.n	34183d0c <RCC_GetSysClockFreq+0xe0>
34183cb4:	687b      	ldr	r3, [r7, #4]
34183cb6:	2b00      	cmp	r3, #0
34183cb8:	d004      	beq.n	34183cc4 <RCC_GetSysClockFreq+0x98>
34183cba:	687b      	ldr	r3, [r7, #4]
34183cbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183cc0:	d009      	beq.n	34183cd6 <RCC_GetSysClockFreq+0xaa>
          break;
34183cc2:	e023      	b.n	34183d0c <RCC_GetSysClockFreq+0xe0>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34183cc4:	f004 fdb8 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34183cc8:	60f8      	str	r0, [r7, #12]
          frequency = frequency / icx_divider;
34183cca:	68fa      	ldr	r2, [r7, #12]
34183ccc:	683b      	ldr	r3, [r7, #0]
34183cce:	fbb2 f3f3 	udiv	r3, r2, r3
34183cd2:	60fb      	str	r3, [r7, #12]
          break;
34183cd4:	e01b      	b.n	34183d0e <RCC_GetSysClockFreq+0xe2>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34183cd6:	f004 fdf5 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34183cda:	60f8      	str	r0, [r7, #12]
          frequency = frequency / icx_divider;
34183cdc:	68fa      	ldr	r2, [r7, #12]
34183cde:	683b      	ldr	r3, [r7, #0]
34183ce0:	fbb2 f3f3 	udiv	r3, r2, r3
34183ce4:	60fb      	str	r3, [r7, #12]
          break;
34183ce6:	e012      	b.n	34183d0e <RCC_GetSysClockFreq+0xe2>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34183ce8:	f004 fe32 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34183cec:	60f8      	str	r0, [r7, #12]
          frequency = frequency / icx_divider;
34183cee:	68fa      	ldr	r2, [r7, #12]
34183cf0:	683b      	ldr	r3, [r7, #0]
34183cf2:	fbb2 f3f3 	udiv	r3, r2, r3
34183cf6:	60fb      	str	r3, [r7, #12]
          break;
34183cf8:	e009      	b.n	34183d0e <RCC_GetSysClockFreq+0xe2>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34183cfa:	f004 fe6f 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34183cfe:	60f8      	str	r0, [r7, #12]
          frequency = frequency / icx_divider;
34183d00:	68fa      	ldr	r2, [r7, #12]
34183d02:	683b      	ldr	r3, [r7, #0]
34183d04:	fbb2 f3f3 	udiv	r3, r2, r3
34183d08:	60fb      	str	r3, [r7, #12]
          break;
34183d0a:	e000      	b.n	34183d0e <RCC_GetSysClockFreq+0xe2>
          break;
34183d0c:	bf00      	nop
      break;
34183d0e:	e000      	b.n	34183d12 <RCC_GetSysClockFreq+0xe6>
      break;
34183d10:	bf00      	nop
  }

  return frequency;
34183d12:	68fb      	ldr	r3, [r7, #12]
}
34183d14:	4618      	mov	r0, r3
34183d16:	3710      	adds	r7, #16
34183d18:	46bd      	mov	sp, r7
34183d1a:	bd80      	pop	{r7, pc}
34183d1c:	03d09000 	.word	0x03d09000
34183d20:	56028000 	.word	0x56028000
34183d24:	00f42400 	.word	0x00f42400
34183d28:	003d0900 	.word	0x003d0900
34183d2c:	02dc6c00 	.word	0x02dc6c00

34183d30 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34183d30:	b580      	push	{r7, lr}
34183d32:	b088      	sub	sp, #32
34183d34:	af00      	add	r7, sp, #0
34183d36:	6078      	str	r0, [r7, #4]
34183d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
34183d3a:	2300      	movs	r3, #0
34183d3c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34183d3e:	687b      	ldr	r3, [r7, #4]
34183d40:	011a      	lsls	r2, r3, #4
34183d42:	4b8e      	ldr	r3, [pc, #568]	@ (34183f7c <RCC_PLL_Config+0x24c>)
34183d44:	4413      	add	r3, r2
34183d46:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34183d48:	687b      	ldr	r3, [r7, #4]
34183d4a:	011a      	lsls	r2, r3, #4
34183d4c:	4b8c      	ldr	r3, [pc, #560]	@ (34183f80 <RCC_PLL_Config+0x250>)
34183d4e:	4413      	add	r3, r2
34183d50:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34183d52:	687b      	ldr	r3, [r7, #4]
34183d54:	011a      	lsls	r2, r3, #4
34183d56:	4b8b      	ldr	r3, [pc, #556]	@ (34183f84 <RCC_PLL_Config+0x254>)
34183d58:	4413      	add	r3, r2
34183d5a:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
34183d5c:	683b      	ldr	r3, [r7, #0]
34183d5e:	681b      	ldr	r3, [r3, #0]
34183d60:	2b02      	cmp	r3, #2
34183d62:	f040 8091 	bne.w	34183e88 <RCC_PLL_Config+0x158>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34183d66:	4a88      	ldr	r2, [pc, #544]	@ (34183f88 <RCC_PLL_Config+0x258>)
34183d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183d6c:	687b      	ldr	r3, [r7, #4]
34183d6e:	fa01 f303 	lsl.w	r3, r1, r3
34183d72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34183d76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34183d78:	f7fe f83c 	bl	34181df4 <HAL_GetTick>
34183d7c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183d7e:	e008      	b.n	34183d92 <RCC_PLL_Config+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34183d80:	f7fe f838 	bl	34181df4 <HAL_GetTick>
34183d84:	4602      	mov	r2, r0
34183d86:	68fb      	ldr	r3, [r7, #12]
34183d88:	1ad3      	subs	r3, r2, r3
34183d8a:	2b01      	cmp	r3, #1
34183d8c:	d901      	bls.n	34183d92 <RCC_PLL_Config+0x62>
      {
        return HAL_TIMEOUT;
34183d8e:	2303      	movs	r3, #3
34183d90:	e0f0      	b.n	34183f74 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183d92:	4b7d      	ldr	r3, [pc, #500]	@ (34183f88 <RCC_PLL_Config+0x258>)
34183d94:	685a      	ldr	r2, [r3, #4]
34183d96:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183d9a:	687b      	ldr	r3, [r7, #4]
34183d9c:	fa01 f303 	lsl.w	r3, r1, r3
34183da0:	401a      	ands	r2, r3
34183da2:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183da6:	687b      	ldr	r3, [r7, #4]
34183da8:	fa01 f303 	lsl.w	r3, r1, r3
34183dac:	429a      	cmp	r2, r3
34183dae:	d0e7      	beq.n	34183d80 <RCC_PLL_Config+0x50>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34183db0:	693b      	ldr	r3, [r7, #16]
34183db2:	681b      	ldr	r3, [r3, #0]
34183db4:	f043 0204 	orr.w	r2, r3, #4
34183db8:	693b      	ldr	r3, [r7, #16]
34183dba:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34183dbc:	69bb      	ldr	r3, [r7, #24]
34183dbe:	681b      	ldr	r3, [r3, #0]
34183dc0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34183dc4:	69bb      	ldr	r3, [r7, #24]
34183dc6:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34183dc8:	69bb      	ldr	r3, [r7, #24]
34183dca:	681a      	ldr	r2, [r3, #0]
34183dcc:	4b6f      	ldr	r3, [pc, #444]	@ (34183f8c <RCC_PLL_Config+0x25c>)
34183dce:	4013      	ands	r3, r2
34183dd0:	683a      	ldr	r2, [r7, #0]
34183dd2:	6851      	ldr	r1, [r2, #4]
34183dd4:	683a      	ldr	r2, [r7, #0]
34183dd6:	6892      	ldr	r2, [r2, #8]
34183dd8:	0512      	lsls	r2, r2, #20
34183dda:	4311      	orrs	r1, r2
34183ddc:	683a      	ldr	r2, [r7, #0]
34183dde:	6912      	ldr	r2, [r2, #16]
34183de0:	0212      	lsls	r2, r2, #8
34183de2:	430a      	orrs	r2, r1
34183de4:	431a      	orrs	r2, r3
34183de6:	69bb      	ldr	r3, [r7, #24]
34183de8:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34183dea:	693b      	ldr	r3, [r7, #16]
34183dec:	681b      	ldr	r3, [r3, #0]
34183dee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34183df2:	683b      	ldr	r3, [r7, #0]
34183df4:	695b      	ldr	r3, [r3, #20]
34183df6:	06d9      	lsls	r1, r3, #27
34183df8:	683b      	ldr	r3, [r7, #0]
34183dfa:	699b      	ldr	r3, [r3, #24]
34183dfc:	061b      	lsls	r3, r3, #24
34183dfe:	430b      	orrs	r3, r1
34183e00:	431a      	orrs	r2, r3
34183e02:	693b      	ldr	r3, [r7, #16]
34183e04:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34183e06:	697b      	ldr	r3, [r7, #20]
34183e08:	681b      	ldr	r3, [r3, #0]
34183e0a:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
34183e0e:	683b      	ldr	r3, [r7, #0]
34183e10:	68db      	ldr	r3, [r3, #12]
34183e12:	431a      	orrs	r2, r3
34183e14:	697b      	ldr	r3, [r7, #20]
34183e16:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34183e18:	693b      	ldr	r3, [r7, #16]
34183e1a:	681b      	ldr	r3, [r3, #0]
34183e1c:	f023 0208 	bic.w	r2, r3, #8
34183e20:	693b      	ldr	r3, [r7, #16]
34183e22:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
34183e24:	683b      	ldr	r3, [r7, #0]
34183e26:	68db      	ldr	r3, [r3, #12]
34183e28:	2b00      	cmp	r3, #0
34183e2a:	d005      	beq.n	34183e38 <RCC_PLL_Config+0x108>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34183e2c:	693b      	ldr	r3, [r7, #16]
34183e2e:	681b      	ldr	r3, [r3, #0]
34183e30:	f043 020a 	orr.w	r2, r3, #10
34183e34:	693b      	ldr	r3, [r7, #16]
34183e36:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34183e38:	693b      	ldr	r3, [r7, #16]
34183e3a:	681b      	ldr	r3, [r3, #0]
34183e3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34183e40:	f043 0301 	orr.w	r3, r3, #1
34183e44:	693a      	ldr	r2, [r7, #16]
34183e46:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34183e48:	4a4f      	ldr	r2, [pc, #316]	@ (34183f88 <RCC_PLL_Config+0x258>)
34183e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183e4e:	687b      	ldr	r3, [r7, #4]
34183e50:	fa01 f303 	lsl.w	r3, r1, r3
34183e54:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34183e58:	f7fd ffcc 	bl	34181df4 <HAL_GetTick>
34183e5c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34183e5e:	e008      	b.n	34183e72 <RCC_PLL_Config+0x142>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34183e60:	f7fd ffc8 	bl	34181df4 <HAL_GetTick>
34183e64:	4602      	mov	r2, r0
34183e66:	68fb      	ldr	r3, [r7, #12]
34183e68:	1ad3      	subs	r3, r2, r3
34183e6a:	2b01      	cmp	r3, #1
34183e6c:	d901      	bls.n	34183e72 <RCC_PLL_Config+0x142>
      {
        return HAL_TIMEOUT;
34183e6e:	2303      	movs	r3, #3
34183e70:	e080      	b.n	34183f74 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34183e72:	4b45      	ldr	r3, [pc, #276]	@ (34183f88 <RCC_PLL_Config+0x258>)
34183e74:	685a      	ldr	r2, [r3, #4]
34183e76:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183e7a:	687b      	ldr	r3, [r7, #4]
34183e7c:	fa01 f303 	lsl.w	r3, r1, r3
34183e80:	4013      	ands	r3, r2
34183e82:	2b00      	cmp	r3, #0
34183e84:	d0ec      	beq.n	34183e60 <RCC_PLL_Config+0x130>
34183e86:	e074      	b.n	34183f72 <RCC_PLL_Config+0x242>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34183e88:	683b      	ldr	r3, [r7, #0]
34183e8a:	681b      	ldr	r3, [r3, #0]
34183e8c:	2b03      	cmp	r3, #3
34183e8e:	d13b      	bne.n	34183f08 <RCC_PLL_Config+0x1d8>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34183e90:	683b      	ldr	r3, [r7, #0]
34183e92:	685b      	ldr	r3, [r3, #4]
34183e94:	4618      	mov	r0, r3
34183e96:	f000 f921 	bl	341840dc <RCC_PLL_Source_IsReady>
34183e9a:	4603      	mov	r3, r0
34183e9c:	2b01      	cmp	r3, #1
34183e9e:	d130      	bne.n	34183f02 <RCC_PLL_Config+0x1d2>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34183ea0:	4a39      	ldr	r2, [pc, #228]	@ (34183f88 <RCC_PLL_Config+0x258>)
34183ea2:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183ea6:	687b      	ldr	r3, [r7, #4]
34183ea8:	fa01 f303 	lsl.w	r3, r1, r3
34183eac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34183eb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34183eb2:	f7fd ff9f 	bl	34181df4 <HAL_GetTick>
34183eb6:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183eb8:	e008      	b.n	34183ecc <RCC_PLL_Config+0x19c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34183eba:	f7fd ff9b 	bl	34181df4 <HAL_GetTick>
34183ebe:	4602      	mov	r2, r0
34183ec0:	68fb      	ldr	r3, [r7, #12]
34183ec2:	1ad3      	subs	r3, r2, r3
34183ec4:	2b01      	cmp	r3, #1
34183ec6:	d901      	bls.n	34183ecc <RCC_PLL_Config+0x19c>
        {
          return HAL_TIMEOUT;
34183ec8:	2303      	movs	r3, #3
34183eca:	e053      	b.n	34183f74 <RCC_PLL_Config+0x244>
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183ecc:	4b2e      	ldr	r3, [pc, #184]	@ (34183f88 <RCC_PLL_Config+0x258>)
34183ece:	685a      	ldr	r2, [r3, #4]
34183ed0:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183ed4:	687b      	ldr	r3, [r7, #4]
34183ed6:	fa01 f303 	lsl.w	r3, r1, r3
34183eda:	401a      	ands	r2, r3
34183edc:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183ee0:	687b      	ldr	r3, [r7, #4]
34183ee2:	fa01 f303 	lsl.w	r3, r1, r3
34183ee6:	429a      	cmp	r2, r3
34183ee8:	d0e7      	beq.n	34183eba <RCC_PLL_Config+0x18a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34183eea:	69bb      	ldr	r3, [r7, #24]
34183eec:	681b      	ldr	r3, [r3, #0]
34183eee:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
34183ef2:	683b      	ldr	r3, [r7, #0]
34183ef4:	685b      	ldr	r3, [r3, #4]
34183ef6:	4313      	orrs	r3, r2
34183ef8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34183efc:	69bb      	ldr	r3, [r7, #24]
34183efe:	601a      	str	r2, [r3, #0]
34183f00:	e037      	b.n	34183f72 <RCC_PLL_Config+0x242>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
34183f02:	2301      	movs	r3, #1
34183f04:	77fb      	strb	r3, [r7, #31]
34183f06:	e034      	b.n	34183f72 <RCC_PLL_Config+0x242>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34183f08:	683b      	ldr	r3, [r7, #0]
34183f0a:	681b      	ldr	r3, [r3, #0]
34183f0c:	2b01      	cmp	r3, #1
34183f0e:	d130      	bne.n	34183f72 <RCC_PLL_Config+0x242>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34183f10:	693b      	ldr	r3, [r7, #16]
34183f12:	681b      	ldr	r3, [r3, #0]
34183f14:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34183f18:	693b      	ldr	r3, [r7, #16]
34183f1a:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34183f1c:	4a1a      	ldr	r2, [pc, #104]	@ (34183f88 <RCC_PLL_Config+0x258>)
34183f1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183f22:	687b      	ldr	r3, [r7, #4]
34183f24:	fa01 f303 	lsl.w	r3, r1, r3
34183f28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34183f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34183f2e:	f7fd ff61 	bl	34181df4 <HAL_GetTick>
34183f32:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183f34:	e008      	b.n	34183f48 <RCC_PLL_Config+0x218>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34183f36:	f7fd ff5d 	bl	34181df4 <HAL_GetTick>
34183f3a:	4602      	mov	r2, r0
34183f3c:	68fb      	ldr	r3, [r7, #12]
34183f3e:	1ad3      	subs	r3, r2, r3
34183f40:	2b01      	cmp	r3, #1
34183f42:	d901      	bls.n	34183f48 <RCC_PLL_Config+0x218>
      {
        return HAL_TIMEOUT;
34183f44:	2303      	movs	r3, #3
34183f46:	e015      	b.n	34183f74 <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183f48:	4b0f      	ldr	r3, [pc, #60]	@ (34183f88 <RCC_PLL_Config+0x258>)
34183f4a:	685a      	ldr	r2, [r3, #4]
34183f4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183f50:	687b      	ldr	r3, [r7, #4]
34183f52:	fa01 f303 	lsl.w	r3, r1, r3
34183f56:	401a      	ands	r2, r3
34183f58:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183f5c:	687b      	ldr	r3, [r7, #4]
34183f5e:	fa01 f303 	lsl.w	r3, r1, r3
34183f62:	429a      	cmp	r2, r3
34183f64:	d0e7      	beq.n	34183f36 <RCC_PLL_Config+0x206>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34183f66:	69bb      	ldr	r3, [r7, #24]
34183f68:	681b      	ldr	r3, [r3, #0]
34183f6a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34183f6e:	69bb      	ldr	r3, [r7, #24]
34183f70:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
34183f72:	7ffb      	ldrb	r3, [r7, #31]
}
34183f74:	4618      	mov	r0, r3
34183f76:	3720      	adds	r7, #32
34183f78:	46bd      	mov	sp, r7
34183f7a:	bd80      	pop	{r7, pc}
34183f7c:	56028080 	.word	0x56028080
34183f80:	56028084 	.word	0x56028084
34183f84:	56028088 	.word	0x56028088
34183f88:	56028000 	.word	0x56028000
34183f8c:	8c0000ff 	.word	0x8c0000ff

34183f90 <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
34183f90:	b580      	push	{r7, lr}
34183f92:	b084      	sub	sp, #16
34183f94:	af00      	add	r7, sp, #0
34183f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
34183f98:	2300      	movs	r3, #0
34183f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34183f9c:	4a11      	ldr	r2, [pc, #68]	@ (34183fe4 <RCC_PLL_Enable+0x54>)
34183f9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183fa2:	687b      	ldr	r3, [r7, #4]
34183fa4:	fa01 f303 	lsl.w	r3, r1, r3
34183fa8:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
34183fac:	f7fd ff22 	bl	34181df4 <HAL_GetTick>
34183fb0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34183fb2:	e008      	b.n	34183fc6 <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34183fb4:	f7fd ff1e 	bl	34181df4 <HAL_GetTick>
34183fb8:	4602      	mov	r2, r0
34183fba:	68bb      	ldr	r3, [r7, #8]
34183fbc:	1ad3      	subs	r3, r2, r3
34183fbe:	2b01      	cmp	r3, #1
34183fc0:	d901      	bls.n	34183fc6 <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
34183fc2:	2303      	movs	r3, #3
34183fc4:	e00a      	b.n	34183fdc <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34183fc6:	4b07      	ldr	r3, [pc, #28]	@ (34183fe4 <RCC_PLL_Enable+0x54>)
34183fc8:	685a      	ldr	r2, [r3, #4]
34183fca:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183fce:	687b      	ldr	r3, [r7, #4]
34183fd0:	fa01 f303 	lsl.w	r3, r1, r3
34183fd4:	4013      	ands	r3, r2
34183fd6:	2b00      	cmp	r3, #0
34183fd8:	d0ec      	beq.n	34183fb4 <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
34183fda:	7bfb      	ldrb	r3, [r7, #15]
}
34183fdc:	4618      	mov	r0, r3
34183fde:	3710      	adds	r7, #16
34183fe0:	46bd      	mov	sp, r7
34183fe2:	bd80      	pop	{r7, pc}
34183fe4:	56028000 	.word	0x56028000

34183fe8 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34183fe8:	b480      	push	{r7}
34183fea:	b089      	sub	sp, #36	@ 0x24
34183fec:	af00      	add	r7, sp, #0
34183fee:	6078      	str	r0, [r7, #4]
34183ff0:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
34183ff2:	2300      	movs	r3, #0
34183ff4:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34183ff6:	687b      	ldr	r3, [r7, #4]
34183ff8:	011a      	lsls	r2, r3, #4
34183ffa:	4b34      	ldr	r3, [pc, #208]	@ (341840cc <RCC_PLL_IsNewConfig+0xe4>)
34183ffc:	4413      	add	r3, r2
34183ffe:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34184000:	687b      	ldr	r3, [r7, #4]
34184002:	011a      	lsls	r2, r3, #4
34184004:	4b32      	ldr	r3, [pc, #200]	@ (341840d0 <RCC_PLL_IsNewConfig+0xe8>)
34184006:	4413      	add	r3, r2
34184008:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3418400a:	687b      	ldr	r3, [r7, #4]
3418400c:	011a      	lsls	r2, r3, #4
3418400e:	4b31      	ldr	r3, [pc, #196]	@ (341840d4 <RCC_PLL_IsNewConfig+0xec>)
34184010:	4413      	add	r3, r2
34184012:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34184014:	697b      	ldr	r3, [r7, #20]
34184016:	681b      	ldr	r3, [r3, #0]
34184018:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
3418401c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34184020:	683a      	ldr	r2, [r7, #0]
34184022:	6851      	ldr	r1, [r2, #4]
34184024:	683a      	ldr	r2, [r7, #0]
34184026:	6892      	ldr	r2, [r2, #8]
34184028:	0512      	lsls	r2, r2, #20
3418402a:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
3418402c:	683a      	ldr	r2, [r7, #0]
3418402e:	6912      	ldr	r2, [r2, #16]
34184030:	0212      	lsls	r2, r2, #8
34184032:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34184034:	4293      	cmp	r3, r2
34184036:	d002      	beq.n	3418403e <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
34184038:	2301      	movs	r3, #1
3418403a:	61fb      	str	r3, [r7, #28]
3418403c:	e03e      	b.n	341840bc <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
3418403e:	693b      	ldr	r3, [r7, #16]
34184040:	681b      	ldr	r3, [r3, #0]
34184042:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
34184046:	683b      	ldr	r3, [r7, #0]
34184048:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
3418404a:	429a      	cmp	r2, r3
3418404c:	d002      	beq.n	34184054 <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
3418404e:	2301      	movs	r3, #1
34184050:	61fb      	str	r3, [r7, #28]
34184052:	e033      	b.n	341840bc <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34184054:	68fb      	ldr	r3, [r7, #12]
34184056:	681b      	ldr	r3, [r3, #0]
34184058:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
3418405c:	683b      	ldr	r3, [r7, #0]
3418405e:	695b      	ldr	r3, [r3, #20]
34184060:	06d9      	lsls	r1, r3, #27
34184062:	683b      	ldr	r3, [r7, #0]
34184064:	699b      	ldr	r3, [r3, #24]
34184066:	061b      	lsls	r3, r3, #24
34184068:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3418406a:	429a      	cmp	r2, r3
3418406c:	d002      	beq.n	34184074 <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
3418406e:	2301      	movs	r3, #1
34184070:	61fb      	str	r3, [r7, #28]
34184072:	e023      	b.n	341840bc <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34184074:	4b18      	ldr	r3, [pc, #96]	@ (341840d8 <RCC_PLL_IsNewConfig+0xf0>)
34184076:	685a      	ldr	r2, [r3, #4]
34184078:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418407c:	687b      	ldr	r3, [r7, #4]
3418407e:	fa01 f303 	lsl.w	r3, r1, r3
34184082:	401a      	ands	r2, r3
34184084:	f44f 7180 	mov.w	r1, #256	@ 0x100
34184088:	687b      	ldr	r3, [r7, #4]
3418408a:	fa01 f303 	lsl.w	r3, r1, r3
3418408e:	429a      	cmp	r2, r3
34184090:	d102      	bne.n	34184098 <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
34184092:	2302      	movs	r3, #2
34184094:	61bb      	str	r3, [r7, #24]
34184096:	e00a      	b.n	341840ae <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34184098:	697b      	ldr	r3, [r7, #20]
3418409a:	681b      	ldr	r3, [r3, #0]
3418409c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341840a0:	2b00      	cmp	r3, #0
341840a2:	d002      	beq.n	341840aa <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
341840a4:	2303      	movs	r3, #3
341840a6:	61bb      	str	r3, [r7, #24]
341840a8:	e001      	b.n	341840ae <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
341840aa:	2301      	movs	r3, #1
341840ac:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
341840ae:	683b      	ldr	r3, [r7, #0]
341840b0:	681b      	ldr	r3, [r3, #0]
341840b2:	69ba      	ldr	r2, [r7, #24]
341840b4:	429a      	cmp	r2, r3
341840b6:	d001      	beq.n	341840bc <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
341840b8:	2301      	movs	r3, #1
341840ba:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
341840bc:	69fb      	ldr	r3, [r7, #28]
}
341840be:	4618      	mov	r0, r3
341840c0:	3724      	adds	r7, #36	@ 0x24
341840c2:	46bd      	mov	sp, r7
341840c4:	f85d 7b04 	ldr.w	r7, [sp], #4
341840c8:	4770      	bx	lr
341840ca:	bf00      	nop
341840cc:	56028080 	.word	0x56028080
341840d0:	56028084 	.word	0x56028084
341840d4:	56028088 	.word	0x56028088
341840d8:	56028000 	.word	0x56028000

341840dc <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
341840dc:	b580      	push	{r7, lr}
341840de:	b084      	sub	sp, #16
341840e0:	af00      	add	r7, sp, #0
341840e2:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
341840e4:	2301      	movs	r3, #1
341840e6:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
341840e8:	687b      	ldr	r3, [r7, #4]
341840ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341840ee:	d01b      	beq.n	34184128 <RCC_PLL_Source_IsReady+0x4c>
341840f0:	687b      	ldr	r3, [r7, #4]
341840f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341840f6:	d81f      	bhi.n	34184138 <RCC_PLL_Source_IsReady+0x5c>
341840f8:	687b      	ldr	r3, [r7, #4]
341840fa:	2b00      	cmp	r3, #0
341840fc:	d004      	beq.n	34184108 <RCC_PLL_Source_IsReady+0x2c>
341840fe:	687b      	ldr	r3, [r7, #4]
34184100:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34184104:	d008      	beq.n	34184118 <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
34184106:	e017      	b.n	34184138 <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
34184108:	f7fe fc6a 	bl	341829e0 <LL_RCC_HSI_IsReady>
3418410c:	4603      	mov	r3, r0
3418410e:	2b00      	cmp	r3, #0
34184110:	d114      	bne.n	3418413c <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
34184112:	2300      	movs	r3, #0
34184114:	60fb      	str	r3, [r7, #12]
      break;
34184116:	e011      	b.n	3418413c <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
34184118:	f7fe fcca 	bl	34182ab0 <LL_RCC_MSI_IsReady>
3418411c:	4603      	mov	r3, r0
3418411e:	2b00      	cmp	r3, #0
34184120:	d10e      	bne.n	34184140 <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
34184122:	2300      	movs	r3, #0
34184124:	60fb      	str	r3, [r7, #12]
      break;
34184126:	e00b      	b.n	34184140 <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
34184128:	f7fe fc2a 	bl	34182980 <LL_RCC_HSE_IsReady>
3418412c:	4603      	mov	r3, r0
3418412e:	2b00      	cmp	r3, #0
34184130:	d108      	bne.n	34184144 <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
34184132:	2300      	movs	r3, #0
34184134:	60fb      	str	r3, [r7, #12]
      break;
34184136:	e005      	b.n	34184144 <RCC_PLL_Source_IsReady+0x68>
      break;
34184138:	bf00      	nop
3418413a:	e004      	b.n	34184146 <RCC_PLL_Source_IsReady+0x6a>
      break;
3418413c:	bf00      	nop
3418413e:	e002      	b.n	34184146 <RCC_PLL_Source_IsReady+0x6a>
      break;
34184140:	bf00      	nop
34184142:	e000      	b.n	34184146 <RCC_PLL_Source_IsReady+0x6a>
      break;
34184144:	bf00      	nop
  }

  return ret;
34184146:	68fb      	ldr	r3, [r7, #12]
}
34184148:	4618      	mov	r0, r3
3418414a:	3710      	adds	r7, #16
3418414c:	46bd      	mov	sp, r7
3418414e:	bd80      	pop	{r7, pc}

34184150 <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
34184150:	b580      	push	{r7, lr}
34184152:	b084      	sub	sp, #16
34184154:	af00      	add	r7, sp, #0
34184156:	6078      	str	r0, [r7, #4]
34184158:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
3418415a:	2301      	movs	r3, #1
3418415c:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
3418415e:	687b      	ldr	r3, [r7, #4]
34184160:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34184164:	d03a      	beq.n	341841dc <RCC_IC_CheckPLLSources+0x8c>
34184166:	687b      	ldr	r3, [r7, #4]
34184168:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418416c:	d843      	bhi.n	341841f6 <RCC_IC_CheckPLLSources+0xa6>
3418416e:	687b      	ldr	r3, [r7, #4]
34184170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34184174:	d025      	beq.n	341841c2 <RCC_IC_CheckPLLSources+0x72>
34184176:	687b      	ldr	r3, [r7, #4]
34184178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418417c:	d83b      	bhi.n	341841f6 <RCC_IC_CheckPLLSources+0xa6>
3418417e:	687b      	ldr	r3, [r7, #4]
34184180:	2b00      	cmp	r3, #0
34184182:	d004      	beq.n	3418418e <RCC_IC_CheckPLLSources+0x3e>
34184184:	687b      	ldr	r3, [r7, #4]
34184186:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418418a:	d00d      	beq.n	341841a8 <RCC_IC_CheckPLLSources+0x58>
3418418c:	e033      	b.n	341841f6 <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3418418e:	f7fe fd33 	bl	34182bf8 <LL_RCC_PLL1_IsReady>
34184192:	4603      	mov	r3, r0
34184194:	2b00      	cmp	r3, #0
34184196:	d131      	bne.n	341841fc <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34184198:	f7fe fd42 	bl	34182c20 <LL_RCC_PLL1_IsEnabledBypass>
3418419c:	4603      	mov	r3, r0
3418419e:	2b00      	cmp	r3, #0
341841a0:	d12c      	bne.n	341841fc <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
341841a2:	2300      	movs	r3, #0
341841a4:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341841a6:	e029      	b.n	341841fc <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
341841a8:	f7fe fd5c 	bl	34182c64 <LL_RCC_PLL2_IsReady>
341841ac:	4603      	mov	r3, r0
341841ae:	2b00      	cmp	r3, #0
341841b0:	d126      	bne.n	34184200 <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
341841b2:	f7fe fd6b 	bl	34182c8c <LL_RCC_PLL2_IsEnabledBypass>
341841b6:	4603      	mov	r3, r0
341841b8:	2b00      	cmp	r3, #0
341841ba:	d121      	bne.n	34184200 <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
341841bc:	2300      	movs	r3, #0
341841be:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341841c0:	e01e      	b.n	34184200 <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
341841c2:	f7fe fd85 	bl	34182cd0 <LL_RCC_PLL3_IsReady>
341841c6:	4603      	mov	r3, r0
341841c8:	2b00      	cmp	r3, #0
341841ca:	d11b      	bne.n	34184204 <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
341841cc:	f7fe fd94 	bl	34182cf8 <LL_RCC_PLL3_IsEnabledBypass>
341841d0:	4603      	mov	r3, r0
341841d2:	2b00      	cmp	r3, #0
341841d4:	d116      	bne.n	34184204 <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
341841d6:	2300      	movs	r3, #0
341841d8:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341841da:	e013      	b.n	34184204 <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
341841dc:	f7fe fdae 	bl	34182d3c <LL_RCC_PLL4_IsReady>
341841e0:	4603      	mov	r3, r0
341841e2:	2b00      	cmp	r3, #0
341841e4:	d110      	bne.n	34184208 <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
341841e6:	f7fe fdbd 	bl	34182d64 <LL_RCC_PLL4_IsEnabledBypass>
341841ea:	4603      	mov	r3, r0
341841ec:	2b00      	cmp	r3, #0
341841ee:	d10b      	bne.n	34184208 <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
341841f0:	2300      	movs	r3, #0
341841f2:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341841f4:	e008      	b.n	34184208 <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
341841f6:	2300      	movs	r3, #0
341841f8:	60fb      	str	r3, [r7, #12]
      break;
341841fa:	e006      	b.n	3418420a <RCC_IC_CheckPLLSources+0xba>
      break;
341841fc:	bf00      	nop
341841fe:	e004      	b.n	3418420a <RCC_IC_CheckPLLSources+0xba>
      break;
34184200:	bf00      	nop
34184202:	e002      	b.n	3418420a <RCC_IC_CheckPLLSources+0xba>
      break;
34184204:	bf00      	nop
34184206:	e000      	b.n	3418420a <RCC_IC_CheckPLLSources+0xba>
      break;
34184208:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
3418420a:	683b      	ldr	r3, [r7, #0]
3418420c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34184210:	d03a      	beq.n	34184288 <RCC_IC_CheckPLLSources+0x138>
34184212:	683b      	ldr	r3, [r7, #0]
34184214:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34184218:	d843      	bhi.n	341842a2 <RCC_IC_CheckPLLSources+0x152>
3418421a:	683b      	ldr	r3, [r7, #0]
3418421c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34184220:	d025      	beq.n	3418426e <RCC_IC_CheckPLLSources+0x11e>
34184222:	683b      	ldr	r3, [r7, #0]
34184224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34184228:	d83b      	bhi.n	341842a2 <RCC_IC_CheckPLLSources+0x152>
3418422a:	683b      	ldr	r3, [r7, #0]
3418422c:	2b00      	cmp	r3, #0
3418422e:	d004      	beq.n	3418423a <RCC_IC_CheckPLLSources+0xea>
34184230:	683b      	ldr	r3, [r7, #0]
34184232:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34184236:	d00d      	beq.n	34184254 <RCC_IC_CheckPLLSources+0x104>
34184238:	e033      	b.n	341842a2 <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3418423a:	f7fe fcdd 	bl	34182bf8 <LL_RCC_PLL1_IsReady>
3418423e:	4603      	mov	r3, r0
34184240:	2b00      	cmp	r3, #0
34184242:	d131      	bne.n	341842a8 <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34184244:	f7fe fcec 	bl	34182c20 <LL_RCC_PLL1_IsEnabledBypass>
34184248:	4603      	mov	r3, r0
3418424a:	2b00      	cmp	r3, #0
3418424c:	d12c      	bne.n	341842a8 <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
3418424e:	2300      	movs	r3, #0
34184250:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34184252:	e029      	b.n	341842a8 <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34184254:	f7fe fd06 	bl	34182c64 <LL_RCC_PLL2_IsReady>
34184258:	4603      	mov	r3, r0
3418425a:	2b00      	cmp	r3, #0
3418425c:	d126      	bne.n	341842ac <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3418425e:	f7fe fd15 	bl	34182c8c <LL_RCC_PLL2_IsEnabledBypass>
34184262:	4603      	mov	r3, r0
34184264:	2b00      	cmp	r3, #0
34184266:	d121      	bne.n	341842ac <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
34184268:	2300      	movs	r3, #0
3418426a:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418426c:	e01e      	b.n	341842ac <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3418426e:	f7fe fd2f 	bl	34182cd0 <LL_RCC_PLL3_IsReady>
34184272:	4603      	mov	r3, r0
34184274:	2b00      	cmp	r3, #0
34184276:	d11b      	bne.n	341842b0 <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34184278:	f7fe fd3e 	bl	34182cf8 <LL_RCC_PLL3_IsEnabledBypass>
3418427c:	4603      	mov	r3, r0
3418427e:	2b00      	cmp	r3, #0
34184280:	d116      	bne.n	341842b0 <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
34184282:	2300      	movs	r3, #0
34184284:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34184286:	e013      	b.n	341842b0 <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34184288:	f7fe fd58 	bl	34182d3c <LL_RCC_PLL4_IsReady>
3418428c:	4603      	mov	r3, r0
3418428e:	2b00      	cmp	r3, #0
34184290:	d110      	bne.n	341842b4 <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
34184292:	f7fe fd67 	bl	34182d64 <LL_RCC_PLL4_IsEnabledBypass>
34184296:	4603      	mov	r3, r0
34184298:	2b00      	cmp	r3, #0
3418429a:	d10b      	bne.n	341842b4 <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
3418429c:	2300      	movs	r3, #0
3418429e:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341842a0:	e008      	b.n	341842b4 <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
341842a2:	2300      	movs	r3, #0
341842a4:	60fb      	str	r3, [r7, #12]
      break;
341842a6:	e006      	b.n	341842b6 <RCC_IC_CheckPLLSources+0x166>
      break;
341842a8:	bf00      	nop
341842aa:	e004      	b.n	341842b6 <RCC_IC_CheckPLLSources+0x166>
      break;
341842ac:	bf00      	nop
341842ae:	e002      	b.n	341842b6 <RCC_IC_CheckPLLSources+0x166>
      break;
341842b0:	bf00      	nop
341842b2:	e000      	b.n	341842b6 <RCC_IC_CheckPLLSources+0x166>
      break;
341842b4:	bf00      	nop
  }

  return ret;
341842b6:	68fb      	ldr	r3, [r7, #12]
}
341842b8:	4618      	mov	r0, r3
341842ba:	3710      	adds	r7, #16
341842bc:	46bd      	mov	sp, r7
341842be:	bd80      	pop	{r7, pc}

341842c0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
341842c0:	b480      	push	{r7}
341842c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
341842c4:	4b05      	ldr	r3, [pc, #20]	@ (341842dc <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
341842c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341842c8:	4a04      	ldr	r2, [pc, #16]	@ (341842dc <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
341842ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
341842ce:	6553      	str	r3, [r2, #84]	@ 0x54
}
341842d0:	bf00      	nop
341842d2:	46bd      	mov	sp, r7
341842d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341842d8:	4770      	bx	lr
341842da:	bf00      	nop
341842dc:	56028000 	.word	0x56028000

341842e0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
341842e0:	b480      	push	{r7}
341842e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
341842e4:	4b05      	ldr	r3, [pc, #20]	@ (341842fc <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
341842e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341842e8:	4a04      	ldr	r2, [pc, #16]	@ (341842fc <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
341842ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
341842ee:	6553      	str	r3, [r2, #84]	@ 0x54
}
341842f0:	bf00      	nop
341842f2:	46bd      	mov	sp, r7
341842f4:	f85d 7b04 	ldr.w	r7, [sp], #4
341842f8:	4770      	bx	lr
341842fa:	bf00      	nop
341842fc:	56028000 	.word	0x56028000

34184300 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
34184300:	b480      	push	{r7}
34184302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
34184304:	4b06      	ldr	r3, [pc, #24]	@ (34184320 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
34184306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34184308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418430c:	2b40      	cmp	r3, #64	@ 0x40
3418430e:	d101      	bne.n	34184314 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
34184310:	2301      	movs	r3, #1
34184312:	e000      	b.n	34184316 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
34184314:	2300      	movs	r3, #0
}
34184316:	4618      	mov	r0, r3
34184318:	46bd      	mov	sp, r7
3418431a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418431e:	4770      	bx	lr
34184320:	56028000 	.word	0x56028000

34184324 <LL_RCC_HSE_IsReady>:
{
34184324:	b480      	push	{r7}
34184326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34184328:	4b06      	ldr	r3, [pc, #24]	@ (34184344 <LL_RCC_HSE_IsReady+0x20>)
3418432a:	685b      	ldr	r3, [r3, #4]
3418432c:	f003 0310 	and.w	r3, r3, #16
34184330:	2b00      	cmp	r3, #0
34184332:	d001      	beq.n	34184338 <LL_RCC_HSE_IsReady+0x14>
34184334:	2301      	movs	r3, #1
34184336:	e000      	b.n	3418433a <LL_RCC_HSE_IsReady+0x16>
34184338:	2300      	movs	r3, #0
}
3418433a:	4618      	mov	r0, r3
3418433c:	46bd      	mov	sp, r7
3418433e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184342:	4770      	bx	lr
34184344:	56028000 	.word	0x56028000

34184348 <LL_RCC_HSI_IsReady>:
{
34184348:	b480      	push	{r7}
3418434a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
3418434c:	4b06      	ldr	r3, [pc, #24]	@ (34184368 <LL_RCC_HSI_IsReady+0x20>)
3418434e:	685b      	ldr	r3, [r3, #4]
34184350:	f003 0308 	and.w	r3, r3, #8
34184354:	2b00      	cmp	r3, #0
34184356:	d001      	beq.n	3418435c <LL_RCC_HSI_IsReady+0x14>
34184358:	2301      	movs	r3, #1
3418435a:	e000      	b.n	3418435e <LL_RCC_HSI_IsReady+0x16>
3418435c:	2300      	movs	r3, #0
}
3418435e:	4618      	mov	r0, r3
34184360:	46bd      	mov	sp, r7
34184362:	f85d 7b04 	ldr.w	r7, [sp], #4
34184366:	4770      	bx	lr
34184368:	56028000 	.word	0x56028000

3418436c <LL_RCC_HSI_GetDivider>:
{
3418436c:	b480      	push	{r7}
3418436e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34184370:	4b04      	ldr	r3, [pc, #16]	@ (34184384 <LL_RCC_HSI_GetDivider+0x18>)
34184372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34184374:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34184378:	4618      	mov	r0, r3
3418437a:	46bd      	mov	sp, r7
3418437c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184380:	4770      	bx	lr
34184382:	bf00      	nop
34184384:	56028000 	.word	0x56028000

34184388 <LL_RCC_MSI_IsReady>:
{
34184388:	b480      	push	{r7}
3418438a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
3418438c:	4b06      	ldr	r3, [pc, #24]	@ (341843a8 <LL_RCC_MSI_IsReady+0x20>)
3418438e:	685b      	ldr	r3, [r3, #4]
34184390:	f003 0304 	and.w	r3, r3, #4
34184394:	2b00      	cmp	r3, #0
34184396:	d001      	beq.n	3418439c <LL_RCC_MSI_IsReady+0x14>
34184398:	2301      	movs	r3, #1
3418439a:	e000      	b.n	3418439e <LL_RCC_MSI_IsReady+0x16>
3418439c:	2300      	movs	r3, #0
}
3418439e:	4618      	mov	r0, r3
341843a0:	46bd      	mov	sp, r7
341843a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341843a6:	4770      	bx	lr
341843a8:	56028000 	.word	0x56028000

341843ac <LL_RCC_MSI_GetFrequency>:
{
341843ac:	b480      	push	{r7}
341843ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
341843b0:	4b04      	ldr	r3, [pc, #16]	@ (341843c4 <LL_RCC_MSI_GetFrequency+0x18>)
341843b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341843b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
341843b8:	4618      	mov	r0, r3
341843ba:	46bd      	mov	sp, r7
341843bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341843c0:	4770      	bx	lr
341843c2:	bf00      	nop
341843c4:	56028000 	.word	0x56028000

341843c8 <LL_RCC_LSE_IsReady>:
{
341843c8:	b480      	push	{r7}
341843ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
341843cc:	4b06      	ldr	r3, [pc, #24]	@ (341843e8 <LL_RCC_LSE_IsReady+0x20>)
341843ce:	685b      	ldr	r3, [r3, #4]
341843d0:	f003 0302 	and.w	r3, r3, #2
341843d4:	2b00      	cmp	r3, #0
341843d6:	d001      	beq.n	341843dc <LL_RCC_LSE_IsReady+0x14>
341843d8:	2301      	movs	r3, #1
341843da:	e000      	b.n	341843de <LL_RCC_LSE_IsReady+0x16>
341843dc:	2300      	movs	r3, #0
}
341843de:	4618      	mov	r0, r3
341843e0:	46bd      	mov	sp, r7
341843e2:	f85d 7b04 	ldr.w	r7, [sp], #4
341843e6:	4770      	bx	lr
341843e8:	56028000 	.word	0x56028000

341843ec <LL_RCC_LSI_IsReady>:
{
341843ec:	b480      	push	{r7}
341843ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
341843f0:	4b04      	ldr	r3, [pc, #16]	@ (34184404 <LL_RCC_LSI_IsReady+0x18>)
341843f2:	685b      	ldr	r3, [r3, #4]
341843f4:	f003 0301 	and.w	r3, r3, #1
}
341843f8:	4618      	mov	r0, r3
341843fa:	46bd      	mov	sp, r7
341843fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34184400:	4770      	bx	lr
34184402:	bf00      	nop
34184404:	56028000 	.word	0x56028000

34184408 <LL_RCC_GetAHBPrescaler>:
{
34184408:	b480      	push	{r7}
3418440a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3418440c:	4b04      	ldr	r3, [pc, #16]	@ (34184420 <LL_RCC_GetAHBPrescaler+0x18>)
3418440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184410:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
34184414:	4618      	mov	r0, r3
34184416:	46bd      	mov	sp, r7
34184418:	f85d 7b04 	ldr.w	r7, [sp], #4
3418441c:	4770      	bx	lr
3418441e:	bf00      	nop
34184420:	56028000 	.word	0x56028000

34184424 <LL_RCC_GetAPB1Prescaler>:
{
34184424:	b480      	push	{r7}
34184426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34184428:	4b04      	ldr	r3, [pc, #16]	@ (3418443c <LL_RCC_GetAPB1Prescaler+0x18>)
3418442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418442c:	f003 0307 	and.w	r3, r3, #7
}
34184430:	4618      	mov	r0, r3
34184432:	46bd      	mov	sp, r7
34184434:	f85d 7b04 	ldr.w	r7, [sp], #4
34184438:	4770      	bx	lr
3418443a:	bf00      	nop
3418443c:	56028000 	.word	0x56028000

34184440 <LL_RCC_GetAPB2Prescaler>:
{
34184440:	b480      	push	{r7}
34184442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34184444:	4b04      	ldr	r3, [pc, #16]	@ (34184458 <LL_RCC_GetAPB2Prescaler+0x18>)
34184446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184448:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
3418444c:	4618      	mov	r0, r3
3418444e:	46bd      	mov	sp, r7
34184450:	f85d 7b04 	ldr.w	r7, [sp], #4
34184454:	4770      	bx	lr
34184456:	bf00      	nop
34184458:	56028000 	.word	0x56028000

3418445c <LL_RCC_GetAPB4Prescaler>:
{
3418445c:	b480      	push	{r7}
3418445e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34184460:	4b04      	ldr	r3, [pc, #16]	@ (34184474 <LL_RCC_GetAPB4Prescaler+0x18>)
34184462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184464:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
34184468:	4618      	mov	r0, r3
3418446a:	46bd      	mov	sp, r7
3418446c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184470:	4770      	bx	lr
34184472:	bf00      	nop
34184474:	56028000 	.word	0x56028000

34184478 <LL_RCC_GetAPB5Prescaler>:
{
34184478:	b480      	push	{r7}
3418447a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
3418447c:	4b04      	ldr	r3, [pc, #16]	@ (34184490 <LL_RCC_GetAPB5Prescaler+0x18>)
3418447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184480:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34184484:	4618      	mov	r0, r3
34184486:	46bd      	mov	sp, r7
34184488:	f85d 7b04 	ldr.w	r7, [sp], #4
3418448c:	4770      	bx	lr
3418448e:	bf00      	nop
34184490:	56028000 	.word	0x56028000

34184494 <LL_RCC_SetClockSource>:
{
34184494:	b480      	push	{r7}
34184496:	b085      	sub	sp, #20
34184498:	af00      	add	r7, sp, #0
3418449a:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
3418449c:	687b      	ldr	r3, [r7, #4]
3418449e:	b2da      	uxtb	r2, r3
341844a0:	4b10      	ldr	r3, [pc, #64]	@ (341844e4 <LL_RCC_SetClockSource+0x50>)
341844a2:	4413      	add	r3, r2
341844a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
341844a6:	68fb      	ldr	r3, [r7, #12]
341844a8:	681a      	ldr	r2, [r3, #0]
341844aa:	687b      	ldr	r3, [r7, #4]
341844ac:	0e19      	lsrs	r1, r3, #24
341844ae:	687b      	ldr	r3, [r7, #4]
341844b0:	0a1b      	lsrs	r3, r3, #8
341844b2:	f003 031f 	and.w	r3, r3, #31
341844b6:	fa01 f303 	lsl.w	r3, r1, r3
341844ba:	43db      	mvns	r3, r3
341844bc:	401a      	ands	r2, r3
341844be:	687b      	ldr	r3, [r7, #4]
341844c0:	0c1b      	lsrs	r3, r3, #16
341844c2:	b2d9      	uxtb	r1, r3
341844c4:	687b      	ldr	r3, [r7, #4]
341844c6:	0a1b      	lsrs	r3, r3, #8
341844c8:	f003 031f 	and.w	r3, r3, #31
341844cc:	fa01 f303 	lsl.w	r3, r1, r3
341844d0:	431a      	orrs	r2, r3
341844d2:	68fb      	ldr	r3, [r7, #12]
341844d4:	601a      	str	r2, [r3, #0]
}
341844d6:	bf00      	nop
341844d8:	3714      	adds	r7, #20
341844da:	46bd      	mov	sp, r7
341844dc:	f85d 7b04 	ldr.w	r7, [sp], #4
341844e0:	4770      	bx	lr
341844e2:	bf00      	nop
341844e4:	56028144 	.word	0x56028144

341844e8 <LL_RCC_GetADCPrescaler>:
{
341844e8:	b480      	push	{r7}
341844ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
341844ec:	4b04      	ldr	r3, [pc, #16]	@ (34184500 <LL_RCC_GetADCPrescaler+0x18>)
341844ee:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341844f2:	0a1b      	lsrs	r3, r3, #8
341844f4:	b2db      	uxtb	r3, r3
}
341844f6:	4618      	mov	r0, r3
341844f8:	46bd      	mov	sp, r7
341844fa:	f85d 7b04 	ldr.w	r7, [sp], #4
341844fe:	4770      	bx	lr
34184500:	56028000 	.word	0x56028000

34184504 <LL_RCC_SetADFClockSource>:
{
34184504:	b480      	push	{r7}
34184506:	b083      	sub	sp, #12
34184508:	af00      	add	r7, sp, #0
3418450a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
3418450c:	4b07      	ldr	r3, [pc, #28]	@ (3418452c <LL_RCC_SetADFClockSource+0x28>)
3418450e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34184512:	f023 0207 	bic.w	r2, r3, #7
34184516:	4905      	ldr	r1, [pc, #20]	@ (3418452c <LL_RCC_SetADFClockSource+0x28>)
34184518:	687b      	ldr	r3, [r7, #4]
3418451a:	4313      	orrs	r3, r2
3418451c:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34184520:	bf00      	nop
34184522:	370c      	adds	r7, #12
34184524:	46bd      	mov	sp, r7
34184526:	f85d 7b04 	ldr.w	r7, [sp], #4
3418452a:	4770      	bx	lr
3418452c:	56028000 	.word	0x56028000

34184530 <LL_RCC_SetCLKPClockSource>:
{
34184530:	b480      	push	{r7}
34184532:	b083      	sub	sp, #12
34184534:	af00      	add	r7, sp, #0
34184536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
34184538:	4b07      	ldr	r3, [pc, #28]	@ (34184558 <LL_RCC_SetCLKPClockSource+0x28>)
3418453a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418453e:	f023 0207 	bic.w	r2, r3, #7
34184542:	4905      	ldr	r1, [pc, #20]	@ (34184558 <LL_RCC_SetCLKPClockSource+0x28>)
34184544:	687b      	ldr	r3, [r7, #4]
34184546:	4313      	orrs	r3, r2
34184548:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418454c:	bf00      	nop
3418454e:	370c      	adds	r7, #12
34184550:	46bd      	mov	sp, r7
34184552:	f85d 7b04 	ldr.w	r7, [sp], #4
34184556:	4770      	bx	lr
34184558:	56028000 	.word	0x56028000

3418455c <LL_RCC_SetDCMIPPClockSource>:
{
3418455c:	b480      	push	{r7}
3418455e:	b083      	sub	sp, #12
34184560:	af00      	add	r7, sp, #0
34184562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34184564:	4b07      	ldr	r3, [pc, #28]	@ (34184584 <LL_RCC_SetDCMIPPClockSource+0x28>)
34184566:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418456a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
3418456e:	4905      	ldr	r1, [pc, #20]	@ (34184584 <LL_RCC_SetDCMIPPClockSource+0x28>)
34184570:	687b      	ldr	r3, [r7, #4]
34184572:	4313      	orrs	r3, r2
34184574:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34184578:	bf00      	nop
3418457a:	370c      	adds	r7, #12
3418457c:	46bd      	mov	sp, r7
3418457e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184582:	4770      	bx	lr
34184584:	56028000 	.word	0x56028000

34184588 <LL_RCC_SetETHClockSource>:
{
34184588:	b480      	push	{r7}
3418458a:	b083      	sub	sp, #12
3418458c:	af00      	add	r7, sp, #0
3418458e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34184590:	4b07      	ldr	r3, [pc, #28]	@ (341845b0 <LL_RCC_SetETHClockSource+0x28>)
34184592:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34184596:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
3418459a:	4905      	ldr	r1, [pc, #20]	@ (341845b0 <LL_RCC_SetETHClockSource+0x28>)
3418459c:	687b      	ldr	r3, [r7, #4]
3418459e:	4313      	orrs	r3, r2
341845a0:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
341845a4:	bf00      	nop
341845a6:	370c      	adds	r7, #12
341845a8:	46bd      	mov	sp, r7
341845aa:	f85d 7b04 	ldr.w	r7, [sp], #4
341845ae:	4770      	bx	lr
341845b0:	56028000 	.word	0x56028000

341845b4 <LL_RCC_SetETHPHYInterface>:
{
341845b4:	b480      	push	{r7}
341845b6:	b083      	sub	sp, #12
341845b8:	af00      	add	r7, sp, #0
341845ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
341845bc:	4b07      	ldr	r3, [pc, #28]	@ (341845dc <LL_RCC_SetETHPHYInterface+0x28>)
341845be:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341845c2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
341845c6:	4905      	ldr	r1, [pc, #20]	@ (341845dc <LL_RCC_SetETHPHYInterface+0x28>)
341845c8:	687b      	ldr	r3, [r7, #4]
341845ca:	4313      	orrs	r3, r2
341845cc:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
341845d0:	bf00      	nop
341845d2:	370c      	adds	r7, #12
341845d4:	46bd      	mov	sp, r7
341845d6:	f85d 7b04 	ldr.w	r7, [sp], #4
341845da:	4770      	bx	lr
341845dc:	56028000 	.word	0x56028000

341845e0 <LL_RCC_GetETH1PTPDivider>:
{
341845e0:	b480      	push	{r7}
341845e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
341845e4:	4b04      	ldr	r3, [pc, #16]	@ (341845f8 <LL_RCC_GetETH1PTPDivider+0x18>)
341845e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341845ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
341845ee:	4618      	mov	r0, r3
341845f0:	46bd      	mov	sp, r7
341845f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341845f6:	4770      	bx	lr
341845f8:	56028000 	.word	0x56028000

341845fc <LL_RCC_SetETHREFRXClockSource>:
{
341845fc:	b480      	push	{r7}
341845fe:	b083      	sub	sp, #12
34184600:	af00      	add	r7, sp, #0
34184602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34184604:	4b07      	ldr	r3, [pc, #28]	@ (34184624 <LL_RCC_SetETHREFRXClockSource+0x28>)
34184606:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3418460a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
3418460e:	4905      	ldr	r1, [pc, #20]	@ (34184624 <LL_RCC_SetETHREFRXClockSource+0x28>)
34184610:	687b      	ldr	r3, [r7, #4]
34184612:	4313      	orrs	r3, r2
34184614:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34184618:	bf00      	nop
3418461a:	370c      	adds	r7, #12
3418461c:	46bd      	mov	sp, r7
3418461e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184622:	4770      	bx	lr
34184624:	56028000 	.word	0x56028000

34184628 <LL_RCC_SetETHREFTXClockSource>:
{
34184628:	b480      	push	{r7}
3418462a:	b083      	sub	sp, #12
3418462c:	af00      	add	r7, sp, #0
3418462e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34184630:	4b07      	ldr	r3, [pc, #28]	@ (34184650 <LL_RCC_SetETHREFTXClockSource+0x28>)
34184632:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34184636:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
3418463a:	4905      	ldr	r1, [pc, #20]	@ (34184650 <LL_RCC_SetETHREFTXClockSource+0x28>)
3418463c:	687b      	ldr	r3, [r7, #4]
3418463e:	4313      	orrs	r3, r2
34184640:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34184644:	bf00      	nop
34184646:	370c      	adds	r7, #12
34184648:	46bd      	mov	sp, r7
3418464a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418464e:	4770      	bx	lr
34184650:	56028000 	.word	0x56028000

34184654 <LL_RCC_SetFDCANClockSource>:
{
34184654:	b480      	push	{r7}
34184656:	b083      	sub	sp, #12
34184658:	af00      	add	r7, sp, #0
3418465a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
3418465c:	4b07      	ldr	r3, [pc, #28]	@ (3418467c <LL_RCC_SetFDCANClockSource+0x28>)
3418465e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34184662:	f023 0203 	bic.w	r2, r3, #3
34184666:	4905      	ldr	r1, [pc, #20]	@ (3418467c <LL_RCC_SetFDCANClockSource+0x28>)
34184668:	687b      	ldr	r3, [r7, #4]
3418466a:	4313      	orrs	r3, r2
3418466c:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34184670:	bf00      	nop
34184672:	370c      	adds	r7, #12
34184674:	46bd      	mov	sp, r7
34184676:	f85d 7b04 	ldr.w	r7, [sp], #4
3418467a:	4770      	bx	lr
3418467c:	56028000 	.word	0x56028000

34184680 <LL_RCC_SetFMCClockSource>:
{
34184680:	b480      	push	{r7}
34184682:	b083      	sub	sp, #12
34184684:	af00      	add	r7, sp, #0
34184686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34184688:	4b07      	ldr	r3, [pc, #28]	@ (341846a8 <LL_RCC_SetFMCClockSource+0x28>)
3418468a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418468e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34184692:	4905      	ldr	r1, [pc, #20]	@ (341846a8 <LL_RCC_SetFMCClockSource+0x28>)
34184694:	687b      	ldr	r3, [r7, #4]
34184696:	4313      	orrs	r3, r2
34184698:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
3418469c:	bf00      	nop
3418469e:	370c      	adds	r7, #12
341846a0:	46bd      	mov	sp, r7
341846a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341846a6:	4770      	bx	lr
341846a8:	56028000 	.word	0x56028000

341846ac <LL_RCC_SetI2CClockSource>:
{
341846ac:	b580      	push	{r7, lr}
341846ae:	b082      	sub	sp, #8
341846b0:	af00      	add	r7, sp, #0
341846b2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341846b4:	6878      	ldr	r0, [r7, #4]
341846b6:	f7ff feed 	bl	34184494 <LL_RCC_SetClockSource>
}
341846ba:	bf00      	nop
341846bc:	3708      	adds	r7, #8
341846be:	46bd      	mov	sp, r7
341846c0:	bd80      	pop	{r7, pc}

341846c2 <LL_RCC_SetI3CClockSource>:
{
341846c2:	b580      	push	{r7, lr}
341846c4:	b082      	sub	sp, #8
341846c6:	af00      	add	r7, sp, #0
341846c8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341846ca:	6878      	ldr	r0, [r7, #4]
341846cc:	f7ff fee2 	bl	34184494 <LL_RCC_SetClockSource>
}
341846d0:	bf00      	nop
341846d2:	3708      	adds	r7, #8
341846d4:	46bd      	mov	sp, r7
341846d6:	bd80      	pop	{r7, pc}

341846d8 <LL_RCC_SetLPTIMClockSource>:
{
341846d8:	b580      	push	{r7, lr}
341846da:	b082      	sub	sp, #8
341846dc:	af00      	add	r7, sp, #0
341846de:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341846e0:	6878      	ldr	r0, [r7, #4]
341846e2:	f7ff fed7 	bl	34184494 <LL_RCC_SetClockSource>
}
341846e6:	bf00      	nop
341846e8:	3708      	adds	r7, #8
341846ea:	46bd      	mov	sp, r7
341846ec:	bd80      	pop	{r7, pc}
	...

341846f0 <LL_RCC_SetLPUARTClockSource>:
{
341846f0:	b480      	push	{r7}
341846f2:	b083      	sub	sp, #12
341846f4:	af00      	add	r7, sp, #0
341846f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
341846f8:	4b07      	ldr	r3, [pc, #28]	@ (34184718 <LL_RCC_SetLPUARTClockSource+0x28>)
341846fa:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
341846fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
34184702:	4905      	ldr	r1, [pc, #20]	@ (34184718 <LL_RCC_SetLPUARTClockSource+0x28>)
34184704:	687b      	ldr	r3, [r7, #4]
34184706:	4313      	orrs	r3, r2
34184708:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
3418470c:	bf00      	nop
3418470e:	370c      	adds	r7, #12
34184710:	46bd      	mov	sp, r7
34184712:	f85d 7b04 	ldr.w	r7, [sp], #4
34184716:	4770      	bx	lr
34184718:	56028000 	.word	0x56028000

3418471c <LL_RCC_SetLTDCClockSource>:
{
3418471c:	b480      	push	{r7}
3418471e:	b083      	sub	sp, #12
34184720:	af00      	add	r7, sp, #0
34184722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
34184724:	4b07      	ldr	r3, [pc, #28]	@ (34184744 <LL_RCC_SetLTDCClockSource+0x28>)
34184726:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3418472a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3418472e:	4905      	ldr	r1, [pc, #20]	@ (34184744 <LL_RCC_SetLTDCClockSource+0x28>)
34184730:	687b      	ldr	r3, [r7, #4]
34184732:	4313      	orrs	r3, r2
34184734:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
34184738:	bf00      	nop
3418473a:	370c      	adds	r7, #12
3418473c:	46bd      	mov	sp, r7
3418473e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184742:	4770      	bx	lr
34184744:	56028000 	.word	0x56028000

34184748 <LL_RCC_SetMDFClockSource>:
{
34184748:	b480      	push	{r7}
3418474a:	b083      	sub	sp, #12
3418474c:	af00      	add	r7, sp, #0
3418474e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34184750:	4b07      	ldr	r3, [pc, #28]	@ (34184770 <LL_RCC_SetMDFClockSource+0x28>)
34184752:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34184756:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3418475a:	4905      	ldr	r1, [pc, #20]	@ (34184770 <LL_RCC_SetMDFClockSource+0x28>)
3418475c:	687b      	ldr	r3, [r7, #4]
3418475e:	4313      	orrs	r3, r2
34184760:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
34184764:	bf00      	nop
34184766:	370c      	adds	r7, #12
34184768:	46bd      	mov	sp, r7
3418476a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418476e:	4770      	bx	lr
34184770:	56028000 	.word	0x56028000

34184774 <LL_RCC_SetOTGPHYClockSource>:
{
34184774:	b580      	push	{r7, lr}
34184776:	b082      	sub	sp, #8
34184778:	af00      	add	r7, sp, #0
3418477a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418477c:	6878      	ldr	r0, [r7, #4]
3418477e:	f7ff fe89 	bl	34184494 <LL_RCC_SetClockSource>
}
34184782:	bf00      	nop
34184784:	3708      	adds	r7, #8
34184786:	46bd      	mov	sp, r7
34184788:	bd80      	pop	{r7, pc}

3418478a <LL_RCC_SetOTGPHYCKREFClockSource>:
{
3418478a:	b580      	push	{r7, lr}
3418478c:	b082      	sub	sp, #8
3418478e:	af00      	add	r7, sp, #0
34184790:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184792:	6878      	ldr	r0, [r7, #4]
34184794:	f7ff fe7e 	bl	34184494 <LL_RCC_SetClockSource>
}
34184798:	bf00      	nop
3418479a:	3708      	adds	r7, #8
3418479c:	46bd      	mov	sp, r7
3418479e:	bd80      	pop	{r7, pc}

341847a0 <LL_RCC_SetPSSIClockSource>:
{
341847a0:	b480      	push	{r7}
341847a2:	b083      	sub	sp, #12
341847a4:	af00      	add	r7, sp, #0
341847a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
341847a8:	4b07      	ldr	r3, [pc, #28]	@ (341847c8 <LL_RCC_SetPSSIClockSource+0x28>)
341847aa:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
341847ae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
341847b2:	4905      	ldr	r1, [pc, #20]	@ (341847c8 <LL_RCC_SetPSSIClockSource+0x28>)
341847b4:	687b      	ldr	r3, [r7, #4]
341847b6:	4313      	orrs	r3, r2
341847b8:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
341847bc:	bf00      	nop
341847be:	370c      	adds	r7, #12
341847c0:	46bd      	mov	sp, r7
341847c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341847c6:	4770      	bx	lr
341847c8:	56028000 	.word	0x56028000

341847cc <LL_RCC_SetSAIClockSource>:
{
341847cc:	b580      	push	{r7, lr}
341847ce:	b082      	sub	sp, #8
341847d0:	af00      	add	r7, sp, #0
341847d2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341847d4:	6878      	ldr	r0, [r7, #4]
341847d6:	f7ff fe5d 	bl	34184494 <LL_RCC_SetClockSource>
}
341847da:	bf00      	nop
341847dc:	3708      	adds	r7, #8
341847de:	46bd      	mov	sp, r7
341847e0:	bd80      	pop	{r7, pc}

341847e2 <LL_RCC_SetSDMMCClockSource>:
{
341847e2:	b580      	push	{r7, lr}
341847e4:	b082      	sub	sp, #8
341847e6:	af00      	add	r7, sp, #0
341847e8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
341847ea:	6878      	ldr	r0, [r7, #4]
341847ec:	f7ff fe52 	bl	34184494 <LL_RCC_SetClockSource>
}
341847f0:	bf00      	nop
341847f2:	3708      	adds	r7, #8
341847f4:	46bd      	mov	sp, r7
341847f6:	bd80      	pop	{r7, pc}

341847f8 <LL_RCC_SetSPDIFRXClockSource>:
{
341847f8:	b480      	push	{r7}
341847fa:	b083      	sub	sp, #12
341847fc:	af00      	add	r7, sp, #0
341847fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34184800:	4b07      	ldr	r3, [pc, #28]	@ (34184820 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34184802:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34184806:	f023 0207 	bic.w	r2, r3, #7
3418480a:	4905      	ldr	r1, [pc, #20]	@ (34184820 <LL_RCC_SetSPDIFRXClockSource+0x28>)
3418480c:	687b      	ldr	r3, [r7, #4]
3418480e:	4313      	orrs	r3, r2
34184810:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
34184814:	bf00      	nop
34184816:	370c      	adds	r7, #12
34184818:	46bd      	mov	sp, r7
3418481a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418481e:	4770      	bx	lr
34184820:	56028000 	.word	0x56028000

34184824 <LL_RCC_SetSPIClockSource>:
{
34184824:	b580      	push	{r7, lr}
34184826:	b082      	sub	sp, #8
34184828:	af00      	add	r7, sp, #0
3418482a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3418482c:	6878      	ldr	r0, [r7, #4]
3418482e:	f7ff fe31 	bl	34184494 <LL_RCC_SetClockSource>
}
34184832:	bf00      	nop
34184834:	3708      	adds	r7, #8
34184836:	46bd      	mov	sp, r7
34184838:	bd80      	pop	{r7, pc}

3418483a <LL_RCC_SetUSARTClockSource>:
{
3418483a:	b580      	push	{r7, lr}
3418483c:	b082      	sub	sp, #8
3418483e:	af00      	add	r7, sp, #0
34184840:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184842:	6878      	ldr	r0, [r7, #4]
34184844:	f7ff fe26 	bl	34184494 <LL_RCC_SetClockSource>
}
34184848:	bf00      	nop
3418484a:	3708      	adds	r7, #8
3418484c:	46bd      	mov	sp, r7
3418484e:	bd80      	pop	{r7, pc}

34184850 <LL_RCC_SetXSPIClockSource>:
{
34184850:	b580      	push	{r7, lr}
34184852:	b082      	sub	sp, #8
34184854:	af00      	add	r7, sp, #0
34184856:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184858:	6878      	ldr	r0, [r7, #4]
3418485a:	f7ff fe1b 	bl	34184494 <LL_RCC_SetClockSource>
}
3418485e:	bf00      	nop
34184860:	3708      	adds	r7, #8
34184862:	46bd      	mov	sp, r7
34184864:	bd80      	pop	{r7, pc}
	...

34184868 <LL_RCC_GetClockSource>:
{
34184868:	b480      	push	{r7}
3418486a:	b085      	sub	sp, #20
3418486c:	af00      	add	r7, sp, #0
3418486e:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34184870:	687b      	ldr	r3, [r7, #4]
34184872:	b2da      	uxtb	r2, r3
34184874:	4b0e      	ldr	r3, [pc, #56]	@ (341848b0 <LL_RCC_GetClockSource+0x48>)
34184876:	4413      	add	r3, r2
34184878:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
3418487a:	68fb      	ldr	r3, [r7, #12]
3418487c:	681a      	ldr	r2, [r3, #0]
3418487e:	687b      	ldr	r3, [r7, #4]
34184880:	0e19      	lsrs	r1, r3, #24
34184882:	687b      	ldr	r3, [r7, #4]
34184884:	0a1b      	lsrs	r3, r3, #8
34184886:	f003 031f 	and.w	r3, r3, #31
3418488a:	fa01 f303 	lsl.w	r3, r1, r3
3418488e:	401a      	ands	r2, r3
34184890:	687b      	ldr	r3, [r7, #4]
34184892:	0a1b      	lsrs	r3, r3, #8
34184894:	f003 031f 	and.w	r3, r3, #31
34184898:	fa22 f303 	lsr.w	r3, r2, r3
3418489c:	041a      	lsls	r2, r3, #16
3418489e:	687b      	ldr	r3, [r7, #4]
341848a0:	4313      	orrs	r3, r2
}
341848a2:	4618      	mov	r0, r3
341848a4:	3714      	adds	r7, #20
341848a6:	46bd      	mov	sp, r7
341848a8:	f85d 7b04 	ldr.w	r7, [sp], #4
341848ac:	4770      	bx	lr
341848ae:	bf00      	nop
341848b0:	56028144 	.word	0x56028144

341848b4 <LL_RCC_GetADCClockSource>:
{
341848b4:	b480      	push	{r7}
341848b6:	b083      	sub	sp, #12
341848b8:	af00      	add	r7, sp, #0
341848ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
341848bc:	4b05      	ldr	r3, [pc, #20]	@ (341848d4 <LL_RCC_GetADCClockSource+0x20>)
341848be:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341848c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
341848c6:	4618      	mov	r0, r3
341848c8:	370c      	adds	r7, #12
341848ca:	46bd      	mov	sp, r7
341848cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341848d0:	4770      	bx	lr
341848d2:	bf00      	nop
341848d4:	56028000 	.word	0x56028000

341848d8 <LL_RCC_GetADFClockSource>:
{
341848d8:	b480      	push	{r7}
341848da:	b083      	sub	sp, #12
341848dc:	af00      	add	r7, sp, #0
341848de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
341848e0:	4b05      	ldr	r3, [pc, #20]	@ (341848f8 <LL_RCC_GetADFClockSource+0x20>)
341848e2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341848e6:	f003 0307 	and.w	r3, r3, #7
}
341848ea:	4618      	mov	r0, r3
341848ec:	370c      	adds	r7, #12
341848ee:	46bd      	mov	sp, r7
341848f0:	f85d 7b04 	ldr.w	r7, [sp], #4
341848f4:	4770      	bx	lr
341848f6:	bf00      	nop
341848f8:	56028000 	.word	0x56028000

341848fc <LL_RCC_GetCLKPClockSource>:
{
341848fc:	b480      	push	{r7}
341848fe:	b083      	sub	sp, #12
34184900:	af00      	add	r7, sp, #0
34184902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
34184904:	4b05      	ldr	r3, [pc, #20]	@ (3418491c <LL_RCC_GetCLKPClockSource+0x20>)
34184906:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418490a:	f003 0307 	and.w	r3, r3, #7
}
3418490e:	4618      	mov	r0, r3
34184910:	370c      	adds	r7, #12
34184912:	46bd      	mov	sp, r7
34184914:	f85d 7b04 	ldr.w	r7, [sp], #4
34184918:	4770      	bx	lr
3418491a:	bf00      	nop
3418491c:	56028000 	.word	0x56028000

34184920 <LL_RCC_GetDCMIPPClockSource>:
{
34184920:	b480      	push	{r7}
34184922:	b083      	sub	sp, #12
34184924:	af00      	add	r7, sp, #0
34184926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34184928:	4b05      	ldr	r3, [pc, #20]	@ (34184940 <LL_RCC_GetDCMIPPClockSource+0x20>)
3418492a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418492e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34184932:	4618      	mov	r0, r3
34184934:	370c      	adds	r7, #12
34184936:	46bd      	mov	sp, r7
34184938:	f85d 7b04 	ldr.w	r7, [sp], #4
3418493c:	4770      	bx	lr
3418493e:	bf00      	nop
34184940:	56028000 	.word	0x56028000

34184944 <LL_RCC_GetETHClockSource>:
{
34184944:	b480      	push	{r7}
34184946:	b083      	sub	sp, #12
34184948:	af00      	add	r7, sp, #0
3418494a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
3418494c:	4b05      	ldr	r3, [pc, #20]	@ (34184964 <LL_RCC_GetETHClockSource+0x20>)
3418494e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34184952:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
34184956:	4618      	mov	r0, r3
34184958:	370c      	adds	r7, #12
3418495a:	46bd      	mov	sp, r7
3418495c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184960:	4770      	bx	lr
34184962:	bf00      	nop
34184964:	56028000 	.word	0x56028000

34184968 <LL_RCC_GetETHPTPClockSource>:
{
34184968:	b480      	push	{r7}
3418496a:	b083      	sub	sp, #12
3418496c:	af00      	add	r7, sp, #0
3418496e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34184970:	4b05      	ldr	r3, [pc, #20]	@ (34184988 <LL_RCC_GetETHPTPClockSource+0x20>)
34184972:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34184976:	f003 0303 	and.w	r3, r3, #3
}
3418497a:	4618      	mov	r0, r3
3418497c:	370c      	adds	r7, #12
3418497e:	46bd      	mov	sp, r7
34184980:	f85d 7b04 	ldr.w	r7, [sp], #4
34184984:	4770      	bx	lr
34184986:	bf00      	nop
34184988:	56028000 	.word	0x56028000

3418498c <LL_RCC_GetFDCANClockSource>:
{
3418498c:	b480      	push	{r7}
3418498e:	b083      	sub	sp, #12
34184990:	af00      	add	r7, sp, #0
34184992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34184994:	4b05      	ldr	r3, [pc, #20]	@ (341849ac <LL_RCC_GetFDCANClockSource+0x20>)
34184996:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418499a:	f003 0303 	and.w	r3, r3, #3
}
3418499e:	4618      	mov	r0, r3
341849a0:	370c      	adds	r7, #12
341849a2:	46bd      	mov	sp, r7
341849a4:	f85d 7b04 	ldr.w	r7, [sp], #4
341849a8:	4770      	bx	lr
341849aa:	bf00      	nop
341849ac:	56028000 	.word	0x56028000

341849b0 <LL_RCC_GetFMCClockSource>:
{
341849b0:	b480      	push	{r7}
341849b2:	b083      	sub	sp, #12
341849b4:	af00      	add	r7, sp, #0
341849b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
341849b8:	4b05      	ldr	r3, [pc, #20]	@ (341849d0 <LL_RCC_GetFMCClockSource+0x20>)
341849ba:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341849be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
341849c2:	4618      	mov	r0, r3
341849c4:	370c      	adds	r7, #12
341849c6:	46bd      	mov	sp, r7
341849c8:	f85d 7b04 	ldr.w	r7, [sp], #4
341849cc:	4770      	bx	lr
341849ce:	bf00      	nop
341849d0:	56028000 	.word	0x56028000

341849d4 <LL_RCC_GetI2CClockSource>:
{
341849d4:	b580      	push	{r7, lr}
341849d6:	b082      	sub	sp, #8
341849d8:	af00      	add	r7, sp, #0
341849da:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341849dc:	6878      	ldr	r0, [r7, #4]
341849de:	f7ff ff43 	bl	34184868 <LL_RCC_GetClockSource>
341849e2:	4603      	mov	r3, r0
}
341849e4:	4618      	mov	r0, r3
341849e6:	3708      	adds	r7, #8
341849e8:	46bd      	mov	sp, r7
341849ea:	bd80      	pop	{r7, pc}

341849ec <LL_RCC_GetI3CClockSource>:
{
341849ec:	b580      	push	{r7, lr}
341849ee:	b082      	sub	sp, #8
341849f0:	af00      	add	r7, sp, #0
341849f2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341849f4:	6878      	ldr	r0, [r7, #4]
341849f6:	f7ff ff37 	bl	34184868 <LL_RCC_GetClockSource>
341849fa:	4603      	mov	r3, r0
}
341849fc:	4618      	mov	r0, r3
341849fe:	3708      	adds	r7, #8
34184a00:	46bd      	mov	sp, r7
34184a02:	bd80      	pop	{r7, pc}

34184a04 <LL_RCC_GetLPTIMClockSource>:
{
34184a04:	b580      	push	{r7, lr}
34184a06:	b082      	sub	sp, #8
34184a08:	af00      	add	r7, sp, #0
34184a0a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184a0c:	6878      	ldr	r0, [r7, #4]
34184a0e:	f7ff ff2b 	bl	34184868 <LL_RCC_GetClockSource>
34184a12:	4603      	mov	r3, r0
}
34184a14:	4618      	mov	r0, r3
34184a16:	3708      	adds	r7, #8
34184a18:	46bd      	mov	sp, r7
34184a1a:	bd80      	pop	{r7, pc}

34184a1c <LL_RCC_GetLPUARTClockSource>:
{
34184a1c:	b480      	push	{r7}
34184a1e:	b083      	sub	sp, #12
34184a20:	af00      	add	r7, sp, #0
34184a22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34184a24:	4b05      	ldr	r3, [pc, #20]	@ (34184a3c <LL_RCC_GetLPUARTClockSource+0x20>)
34184a26:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34184a2a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
34184a2e:	4618      	mov	r0, r3
34184a30:	370c      	adds	r7, #12
34184a32:	46bd      	mov	sp, r7
34184a34:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a38:	4770      	bx	lr
34184a3a:	bf00      	nop
34184a3c:	56028000 	.word	0x56028000

34184a40 <LL_RCC_GetLTDCClockSource>:
{
34184a40:	b480      	push	{r7}
34184a42:	b083      	sub	sp, #12
34184a44:	af00      	add	r7, sp, #0
34184a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34184a48:	4b05      	ldr	r3, [pc, #20]	@ (34184a60 <LL_RCC_GetLTDCClockSource+0x20>)
34184a4a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34184a4e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
34184a52:	4618      	mov	r0, r3
34184a54:	370c      	adds	r7, #12
34184a56:	46bd      	mov	sp, r7
34184a58:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a5c:	4770      	bx	lr
34184a5e:	bf00      	nop
34184a60:	56028000 	.word	0x56028000

34184a64 <LL_RCC_GetMDFClockSource>:
{
34184a64:	b480      	push	{r7}
34184a66:	b083      	sub	sp, #12
34184a68:	af00      	add	r7, sp, #0
34184a6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34184a6c:	4b05      	ldr	r3, [pc, #20]	@ (34184a84 <LL_RCC_GetMDFClockSource+0x20>)
34184a6e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34184a72:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34184a76:	4618      	mov	r0, r3
34184a78:	370c      	adds	r7, #12
34184a7a:	46bd      	mov	sp, r7
34184a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a80:	4770      	bx	lr
34184a82:	bf00      	nop
34184a84:	56028000 	.word	0x56028000

34184a88 <LL_RCC_GetPSSIClockSource>:
{
34184a88:	b480      	push	{r7}
34184a8a:	b083      	sub	sp, #12
34184a8c:	af00      	add	r7, sp, #0
34184a8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34184a90:	4b05      	ldr	r3, [pc, #20]	@ (34184aa8 <LL_RCC_GetPSSIClockSource+0x20>)
34184a92:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34184a96:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34184a9a:	4618      	mov	r0, r3
34184a9c:	370c      	adds	r7, #12
34184a9e:	46bd      	mov	sp, r7
34184aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184aa4:	4770      	bx	lr
34184aa6:	bf00      	nop
34184aa8:	56028000 	.word	0x56028000

34184aac <LL_RCC_GetSAIClockSource>:
{
34184aac:	b580      	push	{r7, lr}
34184aae:	b082      	sub	sp, #8
34184ab0:	af00      	add	r7, sp, #0
34184ab2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184ab4:	6878      	ldr	r0, [r7, #4]
34184ab6:	f7ff fed7 	bl	34184868 <LL_RCC_GetClockSource>
34184aba:	4603      	mov	r3, r0
}
34184abc:	4618      	mov	r0, r3
34184abe:	3708      	adds	r7, #8
34184ac0:	46bd      	mov	sp, r7
34184ac2:	bd80      	pop	{r7, pc}

34184ac4 <LL_RCC_GetSDMMCClockSource>:
{
34184ac4:	b580      	push	{r7, lr}
34184ac6:	b082      	sub	sp, #8
34184ac8:	af00      	add	r7, sp, #0
34184aca:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184acc:	6878      	ldr	r0, [r7, #4]
34184ace:	f7ff fecb 	bl	34184868 <LL_RCC_GetClockSource>
34184ad2:	4603      	mov	r3, r0
}
34184ad4:	4618      	mov	r0, r3
34184ad6:	3708      	adds	r7, #8
34184ad8:	46bd      	mov	sp, r7
34184ada:	bd80      	pop	{r7, pc}

34184adc <LL_RCC_GetSPDIFRXClockSource>:
{
34184adc:	b480      	push	{r7}
34184ade:	b083      	sub	sp, #12
34184ae0:	af00      	add	r7, sp, #0
34184ae2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34184ae4:	4b05      	ldr	r3, [pc, #20]	@ (34184afc <LL_RCC_GetSPDIFRXClockSource+0x20>)
34184ae6:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34184aea:	f003 0307 	and.w	r3, r3, #7
}
34184aee:	4618      	mov	r0, r3
34184af0:	370c      	adds	r7, #12
34184af2:	46bd      	mov	sp, r7
34184af4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184af8:	4770      	bx	lr
34184afa:	bf00      	nop
34184afc:	56028000 	.word	0x56028000

34184b00 <LL_RCC_GetSPIClockSource>:
{
34184b00:	b580      	push	{r7, lr}
34184b02:	b082      	sub	sp, #8
34184b04:	af00      	add	r7, sp, #0
34184b06:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184b08:	6878      	ldr	r0, [r7, #4]
34184b0a:	f7ff fead 	bl	34184868 <LL_RCC_GetClockSource>
34184b0e:	4603      	mov	r3, r0
}
34184b10:	4618      	mov	r0, r3
34184b12:	3708      	adds	r7, #8
34184b14:	46bd      	mov	sp, r7
34184b16:	bd80      	pop	{r7, pc}

34184b18 <LL_RCC_GetUSARTClockSource>:
{
34184b18:	b580      	push	{r7, lr}
34184b1a:	b082      	sub	sp, #8
34184b1c:	af00      	add	r7, sp, #0
34184b1e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184b20:	6878      	ldr	r0, [r7, #4]
34184b22:	f7ff fea1 	bl	34184868 <LL_RCC_GetClockSource>
34184b26:	4603      	mov	r3, r0
}
34184b28:	4618      	mov	r0, r3
34184b2a:	3708      	adds	r7, #8
34184b2c:	46bd      	mov	sp, r7
34184b2e:	bd80      	pop	{r7, pc}

34184b30 <LL_RCC_GetUARTClockSource>:
{
34184b30:	b580      	push	{r7, lr}
34184b32:	b082      	sub	sp, #8
34184b34:	af00      	add	r7, sp, #0
34184b36:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184b38:	6878      	ldr	r0, [r7, #4]
34184b3a:	f7ff fe95 	bl	34184868 <LL_RCC_GetClockSource>
34184b3e:	4603      	mov	r3, r0
}
34184b40:	4618      	mov	r0, r3
34184b42:	3708      	adds	r7, #8
34184b44:	46bd      	mov	sp, r7
34184b46:	bd80      	pop	{r7, pc}

34184b48 <LL_RCC_GetUSBClockSource>:
{
34184b48:	b580      	push	{r7, lr}
34184b4a:	b082      	sub	sp, #8
34184b4c:	af00      	add	r7, sp, #0
34184b4e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184b50:	6878      	ldr	r0, [r7, #4]
34184b52:	f7ff fe89 	bl	34184868 <LL_RCC_GetClockSource>
34184b56:	4603      	mov	r3, r0
}
34184b58:	4618      	mov	r0, r3
34184b5a:	3708      	adds	r7, #8
34184b5c:	46bd      	mov	sp, r7
34184b5e:	bd80      	pop	{r7, pc}

34184b60 <LL_RCC_GetXSPIClockSource>:
{
34184b60:	b580      	push	{r7, lr}
34184b62:	b082      	sub	sp, #8
34184b64:	af00      	add	r7, sp, #0
34184b66:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184b68:	6878      	ldr	r0, [r7, #4]
34184b6a:	f7ff fe7d 	bl	34184868 <LL_RCC_GetClockSource>
34184b6e:	4603      	mov	r3, r0
}
34184b70:	4618      	mov	r0, r3
34184b72:	3708      	adds	r7, #8
34184b74:	46bd      	mov	sp, r7
34184b76:	bd80      	pop	{r7, pc}

34184b78 <LL_RCC_SetRTCClockSource>:
{
34184b78:	b480      	push	{r7}
34184b7a:	b083      	sub	sp, #12
34184b7c:	af00      	add	r7, sp, #0
34184b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34184b80:	4b07      	ldr	r3, [pc, #28]	@ (34184ba0 <LL_RCC_SetRTCClockSource+0x28>)
34184b82:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34184b86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
34184b8a:	4905      	ldr	r1, [pc, #20]	@ (34184ba0 <LL_RCC_SetRTCClockSource+0x28>)
34184b8c:	687b      	ldr	r3, [r7, #4]
34184b8e:	4313      	orrs	r3, r2
34184b90:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34184b94:	bf00      	nop
34184b96:	370c      	adds	r7, #12
34184b98:	46bd      	mov	sp, r7
34184b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b9e:	4770      	bx	lr
34184ba0:	56028000 	.word	0x56028000

34184ba4 <LL_RCC_GetRTCClockSource>:
{
34184ba4:	b480      	push	{r7}
34184ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34184ba8:	4b04      	ldr	r3, [pc, #16]	@ (34184bbc <LL_RCC_GetRTCClockSource+0x18>)
34184baa:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34184bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
34184bb2:	4618      	mov	r0, r3
34184bb4:	46bd      	mov	sp, r7
34184bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184bba:	4770      	bx	lr
34184bbc:	56028000 	.word	0x56028000

34184bc0 <LL_RCC_SetRTC_HSEPrescaler>:
{
34184bc0:	b480      	push	{r7}
34184bc2:	b083      	sub	sp, #12
34184bc4:	af00      	add	r7, sp, #0
34184bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34184bc8:	4b07      	ldr	r3, [pc, #28]	@ (34184be8 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34184bca:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34184bce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
34184bd2:	4905      	ldr	r1, [pc, #20]	@ (34184be8 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34184bd4:	687b      	ldr	r3, [r7, #4]
34184bd6:	4313      	orrs	r3, r2
34184bd8:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34184bdc:	bf00      	nop
34184bde:	370c      	adds	r7, #12
34184be0:	46bd      	mov	sp, r7
34184be2:	f85d 7b04 	ldr.w	r7, [sp], #4
34184be6:	4770      	bx	lr
34184be8:	56028000 	.word	0x56028000

34184bec <LL_RCC_SetTIMPrescaler>:
{
34184bec:	b480      	push	{r7}
34184bee:	b083      	sub	sp, #12
34184bf0:	af00      	add	r7, sp, #0
34184bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34184bf4:	4b07      	ldr	r3, [pc, #28]	@ (34184c14 <LL_RCC_SetTIMPrescaler+0x28>)
34184bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184bf8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34184bfc:	687b      	ldr	r3, [r7, #4]
34184bfe:	061b      	lsls	r3, r3, #24
34184c00:	4904      	ldr	r1, [pc, #16]	@ (34184c14 <LL_RCC_SetTIMPrescaler+0x28>)
34184c02:	4313      	orrs	r3, r2
34184c04:	624b      	str	r3, [r1, #36]	@ 0x24
}
34184c06:	bf00      	nop
34184c08:	370c      	adds	r7, #12
34184c0a:	46bd      	mov	sp, r7
34184c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c10:	4770      	bx	lr
34184c12:	bf00      	nop
34184c14:	56028000 	.word	0x56028000

34184c18 <LL_RCC_GetTIMPrescaler>:
{
34184c18:	b480      	push	{r7}
34184c1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34184c1c:	4b04      	ldr	r3, [pc, #16]	@ (34184c30 <LL_RCC_GetTIMPrescaler+0x18>)
34184c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184c20:	0e1b      	lsrs	r3, r3, #24
34184c22:	f003 0303 	and.w	r3, r3, #3
}
34184c26:	4618      	mov	r0, r3
34184c28:	46bd      	mov	sp, r7
34184c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c2e:	4770      	bx	lr
34184c30:	56028000 	.word	0x56028000

34184c34 <LL_RCC_PLL1_GetSource>:
{
34184c34:	b480      	push	{r7}
34184c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34184c38:	4b04      	ldr	r3, [pc, #16]	@ (34184c4c <LL_RCC_PLL1_GetSource+0x18>)
34184c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34184c3e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34184c42:	4618      	mov	r0, r3
34184c44:	46bd      	mov	sp, r7
34184c46:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c4a:	4770      	bx	lr
34184c4c:	56028000 	.word	0x56028000

34184c50 <LL_RCC_PLL1_IsReady>:
{
34184c50:	b480      	push	{r7}
34184c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34184c54:	4b07      	ldr	r3, [pc, #28]	@ (34184c74 <LL_RCC_PLL1_IsReady+0x24>)
34184c56:	685b      	ldr	r3, [r3, #4]
34184c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34184c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34184c60:	d101      	bne.n	34184c66 <LL_RCC_PLL1_IsReady+0x16>
34184c62:	2301      	movs	r3, #1
34184c64:	e000      	b.n	34184c68 <LL_RCC_PLL1_IsReady+0x18>
34184c66:	2300      	movs	r3, #0
}
34184c68:	4618      	mov	r0, r3
34184c6a:	46bd      	mov	sp, r7
34184c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c70:	4770      	bx	lr
34184c72:	bf00      	nop
34184c74:	56028000 	.word	0x56028000

34184c78 <LL_RCC_PLL1_IsEnabledBypass>:
{
34184c78:	b480      	push	{r7}
34184c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34184c7c:	4b07      	ldr	r3, [pc, #28]	@ (34184c9c <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34184c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34184c82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184c86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34184c8a:	d101      	bne.n	34184c90 <LL_RCC_PLL1_IsEnabledBypass+0x18>
34184c8c:	2301      	movs	r3, #1
34184c8e:	e000      	b.n	34184c92 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34184c90:	2300      	movs	r3, #0
}
34184c92:	4618      	mov	r0, r3
34184c94:	46bd      	mov	sp, r7
34184c96:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c9a:	4770      	bx	lr
34184c9c:	56028000 	.word	0x56028000

34184ca0 <LL_RCC_PLL1_GetN>:
{
34184ca0:	b480      	push	{r7}
34184ca2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34184ca4:	4b05      	ldr	r3, [pc, #20]	@ (34184cbc <LL_RCC_PLL1_GetN+0x1c>)
34184ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34184caa:	0a1b      	lsrs	r3, r3, #8
34184cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34184cb0:	4618      	mov	r0, r3
34184cb2:	46bd      	mov	sp, r7
34184cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cb8:	4770      	bx	lr
34184cba:	bf00      	nop
34184cbc:	56028000 	.word	0x56028000

34184cc0 <LL_RCC_PLL1_GetM>:
{
34184cc0:	b480      	push	{r7}
34184cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34184cc4:	4b05      	ldr	r3, [pc, #20]	@ (34184cdc <LL_RCC_PLL1_GetM+0x1c>)
34184cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34184cca:	0d1b      	lsrs	r3, r3, #20
34184ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34184cd0:	4618      	mov	r0, r3
34184cd2:	46bd      	mov	sp, r7
34184cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cd8:	4770      	bx	lr
34184cda:	bf00      	nop
34184cdc:	56028000 	.word	0x56028000

34184ce0 <LL_RCC_PLL1_GetP1>:
{
34184ce0:	b480      	push	{r7}
34184ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34184ce4:	4b05      	ldr	r3, [pc, #20]	@ (34184cfc <LL_RCC_PLL1_GetP1+0x1c>)
34184ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34184cea:	0edb      	lsrs	r3, r3, #27
34184cec:	f003 0307 	and.w	r3, r3, #7
}
34184cf0:	4618      	mov	r0, r3
34184cf2:	46bd      	mov	sp, r7
34184cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cf8:	4770      	bx	lr
34184cfa:	bf00      	nop
34184cfc:	56028000 	.word	0x56028000

34184d00 <LL_RCC_PLL1_GetP2>:
{
34184d00:	b480      	push	{r7}
34184d02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34184d04:	4b05      	ldr	r3, [pc, #20]	@ (34184d1c <LL_RCC_PLL1_GetP2+0x1c>)
34184d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34184d0a:	0e1b      	lsrs	r3, r3, #24
34184d0c:	f003 0307 	and.w	r3, r3, #7
}
34184d10:	4618      	mov	r0, r3
34184d12:	46bd      	mov	sp, r7
34184d14:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d18:	4770      	bx	lr
34184d1a:	bf00      	nop
34184d1c:	56028000 	.word	0x56028000

34184d20 <LL_RCC_PLL1P_IsEnabled>:
{
34184d20:	b480      	push	{r7}
34184d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34184d24:	4b07      	ldr	r3, [pc, #28]	@ (34184d44 <LL_RCC_PLL1P_IsEnabled+0x24>)
34184d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34184d2a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34184d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34184d32:	d101      	bne.n	34184d38 <LL_RCC_PLL1P_IsEnabled+0x18>
34184d34:	2301      	movs	r3, #1
34184d36:	e000      	b.n	34184d3a <LL_RCC_PLL1P_IsEnabled+0x1a>
34184d38:	2300      	movs	r3, #0
}
34184d3a:	4618      	mov	r0, r3
34184d3c:	46bd      	mov	sp, r7
34184d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d42:	4770      	bx	lr
34184d44:	56028000 	.word	0x56028000

34184d48 <LL_RCC_PLL1_GetFRACN>:
{
34184d48:	b480      	push	{r7}
34184d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34184d4c:	4b04      	ldr	r3, [pc, #16]	@ (34184d60 <LL_RCC_PLL1_GetFRACN+0x18>)
34184d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34184d52:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34184d56:	4618      	mov	r0, r3
34184d58:	46bd      	mov	sp, r7
34184d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d5e:	4770      	bx	lr
34184d60:	56028000 	.word	0x56028000

34184d64 <LL_RCC_PLL2_GetSource>:
{
34184d64:	b480      	push	{r7}
34184d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34184d68:	4b04      	ldr	r3, [pc, #16]	@ (34184d7c <LL_RCC_PLL2_GetSource+0x18>)
34184d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34184d6e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34184d72:	4618      	mov	r0, r3
34184d74:	46bd      	mov	sp, r7
34184d76:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d7a:	4770      	bx	lr
34184d7c:	56028000 	.word	0x56028000

34184d80 <LL_RCC_PLL2_IsReady>:
{
34184d80:	b480      	push	{r7}
34184d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34184d84:	4b07      	ldr	r3, [pc, #28]	@ (34184da4 <LL_RCC_PLL2_IsReady+0x24>)
34184d86:	685b      	ldr	r3, [r3, #4]
34184d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34184d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34184d90:	d101      	bne.n	34184d96 <LL_RCC_PLL2_IsReady+0x16>
34184d92:	2301      	movs	r3, #1
34184d94:	e000      	b.n	34184d98 <LL_RCC_PLL2_IsReady+0x18>
34184d96:	2300      	movs	r3, #0
}
34184d98:	4618      	mov	r0, r3
34184d9a:	46bd      	mov	sp, r7
34184d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184da0:	4770      	bx	lr
34184da2:	bf00      	nop
34184da4:	56028000 	.word	0x56028000

34184da8 <LL_RCC_PLL2_IsEnabledBypass>:
{
34184da8:	b480      	push	{r7}
34184daa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34184dac:	4b07      	ldr	r3, [pc, #28]	@ (34184dcc <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34184dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34184db2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184db6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34184dba:	d101      	bne.n	34184dc0 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34184dbc:	2301      	movs	r3, #1
34184dbe:	e000      	b.n	34184dc2 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34184dc0:	2300      	movs	r3, #0
}
34184dc2:	4618      	mov	r0, r3
34184dc4:	46bd      	mov	sp, r7
34184dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184dca:	4770      	bx	lr
34184dcc:	56028000 	.word	0x56028000

34184dd0 <LL_RCC_PLL2_GetN>:
{
34184dd0:	b480      	push	{r7}
34184dd2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34184dd4:	4b05      	ldr	r3, [pc, #20]	@ (34184dec <LL_RCC_PLL2_GetN+0x1c>)
34184dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34184dda:	0a1b      	lsrs	r3, r3, #8
34184ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34184de0:	4618      	mov	r0, r3
34184de2:	46bd      	mov	sp, r7
34184de4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184de8:	4770      	bx	lr
34184dea:	bf00      	nop
34184dec:	56028000 	.word	0x56028000

34184df0 <LL_RCC_PLL2_GetM>:
{
34184df0:	b480      	push	{r7}
34184df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
34184df4:	4b05      	ldr	r3, [pc, #20]	@ (34184e0c <LL_RCC_PLL2_GetM+0x1c>)
34184df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34184dfa:	0d1b      	lsrs	r3, r3, #20
34184dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34184e00:	4618      	mov	r0, r3
34184e02:	46bd      	mov	sp, r7
34184e04:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e08:	4770      	bx	lr
34184e0a:	bf00      	nop
34184e0c:	56028000 	.word	0x56028000

34184e10 <LL_RCC_PLL2_GetP1>:
{
34184e10:	b480      	push	{r7}
34184e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34184e14:	4b05      	ldr	r3, [pc, #20]	@ (34184e2c <LL_RCC_PLL2_GetP1+0x1c>)
34184e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34184e1a:	0edb      	lsrs	r3, r3, #27
34184e1c:	f003 0307 	and.w	r3, r3, #7
}
34184e20:	4618      	mov	r0, r3
34184e22:	46bd      	mov	sp, r7
34184e24:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e28:	4770      	bx	lr
34184e2a:	bf00      	nop
34184e2c:	56028000 	.word	0x56028000

34184e30 <LL_RCC_PLL2_GetP2>:
{
34184e30:	b480      	push	{r7}
34184e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34184e34:	4b05      	ldr	r3, [pc, #20]	@ (34184e4c <LL_RCC_PLL2_GetP2+0x1c>)
34184e36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34184e3a:	0e1b      	lsrs	r3, r3, #24
34184e3c:	f003 0307 	and.w	r3, r3, #7
}
34184e40:	4618      	mov	r0, r3
34184e42:	46bd      	mov	sp, r7
34184e44:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e48:	4770      	bx	lr
34184e4a:	bf00      	nop
34184e4c:	56028000 	.word	0x56028000

34184e50 <LL_RCC_PLL2P_IsEnabled>:
{
34184e50:	b480      	push	{r7}
34184e52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
34184e54:	4b07      	ldr	r3, [pc, #28]	@ (34184e74 <LL_RCC_PLL2P_IsEnabled+0x24>)
34184e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34184e5a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34184e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34184e62:	d101      	bne.n	34184e68 <LL_RCC_PLL2P_IsEnabled+0x18>
34184e64:	2301      	movs	r3, #1
34184e66:	e000      	b.n	34184e6a <LL_RCC_PLL2P_IsEnabled+0x1a>
34184e68:	2300      	movs	r3, #0
}
34184e6a:	4618      	mov	r0, r3
34184e6c:	46bd      	mov	sp, r7
34184e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e72:	4770      	bx	lr
34184e74:	56028000 	.word	0x56028000

34184e78 <LL_RCC_PLL2_GetFRACN>:
{
34184e78:	b480      	push	{r7}
34184e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
34184e7c:	4b04      	ldr	r3, [pc, #16]	@ (34184e90 <LL_RCC_PLL2_GetFRACN+0x18>)
34184e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34184e82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34184e86:	4618      	mov	r0, r3
34184e88:	46bd      	mov	sp, r7
34184e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e8e:	4770      	bx	lr
34184e90:	56028000 	.word	0x56028000

34184e94 <LL_RCC_PLL3_GetSource>:
{
34184e94:	b480      	push	{r7}
34184e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34184e98:	4b04      	ldr	r3, [pc, #16]	@ (34184eac <LL_RCC_PLL3_GetSource+0x18>)
34184e9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34184e9e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34184ea2:	4618      	mov	r0, r3
34184ea4:	46bd      	mov	sp, r7
34184ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184eaa:	4770      	bx	lr
34184eac:	56028000 	.word	0x56028000

34184eb0 <LL_RCC_PLL3_IsReady>:
{
34184eb0:	b480      	push	{r7}
34184eb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34184eb4:	4b07      	ldr	r3, [pc, #28]	@ (34184ed4 <LL_RCC_PLL3_IsReady+0x24>)
34184eb6:	685b      	ldr	r3, [r3, #4]
34184eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34184ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34184ec0:	d101      	bne.n	34184ec6 <LL_RCC_PLL3_IsReady+0x16>
34184ec2:	2301      	movs	r3, #1
34184ec4:	e000      	b.n	34184ec8 <LL_RCC_PLL3_IsReady+0x18>
34184ec6:	2300      	movs	r3, #0
}
34184ec8:	4618      	mov	r0, r3
34184eca:	46bd      	mov	sp, r7
34184ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ed0:	4770      	bx	lr
34184ed2:	bf00      	nop
34184ed4:	56028000 	.word	0x56028000

34184ed8 <LL_RCC_PLL3_IsEnabledBypass>:
{
34184ed8:	b480      	push	{r7}
34184eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34184edc:	4b07      	ldr	r3, [pc, #28]	@ (34184efc <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34184ede:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34184ee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184ee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34184eea:	d101      	bne.n	34184ef0 <LL_RCC_PLL3_IsEnabledBypass+0x18>
34184eec:	2301      	movs	r3, #1
34184eee:	e000      	b.n	34184ef2 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34184ef0:	2300      	movs	r3, #0
}
34184ef2:	4618      	mov	r0, r3
34184ef4:	46bd      	mov	sp, r7
34184ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184efa:	4770      	bx	lr
34184efc:	56028000 	.word	0x56028000

34184f00 <LL_RCC_PLL3_GetN>:
{
34184f00:	b480      	push	{r7}
34184f02:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34184f04:	4b05      	ldr	r3, [pc, #20]	@ (34184f1c <LL_RCC_PLL3_GetN+0x1c>)
34184f06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34184f0a:	0a1b      	lsrs	r3, r3, #8
34184f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34184f10:	4618      	mov	r0, r3
34184f12:	46bd      	mov	sp, r7
34184f14:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f18:	4770      	bx	lr
34184f1a:	bf00      	nop
34184f1c:	56028000 	.word	0x56028000

34184f20 <LL_RCC_PLL3_GetM>:
{
34184f20:	b480      	push	{r7}
34184f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
34184f24:	4b05      	ldr	r3, [pc, #20]	@ (34184f3c <LL_RCC_PLL3_GetM+0x1c>)
34184f26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34184f2a:	0d1b      	lsrs	r3, r3, #20
34184f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34184f30:	4618      	mov	r0, r3
34184f32:	46bd      	mov	sp, r7
34184f34:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f38:	4770      	bx	lr
34184f3a:	bf00      	nop
34184f3c:	56028000 	.word	0x56028000

34184f40 <LL_RCC_PLL3_GetP1>:
{
34184f40:	b480      	push	{r7}
34184f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34184f44:	4b05      	ldr	r3, [pc, #20]	@ (34184f5c <LL_RCC_PLL3_GetP1+0x1c>)
34184f46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34184f4a:	0edb      	lsrs	r3, r3, #27
34184f4c:	f003 0307 	and.w	r3, r3, #7
}
34184f50:	4618      	mov	r0, r3
34184f52:	46bd      	mov	sp, r7
34184f54:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f58:	4770      	bx	lr
34184f5a:	bf00      	nop
34184f5c:	56028000 	.word	0x56028000

34184f60 <LL_RCC_PLL3_GetP2>:
{
34184f60:	b480      	push	{r7}
34184f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34184f64:	4b05      	ldr	r3, [pc, #20]	@ (34184f7c <LL_RCC_PLL3_GetP2+0x1c>)
34184f66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34184f6a:	0e1b      	lsrs	r3, r3, #24
34184f6c:	f003 0307 	and.w	r3, r3, #7
}
34184f70:	4618      	mov	r0, r3
34184f72:	46bd      	mov	sp, r7
34184f74:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f78:	4770      	bx	lr
34184f7a:	bf00      	nop
34184f7c:	56028000 	.word	0x56028000

34184f80 <LL_RCC_PLL3P_IsEnabled>:
{
34184f80:	b480      	push	{r7}
34184f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
34184f84:	4b07      	ldr	r3, [pc, #28]	@ (34184fa4 <LL_RCC_PLL3P_IsEnabled+0x24>)
34184f86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34184f8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34184f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34184f92:	d101      	bne.n	34184f98 <LL_RCC_PLL3P_IsEnabled+0x18>
34184f94:	2301      	movs	r3, #1
34184f96:	e000      	b.n	34184f9a <LL_RCC_PLL3P_IsEnabled+0x1a>
34184f98:	2300      	movs	r3, #0
}
34184f9a:	4618      	mov	r0, r3
34184f9c:	46bd      	mov	sp, r7
34184f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184fa2:	4770      	bx	lr
34184fa4:	56028000 	.word	0x56028000

34184fa8 <LL_RCC_PLL3_GetFRACN>:
{
34184fa8:	b480      	push	{r7}
34184faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34184fac:	4b04      	ldr	r3, [pc, #16]	@ (34184fc0 <LL_RCC_PLL3_GetFRACN+0x18>)
34184fae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34184fb2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34184fb6:	4618      	mov	r0, r3
34184fb8:	46bd      	mov	sp, r7
34184fba:	f85d 7b04 	ldr.w	r7, [sp], #4
34184fbe:	4770      	bx	lr
34184fc0:	56028000 	.word	0x56028000

34184fc4 <LL_RCC_PLL4_GetSource>:
{
34184fc4:	b480      	push	{r7}
34184fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34184fc8:	4b04      	ldr	r3, [pc, #16]	@ (34184fdc <LL_RCC_PLL4_GetSource+0x18>)
34184fca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34184fce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34184fd2:	4618      	mov	r0, r3
34184fd4:	46bd      	mov	sp, r7
34184fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184fda:	4770      	bx	lr
34184fdc:	56028000 	.word	0x56028000

34184fe0 <LL_RCC_PLL4_IsReady>:
{
34184fe0:	b480      	push	{r7}
34184fe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34184fe4:	4b07      	ldr	r3, [pc, #28]	@ (34185004 <LL_RCC_PLL4_IsReady+0x24>)
34184fe6:	685b      	ldr	r3, [r3, #4]
34184fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34184fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34184ff0:	d101      	bne.n	34184ff6 <LL_RCC_PLL4_IsReady+0x16>
34184ff2:	2301      	movs	r3, #1
34184ff4:	e000      	b.n	34184ff8 <LL_RCC_PLL4_IsReady+0x18>
34184ff6:	2300      	movs	r3, #0
}
34184ff8:	4618      	mov	r0, r3
34184ffa:	46bd      	mov	sp, r7
34184ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
34185000:	4770      	bx	lr
34185002:	bf00      	nop
34185004:	56028000 	.word	0x56028000

34185008 <LL_RCC_PLL4_IsEnabledBypass>:
{
34185008:	b480      	push	{r7}
3418500a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3418500c:	4b07      	ldr	r3, [pc, #28]	@ (3418502c <LL_RCC_PLL4_IsEnabledBypass+0x24>)
3418500e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34185012:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34185016:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418501a:	d101      	bne.n	34185020 <LL_RCC_PLL4_IsEnabledBypass+0x18>
3418501c:	2301      	movs	r3, #1
3418501e:	e000      	b.n	34185022 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34185020:	2300      	movs	r3, #0
}
34185022:	4618      	mov	r0, r3
34185024:	46bd      	mov	sp, r7
34185026:	f85d 7b04 	ldr.w	r7, [sp], #4
3418502a:	4770      	bx	lr
3418502c:	56028000 	.word	0x56028000

34185030 <LL_RCC_PLL4_GetN>:
{
34185030:	b480      	push	{r7}
34185032:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
34185034:	4b05      	ldr	r3, [pc, #20]	@ (3418504c <LL_RCC_PLL4_GetN+0x1c>)
34185036:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418503a:	0a1b      	lsrs	r3, r3, #8
3418503c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34185040:	4618      	mov	r0, r3
34185042:	46bd      	mov	sp, r7
34185044:	f85d 7b04 	ldr.w	r7, [sp], #4
34185048:	4770      	bx	lr
3418504a:	bf00      	nop
3418504c:	56028000 	.word	0x56028000

34185050 <LL_RCC_PLL4_GetM>:
{
34185050:	b480      	push	{r7}
34185052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
34185054:	4b05      	ldr	r3, [pc, #20]	@ (3418506c <LL_RCC_PLL4_GetM+0x1c>)
34185056:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418505a:	0d1b      	lsrs	r3, r3, #20
3418505c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34185060:	4618      	mov	r0, r3
34185062:	46bd      	mov	sp, r7
34185064:	f85d 7b04 	ldr.w	r7, [sp], #4
34185068:	4770      	bx	lr
3418506a:	bf00      	nop
3418506c:	56028000 	.word	0x56028000

34185070 <LL_RCC_PLL4_GetP1>:
{
34185070:	b480      	push	{r7}
34185072:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34185074:	4b05      	ldr	r3, [pc, #20]	@ (3418508c <LL_RCC_PLL4_GetP1+0x1c>)
34185076:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418507a:	0edb      	lsrs	r3, r3, #27
3418507c:	f003 0307 	and.w	r3, r3, #7
}
34185080:	4618      	mov	r0, r3
34185082:	46bd      	mov	sp, r7
34185084:	f85d 7b04 	ldr.w	r7, [sp], #4
34185088:	4770      	bx	lr
3418508a:	bf00      	nop
3418508c:	56028000 	.word	0x56028000

34185090 <LL_RCC_PLL4_GetP2>:
{
34185090:	b480      	push	{r7}
34185092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34185094:	4b05      	ldr	r3, [pc, #20]	@ (341850ac <LL_RCC_PLL4_GetP2+0x1c>)
34185096:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418509a:	0e1b      	lsrs	r3, r3, #24
3418509c:	f003 0307 	and.w	r3, r3, #7
}
341850a0:	4618      	mov	r0, r3
341850a2:	46bd      	mov	sp, r7
341850a4:	f85d 7b04 	ldr.w	r7, [sp], #4
341850a8:	4770      	bx	lr
341850aa:	bf00      	nop
341850ac:	56028000 	.word	0x56028000

341850b0 <LL_RCC_PLL4P_IsEnabled>:
{
341850b0:	b480      	push	{r7}
341850b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
341850b4:	4b07      	ldr	r3, [pc, #28]	@ (341850d4 <LL_RCC_PLL4P_IsEnabled+0x24>)
341850b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341850ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
341850be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
341850c2:	d101      	bne.n	341850c8 <LL_RCC_PLL4P_IsEnabled+0x18>
341850c4:	2301      	movs	r3, #1
341850c6:	e000      	b.n	341850ca <LL_RCC_PLL4P_IsEnabled+0x1a>
341850c8:	2300      	movs	r3, #0
}
341850ca:	4618      	mov	r0, r3
341850cc:	46bd      	mov	sp, r7
341850ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341850d2:	4770      	bx	lr
341850d4:	56028000 	.word	0x56028000

341850d8 <LL_RCC_PLL4_GetFRACN>:
{
341850d8:	b480      	push	{r7}
341850da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
341850dc:	4b04      	ldr	r3, [pc, #16]	@ (341850f0 <LL_RCC_PLL4_GetFRACN+0x18>)
341850de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
341850e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
341850e6:	4618      	mov	r0, r3
341850e8:	46bd      	mov	sp, r7
341850ea:	f85d 7b04 	ldr.w	r7, [sp], #4
341850ee:	4770      	bx	lr
341850f0:	56028000 	.word	0x56028000

341850f4 <LL_RCC_IC3_Enable>:
{
341850f4:	b480      	push	{r7}
341850f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
341850f8:	4b04      	ldr	r3, [pc, #16]	@ (3418510c <LL_RCC_IC3_Enable+0x18>)
341850fa:	2204      	movs	r2, #4
341850fc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185100:	bf00      	nop
34185102:	46bd      	mov	sp, r7
34185104:	f85d 7b04 	ldr.w	r7, [sp], #4
34185108:	4770      	bx	lr
3418510a:	bf00      	nop
3418510c:	56028000 	.word	0x56028000

34185110 <LL_RCC_IC3_IsEnabled>:
{
34185110:	b480      	push	{r7}
34185112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34185114:	4b07      	ldr	r3, [pc, #28]	@ (34185134 <LL_RCC_IC3_IsEnabled+0x24>)
34185116:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418511a:	f003 0304 	and.w	r3, r3, #4
3418511e:	2b04      	cmp	r3, #4
34185120:	d101      	bne.n	34185126 <LL_RCC_IC3_IsEnabled+0x16>
34185122:	2301      	movs	r3, #1
34185124:	e000      	b.n	34185128 <LL_RCC_IC3_IsEnabled+0x18>
34185126:	2300      	movs	r3, #0
}
34185128:	4618      	mov	r0, r3
3418512a:	46bd      	mov	sp, r7
3418512c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185130:	4770      	bx	lr
34185132:	bf00      	nop
34185134:	56028000 	.word	0x56028000

34185138 <LL_RCC_IC3_GetSource>:
{
34185138:	b480      	push	{r7}
3418513a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
3418513c:	4b04      	ldr	r3, [pc, #16]	@ (34185150 <LL_RCC_IC3_GetSource+0x18>)
3418513e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34185142:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185146:	4618      	mov	r0, r3
34185148:	46bd      	mov	sp, r7
3418514a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418514e:	4770      	bx	lr
34185150:	56028000 	.word	0x56028000

34185154 <LL_RCC_IC3_GetDivider>:
{
34185154:	b480      	push	{r7}
34185156:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34185158:	4b05      	ldr	r3, [pc, #20]	@ (34185170 <LL_RCC_IC3_GetDivider+0x1c>)
3418515a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418515e:	0c1b      	lsrs	r3, r3, #16
34185160:	b2db      	uxtb	r3, r3
34185162:	3301      	adds	r3, #1
}
34185164:	4618      	mov	r0, r3
34185166:	46bd      	mov	sp, r7
34185168:	f85d 7b04 	ldr.w	r7, [sp], #4
3418516c:	4770      	bx	lr
3418516e:	bf00      	nop
34185170:	56028000 	.word	0x56028000

34185174 <LL_RCC_IC4_Enable>:
{
34185174:	b480      	push	{r7}
34185176:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34185178:	4b04      	ldr	r3, [pc, #16]	@ (3418518c <LL_RCC_IC4_Enable+0x18>)
3418517a:	2208      	movs	r2, #8
3418517c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185180:	bf00      	nop
34185182:	46bd      	mov	sp, r7
34185184:	f85d 7b04 	ldr.w	r7, [sp], #4
34185188:	4770      	bx	lr
3418518a:	bf00      	nop
3418518c:	56028000 	.word	0x56028000

34185190 <LL_RCC_IC4_IsEnabled>:
{
34185190:	b480      	push	{r7}
34185192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34185194:	4b07      	ldr	r3, [pc, #28]	@ (341851b4 <LL_RCC_IC4_IsEnabled+0x24>)
34185196:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418519a:	f003 0308 	and.w	r3, r3, #8
3418519e:	2b08      	cmp	r3, #8
341851a0:	d101      	bne.n	341851a6 <LL_RCC_IC4_IsEnabled+0x16>
341851a2:	2301      	movs	r3, #1
341851a4:	e000      	b.n	341851a8 <LL_RCC_IC4_IsEnabled+0x18>
341851a6:	2300      	movs	r3, #0
}
341851a8:	4618      	mov	r0, r3
341851aa:	46bd      	mov	sp, r7
341851ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341851b0:	4770      	bx	lr
341851b2:	bf00      	nop
341851b4:	56028000 	.word	0x56028000

341851b8 <LL_RCC_IC4_GetSource>:
{
341851b8:	b480      	push	{r7}
341851ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
341851bc:	4b04      	ldr	r3, [pc, #16]	@ (341851d0 <LL_RCC_IC4_GetSource+0x18>)
341851be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341851c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341851c6:	4618      	mov	r0, r3
341851c8:	46bd      	mov	sp, r7
341851ca:	f85d 7b04 	ldr.w	r7, [sp], #4
341851ce:	4770      	bx	lr
341851d0:	56028000 	.word	0x56028000

341851d4 <LL_RCC_IC4_GetDivider>:
{
341851d4:	b480      	push	{r7}
341851d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
341851d8:	4b05      	ldr	r3, [pc, #20]	@ (341851f0 <LL_RCC_IC4_GetDivider+0x1c>)
341851da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341851de:	0c1b      	lsrs	r3, r3, #16
341851e0:	b2db      	uxtb	r3, r3
341851e2:	3301      	adds	r3, #1
}
341851e4:	4618      	mov	r0, r3
341851e6:	46bd      	mov	sp, r7
341851e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341851ec:	4770      	bx	lr
341851ee:	bf00      	nop
341851f0:	56028000 	.word	0x56028000

341851f4 <LL_RCC_IC5_Enable>:
{
341851f4:	b480      	push	{r7}
341851f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
341851f8:	4b04      	ldr	r3, [pc, #16]	@ (3418520c <LL_RCC_IC5_Enable+0x18>)
341851fa:	2210      	movs	r2, #16
341851fc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185200:	bf00      	nop
34185202:	46bd      	mov	sp, r7
34185204:	f85d 7b04 	ldr.w	r7, [sp], #4
34185208:	4770      	bx	lr
3418520a:	bf00      	nop
3418520c:	56028000 	.word	0x56028000

34185210 <LL_RCC_IC5_IsEnabled>:
{
34185210:	b480      	push	{r7}
34185212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34185214:	4b07      	ldr	r3, [pc, #28]	@ (34185234 <LL_RCC_IC5_IsEnabled+0x24>)
34185216:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418521a:	f003 0310 	and.w	r3, r3, #16
3418521e:	2b10      	cmp	r3, #16
34185220:	d101      	bne.n	34185226 <LL_RCC_IC5_IsEnabled+0x16>
34185222:	2301      	movs	r3, #1
34185224:	e000      	b.n	34185228 <LL_RCC_IC5_IsEnabled+0x18>
34185226:	2300      	movs	r3, #0
}
34185228:	4618      	mov	r0, r3
3418522a:	46bd      	mov	sp, r7
3418522c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185230:	4770      	bx	lr
34185232:	bf00      	nop
34185234:	56028000 	.word	0x56028000

34185238 <LL_RCC_IC5_GetSource>:
{
34185238:	b480      	push	{r7}
3418523a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3418523c:	4b04      	ldr	r3, [pc, #16]	@ (34185250 <LL_RCC_IC5_GetSource+0x18>)
3418523e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34185242:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185246:	4618      	mov	r0, r3
34185248:	46bd      	mov	sp, r7
3418524a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418524e:	4770      	bx	lr
34185250:	56028000 	.word	0x56028000

34185254 <LL_RCC_IC5_GetDivider>:
{
34185254:	b480      	push	{r7}
34185256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34185258:	4b05      	ldr	r3, [pc, #20]	@ (34185270 <LL_RCC_IC5_GetDivider+0x1c>)
3418525a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418525e:	0c1b      	lsrs	r3, r3, #16
34185260:	b2db      	uxtb	r3, r3
34185262:	3301      	adds	r3, #1
}
34185264:	4618      	mov	r0, r3
34185266:	46bd      	mov	sp, r7
34185268:	f85d 7b04 	ldr.w	r7, [sp], #4
3418526c:	4770      	bx	lr
3418526e:	bf00      	nop
34185270:	56028000 	.word	0x56028000

34185274 <LL_RCC_IC7_Enable>:
{
34185274:	b480      	push	{r7}
34185276:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34185278:	4b04      	ldr	r3, [pc, #16]	@ (3418528c <LL_RCC_IC7_Enable+0x18>)
3418527a:	2240      	movs	r2, #64	@ 0x40
3418527c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185280:	bf00      	nop
34185282:	46bd      	mov	sp, r7
34185284:	f85d 7b04 	ldr.w	r7, [sp], #4
34185288:	4770      	bx	lr
3418528a:	bf00      	nop
3418528c:	56028000 	.word	0x56028000

34185290 <LL_RCC_IC7_IsEnabled>:
{
34185290:	b480      	push	{r7}
34185292:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34185294:	4b07      	ldr	r3, [pc, #28]	@ (341852b4 <LL_RCC_IC7_IsEnabled+0x24>)
34185296:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418529a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418529e:	2b40      	cmp	r3, #64	@ 0x40
341852a0:	d101      	bne.n	341852a6 <LL_RCC_IC7_IsEnabled+0x16>
341852a2:	2301      	movs	r3, #1
341852a4:	e000      	b.n	341852a8 <LL_RCC_IC7_IsEnabled+0x18>
341852a6:	2300      	movs	r3, #0
}
341852a8:	4618      	mov	r0, r3
341852aa:	46bd      	mov	sp, r7
341852ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341852b0:	4770      	bx	lr
341852b2:	bf00      	nop
341852b4:	56028000 	.word	0x56028000

341852b8 <LL_RCC_IC7_GetSource>:
{
341852b8:	b480      	push	{r7}
341852ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
341852bc:	4b04      	ldr	r3, [pc, #16]	@ (341852d0 <LL_RCC_IC7_GetSource+0x18>)
341852be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341852c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341852c6:	4618      	mov	r0, r3
341852c8:	46bd      	mov	sp, r7
341852ca:	f85d 7b04 	ldr.w	r7, [sp], #4
341852ce:	4770      	bx	lr
341852d0:	56028000 	.word	0x56028000

341852d4 <LL_RCC_IC7_GetDivider>:
{
341852d4:	b480      	push	{r7}
341852d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
341852d8:	4b05      	ldr	r3, [pc, #20]	@ (341852f0 <LL_RCC_IC7_GetDivider+0x1c>)
341852da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341852de:	0c1b      	lsrs	r3, r3, #16
341852e0:	b2db      	uxtb	r3, r3
341852e2:	3301      	adds	r3, #1
}
341852e4:	4618      	mov	r0, r3
341852e6:	46bd      	mov	sp, r7
341852e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341852ec:	4770      	bx	lr
341852ee:	bf00      	nop
341852f0:	56028000 	.word	0x56028000

341852f4 <LL_RCC_IC8_Enable>:
{
341852f4:	b480      	push	{r7}
341852f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
341852f8:	4b04      	ldr	r3, [pc, #16]	@ (3418530c <LL_RCC_IC8_Enable+0x18>)
341852fa:	2280      	movs	r2, #128	@ 0x80
341852fc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185300:	bf00      	nop
34185302:	46bd      	mov	sp, r7
34185304:	f85d 7b04 	ldr.w	r7, [sp], #4
34185308:	4770      	bx	lr
3418530a:	bf00      	nop
3418530c:	56028000 	.word	0x56028000

34185310 <LL_RCC_IC8_IsEnabled>:
{
34185310:	b480      	push	{r7}
34185312:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
34185314:	4b07      	ldr	r3, [pc, #28]	@ (34185334 <LL_RCC_IC8_IsEnabled+0x24>)
34185316:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418531e:	2b80      	cmp	r3, #128	@ 0x80
34185320:	d101      	bne.n	34185326 <LL_RCC_IC8_IsEnabled+0x16>
34185322:	2301      	movs	r3, #1
34185324:	e000      	b.n	34185328 <LL_RCC_IC8_IsEnabled+0x18>
34185326:	2300      	movs	r3, #0
}
34185328:	4618      	mov	r0, r3
3418532a:	46bd      	mov	sp, r7
3418532c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185330:	4770      	bx	lr
34185332:	bf00      	nop
34185334:	56028000 	.word	0x56028000

34185338 <LL_RCC_IC8_GetSource>:
{
34185338:	b480      	push	{r7}
3418533a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3418533c:	4b04      	ldr	r3, [pc, #16]	@ (34185350 <LL_RCC_IC8_GetSource+0x18>)
3418533e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34185342:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185346:	4618      	mov	r0, r3
34185348:	46bd      	mov	sp, r7
3418534a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418534e:	4770      	bx	lr
34185350:	56028000 	.word	0x56028000

34185354 <LL_RCC_IC8_GetDivider>:
{
34185354:	b480      	push	{r7}
34185356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34185358:	4b05      	ldr	r3, [pc, #20]	@ (34185370 <LL_RCC_IC8_GetDivider+0x1c>)
3418535a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418535e:	0c1b      	lsrs	r3, r3, #16
34185360:	b2db      	uxtb	r3, r3
34185362:	3301      	adds	r3, #1
}
34185364:	4618      	mov	r0, r3
34185366:	46bd      	mov	sp, r7
34185368:	f85d 7b04 	ldr.w	r7, [sp], #4
3418536c:	4770      	bx	lr
3418536e:	bf00      	nop
34185370:	56028000 	.word	0x56028000

34185374 <LL_RCC_IC9_Enable>:
{
34185374:	b480      	push	{r7}
34185376:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34185378:	4b04      	ldr	r3, [pc, #16]	@ (3418538c <LL_RCC_IC9_Enable+0x18>)
3418537a:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418537e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185382:	bf00      	nop
34185384:	46bd      	mov	sp, r7
34185386:	f85d 7b04 	ldr.w	r7, [sp], #4
3418538a:	4770      	bx	lr
3418538c:	56028000 	.word	0x56028000

34185390 <LL_RCC_IC9_IsEnabled>:
{
34185390:	b480      	push	{r7}
34185392:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34185394:	4b07      	ldr	r3, [pc, #28]	@ (341853b4 <LL_RCC_IC9_IsEnabled+0x24>)
34185396:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418539a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418539e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341853a2:	d101      	bne.n	341853a8 <LL_RCC_IC9_IsEnabled+0x18>
341853a4:	2301      	movs	r3, #1
341853a6:	e000      	b.n	341853aa <LL_RCC_IC9_IsEnabled+0x1a>
341853a8:	2300      	movs	r3, #0
}
341853aa:	4618      	mov	r0, r3
341853ac:	46bd      	mov	sp, r7
341853ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341853b2:	4770      	bx	lr
341853b4:	56028000 	.word	0x56028000

341853b8 <LL_RCC_IC9_GetSource>:
{
341853b8:	b480      	push	{r7}
341853ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
341853bc:	4b04      	ldr	r3, [pc, #16]	@ (341853d0 <LL_RCC_IC9_GetSource+0x18>)
341853be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341853c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341853c6:	4618      	mov	r0, r3
341853c8:	46bd      	mov	sp, r7
341853ca:	f85d 7b04 	ldr.w	r7, [sp], #4
341853ce:	4770      	bx	lr
341853d0:	56028000 	.word	0x56028000

341853d4 <LL_RCC_IC9_GetDivider>:
{
341853d4:	b480      	push	{r7}
341853d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
341853d8:	4b05      	ldr	r3, [pc, #20]	@ (341853f0 <LL_RCC_IC9_GetDivider+0x1c>)
341853da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341853de:	0c1b      	lsrs	r3, r3, #16
341853e0:	b2db      	uxtb	r3, r3
341853e2:	3301      	adds	r3, #1
}
341853e4:	4618      	mov	r0, r3
341853e6:	46bd      	mov	sp, r7
341853e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341853ec:	4770      	bx	lr
341853ee:	bf00      	nop
341853f0:	56028000 	.word	0x56028000

341853f4 <LL_RCC_IC10_Enable>:
{
341853f4:	b480      	push	{r7}
341853f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
341853f8:	4b04      	ldr	r3, [pc, #16]	@ (3418540c <LL_RCC_IC10_Enable+0x18>)
341853fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
341853fe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185402:	bf00      	nop
34185404:	46bd      	mov	sp, r7
34185406:	f85d 7b04 	ldr.w	r7, [sp], #4
3418540a:	4770      	bx	lr
3418540c:	56028000 	.word	0x56028000

34185410 <LL_RCC_IC10_IsEnabled>:
{
34185410:	b480      	push	{r7}
34185412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34185414:	4b07      	ldr	r3, [pc, #28]	@ (34185434 <LL_RCC_IC10_IsEnabled+0x24>)
34185416:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418541a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418541e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34185422:	d101      	bne.n	34185428 <LL_RCC_IC10_IsEnabled+0x18>
34185424:	2301      	movs	r3, #1
34185426:	e000      	b.n	3418542a <LL_RCC_IC10_IsEnabled+0x1a>
34185428:	2300      	movs	r3, #0
}
3418542a:	4618      	mov	r0, r3
3418542c:	46bd      	mov	sp, r7
3418542e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185432:	4770      	bx	lr
34185434:	56028000 	.word	0x56028000

34185438 <LL_RCC_IC10_GetSource>:
{
34185438:	b480      	push	{r7}
3418543a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3418543c:	4b04      	ldr	r3, [pc, #16]	@ (34185450 <LL_RCC_IC10_GetSource+0x18>)
3418543e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185442:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185446:	4618      	mov	r0, r3
34185448:	46bd      	mov	sp, r7
3418544a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418544e:	4770      	bx	lr
34185450:	56028000 	.word	0x56028000

34185454 <LL_RCC_IC10_GetDivider>:
{
34185454:	b480      	push	{r7}
34185456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34185458:	4b05      	ldr	r3, [pc, #20]	@ (34185470 <LL_RCC_IC10_GetDivider+0x1c>)
3418545a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418545e:	0c1b      	lsrs	r3, r3, #16
34185460:	b2db      	uxtb	r3, r3
34185462:	3301      	adds	r3, #1
}
34185464:	4618      	mov	r0, r3
34185466:	46bd      	mov	sp, r7
34185468:	f85d 7b04 	ldr.w	r7, [sp], #4
3418546c:	4770      	bx	lr
3418546e:	bf00      	nop
34185470:	56028000 	.word	0x56028000

34185474 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
34185474:	b480      	push	{r7}
34185476:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34185478:	4b04      	ldr	r3, [pc, #16]	@ (3418548c <LL_RCC_IC12_Enable+0x18>)
3418547a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418547e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185482:	bf00      	nop
34185484:	46bd      	mov	sp, r7
34185486:	f85d 7b04 	ldr.w	r7, [sp], #4
3418548a:	4770      	bx	lr
3418548c:	56028000 	.word	0x56028000

34185490 <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
34185490:	b480      	push	{r7}
34185492:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34185494:	4b07      	ldr	r3, [pc, #28]	@ (341854b4 <LL_RCC_IC12_IsEnabled+0x24>)
34185496:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418549a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418549e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
341854a2:	d101      	bne.n	341854a8 <LL_RCC_IC12_IsEnabled+0x18>
341854a4:	2301      	movs	r3, #1
341854a6:	e000      	b.n	341854aa <LL_RCC_IC12_IsEnabled+0x1a>
341854a8:	2300      	movs	r3, #0
}
341854aa:	4618      	mov	r0, r3
341854ac:	46bd      	mov	sp, r7
341854ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341854b2:	4770      	bx	lr
341854b4:	56028000 	.word	0x56028000

341854b8 <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
341854b8:	b480      	push	{r7}
341854ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
341854bc:	4b04      	ldr	r3, [pc, #16]	@ (341854d0 <LL_RCC_IC12_GetSource+0x18>)
341854be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
341854c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341854c6:	4618      	mov	r0, r3
341854c8:	46bd      	mov	sp, r7
341854ca:	f85d 7b04 	ldr.w	r7, [sp], #4
341854ce:	4770      	bx	lr
341854d0:	56028000 	.word	0x56028000

341854d4 <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
341854d4:	b480      	push	{r7}
341854d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
341854d8:	4b05      	ldr	r3, [pc, #20]	@ (341854f0 <LL_RCC_IC12_GetDivider+0x1c>)
341854da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
341854de:	0c1b      	lsrs	r3, r3, #16
341854e0:	b2db      	uxtb	r3, r3
341854e2:	3301      	adds	r3, #1
}
341854e4:	4618      	mov	r0, r3
341854e6:	46bd      	mov	sp, r7
341854e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341854ec:	4770      	bx	lr
341854ee:	bf00      	nop
341854f0:	56028000 	.word	0x56028000

341854f4 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
341854f4:	b480      	push	{r7}
341854f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
341854f8:	4b04      	ldr	r3, [pc, #16]	@ (3418550c <LL_RCC_IC13_Enable+0x18>)
341854fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
341854fe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185502:	bf00      	nop
34185504:	46bd      	mov	sp, r7
34185506:	f85d 7b04 	ldr.w	r7, [sp], #4
3418550a:	4770      	bx	lr
3418550c:	56028000 	.word	0x56028000

34185510 <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
34185510:	b480      	push	{r7}
34185512:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34185514:	4b07      	ldr	r3, [pc, #28]	@ (34185534 <LL_RCC_IC13_IsEnabled+0x24>)
34185516:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418551a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418551e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34185522:	d101      	bne.n	34185528 <LL_RCC_IC13_IsEnabled+0x18>
34185524:	2301      	movs	r3, #1
34185526:	e000      	b.n	3418552a <LL_RCC_IC13_IsEnabled+0x1a>
34185528:	2300      	movs	r3, #0
}
3418552a:	4618      	mov	r0, r3
3418552c:	46bd      	mov	sp, r7
3418552e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185532:	4770      	bx	lr
34185534:	56028000 	.word	0x56028000

34185538 <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
34185538:	b480      	push	{r7}
3418553a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
3418553c:	4b04      	ldr	r3, [pc, #16]	@ (34185550 <LL_RCC_IC13_GetSource+0x18>)
3418553e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34185542:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185546:	4618      	mov	r0, r3
34185548:	46bd      	mov	sp, r7
3418554a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418554e:	4770      	bx	lr
34185550:	56028000 	.word	0x56028000

34185554 <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
34185554:	b480      	push	{r7}
34185556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34185558:	4b05      	ldr	r3, [pc, #20]	@ (34185570 <LL_RCC_IC13_GetDivider+0x1c>)
3418555a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3418555e:	0c1b      	lsrs	r3, r3, #16
34185560:	b2db      	uxtb	r3, r3
34185562:	3301      	adds	r3, #1
}
34185564:	4618      	mov	r0, r3
34185566:	46bd      	mov	sp, r7
34185568:	f85d 7b04 	ldr.w	r7, [sp], #4
3418556c:	4770      	bx	lr
3418556e:	bf00      	nop
34185570:	56028000 	.word	0x56028000

34185574 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
34185574:	b480      	push	{r7}
34185576:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185578:	4b04      	ldr	r3, [pc, #16]	@ (3418558c <LL_RCC_IC14_Enable+0x18>)
3418557a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418557e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185582:	bf00      	nop
34185584:	46bd      	mov	sp, r7
34185586:	f85d 7b04 	ldr.w	r7, [sp], #4
3418558a:	4770      	bx	lr
3418558c:	56028000 	.word	0x56028000

34185590 <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
34185590:	b480      	push	{r7}
34185592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34185594:	4b07      	ldr	r3, [pc, #28]	@ (341855b4 <LL_RCC_IC14_IsEnabled+0x24>)
34185596:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418559a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3418559e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
341855a2:	d101      	bne.n	341855a8 <LL_RCC_IC14_IsEnabled+0x18>
341855a4:	2301      	movs	r3, #1
341855a6:	e000      	b.n	341855aa <LL_RCC_IC14_IsEnabled+0x1a>
341855a8:	2300      	movs	r3, #0
}
341855aa:	4618      	mov	r0, r3
341855ac:	46bd      	mov	sp, r7
341855ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341855b2:	4770      	bx	lr
341855b4:	56028000 	.word	0x56028000

341855b8 <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
341855b8:	b480      	push	{r7}
341855ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
341855bc:	4b04      	ldr	r3, [pc, #16]	@ (341855d0 <LL_RCC_IC14_GetSource+0x18>)
341855be:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341855c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341855c6:	4618      	mov	r0, r3
341855c8:	46bd      	mov	sp, r7
341855ca:	f85d 7b04 	ldr.w	r7, [sp], #4
341855ce:	4770      	bx	lr
341855d0:	56028000 	.word	0x56028000

341855d4 <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
341855d4:	b480      	push	{r7}
341855d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
341855d8:	4b05      	ldr	r3, [pc, #20]	@ (341855f0 <LL_RCC_IC14_GetDivider+0x1c>)
341855da:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341855de:	0c1b      	lsrs	r3, r3, #16
341855e0:	b2db      	uxtb	r3, r3
341855e2:	3301      	adds	r3, #1
}
341855e4:	4618      	mov	r0, r3
341855e6:	46bd      	mov	sp, r7
341855e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341855ec:	4770      	bx	lr
341855ee:	bf00      	nop
341855f0:	56028000 	.word	0x56028000

341855f4 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
341855f4:	b480      	push	{r7}
341855f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
341855f8:	4b04      	ldr	r3, [pc, #16]	@ (3418560c <LL_RCC_IC15_Enable+0x18>)
341855fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
341855fe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185602:	bf00      	nop
34185604:	46bd      	mov	sp, r7
34185606:	f85d 7b04 	ldr.w	r7, [sp], #4
3418560a:	4770      	bx	lr
3418560c:	56028000 	.word	0x56028000

34185610 <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
34185610:	b480      	push	{r7}
34185612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34185614:	4b07      	ldr	r3, [pc, #28]	@ (34185634 <LL_RCC_IC15_IsEnabled+0x24>)
34185616:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418561a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3418561e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34185622:	d101      	bne.n	34185628 <LL_RCC_IC15_IsEnabled+0x18>
34185624:	2301      	movs	r3, #1
34185626:	e000      	b.n	3418562a <LL_RCC_IC15_IsEnabled+0x1a>
34185628:	2300      	movs	r3, #0
}
3418562a:	4618      	mov	r0, r3
3418562c:	46bd      	mov	sp, r7
3418562e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185632:	4770      	bx	lr
34185634:	56028000 	.word	0x56028000

34185638 <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
34185638:	b480      	push	{r7}
3418563a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3418563c:	4b04      	ldr	r3, [pc, #16]	@ (34185650 <LL_RCC_IC15_GetSource+0x18>)
3418563e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185642:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185646:	4618      	mov	r0, r3
34185648:	46bd      	mov	sp, r7
3418564a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418564e:	4770      	bx	lr
34185650:	56028000 	.word	0x56028000

34185654 <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
34185654:	b480      	push	{r7}
34185656:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34185658:	4b05      	ldr	r3, [pc, #20]	@ (34185670 <LL_RCC_IC15_GetDivider+0x1c>)
3418565a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418565e:	0c1b      	lsrs	r3, r3, #16
34185660:	b2db      	uxtb	r3, r3
34185662:	3301      	adds	r3, #1
}
34185664:	4618      	mov	r0, r3
34185666:	46bd      	mov	sp, r7
34185668:	f85d 7b04 	ldr.w	r7, [sp], #4
3418566c:	4770      	bx	lr
3418566e:	bf00      	nop
34185670:	56028000 	.word	0x56028000

34185674 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
34185674:	b480      	push	{r7}
34185676:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34185678:	4b04      	ldr	r3, [pc, #16]	@ (3418568c <LL_RCC_IC16_Enable+0x18>)
3418567a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3418567e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185682:	bf00      	nop
34185684:	46bd      	mov	sp, r7
34185686:	f85d 7b04 	ldr.w	r7, [sp], #4
3418568a:	4770      	bx	lr
3418568c:	56028000 	.word	0x56028000

34185690 <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
34185690:	b480      	push	{r7}
34185692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34185694:	4b07      	ldr	r3, [pc, #28]	@ (341856b4 <LL_RCC_IC16_IsEnabled+0x24>)
34185696:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418569a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3418569e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
341856a2:	d101      	bne.n	341856a8 <LL_RCC_IC16_IsEnabled+0x18>
341856a4:	2301      	movs	r3, #1
341856a6:	e000      	b.n	341856aa <LL_RCC_IC16_IsEnabled+0x1a>
341856a8:	2300      	movs	r3, #0
}
341856aa:	4618      	mov	r0, r3
341856ac:	46bd      	mov	sp, r7
341856ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341856b2:	4770      	bx	lr
341856b4:	56028000 	.word	0x56028000

341856b8 <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
341856b8:	b480      	push	{r7}
341856ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
341856bc:	4b04      	ldr	r3, [pc, #16]	@ (341856d0 <LL_RCC_IC16_GetSource+0x18>)
341856be:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
341856c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341856c6:	4618      	mov	r0, r3
341856c8:	46bd      	mov	sp, r7
341856ca:	f85d 7b04 	ldr.w	r7, [sp], #4
341856ce:	4770      	bx	lr
341856d0:	56028000 	.word	0x56028000

341856d4 <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
341856d4:	b480      	push	{r7}
341856d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
341856d8:	4b05      	ldr	r3, [pc, #20]	@ (341856f0 <LL_RCC_IC16_GetDivider+0x1c>)
341856da:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
341856de:	0c1b      	lsrs	r3, r3, #16
341856e0:	b2db      	uxtb	r3, r3
341856e2:	3301      	adds	r3, #1
}
341856e4:	4618      	mov	r0, r3
341856e6:	46bd      	mov	sp, r7
341856e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341856ec:	4770      	bx	lr
341856ee:	bf00      	nop
341856f0:	56028000 	.word	0x56028000

341856f4 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
341856f4:	b480      	push	{r7}
341856f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
341856f8:	4b04      	ldr	r3, [pc, #16]	@ (3418570c <LL_RCC_IC17_Enable+0x18>)
341856fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
341856fe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185702:	bf00      	nop
34185704:	46bd      	mov	sp, r7
34185706:	f85d 7b04 	ldr.w	r7, [sp], #4
3418570a:	4770      	bx	lr
3418570c:	56028000 	.word	0x56028000

34185710 <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
34185710:	b480      	push	{r7}
34185712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34185714:	4b07      	ldr	r3, [pc, #28]	@ (34185734 <LL_RCC_IC17_IsEnabled+0x24>)
34185716:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418571a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418571e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34185722:	d101      	bne.n	34185728 <LL_RCC_IC17_IsEnabled+0x18>
34185724:	2301      	movs	r3, #1
34185726:	e000      	b.n	3418572a <LL_RCC_IC17_IsEnabled+0x1a>
34185728:	2300      	movs	r3, #0
}
3418572a:	4618      	mov	r0, r3
3418572c:	46bd      	mov	sp, r7
3418572e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185732:	4770      	bx	lr
34185734:	56028000 	.word	0x56028000

34185738 <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
34185738:	b480      	push	{r7}
3418573a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
3418573c:	4b04      	ldr	r3, [pc, #16]	@ (34185750 <LL_RCC_IC17_GetSource+0x18>)
3418573e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34185742:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185746:	4618      	mov	r0, r3
34185748:	46bd      	mov	sp, r7
3418574a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418574e:	4770      	bx	lr
34185750:	56028000 	.word	0x56028000

34185754 <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
34185754:	b480      	push	{r7}
34185756:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34185758:	4b05      	ldr	r3, [pc, #20]	@ (34185770 <LL_RCC_IC17_GetDivider+0x1c>)
3418575a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3418575e:	0c1b      	lsrs	r3, r3, #16
34185760:	b2db      	uxtb	r3, r3
34185762:	3301      	adds	r3, #1
}
34185764:	4618      	mov	r0, r3
34185766:	46bd      	mov	sp, r7
34185768:	f85d 7b04 	ldr.w	r7, [sp], #4
3418576c:	4770      	bx	lr
3418576e:	bf00      	nop
34185770:	56028000 	.word	0x56028000

34185774 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
34185774:	b480      	push	{r7}
34185776:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34185778:	4b04      	ldr	r3, [pc, #16]	@ (3418578c <LL_RCC_IC18_Enable+0x18>)
3418577a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3418577e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185782:	bf00      	nop
34185784:	46bd      	mov	sp, r7
34185786:	f85d 7b04 	ldr.w	r7, [sp], #4
3418578a:	4770      	bx	lr
3418578c:	56028000 	.word	0x56028000

34185790 <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
34185790:	b480      	push	{r7}
34185792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34185794:	4b07      	ldr	r3, [pc, #28]	@ (341857b4 <LL_RCC_IC18_IsEnabled+0x24>)
34185796:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418579a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418579e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
341857a2:	d101      	bne.n	341857a8 <LL_RCC_IC18_IsEnabled+0x18>
341857a4:	2301      	movs	r3, #1
341857a6:	e000      	b.n	341857aa <LL_RCC_IC18_IsEnabled+0x1a>
341857a8:	2300      	movs	r3, #0
}
341857aa:	4618      	mov	r0, r3
341857ac:	46bd      	mov	sp, r7
341857ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341857b2:	4770      	bx	lr
341857b4:	56028000 	.word	0x56028000

341857b8 <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
341857b8:	b480      	push	{r7}
341857ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
341857bc:	4b04      	ldr	r3, [pc, #16]	@ (341857d0 <LL_RCC_IC18_GetSource+0x18>)
341857be:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
341857c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341857c6:	4618      	mov	r0, r3
341857c8:	46bd      	mov	sp, r7
341857ca:	f85d 7b04 	ldr.w	r7, [sp], #4
341857ce:	4770      	bx	lr
341857d0:	56028000 	.word	0x56028000

341857d4 <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
341857d4:	b480      	push	{r7}
341857d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
341857d8:	4b05      	ldr	r3, [pc, #20]	@ (341857f0 <LL_RCC_IC18_GetDivider+0x1c>)
341857da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
341857de:	0c1b      	lsrs	r3, r3, #16
341857e0:	b2db      	uxtb	r3, r3
341857e2:	3301      	adds	r3, #1
}
341857e4:	4618      	mov	r0, r3
341857e6:	46bd      	mov	sp, r7
341857e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341857ec:	4770      	bx	lr
341857ee:	bf00      	nop
341857f0:	56028000 	.word	0x56028000

341857f4 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
341857f4:	b480      	push	{r7}
341857f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
341857f8:	4b04      	ldr	r3, [pc, #16]	@ (3418580c <LL_RCC_IC19_Enable+0x18>)
341857fa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
341857fe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185802:	bf00      	nop
34185804:	46bd      	mov	sp, r7
34185806:	f85d 7b04 	ldr.w	r7, [sp], #4
3418580a:	4770      	bx	lr
3418580c:	56028000 	.word	0x56028000

34185810 <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
34185810:	b480      	push	{r7}
34185812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34185814:	4b07      	ldr	r3, [pc, #28]	@ (34185834 <LL_RCC_IC19_IsEnabled+0x24>)
34185816:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418581a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3418581e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34185822:	d101      	bne.n	34185828 <LL_RCC_IC19_IsEnabled+0x18>
34185824:	2301      	movs	r3, #1
34185826:	e000      	b.n	3418582a <LL_RCC_IC19_IsEnabled+0x1a>
34185828:	2300      	movs	r3, #0
}
3418582a:	4618      	mov	r0, r3
3418582c:	46bd      	mov	sp, r7
3418582e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185832:	4770      	bx	lr
34185834:	56028000 	.word	0x56028000

34185838 <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
34185838:	b480      	push	{r7}
3418583a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
3418583c:	4b04      	ldr	r3, [pc, #16]	@ (34185850 <LL_RCC_IC19_GetSource+0x18>)
3418583e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34185842:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185846:	4618      	mov	r0, r3
34185848:	46bd      	mov	sp, r7
3418584a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418584e:	4770      	bx	lr
34185850:	56028000 	.word	0x56028000

34185854 <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
34185854:	b480      	push	{r7}
34185856:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34185858:	4b05      	ldr	r3, [pc, #20]	@ (34185870 <LL_RCC_IC19_GetDivider+0x1c>)
3418585a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3418585e:	0c1b      	lsrs	r3, r3, #16
34185860:	b2db      	uxtb	r3, r3
34185862:	3301      	adds	r3, #1
}
34185864:	4618      	mov	r0, r3
34185866:	46bd      	mov	sp, r7
34185868:	f85d 7b04 	ldr.w	r7, [sp], #4
3418586c:	4770      	bx	lr
3418586e:	bf00      	nop
34185870:	56028000 	.word	0x56028000

34185874 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
34185874:	b480      	push	{r7}
34185876:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34185878:	4b04      	ldr	r3, [pc, #16]	@ (3418588c <LL_RCC_IC20_Enable+0x18>)
3418587a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3418587e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185882:	bf00      	nop
34185884:	46bd      	mov	sp, r7
34185886:	f85d 7b04 	ldr.w	r7, [sp], #4
3418588a:	4770      	bx	lr
3418588c:	56028000 	.word	0x56028000

34185890 <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
34185890:	b480      	push	{r7}
34185892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34185894:	4b07      	ldr	r3, [pc, #28]	@ (341858b4 <LL_RCC_IC20_IsEnabled+0x24>)
34185896:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3418589a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3418589e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
341858a2:	d101      	bne.n	341858a8 <LL_RCC_IC20_IsEnabled+0x18>
341858a4:	2301      	movs	r3, #1
341858a6:	e000      	b.n	341858aa <LL_RCC_IC20_IsEnabled+0x1a>
341858a8:	2300      	movs	r3, #0
}
341858aa:	4618      	mov	r0, r3
341858ac:	46bd      	mov	sp, r7
341858ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341858b2:	4770      	bx	lr
341858b4:	56028000 	.word	0x56028000

341858b8 <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
341858b8:	b480      	push	{r7}
341858ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
341858bc:	4b04      	ldr	r3, [pc, #16]	@ (341858d0 <LL_RCC_IC20_GetSource+0x18>)
341858be:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
341858c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341858c6:	4618      	mov	r0, r3
341858c8:	46bd      	mov	sp, r7
341858ca:	f85d 7b04 	ldr.w	r7, [sp], #4
341858ce:	4770      	bx	lr
341858d0:	56028000 	.word	0x56028000

341858d4 <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
341858d4:	b480      	push	{r7}
341858d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
341858d8:	4b05      	ldr	r3, [pc, #20]	@ (341858f0 <LL_RCC_IC20_GetDivider+0x1c>)
341858da:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
341858de:	0c1b      	lsrs	r3, r3, #16
341858e0:	b2db      	uxtb	r3, r3
341858e2:	3301      	adds	r3, #1
}
341858e4:	4618      	mov	r0, r3
341858e6:	46bd      	mov	sp, r7
341858e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341858ec:	4770      	bx	lr
341858ee:	bf00      	nop
341858f0:	56028000 	.word	0x56028000

341858f4 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
341858f4:	b480      	push	{r7}
341858f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341858f8:	4b04      	ldr	r3, [pc, #16]	@ (3418590c <LL_RCC_CLKP_Enable+0x18>)
341858fa:	2240      	movs	r2, #64	@ 0x40
341858fc:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
34185900:	bf00      	nop
34185902:	46bd      	mov	sp, r7
34185904:	f85d 7b04 	ldr.w	r7, [sp], #4
34185908:	4770      	bx	lr
3418590a:	bf00      	nop
3418590c:	56028000 	.word	0x56028000

34185910 <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
34185910:	b480      	push	{r7}
34185912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34185914:	4b07      	ldr	r3, [pc, #28]	@ (34185934 <LL_RCC_CLKP_IsEnabled+0x24>)
34185916:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
3418591a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418591e:	2b40      	cmp	r3, #64	@ 0x40
34185920:	d101      	bne.n	34185926 <LL_RCC_CLKP_IsEnabled+0x16>
34185922:	2301      	movs	r3, #1
34185924:	e000      	b.n	34185928 <LL_RCC_CLKP_IsEnabled+0x18>
34185926:	2300      	movs	r3, #0
}
34185928:	4618      	mov	r0, r3
3418592a:	46bd      	mov	sp, r7
3418592c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185930:	4770      	bx	lr
34185932:	bf00      	nop
34185934:	56028000 	.word	0x56028000

34185938 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
34185938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3418593c:	b0f2      	sub	sp, #456	@ 0x1c8
3418593e:	af00      	add	r7, sp, #0
34185940:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
34185944:	2300      	movs	r3, #0
34185946:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
3418594a:	2300      	movs	r3, #0
3418594c:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34185950:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185954:	e9d3 2300 	ldrd	r2, r3, [r3]
34185958:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
3418595c:	2500      	movs	r5, #0
3418595e:	ea54 0305 	orrs.w	r3, r4, r5
34185962:	d06c      	beq.n	34185a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
34185964:	f7ff f91e 	bl	34184ba4 <LL_RCC_GetRTCClockSource>
34185968:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3418596c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
34185970:	2b00      	cmp	r3, #0
34185972:	d018      	beq.n	341859a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
34185974:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185978:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418597c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
34185980:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
34185984:	4293      	cmp	r3, r2
34185986:	d00e      	beq.n	341859a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34185988:	4bc3      	ldr	r3, [pc, #780]	@ (34185c98 <HAL_RCCEx_PeriphCLKConfig+0x360>)
3418598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418598c:	4ac2      	ldr	r2, [pc, #776]	@ (34185c98 <HAL_RCCEx_PeriphCLKConfig+0x360>)
3418598e:	f043 0301 	orr.w	r3, r3, #1
34185992:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
34185994:	4bc0      	ldr	r3, [pc, #768]	@ (34185c98 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34185996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34185998:	f003 0301 	and.w	r3, r3, #1
3418599c:	2b00      	cmp	r3, #0
3418599e:	d102      	bne.n	341859a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        ret = HAL_ERROR;
341859a0:	2301      	movs	r3, #1
341859a2:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
341859a6:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
341859aa:	2b00      	cmp	r3, #0
341859ac:	d143      	bne.n	34185a36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
341859ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859b2:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
341859b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341859ba:	d117      	bne.n	341859ec <HAL_RCCEx_PeriphCLKConfig+0xb4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
341859bc:	f7fc fa1a 	bl	34181df4 <HAL_GetTick>
341859c0:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
341859c4:	e00d      	b.n	341859e2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
341859c6:	f7fc fa15 	bl	34181df4 <HAL_GetTick>
341859ca:	4602      	mov	r2, r0
341859cc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
341859d0:	1ad2      	subs	r2, r2, r3
341859d2:	f241 3388 	movw	r3, #5000	@ 0x1388
341859d6:	429a      	cmp	r2, r3
341859d8:	d903      	bls.n	341859e2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
          {
            ret = HAL_TIMEOUT;
341859da:	2303      	movs	r3, #3
341859dc:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
            break;
341859e0:	e004      	b.n	341859ec <HAL_RCCEx_PeriphCLKConfig+0xb4>
        while (LL_RCC_LSE_IsReady() == 0U)
341859e2:	f7fe fcf1 	bl	341843c8 <LL_RCC_LSE_IsReady>
341859e6:	4603      	mov	r3, r0
341859e8:	2b00      	cmp	r3, #0
341859ea:	d0ec      	beq.n	341859c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          }
        }
      }

      if (ret == HAL_OK)
341859ec:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
341859f0:	2b00      	cmp	r3, #0
341859f2:	d11b      	bne.n	34185a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
341859f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859f8:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
341859fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34185a00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34185a04:	d108      	bne.n	34185a18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
34185a06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a0a:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34185a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34185a12:	4618      	mov	r0, r3
34185a14:	f7ff f8d4 	bl	34184bc0 <LL_RCC_SetRTC_HSEPrescaler>
34185a18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a1c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34185a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34185a24:	4618      	mov	r0, r3
34185a26:	f7ff f8a7 	bl	34184b78 <LL_RCC_SetRTCClockSource>
34185a2a:	e008      	b.n	34185a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
      else
      {
        /* set overall return value */
        status = ret;
34185a2c:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34185a30:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
34185a34:	e003      	b.n	34185a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
34185a36:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34185a3a:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
34185a3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a42:	e9d3 2300 	ldrd	r2, r3, [r3]
34185a46:	f002 0804 	and.w	r8, r2, #4
34185a4a:	f04f 0900 	mov.w	r9, #0
34185a4e:	ea58 0309 	orrs.w	r3, r8, r9
34185a52:	f000 809b 	beq.w	34185b8c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34185a56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34185a5e:	2b04      	cmp	r3, #4
34185a60:	d116      	bne.n	34185a90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34185a62:	4b8e      	ldr	r3, [pc, #568]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185a64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34185a68:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185a6c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185a70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34185a76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34185a7c:	3b01      	subs	r3, #1
34185a7e:	041b      	lsls	r3, r3, #16
34185a80:	4313      	orrs	r3, r2
34185a82:	4a86      	ldr	r2, [pc, #536]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185a84:	430b      	orrs	r3, r1
34185a86:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34185a8a:	f7ff fbb3 	bl	341851f4 <LL_RCC_IC5_Enable>
34185a8e:	e076      	b.n	34185b7e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
34185a90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34185a98:	2b05      	cmp	r3, #5
34185a9a:	d116      	bne.n	34185aca <HAL_RCCEx_PeriphCLKConfig+0x192>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185a9c:	4b7f      	ldr	r3, [pc, #508]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185aa2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185aa6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185aaa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185aae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185ab0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185ab6:	3b01      	subs	r3, #1
34185ab8:	041b      	lsls	r3, r3, #16
34185aba:	4313      	orrs	r3, r2
34185abc:	4a77      	ldr	r2, [pc, #476]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185abe:	430b      	orrs	r3, r1
34185ac0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185ac4:	f7ff fc96 	bl	341853f4 <LL_RCC_IC10_Enable>
34185ac8:	e059      	b.n	34185b7e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
34185aca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ace:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34185ad2:	2b06      	cmp	r3, #6
34185ad4:	d116      	bne.n	34185b04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185ad6:	4b71      	ldr	r3, [pc, #452]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185ad8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185adc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185ae0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185ae4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ae8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185aea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185aee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185af0:	3b01      	subs	r3, #1
34185af2:	041b      	lsls	r3, r3, #16
34185af4:	4313      	orrs	r3, r2
34185af6:	4a69      	ldr	r2, [pc, #420]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185af8:	430b      	orrs	r3, r1
34185afa:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185afe:	f7ff fd79 	bl	341855f4 <LL_RCC_IC15_Enable>
34185b02:	e03c      	b.n	34185b7e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
34185b04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34185b0c:	2b03      	cmp	r3, #3
34185b0e:	d118      	bne.n	34185b42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34185b10:	4b62      	ldr	r3, [pc, #392]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185b12:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34185b16:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185b1a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185b1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b22:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
34185b26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
34185b2e:	3b01      	subs	r3, #1
34185b30:	041b      	lsls	r3, r3, #16
34185b32:	4313      	orrs	r3, r2
34185b34:	4a59      	ldr	r2, [pc, #356]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185b36:	430b      	orrs	r3, r1
34185b38:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
34185b3c:	f7ff fe5a 	bl	341857f4 <LL_RCC_IC19_Enable>
34185b40:	e01d      	b.n	34185b7e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
34185b42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34185b4a:	2b07      	cmp	r3, #7
34185b4c:	d117      	bne.n	34185b7e <HAL_RCCEx_PeriphCLKConfig+0x246>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34185b4e:	4b53      	ldr	r3, [pc, #332]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185b50:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34185b54:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185b58:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185b5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b60:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34185b64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34185b6c:	3b01      	subs	r3, #1
34185b6e:	041b      	lsls	r3, r3, #16
34185b70:	4313      	orrs	r3, r2
34185b72:	4a4a      	ldr	r2, [pc, #296]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185b74:	430b      	orrs	r3, r1
34185b76:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
34185b7a:	f7ff fe7b 	bl	34185874 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
34185b7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34185b86:	4618      	mov	r0, r3
34185b88:	f7fe fcd2 	bl	34184530 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
34185b8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b90:	e9d3 2300 	ldrd	r2, r3, [r3]
34185b94:	f04f 0a00 	mov.w	sl, #0
34185b98:	f403 0b80 	and.w	fp, r3, #4194304	@ 0x400000
34185b9c:	ea5a 030b 	orrs.w	r3, sl, fp
34185ba0:	d04b      	beq.n	34185c3a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
34185ba2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ba6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34185baa:	4b3d      	ldr	r3, [pc, #244]	@ (34185ca0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
34185bac:	429a      	cmp	r2, r3
34185bae:	d116      	bne.n	34185bde <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34185bb0:	4b3a      	ldr	r3, [pc, #232]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185bb2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34185bb6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185bba:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185bbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bc2:	699a      	ldr	r2, [r3, #24]
34185bc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bc8:	69db      	ldr	r3, [r3, #28]
34185bca:	3b01      	subs	r3, #1
34185bcc:	041b      	lsls	r3, r3, #16
34185bce:	4313      	orrs	r3, r2
34185bd0:	4a32      	ldr	r2, [pc, #200]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185bd2:	430b      	orrs	r3, r1
34185bd4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34185bd8:	f7ff fa8c 	bl	341850f4 <LL_RCC_IC3_Enable>
34185bdc:	e026      	b.n	34185c2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34185bde:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185be2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34185be6:	4b2f      	ldr	r3, [pc, #188]	@ (34185ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
34185be8:	429a      	cmp	r2, r3
34185bea:	d116      	bne.n	34185c1a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34185bec:	4b2b      	ldr	r3, [pc, #172]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185bee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185bf2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185bf6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185bfa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bfe:	6a1a      	ldr	r2, [r3, #32]
34185c00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185c06:	3b01      	subs	r3, #1
34185c08:	041b      	lsls	r3, r3, #16
34185c0a:	4313      	orrs	r3, r2
34185c0c:	4a23      	ldr	r2, [pc, #140]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185c0e:	430b      	orrs	r3, r1
34185c10:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34185c14:	f7ff faae 	bl	34185174 <LL_RCC_IC4_Enable>
34185c18:	e008      	b.n	34185c2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
34185c1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c1e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34185c22:	4b21      	ldr	r3, [pc, #132]	@ (34185ca8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
34185c24:	429a      	cmp	r2, r3
34185c26:	d101      	bne.n	34185c2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      LL_RCC_CLKP_Enable();
34185c28:	f7ff fe64 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
34185c2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
34185c34:	4618      	mov	r0, r3
34185c36:	f7fe fe0b 	bl	34184850 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
34185c3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
34185c42:	2100      	movs	r1, #0
34185c44:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
34185c48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34185c4c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
34185c50:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
34185c54:	4603      	mov	r3, r0
34185c56:	460a      	mov	r2, r1
34185c58:	4313      	orrs	r3, r2
34185c5a:	d057      	beq.n	34185d0c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
34185c5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34185c64:	4b11      	ldr	r3, [pc, #68]	@ (34185cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
34185c66:	429a      	cmp	r2, r3
34185c68:	d122      	bne.n	34185cb0 <HAL_RCCEx_PeriphCLKConfig+0x378>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34185c6a:	4b0c      	ldr	r3, [pc, #48]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185c6c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34185c70:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185c74:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185c78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c7c:	699a      	ldr	r2, [r3, #24]
34185c7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c82:	69db      	ldr	r3, [r3, #28]
34185c84:	3b01      	subs	r3, #1
34185c86:	041b      	lsls	r3, r3, #16
34185c88:	4313      	orrs	r3, r2
34185c8a:	4a04      	ldr	r2, [pc, #16]	@ (34185c9c <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185c8c:	430b      	orrs	r3, r1
34185c8e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34185c92:	f7ff fa2f 	bl	341850f4 <LL_RCC_IC3_Enable>
34185c96:	e032      	b.n	34185cfe <HAL_RCCEx_PeriphCLKConfig+0x3c6>
34185c98:	56024800 	.word	0x56024800
34185c9c:	56028000 	.word	0x56028000
34185ca0:	03020014 	.word	0x03020014
34185ca4:	03030014 	.word	0x03030014
34185ca8:	03010014 	.word	0x03010014
34185cac:	03020414 	.word	0x03020414
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
34185cb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cb4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34185cb8:	4bc5      	ldr	r3, [pc, #788]	@ (34185fd0 <HAL_RCCEx_PeriphCLKConfig+0x698>)
34185cba:	429a      	cmp	r2, r3
34185cbc:	d116      	bne.n	34185cec <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34185cbe:	4bc5      	ldr	r3, [pc, #788]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185cc0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185cc4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185cc8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185ccc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cd0:	6a1a      	ldr	r2, [r3, #32]
34185cd2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185cd8:	3b01      	subs	r3, #1
34185cda:	041b      	lsls	r3, r3, #16
34185cdc:	4313      	orrs	r3, r2
34185cde:	4abd      	ldr	r2, [pc, #756]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185ce0:	430b      	orrs	r3, r1
34185ce2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34185ce6:	f7ff fa45 	bl	34185174 <LL_RCC_IC4_Enable>
34185cea:	e008      	b.n	34185cfe <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
34185cec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cf0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34185cf4:	4bb8      	ldr	r3, [pc, #736]	@ (34185fd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
34185cf6:	429a      	cmp	r2, r3
34185cf8:	d101      	bne.n	34185cfe <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    {
      LL_RCC_CLKP_Enable();
34185cfa:	f7ff fdfb 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
34185cfe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34185d06:	4618      	mov	r0, r3
34185d08:	f7fe fda2 	bl	34184850 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
34185d0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d10:	e9d3 2300 	ldrd	r2, r3, [r3]
34185d14:	2100      	movs	r1, #0
34185d16:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
34185d1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34185d1e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
34185d22:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
34185d26:	4603      	mov	r3, r0
34185d28:	460a      	mov	r2, r1
34185d2a:	4313      	orrs	r3, r2
34185d2c:	d04b      	beq.n	34185dc6 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
34185d2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d32:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34185d36:	4ba9      	ldr	r3, [pc, #676]	@ (34185fdc <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
34185d38:	429a      	cmp	r2, r3
34185d3a:	d116      	bne.n	34185d6a <HAL_RCCEx_PeriphCLKConfig+0x432>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34185d3c:	4ba5      	ldr	r3, [pc, #660]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185d3e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34185d42:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185d46:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185d4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d4e:	699a      	ldr	r2, [r3, #24]
34185d50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d54:	69db      	ldr	r3, [r3, #28]
34185d56:	3b01      	subs	r3, #1
34185d58:	041b      	lsls	r3, r3, #16
34185d5a:	4313      	orrs	r3, r2
34185d5c:	4a9d      	ldr	r2, [pc, #628]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185d5e:	430b      	orrs	r3, r1
34185d60:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34185d64:	f7ff f9c6 	bl	341850f4 <LL_RCC_IC3_Enable>
34185d68:	e026      	b.n	34185db8 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
34185d6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d6e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34185d72:	4b9b      	ldr	r3, [pc, #620]	@ (34185fe0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
34185d74:	429a      	cmp	r2, r3
34185d76:	d116      	bne.n	34185da6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34185d78:	4b96      	ldr	r3, [pc, #600]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185d7a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185d7e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185d82:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185d86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d8a:	6a1a      	ldr	r2, [r3, #32]
34185d8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185d92:	3b01      	subs	r3, #1
34185d94:	041b      	lsls	r3, r3, #16
34185d96:	4313      	orrs	r3, r2
34185d98:	4a8e      	ldr	r2, [pc, #568]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185d9a:	430b      	orrs	r3, r1
34185d9c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34185da0:	f7ff f9e8 	bl	34185174 <LL_RCC_IC4_Enable>
34185da4:	e008      	b.n	34185db8 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
34185da6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185daa:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34185dae:	4b8d      	ldr	r3, [pc, #564]	@ (34185fe4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
34185db0:	429a      	cmp	r2, r3
34185db2:	d101      	bne.n	34185db8 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      LL_RCC_CLKP_Enable();
34185db4:	f7ff fd9e 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
34185db8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185dbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34185dc0:	4618      	mov	r0, r3
34185dc2:	f7fe fd45 	bl	34184850 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
34185dc6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185dca:	e9d3 2300 	ldrd	r2, r3, [r3]
34185dce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
34185dd2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
34185dd6:	2300      	movs	r3, #0
34185dd8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
34185ddc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
34185de0:	4603      	mov	r3, r0
34185de2:	460a      	mov	r2, r1
34185de4:	4313      	orrs	r3, r2
34185de6:	d048      	beq.n	34185e7a <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34185de8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185dec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34185df0:	2b20      	cmp	r3, #32
34185df2:	d116      	bne.n	34185e22 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34185df4:	4b77      	ldr	r3, [pc, #476]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185df6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34185dfa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185dfe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185e02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e06:	699a      	ldr	r2, [r3, #24]
34185e08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e0c:	69db      	ldr	r3, [r3, #28]
34185e0e:	3b01      	subs	r3, #1
34185e10:	041b      	lsls	r3, r3, #16
34185e12:	4313      	orrs	r3, r2
34185e14:	4a6f      	ldr	r2, [pc, #444]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185e16:	430b      	orrs	r3, r1
34185e18:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34185e1c:	f7ff f96a 	bl	341850f4 <LL_RCC_IC3_Enable>
34185e20:	e024      	b.n	34185e6c <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
34185e22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34185e2a:	2b30      	cmp	r3, #48	@ 0x30
34185e2c:	d116      	bne.n	34185e5c <HAL_RCCEx_PeriphCLKConfig+0x524>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34185e2e:	4b69      	ldr	r3, [pc, #420]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185e30:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185e34:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185e38:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185e3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e40:	6a1a      	ldr	r2, [r3, #32]
34185e42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185e48:	3b01      	subs	r3, #1
34185e4a:	041b      	lsls	r3, r3, #16
34185e4c:	4313      	orrs	r3, r2
34185e4e:	4a61      	ldr	r2, [pc, #388]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185e50:	430b      	orrs	r3, r1
34185e52:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34185e56:	f7ff f98d 	bl	34185174 <LL_RCC_IC4_Enable>
34185e5a:	e007      	b.n	34185e6c <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34185e5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34185e64:	2b10      	cmp	r3, #16
34185e66:	d101      	bne.n	34185e6c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      LL_RCC_CLKP_Enable();
34185e68:	f7ff fd44 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
34185e6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34185e74:	4618      	mov	r0, r3
34185e76:	f7fe fc03 	bl	34184680 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
34185e7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
34185e82:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
34185e86:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
34185e8a:	2300      	movs	r3, #0
34185e8c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
34185e90:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
34185e94:	4603      	mov	r3, r0
34185e96:	460a      	mov	r2, r1
34185e98:	4313      	orrs	r3, r2
34185e9a:	d04b      	beq.n	34185f34 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34185e9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ea0:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34185ea4:	4b50      	ldr	r3, [pc, #320]	@ (34185fe8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
34185ea6:	429a      	cmp	r2, r3
34185ea8:	d116      	bne.n	34185ed8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34185eaa:	4b4a      	ldr	r3, [pc, #296]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185eac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185eb0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185eb4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185eb8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ebc:	6a1a      	ldr	r2, [r3, #32]
34185ebe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185ec4:	3b01      	subs	r3, #1
34185ec6:	041b      	lsls	r3, r3, #16
34185ec8:	4313      	orrs	r3, r2
34185eca:	4a42      	ldr	r2, [pc, #264]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185ecc:	430b      	orrs	r3, r1
34185ece:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34185ed2:	f7ff f94f 	bl	34185174 <LL_RCC_IC4_Enable>
34185ed6:	e026      	b.n	34185f26 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34185ed8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185edc:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34185ee0:	4b42      	ldr	r3, [pc, #264]	@ (34185fec <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
34185ee2:	429a      	cmp	r2, r3
34185ee4:	d116      	bne.n	34185f14 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34185ee6:	4b3b      	ldr	r3, [pc, #236]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185ee8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34185eec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185ef0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185ef4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ef8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34185efa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34185f00:	3b01      	subs	r3, #1
34185f02:	041b      	lsls	r3, r3, #16
34185f04:	4313      	orrs	r3, r2
34185f06:	4a33      	ldr	r2, [pc, #204]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185f08:	430b      	orrs	r3, r1
34185f0a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34185f0e:	f7ff f971 	bl	341851f4 <LL_RCC_IC5_Enable>
34185f12:	e008      	b.n	34185f26 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
34185f14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f18:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34185f1c:	4b34      	ldr	r3, [pc, #208]	@ (34185ff0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
34185f1e:	429a      	cmp	r2, r3
34185f20:	d101      	bne.n	34185f26 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      LL_RCC_CLKP_Enable();
34185f22:	f7ff fce7 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
34185f26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f2a:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
34185f2e:	4618      	mov	r0, r3
34185f30:	f7fe fc57 	bl	341847e2 <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
34185f34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f38:	e9d3 2300 	ldrd	r2, r3, [r3]
34185f3c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
34185f40:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
34185f44:	2300      	movs	r3, #0
34185f46:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
34185f4a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
34185f4e:	4603      	mov	r3, r0
34185f50:	460a      	mov	r2, r1
34185f52:	4313      	orrs	r3, r2
34185f54:	d062      	beq.n	3418601c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
34185f56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f5a:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34185f5e:	4b25      	ldr	r3, [pc, #148]	@ (34185ff4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
34185f60:	429a      	cmp	r2, r3
34185f62:	d116      	bne.n	34185f92 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34185f64:	4b1b      	ldr	r3, [pc, #108]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185f66:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185f6a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185f6e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185f72:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f76:	6a1a      	ldr	r2, [r3, #32]
34185f78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185f7e:	3b01      	subs	r3, #1
34185f80:	041b      	lsls	r3, r3, #16
34185f82:	4313      	orrs	r3, r2
34185f84:	4a13      	ldr	r2, [pc, #76]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185f86:	430b      	orrs	r3, r1
34185f88:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34185f8c:	f7ff f8f2 	bl	34185174 <LL_RCC_IC4_Enable>
34185f90:	e03d      	b.n	3418600e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
34185f92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f96:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34185f9a:	4b17      	ldr	r3, [pc, #92]	@ (34185ff8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
34185f9c:	429a      	cmp	r2, r3
34185f9e:	d12d      	bne.n	34185ffc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34185fa0:	4b0c      	ldr	r3, [pc, #48]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185fa2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34185fa6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185faa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185fae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185fb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34185fb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34185fba:	3b01      	subs	r3, #1
34185fbc:	041b      	lsls	r3, r3, #16
34185fbe:	4313      	orrs	r3, r2
34185fc0:	4a04      	ldr	r2, [pc, #16]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185fc2:	430b      	orrs	r3, r1
34185fc4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34185fc8:	f7ff f914 	bl	341851f4 <LL_RCC_IC5_Enable>
34185fcc:	e01f      	b.n	3418600e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
34185fce:	bf00      	nop
34185fd0:	03030414 	.word	0x03030414
34185fd4:	56028000 	.word	0x56028000
34185fd8:	03010414 	.word	0x03010414
34185fdc:	03020814 	.word	0x03020814
34185fe0:	03030814 	.word	0x03030814
34185fe4:	03010814 	.word	0x03010814
34185fe8:	0302001c 	.word	0x0302001c
34185fec:	0303001c 	.word	0x0303001c
34185ff0:	0301001c 	.word	0x0301001c
34185ff4:	0302041c 	.word	0x0302041c
34185ff8:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
34185ffc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186000:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34186004:	4bb3      	ldr	r3, [pc, #716]	@ (341862d4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
34186006:	429a      	cmp	r2, r3
34186008:	d101      	bne.n	3418600e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      LL_RCC_CLKP_Enable();
3418600a:	f7ff fc73 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
3418600e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186012:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
34186016:	4618      	mov	r0, r3
34186018:	f7fe fbe3 	bl	341847e2 <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
3418601c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186020:	e9d3 2300 	ldrd	r2, r3, [r3]
34186024:	f002 0301 	and.w	r3, r2, #1
34186028:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
3418602c:	2300      	movs	r3, #0
3418602e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
34186032:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
34186036:	4603      	mov	r3, r0
34186038:	460a      	mov	r2, r1
3418603a:	4313      	orrs	r3, r2
3418603c:	d057      	beq.n	341860ee <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
3418603e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186042:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34186046:	2b20      	cmp	r3, #32
34186048:	d116      	bne.n	34186078 <HAL_RCCEx_PeriphCLKConfig+0x740>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418604a:	4ba3      	ldr	r3, [pc, #652]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418604c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34186050:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186054:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186058:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418605c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418605e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34186064:	3b01      	subs	r3, #1
34186066:	041b      	lsls	r3, r3, #16
34186068:	4313      	orrs	r3, r2
3418606a:	4a9b      	ldr	r2, [pc, #620]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418606c:	430b      	orrs	r3, r1
3418606e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34186072:	f7ff f8ff 	bl	34185274 <LL_RCC_IC7_Enable>
34186076:	e024      	b.n	341860c2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34186078:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418607c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34186080:	2b30      	cmp	r3, #48	@ 0x30
34186082:	d116      	bne.n	341860b2 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186084:	4b94      	ldr	r3, [pc, #592]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34186086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418608a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418608e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186092:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186098:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418609c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418609e:	3b01      	subs	r3, #1
341860a0:	041b      	lsls	r3, r3, #16
341860a2:	4313      	orrs	r3, r2
341860a4:	4a8c      	ldr	r2, [pc, #560]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341860a6:	430b      	orrs	r3, r1
341860a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341860ac:	f7ff f922 	bl	341852f4 <LL_RCC_IC8_Enable>
341860b0:	e007      	b.n	341860c2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
341860b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341860ba:	2b10      	cmp	r3, #16
341860bc:	d101      	bne.n	341860c2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      LL_RCC_CLKP_Enable();
341860be:	f7ff fc19 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
341860c2:	4b85      	ldr	r3, [pc, #532]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341860c4:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341860c8:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
341860cc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
341860d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
341860d8:	3b01      	subs	r3, #1
341860da:	021a      	lsls	r2, r3, #8
341860dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341860e4:	4313      	orrs	r3, r2
341860e6:	4a7c      	ldr	r2, [pc, #496]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341860e8:	430b      	orrs	r3, r1
341860ea:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
341860ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860f2:	e9d3 2300 	ldrd	r2, r3, [r3]
341860f6:	f002 0302 	and.w	r3, r2, #2
341860fa:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
341860fe:	2300      	movs	r3, #0
34186100:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
34186104:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
34186108:	4603      	mov	r3, r0
3418610a:	460a      	mov	r2, r1
3418610c:	4313      	orrs	r3, r2
3418610e:	d048      	beq.n	341861a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
34186110:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186114:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34186118:	2b02      	cmp	r3, #2
3418611a:	d116      	bne.n	3418614a <HAL_RCCEx_PeriphCLKConfig+0x812>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418611c:	4b6e      	ldr	r3, [pc, #440]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418611e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34186122:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186126:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418612a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418612e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34186130:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34186136:	3b01      	subs	r3, #1
34186138:	041b      	lsls	r3, r3, #16
3418613a:	4313      	orrs	r3, r2
3418613c:	4a66      	ldr	r2, [pc, #408]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418613e:	430b      	orrs	r3, r1
34186140:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34186144:	f7ff f896 	bl	34185274 <LL_RCC_IC7_Enable>
34186148:	e024      	b.n	34186194 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
3418614a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418614e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34186152:	2b03      	cmp	r3, #3
34186154:	d116      	bne.n	34186184 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186156:	4b60      	ldr	r3, [pc, #384]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34186158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418615c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186160:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186164:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418616a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418616e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186170:	3b01      	subs	r3, #1
34186172:	041b      	lsls	r3, r3, #16
34186174:	4313      	orrs	r3, r2
34186176:	4a58      	ldr	r2, [pc, #352]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34186178:	430b      	orrs	r3, r1
3418617a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418617e:	f7ff f8b9 	bl	341852f4 <LL_RCC_IC8_Enable>
34186182:	e007      	b.n	34186194 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
34186184:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186188:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418618c:	2b01      	cmp	r3, #1
3418618e:	d101      	bne.n	34186194 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      LL_RCC_CLKP_Enable();
34186190:	f7ff fbb0 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
34186194:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186198:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418619c:	4618      	mov	r0, r3
3418619e:	f7fe f9b1 	bl	34184504 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
341861a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861a6:	e9d3 2300 	ldrd	r2, r3, [r3]
341861aa:	f002 0308 	and.w	r3, r2, #8
341861ae:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
341861b2:	2300      	movs	r3, #0
341861b4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
341861b8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
341861bc:	4603      	mov	r3, r0
341861be:	460a      	mov	r2, r1
341861c0:	4313      	orrs	r3, r2
341861c2:	d017      	beq.n	341861f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
341861c4:	4b44      	ldr	r3, [pc, #272]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341861c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
341861ca:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341861ce:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341861d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
341861da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341861e2:	3b01      	subs	r3, #1
341861e4:	041b      	lsls	r3, r3, #16
341861e6:	4313      	orrs	r3, r2
341861e8:	4a3b      	ldr	r2, [pc, #236]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341861ea:	430b      	orrs	r3, r1
341861ec:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
341861f0:	f7ff fac0 	bl	34185774 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
341861f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861f8:	e9d3 2300 	ldrd	r2, r3, [r3]
341861fc:	f002 0310 	and.w	r3, r2, #16
34186200:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
34186204:	2300      	movs	r3, #0
34186206:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
3418620a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
3418620e:	4603      	mov	r3, r0
34186210:	460a      	mov	r2, r1
34186212:	4313      	orrs	r3, r2
34186214:	d02f      	beq.n	34186276 <HAL_RCCEx_PeriphCLKConfig+0x93e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
34186216:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418621a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418621e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34186222:	d118      	bne.n	34186256 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
34186224:	4b2c      	ldr	r3, [pc, #176]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34186226:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3418622a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418622e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186232:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186236:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3418623a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418623e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34186242:	3b01      	subs	r3, #1
34186244:	041b      	lsls	r3, r3, #16
34186246:	4313      	orrs	r3, r2
34186248:	4a23      	ldr	r2, [pc, #140]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418624a:	430b      	orrs	r3, r1
3418624c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
34186250:	f7ff fa50 	bl	341856f4 <LL_RCC_IC17_Enable>
34186254:	e008      	b.n	34186268 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
34186256:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418625a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3418625e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34186262:	d101      	bne.n	34186268 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      LL_RCC_CLKP_Enable();
34186264:	f7ff fb46 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
34186268:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418626c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34186270:	4618      	mov	r0, r3
34186272:	f7fe f973 	bl	3418455c <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
34186276:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418627a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418627e:	f002 0320 	and.w	r3, r2, #32
34186282:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
34186286:	2300      	movs	r3, #0
34186288:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
3418628c:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
34186290:	4603      	mov	r3, r0
34186292:	460a      	mov	r2, r1
34186294:	4313      	orrs	r3, r2
34186296:	d031      	beq.n	341862fc <HAL_RCCEx_PeriphCLKConfig+0x9c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34186298:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418629c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341862a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
341862a4:	d11a      	bne.n	341862dc <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
341862a6:	4b0c      	ldr	r3, [pc, #48]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341862a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
341862ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341862b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341862b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
341862ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
341862c0:	3b01      	subs	r3, #1
341862c2:	041b      	lsls	r3, r3, #16
341862c4:	4313      	orrs	r3, r2
341862c6:	4a04      	ldr	r2, [pc, #16]	@ (341862d8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341862c8:	430b      	orrs	r3, r1
341862ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
341862ce:	f7ff f8d1 	bl	34185474 <LL_RCC_IC12_Enable>
341862d2:	e00c      	b.n	341862ee <HAL_RCCEx_PeriphCLKConfig+0x9b6>
341862d4:	0301041c 	.word	0x0301041c
341862d8:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
341862dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341862e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
341862e8:	d101      	bne.n	341862ee <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      LL_RCC_CLKP_Enable();
341862ea:	f7ff fb03 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
341862ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341862f6:	4618      	mov	r0, r3
341862f8:	f7fe f946 	bl	34184588 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
341862fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186300:	e9d3 2300 	ldrd	r2, r3, [r3]
34186304:	f002 0340 	and.w	r3, r2, #64	@ 0x40
34186308:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
3418630c:	2300      	movs	r3, #0
3418630e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
34186312:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
34186316:	4603      	mov	r3, r0
34186318:	460a      	mov	r2, r1
3418631a:	4313      	orrs	r3, r2
3418631c:	d006      	beq.n	3418632c <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
3418631e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186322:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34186326:	4618      	mov	r0, r3
34186328:	f7fe f944 	bl	341845b4 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
3418632c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186330:	e9d3 2300 	ldrd	r2, r3, [r3]
34186334:	f002 0380 	and.w	r3, r2, #128	@ 0x80
34186338:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
3418633c:	2300      	movs	r3, #0
3418633e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
34186342:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
34186346:	4603      	mov	r3, r0
34186348:	460a      	mov	r2, r1
3418634a:	4313      	orrs	r3, r2
3418634c:	d006      	beq.n	3418635c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
3418634e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186352:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34186356:	4618      	mov	r0, r3
34186358:	f7fe f950 	bl	341845fc <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
3418635c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186360:	e9d3 2300 	ldrd	r2, r3, [r3]
34186364:	f402 7380 	and.w	r3, r2, #256	@ 0x100
34186368:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
3418636c:	2300      	movs	r3, #0
3418636e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
34186372:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
34186376:	4603      	mov	r3, r0
34186378:	460a      	mov	r2, r1
3418637a:	4313      	orrs	r3, r2
3418637c:	d006      	beq.n	3418638c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
3418637e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34186386:	4618      	mov	r0, r3
34186388:	f7fe f94e 	bl	34184628 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
3418638c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186390:	e9d3 2300 	ldrd	r2, r3, [r3]
34186394:	f402 7300 	and.w	r3, r2, #512	@ 0x200
34186398:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
3418639c:	2300      	movs	r3, #0
3418639e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
341863a2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
341863a6:	4603      	mov	r3, r0
341863a8:	460a      	mov	r2, r1
341863aa:	4313      	orrs	r3, r2
341863ac:	d038      	beq.n	34186420 <HAL_RCCEx_PeriphCLKConfig+0xae8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
341863ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341863b6:	2b02      	cmp	r3, #2
341863b8:	d116      	bne.n	341863e8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
341863ba:	4bbc      	ldr	r3, [pc, #752]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341863bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
341863c0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341863c4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341863c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863cc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
341863ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
341863d4:	3b01      	subs	r3, #1
341863d6:	041b      	lsls	r3, r3, #16
341863d8:	4313      	orrs	r3, r2
341863da:	4ab4      	ldr	r2, [pc, #720]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341863dc:	430b      	orrs	r3, r1
341863de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
341863e2:	f7ff f887 	bl	341854f4 <LL_RCC_IC13_Enable>
341863e6:	e007      	b.n	341863f8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
341863e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341863f0:	2b01      	cmp	r3, #1
341863f2:	d101      	bne.n	341863f8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    {
      LL_RCC_CLKP_Enable();
341863f4:	f7ff fa7e 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
341863f8:	4bac      	ldr	r3, [pc, #688]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341863fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341863fe:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
34186402:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418640a:	3b01      	subs	r3, #1
3418640c:	011a      	lsls	r2, r3, #4
3418640e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186412:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34186416:	4313      	orrs	r3, r2
34186418:	4aa4      	ldr	r2, [pc, #656]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418641a:	430b      	orrs	r3, r1
3418641c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34186420:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186424:	e9d3 2300 	ldrd	r2, r3, [r3]
34186428:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
3418642c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
34186430:	2300      	movs	r3, #0
34186432:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
34186436:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
3418643a:	4603      	mov	r3, r0
3418643c:	460a      	mov	r2, r1
3418643e:	4313      	orrs	r3, r2
34186440:	d02d      	beq.n	3418649e <HAL_RCCEx_PeriphCLKConfig+0xb66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
34186442:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186446:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418644a:	2b02      	cmp	r3, #2
3418644c:	d118      	bne.n	34186480 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3418644e:	4b97      	ldr	r3, [pc, #604]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186450:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34186454:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186458:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418645c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186460:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
34186464:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186468:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3418646c:	3b01      	subs	r3, #1
3418646e:	041b      	lsls	r3, r3, #16
34186470:	4313      	orrs	r3, r2
34186472:	4a8e      	ldr	r2, [pc, #568]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186474:	430b      	orrs	r3, r1
34186476:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3418647a:	f7ff f9bb 	bl	341857f4 <LL_RCC_IC19_Enable>
3418647e:	e007      	b.n	34186490 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
34186480:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186484:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186488:	2b01      	cmp	r3, #1
3418648a:	d101      	bne.n	34186490 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
      LL_RCC_CLKP_Enable();
3418648c:	f7ff fa32 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
34186490:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186494:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186498:	4618      	mov	r0, r3
3418649a:	f7fe f8db 	bl	34184654 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
3418649e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864a2:	e9d3 2300 	ldrd	r2, r3, [r3]
341864a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
341864aa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
341864ae:	2300      	movs	r3, #0
341864b0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
341864b4:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
341864b8:	4603      	mov	r3, r0
341864ba:	460a      	mov	r2, r1
341864bc:	4313      	orrs	r3, r2
341864be:	d04b      	beq.n	34186558 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
341864c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864c4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
341864c8:	4b79      	ldr	r3, [pc, #484]	@ (341866b0 <HAL_RCCEx_PeriphCLKConfig+0xd78>)
341864ca:	429a      	cmp	r2, r3
341864cc:	d116      	bne.n	341864fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
341864ce:	4b77      	ldr	r3, [pc, #476]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341864d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341864d4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341864d8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341864dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
341864e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341864e8:	3b01      	subs	r3, #1
341864ea:	041b      	lsls	r3, r3, #16
341864ec:	4313      	orrs	r3, r2
341864ee:	4a6f      	ldr	r2, [pc, #444]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341864f0:	430b      	orrs	r3, r1
341864f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
341864f6:	f7fe ff7d 	bl	341853f4 <LL_RCC_IC10_Enable>
341864fa:	e026      	b.n	3418654a <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
341864fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186500:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34186504:	4b6b      	ldr	r3, [pc, #428]	@ (341866b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
34186506:	429a      	cmp	r2, r3
34186508:	d116      	bne.n	34186538 <HAL_RCCEx_PeriphCLKConfig+0xc00>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418650a:	4b68      	ldr	r3, [pc, #416]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418650c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186510:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186514:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186518:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418651c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418651e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186522:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186524:	3b01      	subs	r3, #1
34186526:	041b      	lsls	r3, r3, #16
34186528:	4313      	orrs	r3, r2
3418652a:	4a60      	ldr	r2, [pc, #384]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418652c:	430b      	orrs	r3, r1
3418652e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186532:	f7ff f85f 	bl	341855f4 <LL_RCC_IC15_Enable>
34186536:	e008      	b.n	3418654a <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34186538:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418653c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34186540:	4b5d      	ldr	r3, [pc, #372]	@ (341866b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
34186542:	429a      	cmp	r2, r3
34186544:	d101      	bne.n	3418654a <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      LL_RCC_CLKP_Enable();
34186546:	f7ff f9d5 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
3418654a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418654e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34186552:	4618      	mov	r0, r3
34186554:	f7fe f8aa 	bl	341846ac <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34186558:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418655c:	e9d3 2300 	ldrd	r2, r3, [r3]
34186560:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
34186564:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
34186568:	2300      	movs	r3, #0
3418656a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
3418656e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
34186572:	4603      	mov	r3, r0
34186574:	460a      	mov	r2, r1
34186576:	4313      	orrs	r3, r2
34186578:	d04b      	beq.n	34186612 <HAL_RCCEx_PeriphCLKConfig+0xcda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
3418657a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418657e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34186582:	4b4e      	ldr	r3, [pc, #312]	@ (341866bc <HAL_RCCEx_PeriphCLKConfig+0xd84>)
34186584:	429a      	cmp	r2, r3
34186586:	d116      	bne.n	341865b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34186588:	4b48      	ldr	r3, [pc, #288]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3418658a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418658e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186592:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186596:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418659a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418659c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341865a2:	3b01      	subs	r3, #1
341865a4:	041b      	lsls	r3, r3, #16
341865a6:	4313      	orrs	r3, r2
341865a8:	4a40      	ldr	r2, [pc, #256]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341865aa:	430b      	orrs	r3, r1
341865ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
341865b0:	f7fe ff20 	bl	341853f4 <LL_RCC_IC10_Enable>
341865b4:	e026      	b.n	34186604 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
341865b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865ba:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
341865be:	4b40      	ldr	r3, [pc, #256]	@ (341866c0 <HAL_RCCEx_PeriphCLKConfig+0xd88>)
341865c0:	429a      	cmp	r2, r3
341865c2:	d116      	bne.n	341865f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341865c4:	4b39      	ldr	r3, [pc, #228]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341865c6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341865ca:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341865ce:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341865d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865d6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341865d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341865de:	3b01      	subs	r3, #1
341865e0:	041b      	lsls	r3, r3, #16
341865e2:	4313      	orrs	r3, r2
341865e4:	4a31      	ldr	r2, [pc, #196]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341865e6:	430b      	orrs	r3, r1
341865e8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341865ec:	f7ff f802 	bl	341855f4 <LL_RCC_IC15_Enable>
341865f0:	e008      	b.n	34186604 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
341865f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865f6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
341865fa:	4b32      	ldr	r3, [pc, #200]	@ (341866c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>)
341865fc:	429a      	cmp	r2, r3
341865fe:	d101      	bne.n	34186604 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      LL_RCC_CLKP_Enable();
34186600:	f7ff f978 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
34186604:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186608:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3418660c:	4618      	mov	r0, r3
3418660e:	f7fe f84d 	bl	341846ac <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34186612:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186616:	e9d3 2300 	ldrd	r2, r3, [r3]
3418661a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
3418661e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
34186622:	2300      	movs	r3, #0
34186624:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
34186628:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
3418662c:	4603      	mov	r3, r0
3418662e:	460a      	mov	r2, r1
34186630:	4313      	orrs	r3, r2
34186632:	d05d      	beq.n	341866f0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34186634:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186638:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3418663c:	4b22      	ldr	r3, [pc, #136]	@ (341866c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>)
3418663e:	429a      	cmp	r2, r3
34186640:	d116      	bne.n	34186670 <HAL_RCCEx_PeriphCLKConfig+0xd38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34186642:	4b1a      	ldr	r3, [pc, #104]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34186648:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418664c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186650:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34186656:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418665a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418665c:	3b01      	subs	r3, #1
3418665e:	041b      	lsls	r3, r3, #16
34186660:	4313      	orrs	r3, r2
34186662:	4a12      	ldr	r2, [pc, #72]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186664:	430b      	orrs	r3, r1
34186666:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418666a:	f7fe fec3 	bl	341853f4 <LL_RCC_IC10_Enable>
3418666e:	e038      	b.n	341866e2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34186670:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186674:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34186678:	4b14      	ldr	r3, [pc, #80]	@ (341866cc <HAL_RCCEx_PeriphCLKConfig+0xd94>)
3418667a:	429a      	cmp	r2, r3
3418667c:	d128      	bne.n	341866d0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418667e:	4b0b      	ldr	r3, [pc, #44]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186680:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186684:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186688:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418668c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186690:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186692:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186696:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186698:	3b01      	subs	r3, #1
3418669a:	041b      	lsls	r3, r3, #16
3418669c:	4313      	orrs	r3, r2
3418669e:	4a03      	ldr	r2, [pc, #12]	@ (341866ac <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341866a0:	430b      	orrs	r3, r1
341866a2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341866a6:	f7fe ffa5 	bl	341855f4 <LL_RCC_IC15_Enable>
341866aa:	e01a      	b.n	341866e2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
341866ac:	56028000 	.word	0x56028000
341866b0:	0702000c 	.word	0x0702000c
341866b4:	0703000c 	.word	0x0703000c
341866b8:	0701000c 	.word	0x0701000c
341866bc:	0702040c 	.word	0x0702040c
341866c0:	0703040c 	.word	0x0703040c
341866c4:	0701040c 	.word	0x0701040c
341866c8:	0702080c 	.word	0x0702080c
341866cc:	0703080c 	.word	0x0703080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
341866d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866d4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
341866d8:	4bc8      	ldr	r3, [pc, #800]	@ (341869fc <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
341866da:	429a      	cmp	r2, r3
341866dc:	d101      	bne.n	341866e2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      LL_RCC_CLKP_Enable();
341866de:	f7ff f909 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
341866e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
341866ea:	4618      	mov	r0, r3
341866ec:	f7fd ffde 	bl	341846ac <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
341866f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866f4:	e9d3 2300 	ldrd	r2, r3, [r3]
341866f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
341866fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
34186700:	2300      	movs	r3, #0
34186702:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
34186706:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
3418670a:	4603      	mov	r3, r0
3418670c:	460a      	mov	r2, r1
3418670e:	4313      	orrs	r3, r2
34186710:	d04b      	beq.n	341867aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34186712:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186716:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3418671a:	4bb9      	ldr	r3, [pc, #740]	@ (34186a00 <HAL_RCCEx_PeriphCLKConfig+0x10c8>)
3418671c:	429a      	cmp	r2, r3
3418671e:	d116      	bne.n	3418674e <HAL_RCCEx_PeriphCLKConfig+0xe16>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34186720:	4bb8      	ldr	r3, [pc, #736]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34186726:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418672a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418672e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186732:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34186734:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418673a:	3b01      	subs	r3, #1
3418673c:	041b      	lsls	r3, r3, #16
3418673e:	4313      	orrs	r3, r2
34186740:	4ab0      	ldr	r2, [pc, #704]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186742:	430b      	orrs	r3, r1
34186744:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34186748:	f7fe fe54 	bl	341853f4 <LL_RCC_IC10_Enable>
3418674c:	e026      	b.n	3418679c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
3418674e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186752:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34186756:	4bac      	ldr	r3, [pc, #688]	@ (34186a08 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
34186758:	429a      	cmp	r2, r3
3418675a:	d116      	bne.n	3418678a <HAL_RCCEx_PeriphCLKConfig+0xe52>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418675c:	4ba9      	ldr	r3, [pc, #676]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418675e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186762:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186766:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418676a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418676e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186770:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186776:	3b01      	subs	r3, #1
34186778:	041b      	lsls	r3, r3, #16
3418677a:	4313      	orrs	r3, r2
3418677c:	4aa1      	ldr	r2, [pc, #644]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418677e:	430b      	orrs	r3, r1
34186780:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186784:	f7fe ff36 	bl	341855f4 <LL_RCC_IC15_Enable>
34186788:	e008      	b.n	3418679c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
3418678a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418678e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34186792:	4b9e      	ldr	r3, [pc, #632]	@ (34186a0c <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
34186794:	429a      	cmp	r2, r3
34186796:	d101      	bne.n	3418679c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      LL_RCC_CLKP_Enable();
34186798:	f7ff f8ac 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
3418679c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
341867a4:	4618      	mov	r0, r3
341867a6:	f7fd ff81 	bl	341846ac <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
341867aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867ae:	e9d3 2300 	ldrd	r2, r3, [r3]
341867b2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
341867b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
341867ba:	2300      	movs	r3, #0
341867bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
341867c0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
341867c4:	4603      	mov	r3, r0
341867c6:	460a      	mov	r2, r1
341867c8:	4313      	orrs	r3, r2
341867ca:	d04b      	beq.n	34186864 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
341867cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867d0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
341867d4:	4b8e      	ldr	r3, [pc, #568]	@ (34186a10 <HAL_RCCEx_PeriphCLKConfig+0x10d8>)
341867d6:	429a      	cmp	r2, r3
341867d8:	d116      	bne.n	34186808 <HAL_RCCEx_PeriphCLKConfig+0xed0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
341867da:	4b8a      	ldr	r3, [pc, #552]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341867dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341867e0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341867e4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341867e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
341867ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341867f4:	3b01      	subs	r3, #1
341867f6:	041b      	lsls	r3, r3, #16
341867f8:	4313      	orrs	r3, r2
341867fa:	4a82      	ldr	r2, [pc, #520]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341867fc:	430b      	orrs	r3, r1
341867fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34186802:	f7fe fdf7 	bl	341853f4 <LL_RCC_IC10_Enable>
34186806:	e026      	b.n	34186856 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34186808:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418680c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34186810:	4b80      	ldr	r3, [pc, #512]	@ (34186a14 <HAL_RCCEx_PeriphCLKConfig+0x10dc>)
34186812:	429a      	cmp	r2, r3
34186814:	d116      	bne.n	34186844 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186816:	4b7b      	ldr	r3, [pc, #492]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186818:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418681c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186820:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186824:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186828:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418682a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418682e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186830:	3b01      	subs	r3, #1
34186832:	041b      	lsls	r3, r3, #16
34186834:	4313      	orrs	r3, r2
34186836:	4a73      	ldr	r2, [pc, #460]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186838:	430b      	orrs	r3, r1
3418683a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418683e:	f7fe fed9 	bl	341855f4 <LL_RCC_IC15_Enable>
34186842:	e008      	b.n	34186856 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
34186844:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186848:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3418684c:	4b72      	ldr	r3, [pc, #456]	@ (34186a18 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
3418684e:	429a      	cmp	r2, r3
34186850:	d101      	bne.n	34186856 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    {
      LL_RCC_CLKP_Enable();
34186852:	f7ff f84f 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
34186856:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418685a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418685e:	4618      	mov	r0, r3
34186860:	f7fd ff2f 	bl	341846c2 <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34186864:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186868:	e9d3 2300 	ldrd	r2, r3, [r3]
3418686c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
34186870:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
34186874:	2300      	movs	r3, #0
34186876:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
3418687a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
3418687e:	4603      	mov	r3, r0
34186880:	460a      	mov	r2, r1
34186882:	4313      	orrs	r3, r2
34186884:	d04b      	beq.n	3418691e <HAL_RCCEx_PeriphCLKConfig+0xfe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34186886:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418688a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3418688e:	4b63      	ldr	r3, [pc, #396]	@ (34186a1c <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
34186890:	429a      	cmp	r2, r3
34186892:	d116      	bne.n	341868c2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34186894:	4b5b      	ldr	r3, [pc, #364]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418689a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418689e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341868a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
341868a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341868ae:	3b01      	subs	r3, #1
341868b0:	041b      	lsls	r3, r3, #16
341868b2:	4313      	orrs	r3, r2
341868b4:	4a53      	ldr	r2, [pc, #332]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341868b6:	430b      	orrs	r3, r1
341868b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
341868bc:	f7fe fd9a 	bl	341853f4 <LL_RCC_IC10_Enable>
341868c0:	e026      	b.n	34186910 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
341868c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868c6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
341868ca:	4b55      	ldr	r3, [pc, #340]	@ (34186a20 <HAL_RCCEx_PeriphCLKConfig+0x10e8>)
341868cc:	429a      	cmp	r2, r3
341868ce:	d116      	bne.n	341868fe <HAL_RCCEx_PeriphCLKConfig+0xfc6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341868d0:	4b4c      	ldr	r3, [pc, #304]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341868d2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341868d6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341868da:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341868de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868e2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341868e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341868ea:	3b01      	subs	r3, #1
341868ec:	041b      	lsls	r3, r3, #16
341868ee:	4313      	orrs	r3, r2
341868f0:	4a44      	ldr	r2, [pc, #272]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341868f2:	430b      	orrs	r3, r1
341868f4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341868f8:	f7fe fe7c 	bl	341855f4 <LL_RCC_IC15_Enable>
341868fc:	e008      	b.n	34186910 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
341868fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186902:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34186906:	4b47      	ldr	r3, [pc, #284]	@ (34186a24 <HAL_RCCEx_PeriphCLKConfig+0x10ec>)
34186908:	429a      	cmp	r2, r3
3418690a:	d101      	bne.n	34186910 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    {
      LL_RCC_CLKP_Enable();
3418690c:	f7fe fff2 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
34186910:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186914:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186918:	4618      	mov	r0, r3
3418691a:	f7fd fed2 	bl	341846c2 <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
3418691e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186922:	e9d3 2300 	ldrd	r2, r3, [r3]
34186926:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
3418692a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
3418692e:	2300      	movs	r3, #0
34186930:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
34186934:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
34186938:	4603      	mov	r3, r0
3418693a:	460a      	mov	r2, r1
3418693c:	4313      	orrs	r3, r2
3418693e:	d02d      	beq.n	3418699c <HAL_RCCEx_PeriphCLKConfig+0x1064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34186940:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186944:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34186948:	4b37      	ldr	r3, [pc, #220]	@ (34186a28 <HAL_RCCEx_PeriphCLKConfig+0x10f0>)
3418694a:	429a      	cmp	r2, r3
3418694c:	d116      	bne.n	3418697c <HAL_RCCEx_PeriphCLKConfig+0x1044>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418694e:	4b2d      	ldr	r3, [pc, #180]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186950:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186954:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186958:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418695c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186960:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186962:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186968:	3b01      	subs	r3, #1
3418696a:	041b      	lsls	r3, r3, #16
3418696c:	4313      	orrs	r3, r2
3418696e:	4a25      	ldr	r2, [pc, #148]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186970:	430b      	orrs	r3, r1
34186972:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186976:	f7fe fe3d 	bl	341855f4 <LL_RCC_IC15_Enable>
3418697a:	e008      	b.n	3418698e <HAL_RCCEx_PeriphCLKConfig+0x1056>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
3418697c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186980:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34186984:	4b29      	ldr	r3, [pc, #164]	@ (34186a2c <HAL_RCCEx_PeriphCLKConfig+0x10f4>)
34186986:	429a      	cmp	r2, r3
34186988:	d101      	bne.n	3418698e <HAL_RCCEx_PeriphCLKConfig+0x1056>
    {
      LL_RCC_CLKP_Enable();
3418698a:	f7fe ffb3 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
3418698e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186992:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34186996:	4618      	mov	r0, r3
34186998:	f7fd fe9e 	bl	341846d8 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
3418699c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869a0:	e9d3 2300 	ldrd	r2, r3, [r3]
341869a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
341869a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
341869ac:	2300      	movs	r3, #0
341869ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
341869b2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
341869b6:	4603      	mov	r3, r0
341869b8:	460a      	mov	r2, r1
341869ba:	4313      	orrs	r3, r2
341869bc:	d04a      	beq.n	34186a54 <HAL_RCCEx_PeriphCLKConfig+0x111c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
341869be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
341869c6:	4b1a      	ldr	r3, [pc, #104]	@ (34186a30 <HAL_RCCEx_PeriphCLKConfig+0x10f8>)
341869c8:	429a      	cmp	r2, r3
341869ca:	d133      	bne.n	34186a34 <HAL_RCCEx_PeriphCLKConfig+0x10fc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341869cc:	4b0d      	ldr	r3, [pc, #52]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341869ce:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341869d2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341869d6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341869da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869de:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341869e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341869e6:	3b01      	subs	r3, #1
341869e8:	041b      	lsls	r3, r3, #16
341869ea:	4313      	orrs	r3, r2
341869ec:	4a05      	ldr	r2, [pc, #20]	@ (34186a04 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341869ee:	430b      	orrs	r3, r1
341869f0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341869f4:	f7fe fdfe 	bl	341855f4 <LL_RCC_IC15_Enable>
341869f8:	e025      	b.n	34186a46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
341869fa:	bf00      	nop
341869fc:	0701080c 	.word	0x0701080c
34186a00:	07020c0c 	.word	0x07020c0c
34186a04:	56028000 	.word	0x56028000
34186a08:	07030c0c 	.word	0x07030c0c
34186a0c:	07010c0c 	.word	0x07010c0c
34186a10:	0702100c 	.word	0x0702100c
34186a14:	0703100c 	.word	0x0703100c
34186a18:	0701100c 	.word	0x0701100c
34186a1c:	0702140c 	.word	0x0702140c
34186a20:	0703140c 	.word	0x0703140c
34186a24:	0701140c 	.word	0x0701140c
34186a28:	0702082c 	.word	0x0702082c
34186a2c:	0701082c 	.word	0x0701082c
34186a30:	07020c2c 	.word	0x07020c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34186a34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a38:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34186a3c:	4bca      	ldr	r3, [pc, #808]	@ (34186d68 <HAL_RCCEx_PeriphCLKConfig+0x1430>)
34186a3e:	429a      	cmp	r2, r3
34186a40:	d101      	bne.n	34186a46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      LL_RCC_CLKP_Enable();
34186a42:	f7fe ff57 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
34186a46:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a4a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34186a4e:	4618      	mov	r0, r3
34186a50:	f7fd fe42 	bl	341846d8 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34186a54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a58:	e9d3 2300 	ldrd	r2, r3, [r3]
34186a5c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
34186a60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
34186a64:	2300      	movs	r3, #0
34186a66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
34186a6a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
34186a6e:	4603      	mov	r3, r0
34186a70:	460a      	mov	r2, r1
34186a72:	4313      	orrs	r3, r2
34186a74:	d02d      	beq.n	34186ad2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
34186a76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a7a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34186a7e:	4bbb      	ldr	r3, [pc, #748]	@ (34186d6c <HAL_RCCEx_PeriphCLKConfig+0x1434>)
34186a80:	429a      	cmp	r2, r3
34186a82:	d116      	bne.n	34186ab2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186a84:	4bba      	ldr	r3, [pc, #744]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186a86:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186a8a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186a8e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186a92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a96:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186a98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186a9e:	3b01      	subs	r3, #1
34186aa0:	041b      	lsls	r3, r3, #16
34186aa2:	4313      	orrs	r3, r2
34186aa4:	4ab2      	ldr	r2, [pc, #712]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186aa6:	430b      	orrs	r3, r1
34186aa8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186aac:	f7fe fda2 	bl	341855f4 <LL_RCC_IC15_Enable>
34186ab0:	e008      	b.n	34186ac4 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34186ab2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ab6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34186aba:	4bae      	ldr	r3, [pc, #696]	@ (34186d74 <HAL_RCCEx_PeriphCLKConfig+0x143c>)
34186abc:	429a      	cmp	r2, r3
34186abe:	d101      	bne.n	34186ac4 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    {
      LL_RCC_CLKP_Enable();
34186ac0:	f7fe ff18 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
34186ac4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ac8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34186acc:	4618      	mov	r0, r3
34186ace:	f7fd fe03 	bl	341846d8 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
34186ad2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
34186ada:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
34186ade:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
34186ae2:	2300      	movs	r3, #0
34186ae4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
34186ae8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
34186aec:	4603      	mov	r3, r0
34186aee:	460a      	mov	r2, r1
34186af0:	4313      	orrs	r3, r2
34186af2:	d02d      	beq.n	34186b50 <HAL_RCCEx_PeriphCLKConfig+0x1218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
34186af4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186af8:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34186afc:	4b9e      	ldr	r3, [pc, #632]	@ (34186d78 <HAL_RCCEx_PeriphCLKConfig+0x1440>)
34186afe:	429a      	cmp	r2, r3
34186b00:	d116      	bne.n	34186b30 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186b02:	4b9b      	ldr	r3, [pc, #620]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186b04:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186b08:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186b0c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186b10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b14:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186b16:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186b1c:	3b01      	subs	r3, #1
34186b1e:	041b      	lsls	r3, r3, #16
34186b20:	4313      	orrs	r3, r2
34186b22:	4a93      	ldr	r2, [pc, #588]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186b24:	430b      	orrs	r3, r1
34186b26:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186b2a:	f7fe fd63 	bl	341855f4 <LL_RCC_IC15_Enable>
34186b2e:	e008      	b.n	34186b42 <HAL_RCCEx_PeriphCLKConfig+0x120a>
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34186b30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b34:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34186b38:	4b90      	ldr	r3, [pc, #576]	@ (34186d7c <HAL_RCCEx_PeriphCLKConfig+0x1444>)
34186b3a:	429a      	cmp	r2, r3
34186b3c:	d101      	bne.n	34186b42 <HAL_RCCEx_PeriphCLKConfig+0x120a>
    {
      LL_RCC_CLKP_Enable();
34186b3e:	f7fe fed9 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
34186b42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b46:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34186b4a:	4618      	mov	r0, r3
34186b4c:	f7fd fdc4 	bl	341846d8 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34186b50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b54:	e9d3 2300 	ldrd	r2, r3, [r3]
34186b58:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
34186b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
34186b60:	2300      	movs	r3, #0
34186b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
34186b66:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
34186b6a:	4603      	mov	r3, r0
34186b6c:	460a      	mov	r2, r1
34186b6e:	4313      	orrs	r3, r2
34186b70:	d02d      	beq.n	34186bce <HAL_RCCEx_PeriphCLKConfig+0x1296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
34186b72:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b76:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34186b7a:	4b81      	ldr	r3, [pc, #516]	@ (34186d80 <HAL_RCCEx_PeriphCLKConfig+0x1448>)
34186b7c:	429a      	cmp	r2, r3
34186b7e:	d116      	bne.n	34186bae <HAL_RCCEx_PeriphCLKConfig+0x1276>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186b80:	4b7b      	ldr	r3, [pc, #492]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186b82:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186b86:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186b8a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186b8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b92:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186b94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186b9a:	3b01      	subs	r3, #1
34186b9c:	041b      	lsls	r3, r3, #16
34186b9e:	4313      	orrs	r3, r2
34186ba0:	4a73      	ldr	r2, [pc, #460]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186ba2:	430b      	orrs	r3, r1
34186ba4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186ba8:	f7fe fd24 	bl	341855f4 <LL_RCC_IC15_Enable>
34186bac:	e008      	b.n	34186bc0 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34186bae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bb2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34186bb6:	4b73      	ldr	r3, [pc, #460]	@ (34186d84 <HAL_RCCEx_PeriphCLKConfig+0x144c>)
34186bb8:	429a      	cmp	r2, r3
34186bba:	d101      	bne.n	34186bc0 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    {
      LL_RCC_CLKP_Enable();
34186bbc:	f7fe fe9a 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
34186bc0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bc4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34186bc8:	4618      	mov	r0, r3
34186bca:	f7fd fd85 	bl	341846d8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34186bce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
34186bd6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
34186bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
34186bde:	2300      	movs	r3, #0
34186be0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
34186be4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
34186be8:	4603      	mov	r3, r0
34186bea:	460a      	mov	r2, r1
34186bec:	4313      	orrs	r3, r2
34186bee:	d04b      	beq.n	34186c88 <HAL_RCCEx_PeriphCLKConfig+0x1350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
34186bf0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bf4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34186bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34186bfc:	d116      	bne.n	34186c2c <HAL_RCCEx_PeriphCLKConfig+0x12f4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186bfe:	4b5c      	ldr	r3, [pc, #368]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186c00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186c04:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186c08:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186c0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186c12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186c18:	3b01      	subs	r3, #1
34186c1a:	041b      	lsls	r3, r3, #16
34186c1c:	4313      	orrs	r3, r2
34186c1e:	4a54      	ldr	r2, [pc, #336]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186c20:	430b      	orrs	r3, r1
34186c22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186c26:	f7fe fba5 	bl	34185374 <LL_RCC_IC9_Enable>
34186c2a:	e026      	b.n	34186c7a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
34186c2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c30:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34186c34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34186c38:	d116      	bne.n	34186c68 <HAL_RCCEx_PeriphCLKConfig+0x1330>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186c3a:	4b4d      	ldr	r3, [pc, #308]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186c3c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186c40:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186c44:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186c48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186c4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186c54:	3b01      	subs	r3, #1
34186c56:	041b      	lsls	r3, r3, #16
34186c58:	4313      	orrs	r3, r2
34186c5a:	4a45      	ldr	r2, [pc, #276]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186c5c:	430b      	orrs	r3, r1
34186c5e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186c62:	f7fe fc87 	bl	34185574 <LL_RCC_IC14_Enable>
34186c66:	e008      	b.n	34186c7a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
34186c68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c6c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34186c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34186c74:	d101      	bne.n	34186c7a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    {
      LL_RCC_CLKP_Enable();
34186c76:	f7fe fe3d 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
34186c7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c7e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34186c82:	4618      	mov	r0, r3
34186c84:	f7fd fd34 	bl	341846f0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34186c88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
34186c90:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
34186c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
34186c98:	2300      	movs	r3, #0
34186c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
34186c9e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
34186ca2:	4603      	mov	r3, r0
34186ca4:	460a      	mov	r2, r1
34186ca6:	4313      	orrs	r3, r2
34186ca8:	d02f      	beq.n	34186d0a <HAL_RCCEx_PeriphCLKConfig+0x13d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
34186caa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cae:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34186cb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34186cb6:	d118      	bne.n	34186cea <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
34186cb8:	4b2d      	ldr	r3, [pc, #180]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186cba:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34186cbe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186cc2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186cc6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cca:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34186cce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34186cd6:	3b01      	subs	r3, #1
34186cd8:	041b      	lsls	r3, r3, #16
34186cda:	4313      	orrs	r3, r2
34186cdc:	4a24      	ldr	r2, [pc, #144]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186cde:	430b      	orrs	r3, r1
34186ce0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
34186ce4:	f7fe fcc6 	bl	34185674 <LL_RCC_IC16_Enable>
34186ce8:	e008      	b.n	34186cfc <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34186cea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cee:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34186cf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34186cf6:	d101      	bne.n	34186cfc <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    {
      LL_RCC_CLKP_Enable();
34186cf8:	f7fe fdfc 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
34186cfc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d00:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34186d04:	4618      	mov	r0, r3
34186d06:	f7fd fd09 	bl	3418471c <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
34186d0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
34186d12:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
34186d16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
34186d1a:	2300      	movs	r3, #0
34186d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
34186d20:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
34186d24:	4603      	mov	r3, r0
34186d26:	460a      	mov	r2, r1
34186d28:	4313      	orrs	r3, r2
34186d2a:	d05b      	beq.n	34186de4 <HAL_RCCEx_PeriphCLKConfig+0x14ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
34186d2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d30:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34186d34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34186d38:	d126      	bne.n	34186d88 <HAL_RCCEx_PeriphCLKConfig+0x1450>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34186d3a:	4b0d      	ldr	r3, [pc, #52]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186d3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34186d40:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186d44:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186d48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34186d4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34186d54:	3b01      	subs	r3, #1
34186d56:	041b      	lsls	r3, r3, #16
34186d58:	4313      	orrs	r3, r2
34186d5a:	4a05      	ldr	r2, [pc, #20]	@ (34186d70 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186d5c:	430b      	orrs	r3, r1
34186d5e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34186d62:	f7fe fa87 	bl	34185274 <LL_RCC_IC7_Enable>
34186d66:	e036      	b.n	34186dd6 <HAL_RCCEx_PeriphCLKConfig+0x149e>
34186d68:	07010c2c 	.word	0x07010c2c
34186d6c:	0702102c 	.word	0x0702102c
34186d70:	56028000 	.word	0x56028000
34186d74:	0701102c 	.word	0x0701102c
34186d78:	0702142c 	.word	0x0702142c
34186d7c:	0701142c 	.word	0x0701142c
34186d80:	0702182c 	.word	0x0702182c
34186d84:	0701182c 	.word	0x0701182c
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34186d88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d8c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34186d90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34186d94:	d116      	bne.n	34186dc4 <HAL_RCCEx_PeriphCLKConfig+0x148c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186d96:	4bb5      	ldr	r3, [pc, #724]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186d9c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186da0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186da4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186da8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186daa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186db0:	3b01      	subs	r3, #1
34186db2:	041b      	lsls	r3, r3, #16
34186db4:	4313      	orrs	r3, r2
34186db6:	4aad      	ldr	r2, [pc, #692]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186db8:	430b      	orrs	r3, r1
34186dba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186dbe:	f7fe fa99 	bl	341852f4 <LL_RCC_IC8_Enable>
34186dc2:	e008      	b.n	34186dd6 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34186dc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dc8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34186dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34186dd0:	d101      	bne.n	34186dd6 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    {
      LL_RCC_CLKP_Enable();
34186dd2:	f7fe fd8f 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
34186dd6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dda:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34186dde:	4618      	mov	r0, r3
34186de0:	f7fd fcb2 	bl	34184748 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
34186de4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186de8:	e9d3 2300 	ldrd	r2, r3, [r3]
34186dec:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
34186df0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
34186df4:	2300      	movs	r3, #0
34186df6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
34186dfa:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
34186dfe:	4603      	mov	r3, r0
34186e00:	460a      	mov	r2, r1
34186e02:	4313      	orrs	r3, r2
34186e04:	d02d      	beq.n	34186e62 <HAL_RCCEx_PeriphCLKConfig+0x152a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
34186e06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e0a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34186e0e:	2b20      	cmp	r3, #32
34186e10:	d118      	bne.n	34186e44 <HAL_RCCEx_PeriphCLKConfig+0x150c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34186e12:	4b96      	ldr	r3, [pc, #600]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186e14:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34186e18:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186e1c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186e20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e24:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34186e28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34186e30:	3b01      	subs	r3, #1
34186e32:	041b      	lsls	r3, r3, #16
34186e34:	4313      	orrs	r3, r2
34186e36:	4a8d      	ldr	r2, [pc, #564]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186e38:	430b      	orrs	r3, r1
34186e3a:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
34186e3e:	f7fe fd19 	bl	34185874 <LL_RCC_IC20_Enable>
34186e42:	e007      	b.n	34186e54 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
34186e44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e48:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34186e4c:	2b10      	cmp	r3, #16
34186e4e:	d101      	bne.n	34186e54 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    {
      LL_RCC_CLKP_Enable();
34186e50:	f7fe fd50 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
34186e54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e58:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34186e5c:	4618      	mov	r0, r3
34186e5e:	f7fd fc9f 	bl	341847a0 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
34186e62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e66:	e9d3 2300 	ldrd	r2, r3, [r3]
34186e6a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
34186e6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
34186e72:	2300      	movs	r3, #0
34186e74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
34186e78:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
34186e7c:	4603      	mov	r3, r0
34186e7e:	460a      	mov	r2, r1
34186e80:	4313      	orrs	r3, r2
34186e82:	d04b      	beq.n	34186f1c <HAL_RCCEx_PeriphCLKConfig+0x15e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
34186e84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e88:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34186e8c:	4b78      	ldr	r3, [pc, #480]	@ (34187070 <HAL_RCCEx_PeriphCLKConfig+0x1738>)
34186e8e:	429a      	cmp	r2, r3
34186e90:	d116      	bne.n	34186ec0 <HAL_RCCEx_PeriphCLKConfig+0x1588>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34186e92:	4b76      	ldr	r3, [pc, #472]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186e94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34186e98:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186e9c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186ea0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34186ea6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34186eac:	3b01      	subs	r3, #1
34186eae:	041b      	lsls	r3, r3, #16
34186eb0:	4313      	orrs	r3, r2
34186eb2:	4a6e      	ldr	r2, [pc, #440]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186eb4:	430b      	orrs	r3, r1
34186eb6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34186eba:	f7fe f9db 	bl	34185274 <LL_RCC_IC7_Enable>
34186ebe:	e026      	b.n	34186f0e <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34186ec0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ec4:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34186ec8:	4b6a      	ldr	r3, [pc, #424]	@ (34187074 <HAL_RCCEx_PeriphCLKConfig+0x173c>)
34186eca:	429a      	cmp	r2, r3
34186ecc:	d116      	bne.n	34186efc <HAL_RCCEx_PeriphCLKConfig+0x15c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186ece:	4b67      	ldr	r3, [pc, #412]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186ed4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186ed8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186edc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ee0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186ee2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186ee8:	3b01      	subs	r3, #1
34186eea:	041b      	lsls	r3, r3, #16
34186eec:	4313      	orrs	r3, r2
34186eee:	4a5f      	ldr	r2, [pc, #380]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186ef0:	430b      	orrs	r3, r1
34186ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186ef6:	f7fe f9fd 	bl	341852f4 <LL_RCC_IC8_Enable>
34186efa:	e008      	b.n	34186f0e <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34186efc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f00:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34186f04:	4b5c      	ldr	r3, [pc, #368]	@ (34187078 <HAL_RCCEx_PeriphCLKConfig+0x1740>)
34186f06:	429a      	cmp	r2, r3
34186f08:	d101      	bne.n	34186f0e <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    {
      LL_RCC_CLKP_Enable();
34186f0a:	f7fe fcf3 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
34186f0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f12:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
34186f16:	4618      	mov	r0, r3
34186f18:	f7fd fc58 	bl	341847cc <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
34186f1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f20:	e9d3 2300 	ldrd	r2, r3, [r3]
34186f24:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
34186f28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
34186f2c:	2300      	movs	r3, #0
34186f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
34186f32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
34186f36:	4603      	mov	r3, r0
34186f38:	460a      	mov	r2, r1
34186f3a:	4313      	orrs	r3, r2
34186f3c:	d04b      	beq.n	34186fd6 <HAL_RCCEx_PeriphCLKConfig+0x169e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
34186f3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f42:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34186f46:	4b4d      	ldr	r3, [pc, #308]	@ (3418707c <HAL_RCCEx_PeriphCLKConfig+0x1744>)
34186f48:	429a      	cmp	r2, r3
34186f4a:	d116      	bne.n	34186f7a <HAL_RCCEx_PeriphCLKConfig+0x1642>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34186f4c:	4b47      	ldr	r3, [pc, #284]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186f4e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34186f52:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186f56:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186f5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34186f60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34186f66:	3b01      	subs	r3, #1
34186f68:	041b      	lsls	r3, r3, #16
34186f6a:	4313      	orrs	r3, r2
34186f6c:	4a3f      	ldr	r2, [pc, #252]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186f6e:	430b      	orrs	r3, r1
34186f70:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34186f74:	f7fe f97e 	bl	34185274 <LL_RCC_IC7_Enable>
34186f78:	e026      	b.n	34186fc8 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34186f7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f7e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34186f82:	4b3f      	ldr	r3, [pc, #252]	@ (34187080 <HAL_RCCEx_PeriphCLKConfig+0x1748>)
34186f84:	429a      	cmp	r2, r3
34186f86:	d116      	bne.n	34186fb6 <HAL_RCCEx_PeriphCLKConfig+0x167e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186f88:	4b38      	ldr	r3, [pc, #224]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186f8e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186f92:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186f96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186f9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186fa2:	3b01      	subs	r3, #1
34186fa4:	041b      	lsls	r3, r3, #16
34186fa6:	4313      	orrs	r3, r2
34186fa8:	4a30      	ldr	r2, [pc, #192]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186faa:	430b      	orrs	r3, r1
34186fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186fb0:	f7fe f9a0 	bl	341852f4 <LL_RCC_IC8_Enable>
34186fb4:	e008      	b.n	34186fc8 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34186fb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fba:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34186fbe:	4b31      	ldr	r3, [pc, #196]	@ (34187084 <HAL_RCCEx_PeriphCLKConfig+0x174c>)
34186fc0:	429a      	cmp	r2, r3
34186fc2:	d101      	bne.n	34186fc8 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    {
      LL_RCC_CLKP_Enable();
34186fc4:	f7fe fc96 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
34186fc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fcc:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
34186fd0:	4618      	mov	r0, r3
34186fd2:	f7fd fbfb 	bl	341847cc <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
34186fd6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fda:	e9d3 2300 	ldrd	r2, r3, [r3]
34186fde:	2100      	movs	r1, #0
34186fe0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
34186fe4:	f003 0301 	and.w	r3, r3, #1
34186fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
34186fec:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
34186ff0:	4603      	mov	r3, r0
34186ff2:	460a      	mov	r2, r1
34186ff4:	4313      	orrs	r3, r2
34186ff6:	d056      	beq.n	341870a6 <HAL_RCCEx_PeriphCLKConfig+0x176e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
34186ff8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ffc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34187000:	2b02      	cmp	r3, #2
34187002:	d116      	bne.n	34187032 <HAL_RCCEx_PeriphCLKConfig+0x16fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34187004:	4b19      	ldr	r3, [pc, #100]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34187006:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418700a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418700e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187012:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34187018:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418701c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418701e:	3b01      	subs	r3, #1
34187020:	041b      	lsls	r3, r3, #16
34187022:	4313      	orrs	r3, r2
34187024:	4a11      	ldr	r2, [pc, #68]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34187026:	430b      	orrs	r3, r1
34187028:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418702c:	f7fe f922 	bl	34185274 <LL_RCC_IC7_Enable>
34187030:	e032      	b.n	34187098 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
34187032:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187036:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3418703a:	2b03      	cmp	r3, #3
3418703c:	d124      	bne.n	34187088 <HAL_RCCEx_PeriphCLKConfig+0x1750>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418703e:	4b0b      	ldr	r3, [pc, #44]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34187040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34187044:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187048:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418704c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187050:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34187052:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34187058:	3b01      	subs	r3, #1
3418705a:	041b      	lsls	r3, r3, #16
3418705c:	4313      	orrs	r3, r2
3418705e:	4a03      	ldr	r2, [pc, #12]	@ (3418706c <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34187060:	430b      	orrs	r3, r1
34187062:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34187066:	f7fe f945 	bl	341852f4 <LL_RCC_IC8_Enable>
3418706a:	e015      	b.n	34187098 <HAL_RCCEx_PeriphCLKConfig+0x1760>
3418706c:	56028000 	.word	0x56028000
34187070:	07021418 	.word	0x07021418
34187074:	07031418 	.word	0x07031418
34187078:	07011418 	.word	0x07011418
3418707c:	07021818 	.word	0x07021818
34187080:	07031818 	.word	0x07031818
34187084:	07011818 	.word	0x07011818
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34187088:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418708c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34187090:	2b01      	cmp	r3, #1
34187092:	d101      	bne.n	34187098 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    {
      LL_RCC_CLKP_Enable();
34187094:	f7fe fc2e 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
34187098:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418709c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341870a0:	4618      	mov	r0, r3
341870a2:	f7fd fba9 	bl	341847f8 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
341870a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870aa:	e9d3 2300 	ldrd	r2, r3, [r3]
341870ae:	2100      	movs	r1, #0
341870b0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
341870b4:	f003 0302 	and.w	r3, r3, #2
341870b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
341870bc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
341870c0:	4603      	mov	r3, r0
341870c2:	460a      	mov	r2, r1
341870c4:	4313      	orrs	r3, r2
341870c6:	d04b      	beq.n	34187160 <HAL_RCCEx_PeriphCLKConfig+0x1828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
341870c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870cc:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341870d0:	4bc6      	ldr	r3, [pc, #792]	@ (341873ec <HAL_RCCEx_PeriphCLKConfig+0x1ab4>)
341870d2:	429a      	cmp	r2, r3
341870d4:	d116      	bne.n	34187104 <HAL_RCCEx_PeriphCLKConfig+0x17cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341870d6:	4bc6      	ldr	r3, [pc, #792]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341870d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341870dc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341870e0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341870e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341870ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341870f0:	3b01      	subs	r3, #1
341870f2:	041b      	lsls	r3, r3, #16
341870f4:	4313      	orrs	r3, r2
341870f6:	4abe      	ldr	r2, [pc, #760]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341870f8:	430b      	orrs	r3, r1
341870fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341870fe:	f7fe f8f9 	bl	341852f4 <LL_RCC_IC8_Enable>
34187102:	e026      	b.n	34187152 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
34187104:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187108:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3418710c:	4bb9      	ldr	r3, [pc, #740]	@ (341873f4 <HAL_RCCEx_PeriphCLKConfig+0x1abc>)
3418710e:	429a      	cmp	r2, r3
34187110:	d116      	bne.n	34187140 <HAL_RCCEx_PeriphCLKConfig+0x1808>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187112:	4bb7      	ldr	r3, [pc, #732]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187114:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187118:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418711c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187120:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187124:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187126:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418712a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418712c:	3b01      	subs	r3, #1
3418712e:	041b      	lsls	r3, r3, #16
34187130:	4313      	orrs	r3, r2
34187132:	4aaf      	ldr	r2, [pc, #700]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187134:	430b      	orrs	r3, r1
34187136:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418713a:	f7fe f91b 	bl	34185374 <LL_RCC_IC9_Enable>
3418713e:	e008      	b.n	34187152 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34187140:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187144:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34187148:	4bab      	ldr	r3, [pc, #684]	@ (341873f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>)
3418714a:	429a      	cmp	r2, r3
3418714c:	d101      	bne.n	34187152 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    {
      LL_RCC_CLKP_Enable();
3418714e:	f7fe fbd1 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
34187152:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187156:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
3418715a:	4618      	mov	r0, r3
3418715c:	f7fd fb62 	bl	34184824 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
34187160:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187164:	e9d3 2300 	ldrd	r2, r3, [r3]
34187168:	2100      	movs	r1, #0
3418716a:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
3418716e:	f003 0304 	and.w	r3, r3, #4
34187172:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
34187176:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
3418717a:	4603      	mov	r3, r0
3418717c:	460a      	mov	r2, r1
3418717e:	4313      	orrs	r3, r2
34187180:	d04b      	beq.n	3418721a <HAL_RCCEx_PeriphCLKConfig+0x18e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
34187182:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187186:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418718a:	4b9c      	ldr	r3, [pc, #624]	@ (341873fc <HAL_RCCEx_PeriphCLKConfig+0x1ac4>)
3418718c:	429a      	cmp	r2, r3
3418718e:	d116      	bne.n	341871be <HAL_RCCEx_PeriphCLKConfig+0x1886>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34187190:	4b97      	ldr	r3, [pc, #604]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34187196:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418719a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418719e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341871a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341871aa:	3b01      	subs	r3, #1
341871ac:	041b      	lsls	r3, r3, #16
341871ae:	4313      	orrs	r3, r2
341871b0:	4a8f      	ldr	r2, [pc, #572]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341871b2:	430b      	orrs	r3, r1
341871b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341871b8:	f7fe f89c 	bl	341852f4 <LL_RCC_IC8_Enable>
341871bc:	e026      	b.n	3418720c <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
341871be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871c2:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341871c6:	4b8e      	ldr	r3, [pc, #568]	@ (34187400 <HAL_RCCEx_PeriphCLKConfig+0x1ac8>)
341871c8:	429a      	cmp	r2, r3
341871ca:	d116      	bne.n	341871fa <HAL_RCCEx_PeriphCLKConfig+0x18c2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341871cc:	4b88      	ldr	r3, [pc, #544]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341871ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341871d2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341871d6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341871da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341871e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341871e6:	3b01      	subs	r3, #1
341871e8:	041b      	lsls	r3, r3, #16
341871ea:	4313      	orrs	r3, r2
341871ec:	4a80      	ldr	r2, [pc, #512]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341871ee:	430b      	orrs	r3, r1
341871f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341871f4:	f7fe f8be 	bl	34185374 <LL_RCC_IC9_Enable>
341871f8:	e008      	b.n	3418720c <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
341871fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871fe:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34187202:	4b80      	ldr	r3, [pc, #512]	@ (34187404 <HAL_RCCEx_PeriphCLKConfig+0x1acc>)
34187204:	429a      	cmp	r2, r3
34187206:	d101      	bne.n	3418720c <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    {
      LL_RCC_CLKP_Enable();
34187208:	f7fe fb74 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
3418720c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187210:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
34187214:	4618      	mov	r0, r3
34187216:	f7fd fb05 	bl	34184824 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
3418721a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418721e:	e9d3 2300 	ldrd	r2, r3, [r3]
34187222:	2100      	movs	r1, #0
34187224:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
34187228:	f003 0308 	and.w	r3, r3, #8
3418722c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
34187230:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
34187234:	4603      	mov	r3, r0
34187236:	460a      	mov	r2, r1
34187238:	4313      	orrs	r3, r2
3418723a:	d04b      	beq.n	341872d4 <HAL_RCCEx_PeriphCLKConfig+0x199c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
3418723c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187240:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34187244:	4b70      	ldr	r3, [pc, #448]	@ (34187408 <HAL_RCCEx_PeriphCLKConfig+0x1ad0>)
34187246:	429a      	cmp	r2, r3
34187248:	d116      	bne.n	34187278 <HAL_RCCEx_PeriphCLKConfig+0x1940>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418724a:	4b69      	ldr	r3, [pc, #420]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418724c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34187250:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187254:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187258:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418725c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418725e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34187264:	3b01      	subs	r3, #1
34187266:	041b      	lsls	r3, r3, #16
34187268:	4313      	orrs	r3, r2
3418726a:	4a61      	ldr	r2, [pc, #388]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418726c:	430b      	orrs	r3, r1
3418726e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34187272:	f7fe f83f 	bl	341852f4 <LL_RCC_IC8_Enable>
34187276:	e026      	b.n	341872c6 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34187278:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418727c:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34187280:	4b62      	ldr	r3, [pc, #392]	@ (3418740c <HAL_RCCEx_PeriphCLKConfig+0x1ad4>)
34187282:	429a      	cmp	r2, r3
34187284:	d116      	bne.n	341872b4 <HAL_RCCEx_PeriphCLKConfig+0x197c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187286:	4b5a      	ldr	r3, [pc, #360]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187288:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418728c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187290:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187294:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187298:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418729a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418729e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341872a0:	3b01      	subs	r3, #1
341872a2:	041b      	lsls	r3, r3, #16
341872a4:	4313      	orrs	r3, r2
341872a6:	4a52      	ldr	r2, [pc, #328]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341872a8:	430b      	orrs	r3, r1
341872aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341872ae:	f7fe f861 	bl	34185374 <LL_RCC_IC9_Enable>
341872b2:	e008      	b.n	341872c6 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
341872b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872b8:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
341872bc:	4b54      	ldr	r3, [pc, #336]	@ (34187410 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>)
341872be:	429a      	cmp	r2, r3
341872c0:	d101      	bne.n	341872c6 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    {
      LL_RCC_CLKP_Enable();
341872c2:	f7fe fb17 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
341872c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872ca:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
341872ce:	4618      	mov	r0, r3
341872d0:	f7fd faa8 	bl	34184824 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
341872d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872d8:	e9d3 2300 	ldrd	r2, r3, [r3]
341872dc:	2100      	movs	r1, #0
341872de:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
341872e2:	f003 0310 	and.w	r3, r3, #16
341872e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
341872ea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
341872ee:	4603      	mov	r3, r0
341872f0:	460a      	mov	r2, r1
341872f2:	4313      	orrs	r3, r2
341872f4:	d04b      	beq.n	3418738e <HAL_RCCEx_PeriphCLKConfig+0x1a56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
341872f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872fa:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
341872fe:	4b45      	ldr	r3, [pc, #276]	@ (34187414 <HAL_RCCEx_PeriphCLKConfig+0x1adc>)
34187300:	429a      	cmp	r2, r3
34187302:	d116      	bne.n	34187332 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187304:	4b3a      	ldr	r3, [pc, #232]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187306:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418730a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418730e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187312:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187316:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187318:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418731c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418731e:	3b01      	subs	r3, #1
34187320:	041b      	lsls	r3, r3, #16
34187322:	4313      	orrs	r3, r2
34187324:	4a32      	ldr	r2, [pc, #200]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187326:	430b      	orrs	r3, r1
34187328:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418732c:	f7fe f822 	bl	34185374 <LL_RCC_IC9_Enable>
34187330:	e026      	b.n	34187380 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34187332:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187336:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3418733a:	4b37      	ldr	r3, [pc, #220]	@ (34187418 <HAL_RCCEx_PeriphCLKConfig+0x1ae0>)
3418733c:	429a      	cmp	r2, r3
3418733e:	d116      	bne.n	3418736e <HAL_RCCEx_PeriphCLKConfig+0x1a36>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187340:	4b2b      	ldr	r3, [pc, #172]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187342:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187346:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418734a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418734e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187352:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187354:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418735a:	3b01      	subs	r3, #1
3418735c:	041b      	lsls	r3, r3, #16
3418735e:	4313      	orrs	r3, r2
34187360:	4a23      	ldr	r2, [pc, #140]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187362:	430b      	orrs	r3, r1
34187364:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187368:	f7fe f904 	bl	34185574 <LL_RCC_IC14_Enable>
3418736c:	e008      	b.n	34187380 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
3418736e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187372:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34187376:	4b29      	ldr	r3, [pc, #164]	@ (3418741c <HAL_RCCEx_PeriphCLKConfig+0x1ae4>)
34187378:	429a      	cmp	r2, r3
3418737a:	d101      	bne.n	34187380 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    {
      LL_RCC_CLKP_Enable();
3418737c:	f7fe faba 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
34187380:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187384:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
34187388:	4618      	mov	r0, r3
3418738a:	f7fd fa4b 	bl	34184824 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
3418738e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187392:	e9d3 2300 	ldrd	r2, r3, [r3]
34187396:	2100      	movs	r1, #0
34187398:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
3418739c:	f003 0320 	and.w	r3, r3, #32
341873a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
341873a4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
341873a8:	4603      	mov	r3, r0
341873aa:	460a      	mov	r2, r1
341873ac:	4313      	orrs	r3, r2
341873ae:	d067      	beq.n	34187480 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
341873b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873b4:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
341873b8:	4b19      	ldr	r3, [pc, #100]	@ (34187420 <HAL_RCCEx_PeriphCLKConfig+0x1ae8>)
341873ba:	429a      	cmp	r2, r3
341873bc:	d132      	bne.n	34187424 <HAL_RCCEx_PeriphCLKConfig+0x1aec>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341873be:	4b0c      	ldr	r3, [pc, #48]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341873c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341873c4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341873c8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341873cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341873d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341873d8:	3b01      	subs	r3, #1
341873da:	041b      	lsls	r3, r3, #16
341873dc:	4313      	orrs	r3, r2
341873de:	4a04      	ldr	r2, [pc, #16]	@ (341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341873e0:	430b      	orrs	r3, r1
341873e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341873e6:	f7fd ffc5 	bl	34185374 <LL_RCC_IC9_Enable>
341873ea:	e042      	b.n	34187472 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
341873ec:	07020420 	.word	0x07020420
341873f0:	56028000 	.word	0x56028000
341873f4:	07030420 	.word	0x07030420
341873f8:	07010420 	.word	0x07010420
341873fc:	07020820 	.word	0x07020820
34187400:	07030820 	.word	0x07030820
34187404:	07010820 	.word	0x07010820
34187408:	07020c20 	.word	0x07020c20
3418740c:	07030c20 	.word	0x07030c20
34187410:	07010c20 	.word	0x07010c20
34187414:	07021020 	.word	0x07021020
34187418:	07031020 	.word	0x07031020
3418741c:	07011020 	.word	0x07011020
34187420:	07021420 	.word	0x07021420
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34187424:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187428:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3418742c:	4bc2      	ldr	r3, [pc, #776]	@ (34187738 <HAL_RCCEx_PeriphCLKConfig+0x1e00>)
3418742e:	429a      	cmp	r2, r3
34187430:	d116      	bne.n	34187460 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187432:	4bc2      	ldr	r3, [pc, #776]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187434:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187438:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418743c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187440:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187444:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187446:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418744a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418744c:	3b01      	subs	r3, #1
3418744e:	041b      	lsls	r3, r3, #16
34187450:	4313      	orrs	r3, r2
34187452:	4aba      	ldr	r2, [pc, #744]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187454:	430b      	orrs	r3, r1
34187456:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418745a:	f7fe f88b 	bl	34185574 <LL_RCC_IC14_Enable>
3418745e:	e008      	b.n	34187472 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34187460:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187464:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34187468:	4bb5      	ldr	r3, [pc, #724]	@ (34187740 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
3418746a:	429a      	cmp	r2, r3
3418746c:	d101      	bne.n	34187472 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    {
      LL_RCC_CLKP_Enable();
3418746e:	f7fe fa41 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
34187472:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187476:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418747a:	4618      	mov	r0, r3
3418747c:	f7fd f9d2 	bl	34184824 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34187480:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187484:	e9d3 2300 	ldrd	r2, r3, [r3]
34187488:	2100      	movs	r1, #0
3418748a:	67b9      	str	r1, [r7, #120]	@ 0x78
3418748c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34187490:	67fb      	str	r3, [r7, #124]	@ 0x7c
34187492:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
34187496:	4603      	mov	r3, r0
34187498:	460a      	mov	r2, r1
3418749a:	4313      	orrs	r3, r2
3418749c:	d04b      	beq.n	34187536 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
3418749e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341874a2:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
341874a6:	4ba7      	ldr	r3, [pc, #668]	@ (34187744 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
341874a8:	429a      	cmp	r2, r3
341874aa:	d116      	bne.n	341874da <HAL_RCCEx_PeriphCLKConfig+0x1ba2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341874ac:	4ba3      	ldr	r3, [pc, #652]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341874ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341874b2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341874b6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341874ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341874be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341874c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341874c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341874c6:	3b01      	subs	r3, #1
341874c8:	041b      	lsls	r3, r3, #16
341874ca:	4313      	orrs	r3, r2
341874cc:	4a9b      	ldr	r2, [pc, #620]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341874ce:	430b      	orrs	r3, r1
341874d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341874d4:	f7fd ff0e 	bl	341852f4 <LL_RCC_IC8_Enable>
341874d8:	e026      	b.n	34187528 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
341874da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341874de:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
341874e2:	4b99      	ldr	r3, [pc, #612]	@ (34187748 <HAL_RCCEx_PeriphCLKConfig+0x1e10>)
341874e4:	429a      	cmp	r2, r3
341874e6:	d116      	bne.n	34187516 <HAL_RCCEx_PeriphCLKConfig+0x1bde>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341874e8:	4b94      	ldr	r3, [pc, #592]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341874ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341874ee:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341874f2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341874f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341874fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341874fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187502:	3b01      	subs	r3, #1
34187504:	041b      	lsls	r3, r3, #16
34187506:	4313      	orrs	r3, r2
34187508:	4a8c      	ldr	r2, [pc, #560]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418750a:	430b      	orrs	r3, r1
3418750c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187510:	f7fd ff30 	bl	34185374 <LL_RCC_IC9_Enable>
34187514:	e008      	b.n	34187528 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34187516:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418751a:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3418751e:	4b8b      	ldr	r3, [pc, #556]	@ (3418774c <HAL_RCCEx_PeriphCLKConfig+0x1e14>)
34187520:	429a      	cmp	r2, r3
34187522:	d101      	bne.n	34187528 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    {
      LL_RCC_CLKP_Enable();
34187524:	f7fe f9e6 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
34187528:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418752c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34187530:	4618      	mov	r0, r3
34187532:	f7fd f977 	bl	34184824 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
34187536:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418753a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418753e:	2100      	movs	r1, #0
34187540:	6739      	str	r1, [r7, #112]	@ 0x70
34187542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34187546:	677b      	str	r3, [r7, #116]	@ 0x74
34187548:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
3418754c:	4603      	mov	r3, r0
3418754e:	460a      	mov	r2, r1
34187550:	4313      	orrs	r3, r2
34187552:	d04b      	beq.n	341875ec <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34187554:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187558:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3418755c:	4b7c      	ldr	r3, [pc, #496]	@ (34187750 <HAL_RCCEx_PeriphCLKConfig+0x1e18>)
3418755e:	429a      	cmp	r2, r3
34187560:	d116      	bne.n	34187590 <HAL_RCCEx_PeriphCLKConfig+0x1c58>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187562:	4b76      	ldr	r3, [pc, #472]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187564:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187568:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418756c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187570:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187574:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187576:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418757a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418757c:	3b01      	subs	r3, #1
3418757e:	041b      	lsls	r3, r3, #16
34187580:	4313      	orrs	r3, r2
34187582:	4a6e      	ldr	r2, [pc, #440]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187584:	430b      	orrs	r3, r1
34187586:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418758a:	f7fd fef3 	bl	34185374 <LL_RCC_IC9_Enable>
3418758e:	e026      	b.n	341875de <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34187590:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187594:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34187598:	4b6e      	ldr	r3, [pc, #440]	@ (34187754 <HAL_RCCEx_PeriphCLKConfig+0x1e1c>)
3418759a:	429a      	cmp	r2, r3
3418759c:	d116      	bne.n	341875cc <HAL_RCCEx_PeriphCLKConfig+0x1c94>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418759e:	4b67      	ldr	r3, [pc, #412]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341875a0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341875a4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341875a8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341875ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341875b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341875b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341875b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341875b8:	3b01      	subs	r3, #1
341875ba:	041b      	lsls	r3, r3, #16
341875bc:	4313      	orrs	r3, r2
341875be:	4a5f      	ldr	r2, [pc, #380]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341875c0:	430b      	orrs	r3, r1
341875c2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341875c6:	f7fd ffd5 	bl	34185574 <LL_RCC_IC14_Enable>
341875ca:	e008      	b.n	341875de <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
341875cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341875d0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
341875d4:	4b60      	ldr	r3, [pc, #384]	@ (34187758 <HAL_RCCEx_PeriphCLKConfig+0x1e20>)
341875d6:	429a      	cmp	r2, r3
341875d8:	d101      	bne.n	341875de <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    {
      LL_RCC_CLKP_Enable();
341875da:	f7fe f98b 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
341875de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341875e2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
341875e6:	4618      	mov	r0, r3
341875e8:	f7fd f927 	bl	3418483a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
341875ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341875f0:	e9d3 2300 	ldrd	r2, r3, [r3]
341875f4:	2100      	movs	r1, #0
341875f6:	66b9      	str	r1, [r7, #104]	@ 0x68
341875f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341875fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
341875fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
34187602:	4603      	mov	r3, r0
34187604:	460a      	mov	r2, r1
34187606:	4313      	orrs	r3, r2
34187608:	d04b      	beq.n	341876a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
3418760a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418760e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34187612:	4b52      	ldr	r3, [pc, #328]	@ (3418775c <HAL_RCCEx_PeriphCLKConfig+0x1e24>)
34187614:	429a      	cmp	r2, r3
34187616:	d116      	bne.n	34187646 <HAL_RCCEx_PeriphCLKConfig+0x1d0e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187618:	4b48      	ldr	r3, [pc, #288]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418761a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418761e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187622:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187626:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418762a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418762c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187632:	3b01      	subs	r3, #1
34187634:	041b      	lsls	r3, r3, #16
34187636:	4313      	orrs	r3, r2
34187638:	4a40      	ldr	r2, [pc, #256]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418763a:	430b      	orrs	r3, r1
3418763c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187640:	f7fd fe98 	bl	34185374 <LL_RCC_IC9_Enable>
34187644:	e026      	b.n	34187694 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34187646:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418764a:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3418764e:	4b44      	ldr	r3, [pc, #272]	@ (34187760 <HAL_RCCEx_PeriphCLKConfig+0x1e28>)
34187650:	429a      	cmp	r2, r3
34187652:	d116      	bne.n	34187682 <HAL_RCCEx_PeriphCLKConfig+0x1d4a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187654:	4b39      	ldr	r3, [pc, #228]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187656:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418765a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418765e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187662:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187666:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187668:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418766c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418766e:	3b01      	subs	r3, #1
34187670:	041b      	lsls	r3, r3, #16
34187672:	4313      	orrs	r3, r2
34187674:	4a31      	ldr	r2, [pc, #196]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187676:	430b      	orrs	r3, r1
34187678:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418767c:	f7fd ff7a 	bl	34185574 <LL_RCC_IC14_Enable>
34187680:	e008      	b.n	34187694 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34187682:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187686:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3418768a:	4b36      	ldr	r3, [pc, #216]	@ (34187764 <HAL_RCCEx_PeriphCLKConfig+0x1e2c>)
3418768c:	429a      	cmp	r2, r3
3418768e:	d101      	bne.n	34187694 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    {
      LL_RCC_CLKP_Enable();
34187690:	f7fe f930 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
34187694:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187698:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3418769c:	4618      	mov	r0, r3
3418769e:	f7fd f8cc 	bl	3418483a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
341876a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341876a6:	e9d3 2300 	ldrd	r2, r3, [r3]
341876aa:	2100      	movs	r1, #0
341876ac:	6639      	str	r1, [r7, #96]	@ 0x60
341876ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341876b2:	667b      	str	r3, [r7, #100]	@ 0x64
341876b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
341876b8:	4603      	mov	r3, r0
341876ba:	460a      	mov	r2, r1
341876bc:	4313      	orrs	r3, r2
341876be:	d067      	beq.n	34187790 <HAL_RCCEx_PeriphCLKConfig+0x1e58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
341876c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341876c4:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
341876c8:	4b27      	ldr	r3, [pc, #156]	@ (34187768 <HAL_RCCEx_PeriphCLKConfig+0x1e30>)
341876ca:	429a      	cmp	r2, r3
341876cc:	d116      	bne.n	341876fc <HAL_RCCEx_PeriphCLKConfig+0x1dc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341876ce:	4b1b      	ldr	r3, [pc, #108]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341876d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341876d4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341876d8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341876dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341876e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341876e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341876e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341876e8:	3b01      	subs	r3, #1
341876ea:	041b      	lsls	r3, r3, #16
341876ec:	4313      	orrs	r3, r2
341876ee:	4a13      	ldr	r2, [pc, #76]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341876f0:	430b      	orrs	r3, r1
341876f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341876f6:	f7fd fe3d 	bl	34185374 <LL_RCC_IC9_Enable>
341876fa:	e042      	b.n	34187782 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
341876fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187700:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34187704:	4b19      	ldr	r3, [pc, #100]	@ (3418776c <HAL_RCCEx_PeriphCLKConfig+0x1e34>)
34187706:	429a      	cmp	r2, r3
34187708:	d132      	bne.n	34187770 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418770a:	4b0c      	ldr	r3, [pc, #48]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418770c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187710:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187714:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187718:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418771c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418771e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34187724:	3b01      	subs	r3, #1
34187726:	041b      	lsls	r3, r3, #16
34187728:	4313      	orrs	r3, r2
3418772a:	4a04      	ldr	r2, [pc, #16]	@ (3418773c <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3418772c:	430b      	orrs	r3, r1
3418772e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187732:	f7fd ff1f 	bl	34185574 <LL_RCC_IC14_Enable>
34187736:	e024      	b.n	34187782 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
34187738:	07031420 	.word	0x07031420
3418773c:	56028000 	.word	0x56028000
34187740:	07011420 	.word	0x07011420
34187744:	07021820 	.word	0x07021820
34187748:	07031820 	.word	0x07031820
3418774c:	07011820 	.word	0x07011820
34187750:	07020030 	.word	0x07020030
34187754:	07030030 	.word	0x07030030
34187758:	07010030 	.word	0x07010030
3418775c:	07020430 	.word	0x07020430
34187760:	07030430 	.word	0x07030430
34187764:	07010430 	.word	0x07010430
34187768:	07020830 	.word	0x07020830
3418776c:	07030830 	.word	0x07030830
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34187770:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187774:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34187778:	4bb3      	ldr	r3, [pc, #716]	@ (34187a48 <HAL_RCCEx_PeriphCLKConfig+0x2110>)
3418777a:	429a      	cmp	r2, r3
3418777c:	d101      	bne.n	34187782 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    {
      LL_RCC_CLKP_Enable();
3418777e:	f7fe f8b9 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
34187782:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187786:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
3418778a:	4618      	mov	r0, r3
3418778c:	f7fd f855 	bl	3418483a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34187790:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187794:	e9d3 2300 	ldrd	r2, r3, [r3]
34187798:	2100      	movs	r1, #0
3418779a:	65b9      	str	r1, [r7, #88]	@ 0x58
3418779c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341877a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
341877a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
341877a6:	4603      	mov	r3, r0
341877a8:	460a      	mov	r2, r1
341877aa:	4313      	orrs	r3, r2
341877ac:	d04b      	beq.n	34187846 <HAL_RCCEx_PeriphCLKConfig+0x1f0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
341877ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341877b2:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
341877b6:	4ba5      	ldr	r3, [pc, #660]	@ (34187a4c <HAL_RCCEx_PeriphCLKConfig+0x2114>)
341877b8:	429a      	cmp	r2, r3
341877ba:	d116      	bne.n	341877ea <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341877bc:	4ba4      	ldr	r3, [pc, #656]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341877be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341877c2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341877c6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341877ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341877ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341877d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341877d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341877d6:	3b01      	subs	r3, #1
341877d8:	041b      	lsls	r3, r3, #16
341877da:	4313      	orrs	r3, r2
341877dc:	4a9c      	ldr	r2, [pc, #624]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341877de:	430b      	orrs	r3, r1
341877e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341877e4:	f7fd fdc6 	bl	34185374 <LL_RCC_IC9_Enable>
341877e8:	e026      	b.n	34187838 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
341877ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341877ee:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
341877f2:	4b98      	ldr	r3, [pc, #608]	@ (34187a54 <HAL_RCCEx_PeriphCLKConfig+0x211c>)
341877f4:	429a      	cmp	r2, r3
341877f6:	d116      	bne.n	34187826 <HAL_RCCEx_PeriphCLKConfig+0x1eee>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341877f8:	4b95      	ldr	r3, [pc, #596]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341877fa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341877fe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187802:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187806:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418780a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418780c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34187812:	3b01      	subs	r3, #1
34187814:	041b      	lsls	r3, r3, #16
34187816:	4313      	orrs	r3, r2
34187818:	4a8d      	ldr	r2, [pc, #564]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418781a:	430b      	orrs	r3, r1
3418781c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187820:	f7fd fea8 	bl	34185574 <LL_RCC_IC14_Enable>
34187824:	e008      	b.n	34187838 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34187826:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418782a:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3418782e:	4b8a      	ldr	r3, [pc, #552]	@ (34187a58 <HAL_RCCEx_PeriphCLKConfig+0x2120>)
34187830:	429a      	cmp	r2, r3
34187832:	d101      	bne.n	34187838 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    {
      LL_RCC_CLKP_Enable();
34187834:	f7fe f85e 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
34187838:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418783c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34187840:	4618      	mov	r0, r3
34187842:	f7fc fffa 	bl	3418483a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34187846:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418784a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418784e:	2100      	movs	r1, #0
34187850:	6539      	str	r1, [r7, #80]	@ 0x50
34187852:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34187856:	657b      	str	r3, [r7, #84]	@ 0x54
34187858:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
3418785c:	4603      	mov	r3, r0
3418785e:	460a      	mov	r2, r1
34187860:	4313      	orrs	r3, r2
34187862:	d04b      	beq.n	341878fc <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34187864:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187868:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3418786c:	4b7b      	ldr	r3, [pc, #492]	@ (34187a5c <HAL_RCCEx_PeriphCLKConfig+0x2124>)
3418786e:	429a      	cmp	r2, r3
34187870:	d116      	bne.n	341878a0 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187872:	4b77      	ldr	r3, [pc, #476]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187874:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187878:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418787c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187880:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187884:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187886:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418788a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418788c:	3b01      	subs	r3, #1
3418788e:	041b      	lsls	r3, r3, #16
34187890:	4313      	orrs	r3, r2
34187892:	4a6f      	ldr	r2, [pc, #444]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187894:	430b      	orrs	r3, r1
34187896:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418789a:	f7fd fd6b 	bl	34185374 <LL_RCC_IC9_Enable>
3418789e:	e026      	b.n	341878ee <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
341878a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341878a4:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
341878a8:	4b6d      	ldr	r3, [pc, #436]	@ (34187a60 <HAL_RCCEx_PeriphCLKConfig+0x2128>)
341878aa:	429a      	cmp	r2, r3
341878ac:	d116      	bne.n	341878dc <HAL_RCCEx_PeriphCLKConfig+0x1fa4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341878ae:	4b68      	ldr	r3, [pc, #416]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341878b0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341878b4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341878b8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341878bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341878c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341878c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341878c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341878c8:	3b01      	subs	r3, #1
341878ca:	041b      	lsls	r3, r3, #16
341878cc:	4313      	orrs	r3, r2
341878ce:	4a60      	ldr	r2, [pc, #384]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341878d0:	430b      	orrs	r3, r1
341878d2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341878d6:	f7fd fe4d 	bl	34185574 <LL_RCC_IC14_Enable>
341878da:	e008      	b.n	341878ee <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
341878dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341878e0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
341878e4:	4b5f      	ldr	r3, [pc, #380]	@ (34187a64 <HAL_RCCEx_PeriphCLKConfig+0x212c>)
341878e6:	429a      	cmp	r2, r3
341878e8:	d101      	bne.n	341878ee <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    {
      LL_RCC_CLKP_Enable();
341878ea:	f7fe f803 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
341878ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341878f2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
341878f6:	4618      	mov	r0, r3
341878f8:	f7fc ff9f 	bl	3418483a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
341878fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187900:	e9d3 2300 	ldrd	r2, r3, [r3]
34187904:	2100      	movs	r1, #0
34187906:	64b9      	str	r1, [r7, #72]	@ 0x48
34187908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3418790c:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418790e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
34187912:	4603      	mov	r3, r0
34187914:	460a      	mov	r2, r1
34187916:	4313      	orrs	r3, r2
34187918:	d04b      	beq.n	341879b2 <HAL_RCCEx_PeriphCLKConfig+0x207a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
3418791a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418791e:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34187922:	4b51      	ldr	r3, [pc, #324]	@ (34187a68 <HAL_RCCEx_PeriphCLKConfig+0x2130>)
34187924:	429a      	cmp	r2, r3
34187926:	d116      	bne.n	34187956 <HAL_RCCEx_PeriphCLKConfig+0x201e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187928:	4b49      	ldr	r3, [pc, #292]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418792a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418792e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187932:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187936:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418793a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418793c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187942:	3b01      	subs	r3, #1
34187944:	041b      	lsls	r3, r3, #16
34187946:	4313      	orrs	r3, r2
34187948:	4a41      	ldr	r2, [pc, #260]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3418794a:	430b      	orrs	r3, r1
3418794c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187950:	f7fd fd10 	bl	34185374 <LL_RCC_IC9_Enable>
34187954:	e026      	b.n	341879a4 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34187956:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418795a:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3418795e:	4b43      	ldr	r3, [pc, #268]	@ (34187a6c <HAL_RCCEx_PeriphCLKConfig+0x2134>)
34187960:	429a      	cmp	r2, r3
34187962:	d116      	bne.n	34187992 <HAL_RCCEx_PeriphCLKConfig+0x205a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187964:	4b3a      	ldr	r3, [pc, #232]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187966:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418796a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418796e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187972:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187976:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187978:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418797c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418797e:	3b01      	subs	r3, #1
34187980:	041b      	lsls	r3, r3, #16
34187982:	4313      	orrs	r3, r2
34187984:	4a32      	ldr	r2, [pc, #200]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187986:	430b      	orrs	r3, r1
34187988:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418798c:	f7fd fdf2 	bl	34185574 <LL_RCC_IC14_Enable>
34187990:	e008      	b.n	341879a4 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34187992:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187996:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3418799a:	4b35      	ldr	r3, [pc, #212]	@ (34187a70 <HAL_RCCEx_PeriphCLKConfig+0x2138>)
3418799c:	429a      	cmp	r2, r3
3418799e:	d101      	bne.n	341879a4 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    {
      LL_RCC_CLKP_Enable();
341879a0:	f7fd ffa8 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
341879a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341879a8:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
341879ac:	4618      	mov	r0, r3
341879ae:	f7fc ff44 	bl	3418483a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
341879b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341879b6:	e9d3 2300 	ldrd	r2, r3, [r3]
341879ba:	2100      	movs	r1, #0
341879bc:	6439      	str	r1, [r7, #64]	@ 0x40
341879be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
341879c2:	647b      	str	r3, [r7, #68]	@ 0x44
341879c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
341879c8:	4603      	mov	r3, r0
341879ca:	460a      	mov	r2, r1
341879cc:	4313      	orrs	r3, r2
341879ce:	d065      	beq.n	34187a9c <HAL_RCCEx_PeriphCLKConfig+0x2164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
341879d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341879d4:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
341879d8:	4b26      	ldr	r3, [pc, #152]	@ (34187a74 <HAL_RCCEx_PeriphCLKConfig+0x213c>)
341879da:	429a      	cmp	r2, r3
341879dc:	d116      	bne.n	34187a0c <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341879de:	4b1c      	ldr	r3, [pc, #112]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341879e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341879e4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341879e8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341879ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341879f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341879f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341879f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341879f8:	3b01      	subs	r3, #1
341879fa:	041b      	lsls	r3, r3, #16
341879fc:	4313      	orrs	r3, r2
341879fe:	4a14      	ldr	r2, [pc, #80]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187a00:	430b      	orrs	r3, r1
34187a02:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187a06:	f7fd fcb5 	bl	34185374 <LL_RCC_IC9_Enable>
34187a0a:	e040      	b.n	34187a8e <HAL_RCCEx_PeriphCLKConfig+0x2156>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34187a0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a10:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34187a14:	4b18      	ldr	r3, [pc, #96]	@ (34187a78 <HAL_RCCEx_PeriphCLKConfig+0x2140>)
34187a16:	429a      	cmp	r2, r3
34187a18:	d130      	bne.n	34187a7c <HAL_RCCEx_PeriphCLKConfig+0x2144>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187a1a:	4b0d      	ldr	r3, [pc, #52]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187a1c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187a20:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187a24:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187a28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187a2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34187a34:	3b01      	subs	r3, #1
34187a36:	041b      	lsls	r3, r3, #16
34187a38:	4313      	orrs	r3, r2
34187a3a:	4a05      	ldr	r2, [pc, #20]	@ (34187a50 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187a3c:	430b      	orrs	r3, r1
34187a3e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187a42:	f7fd fd97 	bl	34185574 <LL_RCC_IC14_Enable>
34187a46:	e022      	b.n	34187a8e <HAL_RCCEx_PeriphCLKConfig+0x2156>
34187a48:	07010830 	.word	0x07010830
34187a4c:	07020c30 	.word	0x07020c30
34187a50:	56028000 	.word	0x56028000
34187a54:	07030c30 	.word	0x07030c30
34187a58:	07010c30 	.word	0x07010c30
34187a5c:	07021030 	.word	0x07021030
34187a60:	07031030 	.word	0x07031030
34187a64:	07011030 	.word	0x07011030
34187a68:	07021430 	.word	0x07021430
34187a6c:	07031430 	.word	0x07031430
34187a70:	07011430 	.word	0x07011430
34187a74:	07021830 	.word	0x07021830
34187a78:	07031830 	.word	0x07031830
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34187a7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a80:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34187a84:	4bc8      	ldr	r3, [pc, #800]	@ (34187da8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34187a86:	429a      	cmp	r2, r3
34187a88:	d101      	bne.n	34187a8e <HAL_RCCEx_PeriphCLKConfig+0x2156>
    {
      LL_RCC_CLKP_Enable();
34187a8a:	f7fd ff33 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
34187a8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a92:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
34187a96:	4618      	mov	r0, r3
34187a98:	f7fc fecf 	bl	3418483a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34187a9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
34187aa4:	2100      	movs	r1, #0
34187aa6:	63b9      	str	r1, [r7, #56]	@ 0x38
34187aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34187aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
34187aae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
34187ab2:	4603      	mov	r3, r0
34187ab4:	460a      	mov	r2, r1
34187ab6:	4313      	orrs	r3, r2
34187ab8:	d04b      	beq.n	34187b52 <HAL_RCCEx_PeriphCLKConfig+0x221a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34187aba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187abe:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34187ac2:	4bba      	ldr	r3, [pc, #744]	@ (34187dac <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34187ac4:	429a      	cmp	r2, r3
34187ac6:	d116      	bne.n	34187af6 <HAL_RCCEx_PeriphCLKConfig+0x21be>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187ac8:	4bb9      	ldr	r3, [pc, #740]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187aca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187ace:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187ad2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187ad6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ada:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187adc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187ae2:	3b01      	subs	r3, #1
34187ae4:	041b      	lsls	r3, r3, #16
34187ae6:	4313      	orrs	r3, r2
34187ae8:	4ab1      	ldr	r2, [pc, #708]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187aea:	430b      	orrs	r3, r1
34187aec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187af0:	f7fd fc40 	bl	34185374 <LL_RCC_IC9_Enable>
34187af4:	e026      	b.n	34187b44 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34187af6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187afa:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34187afe:	4bad      	ldr	r3, [pc, #692]	@ (34187db4 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
34187b00:	429a      	cmp	r2, r3
34187b02:	d116      	bne.n	34187b32 <HAL_RCCEx_PeriphCLKConfig+0x21fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187b04:	4baa      	ldr	r3, [pc, #680]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187b06:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187b0a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187b0e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187b12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187b18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34187b1e:	3b01      	subs	r3, #1
34187b20:	041b      	lsls	r3, r3, #16
34187b22:	4313      	orrs	r3, r2
34187b24:	4aa2      	ldr	r2, [pc, #648]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187b26:	430b      	orrs	r3, r1
34187b28:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187b2c:	f7fd fd22 	bl	34185574 <LL_RCC_IC14_Enable>
34187b30:	e008      	b.n	34187b44 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34187b32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b36:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34187b3a:	4b9f      	ldr	r3, [pc, #636]	@ (34187db8 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
34187b3c:	429a      	cmp	r2, r3
34187b3e:	d101      	bne.n	34187b44 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    {
      LL_RCC_CLKP_Enable();
34187b40:	f7fd fed8 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
34187b44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b48:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
34187b4c:	4618      	mov	r0, r3
34187b4e:	f7fc fe74 	bl	3418483a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34187b52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b56:	e9d3 2300 	ldrd	r2, r3, [r3]
34187b5a:	2100      	movs	r1, #0
34187b5c:	6339      	str	r1, [r7, #48]	@ 0x30
34187b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34187b62:	637b      	str	r3, [r7, #52]	@ 0x34
34187b64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34187b68:	4603      	mov	r3, r0
34187b6a:	460a      	mov	r2, r1
34187b6c:	4313      	orrs	r3, r2
34187b6e:	d04b      	beq.n	34187c08 <HAL_RCCEx_PeriphCLKConfig+0x22d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34187b70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b74:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34187b78:	4a90      	ldr	r2, [pc, #576]	@ (34187dbc <HAL_RCCEx_PeriphCLKConfig+0x2484>)
34187b7a:	4293      	cmp	r3, r2
34187b7c:	d116      	bne.n	34187bac <HAL_RCCEx_PeriphCLKConfig+0x2274>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187b7e:	4b8c      	ldr	r3, [pc, #560]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187b80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187b84:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187b88:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187b8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187b92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187b98:	3b01      	subs	r3, #1
34187b9a:	041b      	lsls	r3, r3, #16
34187b9c:	4313      	orrs	r3, r2
34187b9e:	4a84      	ldr	r2, [pc, #528]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187ba0:	430b      	orrs	r3, r1
34187ba2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187ba6:	f7fd fbe5 	bl	34185374 <LL_RCC_IC9_Enable>
34187baa:	e026      	b.n	34187bfa <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34187bac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bb0:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34187bb4:	4a82      	ldr	r2, [pc, #520]	@ (34187dc0 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
34187bb6:	4293      	cmp	r3, r2
34187bb8:	d116      	bne.n	34187be8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187bba:	4b7d      	ldr	r3, [pc, #500]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187bbc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187bc0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187bc4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187bc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bcc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187bce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34187bd4:	3b01      	subs	r3, #1
34187bd6:	041b      	lsls	r3, r3, #16
34187bd8:	4313      	orrs	r3, r2
34187bda:	4a75      	ldr	r2, [pc, #468]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187bdc:	430b      	orrs	r3, r1
34187bde:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187be2:	f7fd fcc7 	bl	34185574 <LL_RCC_IC14_Enable>
34187be6:	e008      	b.n	34187bfa <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34187be8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bec:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34187bf0:	4a74      	ldr	r2, [pc, #464]	@ (34187dc4 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
34187bf2:	4293      	cmp	r3, r2
34187bf4:	d101      	bne.n	34187bfa <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    {
      LL_RCC_CLKP_Enable();
34187bf6:	f7fd fe7d 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
34187bfa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bfe:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34187c02:	4618      	mov	r0, r3
34187c04:	f7fc fe19 	bl	3418483a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34187c08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
34187c10:	2100      	movs	r1, #0
34187c12:	62b9      	str	r1, [r7, #40]	@ 0x28
34187c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34187c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
34187c1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
34187c1e:	4603      	mov	r3, r0
34187c20:	460a      	mov	r2, r1
34187c22:	4313      	orrs	r3, r2
34187c24:	d04b      	beq.n	34187cbe <HAL_RCCEx_PeriphCLKConfig+0x2386>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
34187c26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c2a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34187c2e:	4a66      	ldr	r2, [pc, #408]	@ (34187dc8 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
34187c30:	4293      	cmp	r3, r2
34187c32:	d116      	bne.n	34187c62 <HAL_RCCEx_PeriphCLKConfig+0x232a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187c34:	4b5e      	ldr	r3, [pc, #376]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187c36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187c3a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34187c3e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34187c42:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34187c46:	6c91      	ldr	r1, [r2, #72]	@ 0x48
34187c48:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34187c4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
34187c4e:	3a01      	subs	r2, #1
34187c50:	0412      	lsls	r2, r2, #16
34187c52:	430a      	orrs	r2, r1
34187c54:	4956      	ldr	r1, [pc, #344]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187c56:	4313      	orrs	r3, r2
34187c58:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187c5c:	f7fd fb8a 	bl	34185374 <LL_RCC_IC9_Enable>
34187c60:	e026      	b.n	34187cb0 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
34187c62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c66:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34187c6a:	4a58      	ldr	r2, [pc, #352]	@ (34187dcc <HAL_RCCEx_PeriphCLKConfig+0x2494>)
34187c6c:	4293      	cmp	r3, r2
34187c6e:	d116      	bne.n	34187c9e <HAL_RCCEx_PeriphCLKConfig+0x2366>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187c70:	4b4f      	ldr	r3, [pc, #316]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187c72:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187c76:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34187c7a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34187c7e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34187c82:	6f11      	ldr	r1, [r2, #112]	@ 0x70
34187c84:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34187c88:	6f52      	ldr	r2, [r2, #116]	@ 0x74
34187c8a:	3a01      	subs	r2, #1
34187c8c:	0412      	lsls	r2, r2, #16
34187c8e:	430a      	orrs	r2, r1
34187c90:	4947      	ldr	r1, [pc, #284]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187c92:	4313      	orrs	r3, r2
34187c94:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187c98:	f7fd fc6c 	bl	34185574 <LL_RCC_IC14_Enable>
34187c9c:	e008      	b.n	34187cb0 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34187c9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ca2:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34187ca6:	4a4a      	ldr	r2, [pc, #296]	@ (34187dd0 <HAL_RCCEx_PeriphCLKConfig+0x2498>)
34187ca8:	4293      	cmp	r3, r2
34187caa:	d101      	bne.n	34187cb0 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    {
      LL_RCC_CLKP_Enable();
34187cac:	f7fd fe22 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
34187cb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187cb4:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34187cb8:	4618      	mov	r0, r3
34187cba:	f7fc fdbe 	bl	3418483a <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34187cbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
34187cc6:	2100      	movs	r1, #0
34187cc8:	6239      	str	r1, [r7, #32]
34187cca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34187cce:	627b      	str	r3, [r7, #36]	@ 0x24
34187cd0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
34187cd4:	4603      	mov	r3, r0
34187cd6:	460a      	mov	r2, r1
34187cd8:	4313      	orrs	r3, r2
34187cda:	d014      	beq.n	34187d06 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34187cdc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ce0:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34187ce4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34187ce8:	4618      	mov	r0, r3
34187cea:	f7fc fd4e 	bl	3418478a <LL_RCC_SetOTGPHYCKREFClockSource>
34187cee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187cf2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34187cf6:	0fdb      	lsrs	r3, r3, #31
34187cf8:	2b01      	cmp	r3, #1
34187cfa:	d102      	bne.n	34187d02 <HAL_RCCEx_PeriphCLKConfig+0x23ca>
34187cfc:	f7fc faf0 	bl	341842e0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34187d00:	e001      	b.n	34187d06 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
34187d02:	f7fc fadd 	bl	341842c0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34187d06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
34187d0e:	2100      	movs	r1, #0
34187d10:	61b9      	str	r1, [r7, #24]
34187d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34187d16:	61fb      	str	r3, [r7, #28]
34187d18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
34187d1c:	4603      	mov	r3, r0
34187d1e:	460a      	mov	r2, r1
34187d20:	4313      	orrs	r3, r2
34187d22:	d014      	beq.n	34187d4e <HAL_RCCEx_PeriphCLKConfig+0x2416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34187d24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d28:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
34187d2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34187d30:	4618      	mov	r0, r3
34187d32:	f7fc fd2a 	bl	3418478a <LL_RCC_SetOTGPHYCKREFClockSource>
34187d36:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d3a:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
34187d3e:	0fdb      	lsrs	r3, r3, #31
34187d40:	2b01      	cmp	r3, #1
34187d42:	d102      	bne.n	34187d4a <HAL_RCCEx_PeriphCLKConfig+0x2412>
34187d44:	f7fc facc 	bl	341842e0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34187d48:	e001      	b.n	34187d4e <HAL_RCCEx_PeriphCLKConfig+0x2416>
34187d4a:	f7fc fab9 	bl	341842c0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
34187d4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d52:	e9d3 2300 	ldrd	r2, r3, [r3]
34187d56:	2100      	movs	r1, #0
34187d58:	6139      	str	r1, [r7, #16]
34187d5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34187d5e:	617b      	str	r3, [r7, #20]
34187d60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
34187d64:	4603      	mov	r3, r0
34187d66:	460a      	mov	r2, r1
34187d68:	4313      	orrs	r3, r2
34187d6a:	d053      	beq.n	34187e14 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
34187d6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d70:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34187d74:	4a17      	ldr	r2, [pc, #92]	@ (34187dd4 <HAL_RCCEx_PeriphCLKConfig+0x249c>)
34187d76:	4293      	cmp	r3, r2
34187d78:	d12e      	bne.n	34187dd8 <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34187d7a:	4b0d      	ldr	r3, [pc, #52]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187d7c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34187d80:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34187d84:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34187d88:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34187d8c:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34187d8e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34187d92:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34187d94:	3a01      	subs	r2, #1
34187d96:	0412      	lsls	r2, r2, #16
34187d98:	430a      	orrs	r2, r1
34187d9a:	4905      	ldr	r1, [pc, #20]	@ (34187db0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187d9c:	4313      	orrs	r3, r2
34187d9e:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34187da2:	f7fd fc27 	bl	341855f4 <LL_RCC_IC15_Enable>
34187da6:	e020      	b.n	34187dea <HAL_RCCEx_PeriphCLKConfig+0x24b2>
34187da8:	07011830 	.word	0x07011830
34187dac:	07021c30 	.word	0x07021c30
34187db0:	56028000 	.word	0x56028000
34187db4:	07031c30 	.word	0x07031c30
34187db8:	07011c30 	.word	0x07011c30
34187dbc:	07020034 	.word	0x07020034
34187dc0:	07030034 	.word	0x07030034
34187dc4:	07010034 	.word	0x07010034
34187dc8:	07020434 	.word	0x07020434
34187dcc:	07030434 	.word	0x07030434
34187dd0:	07010434 	.word	0x07010434
34187dd4:	03020c14 	.word	0x03020c14
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34187dd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ddc:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34187de0:	4a43      	ldr	r2, [pc, #268]	@ (34187ef0 <HAL_RCCEx_PeriphCLKConfig+0x25b8>)
34187de2:	4293      	cmp	r3, r2
34187de4:	d101      	bne.n	34187dea <HAL_RCCEx_PeriphCLKConfig+0x24b2>
    {
      LL_RCC_CLKP_Enable();
34187de6:	f7fd fd85 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34187dea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187dee:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34187df2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34187df6:	4618      	mov	r0, r3
34187df8:	f7fc fcbc 	bl	34184774 <LL_RCC_SetOTGPHYClockSource>
34187dfc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e00:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34187e04:	0fdb      	lsrs	r3, r3, #31
34187e06:	2b01      	cmp	r3, #1
34187e08:	d102      	bne.n	34187e10 <HAL_RCCEx_PeriphCLKConfig+0x24d8>
34187e0a:	f7fc fa69 	bl	341842e0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34187e0e:	e001      	b.n	34187e14 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
34187e10:	f7fc fa56 	bl	341842c0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34187e14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e18:	e9d3 2300 	ldrd	r2, r3, [r3]
34187e1c:	2100      	movs	r1, #0
34187e1e:	60b9      	str	r1, [r7, #8]
34187e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34187e24:	60fb      	str	r3, [r7, #12]
34187e26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
34187e2a:	4603      	mov	r3, r0
34187e2c:	460a      	mov	r2, r1
34187e2e:	4313      	orrs	r3, r2
34187e30:	d03b      	beq.n	34187eaa <HAL_RCCEx_PeriphCLKConfig+0x2572>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34187e32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e36:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34187e3a:	4a2e      	ldr	r2, [pc, #184]	@ (34187ef4 <HAL_RCCEx_PeriphCLKConfig+0x25bc>)
34187e3c:	4293      	cmp	r3, r2
34187e3e:	d116      	bne.n	34187e6e <HAL_RCCEx_PeriphCLKConfig+0x2536>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34187e40:	4b2d      	ldr	r3, [pc, #180]	@ (34187ef8 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
34187e42:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34187e46:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34187e4a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34187e4e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34187e52:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34187e54:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34187e58:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34187e5a:	3a01      	subs	r2, #1
34187e5c:	0412      	lsls	r2, r2, #16
34187e5e:	430a      	orrs	r2, r1
34187e60:	4925      	ldr	r1, [pc, #148]	@ (34187ef8 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
34187e62:	4313      	orrs	r3, r2
34187e64:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34187e68:	f7fd fbc4 	bl	341855f4 <LL_RCC_IC15_Enable>
34187e6c:	e008      	b.n	34187e80 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
34187e6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e72:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34187e76:	4a21      	ldr	r2, [pc, #132]	@ (34187efc <HAL_RCCEx_PeriphCLKConfig+0x25c4>)
34187e78:	4293      	cmp	r3, r2
34187e7a:	d101      	bne.n	34187e80 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    {
      LL_RCC_CLKP_Enable();
34187e7c:	f7fd fd3a 	bl	341858f4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34187e80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e84:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34187e88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34187e8c:	4618      	mov	r0, r3
34187e8e:	f7fc fc71 	bl	34184774 <LL_RCC_SetOTGPHYClockSource>
34187e92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e96:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34187e9a:	0fdb      	lsrs	r3, r3, #31
34187e9c:	2b01      	cmp	r3, #1
34187e9e:	d102      	bne.n	34187ea6 <HAL_RCCEx_PeriphCLKConfig+0x256e>
34187ea0:	f7fc fa1e 	bl	341842e0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34187ea4:	e001      	b.n	34187eaa <HAL_RCCEx_PeriphCLKConfig+0x2572>
34187ea6:	f7fc fa0b 	bl	341842c0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
34187eaa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187eae:	e9d3 2300 	ldrd	r2, r3, [r3]
34187eb2:	2100      	movs	r1, #0
34187eb4:	6039      	str	r1, [r7, #0]
34187eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34187eba:	607b      	str	r3, [r7, #4]
34187ebc:	e9d7 0100 	ldrd	r0, r1, [r7]
34187ec0:	4603      	mov	r3, r0
34187ec2:	460a      	mov	r2, r1
34187ec4:	4313      	orrs	r3, r2
34187ec6:	d006      	beq.n	34187ed6 <HAL_RCCEx_PeriphCLKConfig+0x259e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
34187ec8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ecc:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34187ed0:	4618      	mov	r0, r3
34187ed2:	f7fc fe8b 	bl	34184bec <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
34187ed6:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
34187eda:	2b00      	cmp	r3, #0
34187edc:	d101      	bne.n	34187ee2 <HAL_RCCEx_PeriphCLKConfig+0x25aa>
  {
    return HAL_OK;
34187ede:	2300      	movs	r3, #0
34187ee0:	e000      	b.n	34187ee4 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
  }
  return HAL_ERROR;
34187ee2:	2301      	movs	r3, #1
}
34187ee4:	4618      	mov	r0, r3
34187ee6:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
34187eea:	46bd      	mov	sp, r7
34187eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
34187ef0:	03010c14 	.word	0x03010c14
34187ef4:	03021414 	.word	0x03021414
34187ef8:	56028000 	.word	0x56028000
34187efc:	03011414 	.word	0x03011414

34187f00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
34187f00:	b590      	push	{r4, r7, lr}
34187f02:	b085      	sub	sp, #20
34187f04:	af00      	add	r7, sp, #0
34187f06:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
34187f0a:	2100      	movs	r1, #0
34187f0c:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
34187f0e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187f12:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
34187f16:	ea50 0104 	orrs.w	r1, r0, r4
34187f1a:	f000 8436 	beq.w	3418878a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
34187f1e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187f22:	2801      	cmp	r0, #1
34187f24:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
34187f28:	f080 8434 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187f30:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
34187f34:	ea50 0104 	orrs.w	r1, r0, r4
34187f38:	f000 8422 	beq.w	34188780 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
34187f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187f40:	2801      	cmp	r0, #1
34187f42:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
34187f46:	f080 8425 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187f4a:	e9d7 0100 	ldrd	r0, r1, [r7]
34187f4e:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
34187f52:	ea50 0104 	orrs.w	r1, r0, r4
34187f56:	f000 840e 	beq.w	34188776 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
34187f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
34187f5e:	2801      	cmp	r0, #1
34187f60:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
34187f64:	f080 8416 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187f68:	e9d7 0100 	ldrd	r0, r1, [r7]
34187f6c:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
34187f70:	ea50 0104 	orrs.w	r1, r0, r4
34187f74:	f000 83fa 	beq.w	3418876c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
34187f78:	e9d7 0100 	ldrd	r0, r1, [r7]
34187f7c:	2801      	cmp	r0, #1
34187f7e:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
34187f82:	f080 8407 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187f86:	e9d7 0100 	ldrd	r0, r1, [r7]
34187f8a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
34187f8e:	ea50 0104 	orrs.w	r1, r0, r4
34187f92:	f000 83e6 	beq.w	34188762 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
34187f96:	e9d7 0100 	ldrd	r0, r1, [r7]
34187f9a:	2801      	cmp	r0, #1
34187f9c:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
34187fa0:	f080 83f8 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
34187fa8:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
34187fac:	ea50 0104 	orrs.w	r1, r0, r4
34187fb0:	f000 83d2 	beq.w	34188758 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34187fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
34187fb8:	2801      	cmp	r0, #1
34187fba:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
34187fbe:	f080 83e9 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187fc2:	e9d7 0100 	ldrd	r0, r1, [r7]
34187fc6:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
34187fca:	ea50 0104 	orrs.w	r1, r0, r4
34187fce:	f000 83be 	beq.w	3418874e <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
34187fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
34187fd6:	2801      	cmp	r0, #1
34187fd8:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
34187fdc:	f080 83da 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
34187fe4:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
34187fe8:	ea50 0104 	orrs.w	r1, r0, r4
34187fec:	f000 83aa 	beq.w	34188744 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34187ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
34187ff4:	2801      	cmp	r0, #1
34187ff6:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
34187ffa:	f080 83cb 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
34188002:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
34188006:	ea50 0104 	orrs.w	r1, r0, r4
3418800a:	f000 8396 	beq.w	3418873a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
3418800e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188012:	2801      	cmp	r0, #1
34188014:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
34188018:	f080 83bc 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418801c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188020:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
34188024:	ea50 0104 	orrs.w	r1, r0, r4
34188028:	f000 8382 	beq.w	34188730 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
3418802c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188030:	2801      	cmp	r0, #1
34188032:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
34188036:	f080 83ad 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418803a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418803e:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
34188042:	ea50 0104 	orrs.w	r1, r0, r4
34188046:	f000 836e 	beq.w	34188726 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
3418804a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418804e:	2801      	cmp	r0, #1
34188050:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
34188054:	f080 839e 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188058:	e9d7 0100 	ldrd	r0, r1, [r7]
3418805c:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
34188060:	ea50 0104 	orrs.w	r1, r0, r4
34188064:	f000 835a 	beq.w	3418871c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
34188068:	e9d7 0100 	ldrd	r0, r1, [r7]
3418806c:	2801      	cmp	r0, #1
3418806e:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
34188072:	f080 838f 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188076:	e9d7 0100 	ldrd	r0, r1, [r7]
3418807a:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
3418807e:	ea50 0104 	orrs.w	r1, r0, r4
34188082:	f000 8346 	beq.w	34188712 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
34188086:	e9d7 0100 	ldrd	r0, r1, [r7]
3418808a:	2801      	cmp	r0, #1
3418808c:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
34188090:	f080 8380 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188094:	e9d7 0100 	ldrd	r0, r1, [r7]
34188098:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
3418809c:	ea50 0104 	orrs.w	r1, r0, r4
341880a0:	f000 8332 	beq.w	34188708 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
341880a4:	e9d7 0100 	ldrd	r0, r1, [r7]
341880a8:	2801      	cmp	r0, #1
341880aa:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
341880ae:	f080 8371 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341880b2:	e9d7 0100 	ldrd	r0, r1, [r7]
341880b6:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
341880ba:	ea50 0104 	orrs.w	r1, r0, r4
341880be:	f000 831e 	beq.w	341886fe <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
341880c2:	e9d7 0100 	ldrd	r0, r1, [r7]
341880c6:	2801      	cmp	r0, #1
341880c8:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
341880cc:	f080 8362 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341880d0:	e9d7 0100 	ldrd	r0, r1, [r7]
341880d4:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
341880d8:	ea50 0104 	orrs.w	r1, r0, r4
341880dc:	f000 830a 	beq.w	341886f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
341880e0:	e9d7 0100 	ldrd	r0, r1, [r7]
341880e4:	2801      	cmp	r0, #1
341880e6:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
341880ea:	f080 8353 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341880ee:	e9d7 0100 	ldrd	r0, r1, [r7]
341880f2:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
341880f6:	ea50 0104 	orrs.w	r1, r0, r4
341880fa:	f000 82f6 	beq.w	341886ea <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
341880fe:	e9d7 0100 	ldrd	r0, r1, [r7]
34188102:	2801      	cmp	r0, #1
34188104:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
34188108:	f080 8344 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418810c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188110:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
34188114:	ea50 0104 	orrs.w	r1, r0, r4
34188118:	f000 82e2 	beq.w	341886e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
3418811c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188120:	2801      	cmp	r0, #1
34188122:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
34188126:	f080 8335 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418812a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418812e:	f1a1 0420 	sub.w	r4, r1, #32
34188132:	ea50 0104 	orrs.w	r1, r0, r4
34188136:	f000 82ce 	beq.w	341886d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
3418813a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418813e:	2801      	cmp	r0, #1
34188140:	f171 0120 	sbcs.w	r1, r1, #32
34188144:	f080 8326 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188148:	e9d7 0100 	ldrd	r0, r1, [r7]
3418814c:	f1a1 0410 	sub.w	r4, r1, #16
34188150:	ea50 0104 	orrs.w	r1, r0, r4
34188154:	f000 82ba 	beq.w	341886cc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
34188158:	e9d7 0100 	ldrd	r0, r1, [r7]
3418815c:	2801      	cmp	r0, #1
3418815e:	f171 0110 	sbcs.w	r1, r1, #16
34188162:	f080 8317 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188166:	e9d7 0100 	ldrd	r0, r1, [r7]
3418816a:	f1a1 0408 	sub.w	r4, r1, #8
3418816e:	ea50 0104 	orrs.w	r1, r0, r4
34188172:	f000 82a6 	beq.w	341886c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
34188176:	e9d7 0100 	ldrd	r0, r1, [r7]
3418817a:	2801      	cmp	r0, #1
3418817c:	f171 0108 	sbcs.w	r1, r1, #8
34188180:	f080 8308 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188184:	e9d7 0100 	ldrd	r0, r1, [r7]
34188188:	1f0c      	subs	r4, r1, #4
3418818a:	ea50 0104 	orrs.w	r1, r0, r4
3418818e:	f000 8293 	beq.w	341886b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
34188192:	e9d7 0100 	ldrd	r0, r1, [r7]
34188196:	2801      	cmp	r0, #1
34188198:	f171 0104 	sbcs.w	r1, r1, #4
3418819c:	f080 82fa 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341881a0:	e9d7 0100 	ldrd	r0, r1, [r7]
341881a4:	1e8c      	subs	r4, r1, #2
341881a6:	ea50 0104 	orrs.w	r1, r0, r4
341881aa:	f000 8280 	beq.w	341886ae <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
341881ae:	e9d7 0100 	ldrd	r0, r1, [r7]
341881b2:	2801      	cmp	r0, #1
341881b4:	f171 0102 	sbcs.w	r1, r1, #2
341881b8:	f080 82ec 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341881bc:	e9d7 0100 	ldrd	r0, r1, [r7]
341881c0:	1e4c      	subs	r4, r1, #1
341881c2:	ea50 0104 	orrs.w	r1, r0, r4
341881c6:	f000 826d 	beq.w	341886a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
341881ca:	e9d7 0100 	ldrd	r0, r1, [r7]
341881ce:	2801      	cmp	r0, #1
341881d0:	f171 0101 	sbcs.w	r1, r1, #1
341881d4:	f080 82de 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341881d8:	e9d7 0100 	ldrd	r0, r1, [r7]
341881dc:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
341881e0:	4321      	orrs	r1, r4
341881e2:	f000 825a 	beq.w	3418869a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
341881e6:	e9d7 0100 	ldrd	r0, r1, [r7]
341881ea:	4cda      	ldr	r4, [pc, #872]	@ (34188554 <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
341881ec:	42a0      	cmp	r0, r4
341881ee:	f171 0100 	sbcs.w	r1, r1, #0
341881f2:	f080 82cf 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341881f6:	e9d7 0100 	ldrd	r0, r1, [r7]
341881fa:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
341881fe:	4321      	orrs	r1, r4
34188200:	f000 8246 	beq.w	34188690 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
34188204:	e9d7 0100 	ldrd	r0, r1, [r7]
34188208:	4cd3      	ldr	r4, [pc, #844]	@ (34188558 <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
3418820a:	42a0      	cmp	r0, r4
3418820c:	f171 0100 	sbcs.w	r1, r1, #0
34188210:	f080 82c0 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188214:	e9d7 0100 	ldrd	r0, r1, [r7]
34188218:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
3418821c:	4321      	orrs	r1, r4
3418821e:	f000 8232 	beq.w	34188686 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
34188222:	e9d7 0100 	ldrd	r0, r1, [r7]
34188226:	4ccd      	ldr	r4, [pc, #820]	@ (3418855c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
34188228:	42a0      	cmp	r0, r4
3418822a:	f171 0100 	sbcs.w	r1, r1, #0
3418822e:	f080 82b1 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188232:	e9d7 0100 	ldrd	r0, r1, [r7]
34188236:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
3418823a:	4321      	orrs	r1, r4
3418823c:	f000 821e 	beq.w	3418867c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
34188240:	e9d7 0100 	ldrd	r0, r1, [r7]
34188244:	4cc6      	ldr	r4, [pc, #792]	@ (34188560 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
34188246:	42a0      	cmp	r0, r4
34188248:	f171 0100 	sbcs.w	r1, r1, #0
3418824c:	f080 82a2 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188250:	e9d7 0100 	ldrd	r0, r1, [r7]
34188254:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
34188258:	4321      	orrs	r1, r4
3418825a:	f000 820b 	beq.w	34188674 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
3418825e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188262:	4cc0      	ldr	r4, [pc, #768]	@ (34188564 <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
34188264:	42a0      	cmp	r0, r4
34188266:	f171 0100 	sbcs.w	r1, r1, #0
3418826a:	f080 8293 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418826e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188272:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
34188276:	4321      	orrs	r1, r4
34188278:	f000 81f7 	beq.w	3418866a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
3418827c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188280:	4cb9      	ldr	r4, [pc, #740]	@ (34188568 <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
34188282:	42a0      	cmp	r0, r4
34188284:	f171 0100 	sbcs.w	r1, r1, #0
34188288:	f080 8284 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418828c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188290:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
34188294:	4321      	orrs	r1, r4
34188296:	f000 81e2 	beq.w	3418865e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
3418829a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418829e:	4cb3      	ldr	r4, [pc, #716]	@ (3418856c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
341882a0:	42a0      	cmp	r0, r4
341882a2:	f171 0100 	sbcs.w	r1, r1, #0
341882a6:	f080 8275 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341882aa:	e9d7 0100 	ldrd	r0, r1, [r7]
341882ae:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
341882b2:	4321      	orrs	r1, r4
341882b4:	f000 81cd 	beq.w	34188652 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
341882b8:	e9d7 0100 	ldrd	r0, r1, [r7]
341882bc:	4cac      	ldr	r4, [pc, #688]	@ (34188570 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
341882be:	42a0      	cmp	r0, r4
341882c0:	f171 0100 	sbcs.w	r1, r1, #0
341882c4:	f080 8266 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341882c8:	e9d7 0100 	ldrd	r0, r1, [r7]
341882cc:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
341882d0:	4321      	orrs	r1, r4
341882d2:	f000 81b8 	beq.w	34188646 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
341882d6:	e9d7 0100 	ldrd	r0, r1, [r7]
341882da:	4ca6      	ldr	r4, [pc, #664]	@ (34188574 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
341882dc:	42a0      	cmp	r0, r4
341882de:	f171 0100 	sbcs.w	r1, r1, #0
341882e2:	f080 8257 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341882e6:	e9d7 0100 	ldrd	r0, r1, [r7]
341882ea:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
341882ee:	4321      	orrs	r1, r4
341882f0:	f000 81a4 	beq.w	3418863c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
341882f4:	e9d7 0100 	ldrd	r0, r1, [r7]
341882f8:	4c9f      	ldr	r4, [pc, #636]	@ (34188578 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
341882fa:	42a0      	cmp	r0, r4
341882fc:	f171 0100 	sbcs.w	r1, r1, #0
34188300:	f080 8248 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188304:	e9d7 0100 	ldrd	r0, r1, [r7]
34188308:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
3418830c:	4321      	orrs	r1, r4
3418830e:	f000 8190 	beq.w	34188632 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
34188312:	e9d7 0100 	ldrd	r0, r1, [r7]
34188316:	4c99      	ldr	r4, [pc, #612]	@ (3418857c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
34188318:	42a0      	cmp	r0, r4
3418831a:	f171 0100 	sbcs.w	r1, r1, #0
3418831e:	f080 8239 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188322:	e9d7 0100 	ldrd	r0, r1, [r7]
34188326:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
3418832a:	4321      	orrs	r1, r4
3418832c:	f000 817c 	beq.w	34188628 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
34188330:	e9d7 0100 	ldrd	r0, r1, [r7]
34188334:	4c92      	ldr	r4, [pc, #584]	@ (34188580 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
34188336:	42a0      	cmp	r0, r4
34188338:	f171 0100 	sbcs.w	r1, r1, #0
3418833c:	f080 822a 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188340:	e9d7 0100 	ldrd	r0, r1, [r7]
34188344:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
34188348:	4321      	orrs	r1, r4
3418834a:	f000 8168 	beq.w	3418861e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
3418834e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188352:	4c8c      	ldr	r4, [pc, #560]	@ (34188584 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
34188354:	42a0      	cmp	r0, r4
34188356:	f171 0100 	sbcs.w	r1, r1, #0
3418835a:	f080 821b 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418835e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188362:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
34188366:	4321      	orrs	r1, r4
34188368:	f000 8154 	beq.w	34188614 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
3418836c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188370:	4c85      	ldr	r4, [pc, #532]	@ (34188588 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
34188372:	42a0      	cmp	r0, r4
34188374:	f171 0100 	sbcs.w	r1, r1, #0
34188378:	f080 820c 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418837c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188380:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
34188384:	4321      	orrs	r1, r4
34188386:	f000 8140 	beq.w	3418860a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
3418838a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418838e:	4c7f      	ldr	r4, [pc, #508]	@ (3418858c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
34188390:	42a0      	cmp	r0, r4
34188392:	f171 0100 	sbcs.w	r1, r1, #0
34188396:	f080 81fd 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418839a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418839e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
341883a2:	4321      	orrs	r1, r4
341883a4:	f000 812c 	beq.w	34188600 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
341883a8:	e9d7 0100 	ldrd	r0, r1, [r7]
341883ac:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
341883b0:	f171 0100 	sbcs.w	r1, r1, #0
341883b4:	f080 81ee 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341883b8:	e9d7 0100 	ldrd	r0, r1, [r7]
341883bc:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
341883c0:	4321      	orrs	r1, r4
341883c2:	f000 8118 	beq.w	341885f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
341883c6:	e9d7 0100 	ldrd	r0, r1, [r7]
341883ca:	f248 0401 	movw	r4, #32769	@ 0x8001
341883ce:	42a0      	cmp	r0, r4
341883d0:	f171 0100 	sbcs.w	r1, r1, #0
341883d4:	f080 81de 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341883d8:	e9d7 0100 	ldrd	r0, r1, [r7]
341883dc:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
341883e0:	4321      	orrs	r1, r4
341883e2:	f000 8103 	beq.w	341885ec <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
341883e6:	e9d7 0100 	ldrd	r0, r1, [r7]
341883ea:	f244 0401 	movw	r4, #16385	@ 0x4001
341883ee:	42a0      	cmp	r0, r4
341883f0:	f171 0100 	sbcs.w	r1, r1, #0
341883f4:	f080 81ce 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341883f8:	e9d7 0100 	ldrd	r0, r1, [r7]
341883fc:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
34188400:	4321      	orrs	r1, r4
34188402:	f000 80ee 	beq.w	341885e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
34188406:	e9d7 0100 	ldrd	r0, r1, [r7]
3418840a:	f242 0401 	movw	r4, #8193	@ 0x2001
3418840e:	42a0      	cmp	r0, r4
34188410:	f171 0100 	sbcs.w	r1, r1, #0
34188414:	f080 81be 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188418:	e9d7 0100 	ldrd	r0, r1, [r7]
3418841c:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
34188420:	4321      	orrs	r1, r4
34188422:	f000 80d9 	beq.w	341885d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
34188426:	e9d7 0100 	ldrd	r0, r1, [r7]
3418842a:	f241 0401 	movw	r4, #4097	@ 0x1001
3418842e:	42a0      	cmp	r0, r4
34188430:	f171 0100 	sbcs.w	r1, r1, #0
34188434:	f080 81ae 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188438:	e9d7 0100 	ldrd	r0, r1, [r7]
3418843c:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
34188440:	4321      	orrs	r1, r4
34188442:	f000 80c4 	beq.w	341885ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
34188446:	e9d7 0100 	ldrd	r0, r1, [r7]
3418844a:	f640 0401 	movw	r4, #2049	@ 0x801
3418844e:	42a0      	cmp	r0, r4
34188450:	f171 0100 	sbcs.w	r1, r1, #0
34188454:	f080 819e 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188458:	e9d7 0100 	ldrd	r0, r1, [r7]
3418845c:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
34188460:	4321      	orrs	r1, r4
34188462:	f000 80af 	beq.w	341885c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
34188466:	e9d7 0100 	ldrd	r0, r1, [r7]
3418846a:	f240 4401 	movw	r4, #1025	@ 0x401
3418846e:	42a0      	cmp	r0, r4
34188470:	f171 0100 	sbcs.w	r1, r1, #0
34188474:	f080 818e 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188478:	e9d7 0100 	ldrd	r0, r1, [r7]
3418847c:	2821      	cmp	r0, #33	@ 0x21
3418847e:	f171 0100 	sbcs.w	r1, r1, #0
34188482:	d255      	bcs.n	34188530 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
34188484:	e9d7 0100 	ldrd	r0, r1, [r7]
34188488:	4301      	orrs	r1, r0
3418848a:	f000 8183 	beq.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418848e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188492:	1e42      	subs	r2, r0, #1
34188494:	f141 33ff 	adc.w	r3, r1, #4294967295
34188498:	2a20      	cmp	r2, #32
3418849a:	f173 0100 	sbcs.w	r1, r3, #0
3418849e:	f080 8179 	bcs.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341884a2:	2a1f      	cmp	r2, #31
341884a4:	f200 8176 	bhi.w	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341884a8:	a101      	add	r1, pc, #4	@ (adr r1, 341884b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
341884aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
341884ae:	bf00      	nop
341884b0:	3418853f 	.word	0x3418853f
341884b4:	34188549 	.word	0x34188549
341884b8:	34188795 	.word	0x34188795
341884bc:	34188599 	.word	0x34188599
341884c0:	34188795 	.word	0x34188795
341884c4:	34188795 	.word	0x34188795
341884c8:	34188795 	.word	0x34188795
341884cc:	34188591 	.word	0x34188591
341884d0:	34188795 	.word	0x34188795
341884d4:	34188795 	.word	0x34188795
341884d8:	34188795 	.word	0x34188795
341884dc:	34188795 	.word	0x34188795
341884e0:	34188795 	.word	0x34188795
341884e4:	34188795 	.word	0x34188795
341884e8:	34188795 	.word	0x34188795
341884ec:	341885a3 	.word	0x341885a3
341884f0:	34188795 	.word	0x34188795
341884f4:	34188795 	.word	0x34188795
341884f8:	34188795 	.word	0x34188795
341884fc:	34188795 	.word	0x34188795
34188500:	34188795 	.word	0x34188795
34188504:	34188795 	.word	0x34188795
34188508:	34188795 	.word	0x34188795
3418850c:	34188795 	.word	0x34188795
34188510:	34188795 	.word	0x34188795
34188514:	34188795 	.word	0x34188795
34188518:	34188795 	.word	0x34188795
3418851c:	34188795 	.word	0x34188795
34188520:	34188795 	.word	0x34188795
34188524:	34188795 	.word	0x34188795
34188528:	34188795 	.word	0x34188795
3418852c:	341885af 	.word	0x341885af
34188530:	e9d7 2300 	ldrd	r2, r3, [r7]
34188534:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
34188538:	430b      	orrs	r3, r1
3418853a:	d03e      	beq.n	341885ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
3418853c:	e12a      	b.n	34188794 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
3418853e:	2070      	movs	r0, #112	@ 0x70
34188540:	f000 fb90 	bl	34188c64 <RCCEx_GetADCCLKFreq>
34188544:	60f8      	str	r0, [r7, #12]
      break;
34188546:	e126      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
34188548:	2007      	movs	r0, #7
3418854a:	f000 fc8d 	bl	34188e68 <RCCEx_GetADFCLKFreq>
3418854e:	60f8      	str	r0, [r7, #12]
      break;
34188550:	e121      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
34188552:	bf00      	nop
34188554:	80000001 	.word	0x80000001
34188558:	40000001 	.word	0x40000001
3418855c:	20000001 	.word	0x20000001
34188560:	10000001 	.word	0x10000001
34188564:	08000001 	.word	0x08000001
34188568:	04000001 	.word	0x04000001
3418856c:	02000001 	.word	0x02000001
34188570:	01000001 	.word	0x01000001
34188574:	00800001 	.word	0x00800001
34188578:	00400001 	.word	0x00400001
3418857c:	00200001 	.word	0x00200001
34188580:	00100001 	.word	0x00100001
34188584:	00080001 	.word	0x00080001
34188588:	00040001 	.word	0x00040001
3418858c:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
34188590:	f000 ff0c 	bl	341893ac <RCCEx_GetCSICLKFreq>
34188594:	60f8      	str	r0, [r7, #12]
      break;
34188596:	e0fe      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188598:	2007      	movs	r0, #7
3418859a:	f000 fd51 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418859e:	60f8      	str	r0, [r7, #12]
      break;
341885a0:	e0f9      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
341885a2:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
341885a6:	f000 ff4d 	bl	34189444 <RCCEx_GetDCMIPPCLKFreq>
341885aa:	60f8      	str	r0, [r7, #12]
      break;
341885ac:	e0f3      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
341885ae:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
341885b2:	f000 ffd1 	bl	34189558 <RCCEx_GetETH1CLKFreq>
341885b6:	60f8      	str	r0, [r7, #12]
      break;
341885b8:	e0ed      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
341885ba:	2003      	movs	r0, #3
341885bc:	f001 f84c 	bl	34189658 <RCCEx_GetETH1PTPCLKFreq>
341885c0:	60f8      	str	r0, [r7, #12]
      break;
341885c2:	e0e8      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
341885c4:	2003      	movs	r0, #3
341885c6:	f001 f8cb 	bl	34189760 <RCCEx_GetFDCANCLKFreq>
341885ca:	60f8      	str	r0, [r7, #12]
      break;
341885cc:	e0e3      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
341885ce:	2030      	movs	r0, #48	@ 0x30
341885d0:	f001 f946 	bl	34189860 <RCCEx_GetFMCCLKFreq>
341885d4:	60f8      	str	r0, [r7, #12]
      break;
341885d6:	e0de      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
341885d8:	4871      	ldr	r0, [pc, #452]	@ (341887a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
341885da:	f001 f9f9 	bl	341899d0 <RCCEx_GetI2CCLKFreq>
341885de:	60f8      	str	r0, [r7, #12]
      break;
341885e0:	e0d9      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
341885e2:	4870      	ldr	r0, [pc, #448]	@ (341887a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
341885e4:	f001 f9f4 	bl	341899d0 <RCCEx_GetI2CCLKFreq>
341885e8:	60f8      	str	r0, [r7, #12]
      break;
341885ea:	e0d4      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
341885ec:	486e      	ldr	r0, [pc, #440]	@ (341887a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
341885ee:	f001 f9ef 	bl	341899d0 <RCCEx_GetI2CCLKFreq>
341885f2:	60f8      	str	r0, [r7, #12]
      break;
341885f4:	e0cf      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
341885f6:	486d      	ldr	r0, [pc, #436]	@ (341887ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
341885f8:	f001 f9ea 	bl	341899d0 <RCCEx_GetI2CCLKFreq>
341885fc:	60f8      	str	r0, [r7, #12]
      break;
341885fe:	e0ca      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34188600:	486b      	ldr	r0, [pc, #428]	@ (341887b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
34188602:	f001 fb8d 	bl	34189d20 <RCCEx_GetI3CCLKFreq>
34188606:	60f8      	str	r0, [r7, #12]
      break;
34188608:	e0c5      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3418860a:	486a      	ldr	r0, [pc, #424]	@ (341887b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
3418860c:	f001 fb88 	bl	34189d20 <RCCEx_GetI3CCLKFreq>
34188610:	60f8      	str	r0, [r7, #12]
      break;
34188612:	e0c0      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34188614:	4868      	ldr	r0, [pc, #416]	@ (341887b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
34188616:	f001 fcb7 	bl	34189f88 <RCCEx_GetLPTIMCLKFreq>
3418861a:	60f8      	str	r0, [r7, #12]
      break;
3418861c:	e0bb      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
3418861e:	4867      	ldr	r0, [pc, #412]	@ (341887bc <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
34188620:	f001 fcb2 	bl	34189f88 <RCCEx_GetLPTIMCLKFreq>
34188624:	60f8      	str	r0, [r7, #12]
      break;
34188626:	e0b6      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34188628:	4865      	ldr	r0, [pc, #404]	@ (341887c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
3418862a:	f001 fcad 	bl	34189f88 <RCCEx_GetLPTIMCLKFreq>
3418862e:	60f8      	str	r0, [r7, #12]
      break;
34188630:	e0b1      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
34188632:	4864      	ldr	r0, [pc, #400]	@ (341887c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
34188634:	f001 fca8 	bl	34189f88 <RCCEx_GetLPTIMCLKFreq>
34188638:	60f8      	str	r0, [r7, #12]
      break;
3418863a:	e0ac      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
3418863c:	4862      	ldr	r0, [pc, #392]	@ (341887c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
3418863e:	f001 fca3 	bl	34189f88 <RCCEx_GetLPTIMCLKFreq>
34188642:	60f8      	str	r0, [r7, #12]
      break;
34188644:	e0a7      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
34188646:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
3418864a:	f001 fe47 	bl	3418a2dc <RCCEx_GetLPUARTCLKFreq>
3418864e:	60f8      	str	r0, [r7, #12]
      break;
34188650:	e0a1      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
34188652:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
34188656:	f001 ff43 	bl	3418a4e0 <RCCEx_GetLTDCCLKFreq>
3418865a:	60f8      	str	r0, [r7, #12]
      break;
3418865c:	e09b      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
3418865e:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
34188662:	f001 ffc7 	bl	3418a5f4 <RCCEx_GetMDFCLKFreq>
34188666:	60f8      	str	r0, [r7, #12]
      break;
34188668:	e095      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
3418866a:	2030      	movs	r0, #48	@ 0x30
3418866c:	f002 f8cc 	bl	3418a808 <RCCEx_GetPSSICLKFreq>
34188670:	60f8      	str	r0, [r7, #12]
      break;
34188672:	e090      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
34188674:	f002 f94a 	bl	3418a90c <RCCEx_GetRTCCLKFreq>
34188678:	60f8      	str	r0, [r7, #12]
      break;
3418867a:	e08c      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
3418867c:	4853      	ldr	r0, [pc, #332]	@ (341887cc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
3418867e:	f002 f997 	bl	3418a9b0 <RCCEx_GetSAICLKFreq>
34188682:	60f8      	str	r0, [r7, #12]
      break;
34188684:	e087      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34188686:	4852      	ldr	r0, [pc, #328]	@ (341887d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
34188688:	f002 f992 	bl	3418a9b0 <RCCEx_GetSAICLKFreq>
3418868c:	60f8      	str	r0, [r7, #12]
      break;
3418868e:	e082      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34188690:	4850      	ldr	r0, [pc, #320]	@ (341887d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
34188692:	f002 faf3 	bl	3418ac7c <RCCEx_GetSDMMCCLKFreq>
34188696:	60f8      	str	r0, [r7, #12]
      break;
34188698:	e07d      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3418869a:	484f      	ldr	r0, [pc, #316]	@ (341887d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
3418869c:	f002 faee 	bl	3418ac7c <RCCEx_GetSDMMCCLKFreq>
341886a0:	60f8      	str	r0, [r7, #12]
      break;
341886a2:	e078      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
341886a4:	2007      	movs	r0, #7
341886a6:	f002 fbd3 	bl	3418ae50 <RCCEx_GetSPDIFRXCLKFreq>
341886aa:	60f8      	str	r0, [r7, #12]
      break;
341886ac:	e073      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
341886ae:	484b      	ldr	r0, [pc, #300]	@ (341887dc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
341886b0:	f002 fcb2 	bl	3418b018 <RCCEx_GetSPICLKFreq>
341886b4:	60f8      	str	r0, [r7, #12]
      break;
341886b6:	e06e      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
341886b8:	4849      	ldr	r0, [pc, #292]	@ (341887e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
341886ba:	f002 fcad 	bl	3418b018 <RCCEx_GetSPICLKFreq>
341886be:	60f8      	str	r0, [r7, #12]
      break;
341886c0:	e069      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
341886c2:	4848      	ldr	r0, [pc, #288]	@ (341887e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
341886c4:	f002 fca8 	bl	3418b018 <RCCEx_GetSPICLKFreq>
341886c8:	60f8      	str	r0, [r7, #12]
      break;
341886ca:	e064      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
341886cc:	4846      	ldr	r0, [pc, #280]	@ (341887e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
341886ce:	f002 fca3 	bl	3418b018 <RCCEx_GetSPICLKFreq>
341886d2:	60f8      	str	r0, [r7, #12]
      break;
341886d4:	e05f      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
341886d6:	4845      	ldr	r0, [pc, #276]	@ (341887ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
341886d8:	f002 fc9e 	bl	3418b018 <RCCEx_GetSPICLKFreq>
341886dc:	60f8      	str	r0, [r7, #12]
      break;
341886de:	e05a      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
341886e0:	4843      	ldr	r0, [pc, #268]	@ (341887f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
341886e2:	f002 fc99 	bl	3418b018 <RCCEx_GetSPICLKFreq>
341886e6:	60f8      	str	r0, [r7, #12]
      break;
341886e8:	e055      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
341886ea:	4842      	ldr	r0, [pc, #264]	@ (341887f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
341886ec:	f003 f990 	bl	3418ba10 <RCCEx_GetUSARTCLKFreq>
341886f0:	60f8      	str	r0, [r7, #12]
      break;
341886f2:	e050      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
341886f4:	4840      	ldr	r0, [pc, #256]	@ (341887f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
341886f6:	f003 f98b 	bl	3418ba10 <RCCEx_GetUSARTCLKFreq>
341886fa:	60f8      	str	r0, [r7, #12]
      break;
341886fc:	e04b      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
341886fe:	483f      	ldr	r0, [pc, #252]	@ (341887fc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
34188700:	f003 f986 	bl	3418ba10 <RCCEx_GetUSARTCLKFreq>
34188704:	60f8      	str	r0, [r7, #12]
      break;
34188706:	e046      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34188708:	483d      	ldr	r0, [pc, #244]	@ (34188800 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
3418870a:	f002 ff57 	bl	3418b5bc <RCCEx_GetUARTCLKFreq>
3418870e:	60f8      	str	r0, [r7, #12]
      break;
34188710:	e041      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34188712:	483c      	ldr	r0, [pc, #240]	@ (34188804 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
34188714:	f002 ff52 	bl	3418b5bc <RCCEx_GetUARTCLKFreq>
34188718:	60f8      	str	r0, [r7, #12]
      break;
3418871a:	e03c      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
3418871c:	483a      	ldr	r0, [pc, #232]	@ (34188808 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3418871e:	f003 f977 	bl	3418ba10 <RCCEx_GetUSARTCLKFreq>
34188722:	60f8      	str	r0, [r7, #12]
      break;
34188724:	e037      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34188726:	4839      	ldr	r0, [pc, #228]	@ (3418880c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
34188728:	f002 ff48 	bl	3418b5bc <RCCEx_GetUARTCLKFreq>
3418872c:	60f8      	str	r0, [r7, #12]
      break;
3418872e:	e032      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34188730:	4837      	ldr	r0, [pc, #220]	@ (34188810 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
34188732:	f002 ff43 	bl	3418b5bc <RCCEx_GetUARTCLKFreq>
34188736:	60f8      	str	r0, [r7, #12]
      break;
34188738:	e02d      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
3418873a:	4836      	ldr	r0, [pc, #216]	@ (34188814 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
3418873c:	f002 ff3e 	bl	3418b5bc <RCCEx_GetUARTCLKFreq>
34188740:	60f8      	str	r0, [r7, #12]
      break;
34188742:	e028      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34188744:	4834      	ldr	r0, [pc, #208]	@ (34188818 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
34188746:	f003 f963 	bl	3418ba10 <RCCEx_GetUSARTCLKFreq>
3418874a:	60f8      	str	r0, [r7, #12]
      break;
3418874c:	e023      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
3418874e:	4833      	ldr	r0, [pc, #204]	@ (3418881c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
34188750:	f003 fc3e 	bl	3418bfd0 <RCCEx_GetOTGPHYCKREFCLKFreq>
34188754:	60f8      	str	r0, [r7, #12]
      break;
34188756:	e01e      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34188758:	4831      	ldr	r0, [pc, #196]	@ (34188820 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
3418875a:	f003 fb83 	bl	3418be64 <RCCEx_GetOTGPHYCLKFreq>
3418875e:	60f8      	str	r0, [r7, #12]
      break;
34188760:	e019      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34188762:	4830      	ldr	r0, [pc, #192]	@ (34188824 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34188764:	f003 fc34 	bl	3418bfd0 <RCCEx_GetOTGPHYCKREFCLKFreq>
34188768:	60f8      	str	r0, [r7, #12]
      break;
3418876a:	e014      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3418876c:	482e      	ldr	r0, [pc, #184]	@ (34188828 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
3418876e:	f003 fb79 	bl	3418be64 <RCCEx_GetOTGPHYCLKFreq>
34188772:	60f8      	str	r0, [r7, #12]
      break;
34188774:	e00f      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34188776:	482d      	ldr	r0, [pc, #180]	@ (3418882c <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34188778:	f003 fc7a 	bl	3418c070 <RCCEx_GetXSPICLKFreq>
3418877c:	60f8      	str	r0, [r7, #12]
      break;
3418877e:	e00a      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34188780:	482b      	ldr	r0, [pc, #172]	@ (34188830 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
34188782:	f003 fc75 	bl	3418c070 <RCCEx_GetXSPICLKFreq>
34188786:	60f8      	str	r0, [r7, #12]
      break;
34188788:	e005      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
3418878a:	482a      	ldr	r0, [pc, #168]	@ (34188834 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
3418878c:	f003 fc70 	bl	3418c070 <RCCEx_GetXSPICLKFreq>
34188790:	60f8      	str	r0, [r7, #12]
      break;
34188792:	e000      	b.n	34188796 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
34188794:	bf00      	nop
  }

  return frequency;
34188796:	68fb      	ldr	r3, [r7, #12]
}
34188798:	4618      	mov	r0, r3
3418879a:	3714      	adds	r7, #20
3418879c:	46bd      	mov	sp, r7
3418879e:	bd90      	pop	{r4, r7, pc}
341887a0:	0700000c 	.word	0x0700000c
341887a4:	0700040c 	.word	0x0700040c
341887a8:	0700080c 	.word	0x0700080c
341887ac:	07000c0c 	.word	0x07000c0c
341887b0:	0700100c 	.word	0x0700100c
341887b4:	0700140c 	.word	0x0700140c
341887b8:	0700082c 	.word	0x0700082c
341887bc:	07000c2c 	.word	0x07000c2c
341887c0:	0700102c 	.word	0x0700102c
341887c4:	0700142c 	.word	0x0700142c
341887c8:	0700182c 	.word	0x0700182c
341887cc:	07001418 	.word	0x07001418
341887d0:	07001818 	.word	0x07001818
341887d4:	0300001c 	.word	0x0300001c
341887d8:	0300041c 	.word	0x0300041c
341887dc:	07000420 	.word	0x07000420
341887e0:	07000820 	.word	0x07000820
341887e4:	07000c20 	.word	0x07000c20
341887e8:	07001020 	.word	0x07001020
341887ec:	07001420 	.word	0x07001420
341887f0:	07001820 	.word	0x07001820
341887f4:	07000030 	.word	0x07000030
341887f8:	07000430 	.word	0x07000430
341887fc:	07000830 	.word	0x07000830
34188800:	07000c30 	.word	0x07000c30
34188804:	07001030 	.word	0x07001030
34188808:	07001430 	.word	0x07001430
3418880c:	07001830 	.word	0x07001830
34188810:	07001c30 	.word	0x07001c30
34188814:	07000034 	.word	0x07000034
34188818:	07000434 	.word	0x07000434
3418881c:	01001014 	.word	0x01001014
34188820:	03000c14 	.word	0x03000c14
34188824:	01001814 	.word	0x01001814
34188828:	03001414 	.word	0x03001414
3418882c:	03000014 	.word	0x03000014
34188830:	03000414 	.word	0x03000414
34188834:	03000814 	.word	0x03000814

34188838 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
34188838:	b5f0      	push	{r4, r5, r6, r7, lr}
3418883a:	b087      	sub	sp, #28
3418883c:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418883e:	2300      	movs	r3, #0
34188840:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
34188842:	f7fc fa05 	bl	34184c50 <LL_RCC_PLL1_IsReady>
34188846:	4603      	mov	r3, r0
34188848:	2b00      	cmp	r3, #0
3418884a:	d02a      	beq.n	341888a2 <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
3418884c:	f7fc fa68 	bl	34184d20 <LL_RCC_PLL1P_IsEnabled>
34188850:	4603      	mov	r3, r0
34188852:	2b00      	cmp	r3, #0
34188854:	d031      	beq.n	341888ba <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34188856:	f7fc f9ed 	bl	34184c34 <LL_RCC_PLL1_GetSource>
3418885a:	4603      	mov	r3, r0
3418885c:	4618      	mov	r0, r3
3418885e:	f000 f957 	bl	34188b10 <RCCEx_GetPLLSourceFreq>
34188862:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34188864:	68bb      	ldr	r3, [r7, #8]
34188866:	2b00      	cmp	r3, #0
34188868:	d027      	beq.n	341888ba <HAL_RCCEx_GetPLL1CLKFreq+0x82>
      {
        divm = LL_RCC_PLL1_GetM();
3418886a:	f7fc fa29 	bl	34184cc0 <LL_RCC_PLL1_GetM>
3418886e:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34188870:	687b      	ldr	r3, [r7, #4]
34188872:	2b00      	cmp	r3, #0
34188874:	d021      	beq.n	341888ba <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34188876:	f7fc fa13 	bl	34184ca0 <LL_RCC_PLL1_GetN>
3418887a:	4605      	mov	r5, r0
3418887c:	f7fc fa64 	bl	34184d48 <LL_RCC_PLL1_GetFRACN>
34188880:	4606      	mov	r6, r0
34188882:	f7fc fa2d 	bl	34184ce0 <LL_RCC_PLL1_GetP1>
34188886:	4604      	mov	r4, r0
34188888:	f7fc fa3a 	bl	34184d00 <LL_RCC_PLL1_GetP2>
3418888c:	4603      	mov	r3, r0
3418888e:	9301      	str	r3, [sp, #4]
34188890:	9400      	str	r4, [sp, #0]
34188892:	4633      	mov	r3, r6
34188894:	462a      	mov	r2, r5
34188896:	6879      	ldr	r1, [r7, #4]
34188898:	68b8      	ldr	r0, [r7, #8]
3418889a:	f000 f997 	bl	34188bcc <RCCEx_CalcPLLFreq>
3418889e:	60f8      	str	r0, [r7, #12]
341888a0:	e00b      	b.n	341888ba <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
341888a2:	f7fc f9e9 	bl	34184c78 <LL_RCC_PLL1_IsEnabledBypass>
341888a6:	4603      	mov	r3, r0
341888a8:	2b00      	cmp	r3, #0
341888aa:	d006      	beq.n	341888ba <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
341888ac:	f7fc f9c2 	bl	34184c34 <LL_RCC_PLL1_GetSource>
341888b0:	4603      	mov	r3, r0
341888b2:	4618      	mov	r0, r3
341888b4:	f000 f92c 	bl	34188b10 <RCCEx_GetPLLSourceFreq>
341888b8:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
341888ba:	68fb      	ldr	r3, [r7, #12]
}
341888bc:	4618      	mov	r0, r3
341888be:	3714      	adds	r7, #20
341888c0:	46bd      	mov	sp, r7
341888c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

341888c4 <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
341888c4:	b5f0      	push	{r4, r5, r6, r7, lr}
341888c6:	b087      	sub	sp, #28
341888c8:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
341888ca:	2300      	movs	r3, #0
341888cc:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
341888ce:	f7fc fa57 	bl	34184d80 <LL_RCC_PLL2_IsReady>
341888d2:	4603      	mov	r3, r0
341888d4:	2b00      	cmp	r3, #0
341888d6:	d02a      	beq.n	3418892e <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
341888d8:	f7fc faba 	bl	34184e50 <LL_RCC_PLL2P_IsEnabled>
341888dc:	4603      	mov	r3, r0
341888de:	2b00      	cmp	r3, #0
341888e0:	d031      	beq.n	34188946 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
341888e2:	f7fc fa3f 	bl	34184d64 <LL_RCC_PLL2_GetSource>
341888e6:	4603      	mov	r3, r0
341888e8:	4618      	mov	r0, r3
341888ea:	f000 f911 	bl	34188b10 <RCCEx_GetPLLSourceFreq>
341888ee:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
341888f0:	68bb      	ldr	r3, [r7, #8]
341888f2:	2b00      	cmp	r3, #0
341888f4:	d027      	beq.n	34188946 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
      {

        divm = LL_RCC_PLL2_GetM();
341888f6:	f7fc fa7b 	bl	34184df0 <LL_RCC_PLL2_GetM>
341888fa:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
341888fc:	687b      	ldr	r3, [r7, #4]
341888fe:	2b00      	cmp	r3, #0
34188900:	d021      	beq.n	34188946 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
34188902:	f7fc fa65 	bl	34184dd0 <LL_RCC_PLL2_GetN>
34188906:	4605      	mov	r5, r0
34188908:	f7fc fab6 	bl	34184e78 <LL_RCC_PLL2_GetFRACN>
3418890c:	4606      	mov	r6, r0
3418890e:	f7fc fa7f 	bl	34184e10 <LL_RCC_PLL2_GetP1>
34188912:	4604      	mov	r4, r0
34188914:	f7fc fa8c 	bl	34184e30 <LL_RCC_PLL2_GetP2>
34188918:	4603      	mov	r3, r0
3418891a:	9301      	str	r3, [sp, #4]
3418891c:	9400      	str	r4, [sp, #0]
3418891e:	4633      	mov	r3, r6
34188920:	462a      	mov	r2, r5
34188922:	6879      	ldr	r1, [r7, #4]
34188924:	68b8      	ldr	r0, [r7, #8]
34188926:	f000 f951 	bl	34188bcc <RCCEx_CalcPLLFreq>
3418892a:	60f8      	str	r0, [r7, #12]
3418892c:	e00b      	b.n	34188946 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
3418892e:	f7fc fa3b 	bl	34184da8 <LL_RCC_PLL2_IsEnabledBypass>
34188932:	4603      	mov	r3, r0
34188934:	2b00      	cmp	r3, #0
34188936:	d006      	beq.n	34188946 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34188938:	f7fc fa14 	bl	34184d64 <LL_RCC_PLL2_GetSource>
3418893c:	4603      	mov	r3, r0
3418893e:	4618      	mov	r0, r3
34188940:	f000 f8e6 	bl	34188b10 <RCCEx_GetPLLSourceFreq>
34188944:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34188946:	68fb      	ldr	r3, [r7, #12]
}
34188948:	4618      	mov	r0, r3
3418894a:	3714      	adds	r7, #20
3418894c:	46bd      	mov	sp, r7
3418894e:	bdf0      	pop	{r4, r5, r6, r7, pc}

34188950 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
34188950:	b5f0      	push	{r4, r5, r6, r7, lr}
34188952:	b087      	sub	sp, #28
34188954:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34188956:	2300      	movs	r3, #0
34188958:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
3418895a:	f7fc faa9 	bl	34184eb0 <LL_RCC_PLL3_IsReady>
3418895e:	4603      	mov	r3, r0
34188960:	2b00      	cmp	r3, #0
34188962:	d02a      	beq.n	341889ba <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
34188964:	f7fc fb0c 	bl	34184f80 <LL_RCC_PLL3P_IsEnabled>
34188968:	4603      	mov	r3, r0
3418896a:	2b00      	cmp	r3, #0
3418896c:	d031      	beq.n	341889d2 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418896e:	f7fc fa91 	bl	34184e94 <LL_RCC_PLL3_GetSource>
34188972:	4603      	mov	r3, r0
34188974:	4618      	mov	r0, r3
34188976:	f000 f8cb 	bl	34188b10 <RCCEx_GetPLLSourceFreq>
3418897a:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418897c:	68bb      	ldr	r3, [r7, #8]
3418897e:	2b00      	cmp	r3, #0
34188980:	d027      	beq.n	341889d2 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
      {
        divm = LL_RCC_PLL3_GetM();
34188982:	f7fc facd 	bl	34184f20 <LL_RCC_PLL3_GetM>
34188986:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34188988:	687b      	ldr	r3, [r7, #4]
3418898a:	2b00      	cmp	r3, #0
3418898c:	d021      	beq.n	341889d2 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
3418898e:	f7fc fab7 	bl	34184f00 <LL_RCC_PLL3_GetN>
34188992:	4605      	mov	r5, r0
34188994:	f7fc fb08 	bl	34184fa8 <LL_RCC_PLL3_GetFRACN>
34188998:	4606      	mov	r6, r0
3418899a:	f7fc fad1 	bl	34184f40 <LL_RCC_PLL3_GetP1>
3418899e:	4604      	mov	r4, r0
341889a0:	f7fc fade 	bl	34184f60 <LL_RCC_PLL3_GetP2>
341889a4:	4603      	mov	r3, r0
341889a6:	9301      	str	r3, [sp, #4]
341889a8:	9400      	str	r4, [sp, #0]
341889aa:	4633      	mov	r3, r6
341889ac:	462a      	mov	r2, r5
341889ae:	6879      	ldr	r1, [r7, #4]
341889b0:	68b8      	ldr	r0, [r7, #8]
341889b2:	f000 f90b 	bl	34188bcc <RCCEx_CalcPLLFreq>
341889b6:	60f8      	str	r0, [r7, #12]
341889b8:	e00b      	b.n	341889d2 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
341889ba:	f7fc fa8d 	bl	34184ed8 <LL_RCC_PLL3_IsEnabledBypass>
341889be:	4603      	mov	r3, r0
341889c0:	2b00      	cmp	r3, #0
341889c2:	d006      	beq.n	341889d2 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
341889c4:	f7fc fa66 	bl	34184e94 <LL_RCC_PLL3_GetSource>
341889c8:	4603      	mov	r3, r0
341889ca:	4618      	mov	r0, r3
341889cc:	f000 f8a0 	bl	34188b10 <RCCEx_GetPLLSourceFreq>
341889d0:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
341889d2:	68fb      	ldr	r3, [r7, #12]
}
341889d4:	4618      	mov	r0, r3
341889d6:	3714      	adds	r7, #20
341889d8:	46bd      	mov	sp, r7
341889da:	bdf0      	pop	{r4, r5, r6, r7, pc}

341889dc <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
341889dc:	b5f0      	push	{r4, r5, r6, r7, lr}
341889de:	b087      	sub	sp, #28
341889e0:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
341889e2:	2300      	movs	r3, #0
341889e4:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
341889e6:	f7fc fafb 	bl	34184fe0 <LL_RCC_PLL4_IsReady>
341889ea:	4603      	mov	r3, r0
341889ec:	2b00      	cmp	r3, #0
341889ee:	d02a      	beq.n	34188a46 <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
341889f0:	f7fc fb5e 	bl	341850b0 <LL_RCC_PLL4P_IsEnabled>
341889f4:	4603      	mov	r3, r0
341889f6:	2b00      	cmp	r3, #0
341889f8:	d031      	beq.n	34188a5e <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
341889fa:	f7fc fae3 	bl	34184fc4 <LL_RCC_PLL4_GetSource>
341889fe:	4603      	mov	r3, r0
34188a00:	4618      	mov	r0, r3
34188a02:	f000 f885 	bl	34188b10 <RCCEx_GetPLLSourceFreq>
34188a06:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34188a08:	68bb      	ldr	r3, [r7, #8]
34188a0a:	2b00      	cmp	r3, #0
34188a0c:	d027      	beq.n	34188a5e <HAL_RCCEx_GetPLL4CLKFreq+0x82>
      {

        divm = LL_RCC_PLL4_GetM();
34188a0e:	f7fc fb1f 	bl	34185050 <LL_RCC_PLL4_GetM>
34188a12:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34188a14:	687b      	ldr	r3, [r7, #4]
34188a16:	2b00      	cmp	r3, #0
34188a18:	d021      	beq.n	34188a5e <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
34188a1a:	f7fc fb09 	bl	34185030 <LL_RCC_PLL4_GetN>
34188a1e:	4605      	mov	r5, r0
34188a20:	f7fc fb5a 	bl	341850d8 <LL_RCC_PLL4_GetFRACN>
34188a24:	4606      	mov	r6, r0
34188a26:	f7fc fb23 	bl	34185070 <LL_RCC_PLL4_GetP1>
34188a2a:	4604      	mov	r4, r0
34188a2c:	f7fc fb30 	bl	34185090 <LL_RCC_PLL4_GetP2>
34188a30:	4603      	mov	r3, r0
34188a32:	9301      	str	r3, [sp, #4]
34188a34:	9400      	str	r4, [sp, #0]
34188a36:	4633      	mov	r3, r6
34188a38:	462a      	mov	r2, r5
34188a3a:	6879      	ldr	r1, [r7, #4]
34188a3c:	68b8      	ldr	r0, [r7, #8]
34188a3e:	f000 f8c5 	bl	34188bcc <RCCEx_CalcPLLFreq>
34188a42:	60f8      	str	r0, [r7, #12]
34188a44:	e00b      	b.n	34188a5e <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
34188a46:	f7fc fadf 	bl	34185008 <LL_RCC_PLL4_IsEnabledBypass>
34188a4a:	4603      	mov	r3, r0
34188a4c:	2b00      	cmp	r3, #0
34188a4e:	d006      	beq.n	34188a5e <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34188a50:	f7fc fab8 	bl	34184fc4 <LL_RCC_PLL4_GetSource>
34188a54:	4603      	mov	r3, r0
34188a56:	4618      	mov	r0, r3
34188a58:	f000 f85a 	bl	34188b10 <RCCEx_GetPLLSourceFreq>
34188a5c:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34188a5e:	68fb      	ldr	r3, [r7, #12]
}
34188a60:	4618      	mov	r0, r3
34188a62:	3714      	adds	r7, #20
34188a64:	46bd      	mov	sp, r7
34188a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

34188a68 <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
34188a68:	b580      	push	{r7, lr}
34188a6a:	b082      	sub	sp, #8
34188a6c:	af00      	add	r7, sp, #0
34188a6e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34188a70:	f7fb fcca 	bl	34184408 <LL_RCC_GetAHBPrescaler>
34188a74:	4603      	mov	r3, r0
34188a76:	0d1b      	lsrs	r3, r3, #20
34188a78:	f003 0307 	and.w	r3, r3, #7
34188a7c:	687a      	ldr	r2, [r7, #4]
34188a7e:	fa22 f303 	lsr.w	r3, r2, r3
}
34188a82:	4618      	mov	r0, r3
34188a84:	3708      	adds	r7, #8
34188a86:	46bd      	mov	sp, r7
34188a88:	bd80      	pop	{r7, pc}

34188a8a <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
34188a8a:	b580      	push	{r7, lr}
34188a8c:	b082      	sub	sp, #8
34188a8e:	af00      	add	r7, sp, #0
34188a90:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
34188a92:	f7fb fcc7 	bl	34184424 <LL_RCC_GetAPB1Prescaler>
34188a96:	4603      	mov	r3, r0
34188a98:	f003 0307 	and.w	r3, r3, #7
34188a9c:	687a      	ldr	r2, [r7, #4]
34188a9e:	fa22 f303 	lsr.w	r3, r2, r3
}
34188aa2:	4618      	mov	r0, r3
34188aa4:	3708      	adds	r7, #8
34188aa6:	46bd      	mov	sp, r7
34188aa8:	bd80      	pop	{r7, pc}

34188aaa <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
34188aaa:	b580      	push	{r7, lr}
34188aac:	b082      	sub	sp, #8
34188aae:	af00      	add	r7, sp, #0
34188ab0:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34188ab2:	f7fb fcc5 	bl	34184440 <LL_RCC_GetAPB2Prescaler>
34188ab6:	4603      	mov	r3, r0
34188ab8:	091b      	lsrs	r3, r3, #4
34188aba:	f003 0307 	and.w	r3, r3, #7
34188abe:	687a      	ldr	r2, [r7, #4]
34188ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
34188ac4:	4618      	mov	r0, r3
34188ac6:	3708      	adds	r7, #8
34188ac8:	46bd      	mov	sp, r7
34188aca:	bd80      	pop	{r7, pc}

34188acc <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
34188acc:	b580      	push	{r7, lr}
34188ace:	b082      	sub	sp, #8
34188ad0:	af00      	add	r7, sp, #0
34188ad2:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34188ad4:	f7fb fcc2 	bl	3418445c <LL_RCC_GetAPB4Prescaler>
34188ad8:	4603      	mov	r3, r0
34188ada:	0b1b      	lsrs	r3, r3, #12
34188adc:	f003 0307 	and.w	r3, r3, #7
34188ae0:	687a      	ldr	r2, [r7, #4]
34188ae2:	fa22 f303 	lsr.w	r3, r2, r3
}
34188ae6:	4618      	mov	r0, r3
34188ae8:	3708      	adds	r7, #8
34188aea:	46bd      	mov	sp, r7
34188aec:	bd80      	pop	{r7, pc}

34188aee <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
34188aee:	b580      	push	{r7, lr}
34188af0:	b082      	sub	sp, #8
34188af2:	af00      	add	r7, sp, #0
34188af4:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34188af6:	f7fb fcbf 	bl	34184478 <LL_RCC_GetAPB5Prescaler>
34188afa:	4603      	mov	r3, r0
34188afc:	0c1b      	lsrs	r3, r3, #16
34188afe:	f003 0307 	and.w	r3, r3, #7
34188b02:	687a      	ldr	r2, [r7, #4]
34188b04:	fa22 f303 	lsr.w	r3, r2, r3
}
34188b08:	4618      	mov	r0, r3
34188b0a:	3708      	adds	r7, #8
34188b0c:	46bd      	mov	sp, r7
34188b0e:	bd80      	pop	{r7, pc}

34188b10 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
34188b10:	b580      	push	{r7, lr}
34188b12:	b084      	sub	sp, #16
34188b14:	af00      	add	r7, sp, #0
34188b16:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34188b18:	2300      	movs	r3, #0
34188b1a:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
34188b1c:	687b      	ldr	r3, [r7, #4]
34188b1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188b22:	d039      	beq.n	34188b98 <RCCEx_GetPLLSourceFreq+0x88>
34188b24:	687b      	ldr	r3, [r7, #4]
34188b26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188b2a:	d838      	bhi.n	34188b9e <RCCEx_GetPLLSourceFreq+0x8e>
34188b2c:	687b      	ldr	r3, [r7, #4]
34188b2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188b32:	d029      	beq.n	34188b88 <RCCEx_GetPLLSourceFreq+0x78>
34188b34:	687b      	ldr	r3, [r7, #4]
34188b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188b3a:	d830      	bhi.n	34188b9e <RCCEx_GetPLLSourceFreq+0x8e>
34188b3c:	687b      	ldr	r3, [r7, #4]
34188b3e:	2b00      	cmp	r3, #0
34188b40:	d004      	beq.n	34188b4c <RCCEx_GetPLLSourceFreq+0x3c>
34188b42:	687b      	ldr	r3, [r7, #4]
34188b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188b48:	d00e      	beq.n	34188b68 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
34188b4a:	e028      	b.n	34188b9e <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
34188b4c:	f7fb fbfc 	bl	34184348 <LL_RCC_HSI_IsReady>
34188b50:	4603      	mov	r3, r0
34188b52:	2b00      	cmp	r3, #0
34188b54:	d025      	beq.n	34188ba2 <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34188b56:	f7fb fc09 	bl	3418436c <LL_RCC_HSI_GetDivider>
34188b5a:	4603      	mov	r3, r0
34188b5c:	09db      	lsrs	r3, r3, #7
34188b5e:	4a16      	ldr	r2, [pc, #88]	@ (34188bb8 <RCCEx_GetPLLSourceFreq+0xa8>)
34188b60:	fa22 f303 	lsr.w	r3, r2, r3
34188b64:	60fb      	str	r3, [r7, #12]
      break;
34188b66:	e01c      	b.n	34188ba2 <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
34188b68:	f7fb fc0e 	bl	34184388 <LL_RCC_MSI_IsReady>
34188b6c:	4603      	mov	r3, r0
34188b6e:	2b00      	cmp	r3, #0
34188b70:	d019      	beq.n	34188ba6 <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34188b72:	f7fb fc1b 	bl	341843ac <LL_RCC_MSI_GetFrequency>
34188b76:	4603      	mov	r3, r0
34188b78:	2b00      	cmp	r3, #0
34188b7a:	d102      	bne.n	34188b82 <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
34188b7c:	4b0f      	ldr	r3, [pc, #60]	@ (34188bbc <RCCEx_GetPLLSourceFreq+0xac>)
34188b7e:	60fb      	str	r3, [r7, #12]
      break;
34188b80:	e011      	b.n	34188ba6 <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
34188b82:	4b0f      	ldr	r3, [pc, #60]	@ (34188bc0 <RCCEx_GetPLLSourceFreq+0xb0>)
34188b84:	60fb      	str	r3, [r7, #12]
      break;
34188b86:	e00e      	b.n	34188ba6 <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
34188b88:	f7fb fbcc 	bl	34184324 <LL_RCC_HSE_IsReady>
34188b8c:	4603      	mov	r3, r0
34188b8e:	2b00      	cmp	r3, #0
34188b90:	d00b      	beq.n	34188baa <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
34188b92:	4b0c      	ldr	r3, [pc, #48]	@ (34188bc4 <RCCEx_GetPLLSourceFreq+0xb4>)
34188b94:	60fb      	str	r3, [r7, #12]
      break;
34188b96:	e008      	b.n	34188baa <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34188b98:	4b0b      	ldr	r3, [pc, #44]	@ (34188bc8 <RCCEx_GetPLLSourceFreq+0xb8>)
34188b9a:	60fb      	str	r3, [r7, #12]
      break;
34188b9c:	e006      	b.n	34188bac <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34188b9e:	bf00      	nop
34188ba0:	e004      	b.n	34188bac <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34188ba2:	bf00      	nop
34188ba4:	e002      	b.n	34188bac <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34188ba6:	bf00      	nop
34188ba8:	e000      	b.n	34188bac <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34188baa:	bf00      	nop
  }

  return pllinputfreq;
34188bac:	68fb      	ldr	r3, [r7, #12]
}
34188bae:	4618      	mov	r0, r3
34188bb0:	3710      	adds	r7, #16
34188bb2:	46bd      	mov	sp, r7
34188bb4:	bd80      	pop	{r7, pc}
34188bb6:	bf00      	nop
34188bb8:	03d09000 	.word	0x03d09000
34188bbc:	003d0900 	.word	0x003d0900
34188bc0:	00f42400 	.word	0x00f42400
34188bc4:	02dc6c00 	.word	0x02dc6c00
34188bc8:	00bb8000 	.word	0x00bb8000

34188bcc <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34188bcc:	b480      	push	{r7}
34188bce:	b087      	sub	sp, #28
34188bd0:	af00      	add	r7, sp, #0
34188bd2:	60f8      	str	r0, [r7, #12]
34188bd4:	60b9      	str	r1, [r7, #8]
34188bd6:	607a      	str	r2, [r7, #4]
34188bd8:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34188bda:	68fb      	ldr	r3, [r7, #12]
34188bdc:	ee07 3a90 	vmov	s15, r3
34188be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34188be4:	687b      	ldr	r3, [r7, #4]
34188be6:	ee07 3a90 	vmov	s15, r3
34188bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
34188bee:	683b      	ldr	r3, [r7, #0]
34188bf0:	ee07 3a90 	vmov	s15, r3
34188bf4:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34188bf8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 34188c60 <RCCEx_CalcPLLFreq+0x94>
34188bfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
34188c00:	ee76 7aa7 	vadd.f32	s15, s13, s15
34188c04:	ee67 6a27 	vmul.f32	s13, s14, s15
34188c08:	68bb      	ldr	r3, [r7, #8]
34188c0a:	ee07 3a90 	vmov	s15, r3
34188c0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34188c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
34188c16:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
34188c1a:	6a3b      	ldr	r3, [r7, #32]
34188c1c:	ee07 3a90 	vmov	s15, r3
34188c20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34188c24:	edd7 6a05 	vldr	s13, [r7, #20]
34188c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
34188c2c:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
34188c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34188c32:	ee07 3a90 	vmov	s15, r3
34188c36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34188c3a:	edd7 6a05 	vldr	s13, [r7, #20]
34188c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
34188c42:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
34188c46:	edd7 7a05 	vldr	s15, [r7, #20]
34188c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34188c4e:	ee17 3a90 	vmov	r3, s15
}
34188c52:	4618      	mov	r0, r3
34188c54:	371c      	adds	r7, #28
34188c56:	46bd      	mov	sp, r7
34188c58:	f85d 7b04 	ldr.w	r7, [sp], #4
34188c5c:	4770      	bx	lr
34188c5e:	bf00      	nop
34188c60:	4b800000 	.word	0x4b800000

34188c64 <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
34188c64:	b590      	push	{r4, r7, lr}
34188c66:	b085      	sub	sp, #20
34188c68:	af00      	add	r7, sp, #0
34188c6a:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34188c6c:	2300      	movs	r3, #0
34188c6e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
34188c70:	6878      	ldr	r0, [r7, #4]
34188c72:	f7fb fe1f 	bl	341848b4 <LL_RCC_GetADCClockSource>
34188c76:	4603      	mov	r3, r0
34188c78:	2b70      	cmp	r3, #112	@ 0x70
34188c7a:	f000 80d1 	beq.w	34188e20 <RCCEx_GetADCCLKFreq+0x1bc>
34188c7e:	2b70      	cmp	r3, #112	@ 0x70
34188c80:	f200 80d8 	bhi.w	34188e34 <RCCEx_GetADCCLKFreq+0x1d0>
34188c84:	2b60      	cmp	r3, #96	@ 0x60
34188c86:	f000 80c8 	beq.w	34188e1a <RCCEx_GetADCCLKFreq+0x1b6>
34188c8a:	2b60      	cmp	r3, #96	@ 0x60
34188c8c:	f200 80d2 	bhi.w	34188e34 <RCCEx_GetADCCLKFreq+0x1d0>
34188c90:	2b50      	cmp	r3, #80	@ 0x50
34188c92:	f000 80ac 	beq.w	34188dee <RCCEx_GetADCCLKFreq+0x18a>
34188c96:	2b50      	cmp	r3, #80	@ 0x50
34188c98:	f200 80cc 	bhi.w	34188e34 <RCCEx_GetADCCLKFreq+0x1d0>
34188c9c:	2b40      	cmp	r3, #64	@ 0x40
34188c9e:	f000 80b4 	beq.w	34188e0a <RCCEx_GetADCCLKFreq+0x1a6>
34188ca2:	2b40      	cmp	r3, #64	@ 0x40
34188ca4:	f200 80c6 	bhi.w	34188e34 <RCCEx_GetADCCLKFreq+0x1d0>
34188ca8:	2b30      	cmp	r3, #48	@ 0x30
34188caa:	d05d      	beq.n	34188d68 <RCCEx_GetADCCLKFreq+0x104>
34188cac:	2b30      	cmp	r3, #48	@ 0x30
34188cae:	f200 80c1 	bhi.w	34188e34 <RCCEx_GetADCCLKFreq+0x1d0>
34188cb2:	2b20      	cmp	r3, #32
34188cb4:	d014      	beq.n	34188ce0 <RCCEx_GetADCCLKFreq+0x7c>
34188cb6:	2b20      	cmp	r3, #32
34188cb8:	f200 80bc 	bhi.w	34188e34 <RCCEx_GetADCCLKFreq+0x1d0>
34188cbc:	2b00      	cmp	r3, #0
34188cbe:	d002      	beq.n	34188cc6 <RCCEx_GetADCCLKFreq+0x62>
34188cc0:	2b10      	cmp	r3, #16
34188cc2:	d008      	beq.n	34188cd6 <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34188cc4:	e0b6      	b.n	34188e34 <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34188cc6:	f7fa ff2b 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
34188cca:	4603      	mov	r3, r0
34188ccc:	4618      	mov	r0, r3
34188cce:	f7ff fecb 	bl	34188a68 <RCCEx_GetHCLKFreq>
34188cd2:	60f8      	str	r0, [r7, #12]
      break;
34188cd4:	e0b7      	b.n	34188e46 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188cd6:	2007      	movs	r0, #7
34188cd8:	f000 f9b2 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
34188cdc:	60f8      	str	r0, [r7, #12]
      break;
34188cde:	e0b2      	b.n	34188e46 <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34188ce0:	f7fc fad6 	bl	34185290 <LL_RCC_IC7_IsEnabled>
34188ce4:	4603      	mov	r3, r0
34188ce6:	2b00      	cmp	r3, #0
34188ce8:	f000 80a6 	beq.w	34188e38 <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
34188cec:	f7fc faf2 	bl	341852d4 <LL_RCC_IC7_GetDivider>
34188cf0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34188cf2:	f7fc fae1 	bl	341852b8 <LL_RCC_IC7_GetSource>
34188cf6:	4603      	mov	r3, r0
34188cf8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188cfc:	d029      	beq.n	34188d52 <RCCEx_GetADCCLKFreq+0xee>
34188cfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188d02:	d82f      	bhi.n	34188d64 <RCCEx_GetADCCLKFreq+0x100>
34188d04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188d08:	d01a      	beq.n	34188d40 <RCCEx_GetADCCLKFreq+0xdc>
34188d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188d0e:	d829      	bhi.n	34188d64 <RCCEx_GetADCCLKFreq+0x100>
34188d10:	2b00      	cmp	r3, #0
34188d12:	d003      	beq.n	34188d1c <RCCEx_GetADCCLKFreq+0xb8>
34188d14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188d18:	d009      	beq.n	34188d2e <RCCEx_GetADCCLKFreq+0xca>
            break;
34188d1a:	e023      	b.n	34188d64 <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188d1c:	f7ff fd8c 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34188d20:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188d22:	68fa      	ldr	r2, [r7, #12]
34188d24:	68bb      	ldr	r3, [r7, #8]
34188d26:	fbb2 f3f3 	udiv	r3, r2, r3
34188d2a:	60fb      	str	r3, [r7, #12]
            break;
34188d2c:	e01b      	b.n	34188d66 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188d2e:	f7ff fdc9 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34188d32:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188d34:	68fa      	ldr	r2, [r7, #12]
34188d36:	68bb      	ldr	r3, [r7, #8]
34188d38:	fbb2 f3f3 	udiv	r3, r2, r3
34188d3c:	60fb      	str	r3, [r7, #12]
            break;
34188d3e:	e012      	b.n	34188d66 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188d40:	f7ff fe06 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34188d44:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188d46:	68fa      	ldr	r2, [r7, #12]
34188d48:	68bb      	ldr	r3, [r7, #8]
34188d4a:	fbb2 f3f3 	udiv	r3, r2, r3
34188d4e:	60fb      	str	r3, [r7, #12]
            break;
34188d50:	e009      	b.n	34188d66 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188d52:	f7ff fe43 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34188d56:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188d58:	68fa      	ldr	r2, [r7, #12]
34188d5a:	68bb      	ldr	r3, [r7, #8]
34188d5c:	fbb2 f3f3 	udiv	r3, r2, r3
34188d60:	60fb      	str	r3, [r7, #12]
            break;
34188d62:	e000      	b.n	34188d66 <RCCEx_GetADCCLKFreq+0x102>
            break;
34188d64:	bf00      	nop
      break;
34188d66:	e067      	b.n	34188e38 <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34188d68:	f7fc fad2 	bl	34185310 <LL_RCC_IC8_IsEnabled>
34188d6c:	4603      	mov	r3, r0
34188d6e:	2b00      	cmp	r3, #0
34188d70:	d064      	beq.n	34188e3c <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34188d72:	f7fc faef 	bl	34185354 <LL_RCC_IC8_GetDivider>
34188d76:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34188d78:	f7fc fade 	bl	34185338 <LL_RCC_IC8_GetSource>
34188d7c:	4603      	mov	r3, r0
34188d7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188d82:	d029      	beq.n	34188dd8 <RCCEx_GetADCCLKFreq+0x174>
34188d84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188d88:	d82f      	bhi.n	34188dea <RCCEx_GetADCCLKFreq+0x186>
34188d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188d8e:	d01a      	beq.n	34188dc6 <RCCEx_GetADCCLKFreq+0x162>
34188d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188d94:	d829      	bhi.n	34188dea <RCCEx_GetADCCLKFreq+0x186>
34188d96:	2b00      	cmp	r3, #0
34188d98:	d003      	beq.n	34188da2 <RCCEx_GetADCCLKFreq+0x13e>
34188d9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188d9e:	d009      	beq.n	34188db4 <RCCEx_GetADCCLKFreq+0x150>
            break;
34188da0:	e023      	b.n	34188dea <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188da2:	f7ff fd49 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34188da6:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188da8:	68fa      	ldr	r2, [r7, #12]
34188daa:	68bb      	ldr	r3, [r7, #8]
34188dac:	fbb2 f3f3 	udiv	r3, r2, r3
34188db0:	60fb      	str	r3, [r7, #12]
            break;
34188db2:	e01b      	b.n	34188dec <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188db4:	f7ff fd86 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34188db8:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188dba:	68fa      	ldr	r2, [r7, #12]
34188dbc:	68bb      	ldr	r3, [r7, #8]
34188dbe:	fbb2 f3f3 	udiv	r3, r2, r3
34188dc2:	60fb      	str	r3, [r7, #12]
            break;
34188dc4:	e012      	b.n	34188dec <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188dc6:	f7ff fdc3 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34188dca:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188dcc:	68fa      	ldr	r2, [r7, #12]
34188dce:	68bb      	ldr	r3, [r7, #8]
34188dd0:	fbb2 f3f3 	udiv	r3, r2, r3
34188dd4:	60fb      	str	r3, [r7, #12]
            break;
34188dd6:	e009      	b.n	34188dec <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188dd8:	f7ff fe00 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34188ddc:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188dde:	68fa      	ldr	r2, [r7, #12]
34188de0:	68bb      	ldr	r3, [r7, #8]
34188de2:	fbb2 f3f3 	udiv	r3, r2, r3
34188de6:	60fb      	str	r3, [r7, #12]
            break;
34188de8:	e000      	b.n	34188dec <RCCEx_GetADCCLKFreq+0x188>
            break;
34188dea:	bf00      	nop
      break;
34188dec:	e026      	b.n	34188e3c <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34188dee:	f7fb faab 	bl	34184348 <LL_RCC_HSI_IsReady>
34188df2:	4603      	mov	r3, r0
34188df4:	2b00      	cmp	r3, #0
34188df6:	d023      	beq.n	34188e40 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34188df8:	f7fb fab8 	bl	3418436c <LL_RCC_HSI_GetDivider>
34188dfc:	4603      	mov	r3, r0
34188dfe:	09db      	lsrs	r3, r3, #7
34188e00:	4a16      	ldr	r2, [pc, #88]	@ (34188e5c <RCCEx_GetADCCLKFreq+0x1f8>)
34188e02:	fa22 f303 	lsr.w	r3, r2, r3
34188e06:	60fb      	str	r3, [r7, #12]
      break;
34188e08:	e01a      	b.n	34188e40 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
34188e0a:	f7fb fabd 	bl	34184388 <LL_RCC_MSI_IsReady>
34188e0e:	4603      	mov	r3, r0
34188e10:	2b00      	cmp	r3, #0
34188e12:	d017      	beq.n	34188e44 <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
34188e14:	4b12      	ldr	r3, [pc, #72]	@ (34188e60 <RCCEx_GetADCCLKFreq+0x1fc>)
34188e16:	60fb      	str	r3, [r7, #12]
      break;
34188e18:	e014      	b.n	34188e44 <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
34188e1a:	4b12      	ldr	r3, [pc, #72]	@ (34188e64 <RCCEx_GetADCCLKFreq+0x200>)
34188e1c:	60fb      	str	r3, [r7, #12]
      break;
34188e1e:	e012      	b.n	34188e46 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
34188e20:	f7fa fe7e 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
34188e24:	4604      	mov	r4, r0
34188e26:	f7fb fef7 	bl	34184c18 <LL_RCC_GetTIMPrescaler>
34188e2a:	4603      	mov	r3, r0
34188e2c:	fa24 f303 	lsr.w	r3, r4, r3
34188e30:	60fb      	str	r3, [r7, #12]
      break;
34188e32:	e008      	b.n	34188e46 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34188e34:	bf00      	nop
34188e36:	e006      	b.n	34188e46 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34188e38:	bf00      	nop
34188e3a:	e004      	b.n	34188e46 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34188e3c:	bf00      	nop
34188e3e:	e002      	b.n	34188e46 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34188e40:	bf00      	nop
34188e42:	e000      	b.n	34188e46 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34188e44:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
34188e46:	f7fb fb4f 	bl	341844e8 <LL_RCC_GetADCPrescaler>
34188e4a:	4603      	mov	r3, r0
34188e4c:	3301      	adds	r3, #1
34188e4e:	68fa      	ldr	r2, [r7, #12]
34188e50:	fbb2 f3f3 	udiv	r3, r2, r3
}
34188e54:	4618      	mov	r0, r3
34188e56:	3714      	adds	r7, #20
34188e58:	46bd      	mov	sp, r7
34188e5a:	bd90      	pop	{r4, r7, pc}
34188e5c:	03d09000 	.word	0x03d09000
34188e60:	003d0900 	.word	0x003d0900
34188e64:	00bb8000 	.word	0x00bb8000

34188e68 <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
34188e68:	b590      	push	{r4, r7, lr}
34188e6a:	b085      	sub	sp, #20
34188e6c:	af00      	add	r7, sp, #0
34188e6e:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34188e70:	2300      	movs	r3, #0
34188e72:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
34188e74:	6878      	ldr	r0, [r7, #4]
34188e76:	f7fb fd2f 	bl	341848d8 <LL_RCC_GetADFClockSource>
34188e7a:	4603      	mov	r3, r0
34188e7c:	2b07      	cmp	r3, #7
34188e7e:	f200 80ca 	bhi.w	34189016 <RCCEx_GetADFCLKFreq+0x1ae>
34188e82:	a201      	add	r2, pc, #4	@ (adr r2, 34188e88 <RCCEx_GetADFCLKFreq+0x20>)
34188e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34188e88:	34188ea9 	.word	0x34188ea9
34188e8c:	34188eb9 	.word	0x34188eb9
34188e90:	34188ec3 	.word	0x34188ec3
34188e94:	34188f4b 	.word	0x34188f4b
34188e98:	34188fed 	.word	0x34188fed
34188e9c:	34188fd1 	.word	0x34188fd1
34188ea0:	34188ffd 	.word	0x34188ffd
34188ea4:	34189003 	.word	0x34189003
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34188ea8:	f7fa fe3a 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
34188eac:	4603      	mov	r3, r0
34188eae:	4618      	mov	r0, r3
34188eb0:	f7ff fdda 	bl	34188a68 <RCCEx_GetHCLKFreq>
34188eb4:	60f8      	str	r0, [r7, #12]
      break;
34188eb6:	e0b7      	b.n	34189028 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188eb8:	2007      	movs	r0, #7
34188eba:	f000 f8c1 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
34188ebe:	60f8      	str	r0, [r7, #12]
      break;
34188ec0:	e0b2      	b.n	34189028 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34188ec2:	f7fc f9e5 	bl	34185290 <LL_RCC_IC7_IsEnabled>
34188ec6:	4603      	mov	r3, r0
34188ec8:	2b00      	cmp	r3, #0
34188eca:	f000 80a6 	beq.w	3418901a <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34188ece:	f7fc fa01 	bl	341852d4 <LL_RCC_IC7_GetDivider>
34188ed2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34188ed4:	f7fc f9f0 	bl	341852b8 <LL_RCC_IC7_GetSource>
34188ed8:	4603      	mov	r3, r0
34188eda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188ede:	d029      	beq.n	34188f34 <RCCEx_GetADFCLKFreq+0xcc>
34188ee0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188ee4:	d82f      	bhi.n	34188f46 <RCCEx_GetADFCLKFreq+0xde>
34188ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188eea:	d01a      	beq.n	34188f22 <RCCEx_GetADFCLKFreq+0xba>
34188eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188ef0:	d829      	bhi.n	34188f46 <RCCEx_GetADFCLKFreq+0xde>
34188ef2:	2b00      	cmp	r3, #0
34188ef4:	d003      	beq.n	34188efe <RCCEx_GetADFCLKFreq+0x96>
34188ef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188efa:	d009      	beq.n	34188f10 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34188efc:	e023      	b.n	34188f46 <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188efe:	f7ff fc9b 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34188f02:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188f04:	68fa      	ldr	r2, [r7, #12]
34188f06:	68bb      	ldr	r3, [r7, #8]
34188f08:	fbb2 f3f3 	udiv	r3, r2, r3
34188f0c:	60fb      	str	r3, [r7, #12]
            break;
34188f0e:	e01b      	b.n	34188f48 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188f10:	f7ff fcd8 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34188f14:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188f16:	68fa      	ldr	r2, [r7, #12]
34188f18:	68bb      	ldr	r3, [r7, #8]
34188f1a:	fbb2 f3f3 	udiv	r3, r2, r3
34188f1e:	60fb      	str	r3, [r7, #12]
            break;
34188f20:	e012      	b.n	34188f48 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188f22:	f7ff fd15 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34188f26:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188f28:	68fa      	ldr	r2, [r7, #12]
34188f2a:	68bb      	ldr	r3, [r7, #8]
34188f2c:	fbb2 f3f3 	udiv	r3, r2, r3
34188f30:	60fb      	str	r3, [r7, #12]
            break;
34188f32:	e009      	b.n	34188f48 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188f34:	f7ff fd52 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34188f38:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188f3a:	68fa      	ldr	r2, [r7, #12]
34188f3c:	68bb      	ldr	r3, [r7, #8]
34188f3e:	fbb2 f3f3 	udiv	r3, r2, r3
34188f42:	60fb      	str	r3, [r7, #12]
            break;
34188f44:	e000      	b.n	34188f48 <RCCEx_GetADFCLKFreq+0xe0>
            break;
34188f46:	bf00      	nop
        }
      }
      break;
34188f48:	e067      	b.n	3418901a <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34188f4a:	f7fc f9e1 	bl	34185310 <LL_RCC_IC8_IsEnabled>
34188f4e:	4603      	mov	r3, r0
34188f50:	2b00      	cmp	r3, #0
34188f52:	d064      	beq.n	3418901e <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34188f54:	f7fc f9fe 	bl	34185354 <LL_RCC_IC8_GetDivider>
34188f58:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34188f5a:	f7fc f9ed 	bl	34185338 <LL_RCC_IC8_GetSource>
34188f5e:	4603      	mov	r3, r0
34188f60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188f64:	d029      	beq.n	34188fba <RCCEx_GetADFCLKFreq+0x152>
34188f66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188f6a:	d82f      	bhi.n	34188fcc <RCCEx_GetADFCLKFreq+0x164>
34188f6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188f70:	d01a      	beq.n	34188fa8 <RCCEx_GetADFCLKFreq+0x140>
34188f72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188f76:	d829      	bhi.n	34188fcc <RCCEx_GetADFCLKFreq+0x164>
34188f78:	2b00      	cmp	r3, #0
34188f7a:	d003      	beq.n	34188f84 <RCCEx_GetADFCLKFreq+0x11c>
34188f7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188f80:	d009      	beq.n	34188f96 <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34188f82:	e023      	b.n	34188fcc <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188f84:	f7ff fc58 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34188f88:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188f8a:	68fa      	ldr	r2, [r7, #12]
34188f8c:	68bb      	ldr	r3, [r7, #8]
34188f8e:	fbb2 f3f3 	udiv	r3, r2, r3
34188f92:	60fb      	str	r3, [r7, #12]
            break;
34188f94:	e01b      	b.n	34188fce <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188f96:	f7ff fc95 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34188f9a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188f9c:	68fa      	ldr	r2, [r7, #12]
34188f9e:	68bb      	ldr	r3, [r7, #8]
34188fa0:	fbb2 f3f3 	udiv	r3, r2, r3
34188fa4:	60fb      	str	r3, [r7, #12]
            break;
34188fa6:	e012      	b.n	34188fce <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188fa8:	f7ff fcd2 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34188fac:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188fae:	68fa      	ldr	r2, [r7, #12]
34188fb0:	68bb      	ldr	r3, [r7, #8]
34188fb2:	fbb2 f3f3 	udiv	r3, r2, r3
34188fb6:	60fb      	str	r3, [r7, #12]
            break;
34188fb8:	e009      	b.n	34188fce <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188fba:	f7ff fd0f 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34188fbe:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188fc0:	68fa      	ldr	r2, [r7, #12]
34188fc2:	68bb      	ldr	r3, [r7, #8]
34188fc4:	fbb2 f3f3 	udiv	r3, r2, r3
34188fc8:	60fb      	str	r3, [r7, #12]
            break;
34188fca:	e000      	b.n	34188fce <RCCEx_GetADFCLKFreq+0x166>
            break;
34188fcc:	bf00      	nop
        }
      }
      break;
34188fce:	e026      	b.n	3418901e <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34188fd0:	f7fb f9ba 	bl	34184348 <LL_RCC_HSI_IsReady>
34188fd4:	4603      	mov	r3, r0
34188fd6:	2b00      	cmp	r3, #0
34188fd8:	d023      	beq.n	34189022 <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34188fda:	f7fb f9c7 	bl	3418436c <LL_RCC_HSI_GetDivider>
34188fde:	4603      	mov	r3, r0
34188fe0:	09db      	lsrs	r3, r3, #7
34188fe2:	4a14      	ldr	r2, [pc, #80]	@ (34189034 <RCCEx_GetADFCLKFreq+0x1cc>)
34188fe4:	fa22 f303 	lsr.w	r3, r2, r3
34188fe8:	60fb      	str	r3, [r7, #12]
      }
      break;
34188fea:	e01a      	b.n	34189022 <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34188fec:	f7fb f9cc 	bl	34184388 <LL_RCC_MSI_IsReady>
34188ff0:	4603      	mov	r3, r0
34188ff2:	2b00      	cmp	r3, #0
34188ff4:	d017      	beq.n	34189026 <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
34188ff6:	4b10      	ldr	r3, [pc, #64]	@ (34189038 <RCCEx_GetADFCLKFreq+0x1d0>)
34188ff8:	60fb      	str	r3, [r7, #12]
      }
      break;
34188ffa:	e014      	b.n	34189026 <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34188ffc:	4b0f      	ldr	r3, [pc, #60]	@ (3418903c <RCCEx_GetADFCLKFreq+0x1d4>)
34188ffe:	60fb      	str	r3, [r7, #12]
      break;
34189000:	e012      	b.n	34189028 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
34189002:	f7fa fd8d 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
34189006:	4604      	mov	r4, r0
34189008:	f7fb fe06 	bl	34184c18 <LL_RCC_GetTIMPrescaler>
3418900c:	4603      	mov	r3, r0
3418900e:	fa24 f303 	lsr.w	r3, r4, r3
34189012:	60fb      	str	r3, [r7, #12]
      break;
34189014:	e008      	b.n	34189028 <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
34189016:	bf00      	nop
34189018:	e006      	b.n	34189028 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418901a:	bf00      	nop
3418901c:	e004      	b.n	34189028 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418901e:	bf00      	nop
34189020:	e002      	b.n	34189028 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34189022:	bf00      	nop
34189024:	e000      	b.n	34189028 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34189026:	bf00      	nop
  }

  return adf_frequency;
34189028:	68fb      	ldr	r3, [r7, #12]
}
3418902a:	4618      	mov	r0, r3
3418902c:	3714      	adds	r7, #20
3418902e:	46bd      	mov	sp, r7
34189030:	bd90      	pop	{r4, r7, pc}
34189032:	bf00      	nop
34189034:	03d09000 	.word	0x03d09000
34189038:	003d0900 	.word	0x003d0900
3418903c:	00bb8000 	.word	0x00bb8000

34189040 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
34189040:	b580      	push	{r7, lr}
34189042:	b084      	sub	sp, #16
34189044:	af00      	add	r7, sp, #0
34189046:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34189048:	2300      	movs	r3, #0
3418904a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
3418904c:	f7fc fc60 	bl	34185910 <LL_RCC_CLKP_IsEnabled>
34189050:	4603      	mov	r3, r0
34189052:	2b01      	cmp	r3, #1
34189054:	f040 81a5 	bne.w	341893a2 <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
34189058:	6878      	ldr	r0, [r7, #4]
3418905a:	f7fb fc4f 	bl	341848fc <LL_RCC_GetCLKPClockSource>
3418905e:	4603      	mov	r3, r0
34189060:	2b07      	cmp	r3, #7
34189062:	f200 818d 	bhi.w	34189380 <RCCEx_GetCLKPCLKFreq+0x340>
34189066:	a201      	add	r2, pc, #4	@ (adr r2, 3418906c <RCCEx_GetCLKPCLKFreq+0x2c>)
34189068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418906c:	3418908d 	.word	0x3418908d
34189070:	341890ab 	.word	0x341890ab
34189074:	341890bd 	.word	0x341890bd
34189078:	34189267 	.word	0x34189267
3418907c:	341890cf 	.word	0x341890cf
34189080:	34189157 	.word	0x34189157
34189084:	341891df 	.word	0x341891df
34189088:	341892ef 	.word	0x341892ef
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
3418908c:	f7fb f95c 	bl	34184348 <LL_RCC_HSI_IsReady>
34189090:	4603      	mov	r3, r0
34189092:	2b00      	cmp	r3, #0
34189094:	f000 8176 	beq.w	34189384 <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189098:	f7fb f968 	bl	3418436c <LL_RCC_HSI_GetDivider>
3418909c:	4603      	mov	r3, r0
3418909e:	09db      	lsrs	r3, r3, #7
341890a0:	4aa1      	ldr	r2, [pc, #644]	@ (34189328 <RCCEx_GetCLKPCLKFreq+0x2e8>)
341890a2:	fa22 f303 	lsr.w	r3, r2, r3
341890a6:	60fb      	str	r3, [r7, #12]
        }
        break;
341890a8:	e16c      	b.n	34189384 <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
341890aa:	f7fb f96d 	bl	34184388 <LL_RCC_MSI_IsReady>
341890ae:	4603      	mov	r3, r0
341890b0:	2b00      	cmp	r3, #0
341890b2:	f000 8169 	beq.w	34189388 <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
341890b6:	4b9d      	ldr	r3, [pc, #628]	@ (3418932c <RCCEx_GetCLKPCLKFreq+0x2ec>)
341890b8:	60fb      	str	r3, [r7, #12]
        }
        break;
341890ba:	e165      	b.n	34189388 <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
341890bc:	f7fb f932 	bl	34184324 <LL_RCC_HSE_IsReady>
341890c0:	4603      	mov	r3, r0
341890c2:	2b00      	cmp	r3, #0
341890c4:	f000 8162 	beq.w	3418938c <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
341890c8:	4b99      	ldr	r3, [pc, #612]	@ (34189330 <RCCEx_GetCLKPCLKFreq+0x2f0>)
341890ca:	60fb      	str	r3, [r7, #12]
        }
        break;
341890cc:	e15e      	b.n	3418938c <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
341890ce:	f7fc f89f 	bl	34185210 <LL_RCC_IC5_IsEnabled>
341890d2:	4603      	mov	r3, r0
341890d4:	2b00      	cmp	r3, #0
341890d6:	f000 815b 	beq.w	34189390 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
341890da:	f7fc f8bb 	bl	34185254 <LL_RCC_IC5_GetDivider>
341890de:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
341890e0:	f7fc f8aa 	bl	34185238 <LL_RCC_IC5_GetSource>
341890e4:	4603      	mov	r3, r0
341890e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341890ea:	d029      	beq.n	34189140 <RCCEx_GetCLKPCLKFreq+0x100>
341890ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341890f0:	d82f      	bhi.n	34189152 <RCCEx_GetCLKPCLKFreq+0x112>
341890f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341890f6:	d01a      	beq.n	3418912e <RCCEx_GetCLKPCLKFreq+0xee>
341890f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341890fc:	d829      	bhi.n	34189152 <RCCEx_GetCLKPCLKFreq+0x112>
341890fe:	2b00      	cmp	r3, #0
34189100:	d003      	beq.n	3418910a <RCCEx_GetCLKPCLKFreq+0xca>
34189102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189106:	d009      	beq.n	3418911c <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34189108:	e023      	b.n	34189152 <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418910a:	f7ff fb95 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418910e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189110:	68fa      	ldr	r2, [r7, #12]
34189112:	68bb      	ldr	r3, [r7, #8]
34189114:	fbb2 f3f3 	udiv	r3, r2, r3
34189118:	60fb      	str	r3, [r7, #12]
              break;
3418911a:	e01b      	b.n	34189154 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418911c:	f7ff fbd2 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34189120:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189122:	68fa      	ldr	r2, [r7, #12]
34189124:	68bb      	ldr	r3, [r7, #8]
34189126:	fbb2 f3f3 	udiv	r3, r2, r3
3418912a:	60fb      	str	r3, [r7, #12]
              break;
3418912c:	e012      	b.n	34189154 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418912e:	f7ff fc0f 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34189132:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189134:	68fa      	ldr	r2, [r7, #12]
34189136:	68bb      	ldr	r3, [r7, #8]
34189138:	fbb2 f3f3 	udiv	r3, r2, r3
3418913c:	60fb      	str	r3, [r7, #12]
              break;
3418913e:	e009      	b.n	34189154 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189140:	f7ff fc4c 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34189144:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189146:	68fa      	ldr	r2, [r7, #12]
34189148:	68bb      	ldr	r3, [r7, #8]
3418914a:	fbb2 f3f3 	udiv	r3, r2, r3
3418914e:	60fb      	str	r3, [r7, #12]
              break;
34189150:	e000      	b.n	34189154 <RCCEx_GetCLKPCLKFreq+0x114>
              break;
34189152:	bf00      	nop
          }
        }
        break;
34189154:	e11c      	b.n	34189390 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
34189156:	f7fc f95b 	bl	34185410 <LL_RCC_IC10_IsEnabled>
3418915a:	4603      	mov	r3, r0
3418915c:	2b00      	cmp	r3, #0
3418915e:	f000 8119 	beq.w	34189394 <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
34189162:	f7fc f977 	bl	34185454 <LL_RCC_IC10_GetDivider>
34189166:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
34189168:	f7fc f966 	bl	34185438 <LL_RCC_IC10_GetSource>
3418916c:	4603      	mov	r3, r0
3418916e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189172:	d029      	beq.n	341891c8 <RCCEx_GetCLKPCLKFreq+0x188>
34189174:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189178:	d82f      	bhi.n	341891da <RCCEx_GetCLKPCLKFreq+0x19a>
3418917a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418917e:	d01a      	beq.n	341891b6 <RCCEx_GetCLKPCLKFreq+0x176>
34189180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189184:	d829      	bhi.n	341891da <RCCEx_GetCLKPCLKFreq+0x19a>
34189186:	2b00      	cmp	r3, #0
34189188:	d003      	beq.n	34189192 <RCCEx_GetCLKPCLKFreq+0x152>
3418918a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418918e:	d009      	beq.n	341891a4 <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34189190:	e023      	b.n	341891da <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189192:	f7ff fb51 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34189196:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189198:	68fa      	ldr	r2, [r7, #12]
3418919a:	68bb      	ldr	r3, [r7, #8]
3418919c:	fbb2 f3f3 	udiv	r3, r2, r3
341891a0:	60fb      	str	r3, [r7, #12]
              break;
341891a2:	e01b      	b.n	341891dc <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341891a4:	f7ff fb8e 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
341891a8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341891aa:	68fa      	ldr	r2, [r7, #12]
341891ac:	68bb      	ldr	r3, [r7, #8]
341891ae:	fbb2 f3f3 	udiv	r3, r2, r3
341891b2:	60fb      	str	r3, [r7, #12]
              break;
341891b4:	e012      	b.n	341891dc <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341891b6:	f7ff fbcb 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
341891ba:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341891bc:	68fa      	ldr	r2, [r7, #12]
341891be:	68bb      	ldr	r3, [r7, #8]
341891c0:	fbb2 f3f3 	udiv	r3, r2, r3
341891c4:	60fb      	str	r3, [r7, #12]
              break;
341891c6:	e009      	b.n	341891dc <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341891c8:	f7ff fc08 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
341891cc:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341891ce:	68fa      	ldr	r2, [r7, #12]
341891d0:	68bb      	ldr	r3, [r7, #8]
341891d2:	fbb2 f3f3 	udiv	r3, r2, r3
341891d6:	60fb      	str	r3, [r7, #12]
              break;
341891d8:	e000      	b.n	341891dc <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
341891da:	bf00      	nop
          }
        }
        break;
341891dc:	e0da      	b.n	34189394 <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
341891de:	f7fc fa17 	bl	34185610 <LL_RCC_IC15_IsEnabled>
341891e2:	4603      	mov	r3, r0
341891e4:	2b00      	cmp	r3, #0
341891e6:	f000 80d7 	beq.w	34189398 <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
341891ea:	f7fc fa33 	bl	34185654 <LL_RCC_IC15_GetDivider>
341891ee:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
341891f0:	f7fc fa22 	bl	34185638 <LL_RCC_IC15_GetSource>
341891f4:	4603      	mov	r3, r0
341891f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341891fa:	d029      	beq.n	34189250 <RCCEx_GetCLKPCLKFreq+0x210>
341891fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189200:	d82f      	bhi.n	34189262 <RCCEx_GetCLKPCLKFreq+0x222>
34189202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189206:	d01a      	beq.n	3418923e <RCCEx_GetCLKPCLKFreq+0x1fe>
34189208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418920c:	d829      	bhi.n	34189262 <RCCEx_GetCLKPCLKFreq+0x222>
3418920e:	2b00      	cmp	r3, #0
34189210:	d003      	beq.n	3418921a <RCCEx_GetCLKPCLKFreq+0x1da>
34189212:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189216:	d009      	beq.n	3418922c <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34189218:	e023      	b.n	34189262 <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418921a:	f7ff fb0d 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418921e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189220:	68fa      	ldr	r2, [r7, #12]
34189222:	68bb      	ldr	r3, [r7, #8]
34189224:	fbb2 f3f3 	udiv	r3, r2, r3
34189228:	60fb      	str	r3, [r7, #12]
              break;
3418922a:	e01b      	b.n	34189264 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418922c:	f7ff fb4a 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34189230:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189232:	68fa      	ldr	r2, [r7, #12]
34189234:	68bb      	ldr	r3, [r7, #8]
34189236:	fbb2 f3f3 	udiv	r3, r2, r3
3418923a:	60fb      	str	r3, [r7, #12]
              break;
3418923c:	e012      	b.n	34189264 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418923e:	f7ff fb87 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34189242:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189244:	68fa      	ldr	r2, [r7, #12]
34189246:	68bb      	ldr	r3, [r7, #8]
34189248:	fbb2 f3f3 	udiv	r3, r2, r3
3418924c:	60fb      	str	r3, [r7, #12]
              break;
3418924e:	e009      	b.n	34189264 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189250:	f7ff fbc4 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34189254:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189256:	68fa      	ldr	r2, [r7, #12]
34189258:	68bb      	ldr	r3, [r7, #8]
3418925a:	fbb2 f3f3 	udiv	r3, r2, r3
3418925e:	60fb      	str	r3, [r7, #12]
              break;
34189260:	e000      	b.n	34189264 <RCCEx_GetCLKPCLKFreq+0x224>
              break;
34189262:	bf00      	nop
          }
        }
        break;
34189264:	e098      	b.n	34189398 <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
34189266:	f7fc fad3 	bl	34185810 <LL_RCC_IC19_IsEnabled>
3418926a:	4603      	mov	r3, r0
3418926c:	2b00      	cmp	r3, #0
3418926e:	f000 8095 	beq.w	3418939c <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
34189272:	f7fc faef 	bl	34185854 <LL_RCC_IC19_GetDivider>
34189276:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
34189278:	f7fc fade 	bl	34185838 <LL_RCC_IC19_GetSource>
3418927c:	4603      	mov	r3, r0
3418927e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189282:	d029      	beq.n	341892d8 <RCCEx_GetCLKPCLKFreq+0x298>
34189284:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189288:	d82f      	bhi.n	341892ea <RCCEx_GetCLKPCLKFreq+0x2aa>
3418928a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418928e:	d01a      	beq.n	341892c6 <RCCEx_GetCLKPCLKFreq+0x286>
34189290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189294:	d829      	bhi.n	341892ea <RCCEx_GetCLKPCLKFreq+0x2aa>
34189296:	2b00      	cmp	r3, #0
34189298:	d003      	beq.n	341892a2 <RCCEx_GetCLKPCLKFreq+0x262>
3418929a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418929e:	d009      	beq.n	341892b4 <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
341892a0:	e023      	b.n	341892ea <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341892a2:	f7ff fac9 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
341892a6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341892a8:	68fa      	ldr	r2, [r7, #12]
341892aa:	68bb      	ldr	r3, [r7, #8]
341892ac:	fbb2 f3f3 	udiv	r3, r2, r3
341892b0:	60fb      	str	r3, [r7, #12]
              break;
341892b2:	e01b      	b.n	341892ec <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341892b4:	f7ff fb06 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
341892b8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341892ba:	68fa      	ldr	r2, [r7, #12]
341892bc:	68bb      	ldr	r3, [r7, #8]
341892be:	fbb2 f3f3 	udiv	r3, r2, r3
341892c2:	60fb      	str	r3, [r7, #12]
              break;
341892c4:	e012      	b.n	341892ec <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341892c6:	f7ff fb43 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
341892ca:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341892cc:	68fa      	ldr	r2, [r7, #12]
341892ce:	68bb      	ldr	r3, [r7, #8]
341892d0:	fbb2 f3f3 	udiv	r3, r2, r3
341892d4:	60fb      	str	r3, [r7, #12]
              break;
341892d6:	e009      	b.n	341892ec <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341892d8:	f7ff fb80 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
341892dc:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341892de:	68fa      	ldr	r2, [r7, #12]
341892e0:	68bb      	ldr	r3, [r7, #8]
341892e2:	fbb2 f3f3 	udiv	r3, r2, r3
341892e6:	60fb      	str	r3, [r7, #12]
              break;
341892e8:	e000      	b.n	341892ec <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
341892ea:	bf00      	nop
          }
        }
        break;
341892ec:	e056      	b.n	3418939c <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
341892ee:	f7fc facf 	bl	34185890 <LL_RCC_IC20_IsEnabled>
341892f2:	4603      	mov	r3, r0
341892f4:	2b00      	cmp	r3, #0
341892f6:	d053      	beq.n	341893a0 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
341892f8:	f7fc faec 	bl	341858d4 <LL_RCC_IC20_GetDivider>
341892fc:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
341892fe:	f7fc fadb 	bl	341858b8 <LL_RCC_IC20_GetSource>
34189302:	4603      	mov	r3, r0
34189304:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189308:	d02f      	beq.n	3418936a <RCCEx_GetCLKPCLKFreq+0x32a>
3418930a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418930e:	d835      	bhi.n	3418937c <RCCEx_GetCLKPCLKFreq+0x33c>
34189310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189314:	d020      	beq.n	34189358 <RCCEx_GetCLKPCLKFreq+0x318>
34189316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418931a:	d82f      	bhi.n	3418937c <RCCEx_GetCLKPCLKFreq+0x33c>
3418931c:	2b00      	cmp	r3, #0
3418931e:	d009      	beq.n	34189334 <RCCEx_GetCLKPCLKFreq+0x2f4>
34189320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189324:	d00f      	beq.n	34189346 <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34189326:	e029      	b.n	3418937c <RCCEx_GetCLKPCLKFreq+0x33c>
34189328:	03d09000 	.word	0x03d09000
3418932c:	003d0900 	.word	0x003d0900
34189330:	02dc6c00 	.word	0x02dc6c00
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189334:	f7ff fa80 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34189338:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418933a:	68fa      	ldr	r2, [r7, #12]
3418933c:	68bb      	ldr	r3, [r7, #8]
3418933e:	fbb2 f3f3 	udiv	r3, r2, r3
34189342:	60fb      	str	r3, [r7, #12]
              break;
34189344:	e01b      	b.n	3418937e <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189346:	f7ff fabd 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418934a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418934c:	68fa      	ldr	r2, [r7, #12]
3418934e:	68bb      	ldr	r3, [r7, #8]
34189350:	fbb2 f3f3 	udiv	r3, r2, r3
34189354:	60fb      	str	r3, [r7, #12]
              break;
34189356:	e012      	b.n	3418937e <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189358:	f7ff fafa 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418935c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418935e:	68fa      	ldr	r2, [r7, #12]
34189360:	68bb      	ldr	r3, [r7, #8]
34189362:	fbb2 f3f3 	udiv	r3, r2, r3
34189366:	60fb      	str	r3, [r7, #12]
              break;
34189368:	e009      	b.n	3418937e <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418936a:	f7ff fb37 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418936e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189370:	68fa      	ldr	r2, [r7, #12]
34189372:	68bb      	ldr	r3, [r7, #8]
34189374:	fbb2 f3f3 	udiv	r3, r2, r3
34189378:	60fb      	str	r3, [r7, #12]
              break;
3418937a:	e000      	b.n	3418937e <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
3418937c:	bf00      	nop
          }
        }
        break;
3418937e:	e00f      	b.n	341893a0 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
34189380:	bf00      	nop
34189382:	e00e      	b.n	341893a2 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189384:	bf00      	nop
34189386:	e00c      	b.n	341893a2 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189388:	bf00      	nop
3418938a:	e00a      	b.n	341893a2 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418938c:	bf00      	nop
3418938e:	e008      	b.n	341893a2 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189390:	bf00      	nop
34189392:	e006      	b.n	341893a2 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189394:	bf00      	nop
34189396:	e004      	b.n	341893a2 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189398:	bf00      	nop
3418939a:	e002      	b.n	341893a2 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418939c:	bf00      	nop
3418939e:	e000      	b.n	341893a2 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
341893a0:	bf00      	nop
    }
  }

  return clkp_frequency;
341893a2:	68fb      	ldr	r3, [r7, #12]
}
341893a4:	4618      	mov	r0, r3
341893a6:	3710      	adds	r7, #16
341893a8:	46bd      	mov	sp, r7
341893aa:	bd80      	pop	{r7, pc}

341893ac <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
341893ac:	b580      	push	{r7, lr}
341893ae:	b082      	sub	sp, #8
341893b0:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
341893b2:	2300      	movs	r3, #0
341893b4:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
341893b6:	f7fc f9eb 	bl	34185790 <LL_RCC_IC18_IsEnabled>
341893ba:	4603      	mov	r3, r0
341893bc:	2b00      	cmp	r3, #0
341893be:	d03c      	beq.n	3418943a <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
341893c0:	f7fc fa08 	bl	341857d4 <LL_RCC_IC18_GetDivider>
341893c4:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
341893c6:	f7fc f9f7 	bl	341857b8 <LL_RCC_IC18_GetSource>
341893ca:	4603      	mov	r3, r0
341893cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341893d0:	d029      	beq.n	34189426 <RCCEx_GetCSICLKFreq+0x7a>
341893d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341893d6:	d82f      	bhi.n	34189438 <RCCEx_GetCSICLKFreq+0x8c>
341893d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341893dc:	d01a      	beq.n	34189414 <RCCEx_GetCSICLKFreq+0x68>
341893de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341893e2:	d829      	bhi.n	34189438 <RCCEx_GetCSICLKFreq+0x8c>
341893e4:	2b00      	cmp	r3, #0
341893e6:	d003      	beq.n	341893f0 <RCCEx_GetCSICLKFreq+0x44>
341893e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341893ec:	d009      	beq.n	34189402 <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
341893ee:	e023      	b.n	34189438 <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341893f0:	f7ff fa22 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
341893f4:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
341893f6:	687a      	ldr	r2, [r7, #4]
341893f8:	683b      	ldr	r3, [r7, #0]
341893fa:	fbb2 f3f3 	udiv	r3, r2, r3
341893fe:	607b      	str	r3, [r7, #4]
        break;
34189400:	e01b      	b.n	3418943a <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189402:	f7ff fa5f 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34189406:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34189408:	687a      	ldr	r2, [r7, #4]
3418940a:	683b      	ldr	r3, [r7, #0]
3418940c:	fbb2 f3f3 	udiv	r3, r2, r3
34189410:	607b      	str	r3, [r7, #4]
        break;
34189412:	e012      	b.n	3418943a <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189414:	f7ff fa9c 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34189418:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3418941a:	687a      	ldr	r2, [r7, #4]
3418941c:	683b      	ldr	r3, [r7, #0]
3418941e:	fbb2 f3f3 	udiv	r3, r2, r3
34189422:	607b      	str	r3, [r7, #4]
        break;
34189424:	e009      	b.n	3418943a <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189426:	f7ff fad9 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418942a:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3418942c:	687a      	ldr	r2, [r7, #4]
3418942e:	683b      	ldr	r3, [r7, #0]
34189430:	fbb2 f3f3 	udiv	r3, r2, r3
34189434:	607b      	str	r3, [r7, #4]
        break;
34189436:	e000      	b.n	3418943a <RCCEx_GetCSICLKFreq+0x8e>
        break;
34189438:	bf00      	nop
    }
  }

  return clkp_frequency;
3418943a:	687b      	ldr	r3, [r7, #4]
}
3418943c:	4618      	mov	r0, r3
3418943e:	3708      	adds	r7, #8
34189440:	46bd      	mov	sp, r7
34189442:	bd80      	pop	{r7, pc}

34189444 <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
34189444:	b580      	push	{r7, lr}
34189446:	b084      	sub	sp, #16
34189448:	af00      	add	r7, sp, #0
3418944a:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418944c:	2300      	movs	r3, #0
3418944e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34189450:	6878      	ldr	r0, [r7, #4]
34189452:	f7fb fa65 	bl	34184920 <LL_RCC_GetDCMIPPClockSource>
34189456:	4603      	mov	r3, r0
34189458:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418945c:	d062      	beq.n	34189524 <RCCEx_GetDCMIPPCLKFreq+0xe0>
3418945e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34189462:	d86d      	bhi.n	34189540 <RCCEx_GetDCMIPPCLKFreq+0xfc>
34189464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34189468:	d019      	beq.n	3418949e <RCCEx_GetDCMIPPCLKFreq+0x5a>
3418946a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418946e:	d867      	bhi.n	34189540 <RCCEx_GetDCMIPPCLKFreq+0xfc>
34189470:	2b00      	cmp	r3, #0
34189472:	d003      	beq.n	3418947c <RCCEx_GetDCMIPPCLKFreq+0x38>
34189474:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34189478:	d00c      	beq.n	34189494 <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418947a:	e061      	b.n	34189540 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418947c:	f7fa fb50 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
34189480:	4603      	mov	r3, r0
34189482:	4618      	mov	r0, r3
34189484:	f7ff faf0 	bl	34188a68 <RCCEx_GetHCLKFreq>
34189488:	4603      	mov	r3, r0
3418948a:	4618      	mov	r0, r3
3418948c:	f7ff fb2f 	bl	34188aee <RCCEx_GetPCLK5Freq>
34189490:	60f8      	str	r0, [r7, #12]
      break;
34189492:	e05a      	b.n	3418954a <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189494:	2007      	movs	r0, #7
34189496:	f7ff fdd3 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418949a:	60f8      	str	r0, [r7, #12]
      break;
3418949c:	e055      	b.n	3418954a <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
3418949e:	f7fc f937 	bl	34185710 <LL_RCC_IC17_IsEnabled>
341894a2:	4603      	mov	r3, r0
341894a4:	2b00      	cmp	r3, #0
341894a6:	d04d      	beq.n	34189544 <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
341894a8:	f7fc f954 	bl	34185754 <LL_RCC_IC17_GetDivider>
341894ac:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
341894ae:	f7fc f943 	bl	34185738 <LL_RCC_IC17_GetSource>
341894b2:	4603      	mov	r3, r0
341894b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341894b8:	d029      	beq.n	3418950e <RCCEx_GetDCMIPPCLKFreq+0xca>
341894ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341894be:	d82f      	bhi.n	34189520 <RCCEx_GetDCMIPPCLKFreq+0xdc>
341894c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341894c4:	d01a      	beq.n	341894fc <RCCEx_GetDCMIPPCLKFreq+0xb8>
341894c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341894ca:	d829      	bhi.n	34189520 <RCCEx_GetDCMIPPCLKFreq+0xdc>
341894cc:	2b00      	cmp	r3, #0
341894ce:	d003      	beq.n	341894d8 <RCCEx_GetDCMIPPCLKFreq+0x94>
341894d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341894d4:	d009      	beq.n	341894ea <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
341894d6:	e023      	b.n	34189520 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341894d8:	f7ff f9ae 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
341894dc:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
341894de:	68fa      	ldr	r2, [r7, #12]
341894e0:	68bb      	ldr	r3, [r7, #8]
341894e2:	fbb2 f3f3 	udiv	r3, r2, r3
341894e6:	60fb      	str	r3, [r7, #12]
            break;
341894e8:	e01b      	b.n	34189522 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341894ea:	f7ff f9eb 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
341894ee:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
341894f0:	68fa      	ldr	r2, [r7, #12]
341894f2:	68bb      	ldr	r3, [r7, #8]
341894f4:	fbb2 f3f3 	udiv	r3, r2, r3
341894f8:	60fb      	str	r3, [r7, #12]
            break;
341894fa:	e012      	b.n	34189522 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341894fc:	f7ff fa28 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34189500:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34189502:	68fa      	ldr	r2, [r7, #12]
34189504:	68bb      	ldr	r3, [r7, #8]
34189506:	fbb2 f3f3 	udiv	r3, r2, r3
3418950a:	60fb      	str	r3, [r7, #12]
            break;
3418950c:	e009      	b.n	34189522 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418950e:	f7ff fa65 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34189512:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34189514:	68fa      	ldr	r2, [r7, #12]
34189516:	68bb      	ldr	r3, [r7, #8]
34189518:	fbb2 f3f3 	udiv	r3, r2, r3
3418951c:	60fb      	str	r3, [r7, #12]
            break;
3418951e:	e000      	b.n	34189522 <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
34189520:	bf00      	nop
      break;
34189522:	e00f      	b.n	34189544 <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34189524:	f7fa ff10 	bl	34184348 <LL_RCC_HSI_IsReady>
34189528:	4603      	mov	r3, r0
3418952a:	2b00      	cmp	r3, #0
3418952c:	d00c      	beq.n	34189548 <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418952e:	f7fa ff1d 	bl	3418436c <LL_RCC_HSI_GetDivider>
34189532:	4603      	mov	r3, r0
34189534:	09db      	lsrs	r3, r3, #7
34189536:	4a07      	ldr	r2, [pc, #28]	@ (34189554 <RCCEx_GetDCMIPPCLKFreq+0x110>)
34189538:	fa22 f303 	lsr.w	r3, r2, r3
3418953c:	60fb      	str	r3, [r7, #12]
      break;
3418953e:	e003      	b.n	34189548 <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
34189540:	bf00      	nop
34189542:	e002      	b.n	3418954a <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
34189544:	bf00      	nop
34189546:	e000      	b.n	3418954a <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
34189548:	bf00      	nop
  }

  return dcmipp_frequency;
3418954a:	68fb      	ldr	r3, [r7, #12]
}
3418954c:	4618      	mov	r0, r3
3418954e:	3710      	adds	r7, #16
34189550:	46bd      	mov	sp, r7
34189552:	bd80      	pop	{r7, pc}
34189554:	03d09000 	.word	0x03d09000

34189558 <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
34189558:	b580      	push	{r7, lr}
3418955a:	b084      	sub	sp, #16
3418955c:	af00      	add	r7, sp, #0
3418955e:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
34189560:	2300      	movs	r3, #0
34189562:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34189564:	6878      	ldr	r0, [r7, #4]
34189566:	f7fb f9ed 	bl	34184944 <LL_RCC_GetETHClockSource>
3418956a:	4603      	mov	r3, r0
3418956c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34189570:	d05e      	beq.n	34189630 <RCCEx_GetETH1CLKFreq+0xd8>
34189572:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34189576:	d863      	bhi.n	34189640 <RCCEx_GetETH1CLKFreq+0xe8>
34189578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418957c:	d015      	beq.n	341895aa <RCCEx_GetETH1CLKFreq+0x52>
3418957e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34189582:	d85d      	bhi.n	34189640 <RCCEx_GetETH1CLKFreq+0xe8>
34189584:	2b00      	cmp	r3, #0
34189586:	d003      	beq.n	34189590 <RCCEx_GetETH1CLKFreq+0x38>
34189588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418958c:	d008      	beq.n	341895a0 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418958e:	e057      	b.n	34189640 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189590:	f7fa fac6 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
34189594:	4603      	mov	r3, r0
34189596:	4618      	mov	r0, r3
34189598:	f7ff fa66 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418959c:	60f8      	str	r0, [r7, #12]
      break;
3418959e:	e054      	b.n	3418964a <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341895a0:	2007      	movs	r0, #7
341895a2:	f7ff fd4d 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
341895a6:	60f8      	str	r0, [r7, #12]
      break;
341895a8:	e04f      	b.n	3418964a <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
341895aa:	f7fb ff71 	bl	34185490 <LL_RCC_IC12_IsEnabled>
341895ae:	4603      	mov	r3, r0
341895b0:	2b00      	cmp	r3, #0
341895b2:	d047      	beq.n	34189644 <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
341895b4:	f7fb ff8e 	bl	341854d4 <LL_RCC_IC12_GetDivider>
341895b8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
341895ba:	f7fb ff7d 	bl	341854b8 <LL_RCC_IC12_GetSource>
341895be:	4603      	mov	r3, r0
341895c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341895c4:	d029      	beq.n	3418961a <RCCEx_GetETH1CLKFreq+0xc2>
341895c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341895ca:	d82f      	bhi.n	3418962c <RCCEx_GetETH1CLKFreq+0xd4>
341895cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341895d0:	d01a      	beq.n	34189608 <RCCEx_GetETH1CLKFreq+0xb0>
341895d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341895d6:	d829      	bhi.n	3418962c <RCCEx_GetETH1CLKFreq+0xd4>
341895d8:	2b00      	cmp	r3, #0
341895da:	d003      	beq.n	341895e4 <RCCEx_GetETH1CLKFreq+0x8c>
341895dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341895e0:	d009      	beq.n	341895f6 <RCCEx_GetETH1CLKFreq+0x9e>
            break;
341895e2:	e023      	b.n	3418962c <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341895e4:	f7ff f928 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
341895e8:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
341895ea:	68fa      	ldr	r2, [r7, #12]
341895ec:	68bb      	ldr	r3, [r7, #8]
341895ee:	fbb2 f3f3 	udiv	r3, r2, r3
341895f2:	60fb      	str	r3, [r7, #12]
            break;
341895f4:	e01b      	b.n	3418962e <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341895f6:	f7ff f965 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
341895fa:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
341895fc:	68fa      	ldr	r2, [r7, #12]
341895fe:	68bb      	ldr	r3, [r7, #8]
34189600:	fbb2 f3f3 	udiv	r3, r2, r3
34189604:	60fb      	str	r3, [r7, #12]
            break;
34189606:	e012      	b.n	3418962e <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189608:	f7ff f9a2 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418960c:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3418960e:	68fa      	ldr	r2, [r7, #12]
34189610:	68bb      	ldr	r3, [r7, #8]
34189612:	fbb2 f3f3 	udiv	r3, r2, r3
34189616:	60fb      	str	r3, [r7, #12]
            break;
34189618:	e009      	b.n	3418962e <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418961a:	f7ff f9df 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418961e:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34189620:	68fa      	ldr	r2, [r7, #12]
34189622:	68bb      	ldr	r3, [r7, #8]
34189624:	fbb2 f3f3 	udiv	r3, r2, r3
34189628:	60fb      	str	r3, [r7, #12]
            break;
3418962a:	e000      	b.n	3418962e <RCCEx_GetETH1CLKFreq+0xd6>
            break;
3418962c:	bf00      	nop
      break;
3418962e:	e009      	b.n	34189644 <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
34189630:	f7fa fe78 	bl	34184324 <LL_RCC_HSE_IsReady>
34189634:	4603      	mov	r3, r0
34189636:	2b00      	cmp	r3, #0
34189638:	d006      	beq.n	34189648 <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
3418963a:	4b06      	ldr	r3, [pc, #24]	@ (34189654 <RCCEx_GetETH1CLKFreq+0xfc>)
3418963c:	60fb      	str	r3, [r7, #12]
      break;
3418963e:	e003      	b.n	34189648 <RCCEx_GetETH1CLKFreq+0xf0>
      break;
34189640:	bf00      	nop
34189642:	e002      	b.n	3418964a <RCCEx_GetETH1CLKFreq+0xf2>
      break;
34189644:	bf00      	nop
34189646:	e000      	b.n	3418964a <RCCEx_GetETH1CLKFreq+0xf2>
      break;
34189648:	bf00      	nop
  }

  return eth1_frequency;
3418964a:	68fb      	ldr	r3, [r7, #12]
}
3418964c:	4618      	mov	r0, r3
3418964e:	3710      	adds	r7, #16
34189650:	46bd      	mov	sp, r7
34189652:	bd80      	pop	{r7, pc}
34189654:	02dc6c00 	.word	0x02dc6c00

34189658 <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
34189658:	b580      	push	{r7, lr}
3418965a:	b084      	sub	sp, #16
3418965c:	af00      	add	r7, sp, #0
3418965e:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
34189660:	2300      	movs	r3, #0
34189662:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34189664:	6878      	ldr	r0, [r7, #4]
34189666:	f7fb f97f 	bl	34184968 <LL_RCC_GetETHPTPClockSource>
3418966a:	4603      	mov	r3, r0
3418966c:	2b03      	cmp	r3, #3
3418966e:	d863      	bhi.n	34189738 <RCCEx_GetETH1PTPCLKFreq+0xe0>
34189670:	a201      	add	r2, pc, #4	@ (adr r2, 34189678 <RCCEx_GetETH1PTPCLKFreq+0x20>)
34189672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34189676:	bf00      	nop
34189678:	34189689 	.word	0x34189689
3418967c:	34189699 	.word	0x34189699
34189680:	341896a3 	.word	0x341896a3
34189684:	34189729 	.word	0x34189729
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189688:	f7fa fa4a 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418968c:	4603      	mov	r3, r0
3418968e:	4618      	mov	r0, r3
34189690:	f7ff f9ea 	bl	34188a68 <RCCEx_GetHCLKFreq>
34189694:	60f8      	str	r0, [r7, #12]
      break;
34189696:	e054      	b.n	34189742 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189698:	2007      	movs	r0, #7
3418969a:	f7ff fcd1 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418969e:	60f8      	str	r0, [r7, #12]
      break;
341896a0:	e04f      	b.n	34189742 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
341896a2:	f7fb ff35 	bl	34185510 <LL_RCC_IC13_IsEnabled>
341896a6:	4603      	mov	r3, r0
341896a8:	2b00      	cmp	r3, #0
341896aa:	d047      	beq.n	3418973c <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
341896ac:	f7fb ff52 	bl	34185554 <LL_RCC_IC13_GetDivider>
341896b0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
341896b2:	f7fb ff41 	bl	34185538 <LL_RCC_IC13_GetSource>
341896b6:	4603      	mov	r3, r0
341896b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341896bc:	d029      	beq.n	34189712 <RCCEx_GetETH1PTPCLKFreq+0xba>
341896be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341896c2:	d82f      	bhi.n	34189724 <RCCEx_GetETH1PTPCLKFreq+0xcc>
341896c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341896c8:	d01a      	beq.n	34189700 <RCCEx_GetETH1PTPCLKFreq+0xa8>
341896ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341896ce:	d829      	bhi.n	34189724 <RCCEx_GetETH1PTPCLKFreq+0xcc>
341896d0:	2b00      	cmp	r3, #0
341896d2:	d003      	beq.n	341896dc <RCCEx_GetETH1PTPCLKFreq+0x84>
341896d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341896d8:	d009      	beq.n	341896ee <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341896da:	e023      	b.n	34189724 <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341896dc:	f7ff f8ac 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
341896e0:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
341896e2:	68fa      	ldr	r2, [r7, #12]
341896e4:	68bb      	ldr	r3, [r7, #8]
341896e6:	fbb2 f3f3 	udiv	r3, r2, r3
341896ea:	60fb      	str	r3, [r7, #12]
            break;
341896ec:	e01b      	b.n	34189726 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341896ee:	f7ff f8e9 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
341896f2:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
341896f4:	68fa      	ldr	r2, [r7, #12]
341896f6:	68bb      	ldr	r3, [r7, #8]
341896f8:	fbb2 f3f3 	udiv	r3, r2, r3
341896fc:	60fb      	str	r3, [r7, #12]
            break;
341896fe:	e012      	b.n	34189726 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189700:	f7ff f926 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34189704:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34189706:	68fa      	ldr	r2, [r7, #12]
34189708:	68bb      	ldr	r3, [r7, #8]
3418970a:	fbb2 f3f3 	udiv	r3, r2, r3
3418970e:	60fb      	str	r3, [r7, #12]
            break;
34189710:	e009      	b.n	34189726 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189712:	f7ff f963 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34189716:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34189718:	68fa      	ldr	r2, [r7, #12]
3418971a:	68bb      	ldr	r3, [r7, #8]
3418971c:	fbb2 f3f3 	udiv	r3, r2, r3
34189720:	60fb      	str	r3, [r7, #12]
            break;
34189722:	e000      	b.n	34189726 <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
34189724:	bf00      	nop
        }
      }
      break;
34189726:	e009      	b.n	3418973c <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34189728:	f7fa fdfc 	bl	34184324 <LL_RCC_HSE_IsReady>
3418972c:	4603      	mov	r3, r0
3418972e:	2b00      	cmp	r3, #0
34189730:	d006      	beq.n	34189740 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
34189732:	4b0a      	ldr	r3, [pc, #40]	@ (3418975c <RCCEx_GetETH1PTPCLKFreq+0x104>)
34189734:	60fb      	str	r3, [r7, #12]
      }
      break;
34189736:	e003      	b.n	34189740 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
34189738:	bf00      	nop
3418973a:	e002      	b.n	34189742 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
3418973c:	bf00      	nop
3418973e:	e000      	b.n	34189742 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34189740:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34189742:	f7fa ff4d 	bl	341845e0 <LL_RCC_GetETH1PTPDivider>
34189746:	4603      	mov	r3, r0
34189748:	091b      	lsrs	r3, r3, #4
3418974a:	3301      	adds	r3, #1
3418974c:	68fa      	ldr	r2, [r7, #12]
3418974e:	fbb2 f3f3 	udiv	r3, r2, r3
}
34189752:	4618      	mov	r0, r3
34189754:	3710      	adds	r7, #16
34189756:	46bd      	mov	sp, r7
34189758:	bd80      	pop	{r7, pc}
3418975a:	bf00      	nop
3418975c:	02dc6c00 	.word	0x02dc6c00

34189760 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
34189760:	b580      	push	{r7, lr}
34189762:	b084      	sub	sp, #16
34189764:	af00      	add	r7, sp, #0
34189766:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
34189768:	2300      	movs	r3, #0
3418976a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
3418976c:	6878      	ldr	r0, [r7, #4]
3418976e:	f7fb f90d 	bl	3418498c <LL_RCC_GetFDCANClockSource>
34189772:	4603      	mov	r3, r0
34189774:	2b03      	cmp	r3, #3
34189776:	d867      	bhi.n	34189848 <RCCEx_GetFDCANCLKFreq+0xe8>
34189778:	a201      	add	r2, pc, #4	@ (adr r2, 34189780 <RCCEx_GetFDCANCLKFreq+0x20>)
3418977a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418977e:	bf00      	nop
34189780:	34189791 	.word	0x34189791
34189784:	341897a9 	.word	0x341897a9
34189788:	341897b3 	.word	0x341897b3
3418978c:	34189839 	.word	0x34189839
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189790:	f7fa f9c6 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
34189794:	4603      	mov	r3, r0
34189796:	4618      	mov	r0, r3
34189798:	f7ff f966 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418979c:	4603      	mov	r3, r0
3418979e:	4618      	mov	r0, r3
341897a0:	f7ff f973 	bl	34188a8a <RCCEx_GetPCLK1Freq>
341897a4:	60f8      	str	r0, [r7, #12]
      break;
341897a6:	e054      	b.n	34189852 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341897a8:	2007      	movs	r0, #7
341897aa:	f7ff fc49 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
341897ae:	60f8      	str	r0, [r7, #12]
      break;
341897b0:	e04f      	b.n	34189852 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
341897b2:	f7fc f82d 	bl	34185810 <LL_RCC_IC19_IsEnabled>
341897b6:	4603      	mov	r3, r0
341897b8:	2b00      	cmp	r3, #0
341897ba:	d047      	beq.n	3418984c <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
341897bc:	f7fc f84a 	bl	34185854 <LL_RCC_IC19_GetDivider>
341897c0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
341897c2:	f7fc f839 	bl	34185838 <LL_RCC_IC19_GetSource>
341897c6:	4603      	mov	r3, r0
341897c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341897cc:	d029      	beq.n	34189822 <RCCEx_GetFDCANCLKFreq+0xc2>
341897ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341897d2:	d82f      	bhi.n	34189834 <RCCEx_GetFDCANCLKFreq+0xd4>
341897d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341897d8:	d01a      	beq.n	34189810 <RCCEx_GetFDCANCLKFreq+0xb0>
341897da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341897de:	d829      	bhi.n	34189834 <RCCEx_GetFDCANCLKFreq+0xd4>
341897e0:	2b00      	cmp	r3, #0
341897e2:	d003      	beq.n	341897ec <RCCEx_GetFDCANCLKFreq+0x8c>
341897e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341897e8:	d009      	beq.n	341897fe <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341897ea:	e023      	b.n	34189834 <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341897ec:	f7ff f824 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
341897f0:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
341897f2:	68fa      	ldr	r2, [r7, #12]
341897f4:	68bb      	ldr	r3, [r7, #8]
341897f6:	fbb2 f3f3 	udiv	r3, r2, r3
341897fa:	60fb      	str	r3, [r7, #12]
            break;
341897fc:	e01b      	b.n	34189836 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341897fe:	f7ff f861 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34189802:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34189804:	68fa      	ldr	r2, [r7, #12]
34189806:	68bb      	ldr	r3, [r7, #8]
34189808:	fbb2 f3f3 	udiv	r3, r2, r3
3418980c:	60fb      	str	r3, [r7, #12]
            break;
3418980e:	e012      	b.n	34189836 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189810:	f7ff f89e 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34189814:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34189816:	68fa      	ldr	r2, [r7, #12]
34189818:	68bb      	ldr	r3, [r7, #8]
3418981a:	fbb2 f3f3 	udiv	r3, r2, r3
3418981e:	60fb      	str	r3, [r7, #12]
            break;
34189820:	e009      	b.n	34189836 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189822:	f7ff f8db 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34189826:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34189828:	68fa      	ldr	r2, [r7, #12]
3418982a:	68bb      	ldr	r3, [r7, #8]
3418982c:	fbb2 f3f3 	udiv	r3, r2, r3
34189830:	60fb      	str	r3, [r7, #12]
            break;
34189832:	e000      	b.n	34189836 <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
34189834:	bf00      	nop
        }
      }
      break;
34189836:	e009      	b.n	3418984c <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34189838:	f7fa fd74 	bl	34184324 <LL_RCC_HSE_IsReady>
3418983c:	4603      	mov	r3, r0
3418983e:	2b00      	cmp	r3, #0
34189840:	d006      	beq.n	34189850 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
34189842:	4b06      	ldr	r3, [pc, #24]	@ (3418985c <RCCEx_GetFDCANCLKFreq+0xfc>)
34189844:	60fb      	str	r3, [r7, #12]
      }
      break;
34189846:	e003      	b.n	34189850 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
34189848:	bf00      	nop
3418984a:	e002      	b.n	34189852 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
3418984c:	bf00      	nop
3418984e:	e000      	b.n	34189852 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34189850:	bf00      	nop
  }

  return fdcan_frequency;
34189852:	68fb      	ldr	r3, [r7, #12]
}
34189854:	4618      	mov	r0, r3
34189856:	3710      	adds	r7, #16
34189858:	46bd      	mov	sp, r7
3418985a:	bd80      	pop	{r7, pc}
3418985c:	02dc6c00 	.word	0x02dc6c00

34189860 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
34189860:	b580      	push	{r7, lr}
34189862:	b084      	sub	sp, #16
34189864:	af00      	add	r7, sp, #0
34189866:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34189868:	2300      	movs	r3, #0
3418986a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
3418986c:	6878      	ldr	r0, [r7, #4]
3418986e:	f7fb f89f 	bl	341849b0 <LL_RCC_GetFMCClockSource>
34189872:	4603      	mov	r3, r0
34189874:	2b30      	cmp	r3, #48	@ 0x30
34189876:	d05d      	beq.n	34189934 <RCCEx_GetFMCCLKFreq+0xd4>
34189878:	2b30      	cmp	r3, #48	@ 0x30
3418987a:	f200 809e 	bhi.w	341899ba <RCCEx_GetFMCCLKFreq+0x15a>
3418987e:	2b20      	cmp	r3, #32
34189880:	d014      	beq.n	341898ac <RCCEx_GetFMCCLKFreq+0x4c>
34189882:	2b20      	cmp	r3, #32
34189884:	f200 8099 	bhi.w	341899ba <RCCEx_GetFMCCLKFreq+0x15a>
34189888:	2b00      	cmp	r3, #0
3418988a:	d002      	beq.n	34189892 <RCCEx_GetFMCCLKFreq+0x32>
3418988c:	2b10      	cmp	r3, #16
3418988e:	d008      	beq.n	341898a2 <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189890:	e093      	b.n	341899ba <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189892:	f7fa f945 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
34189896:	4603      	mov	r3, r0
34189898:	4618      	mov	r0, r3
3418989a:	f7ff f8e5 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418989e:	60f8      	str	r0, [r7, #12]
      break;
341898a0:	e090      	b.n	341899c4 <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341898a2:	2007      	movs	r0, #7
341898a4:	f7ff fbcc 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
341898a8:	60f8      	str	r0, [r7, #12]
      break;
341898aa:	e08b      	b.n	341899c4 <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
341898ac:	f7fb fc30 	bl	34185110 <LL_RCC_IC3_IsEnabled>
341898b0:	4603      	mov	r3, r0
341898b2:	2b00      	cmp	r3, #0
341898b4:	f000 8083 	beq.w	341899be <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
341898b8:	f7fb fc4c 	bl	34185154 <LL_RCC_IC3_GetDivider>
341898bc:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
341898be:	f7fb fc3b 	bl	34185138 <LL_RCC_IC3_GetSource>
341898c2:	4603      	mov	r3, r0
341898c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341898c8:	d029      	beq.n	3418991e <RCCEx_GetFMCCLKFreq+0xbe>
341898ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341898ce:	d82f      	bhi.n	34189930 <RCCEx_GetFMCCLKFreq+0xd0>
341898d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341898d4:	d01a      	beq.n	3418990c <RCCEx_GetFMCCLKFreq+0xac>
341898d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341898da:	d829      	bhi.n	34189930 <RCCEx_GetFMCCLKFreq+0xd0>
341898dc:	2b00      	cmp	r3, #0
341898de:	d003      	beq.n	341898e8 <RCCEx_GetFMCCLKFreq+0x88>
341898e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341898e4:	d009      	beq.n	341898fa <RCCEx_GetFMCCLKFreq+0x9a>
            break;
341898e6:	e023      	b.n	34189930 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341898e8:	f7fe ffa6 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
341898ec:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
341898ee:	68fa      	ldr	r2, [r7, #12]
341898f0:	68bb      	ldr	r3, [r7, #8]
341898f2:	fbb2 f3f3 	udiv	r3, r2, r3
341898f6:	60fb      	str	r3, [r7, #12]
            break;
341898f8:	e01b      	b.n	34189932 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341898fa:	f7fe ffe3 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
341898fe:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34189900:	68fa      	ldr	r2, [r7, #12]
34189902:	68bb      	ldr	r3, [r7, #8]
34189904:	fbb2 f3f3 	udiv	r3, r2, r3
34189908:	60fb      	str	r3, [r7, #12]
            break;
3418990a:	e012      	b.n	34189932 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418990c:	f7ff f820 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34189910:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34189912:	68fa      	ldr	r2, [r7, #12]
34189914:	68bb      	ldr	r3, [r7, #8]
34189916:	fbb2 f3f3 	udiv	r3, r2, r3
3418991a:	60fb      	str	r3, [r7, #12]
            break;
3418991c:	e009      	b.n	34189932 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418991e:	f7ff f85d 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34189922:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34189924:	68fa      	ldr	r2, [r7, #12]
34189926:	68bb      	ldr	r3, [r7, #8]
34189928:	fbb2 f3f3 	udiv	r3, r2, r3
3418992c:	60fb      	str	r3, [r7, #12]
            break;
3418992e:	e000      	b.n	34189932 <RCCEx_GetFMCCLKFreq+0xd2>
            break;
34189930:	bf00      	nop
      break;
34189932:	e044      	b.n	341899be <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
34189934:	f7fb fc2c 	bl	34185190 <LL_RCC_IC4_IsEnabled>
34189938:	4603      	mov	r3, r0
3418993a:	2b00      	cmp	r3, #0
3418993c:	d041      	beq.n	341899c2 <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
3418993e:	f7fb fc49 	bl	341851d4 <LL_RCC_IC4_GetDivider>
34189942:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34189944:	f7fb fc38 	bl	341851b8 <LL_RCC_IC4_GetSource>
34189948:	4603      	mov	r3, r0
3418994a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418994e:	d029      	beq.n	341899a4 <RCCEx_GetFMCCLKFreq+0x144>
34189950:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189954:	d82f      	bhi.n	341899b6 <RCCEx_GetFMCCLKFreq+0x156>
34189956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418995a:	d01a      	beq.n	34189992 <RCCEx_GetFMCCLKFreq+0x132>
3418995c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189960:	d829      	bhi.n	341899b6 <RCCEx_GetFMCCLKFreq+0x156>
34189962:	2b00      	cmp	r3, #0
34189964:	d003      	beq.n	3418996e <RCCEx_GetFMCCLKFreq+0x10e>
34189966:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418996a:	d009      	beq.n	34189980 <RCCEx_GetFMCCLKFreq+0x120>
            break;
3418996c:	e023      	b.n	341899b6 <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418996e:	f7fe ff63 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34189972:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34189974:	68fa      	ldr	r2, [r7, #12]
34189976:	68bb      	ldr	r3, [r7, #8]
34189978:	fbb2 f3f3 	udiv	r3, r2, r3
3418997c:	60fb      	str	r3, [r7, #12]
            break;
3418997e:	e01b      	b.n	341899b8 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189980:	f7fe ffa0 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34189984:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34189986:	68fa      	ldr	r2, [r7, #12]
34189988:	68bb      	ldr	r3, [r7, #8]
3418998a:	fbb2 f3f3 	udiv	r3, r2, r3
3418998e:	60fb      	str	r3, [r7, #12]
            break;
34189990:	e012      	b.n	341899b8 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189992:	f7fe ffdd 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34189996:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34189998:	68fa      	ldr	r2, [r7, #12]
3418999a:	68bb      	ldr	r3, [r7, #8]
3418999c:	fbb2 f3f3 	udiv	r3, r2, r3
341899a0:	60fb      	str	r3, [r7, #12]
            break;
341899a2:	e009      	b.n	341899b8 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341899a4:	f7ff f81a 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
341899a8:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
341899aa:	68fa      	ldr	r2, [r7, #12]
341899ac:	68bb      	ldr	r3, [r7, #8]
341899ae:	fbb2 f3f3 	udiv	r3, r2, r3
341899b2:	60fb      	str	r3, [r7, #12]
            break;
341899b4:	e000      	b.n	341899b8 <RCCEx_GetFMCCLKFreq+0x158>
            break;
341899b6:	bf00      	nop
      break;
341899b8:	e003      	b.n	341899c2 <RCCEx_GetFMCCLKFreq+0x162>
      break;
341899ba:	bf00      	nop
341899bc:	e002      	b.n	341899c4 <RCCEx_GetFMCCLKFreq+0x164>
      break;
341899be:	bf00      	nop
341899c0:	e000      	b.n	341899c4 <RCCEx_GetFMCCLKFreq+0x164>
      break;
341899c2:	bf00      	nop
  }

  return fmc_frequency;
341899c4:	68fb      	ldr	r3, [r7, #12]
}
341899c6:	4618      	mov	r0, r3
341899c8:	3710      	adds	r7, #16
341899ca:	46bd      	mov	sp, r7
341899cc:	bd80      	pop	{r7, pc}
	...

341899d0 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
341899d0:	b580      	push	{r7, lr}
341899d2:	b084      	sub	sp, #16
341899d4:	af00      	add	r7, sp, #0
341899d6:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
341899d8:	2300      	movs	r3, #0
341899da:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
341899dc:	6878      	ldr	r0, [r7, #4]
341899de:	f7fa fff9 	bl	341849d4 <LL_RCC_GetI2CClockSource>
341899e2:	4603      	mov	r3, r0
341899e4:	4aa2      	ldr	r2, [pc, #648]	@ (34189c70 <RCCEx_GetI2CCLKFreq+0x2a0>)
341899e6:	4293      	cmp	r3, r2
341899e8:	f000 8172 	beq.w	34189cd0 <RCCEx_GetI2CCLKFreq+0x300>
341899ec:	4aa0      	ldr	r2, [pc, #640]	@ (34189c70 <RCCEx_GetI2CCLKFreq+0x2a0>)
341899ee:	4293      	cmp	r3, r2
341899f0:	f200 8184 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
341899f4:	4a9f      	ldr	r2, [pc, #636]	@ (34189c74 <RCCEx_GetI2CCLKFreq+0x2a4>)
341899f6:	4293      	cmp	r3, r2
341899f8:	f000 816a 	beq.w	34189cd0 <RCCEx_GetI2CCLKFreq+0x300>
341899fc:	4a9d      	ldr	r2, [pc, #628]	@ (34189c74 <RCCEx_GetI2CCLKFreq+0x2a4>)
341899fe:	4293      	cmp	r3, r2
34189a00:	f200 817c 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189a04:	4a9c      	ldr	r2, [pc, #624]	@ (34189c78 <RCCEx_GetI2CCLKFreq+0x2a8>)
34189a06:	4293      	cmp	r3, r2
34189a08:	f000 8162 	beq.w	34189cd0 <RCCEx_GetI2CCLKFreq+0x300>
34189a0c:	4a9a      	ldr	r2, [pc, #616]	@ (34189c78 <RCCEx_GetI2CCLKFreq+0x2a8>)
34189a0e:	4293      	cmp	r3, r2
34189a10:	f200 8174 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189a14:	4a99      	ldr	r2, [pc, #612]	@ (34189c7c <RCCEx_GetI2CCLKFreq+0x2ac>)
34189a16:	4293      	cmp	r3, r2
34189a18:	f000 815a 	beq.w	34189cd0 <RCCEx_GetI2CCLKFreq+0x300>
34189a1c:	4a97      	ldr	r2, [pc, #604]	@ (34189c7c <RCCEx_GetI2CCLKFreq+0x2ac>)
34189a1e:	4293      	cmp	r3, r2
34189a20:	f200 816c 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189a24:	4a96      	ldr	r2, [pc, #600]	@ (34189c80 <RCCEx_GetI2CCLKFreq+0x2b0>)
34189a26:	4293      	cmp	r3, r2
34189a28:	f000 8160 	beq.w	34189cec <RCCEx_GetI2CCLKFreq+0x31c>
34189a2c:	4a94      	ldr	r2, [pc, #592]	@ (34189c80 <RCCEx_GetI2CCLKFreq+0x2b0>)
34189a2e:	4293      	cmp	r3, r2
34189a30:	f200 8164 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189a34:	4a93      	ldr	r2, [pc, #588]	@ (34189c84 <RCCEx_GetI2CCLKFreq+0x2b4>)
34189a36:	4293      	cmp	r3, r2
34189a38:	f000 8158 	beq.w	34189cec <RCCEx_GetI2CCLKFreq+0x31c>
34189a3c:	4a91      	ldr	r2, [pc, #580]	@ (34189c84 <RCCEx_GetI2CCLKFreq+0x2b4>)
34189a3e:	4293      	cmp	r3, r2
34189a40:	f200 815c 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189a44:	4a90      	ldr	r2, [pc, #576]	@ (34189c88 <RCCEx_GetI2CCLKFreq+0x2b8>)
34189a46:	4293      	cmp	r3, r2
34189a48:	f000 8150 	beq.w	34189cec <RCCEx_GetI2CCLKFreq+0x31c>
34189a4c:	4a8e      	ldr	r2, [pc, #568]	@ (34189c88 <RCCEx_GetI2CCLKFreq+0x2b8>)
34189a4e:	4293      	cmp	r3, r2
34189a50:	f200 8154 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189a54:	4a8d      	ldr	r2, [pc, #564]	@ (34189c8c <RCCEx_GetI2CCLKFreq+0x2bc>)
34189a56:	4293      	cmp	r3, r2
34189a58:	f000 8148 	beq.w	34189cec <RCCEx_GetI2CCLKFreq+0x31c>
34189a5c:	4a8b      	ldr	r2, [pc, #556]	@ (34189c8c <RCCEx_GetI2CCLKFreq+0x2bc>)
34189a5e:	4293      	cmp	r3, r2
34189a60:	f200 814c 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189a64:	4a8a      	ldr	r2, [pc, #552]	@ (34189c90 <RCCEx_GetI2CCLKFreq+0x2c0>)
34189a66:	4293      	cmp	r3, r2
34189a68:	f000 80be 	beq.w	34189be8 <RCCEx_GetI2CCLKFreq+0x218>
34189a6c:	4a88      	ldr	r2, [pc, #544]	@ (34189c90 <RCCEx_GetI2CCLKFreq+0x2c0>)
34189a6e:	4293      	cmp	r3, r2
34189a70:	f200 8144 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189a74:	4a87      	ldr	r2, [pc, #540]	@ (34189c94 <RCCEx_GetI2CCLKFreq+0x2c4>)
34189a76:	4293      	cmp	r3, r2
34189a78:	f000 80b6 	beq.w	34189be8 <RCCEx_GetI2CCLKFreq+0x218>
34189a7c:	4a85      	ldr	r2, [pc, #532]	@ (34189c94 <RCCEx_GetI2CCLKFreq+0x2c4>)
34189a7e:	4293      	cmp	r3, r2
34189a80:	f200 813c 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189a84:	4a84      	ldr	r2, [pc, #528]	@ (34189c98 <RCCEx_GetI2CCLKFreq+0x2c8>)
34189a86:	4293      	cmp	r3, r2
34189a88:	f000 80ae 	beq.w	34189be8 <RCCEx_GetI2CCLKFreq+0x218>
34189a8c:	4a82      	ldr	r2, [pc, #520]	@ (34189c98 <RCCEx_GetI2CCLKFreq+0x2c8>)
34189a8e:	4293      	cmp	r3, r2
34189a90:	f200 8134 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189a94:	4a81      	ldr	r2, [pc, #516]	@ (34189c9c <RCCEx_GetI2CCLKFreq+0x2cc>)
34189a96:	4293      	cmp	r3, r2
34189a98:	f000 80a6 	beq.w	34189be8 <RCCEx_GetI2CCLKFreq+0x218>
34189a9c:	4a7f      	ldr	r2, [pc, #508]	@ (34189c9c <RCCEx_GetI2CCLKFreq+0x2cc>)
34189a9e:	4293      	cmp	r3, r2
34189aa0:	f200 812c 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189aa4:	4a7e      	ldr	r2, [pc, #504]	@ (34189ca0 <RCCEx_GetI2CCLKFreq+0x2d0>)
34189aa6:	4293      	cmp	r3, r2
34189aa8:	d05a      	beq.n	34189b60 <RCCEx_GetI2CCLKFreq+0x190>
34189aaa:	4a7d      	ldr	r2, [pc, #500]	@ (34189ca0 <RCCEx_GetI2CCLKFreq+0x2d0>)
34189aac:	4293      	cmp	r3, r2
34189aae:	f200 8125 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189ab2:	4a7c      	ldr	r2, [pc, #496]	@ (34189ca4 <RCCEx_GetI2CCLKFreq+0x2d4>)
34189ab4:	4293      	cmp	r3, r2
34189ab6:	d053      	beq.n	34189b60 <RCCEx_GetI2CCLKFreq+0x190>
34189ab8:	4a7a      	ldr	r2, [pc, #488]	@ (34189ca4 <RCCEx_GetI2CCLKFreq+0x2d4>)
34189aba:	4293      	cmp	r3, r2
34189abc:	f200 811e 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189ac0:	4a79      	ldr	r2, [pc, #484]	@ (34189ca8 <RCCEx_GetI2CCLKFreq+0x2d8>)
34189ac2:	4293      	cmp	r3, r2
34189ac4:	d04c      	beq.n	34189b60 <RCCEx_GetI2CCLKFreq+0x190>
34189ac6:	4a78      	ldr	r2, [pc, #480]	@ (34189ca8 <RCCEx_GetI2CCLKFreq+0x2d8>)
34189ac8:	4293      	cmp	r3, r2
34189aca:	f200 8117 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189ace:	4a77      	ldr	r2, [pc, #476]	@ (34189cac <RCCEx_GetI2CCLKFreq+0x2dc>)
34189ad0:	4293      	cmp	r3, r2
34189ad2:	d045      	beq.n	34189b60 <RCCEx_GetI2CCLKFreq+0x190>
34189ad4:	4a75      	ldr	r2, [pc, #468]	@ (34189cac <RCCEx_GetI2CCLKFreq+0x2dc>)
34189ad6:	4293      	cmp	r3, r2
34189ad8:	f200 8110 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189adc:	4a74      	ldr	r2, [pc, #464]	@ (34189cb0 <RCCEx_GetI2CCLKFreq+0x2e0>)
34189ade:	4293      	cmp	r3, r2
34189ae0:	d039      	beq.n	34189b56 <RCCEx_GetI2CCLKFreq+0x186>
34189ae2:	4a73      	ldr	r2, [pc, #460]	@ (34189cb0 <RCCEx_GetI2CCLKFreq+0x2e0>)
34189ae4:	4293      	cmp	r3, r2
34189ae6:	f200 8109 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189aea:	4a72      	ldr	r2, [pc, #456]	@ (34189cb4 <RCCEx_GetI2CCLKFreq+0x2e4>)
34189aec:	4293      	cmp	r3, r2
34189aee:	d032      	beq.n	34189b56 <RCCEx_GetI2CCLKFreq+0x186>
34189af0:	4a70      	ldr	r2, [pc, #448]	@ (34189cb4 <RCCEx_GetI2CCLKFreq+0x2e4>)
34189af2:	4293      	cmp	r3, r2
34189af4:	f200 8102 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189af8:	4a6f      	ldr	r2, [pc, #444]	@ (34189cb8 <RCCEx_GetI2CCLKFreq+0x2e8>)
34189afa:	4293      	cmp	r3, r2
34189afc:	d02b      	beq.n	34189b56 <RCCEx_GetI2CCLKFreq+0x186>
34189afe:	4a6e      	ldr	r2, [pc, #440]	@ (34189cb8 <RCCEx_GetI2CCLKFreq+0x2e8>)
34189b00:	4293      	cmp	r3, r2
34189b02:	f200 80fb 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189b06:	4a6d      	ldr	r2, [pc, #436]	@ (34189cbc <RCCEx_GetI2CCLKFreq+0x2ec>)
34189b08:	4293      	cmp	r3, r2
34189b0a:	d024      	beq.n	34189b56 <RCCEx_GetI2CCLKFreq+0x186>
34189b0c:	4a6b      	ldr	r2, [pc, #428]	@ (34189cbc <RCCEx_GetI2CCLKFreq+0x2ec>)
34189b0e:	4293      	cmp	r3, r2
34189b10:	f200 80f4 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189b14:	4a6a      	ldr	r2, [pc, #424]	@ (34189cc0 <RCCEx_GetI2CCLKFreq+0x2f0>)
34189b16:	4293      	cmp	r3, r2
34189b18:	d011      	beq.n	34189b3e <RCCEx_GetI2CCLKFreq+0x16e>
34189b1a:	4a69      	ldr	r2, [pc, #420]	@ (34189cc0 <RCCEx_GetI2CCLKFreq+0x2f0>)
34189b1c:	4293      	cmp	r3, r2
34189b1e:	f200 80ed 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189b22:	4a68      	ldr	r2, [pc, #416]	@ (34189cc4 <RCCEx_GetI2CCLKFreq+0x2f4>)
34189b24:	4293      	cmp	r3, r2
34189b26:	d00a      	beq.n	34189b3e <RCCEx_GetI2CCLKFreq+0x16e>
34189b28:	4a66      	ldr	r2, [pc, #408]	@ (34189cc4 <RCCEx_GetI2CCLKFreq+0x2f4>)
34189b2a:	4293      	cmp	r3, r2
34189b2c:	f200 80e6 	bhi.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
34189b30:	4a65      	ldr	r2, [pc, #404]	@ (34189cc8 <RCCEx_GetI2CCLKFreq+0x2f8>)
34189b32:	4293      	cmp	r3, r2
34189b34:	d003      	beq.n	34189b3e <RCCEx_GetI2CCLKFreq+0x16e>
34189b36:	4a65      	ldr	r2, [pc, #404]	@ (34189ccc <RCCEx_GetI2CCLKFreq+0x2fc>)
34189b38:	4293      	cmp	r3, r2
34189b3a:	f040 80df 	bne.w	34189cfc <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189b3e:	f7f9 ffef 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
34189b42:	4603      	mov	r3, r0
34189b44:	4618      	mov	r0, r3
34189b46:	f7fe ff8f 	bl	34188a68 <RCCEx_GetHCLKFreq>
34189b4a:	4603      	mov	r3, r0
34189b4c:	4618      	mov	r0, r3
34189b4e:	f7fe ff9c 	bl	34188a8a <RCCEx_GetPCLK1Freq>
34189b52:	60f8      	str	r0, [r7, #12]
      break;
34189b54:	e0db      	b.n	34189d0e <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189b56:	2007      	movs	r0, #7
34189b58:	f7ff fa72 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
34189b5c:	60f8      	str	r0, [r7, #12]
      break;
34189b5e:	e0d6      	b.n	34189d0e <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34189b60:	f7fb fc56 	bl	34185410 <LL_RCC_IC10_IsEnabled>
34189b64:	4603      	mov	r3, r0
34189b66:	2b00      	cmp	r3, #0
34189b68:	f000 80ca 	beq.w	34189d00 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34189b6c:	f7fb fc72 	bl	34185454 <LL_RCC_IC10_GetDivider>
34189b70:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34189b72:	f7fb fc61 	bl	34185438 <LL_RCC_IC10_GetSource>
34189b76:	4603      	mov	r3, r0
34189b78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189b7c:	d029      	beq.n	34189bd2 <RCCEx_GetI2CCLKFreq+0x202>
34189b7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189b82:	d82f      	bhi.n	34189be4 <RCCEx_GetI2CCLKFreq+0x214>
34189b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189b88:	d01a      	beq.n	34189bc0 <RCCEx_GetI2CCLKFreq+0x1f0>
34189b8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189b8e:	d829      	bhi.n	34189be4 <RCCEx_GetI2CCLKFreq+0x214>
34189b90:	2b00      	cmp	r3, #0
34189b92:	d003      	beq.n	34189b9c <RCCEx_GetI2CCLKFreq+0x1cc>
34189b94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189b98:	d009      	beq.n	34189bae <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189b9a:	e023      	b.n	34189be4 <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189b9c:	f7fe fe4c 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34189ba0:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189ba2:	68fa      	ldr	r2, [r7, #12]
34189ba4:	68bb      	ldr	r3, [r7, #8]
34189ba6:	fbb2 f3f3 	udiv	r3, r2, r3
34189baa:	60fb      	str	r3, [r7, #12]
            break;
34189bac:	e01b      	b.n	34189be6 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189bae:	f7fe fe89 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34189bb2:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189bb4:	68fa      	ldr	r2, [r7, #12]
34189bb6:	68bb      	ldr	r3, [r7, #8]
34189bb8:	fbb2 f3f3 	udiv	r3, r2, r3
34189bbc:	60fb      	str	r3, [r7, #12]
            break;
34189bbe:	e012      	b.n	34189be6 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189bc0:	f7fe fec6 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34189bc4:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189bc6:	68fa      	ldr	r2, [r7, #12]
34189bc8:	68bb      	ldr	r3, [r7, #8]
34189bca:	fbb2 f3f3 	udiv	r3, r2, r3
34189bce:	60fb      	str	r3, [r7, #12]
            break;
34189bd0:	e009      	b.n	34189be6 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189bd2:	f7fe ff03 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34189bd6:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189bd8:	68fa      	ldr	r2, [r7, #12]
34189bda:	68bb      	ldr	r3, [r7, #8]
34189bdc:	fbb2 f3f3 	udiv	r3, r2, r3
34189be0:	60fb      	str	r3, [r7, #12]
            break;
34189be2:	e000      	b.n	34189be6 <RCCEx_GetI2CCLKFreq+0x216>
            break;
34189be4:	bf00      	nop
        }
      }
      break;
34189be6:	e08b      	b.n	34189d00 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34189be8:	f7fb fd12 	bl	34185610 <LL_RCC_IC15_IsEnabled>
34189bec:	4603      	mov	r3, r0
34189bee:	2b00      	cmp	r3, #0
34189bf0:	f000 8088 	beq.w	34189d04 <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34189bf4:	f7fb fd2e 	bl	34185654 <LL_RCC_IC15_GetDivider>
34189bf8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34189bfa:	f7fb fd1d 	bl	34185638 <LL_RCC_IC15_GetSource>
34189bfe:	4603      	mov	r3, r0
34189c00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189c04:	d029      	beq.n	34189c5a <RCCEx_GetI2CCLKFreq+0x28a>
34189c06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189c0a:	d82f      	bhi.n	34189c6c <RCCEx_GetI2CCLKFreq+0x29c>
34189c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189c10:	d01a      	beq.n	34189c48 <RCCEx_GetI2CCLKFreq+0x278>
34189c12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189c16:	d829      	bhi.n	34189c6c <RCCEx_GetI2CCLKFreq+0x29c>
34189c18:	2b00      	cmp	r3, #0
34189c1a:	d003      	beq.n	34189c24 <RCCEx_GetI2CCLKFreq+0x254>
34189c1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189c20:	d009      	beq.n	34189c36 <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189c22:	e023      	b.n	34189c6c <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189c24:	f7fe fe08 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34189c28:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189c2a:	68fa      	ldr	r2, [r7, #12]
34189c2c:	68bb      	ldr	r3, [r7, #8]
34189c2e:	fbb2 f3f3 	udiv	r3, r2, r3
34189c32:	60fb      	str	r3, [r7, #12]
            break;
34189c34:	e01b      	b.n	34189c6e <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189c36:	f7fe fe45 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34189c3a:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189c3c:	68fa      	ldr	r2, [r7, #12]
34189c3e:	68bb      	ldr	r3, [r7, #8]
34189c40:	fbb2 f3f3 	udiv	r3, r2, r3
34189c44:	60fb      	str	r3, [r7, #12]
            break;
34189c46:	e012      	b.n	34189c6e <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189c48:	f7fe fe82 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34189c4c:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189c4e:	68fa      	ldr	r2, [r7, #12]
34189c50:	68bb      	ldr	r3, [r7, #8]
34189c52:	fbb2 f3f3 	udiv	r3, r2, r3
34189c56:	60fb      	str	r3, [r7, #12]
            break;
34189c58:	e009      	b.n	34189c6e <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189c5a:	f7fe febf 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34189c5e:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189c60:	68fa      	ldr	r2, [r7, #12]
34189c62:	68bb      	ldr	r3, [r7, #8]
34189c64:	fbb2 f3f3 	udiv	r3, r2, r3
34189c68:	60fb      	str	r3, [r7, #12]
            break;
34189c6a:	e000      	b.n	34189c6e <RCCEx_GetI2CCLKFreq+0x29e>
            break;
34189c6c:	bf00      	nop
        }
      }
      break;
34189c6e:	e049      	b.n	34189d04 <RCCEx_GetI2CCLKFreq+0x334>
34189c70:	07050c0c 	.word	0x07050c0c
34189c74:	0705080c 	.word	0x0705080c
34189c78:	0705040c 	.word	0x0705040c
34189c7c:	0705000c 	.word	0x0705000c
34189c80:	07040c0c 	.word	0x07040c0c
34189c84:	0704080c 	.word	0x0704080c
34189c88:	0704040c 	.word	0x0704040c
34189c8c:	0704000c 	.word	0x0704000c
34189c90:	07030c0c 	.word	0x07030c0c
34189c94:	0703080c 	.word	0x0703080c
34189c98:	0703040c 	.word	0x0703040c
34189c9c:	0703000c 	.word	0x0703000c
34189ca0:	07020c0c 	.word	0x07020c0c
34189ca4:	0702080c 	.word	0x0702080c
34189ca8:	0702040c 	.word	0x0702040c
34189cac:	0702000c 	.word	0x0702000c
34189cb0:	07010c0c 	.word	0x07010c0c
34189cb4:	0701080c 	.word	0x0701080c
34189cb8:	0701040c 	.word	0x0701040c
34189cbc:	0701000c 	.word	0x0701000c
34189cc0:	07000c0c 	.word	0x07000c0c
34189cc4:	0700080c 	.word	0x0700080c
34189cc8:	0700000c 	.word	0x0700000c
34189ccc:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34189cd0:	f7fa fb3a 	bl	34184348 <LL_RCC_HSI_IsReady>
34189cd4:	4603      	mov	r3, r0
34189cd6:	2b00      	cmp	r3, #0
34189cd8:	d016      	beq.n	34189d08 <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189cda:	f7fa fb47 	bl	3418436c <LL_RCC_HSI_GetDivider>
34189cde:	4603      	mov	r3, r0
34189ce0:	09db      	lsrs	r3, r3, #7
34189ce2:	4a0d      	ldr	r2, [pc, #52]	@ (34189d18 <RCCEx_GetI2CCLKFreq+0x348>)
34189ce4:	fa22 f303 	lsr.w	r3, r2, r3
34189ce8:	60fb      	str	r3, [r7, #12]
      }
      break;
34189cea:	e00d      	b.n	34189d08 <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34189cec:	f7fa fb4c 	bl	34184388 <LL_RCC_MSI_IsReady>
34189cf0:	4603      	mov	r3, r0
34189cf2:	2b00      	cmp	r3, #0
34189cf4:	d00a      	beq.n	34189d0c <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
34189cf6:	4b09      	ldr	r3, [pc, #36]	@ (34189d1c <RCCEx_GetI2CCLKFreq+0x34c>)
34189cf8:	60fb      	str	r3, [r7, #12]
      }
      break;
34189cfa:	e007      	b.n	34189d0c <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
34189cfc:	bf00      	nop
34189cfe:	e006      	b.n	34189d0e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34189d00:	bf00      	nop
34189d02:	e004      	b.n	34189d0e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34189d04:	bf00      	nop
34189d06:	e002      	b.n	34189d0e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34189d08:	bf00      	nop
34189d0a:	e000      	b.n	34189d0e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34189d0c:	bf00      	nop
  }

  return i2c_frequency;
34189d0e:	68fb      	ldr	r3, [r7, #12]
}
34189d10:	4618      	mov	r0, r3
34189d12:	3710      	adds	r7, #16
34189d14:	46bd      	mov	sp, r7
34189d16:	bd80      	pop	{r7, pc}
34189d18:	03d09000 	.word	0x03d09000
34189d1c:	003d0900 	.word	0x003d0900

34189d20 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
34189d20:	b580      	push	{r7, lr}
34189d22:	b084      	sub	sp, #16
34189d24:	af00      	add	r7, sp, #0
34189d26:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
34189d28:	2300      	movs	r3, #0
34189d2a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34189d2c:	6878      	ldr	r0, [r7, #4]
34189d2e:	f7fa fe5d 	bl	341849ec <LL_RCC_GetI3CClockSource>
34189d32:	4603      	mov	r3, r0
34189d34:	4a86      	ldr	r2, [pc, #536]	@ (34189f50 <RCCEx_GetI3CCLKFreq+0x230>)
34189d36:	4293      	cmp	r3, r2
34189d38:	f000 80e6 	beq.w	34189f08 <RCCEx_GetI3CCLKFreq+0x1e8>
34189d3c:	4a84      	ldr	r2, [pc, #528]	@ (34189f50 <RCCEx_GetI3CCLKFreq+0x230>)
34189d3e:	4293      	cmp	r3, r2
34189d40:	f200 80f8 	bhi.w	34189f34 <RCCEx_GetI3CCLKFreq+0x214>
34189d44:	4a83      	ldr	r2, [pc, #524]	@ (34189f54 <RCCEx_GetI3CCLKFreq+0x234>)
34189d46:	4293      	cmp	r3, r2
34189d48:	f000 80de 	beq.w	34189f08 <RCCEx_GetI3CCLKFreq+0x1e8>
34189d4c:	4a81      	ldr	r2, [pc, #516]	@ (34189f54 <RCCEx_GetI3CCLKFreq+0x234>)
34189d4e:	4293      	cmp	r3, r2
34189d50:	f200 80f0 	bhi.w	34189f34 <RCCEx_GetI3CCLKFreq+0x214>
34189d54:	4a80      	ldr	r2, [pc, #512]	@ (34189f58 <RCCEx_GetI3CCLKFreq+0x238>)
34189d56:	4293      	cmp	r3, r2
34189d58:	f000 80e4 	beq.w	34189f24 <RCCEx_GetI3CCLKFreq+0x204>
34189d5c:	4a7e      	ldr	r2, [pc, #504]	@ (34189f58 <RCCEx_GetI3CCLKFreq+0x238>)
34189d5e:	4293      	cmp	r3, r2
34189d60:	f200 80e8 	bhi.w	34189f34 <RCCEx_GetI3CCLKFreq+0x214>
34189d64:	4a7d      	ldr	r2, [pc, #500]	@ (34189f5c <RCCEx_GetI3CCLKFreq+0x23c>)
34189d66:	4293      	cmp	r3, r2
34189d68:	f000 80dc 	beq.w	34189f24 <RCCEx_GetI3CCLKFreq+0x204>
34189d6c:	4a7b      	ldr	r2, [pc, #492]	@ (34189f5c <RCCEx_GetI3CCLKFreq+0x23c>)
34189d6e:	4293      	cmp	r3, r2
34189d70:	f200 80e0 	bhi.w	34189f34 <RCCEx_GetI3CCLKFreq+0x214>
34189d74:	4a7a      	ldr	r2, [pc, #488]	@ (34189f60 <RCCEx_GetI3CCLKFreq+0x240>)
34189d76:	4293      	cmp	r3, r2
34189d78:	f000 8083 	beq.w	34189e82 <RCCEx_GetI3CCLKFreq+0x162>
34189d7c:	4a78      	ldr	r2, [pc, #480]	@ (34189f60 <RCCEx_GetI3CCLKFreq+0x240>)
34189d7e:	4293      	cmp	r3, r2
34189d80:	f200 80d8 	bhi.w	34189f34 <RCCEx_GetI3CCLKFreq+0x214>
34189d84:	4a77      	ldr	r2, [pc, #476]	@ (34189f64 <RCCEx_GetI3CCLKFreq+0x244>)
34189d86:	4293      	cmp	r3, r2
34189d88:	d07b      	beq.n	34189e82 <RCCEx_GetI3CCLKFreq+0x162>
34189d8a:	4a76      	ldr	r2, [pc, #472]	@ (34189f64 <RCCEx_GetI3CCLKFreq+0x244>)
34189d8c:	4293      	cmp	r3, r2
34189d8e:	f200 80d1 	bhi.w	34189f34 <RCCEx_GetI3CCLKFreq+0x214>
34189d92:	4a75      	ldr	r2, [pc, #468]	@ (34189f68 <RCCEx_GetI3CCLKFreq+0x248>)
34189d94:	4293      	cmp	r3, r2
34189d96:	d030      	beq.n	34189dfa <RCCEx_GetI3CCLKFreq+0xda>
34189d98:	4a73      	ldr	r2, [pc, #460]	@ (34189f68 <RCCEx_GetI3CCLKFreq+0x248>)
34189d9a:	4293      	cmp	r3, r2
34189d9c:	f200 80ca 	bhi.w	34189f34 <RCCEx_GetI3CCLKFreq+0x214>
34189da0:	4a72      	ldr	r2, [pc, #456]	@ (34189f6c <RCCEx_GetI3CCLKFreq+0x24c>)
34189da2:	4293      	cmp	r3, r2
34189da4:	d029      	beq.n	34189dfa <RCCEx_GetI3CCLKFreq+0xda>
34189da6:	4a71      	ldr	r2, [pc, #452]	@ (34189f6c <RCCEx_GetI3CCLKFreq+0x24c>)
34189da8:	4293      	cmp	r3, r2
34189daa:	f200 80c3 	bhi.w	34189f34 <RCCEx_GetI3CCLKFreq+0x214>
34189dae:	4a70      	ldr	r2, [pc, #448]	@ (34189f70 <RCCEx_GetI3CCLKFreq+0x250>)
34189db0:	4293      	cmp	r3, r2
34189db2:	d01d      	beq.n	34189df0 <RCCEx_GetI3CCLKFreq+0xd0>
34189db4:	4a6e      	ldr	r2, [pc, #440]	@ (34189f70 <RCCEx_GetI3CCLKFreq+0x250>)
34189db6:	4293      	cmp	r3, r2
34189db8:	f200 80bc 	bhi.w	34189f34 <RCCEx_GetI3CCLKFreq+0x214>
34189dbc:	4a6d      	ldr	r2, [pc, #436]	@ (34189f74 <RCCEx_GetI3CCLKFreq+0x254>)
34189dbe:	4293      	cmp	r3, r2
34189dc0:	d016      	beq.n	34189df0 <RCCEx_GetI3CCLKFreq+0xd0>
34189dc2:	4a6c      	ldr	r2, [pc, #432]	@ (34189f74 <RCCEx_GetI3CCLKFreq+0x254>)
34189dc4:	4293      	cmp	r3, r2
34189dc6:	f200 80b5 	bhi.w	34189f34 <RCCEx_GetI3CCLKFreq+0x214>
34189dca:	4a6b      	ldr	r2, [pc, #428]	@ (34189f78 <RCCEx_GetI3CCLKFreq+0x258>)
34189dcc:	4293      	cmp	r3, r2
34189dce:	d003      	beq.n	34189dd8 <RCCEx_GetI3CCLKFreq+0xb8>
34189dd0:	4a6a      	ldr	r2, [pc, #424]	@ (34189f7c <RCCEx_GetI3CCLKFreq+0x25c>)
34189dd2:	4293      	cmp	r3, r2
34189dd4:	f040 80ae 	bne.w	34189f34 <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189dd8:	f7f9 fea2 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
34189ddc:	4603      	mov	r3, r0
34189dde:	4618      	mov	r0, r3
34189de0:	f7fe fe42 	bl	34188a68 <RCCEx_GetHCLKFreq>
34189de4:	4603      	mov	r3, r0
34189de6:	4618      	mov	r0, r3
34189de8:	f7fe fe4f 	bl	34188a8a <RCCEx_GetPCLK1Freq>
34189dec:	60f8      	str	r0, [r7, #12]
      break;
34189dee:	e0aa      	b.n	34189f46 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189df0:	2007      	movs	r0, #7
34189df2:	f7ff f925 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
34189df6:	60f8      	str	r0, [r7, #12]
      break;
34189df8:	e0a5      	b.n	34189f46 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34189dfa:	f7fb fb09 	bl	34185410 <LL_RCC_IC10_IsEnabled>
34189dfe:	4603      	mov	r3, r0
34189e00:	2b00      	cmp	r3, #0
34189e02:	f000 8099 	beq.w	34189f38 <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34189e06:	f7fb fb25 	bl	34185454 <LL_RCC_IC10_GetDivider>
34189e0a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34189e0c:	f7fb fb14 	bl	34185438 <LL_RCC_IC10_GetSource>
34189e10:	4603      	mov	r3, r0
34189e12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189e16:	d029      	beq.n	34189e6c <RCCEx_GetI3CCLKFreq+0x14c>
34189e18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189e1c:	d82f      	bhi.n	34189e7e <RCCEx_GetI3CCLKFreq+0x15e>
34189e1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189e22:	d01a      	beq.n	34189e5a <RCCEx_GetI3CCLKFreq+0x13a>
34189e24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189e28:	d829      	bhi.n	34189e7e <RCCEx_GetI3CCLKFreq+0x15e>
34189e2a:	2b00      	cmp	r3, #0
34189e2c:	d003      	beq.n	34189e36 <RCCEx_GetI3CCLKFreq+0x116>
34189e2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189e32:	d009      	beq.n	34189e48 <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189e34:	e023      	b.n	34189e7e <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189e36:	f7fe fcff 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34189e3a:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189e3c:	68fa      	ldr	r2, [r7, #12]
34189e3e:	68bb      	ldr	r3, [r7, #8]
34189e40:	fbb2 f3f3 	udiv	r3, r2, r3
34189e44:	60fb      	str	r3, [r7, #12]
            break;
34189e46:	e01b      	b.n	34189e80 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189e48:	f7fe fd3c 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34189e4c:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189e4e:	68fa      	ldr	r2, [r7, #12]
34189e50:	68bb      	ldr	r3, [r7, #8]
34189e52:	fbb2 f3f3 	udiv	r3, r2, r3
34189e56:	60fb      	str	r3, [r7, #12]
            break;
34189e58:	e012      	b.n	34189e80 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189e5a:	f7fe fd79 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34189e5e:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189e60:	68fa      	ldr	r2, [r7, #12]
34189e62:	68bb      	ldr	r3, [r7, #8]
34189e64:	fbb2 f3f3 	udiv	r3, r2, r3
34189e68:	60fb      	str	r3, [r7, #12]
            break;
34189e6a:	e009      	b.n	34189e80 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189e6c:	f7fe fdb6 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34189e70:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189e72:	68fa      	ldr	r2, [r7, #12]
34189e74:	68bb      	ldr	r3, [r7, #8]
34189e76:	fbb2 f3f3 	udiv	r3, r2, r3
34189e7a:	60fb      	str	r3, [r7, #12]
            break;
34189e7c:	e000      	b.n	34189e80 <RCCEx_GetI3CCLKFreq+0x160>
            break;
34189e7e:	bf00      	nop
        }
      }
      break;
34189e80:	e05a      	b.n	34189f38 <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34189e82:	f7fb fbc5 	bl	34185610 <LL_RCC_IC15_IsEnabled>
34189e86:	4603      	mov	r3, r0
34189e88:	2b00      	cmp	r3, #0
34189e8a:	d057      	beq.n	34189f3c <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34189e8c:	f7fb fbe2 	bl	34185654 <LL_RCC_IC15_GetDivider>
34189e90:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34189e92:	f7fb fbd1 	bl	34185638 <LL_RCC_IC15_GetSource>
34189e96:	4603      	mov	r3, r0
34189e98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189e9c:	d029      	beq.n	34189ef2 <RCCEx_GetI3CCLKFreq+0x1d2>
34189e9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189ea2:	d82f      	bhi.n	34189f04 <RCCEx_GetI3CCLKFreq+0x1e4>
34189ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189ea8:	d01a      	beq.n	34189ee0 <RCCEx_GetI3CCLKFreq+0x1c0>
34189eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189eae:	d829      	bhi.n	34189f04 <RCCEx_GetI3CCLKFreq+0x1e4>
34189eb0:	2b00      	cmp	r3, #0
34189eb2:	d003      	beq.n	34189ebc <RCCEx_GetI3CCLKFreq+0x19c>
34189eb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189eb8:	d009      	beq.n	34189ece <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189eba:	e023      	b.n	34189f04 <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189ebc:	f7fe fcbc 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
34189ec0:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189ec2:	68fa      	ldr	r2, [r7, #12]
34189ec4:	68bb      	ldr	r3, [r7, #8]
34189ec6:	fbb2 f3f3 	udiv	r3, r2, r3
34189eca:	60fb      	str	r3, [r7, #12]
            break;
34189ecc:	e01b      	b.n	34189f06 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189ece:	f7fe fcf9 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
34189ed2:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189ed4:	68fa      	ldr	r2, [r7, #12]
34189ed6:	68bb      	ldr	r3, [r7, #8]
34189ed8:	fbb2 f3f3 	udiv	r3, r2, r3
34189edc:	60fb      	str	r3, [r7, #12]
            break;
34189ede:	e012      	b.n	34189f06 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189ee0:	f7fe fd36 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
34189ee4:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189ee6:	68fa      	ldr	r2, [r7, #12]
34189ee8:	68bb      	ldr	r3, [r7, #8]
34189eea:	fbb2 f3f3 	udiv	r3, r2, r3
34189eee:	60fb      	str	r3, [r7, #12]
            break;
34189ef0:	e009      	b.n	34189f06 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189ef2:	f7fe fd73 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
34189ef6:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189ef8:	68fa      	ldr	r2, [r7, #12]
34189efa:	68bb      	ldr	r3, [r7, #8]
34189efc:	fbb2 f3f3 	udiv	r3, r2, r3
34189f00:	60fb      	str	r3, [r7, #12]
            break;
34189f02:	e000      	b.n	34189f06 <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
34189f04:	bf00      	nop
        }
      }
      break;
34189f06:	e019      	b.n	34189f3c <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34189f08:	f7fa fa1e 	bl	34184348 <LL_RCC_HSI_IsReady>
34189f0c:	4603      	mov	r3, r0
34189f0e:	2b00      	cmp	r3, #0
34189f10:	d016      	beq.n	34189f40 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189f12:	f7fa fa2b 	bl	3418436c <LL_RCC_HSI_GetDivider>
34189f16:	4603      	mov	r3, r0
34189f18:	09db      	lsrs	r3, r3, #7
34189f1a:	4a19      	ldr	r2, [pc, #100]	@ (34189f80 <RCCEx_GetI3CCLKFreq+0x260>)
34189f1c:	fa22 f303 	lsr.w	r3, r2, r3
34189f20:	60fb      	str	r3, [r7, #12]
      }
      break;
34189f22:	e00d      	b.n	34189f40 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34189f24:	f7fa fa30 	bl	34184388 <LL_RCC_MSI_IsReady>
34189f28:	4603      	mov	r3, r0
34189f2a:	2b00      	cmp	r3, #0
34189f2c:	d00a      	beq.n	34189f44 <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
34189f2e:	4b15      	ldr	r3, [pc, #84]	@ (34189f84 <RCCEx_GetI3CCLKFreq+0x264>)
34189f30:	60fb      	str	r3, [r7, #12]
      }
      break;
34189f32:	e007      	b.n	34189f44 <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
34189f34:	bf00      	nop
34189f36:	e006      	b.n	34189f46 <RCCEx_GetI3CCLKFreq+0x226>
      break;
34189f38:	bf00      	nop
34189f3a:	e004      	b.n	34189f46 <RCCEx_GetI3CCLKFreq+0x226>
      break;
34189f3c:	bf00      	nop
34189f3e:	e002      	b.n	34189f46 <RCCEx_GetI3CCLKFreq+0x226>
      break;
34189f40:	bf00      	nop
34189f42:	e000      	b.n	34189f46 <RCCEx_GetI3CCLKFreq+0x226>
      break;
34189f44:	bf00      	nop
  }

  return i3c_frequency;
34189f46:	68fb      	ldr	r3, [r7, #12]
}
34189f48:	4618      	mov	r0, r3
34189f4a:	3710      	adds	r7, #16
34189f4c:	46bd      	mov	sp, r7
34189f4e:	bd80      	pop	{r7, pc}
34189f50:	0705140c 	.word	0x0705140c
34189f54:	0705100c 	.word	0x0705100c
34189f58:	0704140c 	.word	0x0704140c
34189f5c:	0704100c 	.word	0x0704100c
34189f60:	0703140c 	.word	0x0703140c
34189f64:	0703100c 	.word	0x0703100c
34189f68:	0702140c 	.word	0x0702140c
34189f6c:	0702100c 	.word	0x0702100c
34189f70:	0701140c 	.word	0x0701140c
34189f74:	0701100c 	.word	0x0701100c
34189f78:	0700100c 	.word	0x0700100c
34189f7c:	0700140c 	.word	0x0700140c
34189f80:	03d09000 	.word	0x03d09000
34189f84:	003d0900 	.word	0x003d0900

34189f88 <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
34189f88:	b590      	push	{r4, r7, lr}
34189f8a:	b085      	sub	sp, #20
34189f8c:	af00      	add	r7, sp, #0
34189f8e:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
34189f90:	2300      	movs	r3, #0
34189f92:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34189f94:	6878      	ldr	r0, [r7, #4]
34189f96:	f7fa fd35 	bl	34184a04 <LL_RCC_GetLPTIMClockSource>
34189f9a:	4603      	mov	r3, r0
34189f9c:	4aa1      	ldr	r2, [pc, #644]	@ (3418a224 <RCCEx_GetLPTIMCLKFreq+0x29c>)
34189f9e:	4293      	cmp	r3, r2
34189fa0:	f000 8185 	beq.w	3418a2ae <RCCEx_GetLPTIMCLKFreq+0x326>
34189fa4:	4a9f      	ldr	r2, [pc, #636]	@ (3418a224 <RCCEx_GetLPTIMCLKFreq+0x29c>)
34189fa6:	4293      	cmp	r3, r2
34189fa8:	f200 818b 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189fac:	4a9e      	ldr	r2, [pc, #632]	@ (3418a228 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34189fae:	4293      	cmp	r3, r2
34189fb0:	f000 817d 	beq.w	3418a2ae <RCCEx_GetLPTIMCLKFreq+0x326>
34189fb4:	4a9c      	ldr	r2, [pc, #624]	@ (3418a228 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34189fb6:	4293      	cmp	r3, r2
34189fb8:	f200 8183 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189fbc:	4a9b      	ldr	r2, [pc, #620]	@ (3418a22c <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34189fbe:	4293      	cmp	r3, r2
34189fc0:	f000 8175 	beq.w	3418a2ae <RCCEx_GetLPTIMCLKFreq+0x326>
34189fc4:	4a99      	ldr	r2, [pc, #612]	@ (3418a22c <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34189fc6:	4293      	cmp	r3, r2
34189fc8:	f200 817b 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189fcc:	4a98      	ldr	r2, [pc, #608]	@ (3418a230 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34189fce:	4293      	cmp	r3, r2
34189fd0:	f000 816d 	beq.w	3418a2ae <RCCEx_GetLPTIMCLKFreq+0x326>
34189fd4:	4a96      	ldr	r2, [pc, #600]	@ (3418a230 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34189fd6:	4293      	cmp	r3, r2
34189fd8:	f200 8173 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189fdc:	4a95      	ldr	r2, [pc, #596]	@ (3418a234 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34189fde:	4293      	cmp	r3, r2
34189fe0:	f000 8165 	beq.w	3418a2ae <RCCEx_GetLPTIMCLKFreq+0x326>
34189fe4:	4a93      	ldr	r2, [pc, #588]	@ (3418a234 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34189fe6:	4293      	cmp	r3, r2
34189fe8:	f200 816b 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189fec:	4a92      	ldr	r2, [pc, #584]	@ (3418a238 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34189fee:	4293      	cmp	r3, r2
34189ff0:	f000 8154 	beq.w	3418a29c <RCCEx_GetLPTIMCLKFreq+0x314>
34189ff4:	4a90      	ldr	r2, [pc, #576]	@ (3418a238 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34189ff6:	4293      	cmp	r3, r2
34189ff8:	f200 8163 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
34189ffc:	4a8f      	ldr	r2, [pc, #572]	@ (3418a23c <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34189ffe:	4293      	cmp	r3, r2
3418a000:	f000 814c 	beq.w	3418a29c <RCCEx_GetLPTIMCLKFreq+0x314>
3418a004:	4a8d      	ldr	r2, [pc, #564]	@ (3418a23c <RCCEx_GetLPTIMCLKFreq+0x2b4>)
3418a006:	4293      	cmp	r3, r2
3418a008:	f200 815b 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a00c:	4a8c      	ldr	r2, [pc, #560]	@ (3418a240 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
3418a00e:	4293      	cmp	r3, r2
3418a010:	f000 8144 	beq.w	3418a29c <RCCEx_GetLPTIMCLKFreq+0x314>
3418a014:	4a8a      	ldr	r2, [pc, #552]	@ (3418a240 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
3418a016:	4293      	cmp	r3, r2
3418a018:	f200 8153 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a01c:	4a89      	ldr	r2, [pc, #548]	@ (3418a244 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
3418a01e:	4293      	cmp	r3, r2
3418a020:	f000 813c 	beq.w	3418a29c <RCCEx_GetLPTIMCLKFreq+0x314>
3418a024:	4a87      	ldr	r2, [pc, #540]	@ (3418a244 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
3418a026:	4293      	cmp	r3, r2
3418a028:	f200 814b 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a02c:	4a86      	ldr	r2, [pc, #536]	@ (3418a248 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
3418a02e:	4293      	cmp	r3, r2
3418a030:	f000 8134 	beq.w	3418a29c <RCCEx_GetLPTIMCLKFreq+0x314>
3418a034:	4a84      	ldr	r2, [pc, #528]	@ (3418a248 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
3418a036:	4293      	cmp	r3, r2
3418a038:	f200 8143 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a03c:	4a83      	ldr	r2, [pc, #524]	@ (3418a24c <RCCEx_GetLPTIMCLKFreq+0x2c4>)
3418a03e:	4293      	cmp	r3, r2
3418a040:	f000 80e7 	beq.w	3418a212 <RCCEx_GetLPTIMCLKFreq+0x28a>
3418a044:	4a81      	ldr	r2, [pc, #516]	@ (3418a24c <RCCEx_GetLPTIMCLKFreq+0x2c4>)
3418a046:	4293      	cmp	r3, r2
3418a048:	f200 813b 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a04c:	4a80      	ldr	r2, [pc, #512]	@ (3418a250 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
3418a04e:	4293      	cmp	r3, r2
3418a050:	f000 80df 	beq.w	3418a212 <RCCEx_GetLPTIMCLKFreq+0x28a>
3418a054:	4a7e      	ldr	r2, [pc, #504]	@ (3418a250 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
3418a056:	4293      	cmp	r3, r2
3418a058:	f200 8133 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a05c:	4a7d      	ldr	r2, [pc, #500]	@ (3418a254 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
3418a05e:	4293      	cmp	r3, r2
3418a060:	f000 80d7 	beq.w	3418a212 <RCCEx_GetLPTIMCLKFreq+0x28a>
3418a064:	4a7b      	ldr	r2, [pc, #492]	@ (3418a254 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
3418a066:	4293      	cmp	r3, r2
3418a068:	f200 812b 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a06c:	4a7a      	ldr	r2, [pc, #488]	@ (3418a258 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
3418a06e:	4293      	cmp	r3, r2
3418a070:	f000 80cf 	beq.w	3418a212 <RCCEx_GetLPTIMCLKFreq+0x28a>
3418a074:	4a78      	ldr	r2, [pc, #480]	@ (3418a258 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
3418a076:	4293      	cmp	r3, r2
3418a078:	f200 8123 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a07c:	4a77      	ldr	r2, [pc, #476]	@ (3418a25c <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3418a07e:	4293      	cmp	r3, r2
3418a080:	f000 80c7 	beq.w	3418a212 <RCCEx_GetLPTIMCLKFreq+0x28a>
3418a084:	4a75      	ldr	r2, [pc, #468]	@ (3418a25c <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3418a086:	4293      	cmp	r3, r2
3418a088:	f200 811b 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a08c:	4a74      	ldr	r2, [pc, #464]	@ (3418a260 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
3418a08e:	4293      	cmp	r3, r2
3418a090:	d07b      	beq.n	3418a18a <RCCEx_GetLPTIMCLKFreq+0x202>
3418a092:	4a73      	ldr	r2, [pc, #460]	@ (3418a260 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
3418a094:	4293      	cmp	r3, r2
3418a096:	f200 8114 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a09a:	4a72      	ldr	r2, [pc, #456]	@ (3418a264 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3418a09c:	4293      	cmp	r3, r2
3418a09e:	d074      	beq.n	3418a18a <RCCEx_GetLPTIMCLKFreq+0x202>
3418a0a0:	4a70      	ldr	r2, [pc, #448]	@ (3418a264 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3418a0a2:	4293      	cmp	r3, r2
3418a0a4:	f200 810d 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a0a8:	4a6f      	ldr	r2, [pc, #444]	@ (3418a268 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3418a0aa:	4293      	cmp	r3, r2
3418a0ac:	d06d      	beq.n	3418a18a <RCCEx_GetLPTIMCLKFreq+0x202>
3418a0ae:	4a6e      	ldr	r2, [pc, #440]	@ (3418a268 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3418a0b0:	4293      	cmp	r3, r2
3418a0b2:	f200 8106 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a0b6:	4a6d      	ldr	r2, [pc, #436]	@ (3418a26c <RCCEx_GetLPTIMCLKFreq+0x2e4>)
3418a0b8:	4293      	cmp	r3, r2
3418a0ba:	d066      	beq.n	3418a18a <RCCEx_GetLPTIMCLKFreq+0x202>
3418a0bc:	4a6b      	ldr	r2, [pc, #428]	@ (3418a26c <RCCEx_GetLPTIMCLKFreq+0x2e4>)
3418a0be:	4293      	cmp	r3, r2
3418a0c0:	f200 80ff 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a0c4:	4a6a      	ldr	r2, [pc, #424]	@ (3418a270 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3418a0c6:	4293      	cmp	r3, r2
3418a0c8:	d05f      	beq.n	3418a18a <RCCEx_GetLPTIMCLKFreq+0x202>
3418a0ca:	4a69      	ldr	r2, [pc, #420]	@ (3418a270 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3418a0cc:	4293      	cmp	r3, r2
3418a0ce:	f200 80f8 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a0d2:	4a68      	ldr	r2, [pc, #416]	@ (3418a274 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3418a0d4:	4293      	cmp	r3, r2
3418a0d6:	d053      	beq.n	3418a180 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418a0d8:	4a66      	ldr	r2, [pc, #408]	@ (3418a274 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3418a0da:	4293      	cmp	r3, r2
3418a0dc:	f200 80f1 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a0e0:	4a65      	ldr	r2, [pc, #404]	@ (3418a278 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
3418a0e2:	4293      	cmp	r3, r2
3418a0e4:	d04c      	beq.n	3418a180 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418a0e6:	4a64      	ldr	r2, [pc, #400]	@ (3418a278 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
3418a0e8:	4293      	cmp	r3, r2
3418a0ea:	f200 80ea 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a0ee:	4a63      	ldr	r2, [pc, #396]	@ (3418a27c <RCCEx_GetLPTIMCLKFreq+0x2f4>)
3418a0f0:	4293      	cmp	r3, r2
3418a0f2:	d045      	beq.n	3418a180 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418a0f4:	4a61      	ldr	r2, [pc, #388]	@ (3418a27c <RCCEx_GetLPTIMCLKFreq+0x2f4>)
3418a0f6:	4293      	cmp	r3, r2
3418a0f8:	f200 80e3 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a0fc:	4a60      	ldr	r2, [pc, #384]	@ (3418a280 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
3418a0fe:	4293      	cmp	r3, r2
3418a100:	d03e      	beq.n	3418a180 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418a102:	4a5f      	ldr	r2, [pc, #380]	@ (3418a280 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
3418a104:	4293      	cmp	r3, r2
3418a106:	f200 80dc 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a10a:	4a5e      	ldr	r2, [pc, #376]	@ (3418a284 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
3418a10c:	4293      	cmp	r3, r2
3418a10e:	d037      	beq.n	3418a180 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418a110:	4a5c      	ldr	r2, [pc, #368]	@ (3418a284 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
3418a112:	4293      	cmp	r3, r2
3418a114:	f200 80d5 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a118:	4a5b      	ldr	r2, [pc, #364]	@ (3418a288 <RCCEx_GetLPTIMCLKFreq+0x300>)
3418a11a:	4293      	cmp	r3, r2
3418a11c:	d024      	beq.n	3418a168 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418a11e:	4a5a      	ldr	r2, [pc, #360]	@ (3418a288 <RCCEx_GetLPTIMCLKFreq+0x300>)
3418a120:	4293      	cmp	r3, r2
3418a122:	f200 80ce 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a126:	4a59      	ldr	r2, [pc, #356]	@ (3418a28c <RCCEx_GetLPTIMCLKFreq+0x304>)
3418a128:	4293      	cmp	r3, r2
3418a12a:	d01d      	beq.n	3418a168 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418a12c:	4a57      	ldr	r2, [pc, #348]	@ (3418a28c <RCCEx_GetLPTIMCLKFreq+0x304>)
3418a12e:	4293      	cmp	r3, r2
3418a130:	f200 80c7 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a134:	4a56      	ldr	r2, [pc, #344]	@ (3418a290 <RCCEx_GetLPTIMCLKFreq+0x308>)
3418a136:	4293      	cmp	r3, r2
3418a138:	d016      	beq.n	3418a168 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418a13a:	4a55      	ldr	r2, [pc, #340]	@ (3418a290 <RCCEx_GetLPTIMCLKFreq+0x308>)
3418a13c:	4293      	cmp	r3, r2
3418a13e:	f200 80c0 	bhi.w	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a142:	4a54      	ldr	r2, [pc, #336]	@ (3418a294 <RCCEx_GetLPTIMCLKFreq+0x30c>)
3418a144:	4293      	cmp	r3, r2
3418a146:	d003      	beq.n	3418a150 <RCCEx_GetLPTIMCLKFreq+0x1c8>
3418a148:	4a53      	ldr	r2, [pc, #332]	@ (3418a298 <RCCEx_GetLPTIMCLKFreq+0x310>)
3418a14a:	4293      	cmp	r3, r2
3418a14c:	d00c      	beq.n	3418a168 <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418a14e:	e0b8      	b.n	3418a2c2 <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a150:	f7f9 fce6 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418a154:	4603      	mov	r3, r0
3418a156:	4618      	mov	r0, r3
3418a158:	f7fe fc86 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418a15c:	4603      	mov	r3, r0
3418a15e:	4618      	mov	r0, r3
3418a160:	f7fe fc93 	bl	34188a8a <RCCEx_GetPCLK1Freq>
3418a164:	60f8      	str	r0, [r7, #12]
      break;
3418a166:	e0b3      	b.n	3418a2d0 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a168:	f7f9 fcda 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418a16c:	4603      	mov	r3, r0
3418a16e:	4618      	mov	r0, r3
3418a170:	f7fe fc7a 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418a174:	4603      	mov	r3, r0
3418a176:	4618      	mov	r0, r3
3418a178:	f7fe fca8 	bl	34188acc <RCCEx_GetPCLK4Freq>
3418a17c:	60f8      	str	r0, [r7, #12]
      break;
3418a17e:	e0a7      	b.n	3418a2d0 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a180:	2007      	movs	r0, #7
3418a182:	f7fe ff5d 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418a186:	60f8      	str	r0, [r7, #12]
      break;
3418a188:	e0a2      	b.n	3418a2d0 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418a18a:	f7fb fa41 	bl	34185610 <LL_RCC_IC15_IsEnabled>
3418a18e:	4603      	mov	r3, r0
3418a190:	2b00      	cmp	r3, #0
3418a192:	f000 8098 	beq.w	3418a2c6 <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
3418a196:	f7fb fa5d 	bl	34185654 <LL_RCC_IC15_GetDivider>
3418a19a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418a19c:	f7fb fa4c 	bl	34185638 <LL_RCC_IC15_GetSource>
3418a1a0:	4603      	mov	r3, r0
3418a1a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a1a6:	d029      	beq.n	3418a1fc <RCCEx_GetLPTIMCLKFreq+0x274>
3418a1a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a1ac:	d82f      	bhi.n	3418a20e <RCCEx_GetLPTIMCLKFreq+0x286>
3418a1ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a1b2:	d01a      	beq.n	3418a1ea <RCCEx_GetLPTIMCLKFreq+0x262>
3418a1b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a1b8:	d829      	bhi.n	3418a20e <RCCEx_GetLPTIMCLKFreq+0x286>
3418a1ba:	2b00      	cmp	r3, #0
3418a1bc:	d003      	beq.n	3418a1c6 <RCCEx_GetLPTIMCLKFreq+0x23e>
3418a1be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a1c2:	d009      	beq.n	3418a1d8 <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
3418a1c4:	e023      	b.n	3418a20e <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a1c6:	f7fe fb37 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418a1ca:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418a1cc:	68fa      	ldr	r2, [r7, #12]
3418a1ce:	68bb      	ldr	r3, [r7, #8]
3418a1d0:	fbb2 f3f3 	udiv	r3, r2, r3
3418a1d4:	60fb      	str	r3, [r7, #12]
            break;
3418a1d6:	e01b      	b.n	3418a210 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a1d8:	f7fe fb74 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418a1dc:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418a1de:	68fa      	ldr	r2, [r7, #12]
3418a1e0:	68bb      	ldr	r3, [r7, #8]
3418a1e2:	fbb2 f3f3 	udiv	r3, r2, r3
3418a1e6:	60fb      	str	r3, [r7, #12]
            break;
3418a1e8:	e012      	b.n	3418a210 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a1ea:	f7fe fbb1 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418a1ee:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418a1f0:	68fa      	ldr	r2, [r7, #12]
3418a1f2:	68bb      	ldr	r3, [r7, #8]
3418a1f4:	fbb2 f3f3 	udiv	r3, r2, r3
3418a1f8:	60fb      	str	r3, [r7, #12]
            break;
3418a1fa:	e009      	b.n	3418a210 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a1fc:	f7fe fbee 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418a200:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418a202:	68fa      	ldr	r2, [r7, #12]
3418a204:	68bb      	ldr	r3, [r7, #8]
3418a206:	fbb2 f3f3 	udiv	r3, r2, r3
3418a20a:	60fb      	str	r3, [r7, #12]
            break;
3418a20c:	e000      	b.n	3418a210 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
3418a20e:	bf00      	nop
      break;
3418a210:	e059      	b.n	3418a2c6 <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
3418a212:	f7fa f8d9 	bl	341843c8 <LL_RCC_LSE_IsReady>
3418a216:	4603      	mov	r3, r0
3418a218:	2b00      	cmp	r3, #0
3418a21a:	d056      	beq.n	3418a2ca <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
3418a21c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418a220:	60fb      	str	r3, [r7, #12]
      break;
3418a222:	e052      	b.n	3418a2ca <RCCEx_GetLPTIMCLKFreq+0x342>
3418a224:	0705182c 	.word	0x0705182c
3418a228:	0705142c 	.word	0x0705142c
3418a22c:	0705102c 	.word	0x0705102c
3418a230:	07050c2c 	.word	0x07050c2c
3418a234:	0705082c 	.word	0x0705082c
3418a238:	0704182c 	.word	0x0704182c
3418a23c:	0704142c 	.word	0x0704142c
3418a240:	0704102c 	.word	0x0704102c
3418a244:	07040c2c 	.word	0x07040c2c
3418a248:	0704082c 	.word	0x0704082c
3418a24c:	0703182c 	.word	0x0703182c
3418a250:	0703142c 	.word	0x0703142c
3418a254:	0703102c 	.word	0x0703102c
3418a258:	07030c2c 	.word	0x07030c2c
3418a25c:	0703082c 	.word	0x0703082c
3418a260:	0702182c 	.word	0x0702182c
3418a264:	0702142c 	.word	0x0702142c
3418a268:	0702102c 	.word	0x0702102c
3418a26c:	07020c2c 	.word	0x07020c2c
3418a270:	0702082c 	.word	0x0702082c
3418a274:	0701182c 	.word	0x0701182c
3418a278:	0701142c 	.word	0x0701142c
3418a27c:	0701102c 	.word	0x0701102c
3418a280:	07010c2c 	.word	0x07010c2c
3418a284:	0701082c 	.word	0x0701082c
3418a288:	0700182c 	.word	0x0700182c
3418a28c:	0700142c 	.word	0x0700142c
3418a290:	0700102c 	.word	0x0700102c
3418a294:	0700082c 	.word	0x0700082c
3418a298:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
3418a29c:	f7fa f8a6 	bl	341843ec <LL_RCC_LSI_IsReady>
3418a2a0:	4603      	mov	r3, r0
3418a2a2:	2b00      	cmp	r3, #0
3418a2a4:	d013      	beq.n	3418a2ce <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
3418a2a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3418a2aa:	60fb      	str	r3, [r7, #12]
      break;
3418a2ac:	e00f      	b.n	3418a2ce <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
3418a2ae:	f7f9 fc37 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418a2b2:	4604      	mov	r4, r0
3418a2b4:	f7fa fcb0 	bl	34184c18 <LL_RCC_GetTIMPrescaler>
3418a2b8:	4603      	mov	r3, r0
3418a2ba:	fa24 f303 	lsr.w	r3, r4, r3
3418a2be:	60fb      	str	r3, [r7, #12]
      break;
3418a2c0:	e006      	b.n	3418a2d0 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418a2c2:	bf00      	nop
3418a2c4:	e004      	b.n	3418a2d0 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418a2c6:	bf00      	nop
3418a2c8:	e002      	b.n	3418a2d0 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418a2ca:	bf00      	nop
3418a2cc:	e000      	b.n	3418a2d0 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418a2ce:	bf00      	nop
  }

  return lptim_frequency;
3418a2d0:	68fb      	ldr	r3, [r7, #12]
}
3418a2d2:	4618      	mov	r0, r3
3418a2d4:	3714      	adds	r7, #20
3418a2d6:	46bd      	mov	sp, r7
3418a2d8:	bd90      	pop	{r4, r7, pc}
3418a2da:	bf00      	nop

3418a2dc <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
3418a2dc:	b580      	push	{r7, lr}
3418a2de:	b084      	sub	sp, #16
3418a2e0:	af00      	add	r7, sp, #0
3418a2e2:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a2e4:	2300      	movs	r3, #0
3418a2e6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
3418a2e8:	6878      	ldr	r0, [r7, #4]
3418a2ea:	f7fa fb97 	bl	34184a1c <LL_RCC_GetLPUARTClockSource>
3418a2ee:	4603      	mov	r3, r0
3418a2f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3418a2f4:	f000 80c0 	beq.w	3418a478 <RCCEx_GetLPUARTCLKFreq+0x19c>
3418a2f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3418a2fc:	f200 80db 	bhi.w	3418a4b6 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418a300:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3418a304:	f000 80c6 	beq.w	3418a494 <RCCEx_GetLPUARTCLKFreq+0x1b8>
3418a308:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3418a30c:	f200 80d3 	bhi.w	3418a4b6 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418a310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418a314:	f000 80c6 	beq.w	3418a4a4 <RCCEx_GetLPUARTCLKFreq+0x1c8>
3418a318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418a31c:	f200 80cb 	bhi.w	3418a4b6 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418a320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418a324:	d065      	beq.n	3418a3f2 <RCCEx_GetLPUARTCLKFreq+0x116>
3418a326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418a32a:	f200 80c4 	bhi.w	3418a4b6 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418a32e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418a332:	d01a      	beq.n	3418a36a <RCCEx_GetLPUARTCLKFreq+0x8e>
3418a334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418a338:	f200 80bd 	bhi.w	3418a4b6 <RCCEx_GetLPUARTCLKFreq+0x1da>
3418a33c:	2b00      	cmp	r3, #0
3418a33e:	d003      	beq.n	3418a348 <RCCEx_GetLPUARTCLKFreq+0x6c>
3418a340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418a344:	d00c      	beq.n	3418a360 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418a346:	e0b6      	b.n	3418a4b6 <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a348:	f7f9 fbea 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418a34c:	4603      	mov	r3, r0
3418a34e:	4618      	mov	r0, r3
3418a350:	f7fe fb8a 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418a354:	4603      	mov	r3, r0
3418a356:	4618      	mov	r0, r3
3418a358:	f7fe fbb8 	bl	34188acc <RCCEx_GetPCLK4Freq>
3418a35c:	60f8      	str	r0, [r7, #12]
      break;
3418a35e:	e0b5      	b.n	3418a4cc <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a360:	2007      	movs	r0, #7
3418a362:	f7fe fe6d 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418a366:	60f8      	str	r0, [r7, #12]
      break;
3418a368:	e0b0      	b.n	3418a4cc <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418a36a:	f7fb f811 	bl	34185390 <LL_RCC_IC9_IsEnabled>
3418a36e:	4603      	mov	r3, r0
3418a370:	2b00      	cmp	r3, #0
3418a372:	f000 80a2 	beq.w	3418a4ba <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
3418a376:	f7fb f82d 	bl	341853d4 <LL_RCC_IC9_GetDivider>
3418a37a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418a37c:	f7fb f81c 	bl	341853b8 <LL_RCC_IC9_GetSource>
3418a380:	4603      	mov	r3, r0
3418a382:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a386:	d029      	beq.n	3418a3dc <RCCEx_GetLPUARTCLKFreq+0x100>
3418a388:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a38c:	d82f      	bhi.n	3418a3ee <RCCEx_GetLPUARTCLKFreq+0x112>
3418a38e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a392:	d01a      	beq.n	3418a3ca <RCCEx_GetLPUARTCLKFreq+0xee>
3418a394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a398:	d829      	bhi.n	3418a3ee <RCCEx_GetLPUARTCLKFreq+0x112>
3418a39a:	2b00      	cmp	r3, #0
3418a39c:	d003      	beq.n	3418a3a6 <RCCEx_GetLPUARTCLKFreq+0xca>
3418a39e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a3a2:	d009      	beq.n	3418a3b8 <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
3418a3a4:	e023      	b.n	3418a3ee <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a3a6:	f7fe fa47 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418a3aa:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418a3ac:	68fa      	ldr	r2, [r7, #12]
3418a3ae:	68bb      	ldr	r3, [r7, #8]
3418a3b0:	fbb2 f3f3 	udiv	r3, r2, r3
3418a3b4:	60fb      	str	r3, [r7, #12]
            break;
3418a3b6:	e01b      	b.n	3418a3f0 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a3b8:	f7fe fa84 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418a3bc:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418a3be:	68fa      	ldr	r2, [r7, #12]
3418a3c0:	68bb      	ldr	r3, [r7, #8]
3418a3c2:	fbb2 f3f3 	udiv	r3, r2, r3
3418a3c6:	60fb      	str	r3, [r7, #12]
            break;
3418a3c8:	e012      	b.n	3418a3f0 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a3ca:	f7fe fac1 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418a3ce:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418a3d0:	68fa      	ldr	r2, [r7, #12]
3418a3d2:	68bb      	ldr	r3, [r7, #8]
3418a3d4:	fbb2 f3f3 	udiv	r3, r2, r3
3418a3d8:	60fb      	str	r3, [r7, #12]
            break;
3418a3da:	e009      	b.n	3418a3f0 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a3dc:	f7fe fafe 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418a3e0:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418a3e2:	68fa      	ldr	r2, [r7, #12]
3418a3e4:	68bb      	ldr	r3, [r7, #8]
3418a3e6:	fbb2 f3f3 	udiv	r3, r2, r3
3418a3ea:	60fb      	str	r3, [r7, #12]
            break;
3418a3ec:	e000      	b.n	3418a3f0 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
3418a3ee:	bf00      	nop
      break;
3418a3f0:	e063      	b.n	3418a4ba <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418a3f2:	f7fb f8cd 	bl	34185590 <LL_RCC_IC14_IsEnabled>
3418a3f6:	4603      	mov	r3, r0
3418a3f8:	2b00      	cmp	r3, #0
3418a3fa:	d060      	beq.n	3418a4be <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
3418a3fc:	f7fb f8ea 	bl	341855d4 <LL_RCC_IC14_GetDivider>
3418a400:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418a402:	f7fb f8d9 	bl	341855b8 <LL_RCC_IC14_GetSource>
3418a406:	4603      	mov	r3, r0
3418a408:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a40c:	d029      	beq.n	3418a462 <RCCEx_GetLPUARTCLKFreq+0x186>
3418a40e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a412:	d82f      	bhi.n	3418a474 <RCCEx_GetLPUARTCLKFreq+0x198>
3418a414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a418:	d01a      	beq.n	3418a450 <RCCEx_GetLPUARTCLKFreq+0x174>
3418a41a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a41e:	d829      	bhi.n	3418a474 <RCCEx_GetLPUARTCLKFreq+0x198>
3418a420:	2b00      	cmp	r3, #0
3418a422:	d003      	beq.n	3418a42c <RCCEx_GetLPUARTCLKFreq+0x150>
3418a424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a428:	d009      	beq.n	3418a43e <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
3418a42a:	e023      	b.n	3418a474 <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a42c:	f7fe fa04 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418a430:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418a432:	68fa      	ldr	r2, [r7, #12]
3418a434:	68bb      	ldr	r3, [r7, #8]
3418a436:	fbb2 f3f3 	udiv	r3, r2, r3
3418a43a:	60fb      	str	r3, [r7, #12]
            break;
3418a43c:	e01b      	b.n	3418a476 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a43e:	f7fe fa41 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418a442:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418a444:	68fa      	ldr	r2, [r7, #12]
3418a446:	68bb      	ldr	r3, [r7, #8]
3418a448:	fbb2 f3f3 	udiv	r3, r2, r3
3418a44c:	60fb      	str	r3, [r7, #12]
            break;
3418a44e:	e012      	b.n	3418a476 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a450:	f7fe fa7e 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418a454:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418a456:	68fa      	ldr	r2, [r7, #12]
3418a458:	68bb      	ldr	r3, [r7, #8]
3418a45a:	fbb2 f3f3 	udiv	r3, r2, r3
3418a45e:	60fb      	str	r3, [r7, #12]
            break;
3418a460:	e009      	b.n	3418a476 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a462:	f7fe fabb 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418a466:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418a468:	68fa      	ldr	r2, [r7, #12]
3418a46a:	68bb      	ldr	r3, [r7, #8]
3418a46c:	fbb2 f3f3 	udiv	r3, r2, r3
3418a470:	60fb      	str	r3, [r7, #12]
            break;
3418a472:	e000      	b.n	3418a476 <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
3418a474:	bf00      	nop
      break;
3418a476:	e022      	b.n	3418a4be <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
3418a478:	f7f9 ff66 	bl	34184348 <LL_RCC_HSI_IsReady>
3418a47c:	4603      	mov	r3, r0
3418a47e:	2b00      	cmp	r3, #0
3418a480:	d01f      	beq.n	3418a4c2 <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418a482:	f7f9 ff73 	bl	3418436c <LL_RCC_HSI_GetDivider>
3418a486:	4603      	mov	r3, r0
3418a488:	09db      	lsrs	r3, r3, #7
3418a48a:	4a13      	ldr	r2, [pc, #76]	@ (3418a4d8 <RCCEx_GetLPUARTCLKFreq+0x1fc>)
3418a48c:	fa22 f303 	lsr.w	r3, r2, r3
3418a490:	60fb      	str	r3, [r7, #12]
      break;
3418a492:	e016      	b.n	3418a4c2 <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
3418a494:	f7f9 ff78 	bl	34184388 <LL_RCC_MSI_IsReady>
3418a498:	4603      	mov	r3, r0
3418a49a:	2b00      	cmp	r3, #0
3418a49c:	d013      	beq.n	3418a4c6 <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
3418a49e:	4b0f      	ldr	r3, [pc, #60]	@ (3418a4dc <RCCEx_GetLPUARTCLKFreq+0x200>)
3418a4a0:	60fb      	str	r3, [r7, #12]
      break;
3418a4a2:	e010      	b.n	3418a4c6 <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
3418a4a4:	f7f9 ff90 	bl	341843c8 <LL_RCC_LSE_IsReady>
3418a4a8:	4603      	mov	r3, r0
3418a4aa:	2b00      	cmp	r3, #0
3418a4ac:	d00d      	beq.n	3418a4ca <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
3418a4ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418a4b2:	60fb      	str	r3, [r7, #12]
      break;
3418a4b4:	e009      	b.n	3418a4ca <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
3418a4b6:	bf00      	nop
3418a4b8:	e008      	b.n	3418a4cc <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418a4ba:	bf00      	nop
3418a4bc:	e006      	b.n	3418a4cc <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418a4be:	bf00      	nop
3418a4c0:	e004      	b.n	3418a4cc <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418a4c2:	bf00      	nop
3418a4c4:	e002      	b.n	3418a4cc <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418a4c6:	bf00      	nop
3418a4c8:	e000      	b.n	3418a4cc <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418a4ca:	bf00      	nop
  }

  return lpuart_frequency;
3418a4cc:	68fb      	ldr	r3, [r7, #12]
}
3418a4ce:	4618      	mov	r0, r3
3418a4d0:	3710      	adds	r7, #16
3418a4d2:	46bd      	mov	sp, r7
3418a4d4:	bd80      	pop	{r7, pc}
3418a4d6:	bf00      	nop
3418a4d8:	03d09000 	.word	0x03d09000
3418a4dc:	003d0900 	.word	0x003d0900

3418a4e0 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
3418a4e0:	b580      	push	{r7, lr}
3418a4e2:	b084      	sub	sp, #16
3418a4e4:	af00      	add	r7, sp, #0
3418a4e6:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a4e8:	2300      	movs	r3, #0
3418a4ea:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
3418a4ec:	6878      	ldr	r0, [r7, #4]
3418a4ee:	f7fa faa7 	bl	34184a40 <LL_RCC_GetLTDCClockSource>
3418a4f2:	4603      	mov	r3, r0
3418a4f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3418a4f8:	d062      	beq.n	3418a5c0 <RCCEx_GetLTDCCLKFreq+0xe0>
3418a4fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3418a4fe:	d86d      	bhi.n	3418a5dc <RCCEx_GetLTDCCLKFreq+0xfc>
3418a500:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418a504:	d019      	beq.n	3418a53a <RCCEx_GetLTDCCLKFreq+0x5a>
3418a506:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418a50a:	d867      	bhi.n	3418a5dc <RCCEx_GetLTDCCLKFreq+0xfc>
3418a50c:	2b00      	cmp	r3, #0
3418a50e:	d003      	beq.n	3418a518 <RCCEx_GetLTDCCLKFreq+0x38>
3418a510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418a514:	d00c      	beq.n	3418a530 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418a516:	e061      	b.n	3418a5dc <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a518:	f7f9 fb02 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418a51c:	4603      	mov	r3, r0
3418a51e:	4618      	mov	r0, r3
3418a520:	f7fe faa2 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418a524:	4603      	mov	r3, r0
3418a526:	4618      	mov	r0, r3
3418a528:	f7fe fae1 	bl	34188aee <RCCEx_GetPCLK5Freq>
3418a52c:	60f8      	str	r0, [r7, #12]
      break;
3418a52e:	e05a      	b.n	3418a5e6 <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a530:	2007      	movs	r0, #7
3418a532:	f7fe fd85 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418a536:	60f8      	str	r0, [r7, #12]
      break;
3418a538:	e055      	b.n	3418a5e6 <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
3418a53a:	f7fb f8a9 	bl	34185690 <LL_RCC_IC16_IsEnabled>
3418a53e:	4603      	mov	r3, r0
3418a540:	2b00      	cmp	r3, #0
3418a542:	d04d      	beq.n	3418a5e0 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
3418a544:	f7fb f8c6 	bl	341856d4 <LL_RCC_IC16_GetDivider>
3418a548:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
3418a54a:	f7fb f8b5 	bl	341856b8 <LL_RCC_IC16_GetSource>
3418a54e:	4603      	mov	r3, r0
3418a550:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a554:	d029      	beq.n	3418a5aa <RCCEx_GetLTDCCLKFreq+0xca>
3418a556:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a55a:	d82f      	bhi.n	3418a5bc <RCCEx_GetLTDCCLKFreq+0xdc>
3418a55c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a560:	d01a      	beq.n	3418a598 <RCCEx_GetLTDCCLKFreq+0xb8>
3418a562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a566:	d829      	bhi.n	3418a5bc <RCCEx_GetLTDCCLKFreq+0xdc>
3418a568:	2b00      	cmp	r3, #0
3418a56a:	d003      	beq.n	3418a574 <RCCEx_GetLTDCCLKFreq+0x94>
3418a56c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a570:	d009      	beq.n	3418a586 <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
3418a572:	e023      	b.n	3418a5bc <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a574:	f7fe f960 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418a578:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418a57a:	68fa      	ldr	r2, [r7, #12]
3418a57c:	68bb      	ldr	r3, [r7, #8]
3418a57e:	fbb2 f3f3 	udiv	r3, r2, r3
3418a582:	60fb      	str	r3, [r7, #12]
            break;
3418a584:	e01b      	b.n	3418a5be <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a586:	f7fe f99d 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418a58a:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418a58c:	68fa      	ldr	r2, [r7, #12]
3418a58e:	68bb      	ldr	r3, [r7, #8]
3418a590:	fbb2 f3f3 	udiv	r3, r2, r3
3418a594:	60fb      	str	r3, [r7, #12]
            break;
3418a596:	e012      	b.n	3418a5be <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a598:	f7fe f9da 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418a59c:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418a59e:	68fa      	ldr	r2, [r7, #12]
3418a5a0:	68bb      	ldr	r3, [r7, #8]
3418a5a2:	fbb2 f3f3 	udiv	r3, r2, r3
3418a5a6:	60fb      	str	r3, [r7, #12]
            break;
3418a5a8:	e009      	b.n	3418a5be <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a5aa:	f7fe fa17 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418a5ae:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418a5b0:	68fa      	ldr	r2, [r7, #12]
3418a5b2:	68bb      	ldr	r3, [r7, #8]
3418a5b4:	fbb2 f3f3 	udiv	r3, r2, r3
3418a5b8:	60fb      	str	r3, [r7, #12]
            break;
3418a5ba:	e000      	b.n	3418a5be <RCCEx_GetLTDCCLKFreq+0xde>
            break;
3418a5bc:	bf00      	nop
      break;
3418a5be:	e00f      	b.n	3418a5e0 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
3418a5c0:	f7f9 fec2 	bl	34184348 <LL_RCC_HSI_IsReady>
3418a5c4:	4603      	mov	r3, r0
3418a5c6:	2b00      	cmp	r3, #0
3418a5c8:	d00c      	beq.n	3418a5e4 <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418a5ca:	f7f9 fecf 	bl	3418436c <LL_RCC_HSI_GetDivider>
3418a5ce:	4603      	mov	r3, r0
3418a5d0:	09db      	lsrs	r3, r3, #7
3418a5d2:	4a07      	ldr	r2, [pc, #28]	@ (3418a5f0 <RCCEx_GetLTDCCLKFreq+0x110>)
3418a5d4:	fa22 f303 	lsr.w	r3, r2, r3
3418a5d8:	60fb      	str	r3, [r7, #12]
      break;
3418a5da:	e003      	b.n	3418a5e4 <RCCEx_GetLTDCCLKFreq+0x104>
      break;
3418a5dc:	bf00      	nop
3418a5de:	e002      	b.n	3418a5e6 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
3418a5e0:	bf00      	nop
3418a5e2:	e000      	b.n	3418a5e6 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
3418a5e4:	bf00      	nop
  }

  return ltdc_frequency;
3418a5e6:	68fb      	ldr	r3, [r7, #12]
}
3418a5e8:	4618      	mov	r0, r3
3418a5ea:	3710      	adds	r7, #16
3418a5ec:	46bd      	mov	sp, r7
3418a5ee:	bd80      	pop	{r7, pc}
3418a5f0:	03d09000 	.word	0x03d09000

3418a5f4 <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
3418a5f4:	b590      	push	{r4, r7, lr}
3418a5f6:	b085      	sub	sp, #20
3418a5f8:	af00      	add	r7, sp, #0
3418a5fa:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a5fc:	2300      	movs	r3, #0
3418a5fe:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3418a600:	6878      	ldr	r0, [r7, #4]
3418a602:	f7fa fa2f 	bl	34184a64 <LL_RCC_GetMDFClockSource>
3418a606:	4603      	mov	r3, r0
3418a608:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3418a60c:	f000 80dd 	beq.w	3418a7ca <RCCEx_GetMDFCLKFreq+0x1d6>
3418a610:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3418a614:	f200 80e3 	bhi.w	3418a7de <RCCEx_GetMDFCLKFreq+0x1ea>
3418a618:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3418a61c:	f000 80d2 	beq.w	3418a7c4 <RCCEx_GetMDFCLKFreq+0x1d0>
3418a620:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3418a624:	f200 80db 	bhi.w	3418a7de <RCCEx_GetMDFCLKFreq+0x1ea>
3418a628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3418a62c:	f000 80b4 	beq.w	3418a798 <RCCEx_GetMDFCLKFreq+0x1a4>
3418a630:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3418a634:	f200 80d3 	bhi.w	3418a7de <RCCEx_GetMDFCLKFreq+0x1ea>
3418a638:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418a63c:	f000 80ba 	beq.w	3418a7b4 <RCCEx_GetMDFCLKFreq+0x1c0>
3418a640:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418a644:	f200 80cb 	bhi.w	3418a7de <RCCEx_GetMDFCLKFreq+0x1ea>
3418a648:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418a64c:	d061      	beq.n	3418a712 <RCCEx_GetMDFCLKFreq+0x11e>
3418a64e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418a652:	f200 80c4 	bhi.w	3418a7de <RCCEx_GetMDFCLKFreq+0x1ea>
3418a656:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418a65a:	d016      	beq.n	3418a68a <RCCEx_GetMDFCLKFreq+0x96>
3418a65c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418a660:	f200 80bd 	bhi.w	3418a7de <RCCEx_GetMDFCLKFreq+0x1ea>
3418a664:	2b00      	cmp	r3, #0
3418a666:	d003      	beq.n	3418a670 <RCCEx_GetMDFCLKFreq+0x7c>
3418a668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418a66c:	d008      	beq.n	3418a680 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418a66e:	e0b6      	b.n	3418a7de <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418a670:	f7f9 fa56 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418a674:	4603      	mov	r3, r0
3418a676:	4618      	mov	r0, r3
3418a678:	f7fe f9f6 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418a67c:	60f8      	str	r0, [r7, #12]
      break;
3418a67e:	e0b7      	b.n	3418a7f0 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a680:	2007      	movs	r0, #7
3418a682:	f7fe fcdd 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418a686:	60f8      	str	r0, [r7, #12]
      break;
3418a688:	e0b2      	b.n	3418a7f0 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418a68a:	f7fa fe01 	bl	34185290 <LL_RCC_IC7_IsEnabled>
3418a68e:	4603      	mov	r3, r0
3418a690:	2b00      	cmp	r3, #0
3418a692:	f000 80a6 	beq.w	3418a7e2 <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
3418a696:	f7fa fe1d 	bl	341852d4 <LL_RCC_IC7_GetDivider>
3418a69a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418a69c:	f7fa fe0c 	bl	341852b8 <LL_RCC_IC7_GetSource>
3418a6a0:	4603      	mov	r3, r0
3418a6a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a6a6:	d029      	beq.n	3418a6fc <RCCEx_GetMDFCLKFreq+0x108>
3418a6a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a6ac:	d82f      	bhi.n	3418a70e <RCCEx_GetMDFCLKFreq+0x11a>
3418a6ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a6b2:	d01a      	beq.n	3418a6ea <RCCEx_GetMDFCLKFreq+0xf6>
3418a6b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a6b8:	d829      	bhi.n	3418a70e <RCCEx_GetMDFCLKFreq+0x11a>
3418a6ba:	2b00      	cmp	r3, #0
3418a6bc:	d003      	beq.n	3418a6c6 <RCCEx_GetMDFCLKFreq+0xd2>
3418a6be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a6c2:	d009      	beq.n	3418a6d8 <RCCEx_GetMDFCLKFreq+0xe4>
            break;
3418a6c4:	e023      	b.n	3418a70e <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a6c6:	f7fe f8b7 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418a6ca:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418a6cc:	68fa      	ldr	r2, [r7, #12]
3418a6ce:	68bb      	ldr	r3, [r7, #8]
3418a6d0:	fbb2 f3f3 	udiv	r3, r2, r3
3418a6d4:	60fb      	str	r3, [r7, #12]
            break;
3418a6d6:	e01b      	b.n	3418a710 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a6d8:	f7fe f8f4 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418a6dc:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418a6de:	68fa      	ldr	r2, [r7, #12]
3418a6e0:	68bb      	ldr	r3, [r7, #8]
3418a6e2:	fbb2 f3f3 	udiv	r3, r2, r3
3418a6e6:	60fb      	str	r3, [r7, #12]
            break;
3418a6e8:	e012      	b.n	3418a710 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a6ea:	f7fe f931 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418a6ee:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418a6f0:	68fa      	ldr	r2, [r7, #12]
3418a6f2:	68bb      	ldr	r3, [r7, #8]
3418a6f4:	fbb2 f3f3 	udiv	r3, r2, r3
3418a6f8:	60fb      	str	r3, [r7, #12]
            break;
3418a6fa:	e009      	b.n	3418a710 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a6fc:	f7fe f96e 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418a700:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418a702:	68fa      	ldr	r2, [r7, #12]
3418a704:	68bb      	ldr	r3, [r7, #8]
3418a706:	fbb2 f3f3 	udiv	r3, r2, r3
3418a70a:	60fb      	str	r3, [r7, #12]
            break;
3418a70c:	e000      	b.n	3418a710 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
3418a70e:	bf00      	nop
      break;
3418a710:	e067      	b.n	3418a7e2 <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418a712:	f7fa fdfd 	bl	34185310 <LL_RCC_IC8_IsEnabled>
3418a716:	4603      	mov	r3, r0
3418a718:	2b00      	cmp	r3, #0
3418a71a:	d064      	beq.n	3418a7e6 <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
3418a71c:	f7fa fe1a 	bl	34185354 <LL_RCC_IC8_GetDivider>
3418a720:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418a722:	f7fa fe09 	bl	34185338 <LL_RCC_IC8_GetSource>
3418a726:	4603      	mov	r3, r0
3418a728:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a72c:	d029      	beq.n	3418a782 <RCCEx_GetMDFCLKFreq+0x18e>
3418a72e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a732:	d82f      	bhi.n	3418a794 <RCCEx_GetMDFCLKFreq+0x1a0>
3418a734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a738:	d01a      	beq.n	3418a770 <RCCEx_GetMDFCLKFreq+0x17c>
3418a73a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a73e:	d829      	bhi.n	3418a794 <RCCEx_GetMDFCLKFreq+0x1a0>
3418a740:	2b00      	cmp	r3, #0
3418a742:	d003      	beq.n	3418a74c <RCCEx_GetMDFCLKFreq+0x158>
3418a744:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a748:	d009      	beq.n	3418a75e <RCCEx_GetMDFCLKFreq+0x16a>
            break;
3418a74a:	e023      	b.n	3418a794 <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a74c:	f7fe f874 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418a750:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418a752:	68fa      	ldr	r2, [r7, #12]
3418a754:	68bb      	ldr	r3, [r7, #8]
3418a756:	fbb2 f3f3 	udiv	r3, r2, r3
3418a75a:	60fb      	str	r3, [r7, #12]
            break;
3418a75c:	e01b      	b.n	3418a796 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a75e:	f7fe f8b1 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418a762:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418a764:	68fa      	ldr	r2, [r7, #12]
3418a766:	68bb      	ldr	r3, [r7, #8]
3418a768:	fbb2 f3f3 	udiv	r3, r2, r3
3418a76c:	60fb      	str	r3, [r7, #12]
            break;
3418a76e:	e012      	b.n	3418a796 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a770:	f7fe f8ee 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418a774:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418a776:	68fa      	ldr	r2, [r7, #12]
3418a778:	68bb      	ldr	r3, [r7, #8]
3418a77a:	fbb2 f3f3 	udiv	r3, r2, r3
3418a77e:	60fb      	str	r3, [r7, #12]
            break;
3418a780:	e009      	b.n	3418a796 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a782:	f7fe f92b 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418a786:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418a788:	68fa      	ldr	r2, [r7, #12]
3418a78a:	68bb      	ldr	r3, [r7, #8]
3418a78c:	fbb2 f3f3 	udiv	r3, r2, r3
3418a790:	60fb      	str	r3, [r7, #12]
            break;
3418a792:	e000      	b.n	3418a796 <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
3418a794:	bf00      	nop
      break;
3418a796:	e026      	b.n	3418a7e6 <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
3418a798:	f7f9 fdd6 	bl	34184348 <LL_RCC_HSI_IsReady>
3418a79c:	4603      	mov	r3, r0
3418a79e:	2b00      	cmp	r3, #0
3418a7a0:	d023      	beq.n	3418a7ea <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418a7a2:	f7f9 fde3 	bl	3418436c <LL_RCC_HSI_GetDivider>
3418a7a6:	4603      	mov	r3, r0
3418a7a8:	09db      	lsrs	r3, r3, #7
3418a7aa:	4a14      	ldr	r2, [pc, #80]	@ (3418a7fc <RCCEx_GetMDFCLKFreq+0x208>)
3418a7ac:	fa22 f303 	lsr.w	r3, r2, r3
3418a7b0:	60fb      	str	r3, [r7, #12]
      break;
3418a7b2:	e01a      	b.n	3418a7ea <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
3418a7b4:	f7f9 fde8 	bl	34184388 <LL_RCC_MSI_IsReady>
3418a7b8:	4603      	mov	r3, r0
3418a7ba:	2b00      	cmp	r3, #0
3418a7bc:	d017      	beq.n	3418a7ee <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
3418a7be:	4b10      	ldr	r3, [pc, #64]	@ (3418a800 <RCCEx_GetMDFCLKFreq+0x20c>)
3418a7c0:	60fb      	str	r3, [r7, #12]
      break;
3418a7c2:	e014      	b.n	3418a7ee <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
3418a7c4:	4b0f      	ldr	r3, [pc, #60]	@ (3418a804 <RCCEx_GetMDFCLKFreq+0x210>)
3418a7c6:	60fb      	str	r3, [r7, #12]
      break;
3418a7c8:	e012      	b.n	3418a7f0 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
3418a7ca:	f7f9 f9a9 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418a7ce:	4604      	mov	r4, r0
3418a7d0:	f7fa fa22 	bl	34184c18 <LL_RCC_GetTIMPrescaler>
3418a7d4:	4603      	mov	r3, r0
3418a7d6:	fa24 f303 	lsr.w	r3, r4, r3
3418a7da:	60fb      	str	r3, [r7, #12]
      break;
3418a7dc:	e008      	b.n	3418a7f0 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418a7de:	bf00      	nop
3418a7e0:	e006      	b.n	3418a7f0 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418a7e2:	bf00      	nop
3418a7e4:	e004      	b.n	3418a7f0 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418a7e6:	bf00      	nop
3418a7e8:	e002      	b.n	3418a7f0 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418a7ea:	bf00      	nop
3418a7ec:	e000      	b.n	3418a7f0 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418a7ee:	bf00      	nop
  }

  return adf_frequency;
3418a7f0:	68fb      	ldr	r3, [r7, #12]
}
3418a7f2:	4618      	mov	r0, r3
3418a7f4:	3714      	adds	r7, #20
3418a7f6:	46bd      	mov	sp, r7
3418a7f8:	bd90      	pop	{r4, r7, pc}
3418a7fa:	bf00      	nop
3418a7fc:	03d09000 	.word	0x03d09000
3418a800:	003d0900 	.word	0x003d0900
3418a804:	00bb8000 	.word	0x00bb8000

3418a808 <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
3418a808:	b580      	push	{r7, lr}
3418a80a:	b084      	sub	sp, #16
3418a80c:	af00      	add	r7, sp, #0
3418a80e:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a810:	2300      	movs	r3, #0
3418a812:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
3418a814:	6878      	ldr	r0, [r7, #4]
3418a816:	f7fa f937 	bl	34184a88 <LL_RCC_GetPSSIClockSource>
3418a81a:	4603      	mov	r3, r0
3418a81c:	2b30      	cmp	r3, #48	@ 0x30
3418a81e:	d05a      	beq.n	3418a8d6 <RCCEx_GetPSSICLKFreq+0xce>
3418a820:	2b30      	cmp	r3, #48	@ 0x30
3418a822:	d866      	bhi.n	3418a8f2 <RCCEx_GetPSSICLKFreq+0xea>
3418a824:	2b20      	cmp	r3, #32
3418a826:	d013      	beq.n	3418a850 <RCCEx_GetPSSICLKFreq+0x48>
3418a828:	2b20      	cmp	r3, #32
3418a82a:	d862      	bhi.n	3418a8f2 <RCCEx_GetPSSICLKFreq+0xea>
3418a82c:	2b00      	cmp	r3, #0
3418a82e:	d002      	beq.n	3418a836 <RCCEx_GetPSSICLKFreq+0x2e>
3418a830:	2b10      	cmp	r3, #16
3418a832:	d008      	beq.n	3418a846 <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418a834:	e05d      	b.n	3418a8f2 <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418a836:	f7f9 f973 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418a83a:	4603      	mov	r3, r0
3418a83c:	4618      	mov	r0, r3
3418a83e:	f7fe f913 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418a842:	60f8      	str	r0, [r7, #12]
      break;
3418a844:	e05a      	b.n	3418a8fc <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a846:	2007      	movs	r0, #7
3418a848:	f7fe fbfa 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418a84c:	60f8      	str	r0, [r7, #12]
      break;
3418a84e:	e055      	b.n	3418a8fc <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
3418a850:	f7fb f81e 	bl	34185890 <LL_RCC_IC20_IsEnabled>
3418a854:	4603      	mov	r3, r0
3418a856:	2b00      	cmp	r3, #0
3418a858:	d04d      	beq.n	3418a8f6 <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
3418a85a:	f7fb f83b 	bl	341858d4 <LL_RCC_IC20_GetDivider>
3418a85e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
3418a860:	f7fb f82a 	bl	341858b8 <LL_RCC_IC20_GetSource>
3418a864:	4603      	mov	r3, r0
3418a866:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a86a:	d029      	beq.n	3418a8c0 <RCCEx_GetPSSICLKFreq+0xb8>
3418a86c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a870:	d82f      	bhi.n	3418a8d2 <RCCEx_GetPSSICLKFreq+0xca>
3418a872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a876:	d01a      	beq.n	3418a8ae <RCCEx_GetPSSICLKFreq+0xa6>
3418a878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a87c:	d829      	bhi.n	3418a8d2 <RCCEx_GetPSSICLKFreq+0xca>
3418a87e:	2b00      	cmp	r3, #0
3418a880:	d003      	beq.n	3418a88a <RCCEx_GetPSSICLKFreq+0x82>
3418a882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a886:	d009      	beq.n	3418a89c <RCCEx_GetPSSICLKFreq+0x94>
            break;
3418a888:	e023      	b.n	3418a8d2 <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a88a:	f7fd ffd5 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418a88e:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418a890:	68fa      	ldr	r2, [r7, #12]
3418a892:	68bb      	ldr	r3, [r7, #8]
3418a894:	fbb2 f3f3 	udiv	r3, r2, r3
3418a898:	60fb      	str	r3, [r7, #12]
            break;
3418a89a:	e01b      	b.n	3418a8d4 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a89c:	f7fe f812 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418a8a0:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418a8a2:	68fa      	ldr	r2, [r7, #12]
3418a8a4:	68bb      	ldr	r3, [r7, #8]
3418a8a6:	fbb2 f3f3 	udiv	r3, r2, r3
3418a8aa:	60fb      	str	r3, [r7, #12]
            break;
3418a8ac:	e012      	b.n	3418a8d4 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a8ae:	f7fe f84f 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418a8b2:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418a8b4:	68fa      	ldr	r2, [r7, #12]
3418a8b6:	68bb      	ldr	r3, [r7, #8]
3418a8b8:	fbb2 f3f3 	udiv	r3, r2, r3
3418a8bc:	60fb      	str	r3, [r7, #12]
            break;
3418a8be:	e009      	b.n	3418a8d4 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a8c0:	f7fe f88c 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418a8c4:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418a8c6:	68fa      	ldr	r2, [r7, #12]
3418a8c8:	68bb      	ldr	r3, [r7, #8]
3418a8ca:	fbb2 f3f3 	udiv	r3, r2, r3
3418a8ce:	60fb      	str	r3, [r7, #12]
            break;
3418a8d0:	e000      	b.n	3418a8d4 <RCCEx_GetPSSICLKFreq+0xcc>
            break;
3418a8d2:	bf00      	nop
      break;
3418a8d4:	e00f      	b.n	3418a8f6 <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
3418a8d6:	f7f9 fd37 	bl	34184348 <LL_RCC_HSI_IsReady>
3418a8da:	4603      	mov	r3, r0
3418a8dc:	2b00      	cmp	r3, #0
3418a8de:	d00c      	beq.n	3418a8fa <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418a8e0:	f7f9 fd44 	bl	3418436c <LL_RCC_HSI_GetDivider>
3418a8e4:	4603      	mov	r3, r0
3418a8e6:	09db      	lsrs	r3, r3, #7
3418a8e8:	4a07      	ldr	r2, [pc, #28]	@ (3418a908 <RCCEx_GetPSSICLKFreq+0x100>)
3418a8ea:	fa22 f303 	lsr.w	r3, r2, r3
3418a8ee:	60fb      	str	r3, [r7, #12]
      break;
3418a8f0:	e003      	b.n	3418a8fa <RCCEx_GetPSSICLKFreq+0xf2>
      break;
3418a8f2:	bf00      	nop
3418a8f4:	e002      	b.n	3418a8fc <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3418a8f6:	bf00      	nop
3418a8f8:	e000      	b.n	3418a8fc <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3418a8fa:	bf00      	nop
  }

  return pssi_frequency;
3418a8fc:	68fb      	ldr	r3, [r7, #12]
}
3418a8fe:	4618      	mov	r0, r3
3418a900:	3710      	adds	r7, #16
3418a902:	46bd      	mov	sp, r7
3418a904:	bd80      	pop	{r7, pc}
3418a906:	bf00      	nop
3418a908:	03d09000 	.word	0x03d09000

3418a90c <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
3418a90c:	b580      	push	{r7, lr}
3418a90e:	b082      	sub	sp, #8
3418a910:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a912:	2300      	movs	r3, #0
3418a914:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
3418a916:	f7fa f945 	bl	34184ba4 <LL_RCC_GetRTCClockSource>
3418a91a:	4603      	mov	r3, r0
3418a91c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418a920:	d020      	beq.n	3418a964 <RCCEx_GetRTCCLKFreq+0x58>
3418a922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418a926:	d830      	bhi.n	3418a98a <RCCEx_GetRTCCLKFreq+0x7e>
3418a928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418a92c:	d011      	beq.n	3418a952 <RCCEx_GetRTCCLKFreq+0x46>
3418a92e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418a932:	d82a      	bhi.n	3418a98a <RCCEx_GetRTCCLKFreq+0x7e>
3418a934:	2b00      	cmp	r3, #0
3418a936:	d02a      	beq.n	3418a98e <RCCEx_GetRTCCLKFreq+0x82>
3418a938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418a93c:	d000      	beq.n	3418a940 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418a93e:	e024      	b.n	3418a98a <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
3418a940:	f7f9 fd42 	bl	341843c8 <LL_RCC_LSE_IsReady>
3418a944:	4603      	mov	r3, r0
3418a946:	2b00      	cmp	r3, #0
3418a948:	d023      	beq.n	3418a992 <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
3418a94a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418a94e:	607b      	str	r3, [r7, #4]
      break;
3418a950:	e01f      	b.n	3418a992 <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
3418a952:	f7f9 fd4b 	bl	341843ec <LL_RCC_LSI_IsReady>
3418a956:	4603      	mov	r3, r0
3418a958:	2b00      	cmp	r3, #0
3418a95a:	d01c      	beq.n	3418a996 <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
3418a95c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3418a960:	607b      	str	r3, [r7, #4]
      break;
3418a962:	e018      	b.n	3418a996 <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
3418a964:	f7f9 fcde 	bl	34184324 <LL_RCC_HSE_IsReady>
3418a968:	4603      	mov	r3, r0
3418a96a:	2b00      	cmp	r3, #0
3418a96c:	d015      	beq.n	3418a99a <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
3418a96e:	4b0e      	ldr	r3, [pc, #56]	@ (3418a9a8 <RCCEx_GetRTCCLKFreq+0x9c>)
3418a970:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418a974:	0b1b      	lsrs	r3, r3, #12
3418a976:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3418a97a:	3301      	adds	r3, #1
3418a97c:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
3418a97e:	4a0b      	ldr	r2, [pc, #44]	@ (3418a9ac <RCCEx_GetRTCCLKFreq+0xa0>)
3418a980:	683b      	ldr	r3, [r7, #0]
3418a982:	fbb2 f3f3 	udiv	r3, r2, r3
3418a986:	607b      	str	r3, [r7, #4]
      break;
3418a988:	e007      	b.n	3418a99a <RCCEx_GetRTCCLKFreq+0x8e>
      break;
3418a98a:	bf00      	nop
3418a98c:	e006      	b.n	3418a99c <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418a98e:	bf00      	nop
3418a990:	e004      	b.n	3418a99c <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418a992:	bf00      	nop
3418a994:	e002      	b.n	3418a99c <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418a996:	bf00      	nop
3418a998:	e000      	b.n	3418a99c <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418a99a:	bf00      	nop
  }

  return rtc_frequency;
3418a99c:	687b      	ldr	r3, [r7, #4]
}
3418a99e:	4618      	mov	r0, r3
3418a9a0:	3708      	adds	r7, #8
3418a9a2:	46bd      	mov	sp, r7
3418a9a4:	bd80      	pop	{r7, pc}
3418a9a6:	bf00      	nop
3418a9a8:	56028000 	.word	0x56028000
3418a9ac:	02dc6c00 	.word	0x02dc6c00

3418a9b0 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
3418a9b0:	b580      	push	{r7, lr}
3418a9b2:	b084      	sub	sp, #16
3418a9b4:	af00      	add	r7, sp, #0
3418a9b6:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a9b8:	2300      	movs	r3, #0
3418a9ba:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3418a9bc:	6878      	ldr	r0, [r7, #4]
3418a9be:	f7fa f875 	bl	34184aac <LL_RCC_GetSAIClockSource>
3418a9c2:	4603      	mov	r3, r0
3418a9c4:	4a9a      	ldr	r2, [pc, #616]	@ (3418ac30 <RCCEx_GetSAICLKFreq+0x280>)
3418a9c6:	4293      	cmp	r3, r2
3418a9c8:	f000 811f 	beq.w	3418ac0a <RCCEx_GetSAICLKFreq+0x25a>
3418a9cc:	4a98      	ldr	r2, [pc, #608]	@ (3418ac30 <RCCEx_GetSAICLKFreq+0x280>)
3418a9ce:	4293      	cmp	r3, r2
3418a9d0:	f200 8120 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418a9d4:	4a97      	ldr	r2, [pc, #604]	@ (3418ac34 <RCCEx_GetSAICLKFreq+0x284>)
3418a9d6:	4293      	cmp	r3, r2
3418a9d8:	f000 8117 	beq.w	3418ac0a <RCCEx_GetSAICLKFreq+0x25a>
3418a9dc:	4a95      	ldr	r2, [pc, #596]	@ (3418ac34 <RCCEx_GetSAICLKFreq+0x284>)
3418a9de:	4293      	cmp	r3, r2
3418a9e0:	f200 8118 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418a9e4:	4a94      	ldr	r2, [pc, #592]	@ (3418ac38 <RCCEx_GetSAICLKFreq+0x288>)
3418a9e6:	4293      	cmp	r3, r2
3418a9e8:	f000 810c 	beq.w	3418ac04 <RCCEx_GetSAICLKFreq+0x254>
3418a9ec:	4a92      	ldr	r2, [pc, #584]	@ (3418ac38 <RCCEx_GetSAICLKFreq+0x288>)
3418a9ee:	4293      	cmp	r3, r2
3418a9f0:	f200 8110 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418a9f4:	4a91      	ldr	r2, [pc, #580]	@ (3418ac3c <RCCEx_GetSAICLKFreq+0x28c>)
3418a9f6:	4293      	cmp	r3, r2
3418a9f8:	f000 8104 	beq.w	3418ac04 <RCCEx_GetSAICLKFreq+0x254>
3418a9fc:	4a8f      	ldr	r2, [pc, #572]	@ (3418ac3c <RCCEx_GetSAICLKFreq+0x28c>)
3418a9fe:	4293      	cmp	r3, r2
3418aa00:	f200 8108 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418aa04:	4a8e      	ldr	r2, [pc, #568]	@ (3418ac40 <RCCEx_GetSAICLKFreq+0x290>)
3418aa06:	4293      	cmp	r3, r2
3418aa08:	f000 80e6 	beq.w	3418abd8 <RCCEx_GetSAICLKFreq+0x228>
3418aa0c:	4a8c      	ldr	r2, [pc, #560]	@ (3418ac40 <RCCEx_GetSAICLKFreq+0x290>)
3418aa0e:	4293      	cmp	r3, r2
3418aa10:	f200 8100 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418aa14:	4a8b      	ldr	r2, [pc, #556]	@ (3418ac44 <RCCEx_GetSAICLKFreq+0x294>)
3418aa16:	4293      	cmp	r3, r2
3418aa18:	f000 80de 	beq.w	3418abd8 <RCCEx_GetSAICLKFreq+0x228>
3418aa1c:	4a89      	ldr	r2, [pc, #548]	@ (3418ac44 <RCCEx_GetSAICLKFreq+0x294>)
3418aa1e:	4293      	cmp	r3, r2
3418aa20:	f200 80f8 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418aa24:	4a88      	ldr	r2, [pc, #544]	@ (3418ac48 <RCCEx_GetSAICLKFreq+0x298>)
3418aa26:	4293      	cmp	r3, r2
3418aa28:	f000 80e4 	beq.w	3418abf4 <RCCEx_GetSAICLKFreq+0x244>
3418aa2c:	4a86      	ldr	r2, [pc, #536]	@ (3418ac48 <RCCEx_GetSAICLKFreq+0x298>)
3418aa2e:	4293      	cmp	r3, r2
3418aa30:	f200 80f0 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418aa34:	4a85      	ldr	r2, [pc, #532]	@ (3418ac4c <RCCEx_GetSAICLKFreq+0x29c>)
3418aa36:	4293      	cmp	r3, r2
3418aa38:	f000 80dc 	beq.w	3418abf4 <RCCEx_GetSAICLKFreq+0x244>
3418aa3c:	4a83      	ldr	r2, [pc, #524]	@ (3418ac4c <RCCEx_GetSAICLKFreq+0x29c>)
3418aa3e:	4293      	cmp	r3, r2
3418aa40:	f200 80e8 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418aa44:	4a82      	ldr	r2, [pc, #520]	@ (3418ac50 <RCCEx_GetSAICLKFreq+0x2a0>)
3418aa46:	4293      	cmp	r3, r2
3418aa48:	f000 8083 	beq.w	3418ab52 <RCCEx_GetSAICLKFreq+0x1a2>
3418aa4c:	4a80      	ldr	r2, [pc, #512]	@ (3418ac50 <RCCEx_GetSAICLKFreq+0x2a0>)
3418aa4e:	4293      	cmp	r3, r2
3418aa50:	f200 80e0 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418aa54:	4a7f      	ldr	r2, [pc, #508]	@ (3418ac54 <RCCEx_GetSAICLKFreq+0x2a4>)
3418aa56:	4293      	cmp	r3, r2
3418aa58:	d07b      	beq.n	3418ab52 <RCCEx_GetSAICLKFreq+0x1a2>
3418aa5a:	4a7e      	ldr	r2, [pc, #504]	@ (3418ac54 <RCCEx_GetSAICLKFreq+0x2a4>)
3418aa5c:	4293      	cmp	r3, r2
3418aa5e:	f200 80d9 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418aa62:	4a7d      	ldr	r2, [pc, #500]	@ (3418ac58 <RCCEx_GetSAICLKFreq+0x2a8>)
3418aa64:	4293      	cmp	r3, r2
3418aa66:	d030      	beq.n	3418aaca <RCCEx_GetSAICLKFreq+0x11a>
3418aa68:	4a7b      	ldr	r2, [pc, #492]	@ (3418ac58 <RCCEx_GetSAICLKFreq+0x2a8>)
3418aa6a:	4293      	cmp	r3, r2
3418aa6c:	f200 80d2 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418aa70:	4a7a      	ldr	r2, [pc, #488]	@ (3418ac5c <RCCEx_GetSAICLKFreq+0x2ac>)
3418aa72:	4293      	cmp	r3, r2
3418aa74:	d029      	beq.n	3418aaca <RCCEx_GetSAICLKFreq+0x11a>
3418aa76:	4a79      	ldr	r2, [pc, #484]	@ (3418ac5c <RCCEx_GetSAICLKFreq+0x2ac>)
3418aa78:	4293      	cmp	r3, r2
3418aa7a:	f200 80cb 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418aa7e:	4a78      	ldr	r2, [pc, #480]	@ (3418ac60 <RCCEx_GetSAICLKFreq+0x2b0>)
3418aa80:	4293      	cmp	r3, r2
3418aa82:	d01d      	beq.n	3418aac0 <RCCEx_GetSAICLKFreq+0x110>
3418aa84:	4a76      	ldr	r2, [pc, #472]	@ (3418ac60 <RCCEx_GetSAICLKFreq+0x2b0>)
3418aa86:	4293      	cmp	r3, r2
3418aa88:	f200 80c4 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418aa8c:	4a75      	ldr	r2, [pc, #468]	@ (3418ac64 <RCCEx_GetSAICLKFreq+0x2b4>)
3418aa8e:	4293      	cmp	r3, r2
3418aa90:	d016      	beq.n	3418aac0 <RCCEx_GetSAICLKFreq+0x110>
3418aa92:	4a74      	ldr	r2, [pc, #464]	@ (3418ac64 <RCCEx_GetSAICLKFreq+0x2b4>)
3418aa94:	4293      	cmp	r3, r2
3418aa96:	f200 80bd 	bhi.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
3418aa9a:	4a73      	ldr	r2, [pc, #460]	@ (3418ac68 <RCCEx_GetSAICLKFreq+0x2b8>)
3418aa9c:	4293      	cmp	r3, r2
3418aa9e:	d003      	beq.n	3418aaa8 <RCCEx_GetSAICLKFreq+0xf8>
3418aaa0:	4a72      	ldr	r2, [pc, #456]	@ (3418ac6c <RCCEx_GetSAICLKFreq+0x2bc>)
3418aaa2:	4293      	cmp	r3, r2
3418aaa4:	f040 80b6 	bne.w	3418ac14 <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418aaa8:	f7f9 f83a 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418aaac:	4603      	mov	r3, r0
3418aaae:	4618      	mov	r0, r3
3418aab0:	f7fd ffda 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418aab4:	4603      	mov	r3, r0
3418aab6:	4618      	mov	r0, r3
3418aab8:	f7fd fff7 	bl	34188aaa <RCCEx_GetPCLK2Freq>
3418aabc:	60f8      	str	r0, [r7, #12]
      break;
3418aabe:	e0b2      	b.n	3418ac26 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418aac0:	2007      	movs	r0, #7
3418aac2:	f7fe fabd 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418aac6:	60f8      	str	r0, [r7, #12]
      break;
3418aac8:	e0ad      	b.n	3418ac26 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418aaca:	f7fa fbe1 	bl	34185290 <LL_RCC_IC7_IsEnabled>
3418aace:	4603      	mov	r3, r0
3418aad0:	2b00      	cmp	r3, #0
3418aad2:	f000 80a1 	beq.w	3418ac18 <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418aad6:	f7fa fbfd 	bl	341852d4 <LL_RCC_IC7_GetDivider>
3418aada:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418aadc:	f7fa fbec 	bl	341852b8 <LL_RCC_IC7_GetSource>
3418aae0:	4603      	mov	r3, r0
3418aae2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aae6:	d029      	beq.n	3418ab3c <RCCEx_GetSAICLKFreq+0x18c>
3418aae8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aaec:	d82f      	bhi.n	3418ab4e <RCCEx_GetSAICLKFreq+0x19e>
3418aaee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aaf2:	d01a      	beq.n	3418ab2a <RCCEx_GetSAICLKFreq+0x17a>
3418aaf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aaf8:	d829      	bhi.n	3418ab4e <RCCEx_GetSAICLKFreq+0x19e>
3418aafa:	2b00      	cmp	r3, #0
3418aafc:	d003      	beq.n	3418ab06 <RCCEx_GetSAICLKFreq+0x156>
3418aafe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ab02:	d009      	beq.n	3418ab18 <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418ab04:	e023      	b.n	3418ab4e <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ab06:	f7fd fe97 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418ab0a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418ab0c:	68fa      	ldr	r2, [r7, #12]
3418ab0e:	68bb      	ldr	r3, [r7, #8]
3418ab10:	fbb2 f3f3 	udiv	r3, r2, r3
3418ab14:	60fb      	str	r3, [r7, #12]
            break;
3418ab16:	e01b      	b.n	3418ab50 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418ab18:	f7fd fed4 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418ab1c:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418ab1e:	68fa      	ldr	r2, [r7, #12]
3418ab20:	68bb      	ldr	r3, [r7, #8]
3418ab22:	fbb2 f3f3 	udiv	r3, r2, r3
3418ab26:	60fb      	str	r3, [r7, #12]
            break;
3418ab28:	e012      	b.n	3418ab50 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ab2a:	f7fd ff11 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418ab2e:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418ab30:	68fa      	ldr	r2, [r7, #12]
3418ab32:	68bb      	ldr	r3, [r7, #8]
3418ab34:	fbb2 f3f3 	udiv	r3, r2, r3
3418ab38:	60fb      	str	r3, [r7, #12]
            break;
3418ab3a:	e009      	b.n	3418ab50 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418ab3c:	f7fd ff4e 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418ab40:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418ab42:	68fa      	ldr	r2, [r7, #12]
3418ab44:	68bb      	ldr	r3, [r7, #8]
3418ab46:	fbb2 f3f3 	udiv	r3, r2, r3
3418ab4a:	60fb      	str	r3, [r7, #12]
            break;
3418ab4c:	e000      	b.n	3418ab50 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
3418ab4e:	bf00      	nop
        }
      }
      break;
3418ab50:	e062      	b.n	3418ac18 <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418ab52:	f7fa fbdd 	bl	34185310 <LL_RCC_IC8_IsEnabled>
3418ab56:	4603      	mov	r3, r0
3418ab58:	2b00      	cmp	r3, #0
3418ab5a:	d05f      	beq.n	3418ac1c <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418ab5c:	f7fa fbfa 	bl	34185354 <LL_RCC_IC8_GetDivider>
3418ab60:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418ab62:	f7fa fbe9 	bl	34185338 <LL_RCC_IC8_GetSource>
3418ab66:	4603      	mov	r3, r0
3418ab68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ab6c:	d029      	beq.n	3418abc2 <RCCEx_GetSAICLKFreq+0x212>
3418ab6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ab72:	d82f      	bhi.n	3418abd4 <RCCEx_GetSAICLKFreq+0x224>
3418ab74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ab78:	d01a      	beq.n	3418abb0 <RCCEx_GetSAICLKFreq+0x200>
3418ab7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ab7e:	d829      	bhi.n	3418abd4 <RCCEx_GetSAICLKFreq+0x224>
3418ab80:	2b00      	cmp	r3, #0
3418ab82:	d003      	beq.n	3418ab8c <RCCEx_GetSAICLKFreq+0x1dc>
3418ab84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ab88:	d009      	beq.n	3418ab9e <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418ab8a:	e023      	b.n	3418abd4 <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ab8c:	f7fd fe54 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418ab90:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418ab92:	68fa      	ldr	r2, [r7, #12]
3418ab94:	68bb      	ldr	r3, [r7, #8]
3418ab96:	fbb2 f3f3 	udiv	r3, r2, r3
3418ab9a:	60fb      	str	r3, [r7, #12]
            break;
3418ab9c:	e01b      	b.n	3418abd6 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418ab9e:	f7fd fe91 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418aba2:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418aba4:	68fa      	ldr	r2, [r7, #12]
3418aba6:	68bb      	ldr	r3, [r7, #8]
3418aba8:	fbb2 f3f3 	udiv	r3, r2, r3
3418abac:	60fb      	str	r3, [r7, #12]
            break;
3418abae:	e012      	b.n	3418abd6 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418abb0:	f7fd fece 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418abb4:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418abb6:	68fa      	ldr	r2, [r7, #12]
3418abb8:	68bb      	ldr	r3, [r7, #8]
3418abba:	fbb2 f3f3 	udiv	r3, r2, r3
3418abbe:	60fb      	str	r3, [r7, #12]
            break;
3418abc0:	e009      	b.n	3418abd6 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418abc2:	f7fd ff0b 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418abc6:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418abc8:	68fa      	ldr	r2, [r7, #12]
3418abca:	68bb      	ldr	r3, [r7, #8]
3418abcc:	fbb2 f3f3 	udiv	r3, r2, r3
3418abd0:	60fb      	str	r3, [r7, #12]
            break;
3418abd2:	e000      	b.n	3418abd6 <RCCEx_GetSAICLKFreq+0x226>
            break;
3418abd4:	bf00      	nop
        }
      }
      break;
3418abd6:	e021      	b.n	3418ac1c <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418abd8:	f7f9 fbb6 	bl	34184348 <LL_RCC_HSI_IsReady>
3418abdc:	4603      	mov	r3, r0
3418abde:	2b00      	cmp	r3, #0
3418abe0:	d01e      	beq.n	3418ac20 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418abe2:	f7f9 fbc3 	bl	3418436c <LL_RCC_HSI_GetDivider>
3418abe6:	4603      	mov	r3, r0
3418abe8:	09db      	lsrs	r3, r3, #7
3418abea:	4a21      	ldr	r2, [pc, #132]	@ (3418ac70 <RCCEx_GetSAICLKFreq+0x2c0>)
3418abec:	fa22 f303 	lsr.w	r3, r2, r3
3418abf0:	60fb      	str	r3, [r7, #12]
      }
      break;
3418abf2:	e015      	b.n	3418ac20 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418abf4:	f7f9 fbc8 	bl	34184388 <LL_RCC_MSI_IsReady>
3418abf8:	4603      	mov	r3, r0
3418abfa:	2b00      	cmp	r3, #0
3418abfc:	d012      	beq.n	3418ac24 <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
3418abfe:	4b1d      	ldr	r3, [pc, #116]	@ (3418ac74 <RCCEx_GetSAICLKFreq+0x2c4>)
3418ac00:	60fb      	str	r3, [r7, #12]
      }
      break;
3418ac02:	e00f      	b.n	3418ac24 <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
3418ac04:	4b1c      	ldr	r3, [pc, #112]	@ (3418ac78 <RCCEx_GetSAICLKFreq+0x2c8>)
3418ac06:	60fb      	str	r3, [r7, #12]
      break;
3418ac08:	e00d      	b.n	3418ac26 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3418ac0a:	2007      	movs	r0, #7
3418ac0c:	f000 f920 	bl	3418ae50 <RCCEx_GetSPDIFRXCLKFreq>
3418ac10:	60f8      	str	r0, [r7, #12]
      break;
3418ac12:	e008      	b.n	3418ac26 <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
3418ac14:	bf00      	nop
3418ac16:	e006      	b.n	3418ac26 <RCCEx_GetSAICLKFreq+0x276>
      break;
3418ac18:	bf00      	nop
3418ac1a:	e004      	b.n	3418ac26 <RCCEx_GetSAICLKFreq+0x276>
      break;
3418ac1c:	bf00      	nop
3418ac1e:	e002      	b.n	3418ac26 <RCCEx_GetSAICLKFreq+0x276>
      break;
3418ac20:	bf00      	nop
3418ac22:	e000      	b.n	3418ac26 <RCCEx_GetSAICLKFreq+0x276>
      break;
3418ac24:	bf00      	nop
  }

  return sai_frequency;
3418ac26:	68fb      	ldr	r3, [r7, #12]
}
3418ac28:	4618      	mov	r0, r3
3418ac2a:	3710      	adds	r7, #16
3418ac2c:	46bd      	mov	sp, r7
3418ac2e:	bd80      	pop	{r7, pc}
3418ac30:	07071818 	.word	0x07071818
3418ac34:	07071418 	.word	0x07071418
3418ac38:	07061818 	.word	0x07061818
3418ac3c:	07061418 	.word	0x07061418
3418ac40:	07051818 	.word	0x07051818
3418ac44:	07051418 	.word	0x07051418
3418ac48:	07041818 	.word	0x07041818
3418ac4c:	07041418 	.word	0x07041418
3418ac50:	07031818 	.word	0x07031818
3418ac54:	07031418 	.word	0x07031418
3418ac58:	07021818 	.word	0x07021818
3418ac5c:	07021418 	.word	0x07021418
3418ac60:	07011818 	.word	0x07011818
3418ac64:	07011418 	.word	0x07011418
3418ac68:	07001418 	.word	0x07001418
3418ac6c:	07001818 	.word	0x07001818
3418ac70:	03d09000 	.word	0x03d09000
3418ac74:	003d0900 	.word	0x003d0900
3418ac78:	00bb8000 	.word	0x00bb8000

3418ac7c <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
3418ac7c:	b580      	push	{r7, lr}
3418ac7e:	b084      	sub	sp, #16
3418ac80:	af00      	add	r7, sp, #0
3418ac82:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418ac84:	2300      	movs	r3, #0
3418ac86:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3418ac88:	6878      	ldr	r0, [r7, #4]
3418ac8a:	f7f9 ff1b 	bl	34184ac4 <LL_RCC_GetSDMMCClockSource>
3418ac8e:	4603      	mov	r3, r0
3418ac90:	4a67      	ldr	r2, [pc, #412]	@ (3418ae30 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3418ac92:	4293      	cmp	r3, r2
3418ac94:	d07e      	beq.n	3418ad94 <RCCEx_GetSDMMCCLKFreq+0x118>
3418ac96:	4a66      	ldr	r2, [pc, #408]	@ (3418ae30 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3418ac98:	4293      	cmp	r3, r2
3418ac9a:	f200 80be 	bhi.w	3418ae1a <RCCEx_GetSDMMCCLKFreq+0x19e>
3418ac9e:	4a65      	ldr	r2, [pc, #404]	@ (3418ae34 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3418aca0:	4293      	cmp	r3, r2
3418aca2:	d077      	beq.n	3418ad94 <RCCEx_GetSDMMCCLKFreq+0x118>
3418aca4:	4a63      	ldr	r2, [pc, #396]	@ (3418ae34 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3418aca6:	4293      	cmp	r3, r2
3418aca8:	f200 80b7 	bhi.w	3418ae1a <RCCEx_GetSDMMCCLKFreq+0x19e>
3418acac:	4a62      	ldr	r2, [pc, #392]	@ (3418ae38 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3418acae:	4293      	cmp	r3, r2
3418acb0:	d02c      	beq.n	3418ad0c <RCCEx_GetSDMMCCLKFreq+0x90>
3418acb2:	4a61      	ldr	r2, [pc, #388]	@ (3418ae38 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3418acb4:	4293      	cmp	r3, r2
3418acb6:	f200 80b0 	bhi.w	3418ae1a <RCCEx_GetSDMMCCLKFreq+0x19e>
3418acba:	4a60      	ldr	r2, [pc, #384]	@ (3418ae3c <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3418acbc:	4293      	cmp	r3, r2
3418acbe:	d025      	beq.n	3418ad0c <RCCEx_GetSDMMCCLKFreq+0x90>
3418acc0:	4a5e      	ldr	r2, [pc, #376]	@ (3418ae3c <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3418acc2:	4293      	cmp	r3, r2
3418acc4:	f200 80a9 	bhi.w	3418ae1a <RCCEx_GetSDMMCCLKFreq+0x19e>
3418acc8:	4a5d      	ldr	r2, [pc, #372]	@ (3418ae40 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3418acca:	4293      	cmp	r3, r2
3418accc:	d019      	beq.n	3418ad02 <RCCEx_GetSDMMCCLKFreq+0x86>
3418acce:	4a5c      	ldr	r2, [pc, #368]	@ (3418ae40 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3418acd0:	4293      	cmp	r3, r2
3418acd2:	f200 80a2 	bhi.w	3418ae1a <RCCEx_GetSDMMCCLKFreq+0x19e>
3418acd6:	4a5b      	ldr	r2, [pc, #364]	@ (3418ae44 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3418acd8:	4293      	cmp	r3, r2
3418acda:	d012      	beq.n	3418ad02 <RCCEx_GetSDMMCCLKFreq+0x86>
3418acdc:	4a59      	ldr	r2, [pc, #356]	@ (3418ae44 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3418acde:	4293      	cmp	r3, r2
3418ace0:	f200 809b 	bhi.w	3418ae1a <RCCEx_GetSDMMCCLKFreq+0x19e>
3418ace4:	4a58      	ldr	r2, [pc, #352]	@ (3418ae48 <RCCEx_GetSDMMCCLKFreq+0x1cc>)
3418ace6:	4293      	cmp	r3, r2
3418ace8:	d003      	beq.n	3418acf2 <RCCEx_GetSDMMCCLKFreq+0x76>
3418acea:	4a58      	ldr	r2, [pc, #352]	@ (3418ae4c <RCCEx_GetSDMMCCLKFreq+0x1d0>)
3418acec:	4293      	cmp	r3, r2
3418acee:	f040 8094 	bne.w	3418ae1a <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418acf2:	f7f8 ff15 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418acf6:	4603      	mov	r3, r0
3418acf8:	4618      	mov	r0, r3
3418acfa:	f7fd feb5 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418acfe:	60f8      	str	r0, [r7, #12]
      break;
3418ad00:	e090      	b.n	3418ae24 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418ad02:	2007      	movs	r0, #7
3418ad04:	f7fe f99c 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418ad08:	60f8      	str	r0, [r7, #12]
      break;
3418ad0a:	e08b      	b.n	3418ae24 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418ad0c:	f7fa fa40 	bl	34185190 <LL_RCC_IC4_IsEnabled>
3418ad10:	4603      	mov	r3, r0
3418ad12:	2b00      	cmp	r3, #0
3418ad14:	f000 8083 	beq.w	3418ae1e <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418ad18:	f7fa fa5c 	bl	341851d4 <LL_RCC_IC4_GetDivider>
3418ad1c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418ad1e:	f7fa fa4b 	bl	341851b8 <LL_RCC_IC4_GetSource>
3418ad22:	4603      	mov	r3, r0
3418ad24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ad28:	d029      	beq.n	3418ad7e <RCCEx_GetSDMMCCLKFreq+0x102>
3418ad2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ad2e:	d82f      	bhi.n	3418ad90 <RCCEx_GetSDMMCCLKFreq+0x114>
3418ad30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ad34:	d01a      	beq.n	3418ad6c <RCCEx_GetSDMMCCLKFreq+0xf0>
3418ad36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ad3a:	d829      	bhi.n	3418ad90 <RCCEx_GetSDMMCCLKFreq+0x114>
3418ad3c:	2b00      	cmp	r3, #0
3418ad3e:	d003      	beq.n	3418ad48 <RCCEx_GetSDMMCCLKFreq+0xcc>
3418ad40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ad44:	d009      	beq.n	3418ad5a <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418ad46:	e023      	b.n	3418ad90 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ad48:	f7fd fd76 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418ad4c:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418ad4e:	68fa      	ldr	r2, [r7, #12]
3418ad50:	68bb      	ldr	r3, [r7, #8]
3418ad52:	fbb2 f3f3 	udiv	r3, r2, r3
3418ad56:	60fb      	str	r3, [r7, #12]
            break;
3418ad58:	e01b      	b.n	3418ad92 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418ad5a:	f7fd fdb3 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418ad5e:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418ad60:	68fa      	ldr	r2, [r7, #12]
3418ad62:	68bb      	ldr	r3, [r7, #8]
3418ad64:	fbb2 f3f3 	udiv	r3, r2, r3
3418ad68:	60fb      	str	r3, [r7, #12]
            break;
3418ad6a:	e012      	b.n	3418ad92 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ad6c:	f7fd fdf0 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418ad70:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418ad72:	68fa      	ldr	r2, [r7, #12]
3418ad74:	68bb      	ldr	r3, [r7, #8]
3418ad76:	fbb2 f3f3 	udiv	r3, r2, r3
3418ad7a:	60fb      	str	r3, [r7, #12]
            break;
3418ad7c:	e009      	b.n	3418ad92 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418ad7e:	f7fd fe2d 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418ad82:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418ad84:	68fa      	ldr	r2, [r7, #12]
3418ad86:	68bb      	ldr	r3, [r7, #8]
3418ad88:	fbb2 f3f3 	udiv	r3, r2, r3
3418ad8c:	60fb      	str	r3, [r7, #12]
            break;
3418ad8e:	e000      	b.n	3418ad92 <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
3418ad90:	bf00      	nop
        }
      }
      break;
3418ad92:	e044      	b.n	3418ae1e <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
3418ad94:	f7fa fa3c 	bl	34185210 <LL_RCC_IC5_IsEnabled>
3418ad98:	4603      	mov	r3, r0
3418ad9a:	2b00      	cmp	r3, #0
3418ad9c:	d041      	beq.n	3418ae22 <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
3418ad9e:	f7fa fa59 	bl	34185254 <LL_RCC_IC5_GetDivider>
3418ada2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
3418ada4:	f7fa fa48 	bl	34185238 <LL_RCC_IC5_GetSource>
3418ada8:	4603      	mov	r3, r0
3418adaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418adae:	d029      	beq.n	3418ae04 <RCCEx_GetSDMMCCLKFreq+0x188>
3418adb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418adb4:	d82f      	bhi.n	3418ae16 <RCCEx_GetSDMMCCLKFreq+0x19a>
3418adb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418adba:	d01a      	beq.n	3418adf2 <RCCEx_GetSDMMCCLKFreq+0x176>
3418adbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418adc0:	d829      	bhi.n	3418ae16 <RCCEx_GetSDMMCCLKFreq+0x19a>
3418adc2:	2b00      	cmp	r3, #0
3418adc4:	d003      	beq.n	3418adce <RCCEx_GetSDMMCCLKFreq+0x152>
3418adc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418adca:	d009      	beq.n	3418ade0 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418adcc:	e023      	b.n	3418ae16 <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418adce:	f7fd fd33 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418add2:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418add4:	68fa      	ldr	r2, [r7, #12]
3418add6:	68bb      	ldr	r3, [r7, #8]
3418add8:	fbb2 f3f3 	udiv	r3, r2, r3
3418addc:	60fb      	str	r3, [r7, #12]
            break;
3418adde:	e01b      	b.n	3418ae18 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418ade0:	f7fd fd70 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418ade4:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418ade6:	68fa      	ldr	r2, [r7, #12]
3418ade8:	68bb      	ldr	r3, [r7, #8]
3418adea:	fbb2 f3f3 	udiv	r3, r2, r3
3418adee:	60fb      	str	r3, [r7, #12]
            break;
3418adf0:	e012      	b.n	3418ae18 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418adf2:	f7fd fdad 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418adf6:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418adf8:	68fa      	ldr	r2, [r7, #12]
3418adfa:	68bb      	ldr	r3, [r7, #8]
3418adfc:	fbb2 f3f3 	udiv	r3, r2, r3
3418ae00:	60fb      	str	r3, [r7, #12]
            break;
3418ae02:	e009      	b.n	3418ae18 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418ae04:	f7fd fdea 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418ae08:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418ae0a:	68fa      	ldr	r2, [r7, #12]
3418ae0c:	68bb      	ldr	r3, [r7, #8]
3418ae0e:	fbb2 f3f3 	udiv	r3, r2, r3
3418ae12:	60fb      	str	r3, [r7, #12]
            break;
3418ae14:	e000      	b.n	3418ae18 <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
3418ae16:	bf00      	nop
        }
      }
      break;
3418ae18:	e003      	b.n	3418ae22 <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
3418ae1a:	bf00      	nop
3418ae1c:	e002      	b.n	3418ae24 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
3418ae1e:	bf00      	nop
3418ae20:	e000      	b.n	3418ae24 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
3418ae22:	bf00      	nop
  }

  return sdmmc_frequency;
3418ae24:	68fb      	ldr	r3, [r7, #12]
}
3418ae26:	4618      	mov	r0, r3
3418ae28:	3710      	adds	r7, #16
3418ae2a:	46bd      	mov	sp, r7
3418ae2c:	bd80      	pop	{r7, pc}
3418ae2e:	bf00      	nop
3418ae30:	0303041c 	.word	0x0303041c
3418ae34:	0303001c 	.word	0x0303001c
3418ae38:	0302041c 	.word	0x0302041c
3418ae3c:	0302001c 	.word	0x0302001c
3418ae40:	0301041c 	.word	0x0301041c
3418ae44:	0301001c 	.word	0x0301001c
3418ae48:	0300001c 	.word	0x0300001c
3418ae4c:	0300041c 	.word	0x0300041c

3418ae50 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
3418ae50:	b580      	push	{r7, lr}
3418ae52:	b084      	sub	sp, #16
3418ae54:	af00      	add	r7, sp, #0
3418ae56:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
3418ae58:	2300      	movs	r3, #0
3418ae5a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
3418ae5c:	6878      	ldr	r0, [r7, #4]
3418ae5e:	f7f9 fe3d 	bl	34184adc <LL_RCC_GetSPDIFRXClockSource>
3418ae62:	4603      	mov	r3, r0
3418ae64:	2b06      	cmp	r3, #6
3418ae66:	f200 80c2 	bhi.w	3418afee <RCCEx_GetSPDIFRXCLKFreq+0x19e>
3418ae6a:	a201      	add	r2, pc, #4	@ (adr r2, 3418ae70 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
3418ae6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418ae70:	3418ae8d 	.word	0x3418ae8d
3418ae74:	3418aea5 	.word	0x3418aea5
3418ae78:	3418aeaf 	.word	0x3418aeaf
3418ae7c:	3418af37 	.word	0x3418af37
3418ae80:	3418afd9 	.word	0x3418afd9
3418ae84:	3418afbd 	.word	0x3418afbd
3418ae88:	3418afe9 	.word	0x3418afe9
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418ae8c:	f7f8 fe48 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418ae90:	4603      	mov	r3, r0
3418ae92:	4618      	mov	r0, r3
3418ae94:	f7fd fde8 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418ae98:	4603      	mov	r3, r0
3418ae9a:	4618      	mov	r0, r3
3418ae9c:	f7fd fdf5 	bl	34188a8a <RCCEx_GetPCLK1Freq>
3418aea0:	60f8      	str	r0, [r7, #12]
      break;
3418aea2:	e0ad      	b.n	3418b000 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418aea4:	2007      	movs	r0, #7
3418aea6:	f7fe f8cb 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418aeaa:	60f8      	str	r0, [r7, #12]
      break;
3418aeac:	e0a8      	b.n	3418b000 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418aeae:	f7fa f9ef 	bl	34185290 <LL_RCC_IC7_IsEnabled>
3418aeb2:	4603      	mov	r3, r0
3418aeb4:	2b00      	cmp	r3, #0
3418aeb6:	f000 809c 	beq.w	3418aff2 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418aeba:	f7fa fa0b 	bl	341852d4 <LL_RCC_IC7_GetDivider>
3418aebe:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418aec0:	f7fa f9fa 	bl	341852b8 <LL_RCC_IC7_GetSource>
3418aec4:	4603      	mov	r3, r0
3418aec6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aeca:	d029      	beq.n	3418af20 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
3418aecc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aed0:	d82f      	bhi.n	3418af32 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3418aed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aed6:	d01a      	beq.n	3418af0e <RCCEx_GetSPDIFRXCLKFreq+0xbe>
3418aed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aedc:	d829      	bhi.n	3418af32 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3418aede:	2b00      	cmp	r3, #0
3418aee0:	d003      	beq.n	3418aeea <RCCEx_GetSPDIFRXCLKFreq+0x9a>
3418aee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418aee6:	d009      	beq.n	3418aefc <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418aee8:	e023      	b.n	3418af32 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418aeea:	f7fd fca5 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418aeee:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418aef0:	68fa      	ldr	r2, [r7, #12]
3418aef2:	68bb      	ldr	r3, [r7, #8]
3418aef4:	fbb2 f3f3 	udiv	r3, r2, r3
3418aef8:	60fb      	str	r3, [r7, #12]
            break;
3418aefa:	e01b      	b.n	3418af34 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418aefc:	f7fd fce2 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418af00:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418af02:	68fa      	ldr	r2, [r7, #12]
3418af04:	68bb      	ldr	r3, [r7, #8]
3418af06:	fbb2 f3f3 	udiv	r3, r2, r3
3418af0a:	60fb      	str	r3, [r7, #12]
            break;
3418af0c:	e012      	b.n	3418af34 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418af0e:	f7fd fd1f 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418af12:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418af14:	68fa      	ldr	r2, [r7, #12]
3418af16:	68bb      	ldr	r3, [r7, #8]
3418af18:	fbb2 f3f3 	udiv	r3, r2, r3
3418af1c:	60fb      	str	r3, [r7, #12]
            break;
3418af1e:	e009      	b.n	3418af34 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418af20:	f7fd fd5c 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418af24:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418af26:	68fa      	ldr	r2, [r7, #12]
3418af28:	68bb      	ldr	r3, [r7, #8]
3418af2a:	fbb2 f3f3 	udiv	r3, r2, r3
3418af2e:	60fb      	str	r3, [r7, #12]
            break;
3418af30:	e000      	b.n	3418af34 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
3418af32:	bf00      	nop
        }
      }
      break;
3418af34:	e05d      	b.n	3418aff2 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418af36:	f7fa f9eb 	bl	34185310 <LL_RCC_IC8_IsEnabled>
3418af3a:	4603      	mov	r3, r0
3418af3c:	2b00      	cmp	r3, #0
3418af3e:	d05a      	beq.n	3418aff6 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418af40:	f7fa fa08 	bl	34185354 <LL_RCC_IC8_GetDivider>
3418af44:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418af46:	f7fa f9f7 	bl	34185338 <LL_RCC_IC8_GetSource>
3418af4a:	4603      	mov	r3, r0
3418af4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418af50:	d029      	beq.n	3418afa6 <RCCEx_GetSPDIFRXCLKFreq+0x156>
3418af52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418af56:	d82f      	bhi.n	3418afb8 <RCCEx_GetSPDIFRXCLKFreq+0x168>
3418af58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418af5c:	d01a      	beq.n	3418af94 <RCCEx_GetSPDIFRXCLKFreq+0x144>
3418af5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418af62:	d829      	bhi.n	3418afb8 <RCCEx_GetSPDIFRXCLKFreq+0x168>
3418af64:	2b00      	cmp	r3, #0
3418af66:	d003      	beq.n	3418af70 <RCCEx_GetSPDIFRXCLKFreq+0x120>
3418af68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418af6c:	d009      	beq.n	3418af82 <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418af6e:	e023      	b.n	3418afb8 <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418af70:	f7fd fc62 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418af74:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418af76:	68fa      	ldr	r2, [r7, #12]
3418af78:	68bb      	ldr	r3, [r7, #8]
3418af7a:	fbb2 f3f3 	udiv	r3, r2, r3
3418af7e:	60fb      	str	r3, [r7, #12]
            break;
3418af80:	e01b      	b.n	3418afba <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418af82:	f7fd fc9f 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418af86:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418af88:	68fa      	ldr	r2, [r7, #12]
3418af8a:	68bb      	ldr	r3, [r7, #8]
3418af8c:	fbb2 f3f3 	udiv	r3, r2, r3
3418af90:	60fb      	str	r3, [r7, #12]
            break;
3418af92:	e012      	b.n	3418afba <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418af94:	f7fd fcdc 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418af98:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418af9a:	68fa      	ldr	r2, [r7, #12]
3418af9c:	68bb      	ldr	r3, [r7, #8]
3418af9e:	fbb2 f3f3 	udiv	r3, r2, r3
3418afa2:	60fb      	str	r3, [r7, #12]
            break;
3418afa4:	e009      	b.n	3418afba <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418afa6:	f7fd fd19 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418afaa:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418afac:	68fa      	ldr	r2, [r7, #12]
3418afae:	68bb      	ldr	r3, [r7, #8]
3418afb0:	fbb2 f3f3 	udiv	r3, r2, r3
3418afb4:	60fb      	str	r3, [r7, #12]
            break;
3418afb6:	e000      	b.n	3418afba <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
3418afb8:	bf00      	nop
        }
      }
      break;
3418afba:	e01c      	b.n	3418aff6 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418afbc:	f7f9 f9c4 	bl	34184348 <LL_RCC_HSI_IsReady>
3418afc0:	4603      	mov	r3, r0
3418afc2:	2b00      	cmp	r3, #0
3418afc4:	d019      	beq.n	3418affa <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418afc6:	f7f9 f9d1 	bl	3418436c <LL_RCC_HSI_GetDivider>
3418afca:	4603      	mov	r3, r0
3418afcc:	09db      	lsrs	r3, r3, #7
3418afce:	4a0f      	ldr	r2, [pc, #60]	@ (3418b00c <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
3418afd0:	fa22 f303 	lsr.w	r3, r2, r3
3418afd4:	60fb      	str	r3, [r7, #12]
      }
      break;
3418afd6:	e010      	b.n	3418affa <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418afd8:	f7f9 f9d6 	bl	34184388 <LL_RCC_MSI_IsReady>
3418afdc:	4603      	mov	r3, r0
3418afde:	2b00      	cmp	r3, #0
3418afe0:	d00d      	beq.n	3418affe <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
3418afe2:	4b0b      	ldr	r3, [pc, #44]	@ (3418b010 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
3418afe4:	60fb      	str	r3, [r7, #12]
      }
      break;
3418afe6:	e00a      	b.n	3418affe <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
3418afe8:	4b0a      	ldr	r3, [pc, #40]	@ (3418b014 <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
3418afea:	60fb      	str	r3, [r7, #12]
      break;
3418afec:	e008      	b.n	3418b000 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
3418afee:	bf00      	nop
3418aff0:	e006      	b.n	3418b000 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418aff2:	bf00      	nop
3418aff4:	e004      	b.n	3418b000 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418aff6:	bf00      	nop
3418aff8:	e002      	b.n	3418b000 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418affa:	bf00      	nop
3418affc:	e000      	b.n	3418b000 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418affe:	bf00      	nop
  }

  return spdifrx_frequency;
3418b000:	68fb      	ldr	r3, [r7, #12]
}
3418b002:	4618      	mov	r0, r3
3418b004:	3710      	adds	r7, #16
3418b006:	46bd      	mov	sp, r7
3418b008:	bd80      	pop	{r7, pc}
3418b00a:	bf00      	nop
3418b00c:	03d09000 	.word	0x03d09000
3418b010:	003d0900 	.word	0x003d0900
3418b014:	00bb8000 	.word	0x00bb8000

3418b018 <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
3418b018:	b580      	push	{r7, lr}
3418b01a:	b084      	sub	sp, #16
3418b01c:	af00      	add	r7, sp, #0
3418b01e:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b020:	2300      	movs	r3, #0
3418b022:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3418b024:	6878      	ldr	r0, [r7, #4]
3418b026:	f7f9 fd6b 	bl	34184b00 <LL_RCC_GetSPIClockSource>
3418b02a:	4603      	mov	r3, r0
3418b02c:	4aa7      	ldr	r2, [pc, #668]	@ (3418b2cc <RCCEx_GetSPICLKFreq+0x2b4>)
3418b02e:	4293      	cmp	r3, r2
3418b030:	f000 829e 	beq.w	3418b570 <RCCEx_GetSPICLKFreq+0x558>
3418b034:	4aa5      	ldr	r2, [pc, #660]	@ (3418b2cc <RCCEx_GetSPICLKFreq+0x2b4>)
3418b036:	4293      	cmp	r3, r2
3418b038:	f200 82a5 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b03c:	4aa4      	ldr	r2, [pc, #656]	@ (3418b2d0 <RCCEx_GetSPICLKFreq+0x2b8>)
3418b03e:	4293      	cmp	r3, r2
3418b040:	f000 8299 	beq.w	3418b576 <RCCEx_GetSPICLKFreq+0x55e>
3418b044:	4aa2      	ldr	r2, [pc, #648]	@ (3418b2d0 <RCCEx_GetSPICLKFreq+0x2b8>)
3418b046:	4293      	cmp	r3, r2
3418b048:	f200 829d 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b04c:	4aa1      	ldr	r2, [pc, #644]	@ (3418b2d4 <RCCEx_GetSPICLKFreq+0x2bc>)
3418b04e:	4293      	cmp	r3, r2
3418b050:	f000 8291 	beq.w	3418b576 <RCCEx_GetSPICLKFreq+0x55e>
3418b054:	4a9f      	ldr	r2, [pc, #636]	@ (3418b2d4 <RCCEx_GetSPICLKFreq+0x2bc>)
3418b056:	4293      	cmp	r3, r2
3418b058:	f200 8295 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b05c:	4a9e      	ldr	r2, [pc, #632]	@ (3418b2d8 <RCCEx_GetSPICLKFreq+0x2c0>)
3418b05e:	4293      	cmp	r3, r2
3418b060:	f000 8286 	beq.w	3418b570 <RCCEx_GetSPICLKFreq+0x558>
3418b064:	4a9c      	ldr	r2, [pc, #624]	@ (3418b2d8 <RCCEx_GetSPICLKFreq+0x2c0>)
3418b066:	4293      	cmp	r3, r2
3418b068:	f200 828d 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b06c:	4a9b      	ldr	r2, [pc, #620]	@ (3418b2dc <RCCEx_GetSPICLKFreq+0x2c4>)
3418b06e:	4293      	cmp	r3, r2
3418b070:	f000 827e 	beq.w	3418b570 <RCCEx_GetSPICLKFreq+0x558>
3418b074:	4a99      	ldr	r2, [pc, #612]	@ (3418b2dc <RCCEx_GetSPICLKFreq+0x2c4>)
3418b076:	4293      	cmp	r3, r2
3418b078:	f200 8285 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b07c:	4a98      	ldr	r2, [pc, #608]	@ (3418b2e0 <RCCEx_GetSPICLKFreq+0x2c8>)
3418b07e:	4293      	cmp	r3, r2
3418b080:	f000 8276 	beq.w	3418b570 <RCCEx_GetSPICLKFreq+0x558>
3418b084:	4a96      	ldr	r2, [pc, #600]	@ (3418b2e0 <RCCEx_GetSPICLKFreq+0x2c8>)
3418b086:	4293      	cmp	r3, r2
3418b088:	f200 827d 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b08c:	4a95      	ldr	r2, [pc, #596]	@ (3418b2e4 <RCCEx_GetSPICLKFreq+0x2cc>)
3418b08e:	4293      	cmp	r3, r2
3418b090:	f000 8258 	beq.w	3418b544 <RCCEx_GetSPICLKFreq+0x52c>
3418b094:	4a93      	ldr	r2, [pc, #588]	@ (3418b2e4 <RCCEx_GetSPICLKFreq+0x2cc>)
3418b096:	4293      	cmp	r3, r2
3418b098:	f200 8275 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b09c:	4a92      	ldr	r2, [pc, #584]	@ (3418b2e8 <RCCEx_GetSPICLKFreq+0x2d0>)
3418b09e:	4293      	cmp	r3, r2
3418b0a0:	f000 8250 	beq.w	3418b544 <RCCEx_GetSPICLKFreq+0x52c>
3418b0a4:	4a90      	ldr	r2, [pc, #576]	@ (3418b2e8 <RCCEx_GetSPICLKFreq+0x2d0>)
3418b0a6:	4293      	cmp	r3, r2
3418b0a8:	f200 826d 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b0ac:	4a8f      	ldr	r2, [pc, #572]	@ (3418b2ec <RCCEx_GetSPICLKFreq+0x2d4>)
3418b0ae:	4293      	cmp	r3, r2
3418b0b0:	f000 8248 	beq.w	3418b544 <RCCEx_GetSPICLKFreq+0x52c>
3418b0b4:	4a8d      	ldr	r2, [pc, #564]	@ (3418b2ec <RCCEx_GetSPICLKFreq+0x2d4>)
3418b0b6:	4293      	cmp	r3, r2
3418b0b8:	f200 8265 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b0bc:	4a8c      	ldr	r2, [pc, #560]	@ (3418b2f0 <RCCEx_GetSPICLKFreq+0x2d8>)
3418b0be:	4293      	cmp	r3, r2
3418b0c0:	f000 8240 	beq.w	3418b544 <RCCEx_GetSPICLKFreq+0x52c>
3418b0c4:	4a8a      	ldr	r2, [pc, #552]	@ (3418b2f0 <RCCEx_GetSPICLKFreq+0x2d8>)
3418b0c6:	4293      	cmp	r3, r2
3418b0c8:	f200 825d 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b0cc:	4a89      	ldr	r2, [pc, #548]	@ (3418b2f4 <RCCEx_GetSPICLKFreq+0x2dc>)
3418b0ce:	4293      	cmp	r3, r2
3418b0d0:	f000 8238 	beq.w	3418b544 <RCCEx_GetSPICLKFreq+0x52c>
3418b0d4:	4a87      	ldr	r2, [pc, #540]	@ (3418b2f4 <RCCEx_GetSPICLKFreq+0x2dc>)
3418b0d6:	4293      	cmp	r3, r2
3418b0d8:	f200 8255 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b0dc:	4a86      	ldr	r2, [pc, #536]	@ (3418b2f8 <RCCEx_GetSPICLKFreq+0x2e0>)
3418b0de:	4293      	cmp	r3, r2
3418b0e0:	f000 8230 	beq.w	3418b544 <RCCEx_GetSPICLKFreq+0x52c>
3418b0e4:	4a84      	ldr	r2, [pc, #528]	@ (3418b2f8 <RCCEx_GetSPICLKFreq+0x2e0>)
3418b0e6:	4293      	cmp	r3, r2
3418b0e8:	f200 824d 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b0ec:	4a83      	ldr	r2, [pc, #524]	@ (3418b2fc <RCCEx_GetSPICLKFreq+0x2e4>)
3418b0ee:	4293      	cmp	r3, r2
3418b0f0:	f000 8236 	beq.w	3418b560 <RCCEx_GetSPICLKFreq+0x548>
3418b0f4:	4a81      	ldr	r2, [pc, #516]	@ (3418b2fc <RCCEx_GetSPICLKFreq+0x2e4>)
3418b0f6:	4293      	cmp	r3, r2
3418b0f8:	f200 8245 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b0fc:	4a80      	ldr	r2, [pc, #512]	@ (3418b300 <RCCEx_GetSPICLKFreq+0x2e8>)
3418b0fe:	4293      	cmp	r3, r2
3418b100:	f000 822e 	beq.w	3418b560 <RCCEx_GetSPICLKFreq+0x548>
3418b104:	4a7e      	ldr	r2, [pc, #504]	@ (3418b300 <RCCEx_GetSPICLKFreq+0x2e8>)
3418b106:	4293      	cmp	r3, r2
3418b108:	f200 823d 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b10c:	4a7d      	ldr	r2, [pc, #500]	@ (3418b304 <RCCEx_GetSPICLKFreq+0x2ec>)
3418b10e:	4293      	cmp	r3, r2
3418b110:	f000 8226 	beq.w	3418b560 <RCCEx_GetSPICLKFreq+0x548>
3418b114:	4a7b      	ldr	r2, [pc, #492]	@ (3418b304 <RCCEx_GetSPICLKFreq+0x2ec>)
3418b116:	4293      	cmp	r3, r2
3418b118:	f200 8235 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b11c:	4a7a      	ldr	r2, [pc, #488]	@ (3418b308 <RCCEx_GetSPICLKFreq+0x2f0>)
3418b11e:	4293      	cmp	r3, r2
3418b120:	f000 821e 	beq.w	3418b560 <RCCEx_GetSPICLKFreq+0x548>
3418b124:	4a78      	ldr	r2, [pc, #480]	@ (3418b308 <RCCEx_GetSPICLKFreq+0x2f0>)
3418b126:	4293      	cmp	r3, r2
3418b128:	f200 822d 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b12c:	4a77      	ldr	r2, [pc, #476]	@ (3418b30c <RCCEx_GetSPICLKFreq+0x2f4>)
3418b12e:	4293      	cmp	r3, r2
3418b130:	f000 8216 	beq.w	3418b560 <RCCEx_GetSPICLKFreq+0x548>
3418b134:	4a75      	ldr	r2, [pc, #468]	@ (3418b30c <RCCEx_GetSPICLKFreq+0x2f4>)
3418b136:	4293      	cmp	r3, r2
3418b138:	f200 8225 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b13c:	4a74      	ldr	r2, [pc, #464]	@ (3418b310 <RCCEx_GetSPICLKFreq+0x2f8>)
3418b13e:	4293      	cmp	r3, r2
3418b140:	f000 820e 	beq.w	3418b560 <RCCEx_GetSPICLKFreq+0x548>
3418b144:	4a72      	ldr	r2, [pc, #456]	@ (3418b310 <RCCEx_GetSPICLKFreq+0x2f8>)
3418b146:	4293      	cmp	r3, r2
3418b148:	f200 821d 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b14c:	4a71      	ldr	r2, [pc, #452]	@ (3418b314 <RCCEx_GetSPICLKFreq+0x2fc>)
3418b14e:	4293      	cmp	r3, r2
3418b150:	f000 8171 	beq.w	3418b436 <RCCEx_GetSPICLKFreq+0x41e>
3418b154:	4a6f      	ldr	r2, [pc, #444]	@ (3418b314 <RCCEx_GetSPICLKFreq+0x2fc>)
3418b156:	4293      	cmp	r3, r2
3418b158:	f200 8215 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b15c:	4a6e      	ldr	r2, [pc, #440]	@ (3418b318 <RCCEx_GetSPICLKFreq+0x300>)
3418b15e:	4293      	cmp	r3, r2
3418b160:	f000 81ad 	beq.w	3418b4be <RCCEx_GetSPICLKFreq+0x4a6>
3418b164:	4a6c      	ldr	r2, [pc, #432]	@ (3418b318 <RCCEx_GetSPICLKFreq+0x300>)
3418b166:	4293      	cmp	r3, r2
3418b168:	f200 820d 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b16c:	4a6b      	ldr	r2, [pc, #428]	@ (3418b31c <RCCEx_GetSPICLKFreq+0x304>)
3418b16e:	4293      	cmp	r3, r2
3418b170:	f000 81a5 	beq.w	3418b4be <RCCEx_GetSPICLKFreq+0x4a6>
3418b174:	4a69      	ldr	r2, [pc, #420]	@ (3418b31c <RCCEx_GetSPICLKFreq+0x304>)
3418b176:	4293      	cmp	r3, r2
3418b178:	f200 8205 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b17c:	4a68      	ldr	r2, [pc, #416]	@ (3418b320 <RCCEx_GetSPICLKFreq+0x308>)
3418b17e:	4293      	cmp	r3, r2
3418b180:	f000 8159 	beq.w	3418b436 <RCCEx_GetSPICLKFreq+0x41e>
3418b184:	4a66      	ldr	r2, [pc, #408]	@ (3418b320 <RCCEx_GetSPICLKFreq+0x308>)
3418b186:	4293      	cmp	r3, r2
3418b188:	f200 81fd 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b18c:	4a65      	ldr	r2, [pc, #404]	@ (3418b324 <RCCEx_GetSPICLKFreq+0x30c>)
3418b18e:	4293      	cmp	r3, r2
3418b190:	f000 8151 	beq.w	3418b436 <RCCEx_GetSPICLKFreq+0x41e>
3418b194:	4a63      	ldr	r2, [pc, #396]	@ (3418b324 <RCCEx_GetSPICLKFreq+0x30c>)
3418b196:	4293      	cmp	r3, r2
3418b198:	f200 81f5 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b19c:	4a62      	ldr	r2, [pc, #392]	@ (3418b328 <RCCEx_GetSPICLKFreq+0x310>)
3418b19e:	4293      	cmp	r3, r2
3418b1a0:	f000 8149 	beq.w	3418b436 <RCCEx_GetSPICLKFreq+0x41e>
3418b1a4:	4a60      	ldr	r2, [pc, #384]	@ (3418b328 <RCCEx_GetSPICLKFreq+0x310>)
3418b1a6:	4293      	cmp	r3, r2
3418b1a8:	f200 81ed 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b1ac:	4a5f      	ldr	r2, [pc, #380]	@ (3418b32c <RCCEx_GetSPICLKFreq+0x314>)
3418b1ae:	4293      	cmp	r3, r2
3418b1b0:	f000 80fd 	beq.w	3418b3ae <RCCEx_GetSPICLKFreq+0x396>
3418b1b4:	4a5d      	ldr	r2, [pc, #372]	@ (3418b32c <RCCEx_GetSPICLKFreq+0x314>)
3418b1b6:	4293      	cmp	r3, r2
3418b1b8:	f200 81e5 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b1bc:	4a5c      	ldr	r2, [pc, #368]	@ (3418b330 <RCCEx_GetSPICLKFreq+0x318>)
3418b1be:	4293      	cmp	r3, r2
3418b1c0:	f000 8139 	beq.w	3418b436 <RCCEx_GetSPICLKFreq+0x41e>
3418b1c4:	4a5a      	ldr	r2, [pc, #360]	@ (3418b330 <RCCEx_GetSPICLKFreq+0x318>)
3418b1c6:	4293      	cmp	r3, r2
3418b1c8:	f200 81dd 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b1cc:	4a59      	ldr	r2, [pc, #356]	@ (3418b334 <RCCEx_GetSPICLKFreq+0x31c>)
3418b1ce:	4293      	cmp	r3, r2
3418b1d0:	f000 8131 	beq.w	3418b436 <RCCEx_GetSPICLKFreq+0x41e>
3418b1d4:	4a57      	ldr	r2, [pc, #348]	@ (3418b334 <RCCEx_GetSPICLKFreq+0x31c>)
3418b1d6:	4293      	cmp	r3, r2
3418b1d8:	f200 81d5 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b1dc:	4a56      	ldr	r2, [pc, #344]	@ (3418b338 <RCCEx_GetSPICLKFreq+0x320>)
3418b1de:	4293      	cmp	r3, r2
3418b1e0:	f000 80e5 	beq.w	3418b3ae <RCCEx_GetSPICLKFreq+0x396>
3418b1e4:	4a54      	ldr	r2, [pc, #336]	@ (3418b338 <RCCEx_GetSPICLKFreq+0x320>)
3418b1e6:	4293      	cmp	r3, r2
3418b1e8:	f200 81cd 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b1ec:	4a53      	ldr	r2, [pc, #332]	@ (3418b33c <RCCEx_GetSPICLKFreq+0x324>)
3418b1ee:	4293      	cmp	r3, r2
3418b1f0:	f000 80dd 	beq.w	3418b3ae <RCCEx_GetSPICLKFreq+0x396>
3418b1f4:	4a51      	ldr	r2, [pc, #324]	@ (3418b33c <RCCEx_GetSPICLKFreq+0x324>)
3418b1f6:	4293      	cmp	r3, r2
3418b1f8:	f200 81c5 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b1fc:	4a50      	ldr	r2, [pc, #320]	@ (3418b340 <RCCEx_GetSPICLKFreq+0x328>)
3418b1fe:	4293      	cmp	r3, r2
3418b200:	f000 80d5 	beq.w	3418b3ae <RCCEx_GetSPICLKFreq+0x396>
3418b204:	4a4e      	ldr	r2, [pc, #312]	@ (3418b340 <RCCEx_GetSPICLKFreq+0x328>)
3418b206:	4293      	cmp	r3, r2
3418b208:	f200 81bd 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b20c:	4a4d      	ldr	r2, [pc, #308]	@ (3418b344 <RCCEx_GetSPICLKFreq+0x32c>)
3418b20e:	4293      	cmp	r3, r2
3418b210:	f000 80c8 	beq.w	3418b3a4 <RCCEx_GetSPICLKFreq+0x38c>
3418b214:	4a4b      	ldr	r2, [pc, #300]	@ (3418b344 <RCCEx_GetSPICLKFreq+0x32c>)
3418b216:	4293      	cmp	r3, r2
3418b218:	f200 81b5 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b21c:	4a4a      	ldr	r2, [pc, #296]	@ (3418b348 <RCCEx_GetSPICLKFreq+0x330>)
3418b21e:	4293      	cmp	r3, r2
3418b220:	f000 80c0 	beq.w	3418b3a4 <RCCEx_GetSPICLKFreq+0x38c>
3418b224:	4a48      	ldr	r2, [pc, #288]	@ (3418b348 <RCCEx_GetSPICLKFreq+0x330>)
3418b226:	4293      	cmp	r3, r2
3418b228:	f200 81ad 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b22c:	4a47      	ldr	r2, [pc, #284]	@ (3418b34c <RCCEx_GetSPICLKFreq+0x334>)
3418b22e:	4293      	cmp	r3, r2
3418b230:	f000 80b8 	beq.w	3418b3a4 <RCCEx_GetSPICLKFreq+0x38c>
3418b234:	4a45      	ldr	r2, [pc, #276]	@ (3418b34c <RCCEx_GetSPICLKFreq+0x334>)
3418b236:	4293      	cmp	r3, r2
3418b238:	f200 81a5 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b23c:	4a44      	ldr	r2, [pc, #272]	@ (3418b350 <RCCEx_GetSPICLKFreq+0x338>)
3418b23e:	4293      	cmp	r3, r2
3418b240:	f000 80b0 	beq.w	3418b3a4 <RCCEx_GetSPICLKFreq+0x38c>
3418b244:	4a42      	ldr	r2, [pc, #264]	@ (3418b350 <RCCEx_GetSPICLKFreq+0x338>)
3418b246:	4293      	cmp	r3, r2
3418b248:	f200 819d 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b24c:	4a41      	ldr	r2, [pc, #260]	@ (3418b354 <RCCEx_GetSPICLKFreq+0x33c>)
3418b24e:	4293      	cmp	r3, r2
3418b250:	f000 80a8 	beq.w	3418b3a4 <RCCEx_GetSPICLKFreq+0x38c>
3418b254:	4a3f      	ldr	r2, [pc, #252]	@ (3418b354 <RCCEx_GetSPICLKFreq+0x33c>)
3418b256:	4293      	cmp	r3, r2
3418b258:	f200 8195 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b25c:	4a3e      	ldr	r2, [pc, #248]	@ (3418b358 <RCCEx_GetSPICLKFreq+0x340>)
3418b25e:	4293      	cmp	r3, r2
3418b260:	f000 80a0 	beq.w	3418b3a4 <RCCEx_GetSPICLKFreq+0x38c>
3418b264:	4a3c      	ldr	r2, [pc, #240]	@ (3418b358 <RCCEx_GetSPICLKFreq+0x340>)
3418b266:	4293      	cmp	r3, r2
3418b268:	f200 818d 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b26c:	4a3b      	ldr	r2, [pc, #236]	@ (3418b35c <RCCEx_GetSPICLKFreq+0x344>)
3418b26e:	4293      	cmp	r3, r2
3418b270:	f000 808c 	beq.w	3418b38c <RCCEx_GetSPICLKFreq+0x374>
3418b274:	4a39      	ldr	r2, [pc, #228]	@ (3418b35c <RCCEx_GetSPICLKFreq+0x344>)
3418b276:	4293      	cmp	r3, r2
3418b278:	f200 8185 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b27c:	4a38      	ldr	r2, [pc, #224]	@ (3418b360 <RCCEx_GetSPICLKFreq+0x348>)
3418b27e:	4293      	cmp	r3, r2
3418b280:	d078      	beq.n	3418b374 <RCCEx_GetSPICLKFreq+0x35c>
3418b282:	4a37      	ldr	r2, [pc, #220]	@ (3418b360 <RCCEx_GetSPICLKFreq+0x348>)
3418b284:	4293      	cmp	r3, r2
3418b286:	f200 817e 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b28a:	4a36      	ldr	r2, [pc, #216]	@ (3418b364 <RCCEx_GetSPICLKFreq+0x34c>)
3418b28c:	4293      	cmp	r3, r2
3418b28e:	d071      	beq.n	3418b374 <RCCEx_GetSPICLKFreq+0x35c>
3418b290:	4a34      	ldr	r2, [pc, #208]	@ (3418b364 <RCCEx_GetSPICLKFreq+0x34c>)
3418b292:	4293      	cmp	r3, r2
3418b294:	f200 8177 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b298:	4a33      	ldr	r2, [pc, #204]	@ (3418b368 <RCCEx_GetSPICLKFreq+0x350>)
3418b29a:	4293      	cmp	r3, r2
3418b29c:	d00a      	beq.n	3418b2b4 <RCCEx_GetSPICLKFreq+0x29c>
3418b29e:	4a32      	ldr	r2, [pc, #200]	@ (3418b368 <RCCEx_GetSPICLKFreq+0x350>)
3418b2a0:	4293      	cmp	r3, r2
3418b2a2:	f200 8170 	bhi.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
3418b2a6:	4a31      	ldr	r2, [pc, #196]	@ (3418b36c <RCCEx_GetSPICLKFreq+0x354>)
3418b2a8:	4293      	cmp	r3, r2
3418b2aa:	d063      	beq.n	3418b374 <RCCEx_GetSPICLKFreq+0x35c>
3418b2ac:	4a30      	ldr	r2, [pc, #192]	@ (3418b370 <RCCEx_GetSPICLKFreq+0x358>)
3418b2ae:	4293      	cmp	r3, r2
3418b2b0:	f040 8169 	bne.w	3418b586 <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b2b4:	f7f8 fc34 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418b2b8:	4603      	mov	r3, r0
3418b2ba:	4618      	mov	r0, r3
3418b2bc:	f7fd fbd4 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418b2c0:	4603      	mov	r3, r0
3418b2c2:	4618      	mov	r0, r3
3418b2c4:	f7fd fbe1 	bl	34188a8a <RCCEx_GetPCLK1Freq>
3418b2c8:	60f8      	str	r0, [r7, #12]
      break;
3418b2ca:	e169      	b.n	3418b5a0 <RCCEx_GetSPICLKFreq+0x588>
3418b2cc:	07061820 	.word	0x07061820
3418b2d0:	07061420 	.word	0x07061420
3418b2d4:	07061020 	.word	0x07061020
3418b2d8:	07060c20 	.word	0x07060c20
3418b2dc:	07060820 	.word	0x07060820
3418b2e0:	07060420 	.word	0x07060420
3418b2e4:	07051820 	.word	0x07051820
3418b2e8:	07051420 	.word	0x07051420
3418b2ec:	07051020 	.word	0x07051020
3418b2f0:	07050c20 	.word	0x07050c20
3418b2f4:	07050820 	.word	0x07050820
3418b2f8:	07050420 	.word	0x07050420
3418b2fc:	07041820 	.word	0x07041820
3418b300:	07041420 	.word	0x07041420
3418b304:	07041020 	.word	0x07041020
3418b308:	07040c20 	.word	0x07040c20
3418b30c:	07040820 	.word	0x07040820
3418b310:	07040420 	.word	0x07040420
3418b314:	07031820 	.word	0x07031820
3418b318:	07031420 	.word	0x07031420
3418b31c:	07031020 	.word	0x07031020
3418b320:	07030c20 	.word	0x07030c20
3418b324:	07030820 	.word	0x07030820
3418b328:	07030420 	.word	0x07030420
3418b32c:	07021820 	.word	0x07021820
3418b330:	07021420 	.word	0x07021420
3418b334:	07021020 	.word	0x07021020
3418b338:	07020c20 	.word	0x07020c20
3418b33c:	07020820 	.word	0x07020820
3418b340:	07020420 	.word	0x07020420
3418b344:	07011820 	.word	0x07011820
3418b348:	07011420 	.word	0x07011420
3418b34c:	07011020 	.word	0x07011020
3418b350:	07010c20 	.word	0x07010c20
3418b354:	07010820 	.word	0x07010820
3418b358:	07010420 	.word	0x07010420
3418b35c:	07001820 	.word	0x07001820
3418b360:	07001420 	.word	0x07001420
3418b364:	07001020 	.word	0x07001020
3418b368:	07000c20 	.word	0x07000c20
3418b36c:	07000420 	.word	0x07000420
3418b370:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b374:	f7f8 fbd4 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418b378:	4603      	mov	r3, r0
3418b37a:	4618      	mov	r0, r3
3418b37c:	f7fd fb74 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418b380:	4603      	mov	r3, r0
3418b382:	4618      	mov	r0, r3
3418b384:	f7fd fb91 	bl	34188aaa <RCCEx_GetPCLK2Freq>
3418b388:	60f8      	str	r0, [r7, #12]
      break;
3418b38a:	e109      	b.n	3418b5a0 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b38c:	f7f8 fbc8 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418b390:	4603      	mov	r3, r0
3418b392:	4618      	mov	r0, r3
3418b394:	f7fd fb68 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418b398:	4603      	mov	r3, r0
3418b39a:	4618      	mov	r0, r3
3418b39c:	f7fd fb96 	bl	34188acc <RCCEx_GetPCLK4Freq>
3418b3a0:	60f8      	str	r0, [r7, #12]
      break;
3418b3a2:	e0fd      	b.n	3418b5a0 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b3a4:	2007      	movs	r0, #7
3418b3a6:	f7fd fe4b 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418b3aa:	60f8      	str	r0, [r7, #12]
      break;
3418b3ac:	e0f8      	b.n	3418b5a0 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418b3ae:	f7f9 ffaf 	bl	34185310 <LL_RCC_IC8_IsEnabled>
3418b3b2:	4603      	mov	r3, r0
3418b3b4:	2b00      	cmp	r3, #0
3418b3b6:	f000 80e8 	beq.w	3418b58a <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418b3ba:	f7f9 ffcb 	bl	34185354 <LL_RCC_IC8_GetDivider>
3418b3be:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418b3c0:	f7f9 ffba 	bl	34185338 <LL_RCC_IC8_GetSource>
3418b3c4:	4603      	mov	r3, r0
3418b3c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b3ca:	d029      	beq.n	3418b420 <RCCEx_GetSPICLKFreq+0x408>
3418b3cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b3d0:	d82f      	bhi.n	3418b432 <RCCEx_GetSPICLKFreq+0x41a>
3418b3d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b3d6:	d01a      	beq.n	3418b40e <RCCEx_GetSPICLKFreq+0x3f6>
3418b3d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b3dc:	d829      	bhi.n	3418b432 <RCCEx_GetSPICLKFreq+0x41a>
3418b3de:	2b00      	cmp	r3, #0
3418b3e0:	d003      	beq.n	3418b3ea <RCCEx_GetSPICLKFreq+0x3d2>
3418b3e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b3e6:	d009      	beq.n	3418b3fc <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b3e8:	e023      	b.n	3418b432 <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b3ea:	f7fd fa25 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418b3ee:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418b3f0:	68fa      	ldr	r2, [r7, #12]
3418b3f2:	68bb      	ldr	r3, [r7, #8]
3418b3f4:	fbb2 f3f3 	udiv	r3, r2, r3
3418b3f8:	60fb      	str	r3, [r7, #12]
            break;
3418b3fa:	e01b      	b.n	3418b434 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b3fc:	f7fd fa62 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418b400:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418b402:	68fa      	ldr	r2, [r7, #12]
3418b404:	68bb      	ldr	r3, [r7, #8]
3418b406:	fbb2 f3f3 	udiv	r3, r2, r3
3418b40a:	60fb      	str	r3, [r7, #12]
            break;
3418b40c:	e012      	b.n	3418b434 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b40e:	f7fd fa9f 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418b412:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418b414:	68fa      	ldr	r2, [r7, #12]
3418b416:	68bb      	ldr	r3, [r7, #8]
3418b418:	fbb2 f3f3 	udiv	r3, r2, r3
3418b41c:	60fb      	str	r3, [r7, #12]
            break;
3418b41e:	e009      	b.n	3418b434 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b420:	f7fd fadc 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418b424:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418b426:	68fa      	ldr	r2, [r7, #12]
3418b428:	68bb      	ldr	r3, [r7, #8]
3418b42a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b42e:	60fb      	str	r3, [r7, #12]
            break;
3418b430:	e000      	b.n	3418b434 <RCCEx_GetSPICLKFreq+0x41c>
            break;
3418b432:	bf00      	nop
        }
      }
      break;
3418b434:	e0a9      	b.n	3418b58a <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418b436:	f7f9 ffab 	bl	34185390 <LL_RCC_IC9_IsEnabled>
3418b43a:	4603      	mov	r3, r0
3418b43c:	2b00      	cmp	r3, #0
3418b43e:	f000 80a6 	beq.w	3418b58e <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418b442:	f7f9 ffc7 	bl	341853d4 <LL_RCC_IC9_GetDivider>
3418b446:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418b448:	f7f9 ffb6 	bl	341853b8 <LL_RCC_IC9_GetSource>
3418b44c:	4603      	mov	r3, r0
3418b44e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b452:	d029      	beq.n	3418b4a8 <RCCEx_GetSPICLKFreq+0x490>
3418b454:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b458:	d82f      	bhi.n	3418b4ba <RCCEx_GetSPICLKFreq+0x4a2>
3418b45a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b45e:	d01a      	beq.n	3418b496 <RCCEx_GetSPICLKFreq+0x47e>
3418b460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b464:	d829      	bhi.n	3418b4ba <RCCEx_GetSPICLKFreq+0x4a2>
3418b466:	2b00      	cmp	r3, #0
3418b468:	d003      	beq.n	3418b472 <RCCEx_GetSPICLKFreq+0x45a>
3418b46a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b46e:	d009      	beq.n	3418b484 <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b470:	e023      	b.n	3418b4ba <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b472:	f7fd f9e1 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418b476:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418b478:	68fa      	ldr	r2, [r7, #12]
3418b47a:	68bb      	ldr	r3, [r7, #8]
3418b47c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b480:	60fb      	str	r3, [r7, #12]
            break;
3418b482:	e01b      	b.n	3418b4bc <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b484:	f7fd fa1e 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418b488:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418b48a:	68fa      	ldr	r2, [r7, #12]
3418b48c:	68bb      	ldr	r3, [r7, #8]
3418b48e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b492:	60fb      	str	r3, [r7, #12]
            break;
3418b494:	e012      	b.n	3418b4bc <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b496:	f7fd fa5b 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418b49a:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418b49c:	68fa      	ldr	r2, [r7, #12]
3418b49e:	68bb      	ldr	r3, [r7, #8]
3418b4a0:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4a4:	60fb      	str	r3, [r7, #12]
            break;
3418b4a6:	e009      	b.n	3418b4bc <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b4a8:	f7fd fa98 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418b4ac:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418b4ae:	68fa      	ldr	r2, [r7, #12]
3418b4b0:	68bb      	ldr	r3, [r7, #8]
3418b4b2:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4b6:	60fb      	str	r3, [r7, #12]
            break;
3418b4b8:	e000      	b.n	3418b4bc <RCCEx_GetSPICLKFreq+0x4a4>
            break;
3418b4ba:	bf00      	nop
        }
      }
      break;
3418b4bc:	e067      	b.n	3418b58e <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418b4be:	f7fa f867 	bl	34185590 <LL_RCC_IC14_IsEnabled>
3418b4c2:	4603      	mov	r3, r0
3418b4c4:	2b00      	cmp	r3, #0
3418b4c6:	d064      	beq.n	3418b592 <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418b4c8:	f7fa f884 	bl	341855d4 <LL_RCC_IC14_GetDivider>
3418b4cc:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418b4ce:	f7fa f873 	bl	341855b8 <LL_RCC_IC14_GetSource>
3418b4d2:	4603      	mov	r3, r0
3418b4d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b4d8:	d029      	beq.n	3418b52e <RCCEx_GetSPICLKFreq+0x516>
3418b4da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b4de:	d82f      	bhi.n	3418b540 <RCCEx_GetSPICLKFreq+0x528>
3418b4e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b4e4:	d01a      	beq.n	3418b51c <RCCEx_GetSPICLKFreq+0x504>
3418b4e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b4ea:	d829      	bhi.n	3418b540 <RCCEx_GetSPICLKFreq+0x528>
3418b4ec:	2b00      	cmp	r3, #0
3418b4ee:	d003      	beq.n	3418b4f8 <RCCEx_GetSPICLKFreq+0x4e0>
3418b4f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b4f4:	d009      	beq.n	3418b50a <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b4f6:	e023      	b.n	3418b540 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b4f8:	f7fd f99e 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418b4fc:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418b4fe:	68fa      	ldr	r2, [r7, #12]
3418b500:	68bb      	ldr	r3, [r7, #8]
3418b502:	fbb2 f3f3 	udiv	r3, r2, r3
3418b506:	60fb      	str	r3, [r7, #12]
            break;
3418b508:	e01b      	b.n	3418b542 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b50a:	f7fd f9db 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418b50e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418b510:	68fa      	ldr	r2, [r7, #12]
3418b512:	68bb      	ldr	r3, [r7, #8]
3418b514:	fbb2 f3f3 	udiv	r3, r2, r3
3418b518:	60fb      	str	r3, [r7, #12]
            break;
3418b51a:	e012      	b.n	3418b542 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b51c:	f7fd fa18 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418b520:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418b522:	68fa      	ldr	r2, [r7, #12]
3418b524:	68bb      	ldr	r3, [r7, #8]
3418b526:	fbb2 f3f3 	udiv	r3, r2, r3
3418b52a:	60fb      	str	r3, [r7, #12]
            break;
3418b52c:	e009      	b.n	3418b542 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b52e:	f7fd fa55 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418b532:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418b534:	68fa      	ldr	r2, [r7, #12]
3418b536:	68bb      	ldr	r3, [r7, #8]
3418b538:	fbb2 f3f3 	udiv	r3, r2, r3
3418b53c:	60fb      	str	r3, [r7, #12]
            break;
3418b53e:	e000      	b.n	3418b542 <RCCEx_GetSPICLKFreq+0x52a>
            break;
3418b540:	bf00      	nop
        }
      }
      break;
3418b542:	e026      	b.n	3418b592 <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418b544:	f7f8 ff00 	bl	34184348 <LL_RCC_HSI_IsReady>
3418b548:	4603      	mov	r3, r0
3418b54a:	2b00      	cmp	r3, #0
3418b54c:	d023      	beq.n	3418b596 <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b54e:	f7f8 ff0d 	bl	3418436c <LL_RCC_HSI_GetDivider>
3418b552:	4603      	mov	r3, r0
3418b554:	09db      	lsrs	r3, r3, #7
3418b556:	4a15      	ldr	r2, [pc, #84]	@ (3418b5ac <RCCEx_GetSPICLKFreq+0x594>)
3418b558:	fa22 f303 	lsr.w	r3, r2, r3
3418b55c:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b55e:	e01a      	b.n	3418b596 <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418b560:	f7f8 ff12 	bl	34184388 <LL_RCC_MSI_IsReady>
3418b564:	4603      	mov	r3, r0
3418b566:	2b00      	cmp	r3, #0
3418b568:	d017      	beq.n	3418b59a <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
3418b56a:	4b11      	ldr	r3, [pc, #68]	@ (3418b5b0 <RCCEx_GetSPICLKFreq+0x598>)
3418b56c:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b56e:	e014      	b.n	3418b59a <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
3418b570:	4b10      	ldr	r3, [pc, #64]	@ (3418b5b4 <RCCEx_GetSPICLKFreq+0x59c>)
3418b572:	60fb      	str	r3, [r7, #12]
      break;
3418b574:	e014      	b.n	3418b5a0 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3418b576:	f7f8 fed5 	bl	34184324 <LL_RCC_HSE_IsReady>
3418b57a:	4603      	mov	r3, r0
3418b57c:	2b00      	cmp	r3, #0
3418b57e:	d00e      	beq.n	3418b59e <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
3418b580:	4b0d      	ldr	r3, [pc, #52]	@ (3418b5b8 <RCCEx_GetSPICLKFreq+0x5a0>)
3418b582:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b584:	e00b      	b.n	3418b59e <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
3418b586:	bf00      	nop
3418b588:	e00a      	b.n	3418b5a0 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418b58a:	bf00      	nop
3418b58c:	e008      	b.n	3418b5a0 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418b58e:	bf00      	nop
3418b590:	e006      	b.n	3418b5a0 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418b592:	bf00      	nop
3418b594:	e004      	b.n	3418b5a0 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418b596:	bf00      	nop
3418b598:	e002      	b.n	3418b5a0 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418b59a:	bf00      	nop
3418b59c:	e000      	b.n	3418b5a0 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418b59e:	bf00      	nop
  }

  return spi_frequency;
3418b5a0:	68fb      	ldr	r3, [r7, #12]
}
3418b5a2:	4618      	mov	r0, r3
3418b5a4:	3710      	adds	r7, #16
3418b5a6:	46bd      	mov	sp, r7
3418b5a8:	bd80      	pop	{r7, pc}
3418b5aa:	bf00      	nop
3418b5ac:	03d09000 	.word	0x03d09000
3418b5b0:	003d0900 	.word	0x003d0900
3418b5b4:	00bb8000 	.word	0x00bb8000
3418b5b8:	02dc6c00 	.word	0x02dc6c00

3418b5bc <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
3418b5bc:	b580      	push	{r7, lr}
3418b5be:	b084      	sub	sp, #16
3418b5c0:	af00      	add	r7, sp, #0
3418b5c2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b5c4:	2300      	movs	r3, #0
3418b5c6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3418b5c8:	6878      	ldr	r0, [r7, #4]
3418b5ca:	f7f9 fab1 	bl	34184b30 <LL_RCC_GetUARTClockSource>
3418b5ce:	4603      	mov	r3, r0
3418b5d0:	4aa2      	ldr	r2, [pc, #648]	@ (3418b85c <RCCEx_GetUARTCLKFreq+0x2a0>)
3418b5d2:	4293      	cmp	r3, r2
3418b5d4:	f000 81e8 	beq.w	3418b9a8 <RCCEx_GetUARTCLKFreq+0x3ec>
3418b5d8:	4aa0      	ldr	r2, [pc, #640]	@ (3418b85c <RCCEx_GetUARTCLKFreq+0x2a0>)
3418b5da:	4293      	cmp	r3, r2
3418b5dc:	f200 8203 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b5e0:	4a9f      	ldr	r2, [pc, #636]	@ (3418b860 <RCCEx_GetUARTCLKFreq+0x2a4>)
3418b5e2:	4293      	cmp	r3, r2
3418b5e4:	f000 81e0 	beq.w	3418b9a8 <RCCEx_GetUARTCLKFreq+0x3ec>
3418b5e8:	4a9d      	ldr	r2, [pc, #628]	@ (3418b860 <RCCEx_GetUARTCLKFreq+0x2a4>)
3418b5ea:	4293      	cmp	r3, r2
3418b5ec:	f200 81fb 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b5f0:	4a9c      	ldr	r2, [pc, #624]	@ (3418b864 <RCCEx_GetUARTCLKFreq+0x2a8>)
3418b5f2:	4293      	cmp	r3, r2
3418b5f4:	f000 81d8 	beq.w	3418b9a8 <RCCEx_GetUARTCLKFreq+0x3ec>
3418b5f8:	4a9a      	ldr	r2, [pc, #616]	@ (3418b864 <RCCEx_GetUARTCLKFreq+0x2a8>)
3418b5fa:	4293      	cmp	r3, r2
3418b5fc:	f200 81f3 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b600:	4a99      	ldr	r2, [pc, #612]	@ (3418b868 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418b602:	4293      	cmp	r3, r2
3418b604:	f000 81d0 	beq.w	3418b9a8 <RCCEx_GetUARTCLKFreq+0x3ec>
3418b608:	4a97      	ldr	r2, [pc, #604]	@ (3418b868 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418b60a:	4293      	cmp	r3, r2
3418b60c:	f200 81eb 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b610:	4a96      	ldr	r2, [pc, #600]	@ (3418b86c <RCCEx_GetUARTCLKFreq+0x2b0>)
3418b612:	4293      	cmp	r3, r2
3418b614:	f000 81c8 	beq.w	3418b9a8 <RCCEx_GetUARTCLKFreq+0x3ec>
3418b618:	4a94      	ldr	r2, [pc, #592]	@ (3418b86c <RCCEx_GetUARTCLKFreq+0x2b0>)
3418b61a:	4293      	cmp	r3, r2
3418b61c:	f200 81e3 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b620:	4a93      	ldr	r2, [pc, #588]	@ (3418b870 <RCCEx_GetUARTCLKFreq+0x2b4>)
3418b622:	4293      	cmp	r3, r2
3418b624:	f000 81ce 	beq.w	3418b9c4 <RCCEx_GetUARTCLKFreq+0x408>
3418b628:	4a91      	ldr	r2, [pc, #580]	@ (3418b870 <RCCEx_GetUARTCLKFreq+0x2b4>)
3418b62a:	4293      	cmp	r3, r2
3418b62c:	f200 81db 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b630:	4a90      	ldr	r2, [pc, #576]	@ (3418b874 <RCCEx_GetUARTCLKFreq+0x2b8>)
3418b632:	4293      	cmp	r3, r2
3418b634:	f000 81c6 	beq.w	3418b9c4 <RCCEx_GetUARTCLKFreq+0x408>
3418b638:	4a8e      	ldr	r2, [pc, #568]	@ (3418b874 <RCCEx_GetUARTCLKFreq+0x2b8>)
3418b63a:	4293      	cmp	r3, r2
3418b63c:	f200 81d3 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b640:	4a8d      	ldr	r2, [pc, #564]	@ (3418b878 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418b642:	4293      	cmp	r3, r2
3418b644:	f000 81be 	beq.w	3418b9c4 <RCCEx_GetUARTCLKFreq+0x408>
3418b648:	4a8b      	ldr	r2, [pc, #556]	@ (3418b878 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418b64a:	4293      	cmp	r3, r2
3418b64c:	f200 81cb 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b650:	4a8a      	ldr	r2, [pc, #552]	@ (3418b87c <RCCEx_GetUARTCLKFreq+0x2c0>)
3418b652:	4293      	cmp	r3, r2
3418b654:	f000 81b6 	beq.w	3418b9c4 <RCCEx_GetUARTCLKFreq+0x408>
3418b658:	4a88      	ldr	r2, [pc, #544]	@ (3418b87c <RCCEx_GetUARTCLKFreq+0x2c0>)
3418b65a:	4293      	cmp	r3, r2
3418b65c:	f200 81c3 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b660:	4a87      	ldr	r2, [pc, #540]	@ (3418b880 <RCCEx_GetUARTCLKFreq+0x2c4>)
3418b662:	4293      	cmp	r3, r2
3418b664:	f000 81ae 	beq.w	3418b9c4 <RCCEx_GetUARTCLKFreq+0x408>
3418b668:	4a85      	ldr	r2, [pc, #532]	@ (3418b880 <RCCEx_GetUARTCLKFreq+0x2c4>)
3418b66a:	4293      	cmp	r3, r2
3418b66c:	f200 81bb 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b670:	4a84      	ldr	r2, [pc, #528]	@ (3418b884 <RCCEx_GetUARTCLKFreq+0x2c8>)
3418b672:	4293      	cmp	r3, r2
3418b674:	f000 81ae 	beq.w	3418b9d4 <RCCEx_GetUARTCLKFreq+0x418>
3418b678:	4a82      	ldr	r2, [pc, #520]	@ (3418b884 <RCCEx_GetUARTCLKFreq+0x2c8>)
3418b67a:	4293      	cmp	r3, r2
3418b67c:	f200 81b3 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b680:	4a81      	ldr	r2, [pc, #516]	@ (3418b888 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418b682:	4293      	cmp	r3, r2
3418b684:	f000 81a6 	beq.w	3418b9d4 <RCCEx_GetUARTCLKFreq+0x418>
3418b688:	4a7f      	ldr	r2, [pc, #508]	@ (3418b888 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418b68a:	4293      	cmp	r3, r2
3418b68c:	f200 81ab 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b690:	4a7e      	ldr	r2, [pc, #504]	@ (3418b88c <RCCEx_GetUARTCLKFreq+0x2d0>)
3418b692:	4293      	cmp	r3, r2
3418b694:	f000 819e 	beq.w	3418b9d4 <RCCEx_GetUARTCLKFreq+0x418>
3418b698:	4a7c      	ldr	r2, [pc, #496]	@ (3418b88c <RCCEx_GetUARTCLKFreq+0x2d0>)
3418b69a:	4293      	cmp	r3, r2
3418b69c:	f200 81a3 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b6a0:	4a7b      	ldr	r2, [pc, #492]	@ (3418b890 <RCCEx_GetUARTCLKFreq+0x2d4>)
3418b6a2:	4293      	cmp	r3, r2
3418b6a4:	f000 8196 	beq.w	3418b9d4 <RCCEx_GetUARTCLKFreq+0x418>
3418b6a8:	4a79      	ldr	r2, [pc, #484]	@ (3418b890 <RCCEx_GetUARTCLKFreq+0x2d4>)
3418b6aa:	4293      	cmp	r3, r2
3418b6ac:	f200 819b 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b6b0:	4a78      	ldr	r2, [pc, #480]	@ (3418b894 <RCCEx_GetUARTCLKFreq+0x2d8>)
3418b6b2:	4293      	cmp	r3, r2
3418b6b4:	f000 818e 	beq.w	3418b9d4 <RCCEx_GetUARTCLKFreq+0x418>
3418b6b8:	4a76      	ldr	r2, [pc, #472]	@ (3418b894 <RCCEx_GetUARTCLKFreq+0x2d8>)
3418b6ba:	4293      	cmp	r3, r2
3418b6bc:	f200 8193 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b6c0:	4a75      	ldr	r2, [pc, #468]	@ (3418b898 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418b6c2:	4293      	cmp	r3, r2
3418b6c4:	f000 812d 	beq.w	3418b922 <RCCEx_GetUARTCLKFreq+0x366>
3418b6c8:	4a73      	ldr	r2, [pc, #460]	@ (3418b898 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418b6ca:	4293      	cmp	r3, r2
3418b6cc:	f200 818b 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b6d0:	4a72      	ldr	r2, [pc, #456]	@ (3418b89c <RCCEx_GetUARTCLKFreq+0x2e0>)
3418b6d2:	4293      	cmp	r3, r2
3418b6d4:	f000 8125 	beq.w	3418b922 <RCCEx_GetUARTCLKFreq+0x366>
3418b6d8:	4a70      	ldr	r2, [pc, #448]	@ (3418b89c <RCCEx_GetUARTCLKFreq+0x2e0>)
3418b6da:	4293      	cmp	r3, r2
3418b6dc:	f200 8183 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b6e0:	4a6f      	ldr	r2, [pc, #444]	@ (3418b8a0 <RCCEx_GetUARTCLKFreq+0x2e4>)
3418b6e2:	4293      	cmp	r3, r2
3418b6e4:	f000 811d 	beq.w	3418b922 <RCCEx_GetUARTCLKFreq+0x366>
3418b6e8:	4a6d      	ldr	r2, [pc, #436]	@ (3418b8a0 <RCCEx_GetUARTCLKFreq+0x2e4>)
3418b6ea:	4293      	cmp	r3, r2
3418b6ec:	f200 817b 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b6f0:	4a6c      	ldr	r2, [pc, #432]	@ (3418b8a4 <RCCEx_GetUARTCLKFreq+0x2e8>)
3418b6f2:	4293      	cmp	r3, r2
3418b6f4:	f000 8115 	beq.w	3418b922 <RCCEx_GetUARTCLKFreq+0x366>
3418b6f8:	4a6a      	ldr	r2, [pc, #424]	@ (3418b8a4 <RCCEx_GetUARTCLKFreq+0x2e8>)
3418b6fa:	4293      	cmp	r3, r2
3418b6fc:	f200 8173 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b700:	4a69      	ldr	r2, [pc, #420]	@ (3418b8a8 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418b702:	4293      	cmp	r3, r2
3418b704:	f000 810d 	beq.w	3418b922 <RCCEx_GetUARTCLKFreq+0x366>
3418b708:	4a67      	ldr	r2, [pc, #412]	@ (3418b8a8 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418b70a:	4293      	cmp	r3, r2
3418b70c:	f200 816b 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b710:	4a66      	ldr	r2, [pc, #408]	@ (3418b8ac <RCCEx_GetUARTCLKFreq+0x2f0>)
3418b712:	4293      	cmp	r3, r2
3418b714:	d07b      	beq.n	3418b80e <RCCEx_GetUARTCLKFreq+0x252>
3418b716:	4a65      	ldr	r2, [pc, #404]	@ (3418b8ac <RCCEx_GetUARTCLKFreq+0x2f0>)
3418b718:	4293      	cmp	r3, r2
3418b71a:	f200 8164 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b71e:	4a64      	ldr	r2, [pc, #400]	@ (3418b8b0 <RCCEx_GetUARTCLKFreq+0x2f4>)
3418b720:	4293      	cmp	r3, r2
3418b722:	d074      	beq.n	3418b80e <RCCEx_GetUARTCLKFreq+0x252>
3418b724:	4a62      	ldr	r2, [pc, #392]	@ (3418b8b0 <RCCEx_GetUARTCLKFreq+0x2f4>)
3418b726:	4293      	cmp	r3, r2
3418b728:	f200 815d 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b72c:	4a61      	ldr	r2, [pc, #388]	@ (3418b8b4 <RCCEx_GetUARTCLKFreq+0x2f8>)
3418b72e:	4293      	cmp	r3, r2
3418b730:	d06d      	beq.n	3418b80e <RCCEx_GetUARTCLKFreq+0x252>
3418b732:	4a60      	ldr	r2, [pc, #384]	@ (3418b8b4 <RCCEx_GetUARTCLKFreq+0x2f8>)
3418b734:	4293      	cmp	r3, r2
3418b736:	f200 8156 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b73a:	4a5f      	ldr	r2, [pc, #380]	@ (3418b8b8 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418b73c:	4293      	cmp	r3, r2
3418b73e:	d066      	beq.n	3418b80e <RCCEx_GetUARTCLKFreq+0x252>
3418b740:	4a5d      	ldr	r2, [pc, #372]	@ (3418b8b8 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418b742:	4293      	cmp	r3, r2
3418b744:	f200 814f 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b748:	4a5c      	ldr	r2, [pc, #368]	@ (3418b8bc <RCCEx_GetUARTCLKFreq+0x300>)
3418b74a:	4293      	cmp	r3, r2
3418b74c:	d05f      	beq.n	3418b80e <RCCEx_GetUARTCLKFreq+0x252>
3418b74e:	4a5b      	ldr	r2, [pc, #364]	@ (3418b8bc <RCCEx_GetUARTCLKFreq+0x300>)
3418b750:	4293      	cmp	r3, r2
3418b752:	f200 8148 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b756:	4a5a      	ldr	r2, [pc, #360]	@ (3418b8c0 <RCCEx_GetUARTCLKFreq+0x304>)
3418b758:	4293      	cmp	r3, r2
3418b75a:	d053      	beq.n	3418b804 <RCCEx_GetUARTCLKFreq+0x248>
3418b75c:	4a58      	ldr	r2, [pc, #352]	@ (3418b8c0 <RCCEx_GetUARTCLKFreq+0x304>)
3418b75e:	4293      	cmp	r3, r2
3418b760:	f200 8141 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b764:	4a57      	ldr	r2, [pc, #348]	@ (3418b8c4 <RCCEx_GetUARTCLKFreq+0x308>)
3418b766:	4293      	cmp	r3, r2
3418b768:	d04c      	beq.n	3418b804 <RCCEx_GetUARTCLKFreq+0x248>
3418b76a:	4a56      	ldr	r2, [pc, #344]	@ (3418b8c4 <RCCEx_GetUARTCLKFreq+0x308>)
3418b76c:	4293      	cmp	r3, r2
3418b76e:	f200 813a 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b772:	4a55      	ldr	r2, [pc, #340]	@ (3418b8c8 <RCCEx_GetUARTCLKFreq+0x30c>)
3418b774:	4293      	cmp	r3, r2
3418b776:	d045      	beq.n	3418b804 <RCCEx_GetUARTCLKFreq+0x248>
3418b778:	4a53      	ldr	r2, [pc, #332]	@ (3418b8c8 <RCCEx_GetUARTCLKFreq+0x30c>)
3418b77a:	4293      	cmp	r3, r2
3418b77c:	f200 8133 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b780:	4a52      	ldr	r2, [pc, #328]	@ (3418b8cc <RCCEx_GetUARTCLKFreq+0x310>)
3418b782:	4293      	cmp	r3, r2
3418b784:	d03e      	beq.n	3418b804 <RCCEx_GetUARTCLKFreq+0x248>
3418b786:	4a51      	ldr	r2, [pc, #324]	@ (3418b8cc <RCCEx_GetUARTCLKFreq+0x310>)
3418b788:	4293      	cmp	r3, r2
3418b78a:	f200 812c 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b78e:	4a50      	ldr	r2, [pc, #320]	@ (3418b8d0 <RCCEx_GetUARTCLKFreq+0x314>)
3418b790:	4293      	cmp	r3, r2
3418b792:	d037      	beq.n	3418b804 <RCCEx_GetUARTCLKFreq+0x248>
3418b794:	4a4e      	ldr	r2, [pc, #312]	@ (3418b8d0 <RCCEx_GetUARTCLKFreq+0x314>)
3418b796:	4293      	cmp	r3, r2
3418b798:	f200 8125 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b79c:	4a4d      	ldr	r2, [pc, #308]	@ (3418b8d4 <RCCEx_GetUARTCLKFreq+0x318>)
3418b79e:	4293      	cmp	r3, r2
3418b7a0:	d018      	beq.n	3418b7d4 <RCCEx_GetUARTCLKFreq+0x218>
3418b7a2:	4a4c      	ldr	r2, [pc, #304]	@ (3418b8d4 <RCCEx_GetUARTCLKFreq+0x318>)
3418b7a4:	4293      	cmp	r3, r2
3418b7a6:	f200 811e 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b7aa:	4a4b      	ldr	r2, [pc, #300]	@ (3418b8d8 <RCCEx_GetUARTCLKFreq+0x31c>)
3418b7ac:	4293      	cmp	r3, r2
3418b7ae:	d011      	beq.n	3418b7d4 <RCCEx_GetUARTCLKFreq+0x218>
3418b7b0:	4a49      	ldr	r2, [pc, #292]	@ (3418b8d8 <RCCEx_GetUARTCLKFreq+0x31c>)
3418b7b2:	4293      	cmp	r3, r2
3418b7b4:	f200 8117 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b7b8:	4a48      	ldr	r2, [pc, #288]	@ (3418b8dc <RCCEx_GetUARTCLKFreq+0x320>)
3418b7ba:	4293      	cmp	r3, r2
3418b7bc:	d00a      	beq.n	3418b7d4 <RCCEx_GetUARTCLKFreq+0x218>
3418b7be:	4a47      	ldr	r2, [pc, #284]	@ (3418b8dc <RCCEx_GetUARTCLKFreq+0x320>)
3418b7c0:	4293      	cmp	r3, r2
3418b7c2:	f200 8110 	bhi.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
3418b7c6:	4a46      	ldr	r2, [pc, #280]	@ (3418b8e0 <RCCEx_GetUARTCLKFreq+0x324>)
3418b7c8:	4293      	cmp	r3, r2
3418b7ca:	d00f      	beq.n	3418b7ec <RCCEx_GetUARTCLKFreq+0x230>
3418b7cc:	4a45      	ldr	r2, [pc, #276]	@ (3418b8e4 <RCCEx_GetUARTCLKFreq+0x328>)
3418b7ce:	4293      	cmp	r3, r2
3418b7d0:	f040 8109 	bne.w	3418b9e6 <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b7d4:	f7f8 f9a4 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418b7d8:	4603      	mov	r3, r0
3418b7da:	4618      	mov	r0, r3
3418b7dc:	f7fd f944 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418b7e0:	4603      	mov	r3, r0
3418b7e2:	4618      	mov	r0, r3
3418b7e4:	f7fd f951 	bl	34188a8a <RCCEx_GetPCLK1Freq>
3418b7e8:	60f8      	str	r0, [r7, #12]
      break;
3418b7ea:	e107      	b.n	3418b9fc <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b7ec:	f7f8 f998 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418b7f0:	4603      	mov	r3, r0
3418b7f2:	4618      	mov	r0, r3
3418b7f4:	f7fd f938 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418b7f8:	4603      	mov	r3, r0
3418b7fa:	4618      	mov	r0, r3
3418b7fc:	f7fd f955 	bl	34188aaa <RCCEx_GetPCLK2Freq>
3418b800:	60f8      	str	r0, [r7, #12]
      break;
3418b802:	e0fb      	b.n	3418b9fc <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b804:	2007      	movs	r0, #7
3418b806:	f7fd fc1b 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418b80a:	60f8      	str	r0, [r7, #12]
      break;
3418b80c:	e0f6      	b.n	3418b9fc <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418b80e:	f7f9 fdbf 	bl	34185390 <LL_RCC_IC9_IsEnabled>
3418b812:	4603      	mov	r3, r0
3418b814:	2b00      	cmp	r3, #0
3418b816:	f000 80e8 	beq.w	3418b9ea <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418b81a:	f7f9 fddb 	bl	341853d4 <LL_RCC_IC9_GetDivider>
3418b81e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418b820:	f7f9 fdca 	bl	341853b8 <LL_RCC_IC9_GetSource>
3418b824:	4603      	mov	r3, r0
3418b826:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b82a:	d06f      	beq.n	3418b90c <RCCEx_GetUARTCLKFreq+0x350>
3418b82c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b830:	d875      	bhi.n	3418b91e <RCCEx_GetUARTCLKFreq+0x362>
3418b832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b836:	d060      	beq.n	3418b8fa <RCCEx_GetUARTCLKFreq+0x33e>
3418b838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b83c:	d86f      	bhi.n	3418b91e <RCCEx_GetUARTCLKFreq+0x362>
3418b83e:	2b00      	cmp	r3, #0
3418b840:	d003      	beq.n	3418b84a <RCCEx_GetUARTCLKFreq+0x28e>
3418b842:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b846:	d04f      	beq.n	3418b8e8 <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b848:	e069      	b.n	3418b91e <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b84a:	f7fc fff5 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418b84e:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418b850:	68fa      	ldr	r2, [r7, #12]
3418b852:	68bb      	ldr	r3, [r7, #8]
3418b854:	fbb2 f3f3 	udiv	r3, r2, r3
3418b858:	60fb      	str	r3, [r7, #12]
            break;
3418b85a:	e061      	b.n	3418b920 <RCCEx_GetUARTCLKFreq+0x364>
3418b85c:	07061c30 	.word	0x07061c30
3418b860:	07061830 	.word	0x07061830
3418b864:	07061030 	.word	0x07061030
3418b868:	07060c30 	.word	0x07060c30
3418b86c:	07060034 	.word	0x07060034
3418b870:	07051c30 	.word	0x07051c30
3418b874:	07051830 	.word	0x07051830
3418b878:	07051030 	.word	0x07051030
3418b87c:	07050c30 	.word	0x07050c30
3418b880:	07050034 	.word	0x07050034
3418b884:	07041c30 	.word	0x07041c30
3418b888:	07041830 	.word	0x07041830
3418b88c:	07041030 	.word	0x07041030
3418b890:	07040c30 	.word	0x07040c30
3418b894:	07040034 	.word	0x07040034
3418b898:	07031c30 	.word	0x07031c30
3418b89c:	07031830 	.word	0x07031830
3418b8a0:	07031030 	.word	0x07031030
3418b8a4:	07030c30 	.word	0x07030c30
3418b8a8:	07030034 	.word	0x07030034
3418b8ac:	07021c30 	.word	0x07021c30
3418b8b0:	07021830 	.word	0x07021830
3418b8b4:	07021030 	.word	0x07021030
3418b8b8:	07020c30 	.word	0x07020c30
3418b8bc:	07020034 	.word	0x07020034
3418b8c0:	07011c30 	.word	0x07011c30
3418b8c4:	07011830 	.word	0x07011830
3418b8c8:	07011030 	.word	0x07011030
3418b8cc:	07010c30 	.word	0x07010c30
3418b8d0:	07010034 	.word	0x07010034
3418b8d4:	07001c30 	.word	0x07001c30
3418b8d8:	07001830 	.word	0x07001830
3418b8dc:	07001030 	.word	0x07001030
3418b8e0:	07000034 	.word	0x07000034
3418b8e4:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b8e8:	f7fc ffec 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418b8ec:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418b8ee:	68fa      	ldr	r2, [r7, #12]
3418b8f0:	68bb      	ldr	r3, [r7, #8]
3418b8f2:	fbb2 f3f3 	udiv	r3, r2, r3
3418b8f6:	60fb      	str	r3, [r7, #12]
            break;
3418b8f8:	e012      	b.n	3418b920 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b8fa:	f7fd f829 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418b8fe:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418b900:	68fa      	ldr	r2, [r7, #12]
3418b902:	68bb      	ldr	r3, [r7, #8]
3418b904:	fbb2 f3f3 	udiv	r3, r2, r3
3418b908:	60fb      	str	r3, [r7, #12]
            break;
3418b90a:	e009      	b.n	3418b920 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b90c:	f7fd f866 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418b910:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418b912:	68fa      	ldr	r2, [r7, #12]
3418b914:	68bb      	ldr	r3, [r7, #8]
3418b916:	fbb2 f3f3 	udiv	r3, r2, r3
3418b91a:	60fb      	str	r3, [r7, #12]
            break;
3418b91c:	e000      	b.n	3418b920 <RCCEx_GetUARTCLKFreq+0x364>
            break;
3418b91e:	bf00      	nop
        }
      }
      break;
3418b920:	e063      	b.n	3418b9ea <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418b922:	f7f9 fe35 	bl	34185590 <LL_RCC_IC14_IsEnabled>
3418b926:	4603      	mov	r3, r0
3418b928:	2b00      	cmp	r3, #0
3418b92a:	d060      	beq.n	3418b9ee <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418b92c:	f7f9 fe52 	bl	341855d4 <LL_RCC_IC14_GetDivider>
3418b930:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418b932:	f7f9 fe41 	bl	341855b8 <LL_RCC_IC14_GetSource>
3418b936:	4603      	mov	r3, r0
3418b938:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b93c:	d029      	beq.n	3418b992 <RCCEx_GetUARTCLKFreq+0x3d6>
3418b93e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b942:	d82f      	bhi.n	3418b9a4 <RCCEx_GetUARTCLKFreq+0x3e8>
3418b944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b948:	d01a      	beq.n	3418b980 <RCCEx_GetUARTCLKFreq+0x3c4>
3418b94a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b94e:	d829      	bhi.n	3418b9a4 <RCCEx_GetUARTCLKFreq+0x3e8>
3418b950:	2b00      	cmp	r3, #0
3418b952:	d003      	beq.n	3418b95c <RCCEx_GetUARTCLKFreq+0x3a0>
3418b954:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b958:	d009      	beq.n	3418b96e <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b95a:	e023      	b.n	3418b9a4 <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b95c:	f7fc ff6c 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418b960:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418b962:	68fa      	ldr	r2, [r7, #12]
3418b964:	68bb      	ldr	r3, [r7, #8]
3418b966:	fbb2 f3f3 	udiv	r3, r2, r3
3418b96a:	60fb      	str	r3, [r7, #12]
            break;
3418b96c:	e01b      	b.n	3418b9a6 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b96e:	f7fc ffa9 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418b972:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418b974:	68fa      	ldr	r2, [r7, #12]
3418b976:	68bb      	ldr	r3, [r7, #8]
3418b978:	fbb2 f3f3 	udiv	r3, r2, r3
3418b97c:	60fb      	str	r3, [r7, #12]
            break;
3418b97e:	e012      	b.n	3418b9a6 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b980:	f7fc ffe6 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418b984:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418b986:	68fa      	ldr	r2, [r7, #12]
3418b988:	68bb      	ldr	r3, [r7, #8]
3418b98a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b98e:	60fb      	str	r3, [r7, #12]
            break;
3418b990:	e009      	b.n	3418b9a6 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b992:	f7fd f823 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418b996:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418b998:	68fa      	ldr	r2, [r7, #12]
3418b99a:	68bb      	ldr	r3, [r7, #8]
3418b99c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b9a0:	60fb      	str	r3, [r7, #12]
            break;
3418b9a2:	e000      	b.n	3418b9a6 <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
3418b9a4:	bf00      	nop
        }
      }
      break;
3418b9a6:	e022      	b.n	3418b9ee <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418b9a8:	f7f8 fcce 	bl	34184348 <LL_RCC_HSI_IsReady>
3418b9ac:	4603      	mov	r3, r0
3418b9ae:	2b00      	cmp	r3, #0
3418b9b0:	d01f      	beq.n	3418b9f2 <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b9b2:	f7f8 fcdb 	bl	3418436c <LL_RCC_HSI_GetDivider>
3418b9b6:	4603      	mov	r3, r0
3418b9b8:	09db      	lsrs	r3, r3, #7
3418b9ba:	4a13      	ldr	r2, [pc, #76]	@ (3418ba08 <RCCEx_GetUARTCLKFreq+0x44c>)
3418b9bc:	fa22 f303 	lsr.w	r3, r2, r3
3418b9c0:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b9c2:	e016      	b.n	3418b9f2 <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418b9c4:	f7f8 fce0 	bl	34184388 <LL_RCC_MSI_IsReady>
3418b9c8:	4603      	mov	r3, r0
3418b9ca:	2b00      	cmp	r3, #0
3418b9cc:	d013      	beq.n	3418b9f6 <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
3418b9ce:	4b0f      	ldr	r3, [pc, #60]	@ (3418ba0c <RCCEx_GetUARTCLKFreq+0x450>)
3418b9d0:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b9d2:	e010      	b.n	3418b9f6 <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
3418b9d4:	f7f8 fcf8 	bl	341843c8 <LL_RCC_LSE_IsReady>
3418b9d8:	4603      	mov	r3, r0
3418b9da:	2b00      	cmp	r3, #0
3418b9dc:	d00d      	beq.n	3418b9fa <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
3418b9de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418b9e2:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b9e4:	e009      	b.n	3418b9fa <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
3418b9e6:	bf00      	nop
3418b9e8:	e008      	b.n	3418b9fc <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418b9ea:	bf00      	nop
3418b9ec:	e006      	b.n	3418b9fc <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418b9ee:	bf00      	nop
3418b9f0:	e004      	b.n	3418b9fc <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418b9f2:	bf00      	nop
3418b9f4:	e002      	b.n	3418b9fc <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418b9f6:	bf00      	nop
3418b9f8:	e000      	b.n	3418b9fc <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418b9fa:	bf00      	nop
  }

  return uart_frequency;
3418b9fc:	68fb      	ldr	r3, [r7, #12]
}
3418b9fe:	4618      	mov	r0, r3
3418ba00:	3710      	adds	r7, #16
3418ba02:	46bd      	mov	sp, r7
3418ba04:	bd80      	pop	{r7, pc}
3418ba06:	bf00      	nop
3418ba08:	03d09000 	.word	0x03d09000
3418ba0c:	003d0900 	.word	0x003d0900

3418ba10 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
3418ba10:	b580      	push	{r7, lr}
3418ba12:	b084      	sub	sp, #16
3418ba14:	af00      	add	r7, sp, #0
3418ba16:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418ba18:	2300      	movs	r3, #0
3418ba1a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3418ba1c:	6878      	ldr	r0, [r7, #4]
3418ba1e:	f7f9 f87b 	bl	34184b18 <LL_RCC_GetUSARTClockSource>
3418ba22:	4603      	mov	r3, r0
3418ba24:	4aa2      	ldr	r2, [pc, #648]	@ (3418bcb0 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418ba26:	4293      	cmp	r3, r2
3418ba28:	f000 81e8 	beq.w	3418bdfc <RCCEx_GetUSARTCLKFreq+0x3ec>
3418ba2c:	4aa0      	ldr	r2, [pc, #640]	@ (3418bcb0 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418ba2e:	4293      	cmp	r3, r2
3418ba30:	f200 8203 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418ba34:	4a9f      	ldr	r2, [pc, #636]	@ (3418bcb4 <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418ba36:	4293      	cmp	r3, r2
3418ba38:	f000 81e0 	beq.w	3418bdfc <RCCEx_GetUSARTCLKFreq+0x3ec>
3418ba3c:	4a9d      	ldr	r2, [pc, #628]	@ (3418bcb4 <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418ba3e:	4293      	cmp	r3, r2
3418ba40:	f200 81fb 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418ba44:	4a9c      	ldr	r2, [pc, #624]	@ (3418bcb8 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418ba46:	4293      	cmp	r3, r2
3418ba48:	f000 81d8 	beq.w	3418bdfc <RCCEx_GetUSARTCLKFreq+0x3ec>
3418ba4c:	4a9a      	ldr	r2, [pc, #616]	@ (3418bcb8 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418ba4e:	4293      	cmp	r3, r2
3418ba50:	f200 81f3 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418ba54:	4a99      	ldr	r2, [pc, #612]	@ (3418bcbc <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418ba56:	4293      	cmp	r3, r2
3418ba58:	f000 81d0 	beq.w	3418bdfc <RCCEx_GetUSARTCLKFreq+0x3ec>
3418ba5c:	4a97      	ldr	r2, [pc, #604]	@ (3418bcbc <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418ba5e:	4293      	cmp	r3, r2
3418ba60:	f200 81eb 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418ba64:	4a96      	ldr	r2, [pc, #600]	@ (3418bcc0 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418ba66:	4293      	cmp	r3, r2
3418ba68:	f000 81c8 	beq.w	3418bdfc <RCCEx_GetUSARTCLKFreq+0x3ec>
3418ba6c:	4a94      	ldr	r2, [pc, #592]	@ (3418bcc0 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418ba6e:	4293      	cmp	r3, r2
3418ba70:	f200 81e3 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418ba74:	4a93      	ldr	r2, [pc, #588]	@ (3418bcc4 <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418ba76:	4293      	cmp	r3, r2
3418ba78:	f000 81ce 	beq.w	3418be18 <RCCEx_GetUSARTCLKFreq+0x408>
3418ba7c:	4a91      	ldr	r2, [pc, #580]	@ (3418bcc4 <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418ba7e:	4293      	cmp	r3, r2
3418ba80:	f200 81db 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418ba84:	4a90      	ldr	r2, [pc, #576]	@ (3418bcc8 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418ba86:	4293      	cmp	r3, r2
3418ba88:	f000 81c6 	beq.w	3418be18 <RCCEx_GetUSARTCLKFreq+0x408>
3418ba8c:	4a8e      	ldr	r2, [pc, #568]	@ (3418bcc8 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418ba8e:	4293      	cmp	r3, r2
3418ba90:	f200 81d3 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418ba94:	4a8d      	ldr	r2, [pc, #564]	@ (3418bccc <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418ba96:	4293      	cmp	r3, r2
3418ba98:	f000 81be 	beq.w	3418be18 <RCCEx_GetUSARTCLKFreq+0x408>
3418ba9c:	4a8b      	ldr	r2, [pc, #556]	@ (3418bccc <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418ba9e:	4293      	cmp	r3, r2
3418baa0:	f200 81cb 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418baa4:	4a8a      	ldr	r2, [pc, #552]	@ (3418bcd0 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418baa6:	4293      	cmp	r3, r2
3418baa8:	f000 81b6 	beq.w	3418be18 <RCCEx_GetUSARTCLKFreq+0x408>
3418baac:	4a88      	ldr	r2, [pc, #544]	@ (3418bcd0 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418baae:	4293      	cmp	r3, r2
3418bab0:	f200 81c3 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bab4:	4a87      	ldr	r2, [pc, #540]	@ (3418bcd4 <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418bab6:	4293      	cmp	r3, r2
3418bab8:	f000 81ae 	beq.w	3418be18 <RCCEx_GetUSARTCLKFreq+0x408>
3418babc:	4a85      	ldr	r2, [pc, #532]	@ (3418bcd4 <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418babe:	4293      	cmp	r3, r2
3418bac0:	f200 81bb 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bac4:	4a84      	ldr	r2, [pc, #528]	@ (3418bcd8 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418bac6:	4293      	cmp	r3, r2
3418bac8:	f000 81ae 	beq.w	3418be28 <RCCEx_GetUSARTCLKFreq+0x418>
3418bacc:	4a82      	ldr	r2, [pc, #520]	@ (3418bcd8 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418bace:	4293      	cmp	r3, r2
3418bad0:	f200 81b3 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bad4:	4a81      	ldr	r2, [pc, #516]	@ (3418bcdc <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418bad6:	4293      	cmp	r3, r2
3418bad8:	f000 81a6 	beq.w	3418be28 <RCCEx_GetUSARTCLKFreq+0x418>
3418badc:	4a7f      	ldr	r2, [pc, #508]	@ (3418bcdc <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418bade:	4293      	cmp	r3, r2
3418bae0:	f200 81ab 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bae4:	4a7e      	ldr	r2, [pc, #504]	@ (3418bce0 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418bae6:	4293      	cmp	r3, r2
3418bae8:	f000 819e 	beq.w	3418be28 <RCCEx_GetUSARTCLKFreq+0x418>
3418baec:	4a7c      	ldr	r2, [pc, #496]	@ (3418bce0 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418baee:	4293      	cmp	r3, r2
3418baf0:	f200 81a3 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418baf4:	4a7b      	ldr	r2, [pc, #492]	@ (3418bce4 <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418baf6:	4293      	cmp	r3, r2
3418baf8:	f000 8196 	beq.w	3418be28 <RCCEx_GetUSARTCLKFreq+0x418>
3418bafc:	4a79      	ldr	r2, [pc, #484]	@ (3418bce4 <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418bafe:	4293      	cmp	r3, r2
3418bb00:	f200 819b 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bb04:	4a78      	ldr	r2, [pc, #480]	@ (3418bce8 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418bb06:	4293      	cmp	r3, r2
3418bb08:	f000 818e 	beq.w	3418be28 <RCCEx_GetUSARTCLKFreq+0x418>
3418bb0c:	4a76      	ldr	r2, [pc, #472]	@ (3418bce8 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418bb0e:	4293      	cmp	r3, r2
3418bb10:	f200 8193 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bb14:	4a75      	ldr	r2, [pc, #468]	@ (3418bcec <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418bb16:	4293      	cmp	r3, r2
3418bb18:	f000 812d 	beq.w	3418bd76 <RCCEx_GetUSARTCLKFreq+0x366>
3418bb1c:	4a73      	ldr	r2, [pc, #460]	@ (3418bcec <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418bb1e:	4293      	cmp	r3, r2
3418bb20:	f200 818b 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bb24:	4a72      	ldr	r2, [pc, #456]	@ (3418bcf0 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418bb26:	4293      	cmp	r3, r2
3418bb28:	f000 8125 	beq.w	3418bd76 <RCCEx_GetUSARTCLKFreq+0x366>
3418bb2c:	4a70      	ldr	r2, [pc, #448]	@ (3418bcf0 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418bb2e:	4293      	cmp	r3, r2
3418bb30:	f200 8183 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bb34:	4a6f      	ldr	r2, [pc, #444]	@ (3418bcf4 <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418bb36:	4293      	cmp	r3, r2
3418bb38:	f000 811d 	beq.w	3418bd76 <RCCEx_GetUSARTCLKFreq+0x366>
3418bb3c:	4a6d      	ldr	r2, [pc, #436]	@ (3418bcf4 <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418bb3e:	4293      	cmp	r3, r2
3418bb40:	f200 817b 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bb44:	4a6c      	ldr	r2, [pc, #432]	@ (3418bcf8 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418bb46:	4293      	cmp	r3, r2
3418bb48:	f000 8115 	beq.w	3418bd76 <RCCEx_GetUSARTCLKFreq+0x366>
3418bb4c:	4a6a      	ldr	r2, [pc, #424]	@ (3418bcf8 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418bb4e:	4293      	cmp	r3, r2
3418bb50:	f200 8173 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bb54:	4a69      	ldr	r2, [pc, #420]	@ (3418bcfc <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418bb56:	4293      	cmp	r3, r2
3418bb58:	f000 810d 	beq.w	3418bd76 <RCCEx_GetUSARTCLKFreq+0x366>
3418bb5c:	4a67      	ldr	r2, [pc, #412]	@ (3418bcfc <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418bb5e:	4293      	cmp	r3, r2
3418bb60:	f200 816b 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bb64:	4a66      	ldr	r2, [pc, #408]	@ (3418bd00 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418bb66:	4293      	cmp	r3, r2
3418bb68:	d07b      	beq.n	3418bc62 <RCCEx_GetUSARTCLKFreq+0x252>
3418bb6a:	4a65      	ldr	r2, [pc, #404]	@ (3418bd00 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418bb6c:	4293      	cmp	r3, r2
3418bb6e:	f200 8164 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bb72:	4a64      	ldr	r2, [pc, #400]	@ (3418bd04 <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418bb74:	4293      	cmp	r3, r2
3418bb76:	d074      	beq.n	3418bc62 <RCCEx_GetUSARTCLKFreq+0x252>
3418bb78:	4a62      	ldr	r2, [pc, #392]	@ (3418bd04 <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418bb7a:	4293      	cmp	r3, r2
3418bb7c:	f200 815d 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bb80:	4a61      	ldr	r2, [pc, #388]	@ (3418bd08 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418bb82:	4293      	cmp	r3, r2
3418bb84:	d06d      	beq.n	3418bc62 <RCCEx_GetUSARTCLKFreq+0x252>
3418bb86:	4a60      	ldr	r2, [pc, #384]	@ (3418bd08 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418bb88:	4293      	cmp	r3, r2
3418bb8a:	f200 8156 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bb8e:	4a5f      	ldr	r2, [pc, #380]	@ (3418bd0c <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418bb90:	4293      	cmp	r3, r2
3418bb92:	d066      	beq.n	3418bc62 <RCCEx_GetUSARTCLKFreq+0x252>
3418bb94:	4a5d      	ldr	r2, [pc, #372]	@ (3418bd0c <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418bb96:	4293      	cmp	r3, r2
3418bb98:	f200 814f 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bb9c:	4a5c      	ldr	r2, [pc, #368]	@ (3418bd10 <RCCEx_GetUSARTCLKFreq+0x300>)
3418bb9e:	4293      	cmp	r3, r2
3418bba0:	d05f      	beq.n	3418bc62 <RCCEx_GetUSARTCLKFreq+0x252>
3418bba2:	4a5b      	ldr	r2, [pc, #364]	@ (3418bd10 <RCCEx_GetUSARTCLKFreq+0x300>)
3418bba4:	4293      	cmp	r3, r2
3418bba6:	f200 8148 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bbaa:	4a5a      	ldr	r2, [pc, #360]	@ (3418bd14 <RCCEx_GetUSARTCLKFreq+0x304>)
3418bbac:	4293      	cmp	r3, r2
3418bbae:	d053      	beq.n	3418bc58 <RCCEx_GetUSARTCLKFreq+0x248>
3418bbb0:	4a58      	ldr	r2, [pc, #352]	@ (3418bd14 <RCCEx_GetUSARTCLKFreq+0x304>)
3418bbb2:	4293      	cmp	r3, r2
3418bbb4:	f200 8141 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bbb8:	4a57      	ldr	r2, [pc, #348]	@ (3418bd18 <RCCEx_GetUSARTCLKFreq+0x308>)
3418bbba:	4293      	cmp	r3, r2
3418bbbc:	d04c      	beq.n	3418bc58 <RCCEx_GetUSARTCLKFreq+0x248>
3418bbbe:	4a56      	ldr	r2, [pc, #344]	@ (3418bd18 <RCCEx_GetUSARTCLKFreq+0x308>)
3418bbc0:	4293      	cmp	r3, r2
3418bbc2:	f200 813a 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bbc6:	4a55      	ldr	r2, [pc, #340]	@ (3418bd1c <RCCEx_GetUSARTCLKFreq+0x30c>)
3418bbc8:	4293      	cmp	r3, r2
3418bbca:	d045      	beq.n	3418bc58 <RCCEx_GetUSARTCLKFreq+0x248>
3418bbcc:	4a53      	ldr	r2, [pc, #332]	@ (3418bd1c <RCCEx_GetUSARTCLKFreq+0x30c>)
3418bbce:	4293      	cmp	r3, r2
3418bbd0:	f200 8133 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bbd4:	4a52      	ldr	r2, [pc, #328]	@ (3418bd20 <RCCEx_GetUSARTCLKFreq+0x310>)
3418bbd6:	4293      	cmp	r3, r2
3418bbd8:	d03e      	beq.n	3418bc58 <RCCEx_GetUSARTCLKFreq+0x248>
3418bbda:	4a51      	ldr	r2, [pc, #324]	@ (3418bd20 <RCCEx_GetUSARTCLKFreq+0x310>)
3418bbdc:	4293      	cmp	r3, r2
3418bbde:	f200 812c 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bbe2:	4a50      	ldr	r2, [pc, #320]	@ (3418bd24 <RCCEx_GetUSARTCLKFreq+0x314>)
3418bbe4:	4293      	cmp	r3, r2
3418bbe6:	d037      	beq.n	3418bc58 <RCCEx_GetUSARTCLKFreq+0x248>
3418bbe8:	4a4e      	ldr	r2, [pc, #312]	@ (3418bd24 <RCCEx_GetUSARTCLKFreq+0x314>)
3418bbea:	4293      	cmp	r3, r2
3418bbec:	f200 8125 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bbf0:	4a4d      	ldr	r2, [pc, #308]	@ (3418bd28 <RCCEx_GetUSARTCLKFreq+0x318>)
3418bbf2:	4293      	cmp	r3, r2
3418bbf4:	d018      	beq.n	3418bc28 <RCCEx_GetUSARTCLKFreq+0x218>
3418bbf6:	4a4c      	ldr	r2, [pc, #304]	@ (3418bd28 <RCCEx_GetUSARTCLKFreq+0x318>)
3418bbf8:	4293      	cmp	r3, r2
3418bbfa:	f200 811e 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bbfe:	4a4b      	ldr	r2, [pc, #300]	@ (3418bd2c <RCCEx_GetUSARTCLKFreq+0x31c>)
3418bc00:	4293      	cmp	r3, r2
3418bc02:	d01d      	beq.n	3418bc40 <RCCEx_GetUSARTCLKFreq+0x230>
3418bc04:	4a49      	ldr	r2, [pc, #292]	@ (3418bd2c <RCCEx_GetUSARTCLKFreq+0x31c>)
3418bc06:	4293      	cmp	r3, r2
3418bc08:	f200 8117 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bc0c:	4a48      	ldr	r2, [pc, #288]	@ (3418bd30 <RCCEx_GetUSARTCLKFreq+0x320>)
3418bc0e:	4293      	cmp	r3, r2
3418bc10:	d00a      	beq.n	3418bc28 <RCCEx_GetUSARTCLKFreq+0x218>
3418bc12:	4a47      	ldr	r2, [pc, #284]	@ (3418bd30 <RCCEx_GetUSARTCLKFreq+0x320>)
3418bc14:	4293      	cmp	r3, r2
3418bc16:	f200 8110 	bhi.w	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
3418bc1a:	4a46      	ldr	r2, [pc, #280]	@ (3418bd34 <RCCEx_GetUSARTCLKFreq+0x324>)
3418bc1c:	4293      	cmp	r3, r2
3418bc1e:	d003      	beq.n	3418bc28 <RCCEx_GetUSARTCLKFreq+0x218>
3418bc20:	4a45      	ldr	r2, [pc, #276]	@ (3418bd38 <RCCEx_GetUSARTCLKFreq+0x328>)
3418bc22:	4293      	cmp	r3, r2
3418bc24:	d00c      	beq.n	3418bc40 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418bc26:	e108      	b.n	3418be3a <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418bc28:	f7f7 ff7a 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418bc2c:	4603      	mov	r3, r0
3418bc2e:	4618      	mov	r0, r3
3418bc30:	f7fc ff1a 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418bc34:	4603      	mov	r3, r0
3418bc36:	4618      	mov	r0, r3
3418bc38:	f7fc ff37 	bl	34188aaa <RCCEx_GetPCLK2Freq>
3418bc3c:	60f8      	str	r0, [r7, #12]
      break;
3418bc3e:	e107      	b.n	3418be50 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418bc40:	f7f7 ff6e 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418bc44:	4603      	mov	r3, r0
3418bc46:	4618      	mov	r0, r3
3418bc48:	f7fc ff0e 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418bc4c:	4603      	mov	r3, r0
3418bc4e:	4618      	mov	r0, r3
3418bc50:	f7fc ff1b 	bl	34188a8a <RCCEx_GetPCLK1Freq>
3418bc54:	60f8      	str	r0, [r7, #12]
      break;
3418bc56:	e0fb      	b.n	3418be50 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418bc58:	2007      	movs	r0, #7
3418bc5a:	f7fd f9f1 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418bc5e:	60f8      	str	r0, [r7, #12]
      break;
3418bc60:	e0f6      	b.n	3418be50 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418bc62:	f7f9 fb95 	bl	34185390 <LL_RCC_IC9_IsEnabled>
3418bc66:	4603      	mov	r3, r0
3418bc68:	2b00      	cmp	r3, #0
3418bc6a:	f000 80e8 	beq.w	3418be3e <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
3418bc6e:	f7f9 fbb1 	bl	341853d4 <LL_RCC_IC9_GetDivider>
3418bc72:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418bc74:	f7f9 fba0 	bl	341853b8 <LL_RCC_IC9_GetSource>
3418bc78:	4603      	mov	r3, r0
3418bc7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bc7e:	d06f      	beq.n	3418bd60 <RCCEx_GetUSARTCLKFreq+0x350>
3418bc80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bc84:	d875      	bhi.n	3418bd72 <RCCEx_GetUSARTCLKFreq+0x362>
3418bc86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bc8a:	d060      	beq.n	3418bd4e <RCCEx_GetUSARTCLKFreq+0x33e>
3418bc8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bc90:	d86f      	bhi.n	3418bd72 <RCCEx_GetUSARTCLKFreq+0x362>
3418bc92:	2b00      	cmp	r3, #0
3418bc94:	d003      	beq.n	3418bc9e <RCCEx_GetUSARTCLKFreq+0x28e>
3418bc96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bc9a:	d04f      	beq.n	3418bd3c <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
3418bc9c:	e069      	b.n	3418bd72 <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bc9e:	f7fc fdcb 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418bca2:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418bca4:	68fa      	ldr	r2, [r7, #12]
3418bca6:	68bb      	ldr	r3, [r7, #8]
3418bca8:	fbb2 f3f3 	udiv	r3, r2, r3
3418bcac:	60fb      	str	r3, [r7, #12]
            break;
3418bcae:	e061      	b.n	3418bd74 <RCCEx_GetUSARTCLKFreq+0x364>
3418bcb0:	07061430 	.word	0x07061430
3418bcb4:	07060830 	.word	0x07060830
3418bcb8:	07060434 	.word	0x07060434
3418bcbc:	07060430 	.word	0x07060430
3418bcc0:	07060030 	.word	0x07060030
3418bcc4:	07051430 	.word	0x07051430
3418bcc8:	07050830 	.word	0x07050830
3418bccc:	07050434 	.word	0x07050434
3418bcd0:	07050430 	.word	0x07050430
3418bcd4:	07050030 	.word	0x07050030
3418bcd8:	07041430 	.word	0x07041430
3418bcdc:	07040830 	.word	0x07040830
3418bce0:	07040434 	.word	0x07040434
3418bce4:	07040430 	.word	0x07040430
3418bce8:	07040030 	.word	0x07040030
3418bcec:	07031430 	.word	0x07031430
3418bcf0:	07030830 	.word	0x07030830
3418bcf4:	07030434 	.word	0x07030434
3418bcf8:	07030430 	.word	0x07030430
3418bcfc:	07030030 	.word	0x07030030
3418bd00:	07021430 	.word	0x07021430
3418bd04:	07020830 	.word	0x07020830
3418bd08:	07020434 	.word	0x07020434
3418bd0c:	07020430 	.word	0x07020430
3418bd10:	07020030 	.word	0x07020030
3418bd14:	07011430 	.word	0x07011430
3418bd18:	07010830 	.word	0x07010830
3418bd1c:	07010434 	.word	0x07010434
3418bd20:	07010430 	.word	0x07010430
3418bd24:	07010030 	.word	0x07010030
3418bd28:	07001430 	.word	0x07001430
3418bd2c:	07000830 	.word	0x07000830
3418bd30:	07000434 	.word	0x07000434
3418bd34:	07000030 	.word	0x07000030
3418bd38:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bd3c:	f7fc fdc2 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418bd40:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418bd42:	68fa      	ldr	r2, [r7, #12]
3418bd44:	68bb      	ldr	r3, [r7, #8]
3418bd46:	fbb2 f3f3 	udiv	r3, r2, r3
3418bd4a:	60fb      	str	r3, [r7, #12]
            break;
3418bd4c:	e012      	b.n	3418bd74 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bd4e:	f7fc fdff 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418bd52:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418bd54:	68fa      	ldr	r2, [r7, #12]
3418bd56:	68bb      	ldr	r3, [r7, #8]
3418bd58:	fbb2 f3f3 	udiv	r3, r2, r3
3418bd5c:	60fb      	str	r3, [r7, #12]
            break;
3418bd5e:	e009      	b.n	3418bd74 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bd60:	f7fc fe3c 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418bd64:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418bd66:	68fa      	ldr	r2, [r7, #12]
3418bd68:	68bb      	ldr	r3, [r7, #8]
3418bd6a:	fbb2 f3f3 	udiv	r3, r2, r3
3418bd6e:	60fb      	str	r3, [r7, #12]
            break;
3418bd70:	e000      	b.n	3418bd74 <RCCEx_GetUSARTCLKFreq+0x364>
            break;
3418bd72:	bf00      	nop
      break;
3418bd74:	e063      	b.n	3418be3e <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418bd76:	f7f9 fc0b 	bl	34185590 <LL_RCC_IC14_IsEnabled>
3418bd7a:	4603      	mov	r3, r0
3418bd7c:	2b00      	cmp	r3, #0
3418bd7e:	d060      	beq.n	3418be42 <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
3418bd80:	f7f9 fc28 	bl	341855d4 <LL_RCC_IC14_GetDivider>
3418bd84:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418bd86:	f7f9 fc17 	bl	341855b8 <LL_RCC_IC14_GetSource>
3418bd8a:	4603      	mov	r3, r0
3418bd8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bd90:	d029      	beq.n	3418bde6 <RCCEx_GetUSARTCLKFreq+0x3d6>
3418bd92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bd96:	d82f      	bhi.n	3418bdf8 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418bd98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bd9c:	d01a      	beq.n	3418bdd4 <RCCEx_GetUSARTCLKFreq+0x3c4>
3418bd9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bda2:	d829      	bhi.n	3418bdf8 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418bda4:	2b00      	cmp	r3, #0
3418bda6:	d003      	beq.n	3418bdb0 <RCCEx_GetUSARTCLKFreq+0x3a0>
3418bda8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bdac:	d009      	beq.n	3418bdc2 <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
3418bdae:	e023      	b.n	3418bdf8 <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bdb0:	f7fc fd42 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418bdb4:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418bdb6:	68fa      	ldr	r2, [r7, #12]
3418bdb8:	68bb      	ldr	r3, [r7, #8]
3418bdba:	fbb2 f3f3 	udiv	r3, r2, r3
3418bdbe:	60fb      	str	r3, [r7, #12]
            break;
3418bdc0:	e01b      	b.n	3418bdfa <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bdc2:	f7fc fd7f 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418bdc6:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418bdc8:	68fa      	ldr	r2, [r7, #12]
3418bdca:	68bb      	ldr	r3, [r7, #8]
3418bdcc:	fbb2 f3f3 	udiv	r3, r2, r3
3418bdd0:	60fb      	str	r3, [r7, #12]
            break;
3418bdd2:	e012      	b.n	3418bdfa <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bdd4:	f7fc fdbc 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418bdd8:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418bdda:	68fa      	ldr	r2, [r7, #12]
3418bddc:	68bb      	ldr	r3, [r7, #8]
3418bdde:	fbb2 f3f3 	udiv	r3, r2, r3
3418bde2:	60fb      	str	r3, [r7, #12]
            break;
3418bde4:	e009      	b.n	3418bdfa <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bde6:	f7fc fdf9 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418bdea:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418bdec:	68fa      	ldr	r2, [r7, #12]
3418bdee:	68bb      	ldr	r3, [r7, #8]
3418bdf0:	fbb2 f3f3 	udiv	r3, r2, r3
3418bdf4:	60fb      	str	r3, [r7, #12]
            break;
3418bdf6:	e000      	b.n	3418bdfa <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
3418bdf8:	bf00      	nop
      break;
3418bdfa:	e022      	b.n	3418be42 <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
3418bdfc:	f7f8 faa4 	bl	34184348 <LL_RCC_HSI_IsReady>
3418be00:	4603      	mov	r3, r0
3418be02:	2b00      	cmp	r3, #0
3418be04:	d01f      	beq.n	3418be46 <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418be06:	f7f8 fab1 	bl	3418436c <LL_RCC_HSI_GetDivider>
3418be0a:	4603      	mov	r3, r0
3418be0c:	09db      	lsrs	r3, r3, #7
3418be0e:	4a13      	ldr	r2, [pc, #76]	@ (3418be5c <RCCEx_GetUSARTCLKFreq+0x44c>)
3418be10:	fa22 f303 	lsr.w	r3, r2, r3
3418be14:	60fb      	str	r3, [r7, #12]
      break;
3418be16:	e016      	b.n	3418be46 <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
3418be18:	f7f8 fab6 	bl	34184388 <LL_RCC_MSI_IsReady>
3418be1c:	4603      	mov	r3, r0
3418be1e:	2b00      	cmp	r3, #0
3418be20:	d013      	beq.n	3418be4a <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
3418be22:	4b0f      	ldr	r3, [pc, #60]	@ (3418be60 <RCCEx_GetUSARTCLKFreq+0x450>)
3418be24:	60fb      	str	r3, [r7, #12]
      break;
3418be26:	e010      	b.n	3418be4a <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
3418be28:	f7f8 face 	bl	341843c8 <LL_RCC_LSE_IsReady>
3418be2c:	4603      	mov	r3, r0
3418be2e:	2b00      	cmp	r3, #0
3418be30:	d00d      	beq.n	3418be4e <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
3418be32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418be36:	60fb      	str	r3, [r7, #12]
      break;
3418be38:	e009      	b.n	3418be4e <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
3418be3a:	bf00      	nop
3418be3c:	e008      	b.n	3418be50 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418be3e:	bf00      	nop
3418be40:	e006      	b.n	3418be50 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418be42:	bf00      	nop
3418be44:	e004      	b.n	3418be50 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418be46:	bf00      	nop
3418be48:	e002      	b.n	3418be50 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418be4a:	bf00      	nop
3418be4c:	e000      	b.n	3418be50 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418be4e:	bf00      	nop
  }

  return usart_frequency;
3418be50:	68fb      	ldr	r3, [r7, #12]
}
3418be52:	4618      	mov	r0, r3
3418be54:	3710      	adds	r7, #16
3418be56:	46bd      	mov	sp, r7
3418be58:	bd80      	pop	{r7, pc}
3418be5a:	bf00      	nop
3418be5c:	03d09000 	.word	0x03d09000
3418be60:	003d0900 	.word	0x003d0900

3418be64 <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
3418be64:	b580      	push	{r7, lr}
3418be66:	b084      	sub	sp, #16
3418be68:	af00      	add	r7, sp, #0
3418be6a:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418be6c:	2300      	movs	r3, #0
3418be6e:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
3418be70:	6878      	ldr	r0, [r7, #4]
3418be72:	f7f8 fe69 	bl	34184b48 <LL_RCC_GetUSBClockSource>
3418be76:	4603      	mov	r3, r0
3418be78:	4a4b      	ldr	r2, [pc, #300]	@ (3418bfa8 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418be7a:	4293      	cmp	r3, r2
3418be7c:	d035      	beq.n	3418beea <RCCEx_GetOTGPHYCLKFreq+0x86>
3418be7e:	4a4a      	ldr	r2, [pc, #296]	@ (3418bfa8 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418be80:	4293      	cmp	r3, r2
3418be82:	f200 8085 	bhi.w	3418bf90 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418be86:	4a49      	ldr	r2, [pc, #292]	@ (3418bfac <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418be88:	4293      	cmp	r3, r2
3418be8a:	d02e      	beq.n	3418beea <RCCEx_GetOTGPHYCLKFreq+0x86>
3418be8c:	4a47      	ldr	r2, [pc, #284]	@ (3418bfac <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418be8e:	4293      	cmp	r3, r2
3418be90:	d87e      	bhi.n	3418bf90 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418be92:	4a47      	ldr	r2, [pc, #284]	@ (3418bfb0 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418be94:	4293      	cmp	r3, r2
3418be96:	d038      	beq.n	3418bf0a <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418be98:	4a45      	ldr	r2, [pc, #276]	@ (3418bfb0 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418be9a:	4293      	cmp	r3, r2
3418be9c:	d878      	bhi.n	3418bf90 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418be9e:	4a45      	ldr	r2, [pc, #276]	@ (3418bfb4 <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418bea0:	4293      	cmp	r3, r2
3418bea2:	d032      	beq.n	3418bf0a <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418bea4:	4a43      	ldr	r2, [pc, #268]	@ (3418bfb4 <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418bea6:	4293      	cmp	r3, r2
3418bea8:	d872      	bhi.n	3418bf90 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418beaa:	4a43      	ldr	r2, [pc, #268]	@ (3418bfb8 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418beac:	4293      	cmp	r3, r2
3418beae:	d00f      	beq.n	3418bed0 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418beb0:	4a41      	ldr	r2, [pc, #260]	@ (3418bfb8 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418beb2:	4293      	cmp	r3, r2
3418beb4:	d86c      	bhi.n	3418bf90 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418beb6:	4a41      	ldr	r2, [pc, #260]	@ (3418bfbc <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418beb8:	4293      	cmp	r3, r2
3418beba:	d009      	beq.n	3418bed0 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418bebc:	4a3f      	ldr	r2, [pc, #252]	@ (3418bfbc <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418bebe:	4293      	cmp	r3, r2
3418bec0:	d866      	bhi.n	3418bf90 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418bec2:	4a3f      	ldr	r2, [pc, #252]	@ (3418bfc0 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
3418bec4:	4293      	cmp	r3, r2
3418bec6:	d008      	beq.n	3418beda <RCCEx_GetOTGPHYCLKFreq+0x76>
3418bec8:	4a3e      	ldr	r2, [pc, #248]	@ (3418bfc4 <RCCEx_GetOTGPHYCLKFreq+0x160>)
3418beca:	4293      	cmp	r3, r2
3418becc:	d005      	beq.n	3418beda <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418bece:	e05f      	b.n	3418bf90 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418bed0:	2007      	movs	r0, #7
3418bed2:	f7fd f8b5 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418bed6:	60f8      	str	r0, [r7, #12]
      break;
3418bed8:	e061      	b.n	3418bf9e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
3418beda:	f7f8 fa23 	bl	34184324 <LL_RCC_HSE_IsReady>
3418bede:	4603      	mov	r3, r0
3418bee0:	2b00      	cmp	r3, #0
3418bee2:	d057      	beq.n	3418bf94 <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
3418bee4:	4b38      	ldr	r3, [pc, #224]	@ (3418bfc8 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418bee6:	60fb      	str	r3, [r7, #12]
      break;
3418bee8:	e054      	b.n	3418bf94 <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
3418beea:	f7f8 fa1b 	bl	34184324 <LL_RCC_HSE_IsReady>
3418beee:	4603      	mov	r3, r0
3418bef0:	2b00      	cmp	r3, #0
3418bef2:	d051      	beq.n	3418bf98 <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418bef4:	f7f8 fa04 	bl	34184300 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418bef8:	4603      	mov	r3, r0
3418befa:	2b00      	cmp	r3, #0
3418befc:	d102      	bne.n	3418bf04 <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
3418befe:	4b33      	ldr	r3, [pc, #204]	@ (3418bfcc <RCCEx_GetOTGPHYCLKFreq+0x168>)
3418bf00:	60fb      	str	r3, [r7, #12]
      break;
3418bf02:	e049      	b.n	3418bf98 <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
3418bf04:	4b30      	ldr	r3, [pc, #192]	@ (3418bfc8 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418bf06:	60fb      	str	r3, [r7, #12]
      break;
3418bf08:	e046      	b.n	3418bf98 <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418bf0a:	f7f9 fb81 	bl	34185610 <LL_RCC_IC15_IsEnabled>
3418bf0e:	4603      	mov	r3, r0
3418bf10:	2b00      	cmp	r3, #0
3418bf12:	d043      	beq.n	3418bf9c <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
3418bf14:	f7f9 fb9e 	bl	34185654 <LL_RCC_IC15_GetDivider>
3418bf18:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418bf1a:	f7f9 fb8d 	bl	34185638 <LL_RCC_IC15_GetSource>
3418bf1e:	4603      	mov	r3, r0
3418bf20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bf24:	d029      	beq.n	3418bf7a <RCCEx_GetOTGPHYCLKFreq+0x116>
3418bf26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bf2a:	d82f      	bhi.n	3418bf8c <RCCEx_GetOTGPHYCLKFreq+0x128>
3418bf2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bf30:	d01a      	beq.n	3418bf68 <RCCEx_GetOTGPHYCLKFreq+0x104>
3418bf32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bf36:	d829      	bhi.n	3418bf8c <RCCEx_GetOTGPHYCLKFreq+0x128>
3418bf38:	2b00      	cmp	r3, #0
3418bf3a:	d003      	beq.n	3418bf44 <RCCEx_GetOTGPHYCLKFreq+0xe0>
3418bf3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bf40:	d009      	beq.n	3418bf56 <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
3418bf42:	e023      	b.n	3418bf8c <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bf44:	f7fc fc78 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418bf48:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418bf4a:	68fa      	ldr	r2, [r7, #12]
3418bf4c:	68bb      	ldr	r3, [r7, #8]
3418bf4e:	fbb2 f3f3 	udiv	r3, r2, r3
3418bf52:	60fb      	str	r3, [r7, #12]
            break;
3418bf54:	e01b      	b.n	3418bf8e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bf56:	f7fc fcb5 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418bf5a:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418bf5c:	68fa      	ldr	r2, [r7, #12]
3418bf5e:	68bb      	ldr	r3, [r7, #8]
3418bf60:	fbb2 f3f3 	udiv	r3, r2, r3
3418bf64:	60fb      	str	r3, [r7, #12]
            break;
3418bf66:	e012      	b.n	3418bf8e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bf68:	f7fc fcf2 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418bf6c:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418bf6e:	68fa      	ldr	r2, [r7, #12]
3418bf70:	68bb      	ldr	r3, [r7, #8]
3418bf72:	fbb2 f3f3 	udiv	r3, r2, r3
3418bf76:	60fb      	str	r3, [r7, #12]
            break;
3418bf78:	e009      	b.n	3418bf8e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bf7a:	f7fc fd2f 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418bf7e:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418bf80:	68fa      	ldr	r2, [r7, #12]
3418bf82:	68bb      	ldr	r3, [r7, #8]
3418bf84:	fbb2 f3f3 	udiv	r3, r2, r3
3418bf88:	60fb      	str	r3, [r7, #12]
            break;
3418bf8a:	e000      	b.n	3418bf8e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
3418bf8c:	bf00      	nop
      break;
3418bf8e:	e005      	b.n	3418bf9c <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
3418bf90:	bf00      	nop
3418bf92:	e004      	b.n	3418bf9e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418bf94:	bf00      	nop
3418bf96:	e002      	b.n	3418bf9e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418bf98:	bf00      	nop
3418bf9a:	e000      	b.n	3418bf9e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418bf9c:	bf00      	nop
  }

  return usb_frequency;
3418bf9e:	68fb      	ldr	r3, [r7, #12]
}
3418bfa0:	4618      	mov	r0, r3
3418bfa2:	3710      	adds	r7, #16
3418bfa4:	46bd      	mov	sp, r7
3418bfa6:	bd80      	pop	{r7, pc}
3418bfa8:	03031414 	.word	0x03031414
3418bfac:	03030c14 	.word	0x03030c14
3418bfb0:	03021414 	.word	0x03021414
3418bfb4:	03020c14 	.word	0x03020c14
3418bfb8:	03011414 	.word	0x03011414
3418bfbc:	03010c14 	.word	0x03010c14
3418bfc0:	03000c14 	.word	0x03000c14
3418bfc4:	03001414 	.word	0x03001414
3418bfc8:	016e3600 	.word	0x016e3600
3418bfcc:	02dc6c00 	.word	0x02dc6c00

3418bfd0 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
3418bfd0:	b580      	push	{r7, lr}
3418bfd2:	b084      	sub	sp, #16
3418bfd4:	af00      	add	r7, sp, #0
3418bfd6:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418bfd8:	2300      	movs	r3, #0
3418bfda:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
3418bfdc:	6878      	ldr	r0, [r7, #4]
3418bfde:	f7f8 fdb3 	bl	34184b48 <LL_RCC_GetUSBClockSource>
3418bfe2:	4603      	mov	r3, r0
3418bfe4:	4a1a      	ldr	r2, [pc, #104]	@ (3418c050 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418bfe6:	4293      	cmp	r3, r2
3418bfe8:	d00f      	beq.n	3418c00a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418bfea:	4a19      	ldr	r2, [pc, #100]	@ (3418c050 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418bfec:	4293      	cmp	r3, r2
3418bfee:	d826      	bhi.n	3418c03e <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418bff0:	4a18      	ldr	r2, [pc, #96]	@ (3418c054 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418bff2:	4293      	cmp	r3, r2
3418bff4:	d009      	beq.n	3418c00a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418bff6:	4a17      	ldr	r2, [pc, #92]	@ (3418c054 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418bff8:	4293      	cmp	r3, r2
3418bffa:	d820      	bhi.n	3418c03e <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418bffc:	4a16      	ldr	r2, [pc, #88]	@ (3418c058 <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
3418bffe:	4293      	cmp	r3, r2
3418c000:	d013      	beq.n	3418c02a <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
3418c002:	4a16      	ldr	r2, [pc, #88]	@ (3418c05c <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
3418c004:	4293      	cmp	r3, r2
3418c006:	d015      	beq.n	3418c034 <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
3418c008:	e019      	b.n	3418c03e <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
3418c00a:	f7f8 f98b 	bl	34184324 <LL_RCC_HSE_IsReady>
3418c00e:	4603      	mov	r3, r0
3418c010:	2b00      	cmp	r3, #0
3418c012:	d016      	beq.n	3418c042 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418c014:	f7f8 f974 	bl	34184300 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418c018:	4603      	mov	r3, r0
3418c01a:	2b00      	cmp	r3, #0
3418c01c:	d102      	bne.n	3418c024 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
3418c01e:	4b10      	ldr	r3, [pc, #64]	@ (3418c060 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
3418c020:	60fb      	str	r3, [r7, #12]
      break;
3418c022:	e00e      	b.n	3418c042 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
3418c024:	4b0f      	ldr	r3, [pc, #60]	@ (3418c064 <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
3418c026:	60fb      	str	r3, [r7, #12]
      break;
3418c028:	e00b      	b.n	3418c042 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3418c02a:	480f      	ldr	r0, [pc, #60]	@ (3418c068 <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
3418c02c:	f7ff ff1a 	bl	3418be64 <RCCEx_GetOTGPHYCLKFreq>
3418c030:	60f8      	str	r0, [r7, #12]
      break;
3418c032:	e007      	b.n	3418c044 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3418c034:	480d      	ldr	r0, [pc, #52]	@ (3418c06c <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
3418c036:	f7ff ff15 	bl	3418be64 <RCCEx_GetOTGPHYCLKFreq>
3418c03a:	60f8      	str	r0, [r7, #12]
      break;
3418c03c:	e002      	b.n	3418c044 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418c03e:	bf00      	nop
3418c040:	e000      	b.n	3418c044 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418c042:	bf00      	nop
  }

  return usb_frequency;
3418c044:	68fb      	ldr	r3, [r7, #12]
}
3418c046:	4618      	mov	r0, r3
3418c048:	3710      	adds	r7, #16
3418c04a:	46bd      	mov	sp, r7
3418c04c:	bd80      	pop	{r7, pc}
3418c04e:	bf00      	nop
3418c050:	01011814 	.word	0x01011814
3418c054:	01011014 	.word	0x01011014
3418c058:	01001014 	.word	0x01001014
3418c05c:	01001814 	.word	0x01001814
3418c060:	02dc6c00 	.word	0x02dc6c00
3418c064:	016e3600 	.word	0x016e3600
3418c068:	03000c14 	.word	0x03000c14
3418c06c:	03001414 	.word	0x03001414

3418c070 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
3418c070:	b580      	push	{r7, lr}
3418c072:	b084      	sub	sp, #16
3418c074:	af00      	add	r7, sp, #0
3418c076:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c078:	2300      	movs	r3, #0
3418c07a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3418c07c:	6878      	ldr	r0, [r7, #4]
3418c07e:	f7f8 fd6f 	bl	34184b60 <LL_RCC_GetXSPIClockSource>
3418c082:	4603      	mov	r3, r0
3418c084:	4a76      	ldr	r2, [pc, #472]	@ (3418c260 <RCCEx_GetXSPICLKFreq+0x1f0>)
3418c086:	4293      	cmp	r3, r2
3418c088:	f000 809d 	beq.w	3418c1c6 <RCCEx_GetXSPICLKFreq+0x156>
3418c08c:	4a74      	ldr	r2, [pc, #464]	@ (3418c260 <RCCEx_GetXSPICLKFreq+0x1f0>)
3418c08e:	4293      	cmp	r3, r2
3418c090:	f200 80dc 	bhi.w	3418c24c <RCCEx_GetXSPICLKFreq+0x1dc>
3418c094:	4a73      	ldr	r2, [pc, #460]	@ (3418c264 <RCCEx_GetXSPICLKFreq+0x1f4>)
3418c096:	4293      	cmp	r3, r2
3418c098:	f000 8095 	beq.w	3418c1c6 <RCCEx_GetXSPICLKFreq+0x156>
3418c09c:	4a71      	ldr	r2, [pc, #452]	@ (3418c264 <RCCEx_GetXSPICLKFreq+0x1f4>)
3418c09e:	4293      	cmp	r3, r2
3418c0a0:	f200 80d4 	bhi.w	3418c24c <RCCEx_GetXSPICLKFreq+0x1dc>
3418c0a4:	4a70      	ldr	r2, [pc, #448]	@ (3418c268 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418c0a6:	4293      	cmp	r3, r2
3418c0a8:	f000 808d 	beq.w	3418c1c6 <RCCEx_GetXSPICLKFreq+0x156>
3418c0ac:	4a6e      	ldr	r2, [pc, #440]	@ (3418c268 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418c0ae:	4293      	cmp	r3, r2
3418c0b0:	f200 80cc 	bhi.w	3418c24c <RCCEx_GetXSPICLKFreq+0x1dc>
3418c0b4:	4a6d      	ldr	r2, [pc, #436]	@ (3418c26c <RCCEx_GetXSPICLKFreq+0x1fc>)
3418c0b6:	4293      	cmp	r3, r2
3418c0b8:	d041      	beq.n	3418c13e <RCCEx_GetXSPICLKFreq+0xce>
3418c0ba:	4a6c      	ldr	r2, [pc, #432]	@ (3418c26c <RCCEx_GetXSPICLKFreq+0x1fc>)
3418c0bc:	4293      	cmp	r3, r2
3418c0be:	f200 80c5 	bhi.w	3418c24c <RCCEx_GetXSPICLKFreq+0x1dc>
3418c0c2:	4a6b      	ldr	r2, [pc, #428]	@ (3418c270 <RCCEx_GetXSPICLKFreq+0x200>)
3418c0c4:	4293      	cmp	r3, r2
3418c0c6:	d03a      	beq.n	3418c13e <RCCEx_GetXSPICLKFreq+0xce>
3418c0c8:	4a69      	ldr	r2, [pc, #420]	@ (3418c270 <RCCEx_GetXSPICLKFreq+0x200>)
3418c0ca:	4293      	cmp	r3, r2
3418c0cc:	f200 80be 	bhi.w	3418c24c <RCCEx_GetXSPICLKFreq+0x1dc>
3418c0d0:	4a68      	ldr	r2, [pc, #416]	@ (3418c274 <RCCEx_GetXSPICLKFreq+0x204>)
3418c0d2:	4293      	cmp	r3, r2
3418c0d4:	d033      	beq.n	3418c13e <RCCEx_GetXSPICLKFreq+0xce>
3418c0d6:	4a67      	ldr	r2, [pc, #412]	@ (3418c274 <RCCEx_GetXSPICLKFreq+0x204>)
3418c0d8:	4293      	cmp	r3, r2
3418c0da:	f200 80b7 	bhi.w	3418c24c <RCCEx_GetXSPICLKFreq+0x1dc>
3418c0de:	4a66      	ldr	r2, [pc, #408]	@ (3418c278 <RCCEx_GetXSPICLKFreq+0x208>)
3418c0e0:	4293      	cmp	r3, r2
3418c0e2:	d027      	beq.n	3418c134 <RCCEx_GetXSPICLKFreq+0xc4>
3418c0e4:	4a64      	ldr	r2, [pc, #400]	@ (3418c278 <RCCEx_GetXSPICLKFreq+0x208>)
3418c0e6:	4293      	cmp	r3, r2
3418c0e8:	f200 80b0 	bhi.w	3418c24c <RCCEx_GetXSPICLKFreq+0x1dc>
3418c0ec:	4a63      	ldr	r2, [pc, #396]	@ (3418c27c <RCCEx_GetXSPICLKFreq+0x20c>)
3418c0ee:	4293      	cmp	r3, r2
3418c0f0:	d020      	beq.n	3418c134 <RCCEx_GetXSPICLKFreq+0xc4>
3418c0f2:	4a62      	ldr	r2, [pc, #392]	@ (3418c27c <RCCEx_GetXSPICLKFreq+0x20c>)
3418c0f4:	4293      	cmp	r3, r2
3418c0f6:	f200 80a9 	bhi.w	3418c24c <RCCEx_GetXSPICLKFreq+0x1dc>
3418c0fa:	4a61      	ldr	r2, [pc, #388]	@ (3418c280 <RCCEx_GetXSPICLKFreq+0x210>)
3418c0fc:	4293      	cmp	r3, r2
3418c0fe:	d019      	beq.n	3418c134 <RCCEx_GetXSPICLKFreq+0xc4>
3418c100:	4a5f      	ldr	r2, [pc, #380]	@ (3418c280 <RCCEx_GetXSPICLKFreq+0x210>)
3418c102:	4293      	cmp	r3, r2
3418c104:	f200 80a2 	bhi.w	3418c24c <RCCEx_GetXSPICLKFreq+0x1dc>
3418c108:	4a5e      	ldr	r2, [pc, #376]	@ (3418c284 <RCCEx_GetXSPICLKFreq+0x214>)
3418c10a:	4293      	cmp	r3, r2
3418c10c:	d00a      	beq.n	3418c124 <RCCEx_GetXSPICLKFreq+0xb4>
3418c10e:	4a5d      	ldr	r2, [pc, #372]	@ (3418c284 <RCCEx_GetXSPICLKFreq+0x214>)
3418c110:	4293      	cmp	r3, r2
3418c112:	f200 809b 	bhi.w	3418c24c <RCCEx_GetXSPICLKFreq+0x1dc>
3418c116:	4a5c      	ldr	r2, [pc, #368]	@ (3418c288 <RCCEx_GetXSPICLKFreq+0x218>)
3418c118:	4293      	cmp	r3, r2
3418c11a:	d003      	beq.n	3418c124 <RCCEx_GetXSPICLKFreq+0xb4>
3418c11c:	4a5b      	ldr	r2, [pc, #364]	@ (3418c28c <RCCEx_GetXSPICLKFreq+0x21c>)
3418c11e:	4293      	cmp	r3, r2
3418c120:	f040 8094 	bne.w	3418c24c <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418c124:	f7f7 fcfc 	bl	34183b20 <HAL_RCC_GetSysClockFreq>
3418c128:	4603      	mov	r3, r0
3418c12a:	4618      	mov	r0, r3
3418c12c:	f7fc fc9c 	bl	34188a68 <RCCEx_GetHCLKFreq>
3418c130:	60f8      	str	r0, [r7, #12]
      break;
3418c132:	e090      	b.n	3418c256 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c134:	2007      	movs	r0, #7
3418c136:	f7fc ff83 	bl	34189040 <RCCEx_GetCLKPCLKFreq>
3418c13a:	60f8      	str	r0, [r7, #12]
      break;
3418c13c:	e08b      	b.n	3418c256 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
3418c13e:	f7f8 ffe7 	bl	34185110 <LL_RCC_IC3_IsEnabled>
3418c142:	4603      	mov	r3, r0
3418c144:	2b00      	cmp	r3, #0
3418c146:	f000 8083 	beq.w	3418c250 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
3418c14a:	f7f9 f803 	bl	34185154 <LL_RCC_IC3_GetDivider>
3418c14e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
3418c150:	f7f8 fff2 	bl	34185138 <LL_RCC_IC3_GetSource>
3418c154:	4603      	mov	r3, r0
3418c156:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c15a:	d029      	beq.n	3418c1b0 <RCCEx_GetXSPICLKFreq+0x140>
3418c15c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c160:	d82f      	bhi.n	3418c1c2 <RCCEx_GetXSPICLKFreq+0x152>
3418c162:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c166:	d01a      	beq.n	3418c19e <RCCEx_GetXSPICLKFreq+0x12e>
3418c168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c16c:	d829      	bhi.n	3418c1c2 <RCCEx_GetXSPICLKFreq+0x152>
3418c16e:	2b00      	cmp	r3, #0
3418c170:	d003      	beq.n	3418c17a <RCCEx_GetXSPICLKFreq+0x10a>
3418c172:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c176:	d009      	beq.n	3418c18c <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418c178:	e023      	b.n	3418c1c2 <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c17a:	f7fc fb5d 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418c17e:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c180:	68fa      	ldr	r2, [r7, #12]
3418c182:	68bb      	ldr	r3, [r7, #8]
3418c184:	fbb2 f3f3 	udiv	r3, r2, r3
3418c188:	60fb      	str	r3, [r7, #12]
            break;
3418c18a:	e01b      	b.n	3418c1c4 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c18c:	f7fc fb9a 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418c190:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c192:	68fa      	ldr	r2, [r7, #12]
3418c194:	68bb      	ldr	r3, [r7, #8]
3418c196:	fbb2 f3f3 	udiv	r3, r2, r3
3418c19a:	60fb      	str	r3, [r7, #12]
            break;
3418c19c:	e012      	b.n	3418c1c4 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c19e:	f7fc fbd7 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418c1a2:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c1a4:	68fa      	ldr	r2, [r7, #12]
3418c1a6:	68bb      	ldr	r3, [r7, #8]
3418c1a8:	fbb2 f3f3 	udiv	r3, r2, r3
3418c1ac:	60fb      	str	r3, [r7, #12]
            break;
3418c1ae:	e009      	b.n	3418c1c4 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c1b0:	f7fc fc14 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418c1b4:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c1b6:	68fa      	ldr	r2, [r7, #12]
3418c1b8:	68bb      	ldr	r3, [r7, #8]
3418c1ba:	fbb2 f3f3 	udiv	r3, r2, r3
3418c1be:	60fb      	str	r3, [r7, #12]
            break;
3418c1c0:	e000      	b.n	3418c1c4 <RCCEx_GetXSPICLKFreq+0x154>
            break;
3418c1c2:	bf00      	nop
        }
      }
      break;
3418c1c4:	e044      	b.n	3418c250 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418c1c6:	f7f8 ffe3 	bl	34185190 <LL_RCC_IC4_IsEnabled>
3418c1ca:	4603      	mov	r3, r0
3418c1cc:	2b00      	cmp	r3, #0
3418c1ce:	d041      	beq.n	3418c254 <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418c1d0:	f7f9 f800 	bl	341851d4 <LL_RCC_IC4_GetDivider>
3418c1d4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418c1d6:	f7f8 ffef 	bl	341851b8 <LL_RCC_IC4_GetSource>
3418c1da:	4603      	mov	r3, r0
3418c1dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c1e0:	d029      	beq.n	3418c236 <RCCEx_GetXSPICLKFreq+0x1c6>
3418c1e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c1e6:	d82f      	bhi.n	3418c248 <RCCEx_GetXSPICLKFreq+0x1d8>
3418c1e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c1ec:	d01a      	beq.n	3418c224 <RCCEx_GetXSPICLKFreq+0x1b4>
3418c1ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c1f2:	d829      	bhi.n	3418c248 <RCCEx_GetXSPICLKFreq+0x1d8>
3418c1f4:	2b00      	cmp	r3, #0
3418c1f6:	d003      	beq.n	3418c200 <RCCEx_GetXSPICLKFreq+0x190>
3418c1f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c1fc:	d009      	beq.n	3418c212 <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418c1fe:	e023      	b.n	3418c248 <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c200:	f7fc fb1a 	bl	34188838 <HAL_RCCEx_GetPLL1CLKFreq>
3418c204:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c206:	68fa      	ldr	r2, [r7, #12]
3418c208:	68bb      	ldr	r3, [r7, #8]
3418c20a:	fbb2 f3f3 	udiv	r3, r2, r3
3418c20e:	60fb      	str	r3, [r7, #12]
            break;
3418c210:	e01b      	b.n	3418c24a <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c212:	f7fc fb57 	bl	341888c4 <HAL_RCCEx_GetPLL2CLKFreq>
3418c216:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c218:	68fa      	ldr	r2, [r7, #12]
3418c21a:	68bb      	ldr	r3, [r7, #8]
3418c21c:	fbb2 f3f3 	udiv	r3, r2, r3
3418c220:	60fb      	str	r3, [r7, #12]
            break;
3418c222:	e012      	b.n	3418c24a <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c224:	f7fc fb94 	bl	34188950 <HAL_RCCEx_GetPLL3CLKFreq>
3418c228:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c22a:	68fa      	ldr	r2, [r7, #12]
3418c22c:	68bb      	ldr	r3, [r7, #8]
3418c22e:	fbb2 f3f3 	udiv	r3, r2, r3
3418c232:	60fb      	str	r3, [r7, #12]
            break;
3418c234:	e009      	b.n	3418c24a <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c236:	f7fc fbd1 	bl	341889dc <HAL_RCCEx_GetPLL4CLKFreq>
3418c23a:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c23c:	68fa      	ldr	r2, [r7, #12]
3418c23e:	68bb      	ldr	r3, [r7, #8]
3418c240:	fbb2 f3f3 	udiv	r3, r2, r3
3418c244:	60fb      	str	r3, [r7, #12]
            break;
3418c246:	e000      	b.n	3418c24a <RCCEx_GetXSPICLKFreq+0x1da>
            break;
3418c248:	bf00      	nop
        }
      }
      break;
3418c24a:	e003      	b.n	3418c254 <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
3418c24c:	bf00      	nop
3418c24e:	e002      	b.n	3418c256 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418c250:	bf00      	nop
3418c252:	e000      	b.n	3418c256 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418c254:	bf00      	nop
  }

  return xspi_frequency;
3418c256:	68fb      	ldr	r3, [r7, #12]
}
3418c258:	4618      	mov	r0, r3
3418c25a:	3710      	adds	r7, #16
3418c25c:	46bd      	mov	sp, r7
3418c25e:	bd80      	pop	{r7, pc}
3418c260:	03030814 	.word	0x03030814
3418c264:	03030414 	.word	0x03030414
3418c268:	03030014 	.word	0x03030014
3418c26c:	03020814 	.word	0x03020814
3418c270:	03020414 	.word	0x03020414
3418c274:	03020014 	.word	0x03020014
3418c278:	03010814 	.word	0x03010814
3418c27c:	03010414 	.word	0x03010414
3418c280:	03010014 	.word	0x03010014
3418c284:	03000814 	.word	0x03000814
3418c288:	03000014 	.word	0x03000014
3418c28c:	03000414 	.word	0x03000414

3418c290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
3418c290:	b580      	push	{r7, lr}
3418c292:	b082      	sub	sp, #8
3418c294:	af00      	add	r7, sp, #0
3418c296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
3418c298:	687b      	ldr	r3, [r7, #4]
3418c29a:	2b00      	cmp	r3, #0
3418c29c:	d101      	bne.n	3418c2a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
3418c29e:	2301      	movs	r3, #1
3418c2a0:	e042      	b.n	3418c328 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
3418c2a2:	687b      	ldr	r3, [r7, #4]
3418c2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418c2a8:	2b00      	cmp	r3, #0
3418c2aa:	d106      	bne.n	3418c2ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
3418c2ac:	687b      	ldr	r3, [r7, #4]
3418c2ae:	2200      	movs	r2, #0
3418c2b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
3418c2b4:	6878      	ldr	r0, [r7, #4]
3418c2b6:	f7f5 fa3b 	bl	34181730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
3418c2ba:	687b      	ldr	r3, [r7, #4]
3418c2bc:	2224      	movs	r2, #36	@ 0x24
3418c2be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
3418c2c2:	687b      	ldr	r3, [r7, #4]
3418c2c4:	681b      	ldr	r3, [r3, #0]
3418c2c6:	681a      	ldr	r2, [r3, #0]
3418c2c8:	687b      	ldr	r3, [r7, #4]
3418c2ca:	681b      	ldr	r3, [r3, #0]
3418c2cc:	f022 0201 	bic.w	r2, r2, #1
3418c2d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3418c2d2:	687b      	ldr	r3, [r7, #4]
3418c2d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c2d6:	2b00      	cmp	r3, #0
3418c2d8:	d002      	beq.n	3418c2e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
3418c2da:	6878      	ldr	r0, [r7, #4]
3418c2dc:	f000 faa2 	bl	3418c824 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
3418c2e0:	6878      	ldr	r0, [r7, #4]
3418c2e2:	f000 f8b3 	bl	3418c44c <UART_SetConfig>
3418c2e6:	4603      	mov	r3, r0
3418c2e8:	2b01      	cmp	r3, #1
3418c2ea:	d101      	bne.n	3418c2f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
3418c2ec:	2301      	movs	r3, #1
3418c2ee:	e01b      	b.n	3418c328 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3418c2f0:	687b      	ldr	r3, [r7, #4]
3418c2f2:	681b      	ldr	r3, [r3, #0]
3418c2f4:	685a      	ldr	r2, [r3, #4]
3418c2f6:	687b      	ldr	r3, [r7, #4]
3418c2f8:	681b      	ldr	r3, [r3, #0]
3418c2fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3418c2fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3418c300:	687b      	ldr	r3, [r7, #4]
3418c302:	681b      	ldr	r3, [r3, #0]
3418c304:	689a      	ldr	r2, [r3, #8]
3418c306:	687b      	ldr	r3, [r7, #4]
3418c308:	681b      	ldr	r3, [r3, #0]
3418c30a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3418c30e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
3418c310:	687b      	ldr	r3, [r7, #4]
3418c312:	681b      	ldr	r3, [r3, #0]
3418c314:	681a      	ldr	r2, [r3, #0]
3418c316:	687b      	ldr	r3, [r7, #4]
3418c318:	681b      	ldr	r3, [r3, #0]
3418c31a:	f042 0201 	orr.w	r2, r2, #1
3418c31e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
3418c320:	6878      	ldr	r0, [r7, #4]
3418c322:	f000 fb21 	bl	3418c968 <UART_CheckIdleState>
3418c326:	4603      	mov	r3, r0
}
3418c328:	4618      	mov	r0, r3
3418c32a:	3708      	adds	r7, #8
3418c32c:	46bd      	mov	sp, r7
3418c32e:	bd80      	pop	{r7, pc}

3418c330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
3418c330:	b580      	push	{r7, lr}
3418c332:	b08a      	sub	sp, #40	@ 0x28
3418c334:	af02      	add	r7, sp, #8
3418c336:	60f8      	str	r0, [r7, #12]
3418c338:	60b9      	str	r1, [r7, #8]
3418c33a:	603b      	str	r3, [r7, #0]
3418c33c:	4613      	mov	r3, r2
3418c33e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
3418c340:	68fb      	ldr	r3, [r7, #12]
3418c342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418c346:	2b20      	cmp	r3, #32
3418c348:	d17b      	bne.n	3418c442 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
3418c34a:	68bb      	ldr	r3, [r7, #8]
3418c34c:	2b00      	cmp	r3, #0
3418c34e:	d002      	beq.n	3418c356 <HAL_UART_Transmit+0x26>
3418c350:	88fb      	ldrh	r3, [r7, #6]
3418c352:	2b00      	cmp	r3, #0
3418c354:	d101      	bne.n	3418c35a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
3418c356:	2301      	movs	r3, #1
3418c358:	e074      	b.n	3418c444 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
3418c35a:	68fb      	ldr	r3, [r7, #12]
3418c35c:	2200      	movs	r2, #0
3418c35e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3418c362:	68fb      	ldr	r3, [r7, #12]
3418c364:	2221      	movs	r2, #33	@ 0x21
3418c366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
3418c36a:	f7f5 fd43 	bl	34181df4 <HAL_GetTick>
3418c36e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
3418c370:	68fb      	ldr	r3, [r7, #12]
3418c372:	88fa      	ldrh	r2, [r7, #6]
3418c374:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
3418c378:	68fb      	ldr	r3, [r7, #12]
3418c37a:	88fa      	ldrh	r2, [r7, #6]
3418c37c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3418c380:	68fb      	ldr	r3, [r7, #12]
3418c382:	689b      	ldr	r3, [r3, #8]
3418c384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418c388:	d108      	bne.n	3418c39c <HAL_UART_Transmit+0x6c>
3418c38a:	68fb      	ldr	r3, [r7, #12]
3418c38c:	691b      	ldr	r3, [r3, #16]
3418c38e:	2b00      	cmp	r3, #0
3418c390:	d104      	bne.n	3418c39c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
3418c392:	2300      	movs	r3, #0
3418c394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
3418c396:	68bb      	ldr	r3, [r7, #8]
3418c398:	61bb      	str	r3, [r7, #24]
3418c39a:	e003      	b.n	3418c3a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
3418c39c:	68bb      	ldr	r3, [r7, #8]
3418c39e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
3418c3a0:	2300      	movs	r3, #0
3418c3a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
3418c3a4:	e030      	b.n	3418c408 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3418c3a6:	683b      	ldr	r3, [r7, #0]
3418c3a8:	9300      	str	r3, [sp, #0]
3418c3aa:	697b      	ldr	r3, [r7, #20]
3418c3ac:	2200      	movs	r2, #0
3418c3ae:	2180      	movs	r1, #128	@ 0x80
3418c3b0:	68f8      	ldr	r0, [r7, #12]
3418c3b2:	f000 fb83 	bl	3418cabc <UART_WaitOnFlagUntilTimeout>
3418c3b6:	4603      	mov	r3, r0
3418c3b8:	2b00      	cmp	r3, #0
3418c3ba:	d005      	beq.n	3418c3c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
3418c3bc:	68fb      	ldr	r3, [r7, #12]
3418c3be:	2220      	movs	r2, #32
3418c3c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
3418c3c4:	2303      	movs	r3, #3
3418c3c6:	e03d      	b.n	3418c444 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
3418c3c8:	69fb      	ldr	r3, [r7, #28]
3418c3ca:	2b00      	cmp	r3, #0
3418c3cc:	d10b      	bne.n	3418c3e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3418c3ce:	69bb      	ldr	r3, [r7, #24]
3418c3d0:	881b      	ldrh	r3, [r3, #0]
3418c3d2:	461a      	mov	r2, r3
3418c3d4:	68fb      	ldr	r3, [r7, #12]
3418c3d6:	681b      	ldr	r3, [r3, #0]
3418c3d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
3418c3dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
3418c3de:	69bb      	ldr	r3, [r7, #24]
3418c3e0:	3302      	adds	r3, #2
3418c3e2:	61bb      	str	r3, [r7, #24]
3418c3e4:	e007      	b.n	3418c3f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3418c3e6:	69fb      	ldr	r3, [r7, #28]
3418c3e8:	781a      	ldrb	r2, [r3, #0]
3418c3ea:	68fb      	ldr	r3, [r7, #12]
3418c3ec:	681b      	ldr	r3, [r3, #0]
3418c3ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
3418c3f0:	69fb      	ldr	r3, [r7, #28]
3418c3f2:	3301      	adds	r3, #1
3418c3f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
3418c3f6:	68fb      	ldr	r3, [r7, #12]
3418c3f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3418c3fc:	b29b      	uxth	r3, r3
3418c3fe:	3b01      	subs	r3, #1
3418c400:	b29a      	uxth	r2, r3
3418c402:	68fb      	ldr	r3, [r7, #12]
3418c404:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
3418c408:	68fb      	ldr	r3, [r7, #12]
3418c40a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3418c40e:	b29b      	uxth	r3, r3
3418c410:	2b00      	cmp	r3, #0
3418c412:	d1c8      	bne.n	3418c3a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3418c414:	683b      	ldr	r3, [r7, #0]
3418c416:	9300      	str	r3, [sp, #0]
3418c418:	697b      	ldr	r3, [r7, #20]
3418c41a:	2200      	movs	r2, #0
3418c41c:	2140      	movs	r1, #64	@ 0x40
3418c41e:	68f8      	ldr	r0, [r7, #12]
3418c420:	f000 fb4c 	bl	3418cabc <UART_WaitOnFlagUntilTimeout>
3418c424:	4603      	mov	r3, r0
3418c426:	2b00      	cmp	r3, #0
3418c428:	d005      	beq.n	3418c436 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
3418c42a:	68fb      	ldr	r3, [r7, #12]
3418c42c:	2220      	movs	r2, #32
3418c42e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
3418c432:	2303      	movs	r3, #3
3418c434:	e006      	b.n	3418c444 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
3418c436:	68fb      	ldr	r3, [r7, #12]
3418c438:	2220      	movs	r2, #32
3418c43a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
3418c43e:	2300      	movs	r3, #0
3418c440:	e000      	b.n	3418c444 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
3418c442:	2302      	movs	r3, #2
  }
}
3418c444:	4618      	mov	r0, r3
3418c446:	3720      	adds	r7, #32
3418c448:	46bd      	mov	sp, r7
3418c44a:	bd80      	pop	{r7, pc}

3418c44c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
3418c44c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3418c450:	b090      	sub	sp, #64	@ 0x40
3418c452:	af00      	add	r7, sp, #0
3418c454:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
3418c456:	2300      	movs	r3, #0
3418c458:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
3418c45c:	697b      	ldr	r3, [r7, #20]
3418c45e:	681b      	ldr	r3, [r3, #0]
3418c460:	4aa3      	ldr	r2, [pc, #652]	@ (3418c6f0 <UART_SetConfig+0x2a4>)
3418c462:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3418c464:	697b      	ldr	r3, [r7, #20]
3418c466:	689a      	ldr	r2, [r3, #8]
3418c468:	697b      	ldr	r3, [r7, #20]
3418c46a:	691b      	ldr	r3, [r3, #16]
3418c46c:	431a      	orrs	r2, r3
3418c46e:	697b      	ldr	r3, [r7, #20]
3418c470:	695b      	ldr	r3, [r3, #20]
3418c472:	431a      	orrs	r2, r3
3418c474:	697b      	ldr	r3, [r7, #20]
3418c476:	69db      	ldr	r3, [r3, #28]
3418c478:	4313      	orrs	r3, r2
3418c47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3418c47c:	697b      	ldr	r3, [r7, #20]
3418c47e:	681b      	ldr	r3, [r3, #0]
3418c480:	681a      	ldr	r2, [r3, #0]
3418c482:	4b9c      	ldr	r3, [pc, #624]	@ (3418c6f4 <UART_SetConfig+0x2a8>)
3418c484:	4013      	ands	r3, r2
3418c486:	697a      	ldr	r2, [r7, #20]
3418c488:	6812      	ldr	r2, [r2, #0]
3418c48a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418c48c:	430b      	orrs	r3, r1
3418c48e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3418c490:	697b      	ldr	r3, [r7, #20]
3418c492:	681b      	ldr	r3, [r3, #0]
3418c494:	685b      	ldr	r3, [r3, #4]
3418c496:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
3418c49a:	697b      	ldr	r3, [r7, #20]
3418c49c:	68da      	ldr	r2, [r3, #12]
3418c49e:	697b      	ldr	r3, [r7, #20]
3418c4a0:	681b      	ldr	r3, [r3, #0]
3418c4a2:	430a      	orrs	r2, r1
3418c4a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3418c4a6:	697b      	ldr	r3, [r7, #20]
3418c4a8:	699b      	ldr	r3, [r3, #24]
3418c4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
3418c4ac:	697b      	ldr	r3, [r7, #20]
3418c4ae:	681b      	ldr	r3, [r3, #0]
3418c4b0:	4a8f      	ldr	r2, [pc, #572]	@ (3418c6f0 <UART_SetConfig+0x2a4>)
3418c4b2:	4293      	cmp	r3, r2
3418c4b4:	d009      	beq.n	3418c4ca <UART_SetConfig+0x7e>
3418c4b6:	697b      	ldr	r3, [r7, #20]
3418c4b8:	681b      	ldr	r3, [r3, #0]
3418c4ba:	4a8f      	ldr	r2, [pc, #572]	@ (3418c6f8 <UART_SetConfig+0x2ac>)
3418c4bc:	4293      	cmp	r3, r2
3418c4be:	d004      	beq.n	3418c4ca <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
3418c4c0:	697b      	ldr	r3, [r7, #20]
3418c4c2:	6a1b      	ldr	r3, [r3, #32]
3418c4c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
3418c4c6:	4313      	orrs	r3, r2
3418c4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3418c4ca:	697b      	ldr	r3, [r7, #20]
3418c4cc:	681b      	ldr	r3, [r3, #0]
3418c4ce:	689b      	ldr	r3, [r3, #8]
3418c4d0:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
3418c4d4:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
3418c4d8:	697a      	ldr	r2, [r7, #20]
3418c4da:	6812      	ldr	r2, [r2, #0]
3418c4dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418c4de:	430b      	orrs	r3, r1
3418c4e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3418c4e2:	697b      	ldr	r3, [r7, #20]
3418c4e4:	681b      	ldr	r3, [r3, #0]
3418c4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418c4e8:	f023 010f 	bic.w	r1, r3, #15
3418c4ec:	697b      	ldr	r3, [r7, #20]
3418c4ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3418c4f0:	697b      	ldr	r3, [r7, #20]
3418c4f2:	681b      	ldr	r3, [r3, #0]
3418c4f4:	430a      	orrs	r2, r1
3418c4f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
3418c4f8:	697b      	ldr	r3, [r7, #20]
3418c4fa:	681b      	ldr	r3, [r3, #0]
3418c4fc:	4a7f      	ldr	r2, [pc, #508]	@ (3418c6fc <UART_SetConfig+0x2b0>)
3418c4fe:	4293      	cmp	r3, r2
3418c500:	d106      	bne.n	3418c510 <UART_SetConfig+0xc4>
3418c502:	f04f 0200 	mov.w	r2, #0
3418c506:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418c50a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418c50e:	e07d      	b.n	3418c60c <UART_SetConfig+0x1c0>
3418c510:	697b      	ldr	r3, [r7, #20]
3418c512:	681b      	ldr	r3, [r3, #0]
3418c514:	4a7a      	ldr	r2, [pc, #488]	@ (3418c700 <UART_SetConfig+0x2b4>)
3418c516:	4293      	cmp	r3, r2
3418c518:	d106      	bne.n	3418c528 <UART_SetConfig+0xdc>
3418c51a:	f04f 0200 	mov.w	r2, #0
3418c51e:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418c522:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418c526:	e071      	b.n	3418c60c <UART_SetConfig+0x1c0>
3418c528:	697b      	ldr	r3, [r7, #20]
3418c52a:	681b      	ldr	r3, [r3, #0]
3418c52c:	4a75      	ldr	r2, [pc, #468]	@ (3418c704 <UART_SetConfig+0x2b8>)
3418c52e:	4293      	cmp	r3, r2
3418c530:	d106      	bne.n	3418c540 <UART_SetConfig+0xf4>
3418c532:	f04f 0200 	mov.w	r2, #0
3418c536:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418c53a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418c53e:	e065      	b.n	3418c60c <UART_SetConfig+0x1c0>
3418c540:	697b      	ldr	r3, [r7, #20]
3418c542:	681b      	ldr	r3, [r3, #0]
3418c544:	4a70      	ldr	r2, [pc, #448]	@ (3418c708 <UART_SetConfig+0x2bc>)
3418c546:	4293      	cmp	r3, r2
3418c548:	d106      	bne.n	3418c558 <UART_SetConfig+0x10c>
3418c54a:	f04f 0200 	mov.w	r2, #0
3418c54e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418c552:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418c556:	e059      	b.n	3418c60c <UART_SetConfig+0x1c0>
3418c558:	697b      	ldr	r3, [r7, #20]
3418c55a:	681b      	ldr	r3, [r3, #0]
3418c55c:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3418c560:	d106      	bne.n	3418c570 <UART_SetConfig+0x124>
3418c562:	f04f 0200 	mov.w	r2, #0
3418c566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3418c56a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418c56e:	e04d      	b.n	3418c60c <UART_SetConfig+0x1c0>
3418c570:	697b      	ldr	r3, [r7, #20]
3418c572:	681b      	ldr	r3, [r3, #0]
3418c574:	4a65      	ldr	r2, [pc, #404]	@ (3418c70c <UART_SetConfig+0x2c0>)
3418c576:	4293      	cmp	r3, r2
3418c578:	d106      	bne.n	3418c588 <UART_SetConfig+0x13c>
3418c57a:	f04f 0200 	mov.w	r2, #0
3418c57e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418c582:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418c586:	e041      	b.n	3418c60c <UART_SetConfig+0x1c0>
3418c588:	697b      	ldr	r3, [r7, #20]
3418c58a:	681b      	ldr	r3, [r3, #0]
3418c58c:	4a60      	ldr	r2, [pc, #384]	@ (3418c710 <UART_SetConfig+0x2c4>)
3418c58e:	4293      	cmp	r3, r2
3418c590:	d106      	bne.n	3418c5a0 <UART_SetConfig+0x154>
3418c592:	f04f 0200 	mov.w	r2, #0
3418c596:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3418c59a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418c59e:	e035      	b.n	3418c60c <UART_SetConfig+0x1c0>
3418c5a0:	697b      	ldr	r3, [r7, #20]
3418c5a2:	681b      	ldr	r3, [r3, #0]
3418c5a4:	4a5b      	ldr	r2, [pc, #364]	@ (3418c714 <UART_SetConfig+0x2c8>)
3418c5a6:	4293      	cmp	r3, r2
3418c5a8:	d106      	bne.n	3418c5b8 <UART_SetConfig+0x16c>
3418c5aa:	f04f 0200 	mov.w	r2, #0
3418c5ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418c5b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418c5b6:	e029      	b.n	3418c60c <UART_SetConfig+0x1c0>
3418c5b8:	697b      	ldr	r3, [r7, #20]
3418c5ba:	681b      	ldr	r3, [r3, #0]
3418c5bc:	4a56      	ldr	r2, [pc, #344]	@ (3418c718 <UART_SetConfig+0x2cc>)
3418c5be:	4293      	cmp	r3, r2
3418c5c0:	d106      	bne.n	3418c5d0 <UART_SetConfig+0x184>
3418c5c2:	f04f 0200 	mov.w	r2, #0
3418c5c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3418c5ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418c5ce:	e01d      	b.n	3418c60c <UART_SetConfig+0x1c0>
3418c5d0:	697b      	ldr	r3, [r7, #20]
3418c5d2:	681b      	ldr	r3, [r3, #0]
3418c5d4:	4a51      	ldr	r2, [pc, #324]	@ (3418c71c <UART_SetConfig+0x2d0>)
3418c5d6:	4293      	cmp	r3, r2
3418c5d8:	d106      	bne.n	3418c5e8 <UART_SetConfig+0x19c>
3418c5da:	f04f 0200 	mov.w	r2, #0
3418c5de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
3418c5e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418c5e6:	e011      	b.n	3418c60c <UART_SetConfig+0x1c0>
3418c5e8:	697b      	ldr	r3, [r7, #20]
3418c5ea:	681b      	ldr	r3, [r3, #0]
3418c5ec:	4a40      	ldr	r2, [pc, #256]	@ (3418c6f0 <UART_SetConfig+0x2a4>)
3418c5ee:	4293      	cmp	r3, r2
3418c5f0:	d106      	bne.n	3418c600 <UART_SetConfig+0x1b4>
3418c5f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3418c5f6:	f04f 0300 	mov.w	r3, #0
3418c5fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418c5fe:	e005      	b.n	3418c60c <UART_SetConfig+0x1c0>
3418c600:	f04f 0200 	mov.w	r2, #0
3418c604:	f04f 0300 	mov.w	r3, #0
3418c608:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
3418c60c:	697b      	ldr	r3, [r7, #20]
3418c60e:	681b      	ldr	r3, [r3, #0]
3418c610:	4a37      	ldr	r2, [pc, #220]	@ (3418c6f0 <UART_SetConfig+0x2a4>)
3418c612:	4293      	cmp	r3, r2
3418c614:	d005      	beq.n	3418c622 <UART_SetConfig+0x1d6>
3418c616:	697b      	ldr	r3, [r7, #20]
3418c618:	681b      	ldr	r3, [r3, #0]
3418c61a:	4a37      	ldr	r2, [pc, #220]	@ (3418c6f8 <UART_SetConfig+0x2ac>)
3418c61c:	4293      	cmp	r3, r2
3418c61e:	f040 8081 	bne.w	3418c724 <UART_SetConfig+0x2d8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3418c622:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418c626:	f7fb fc6b 	bl	34187f00 <HAL_RCCEx_GetPeriphCLKFreq>
3418c62a:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
3418c62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418c62e:	2b00      	cmp	r3, #0
3418c630:	f000 80e0 	beq.w	3418c7f4 <UART_SetConfig+0x3a8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3418c634:	697b      	ldr	r3, [r7, #20]
3418c636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c638:	4a39      	ldr	r2, [pc, #228]	@ (3418c720 <UART_SetConfig+0x2d4>)
3418c63a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418c63e:	461a      	mov	r2, r3
3418c640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418c642:	fbb3 f3f2 	udiv	r3, r3, r2
3418c646:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3418c648:	697b      	ldr	r3, [r7, #20]
3418c64a:	685a      	ldr	r2, [r3, #4]
3418c64c:	4613      	mov	r3, r2
3418c64e:	005b      	lsls	r3, r3, #1
3418c650:	4413      	add	r3, r2
3418c652:	69fa      	ldr	r2, [r7, #28]
3418c654:	429a      	cmp	r2, r3
3418c656:	d305      	bcc.n	3418c664 <UART_SetConfig+0x218>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
3418c658:	697b      	ldr	r3, [r7, #20]
3418c65a:	685b      	ldr	r3, [r3, #4]
3418c65c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3418c65e:	69fa      	ldr	r2, [r7, #28]
3418c660:	429a      	cmp	r2, r3
3418c662:	d903      	bls.n	3418c66c <UART_SetConfig+0x220>
      {
        ret = HAL_ERROR;
3418c664:	2301      	movs	r3, #1
3418c666:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3418c66a:	e040      	b.n	3418c6ee <UART_SetConfig+0x2a2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3418c66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418c66e:	2200      	movs	r2, #0
3418c670:	60bb      	str	r3, [r7, #8]
3418c672:	60fa      	str	r2, [r7, #12]
3418c674:	697b      	ldr	r3, [r7, #20]
3418c676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c678:	4a29      	ldr	r2, [pc, #164]	@ (3418c720 <UART_SetConfig+0x2d4>)
3418c67a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418c67e:	b29b      	uxth	r3, r3
3418c680:	2200      	movs	r2, #0
3418c682:	603b      	str	r3, [r7, #0]
3418c684:	607a      	str	r2, [r7, #4]
3418c686:	e9d7 2300 	ldrd	r2, r3, [r7]
3418c68a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3418c68e:	f7f4 f87d 	bl	3418078c <__aeabi_uldivmod>
3418c692:	4602      	mov	r2, r0
3418c694:	460b      	mov	r3, r1
3418c696:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
3418c69a:	6979      	ldr	r1, [r7, #20]
3418c69c:	6849      	ldr	r1, [r1, #4]
3418c69e:	0849      	lsrs	r1, r1, #1
3418c6a0:	2000      	movs	r0, #0
3418c6a2:	460c      	mov	r4, r1
3418c6a4:	4605      	mov	r5, r0
3418c6a6:	eb12 0804 	adds.w	r8, r2, r4
3418c6aa:	eb43 0905 	adc.w	r9, r3, r5
3418c6ae:	697b      	ldr	r3, [r7, #20]
3418c6b0:	685b      	ldr	r3, [r3, #4]
3418c6b2:	2200      	movs	r2, #0
3418c6b4:	469a      	mov	sl, r3
3418c6b6:	4693      	mov	fp, r2
3418c6b8:	4652      	mov	r2, sl
3418c6ba:	465b      	mov	r3, fp
3418c6bc:	4640      	mov	r0, r8
3418c6be:	4649      	mov	r1, r9
3418c6c0:	f7f4 f864 	bl	3418078c <__aeabi_uldivmod>
3418c6c4:	4602      	mov	r2, r0
3418c6c6:	460b      	mov	r3, r1
3418c6c8:	4613      	mov	r3, r2
3418c6ca:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3418c6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c6ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418c6d2:	d308      	bcc.n	3418c6e6 <UART_SetConfig+0x29a>
3418c6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c6d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418c6da:	d204      	bcs.n	3418c6e6 <UART_SetConfig+0x29a>
        {
          huart->Instance->BRR = usartdiv;
3418c6dc:	697b      	ldr	r3, [r7, #20]
3418c6de:	681b      	ldr	r3, [r3, #0]
3418c6e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3418c6e2:	60da      	str	r2, [r3, #12]
3418c6e4:	e003      	b.n	3418c6ee <UART_SetConfig+0x2a2>
        }
        else
        {
          ret = HAL_ERROR;
3418c6e6:	2301      	movs	r3, #1
3418c6e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
3418c6ec:	e082      	b.n	3418c7f4 <UART_SetConfig+0x3a8>
3418c6ee:	e081      	b.n	3418c7f4 <UART_SetConfig+0x3a8>
3418c6f0:	56000c00 	.word	0x56000c00
3418c6f4:	cfff69f3 	.word	0xcfff69f3
3418c6f8:	46000c00 	.word	0x46000c00
3418c6fc:	52001000 	.word	0x52001000
3418c700:	50004400 	.word	0x50004400
3418c704:	50004800 	.word	0x50004800
3418c708:	50004c00 	.word	0x50004c00
3418c70c:	52001400 	.word	0x52001400
3418c710:	50007800 	.word	0x50007800
3418c714:	50007c00 	.word	0x50007c00
3418c718:	52001800 	.word	0x52001800
3418c71c:	52001c00 	.word	0x52001c00
3418c720:	341912fc 	.word	0x341912fc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3418c724:	697b      	ldr	r3, [r7, #20]
3418c726:	69db      	ldr	r3, [r3, #28]
3418c728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3418c72c:	d138      	bne.n	3418c7a0 <UART_SetConfig+0x354>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3418c72e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418c732:	f7fb fbe5 	bl	34187f00 <HAL_RCCEx_GetPeriphCLKFreq>
3418c736:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
3418c738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418c73a:	2b00      	cmp	r3, #0
3418c73c:	d05a      	beq.n	3418c7f4 <UART_SetConfig+0x3a8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3418c73e:	697b      	ldr	r3, [r7, #20]
3418c740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c742:	4a37      	ldr	r2, [pc, #220]	@ (3418c820 <UART_SetConfig+0x3d4>)
3418c744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418c748:	461a      	mov	r2, r3
3418c74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418c74c:	fbb3 f3f2 	udiv	r3, r3, r2
3418c750:	005a      	lsls	r2, r3, #1
3418c752:	697b      	ldr	r3, [r7, #20]
3418c754:	685b      	ldr	r3, [r3, #4]
3418c756:	085b      	lsrs	r3, r3, #1
3418c758:	441a      	add	r2, r3
3418c75a:	697b      	ldr	r3, [r7, #20]
3418c75c:	685b      	ldr	r3, [r3, #4]
3418c75e:	fbb2 f3f3 	udiv	r3, r2, r3
3418c762:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3418c764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c766:	2b0f      	cmp	r3, #15
3418c768:	d916      	bls.n	3418c798 <UART_SetConfig+0x34c>
3418c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c76c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418c770:	d212      	bcs.n	3418c798 <UART_SetConfig+0x34c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3418c772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c774:	b29b      	uxth	r3, r3
3418c776:	f023 030f 	bic.w	r3, r3, #15
3418c77a:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3418c77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c77e:	085b      	lsrs	r3, r3, #1
3418c780:	b29b      	uxth	r3, r3
3418c782:	f003 0307 	and.w	r3, r3, #7
3418c786:	b29a      	uxth	r2, r3
3418c788:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
3418c78a:	4313      	orrs	r3, r2
3418c78c:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
3418c78e:	697b      	ldr	r3, [r7, #20]
3418c790:	681b      	ldr	r3, [r3, #0]
3418c792:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
3418c794:	60da      	str	r2, [r3, #12]
3418c796:	e02d      	b.n	3418c7f4 <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
3418c798:	2301      	movs	r3, #1
3418c79a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3418c79e:	e029      	b.n	3418c7f4 <UART_SetConfig+0x3a8>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3418c7a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418c7a4:	f7fb fbac 	bl	34187f00 <HAL_RCCEx_GetPeriphCLKFreq>
3418c7a8:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
3418c7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418c7ac:	2b00      	cmp	r3, #0
3418c7ae:	d021      	beq.n	3418c7f4 <UART_SetConfig+0x3a8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3418c7b0:	697b      	ldr	r3, [r7, #20]
3418c7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418c7b4:	4a1a      	ldr	r2, [pc, #104]	@ (3418c820 <UART_SetConfig+0x3d4>)
3418c7b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418c7ba:	461a      	mov	r2, r3
3418c7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418c7be:	fbb3 f2f2 	udiv	r2, r3, r2
3418c7c2:	697b      	ldr	r3, [r7, #20]
3418c7c4:	685b      	ldr	r3, [r3, #4]
3418c7c6:	085b      	lsrs	r3, r3, #1
3418c7c8:	441a      	add	r2, r3
3418c7ca:	697b      	ldr	r3, [r7, #20]
3418c7cc:	685b      	ldr	r3, [r3, #4]
3418c7ce:	fbb2 f3f3 	udiv	r3, r2, r3
3418c7d2:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3418c7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c7d6:	2b0f      	cmp	r3, #15
3418c7d8:	d909      	bls.n	3418c7ee <UART_SetConfig+0x3a2>
3418c7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c7dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418c7e0:	d205      	bcs.n	3418c7ee <UART_SetConfig+0x3a2>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
3418c7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c7e4:	b29a      	uxth	r2, r3
3418c7e6:	697b      	ldr	r3, [r7, #20]
3418c7e8:	681b      	ldr	r3, [r3, #0]
3418c7ea:	60da      	str	r2, [r3, #12]
3418c7ec:	e002      	b.n	3418c7f4 <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
3418c7ee:	2301      	movs	r3, #1
3418c7f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
3418c7f4:	697b      	ldr	r3, [r7, #20]
3418c7f6:	2201      	movs	r2, #1
3418c7f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
3418c7fc:	697b      	ldr	r3, [r7, #20]
3418c7fe:	2201      	movs	r2, #1
3418c800:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
3418c804:	697b      	ldr	r3, [r7, #20]
3418c806:	2200      	movs	r2, #0
3418c808:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
3418c80a:	697b      	ldr	r3, [r7, #20]
3418c80c:	2200      	movs	r2, #0
3418c80e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
3418c810:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
3418c814:	4618      	mov	r0, r3
3418c816:	3740      	adds	r7, #64	@ 0x40
3418c818:	46bd      	mov	sp, r7
3418c81a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3418c81e:	bf00      	nop
3418c820:	341912fc 	.word	0x341912fc

3418c824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
3418c824:	b480      	push	{r7}
3418c826:	b083      	sub	sp, #12
3418c828:	af00      	add	r7, sp, #0
3418c82a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3418c82c:	687b      	ldr	r3, [r7, #4]
3418c82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c830:	f003 0308 	and.w	r3, r3, #8
3418c834:	2b00      	cmp	r3, #0
3418c836:	d00a      	beq.n	3418c84e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3418c838:	687b      	ldr	r3, [r7, #4]
3418c83a:	681b      	ldr	r3, [r3, #0]
3418c83c:	685b      	ldr	r3, [r3, #4]
3418c83e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
3418c842:	687b      	ldr	r3, [r7, #4]
3418c844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418c846:	687b      	ldr	r3, [r7, #4]
3418c848:	681b      	ldr	r3, [r3, #0]
3418c84a:	430a      	orrs	r2, r1
3418c84c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3418c84e:	687b      	ldr	r3, [r7, #4]
3418c850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c852:	f003 0301 	and.w	r3, r3, #1
3418c856:	2b00      	cmp	r3, #0
3418c858:	d00a      	beq.n	3418c870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3418c85a:	687b      	ldr	r3, [r7, #4]
3418c85c:	681b      	ldr	r3, [r3, #0]
3418c85e:	685b      	ldr	r3, [r3, #4]
3418c860:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
3418c864:	687b      	ldr	r3, [r7, #4]
3418c866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3418c868:	687b      	ldr	r3, [r7, #4]
3418c86a:	681b      	ldr	r3, [r3, #0]
3418c86c:	430a      	orrs	r2, r1
3418c86e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3418c870:	687b      	ldr	r3, [r7, #4]
3418c872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c874:	f003 0302 	and.w	r3, r3, #2
3418c878:	2b00      	cmp	r3, #0
3418c87a:	d00a      	beq.n	3418c892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3418c87c:	687b      	ldr	r3, [r7, #4]
3418c87e:	681b      	ldr	r3, [r3, #0]
3418c880:	685b      	ldr	r3, [r3, #4]
3418c882:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3418c886:	687b      	ldr	r3, [r7, #4]
3418c888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
3418c88a:	687b      	ldr	r3, [r7, #4]
3418c88c:	681b      	ldr	r3, [r3, #0]
3418c88e:	430a      	orrs	r2, r1
3418c890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3418c892:	687b      	ldr	r3, [r7, #4]
3418c894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c896:	f003 0304 	and.w	r3, r3, #4
3418c89a:	2b00      	cmp	r3, #0
3418c89c:	d00a      	beq.n	3418c8b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3418c89e:	687b      	ldr	r3, [r7, #4]
3418c8a0:	681b      	ldr	r3, [r3, #0]
3418c8a2:	685b      	ldr	r3, [r3, #4]
3418c8a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
3418c8a8:	687b      	ldr	r3, [r7, #4]
3418c8aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418c8ac:	687b      	ldr	r3, [r7, #4]
3418c8ae:	681b      	ldr	r3, [r3, #0]
3418c8b0:	430a      	orrs	r2, r1
3418c8b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3418c8b4:	687b      	ldr	r3, [r7, #4]
3418c8b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c8b8:	f003 0310 	and.w	r3, r3, #16
3418c8bc:	2b00      	cmp	r3, #0
3418c8be:	d00a      	beq.n	3418c8d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3418c8c0:	687b      	ldr	r3, [r7, #4]
3418c8c2:	681b      	ldr	r3, [r3, #0]
3418c8c4:	689b      	ldr	r3, [r3, #8]
3418c8c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
3418c8ca:	687b      	ldr	r3, [r7, #4]
3418c8cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3418c8ce:	687b      	ldr	r3, [r7, #4]
3418c8d0:	681b      	ldr	r3, [r3, #0]
3418c8d2:	430a      	orrs	r2, r1
3418c8d4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3418c8d6:	687b      	ldr	r3, [r7, #4]
3418c8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c8da:	f003 0320 	and.w	r3, r3, #32
3418c8de:	2b00      	cmp	r3, #0
3418c8e0:	d00a      	beq.n	3418c8f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3418c8e2:	687b      	ldr	r3, [r7, #4]
3418c8e4:	681b      	ldr	r3, [r3, #0]
3418c8e6:	689b      	ldr	r3, [r3, #8]
3418c8e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
3418c8ec:	687b      	ldr	r3, [r7, #4]
3418c8ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418c8f0:	687b      	ldr	r3, [r7, #4]
3418c8f2:	681b      	ldr	r3, [r3, #0]
3418c8f4:	430a      	orrs	r2, r1
3418c8f6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3418c8f8:	687b      	ldr	r3, [r7, #4]
3418c8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c8fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418c900:	2b00      	cmp	r3, #0
3418c902:	d01a      	beq.n	3418c93a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3418c904:	687b      	ldr	r3, [r7, #4]
3418c906:	681b      	ldr	r3, [r3, #0]
3418c908:	685b      	ldr	r3, [r3, #4]
3418c90a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
3418c90e:	687b      	ldr	r3, [r7, #4]
3418c910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
3418c912:	687b      	ldr	r3, [r7, #4]
3418c914:	681b      	ldr	r3, [r3, #0]
3418c916:	430a      	orrs	r2, r1
3418c918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3418c91a:	687b      	ldr	r3, [r7, #4]
3418c91c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c91e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418c922:	d10a      	bne.n	3418c93a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3418c924:	687b      	ldr	r3, [r7, #4]
3418c926:	681b      	ldr	r3, [r3, #0]
3418c928:	685b      	ldr	r3, [r3, #4]
3418c92a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
3418c92e:	687b      	ldr	r3, [r7, #4]
3418c930:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418c932:	687b      	ldr	r3, [r7, #4]
3418c934:	681b      	ldr	r3, [r3, #0]
3418c936:	430a      	orrs	r2, r1
3418c938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3418c93a:	687b      	ldr	r3, [r7, #4]
3418c93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418c93e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418c942:	2b00      	cmp	r3, #0
3418c944:	d00a      	beq.n	3418c95c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3418c946:	687b      	ldr	r3, [r7, #4]
3418c948:	681b      	ldr	r3, [r3, #0]
3418c94a:	685b      	ldr	r3, [r3, #4]
3418c94c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
3418c950:	687b      	ldr	r3, [r7, #4]
3418c952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418c954:	687b      	ldr	r3, [r7, #4]
3418c956:	681b      	ldr	r3, [r3, #0]
3418c958:	430a      	orrs	r2, r1
3418c95a:	605a      	str	r2, [r3, #4]
  }
}
3418c95c:	bf00      	nop
3418c95e:	370c      	adds	r7, #12
3418c960:	46bd      	mov	sp, r7
3418c962:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c966:	4770      	bx	lr

3418c968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
3418c968:	b580      	push	{r7, lr}
3418c96a:	b098      	sub	sp, #96	@ 0x60
3418c96c:	af02      	add	r7, sp, #8
3418c96e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3418c970:	687b      	ldr	r3, [r7, #4]
3418c972:	2200      	movs	r2, #0
3418c974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
3418c978:	f7f5 fa3c 	bl	34181df4 <HAL_GetTick>
3418c97c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3418c97e:	687b      	ldr	r3, [r7, #4]
3418c980:	681b      	ldr	r3, [r3, #0]
3418c982:	681b      	ldr	r3, [r3, #0]
3418c984:	f003 0308 	and.w	r3, r3, #8
3418c988:	2b08      	cmp	r3, #8
3418c98a:	d12f      	bne.n	3418c9ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3418c98c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3418c990:	9300      	str	r3, [sp, #0]
3418c992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3418c994:	2200      	movs	r2, #0
3418c996:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3418c99a:	6878      	ldr	r0, [r7, #4]
3418c99c:	f000 f88e 	bl	3418cabc <UART_WaitOnFlagUntilTimeout>
3418c9a0:	4603      	mov	r3, r0
3418c9a2:	2b00      	cmp	r3, #0
3418c9a4:	d022      	beq.n	3418c9ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3418c9a6:	687b      	ldr	r3, [r7, #4]
3418c9a8:	681b      	ldr	r3, [r3, #0]
3418c9aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418c9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418c9ae:	e853 3f00 	ldrex	r3, [r3]
3418c9b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
3418c9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418c9b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
3418c9ba:	653b      	str	r3, [r7, #80]	@ 0x50
3418c9bc:	687b      	ldr	r3, [r7, #4]
3418c9be:	681b      	ldr	r3, [r3, #0]
3418c9c0:	461a      	mov	r2, r3
3418c9c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418c9c4:	647b      	str	r3, [r7, #68]	@ 0x44
3418c9c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418c9c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
3418c9ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3418c9cc:	e841 2300 	strex	r3, r2, [r1]
3418c9d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
3418c9d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418c9d4:	2b00      	cmp	r3, #0
3418c9d6:	d1e6      	bne.n	3418c9a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
3418c9d8:	687b      	ldr	r3, [r7, #4]
3418c9da:	2220      	movs	r2, #32
3418c9dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
3418c9e0:	687b      	ldr	r3, [r7, #4]
3418c9e2:	2200      	movs	r2, #0
3418c9e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3418c9e8:	2303      	movs	r3, #3
3418c9ea:	e063      	b.n	3418cab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3418c9ec:	687b      	ldr	r3, [r7, #4]
3418c9ee:	681b      	ldr	r3, [r3, #0]
3418c9f0:	681b      	ldr	r3, [r3, #0]
3418c9f2:	f003 0304 	and.w	r3, r3, #4
3418c9f6:	2b04      	cmp	r3, #4
3418c9f8:	d149      	bne.n	3418ca8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3418c9fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3418c9fe:	9300      	str	r3, [sp, #0]
3418ca00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3418ca02:	2200      	movs	r2, #0
3418ca04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3418ca08:	6878      	ldr	r0, [r7, #4]
3418ca0a:	f000 f857 	bl	3418cabc <UART_WaitOnFlagUntilTimeout>
3418ca0e:	4603      	mov	r3, r0
3418ca10:	2b00      	cmp	r3, #0
3418ca12:	d03c      	beq.n	3418ca8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3418ca14:	687b      	ldr	r3, [r7, #4]
3418ca16:	681b      	ldr	r3, [r3, #0]
3418ca18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418ca1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418ca1c:	e853 3f00 	ldrex	r3, [r3]
3418ca20:	623b      	str	r3, [r7, #32]
   return(result);
3418ca22:	6a3b      	ldr	r3, [r7, #32]
3418ca24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3418ca28:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418ca2a:	687b      	ldr	r3, [r7, #4]
3418ca2c:	681b      	ldr	r3, [r3, #0]
3418ca2e:	461a      	mov	r2, r3
3418ca30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418ca32:	633b      	str	r3, [r7, #48]	@ 0x30
3418ca34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418ca36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
3418ca38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
3418ca3a:	e841 2300 	strex	r3, r2, [r1]
3418ca3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
3418ca40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ca42:	2b00      	cmp	r3, #0
3418ca44:	d1e6      	bne.n	3418ca14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3418ca46:	687b      	ldr	r3, [r7, #4]
3418ca48:	681b      	ldr	r3, [r3, #0]
3418ca4a:	3308      	adds	r3, #8
3418ca4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418ca4e:	693b      	ldr	r3, [r7, #16]
3418ca50:	e853 3f00 	ldrex	r3, [r3]
3418ca54:	60fb      	str	r3, [r7, #12]
   return(result);
3418ca56:	68fb      	ldr	r3, [r7, #12]
3418ca58:	f023 0301 	bic.w	r3, r3, #1
3418ca5c:	64bb      	str	r3, [r7, #72]	@ 0x48
3418ca5e:	687b      	ldr	r3, [r7, #4]
3418ca60:	681b      	ldr	r3, [r3, #0]
3418ca62:	3308      	adds	r3, #8
3418ca64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3418ca66:	61fa      	str	r2, [r7, #28]
3418ca68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418ca6a:	69b9      	ldr	r1, [r7, #24]
3418ca6c:	69fa      	ldr	r2, [r7, #28]
3418ca6e:	e841 2300 	strex	r3, r2, [r1]
3418ca72:	617b      	str	r3, [r7, #20]
   return(result);
3418ca74:	697b      	ldr	r3, [r7, #20]
3418ca76:	2b00      	cmp	r3, #0
3418ca78:	d1e5      	bne.n	3418ca46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
3418ca7a:	687b      	ldr	r3, [r7, #4]
3418ca7c:	2220      	movs	r2, #32
3418ca7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
3418ca82:	687b      	ldr	r3, [r7, #4]
3418ca84:	2200      	movs	r2, #0
3418ca86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3418ca8a:	2303      	movs	r3, #3
3418ca8c:	e012      	b.n	3418cab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
3418ca8e:	687b      	ldr	r3, [r7, #4]
3418ca90:	2220      	movs	r2, #32
3418ca92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3418ca96:	687b      	ldr	r3, [r7, #4]
3418ca98:	2220      	movs	r2, #32
3418ca9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3418ca9e:	687b      	ldr	r3, [r7, #4]
3418caa0:	2200      	movs	r2, #0
3418caa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3418caa4:	687b      	ldr	r3, [r7, #4]
3418caa6:	2200      	movs	r2, #0
3418caa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
3418caaa:	687b      	ldr	r3, [r7, #4]
3418caac:	2200      	movs	r2, #0
3418caae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418cab2:	2300      	movs	r3, #0
}
3418cab4:	4618      	mov	r0, r3
3418cab6:	3758      	adds	r7, #88	@ 0x58
3418cab8:	46bd      	mov	sp, r7
3418caba:	bd80      	pop	{r7, pc}

3418cabc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
3418cabc:	b580      	push	{r7, lr}
3418cabe:	b084      	sub	sp, #16
3418cac0:	af00      	add	r7, sp, #0
3418cac2:	60f8      	str	r0, [r7, #12]
3418cac4:	60b9      	str	r1, [r7, #8]
3418cac6:	603b      	str	r3, [r7, #0]
3418cac8:	4613      	mov	r3, r2
3418caca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3418cacc:	e04f      	b.n	3418cb6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3418cace:	69bb      	ldr	r3, [r7, #24]
3418cad0:	f1b3 3fff 	cmp.w	r3, #4294967295
3418cad4:	d04b      	beq.n	3418cb6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418cad6:	f7f5 f98d 	bl	34181df4 <HAL_GetTick>
3418cada:	4602      	mov	r2, r0
3418cadc:	683b      	ldr	r3, [r7, #0]
3418cade:	1ad3      	subs	r3, r2, r3
3418cae0:	69ba      	ldr	r2, [r7, #24]
3418cae2:	429a      	cmp	r2, r3
3418cae4:	d302      	bcc.n	3418caec <UART_WaitOnFlagUntilTimeout+0x30>
3418cae6:	69bb      	ldr	r3, [r7, #24]
3418cae8:	2b00      	cmp	r3, #0
3418caea:	d101      	bne.n	3418caf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
3418caec:	2303      	movs	r3, #3
3418caee:	e04e      	b.n	3418cb8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3418caf0:	68fb      	ldr	r3, [r7, #12]
3418caf2:	681b      	ldr	r3, [r3, #0]
3418caf4:	681b      	ldr	r3, [r3, #0]
3418caf6:	f003 0304 	and.w	r3, r3, #4
3418cafa:	2b00      	cmp	r3, #0
3418cafc:	d037      	beq.n	3418cb6e <UART_WaitOnFlagUntilTimeout+0xb2>
3418cafe:	68bb      	ldr	r3, [r7, #8]
3418cb00:	2b80      	cmp	r3, #128	@ 0x80
3418cb02:	d034      	beq.n	3418cb6e <UART_WaitOnFlagUntilTimeout+0xb2>
3418cb04:	68bb      	ldr	r3, [r7, #8]
3418cb06:	2b40      	cmp	r3, #64	@ 0x40
3418cb08:	d031      	beq.n	3418cb6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3418cb0a:	68fb      	ldr	r3, [r7, #12]
3418cb0c:	681b      	ldr	r3, [r3, #0]
3418cb0e:	69db      	ldr	r3, [r3, #28]
3418cb10:	f003 0308 	and.w	r3, r3, #8
3418cb14:	2b08      	cmp	r3, #8
3418cb16:	d110      	bne.n	3418cb3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3418cb18:	68fb      	ldr	r3, [r7, #12]
3418cb1a:	681b      	ldr	r3, [r3, #0]
3418cb1c:	2208      	movs	r2, #8
3418cb1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3418cb20:	68f8      	ldr	r0, [r7, #12]
3418cb22:	f000 f838 	bl	3418cb96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
3418cb26:	68fb      	ldr	r3, [r7, #12]
3418cb28:	2208      	movs	r2, #8
3418cb2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3418cb2e:	68fb      	ldr	r3, [r7, #12]
3418cb30:	2200      	movs	r2, #0
3418cb32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
3418cb36:	2301      	movs	r3, #1
3418cb38:	e029      	b.n	3418cb8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3418cb3a:	68fb      	ldr	r3, [r7, #12]
3418cb3c:	681b      	ldr	r3, [r3, #0]
3418cb3e:	69db      	ldr	r3, [r3, #28]
3418cb40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418cb44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418cb48:	d111      	bne.n	3418cb6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3418cb4a:	68fb      	ldr	r3, [r7, #12]
3418cb4c:	681b      	ldr	r3, [r3, #0]
3418cb4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418cb52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3418cb54:	68f8      	ldr	r0, [r7, #12]
3418cb56:	f000 f81e 	bl	3418cb96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
3418cb5a:	68fb      	ldr	r3, [r7, #12]
3418cb5c:	2220      	movs	r2, #32
3418cb5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3418cb62:	68fb      	ldr	r3, [r7, #12]
3418cb64:	2200      	movs	r2, #0
3418cb66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
3418cb6a:	2303      	movs	r3, #3
3418cb6c:	e00f      	b.n	3418cb8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3418cb6e:	68fb      	ldr	r3, [r7, #12]
3418cb70:	681b      	ldr	r3, [r3, #0]
3418cb72:	69da      	ldr	r2, [r3, #28]
3418cb74:	68bb      	ldr	r3, [r7, #8]
3418cb76:	4013      	ands	r3, r2
3418cb78:	68ba      	ldr	r2, [r7, #8]
3418cb7a:	429a      	cmp	r2, r3
3418cb7c:	bf0c      	ite	eq
3418cb7e:	2301      	moveq	r3, #1
3418cb80:	2300      	movne	r3, #0
3418cb82:	b2db      	uxtb	r3, r3
3418cb84:	461a      	mov	r2, r3
3418cb86:	79fb      	ldrb	r3, [r7, #7]
3418cb88:	429a      	cmp	r2, r3
3418cb8a:	d0a0      	beq.n	3418cace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
3418cb8c:	2300      	movs	r3, #0
}
3418cb8e:	4618      	mov	r0, r3
3418cb90:	3710      	adds	r7, #16
3418cb92:	46bd      	mov	sp, r7
3418cb94:	bd80      	pop	{r7, pc}

3418cb96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3418cb96:	b480      	push	{r7}
3418cb98:	b095      	sub	sp, #84	@ 0x54
3418cb9a:	af00      	add	r7, sp, #0
3418cb9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3418cb9e:	687b      	ldr	r3, [r7, #4]
3418cba0:	681b      	ldr	r3, [r3, #0]
3418cba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418cba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418cba6:	e853 3f00 	ldrex	r3, [r3]
3418cbaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
3418cbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418cbae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3418cbb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418cbb4:	687b      	ldr	r3, [r7, #4]
3418cbb6:	681b      	ldr	r3, [r3, #0]
3418cbb8:	461a      	mov	r2, r3
3418cbba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418cbbc:	643b      	str	r3, [r7, #64]	@ 0x40
3418cbbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418cbc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418cbc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
3418cbc4:	e841 2300 	strex	r3, r2, [r1]
3418cbc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
3418cbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418cbcc:	2b00      	cmp	r3, #0
3418cbce:	d1e6      	bne.n	3418cb9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3418cbd0:	687b      	ldr	r3, [r7, #4]
3418cbd2:	681b      	ldr	r3, [r3, #0]
3418cbd4:	3308      	adds	r3, #8
3418cbd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418cbd8:	6a3b      	ldr	r3, [r7, #32]
3418cbda:	e853 3f00 	ldrex	r3, [r3]
3418cbde:	61fb      	str	r3, [r7, #28]
   return(result);
3418cbe0:	69fb      	ldr	r3, [r7, #28]
3418cbe2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
3418cbe6:	f023 0301 	bic.w	r3, r3, #1
3418cbea:	64bb      	str	r3, [r7, #72]	@ 0x48
3418cbec:	687b      	ldr	r3, [r7, #4]
3418cbee:	681b      	ldr	r3, [r3, #0]
3418cbf0:	3308      	adds	r3, #8
3418cbf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3418cbf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
3418cbf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418cbf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418cbfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
3418cbfc:	e841 2300 	strex	r3, r2, [r1]
3418cc00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
3418cc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418cc04:	2b00      	cmp	r3, #0
3418cc06:	d1e3      	bne.n	3418cbd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3418cc08:	687b      	ldr	r3, [r7, #4]
3418cc0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418cc0c:	2b01      	cmp	r3, #1
3418cc0e:	d118      	bne.n	3418cc42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3418cc10:	687b      	ldr	r3, [r7, #4]
3418cc12:	681b      	ldr	r3, [r3, #0]
3418cc14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418cc16:	68fb      	ldr	r3, [r7, #12]
3418cc18:	e853 3f00 	ldrex	r3, [r3]
3418cc1c:	60bb      	str	r3, [r7, #8]
   return(result);
3418cc1e:	68bb      	ldr	r3, [r7, #8]
3418cc20:	f023 0310 	bic.w	r3, r3, #16
3418cc24:	647b      	str	r3, [r7, #68]	@ 0x44
3418cc26:	687b      	ldr	r3, [r7, #4]
3418cc28:	681b      	ldr	r3, [r3, #0]
3418cc2a:	461a      	mov	r2, r3
3418cc2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3418cc2e:	61bb      	str	r3, [r7, #24]
3418cc30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418cc32:	6979      	ldr	r1, [r7, #20]
3418cc34:	69ba      	ldr	r2, [r7, #24]
3418cc36:	e841 2300 	strex	r3, r2, [r1]
3418cc3a:	613b      	str	r3, [r7, #16]
   return(result);
3418cc3c:	693b      	ldr	r3, [r7, #16]
3418cc3e:	2b00      	cmp	r3, #0
3418cc40:	d1e6      	bne.n	3418cc10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3418cc42:	687b      	ldr	r3, [r7, #4]
3418cc44:	2220      	movs	r2, #32
3418cc46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3418cc4a:	687b      	ldr	r3, [r7, #4]
3418cc4c:	2200      	movs	r2, #0
3418cc4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3418cc50:	687b      	ldr	r3, [r7, #4]
3418cc52:	2200      	movs	r2, #0
3418cc54:	675a      	str	r2, [r3, #116]	@ 0x74
}
3418cc56:	bf00      	nop
3418cc58:	3754      	adds	r7, #84	@ 0x54
3418cc5a:	46bd      	mov	sp, r7
3418cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cc60:	4770      	bx	lr

3418cc62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
3418cc62:	b480      	push	{r7}
3418cc64:	b085      	sub	sp, #20
3418cc66:	af00      	add	r7, sp, #0
3418cc68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
3418cc6a:	687b      	ldr	r3, [r7, #4]
3418cc6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3418cc70:	2b01      	cmp	r3, #1
3418cc72:	d101      	bne.n	3418cc78 <HAL_UARTEx_DisableFifoMode+0x16>
3418cc74:	2302      	movs	r3, #2
3418cc76:	e027      	b.n	3418ccc8 <HAL_UARTEx_DisableFifoMode+0x66>
3418cc78:	687b      	ldr	r3, [r7, #4]
3418cc7a:	2201      	movs	r2, #1
3418cc7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3418cc80:	687b      	ldr	r3, [r7, #4]
3418cc82:	2224      	movs	r2, #36	@ 0x24
3418cc84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418cc88:	687b      	ldr	r3, [r7, #4]
3418cc8a:	681b      	ldr	r3, [r3, #0]
3418cc8c:	681b      	ldr	r3, [r3, #0]
3418cc8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3418cc90:	687b      	ldr	r3, [r7, #4]
3418cc92:	681b      	ldr	r3, [r3, #0]
3418cc94:	681a      	ldr	r2, [r3, #0]
3418cc96:	687b      	ldr	r3, [r7, #4]
3418cc98:	681b      	ldr	r3, [r3, #0]
3418cc9a:	f022 0201 	bic.w	r2, r2, #1
3418cc9e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
3418cca0:	68fb      	ldr	r3, [r7, #12]
3418cca2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
3418cca6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
3418cca8:	687b      	ldr	r3, [r7, #4]
3418ccaa:	2200      	movs	r2, #0
3418ccac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3418ccae:	687b      	ldr	r3, [r7, #4]
3418ccb0:	681b      	ldr	r3, [r3, #0]
3418ccb2:	68fa      	ldr	r2, [r7, #12]
3418ccb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3418ccb6:	687b      	ldr	r3, [r7, #4]
3418ccb8:	2220      	movs	r2, #32
3418ccba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3418ccbe:	687b      	ldr	r3, [r7, #4]
3418ccc0:	2200      	movs	r2, #0
3418ccc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418ccc6:	2300      	movs	r3, #0
}
3418ccc8:	4618      	mov	r0, r3
3418ccca:	3714      	adds	r7, #20
3418cccc:	46bd      	mov	sp, r7
3418ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ccd2:	4770      	bx	lr

3418ccd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
3418ccd4:	b580      	push	{r7, lr}
3418ccd6:	b084      	sub	sp, #16
3418ccd8:	af00      	add	r7, sp, #0
3418ccda:	6078      	str	r0, [r7, #4]
3418ccdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
3418ccde:	687b      	ldr	r3, [r7, #4]
3418cce0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3418cce4:	2b01      	cmp	r3, #1
3418cce6:	d101      	bne.n	3418ccec <HAL_UARTEx_SetTxFifoThreshold+0x18>
3418cce8:	2302      	movs	r3, #2
3418ccea:	e02d      	b.n	3418cd48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
3418ccec:	687b      	ldr	r3, [r7, #4]
3418ccee:	2201      	movs	r2, #1
3418ccf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3418ccf4:	687b      	ldr	r3, [r7, #4]
3418ccf6:	2224      	movs	r2, #36	@ 0x24
3418ccf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418ccfc:	687b      	ldr	r3, [r7, #4]
3418ccfe:	681b      	ldr	r3, [r3, #0]
3418cd00:	681b      	ldr	r3, [r3, #0]
3418cd02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3418cd04:	687b      	ldr	r3, [r7, #4]
3418cd06:	681b      	ldr	r3, [r3, #0]
3418cd08:	681a      	ldr	r2, [r3, #0]
3418cd0a:	687b      	ldr	r3, [r7, #4]
3418cd0c:	681b      	ldr	r3, [r3, #0]
3418cd0e:	f022 0201 	bic.w	r2, r2, #1
3418cd12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
3418cd14:	687b      	ldr	r3, [r7, #4]
3418cd16:	681b      	ldr	r3, [r3, #0]
3418cd18:	689b      	ldr	r3, [r3, #8]
3418cd1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
3418cd1e:	687b      	ldr	r3, [r7, #4]
3418cd20:	681b      	ldr	r3, [r3, #0]
3418cd22:	683a      	ldr	r2, [r7, #0]
3418cd24:	430a      	orrs	r2, r1
3418cd26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
3418cd28:	6878      	ldr	r0, [r7, #4]
3418cd2a:	f000 f84f 	bl	3418cdcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3418cd2e:	687b      	ldr	r3, [r7, #4]
3418cd30:	681b      	ldr	r3, [r3, #0]
3418cd32:	68fa      	ldr	r2, [r7, #12]
3418cd34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3418cd36:	687b      	ldr	r3, [r7, #4]
3418cd38:	2220      	movs	r2, #32
3418cd3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3418cd3e:	687b      	ldr	r3, [r7, #4]
3418cd40:	2200      	movs	r2, #0
3418cd42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418cd46:	2300      	movs	r3, #0
}
3418cd48:	4618      	mov	r0, r3
3418cd4a:	3710      	adds	r7, #16
3418cd4c:	46bd      	mov	sp, r7
3418cd4e:	bd80      	pop	{r7, pc}

3418cd50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
3418cd50:	b580      	push	{r7, lr}
3418cd52:	b084      	sub	sp, #16
3418cd54:	af00      	add	r7, sp, #0
3418cd56:	6078      	str	r0, [r7, #4]
3418cd58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
3418cd5a:	687b      	ldr	r3, [r7, #4]
3418cd5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3418cd60:	2b01      	cmp	r3, #1
3418cd62:	d101      	bne.n	3418cd68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
3418cd64:	2302      	movs	r3, #2
3418cd66:	e02d      	b.n	3418cdc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
3418cd68:	687b      	ldr	r3, [r7, #4]
3418cd6a:	2201      	movs	r2, #1
3418cd6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3418cd70:	687b      	ldr	r3, [r7, #4]
3418cd72:	2224      	movs	r2, #36	@ 0x24
3418cd74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418cd78:	687b      	ldr	r3, [r7, #4]
3418cd7a:	681b      	ldr	r3, [r3, #0]
3418cd7c:	681b      	ldr	r3, [r3, #0]
3418cd7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3418cd80:	687b      	ldr	r3, [r7, #4]
3418cd82:	681b      	ldr	r3, [r3, #0]
3418cd84:	681a      	ldr	r2, [r3, #0]
3418cd86:	687b      	ldr	r3, [r7, #4]
3418cd88:	681b      	ldr	r3, [r3, #0]
3418cd8a:	f022 0201 	bic.w	r2, r2, #1
3418cd8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
3418cd90:	687b      	ldr	r3, [r7, #4]
3418cd92:	681b      	ldr	r3, [r3, #0]
3418cd94:	689b      	ldr	r3, [r3, #8]
3418cd96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
3418cd9a:	687b      	ldr	r3, [r7, #4]
3418cd9c:	681b      	ldr	r3, [r3, #0]
3418cd9e:	683a      	ldr	r2, [r7, #0]
3418cda0:	430a      	orrs	r2, r1
3418cda2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
3418cda4:	6878      	ldr	r0, [r7, #4]
3418cda6:	f000 f811 	bl	3418cdcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3418cdaa:	687b      	ldr	r3, [r7, #4]
3418cdac:	681b      	ldr	r3, [r3, #0]
3418cdae:	68fa      	ldr	r2, [r7, #12]
3418cdb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3418cdb2:	687b      	ldr	r3, [r7, #4]
3418cdb4:	2220      	movs	r2, #32
3418cdb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3418cdba:	687b      	ldr	r3, [r7, #4]
3418cdbc:	2200      	movs	r2, #0
3418cdbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418cdc2:	2300      	movs	r3, #0
}
3418cdc4:	4618      	mov	r0, r3
3418cdc6:	3710      	adds	r7, #16
3418cdc8:	46bd      	mov	sp, r7
3418cdca:	bd80      	pop	{r7, pc}

3418cdcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
3418cdcc:	b480      	push	{r7}
3418cdce:	b085      	sub	sp, #20
3418cdd0:	af00      	add	r7, sp, #0
3418cdd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
3418cdd4:	687b      	ldr	r3, [r7, #4]
3418cdd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418cdd8:	2b00      	cmp	r3, #0
3418cdda:	d108      	bne.n	3418cdee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
3418cddc:	687b      	ldr	r3, [r7, #4]
3418cdde:	2201      	movs	r2, #1
3418cde0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
3418cde4:	687b      	ldr	r3, [r7, #4]
3418cde6:	2201      	movs	r2, #1
3418cde8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
3418cdec:	e031      	b.n	3418ce52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
3418cdee:	2310      	movs	r3, #16
3418cdf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
3418cdf2:	2310      	movs	r3, #16
3418cdf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
3418cdf6:	687b      	ldr	r3, [r7, #4]
3418cdf8:	681b      	ldr	r3, [r3, #0]
3418cdfa:	689b      	ldr	r3, [r3, #8]
3418cdfc:	0e5b      	lsrs	r3, r3, #25
3418cdfe:	b2db      	uxtb	r3, r3
3418ce00:	f003 0307 	and.w	r3, r3, #7
3418ce04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
3418ce06:	687b      	ldr	r3, [r7, #4]
3418ce08:	681b      	ldr	r3, [r3, #0]
3418ce0a:	689b      	ldr	r3, [r3, #8]
3418ce0c:	0f5b      	lsrs	r3, r3, #29
3418ce0e:	b2db      	uxtb	r3, r3
3418ce10:	f003 0307 	and.w	r3, r3, #7
3418ce14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
3418ce16:	7bbb      	ldrb	r3, [r7, #14]
3418ce18:	7b3a      	ldrb	r2, [r7, #12]
3418ce1a:	4911      	ldr	r1, [pc, #68]	@ (3418ce60 <UARTEx_SetNbDataToProcess+0x94>)
3418ce1c:	5c8a      	ldrb	r2, [r1, r2]
3418ce1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
3418ce22:	7b3a      	ldrb	r2, [r7, #12]
3418ce24:	490f      	ldr	r1, [pc, #60]	@ (3418ce64 <UARTEx_SetNbDataToProcess+0x98>)
3418ce26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
3418ce28:	fb93 f3f2 	sdiv	r3, r3, r2
3418ce2c:	b29a      	uxth	r2, r3
3418ce2e:	687b      	ldr	r3, [r7, #4]
3418ce30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
3418ce34:	7bfb      	ldrb	r3, [r7, #15]
3418ce36:	7b7a      	ldrb	r2, [r7, #13]
3418ce38:	4909      	ldr	r1, [pc, #36]	@ (3418ce60 <UARTEx_SetNbDataToProcess+0x94>)
3418ce3a:	5c8a      	ldrb	r2, [r1, r2]
3418ce3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
3418ce40:	7b7a      	ldrb	r2, [r7, #13]
3418ce42:	4908      	ldr	r1, [pc, #32]	@ (3418ce64 <UARTEx_SetNbDataToProcess+0x98>)
3418ce44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
3418ce46:	fb93 f3f2 	sdiv	r3, r3, r2
3418ce4a:	b29a      	uxth	r2, r3
3418ce4c:	687b      	ldr	r3, [r7, #4]
3418ce4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
3418ce52:	bf00      	nop
3418ce54:	3714      	adds	r7, #20
3418ce56:	46bd      	mov	sp, r7
3418ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ce5c:	4770      	bx	lr
3418ce5e:	bf00      	nop
3418ce60:	34191314 	.word	0x34191314
3418ce64:	3419131c 	.word	0x3419131c

3418ce68 <LL_AHB5_GRP1_IsEnabledClock>:
{
3418ce68:	b480      	push	{r7}
3418ce6a:	b083      	sub	sp, #12
3418ce6c:	af00      	add	r7, sp, #0
3418ce6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB5ENR, Periphs) == Periphs) ? 1UL : 0UL);
3418ce70:	4b08      	ldr	r3, [pc, #32]	@ (3418ce94 <LL_AHB5_GRP1_IsEnabledClock+0x2c>)
3418ce72:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
3418ce76:	687b      	ldr	r3, [r7, #4]
3418ce78:	4013      	ands	r3, r2
3418ce7a:	687a      	ldr	r2, [r7, #4]
3418ce7c:	429a      	cmp	r2, r3
3418ce7e:	d101      	bne.n	3418ce84 <LL_AHB5_GRP1_IsEnabledClock+0x1c>
3418ce80:	2301      	movs	r3, #1
3418ce82:	e000      	b.n	3418ce86 <LL_AHB5_GRP1_IsEnabledClock+0x1e>
3418ce84:	2300      	movs	r3, #0
}
3418ce86:	4618      	mov	r0, r3
3418ce88:	370c      	adds	r7, #12
3418ce8a:	46bd      	mov	sp, r7
3418ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ce90:	4770      	bx	lr
3418ce92:	bf00      	nop
3418ce94:	56028000 	.word	0x56028000

3418ce98 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
3418ce98:	b580      	push	{r7, lr}
3418ce9a:	b086      	sub	sp, #24
3418ce9c:	af02      	add	r7, sp, #8
3418ce9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418cea0:	2300      	movs	r3, #0
3418cea2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3418cea4:	f7f4 ffa6 	bl	34181df4 <HAL_GetTick>
3418cea8:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
3418ceaa:	687b      	ldr	r3, [r7, #4]
3418ceac:	2b00      	cmp	r3, #0
3418ceae:	d102      	bne.n	3418ceb6 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
3418ceb0:	2301      	movs	r3, #1
3418ceb2:	73fb      	strb	r3, [r7, #15]
3418ceb4:	e0ec      	b.n	3418d090 <HAL_XSPI_Init+0x1f8>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3418ceb6:	687b      	ldr	r3, [r7, #4]
3418ceb8:	2200      	movs	r2, #0
3418ceba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3418cebc:	687b      	ldr	r3, [r7, #4]
3418cebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418cec0:	2b00      	cmp	r3, #0
3418cec2:	f040 80e5 	bne.w	3418d090 <HAL_XSPI_Init+0x1f8>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
3418cec6:	6878      	ldr	r0, [r7, #4]
3418cec8:	f7f4 fd9e 	bl	34181a08 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418cecc:	f241 3188 	movw	r1, #5000	@ 0x1388
3418ced0:	6878      	ldr	r0, [r7, #4]
3418ced2:	f000 fc14 	bl	3418d6fe <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
3418ced6:	687b      	ldr	r3, [r7, #4]
3418ced8:	681b      	ldr	r3, [r3, #0]
3418ceda:	689a      	ldr	r2, [r3, #8]
3418cedc:	4b6f      	ldr	r3, [pc, #444]	@ (3418d09c <HAL_XSPI_Init+0x204>)
3418cede:	4013      	ands	r3, r2
3418cee0:	687a      	ldr	r2, [r7, #4]
3418cee2:	68d1      	ldr	r1, [r2, #12]
3418cee4:	687a      	ldr	r2, [r7, #4]
3418cee6:	6912      	ldr	r2, [r2, #16]
3418cee8:	0412      	lsls	r2, r2, #16
3418ceea:	4311      	orrs	r1, r2
3418ceec:	687a      	ldr	r2, [r7, #4]
3418ceee:	6952      	ldr	r2, [r2, #20]
3418cef0:	3a01      	subs	r2, #1
3418cef2:	0212      	lsls	r2, r2, #8
3418cef4:	4311      	orrs	r1, r2
3418cef6:	687a      	ldr	r2, [r7, #4]
3418cef8:	69d2      	ldr	r2, [r2, #28]
3418cefa:	4311      	orrs	r1, r2
3418cefc:	687a      	ldr	r2, [r7, #4]
3418cefe:	6812      	ldr	r2, [r2, #0]
3418cf00:	430b      	orrs	r3, r1
3418cf02:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3418cf04:	687b      	ldr	r3, [r7, #4]
3418cf06:	681b      	ldr	r3, [r3, #0]
3418cf08:	68db      	ldr	r3, [r3, #12]
3418cf0a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
3418cf0e:	687b      	ldr	r3, [r7, #4]
3418cf10:	6a1a      	ldr	r2, [r3, #32]
3418cf12:	687b      	ldr	r3, [r7, #4]
3418cf14:	681b      	ldr	r3, [r3, #0]
3418cf16:	430a      	orrs	r2, r1
3418cf18:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3418cf1a:	687b      	ldr	r3, [r7, #4]
3418cf1c:	681b      	ldr	r3, [r3, #0]
3418cf1e:	691b      	ldr	r3, [r3, #16]
3418cf20:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
3418cf24:	687b      	ldr	r3, [r7, #4]
3418cf26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418cf28:	041a      	lsls	r2, r3, #16
3418cf2a:	687b      	ldr	r3, [r7, #4]
3418cf2c:	681b      	ldr	r3, [r3, #0]
3418cf2e:	430a      	orrs	r2, r1
3418cf30:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3418cf32:	687b      	ldr	r3, [r7, #4]
3418cf34:	681b      	ldr	r3, [r3, #0]
3418cf36:	691b      	ldr	r3, [r3, #16]
3418cf38:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418cf3c:	687b      	ldr	r3, [r7, #4]
3418cf3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418cf40:	687b      	ldr	r3, [r7, #4]
3418cf42:	681b      	ldr	r3, [r3, #0]
3418cf44:	430a      	orrs	r2, r1
3418cf46:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3418cf48:	687b      	ldr	r3, [r7, #4]
3418cf4a:	681b      	ldr	r3, [r3, #0]
3418cf4c:	687a      	ldr	r2, [r7, #4]
3418cf4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418cf50:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3418cf52:	687b      	ldr	r3, [r7, #4]
3418cf54:	681b      	ldr	r3, [r3, #0]
3418cf56:	681b      	ldr	r3, [r3, #0]
3418cf58:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
3418cf5c:	687b      	ldr	r3, [r7, #4]
3418cf5e:	685b      	ldr	r3, [r3, #4]
3418cf60:	3b01      	subs	r3, #1
3418cf62:	021a      	lsls	r2, r3, #8
3418cf64:	687b      	ldr	r3, [r7, #4]
3418cf66:	681b      	ldr	r3, [r3, #0]
3418cf68:	430a      	orrs	r2, r1
3418cf6a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418cf6c:	687b      	ldr	r3, [r7, #4]
3418cf6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418cf70:	9300      	str	r3, [sp, #0]
3418cf72:	68bb      	ldr	r3, [r7, #8]
3418cf74:	2200      	movs	r2, #0
3418cf76:	2120      	movs	r1, #32
3418cf78:	6878      	ldr	r0, [r7, #4]
3418cf7a:	f000 fcfb 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418cf7e:	4603      	mov	r3, r0
3418cf80:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
3418cf82:	7bfb      	ldrb	r3, [r7, #15]
3418cf84:	2b00      	cmp	r3, #0
3418cf86:	f040 8083 	bne.w	3418d090 <HAL_XSPI_Init+0x1f8>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3418cf8a:	687b      	ldr	r3, [r7, #4]
3418cf8c:	681b      	ldr	r3, [r3, #0]
3418cf8e:	68db      	ldr	r3, [r3, #12]
3418cf90:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418cf94:	687b      	ldr	r3, [r7, #4]
3418cf96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3418cf98:	687b      	ldr	r3, [r7, #4]
3418cf9a:	681b      	ldr	r3, [r3, #0]
3418cf9c:	430a      	orrs	r2, r1
3418cf9e:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3418cfa0:	687b      	ldr	r3, [r7, #4]
3418cfa2:	681b      	ldr	r3, [r3, #0]
3418cfa4:	4a3e      	ldr	r2, [pc, #248]	@ (3418d0a0 <HAL_XSPI_Init+0x208>)
3418cfa6:	4293      	cmp	r3, r2
3418cfa8:	d018      	beq.n	3418cfdc <HAL_XSPI_Init+0x144>
3418cfaa:	687b      	ldr	r3, [r7, #4]
3418cfac:	681b      	ldr	r3, [r3, #0]
3418cfae:	4a3d      	ldr	r2, [pc, #244]	@ (3418d0a4 <HAL_XSPI_Init+0x20c>)
3418cfb0:	4293      	cmp	r3, r2
3418cfb2:	d013      	beq.n	3418cfdc <HAL_XSPI_Init+0x144>
3418cfb4:	687b      	ldr	r3, [r7, #4]
3418cfb6:	681b      	ldr	r3, [r3, #0]
3418cfb8:	4a3b      	ldr	r2, [pc, #236]	@ (3418d0a8 <HAL_XSPI_Init+0x210>)
3418cfba:	4293      	cmp	r3, r2
3418cfbc:	d00e      	beq.n	3418cfdc <HAL_XSPI_Init+0x144>
3418cfbe:	687b      	ldr	r3, [r7, #4]
3418cfc0:	681b      	ldr	r3, [r3, #0]
3418cfc2:	4a3a      	ldr	r2, [pc, #232]	@ (3418d0ac <HAL_XSPI_Init+0x214>)
3418cfc4:	4293      	cmp	r3, r2
3418cfc6:	d009      	beq.n	3418cfdc <HAL_XSPI_Init+0x144>
3418cfc8:	687b      	ldr	r3, [r7, #4]
3418cfca:	681b      	ldr	r3, [r3, #0]
3418cfcc:	4a38      	ldr	r2, [pc, #224]	@ (3418d0b0 <HAL_XSPI_Init+0x218>)
3418cfce:	4293      	cmp	r3, r2
3418cfd0:	d004      	beq.n	3418cfdc <HAL_XSPI_Init+0x144>
3418cfd2:	687b      	ldr	r3, [r7, #4]
3418cfd4:	681b      	ldr	r3, [r3, #0]
3418cfd6:	4a37      	ldr	r2, [pc, #220]	@ (3418d0b4 <HAL_XSPI_Init+0x21c>)
3418cfd8:	4293      	cmp	r3, r2
3418cfda:	d10f      	bne.n	3418cffc <HAL_XSPI_Init+0x164>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418cfdc:	687b      	ldr	r3, [r7, #4]
3418cfde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418cfe0:	9300      	str	r3, [sp, #0]
3418cfe2:	68bb      	ldr	r3, [r7, #8]
3418cfe4:	2200      	movs	r2, #0
3418cfe6:	2120      	movs	r1, #32
3418cfe8:	6878      	ldr	r0, [r7, #4]
3418cfea:	f000 fcc3 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418cfee:	4603      	mov	r3, r0
3418cff0:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
3418cff2:	7bfb      	ldrb	r3, [r7, #15]
3418cff4:	2b00      	cmp	r3, #0
3418cff6:	d001      	beq.n	3418cffc <HAL_XSPI_Init+0x164>
          {
            return status;
3418cff8:	7bfb      	ldrb	r3, [r7, #15]
3418cffa:	e04a      	b.n	3418d092 <HAL_XSPI_Init+0x1fa>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3418cffc:	687b      	ldr	r3, [r7, #4]
3418cffe:	681b      	ldr	r3, [r3, #0]
3418d000:	681b      	ldr	r3, [r3, #0]
3418d002:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3418d006:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3418d00a:	687a      	ldr	r2, [r7, #4]
3418d00c:	6891      	ldr	r1, [r2, #8]
3418d00e:	687a      	ldr	r2, [r7, #4]
3418d010:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
3418d012:	4311      	orrs	r1, r2
3418d014:	687a      	ldr	r2, [r7, #4]
3418d016:	6812      	ldr	r2, [r2, #0]
3418d018:	430b      	orrs	r3, r1
3418d01a:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT), hxspi->Init.SampleShifting);
3418d01c:	687b      	ldr	r3, [r7, #4]
3418d01e:	681b      	ldr	r3, [r3, #0]
3418d020:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418d024:	f023 4180 	bic.w	r1, r3, #1073741824	@ 0x40000000
3418d028:	687b      	ldr	r3, [r7, #4]
3418d02a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418d02c:	687b      	ldr	r3, [r7, #4]
3418d02e:	681b      	ldr	r3, [r3, #0]
3418d030:	430a      	orrs	r2, r1
3418d032:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
3418d036:	687b      	ldr	r3, [r7, #4]
3418d038:	681b      	ldr	r3, [r3, #0]
3418d03a:	681a      	ldr	r2, [r3, #0]
3418d03c:	687b      	ldr	r3, [r7, #4]
3418d03e:	681b      	ldr	r3, [r3, #0]
3418d040:	f042 0201 	orr.w	r2, r2, #1
3418d044:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3418d046:	687b      	ldr	r3, [r7, #4]
3418d048:	699b      	ldr	r3, [r3, #24]
3418d04a:	2b02      	cmp	r3, #2
3418d04c:	d107      	bne.n	3418d05e <HAL_XSPI_Init+0x1c6>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3418d04e:	687b      	ldr	r3, [r7, #4]
3418d050:	681b      	ldr	r3, [r3, #0]
3418d052:	689a      	ldr	r2, [r3, #8]
3418d054:	687b      	ldr	r3, [r7, #4]
3418d056:	681b      	ldr	r3, [r3, #0]
3418d058:	f042 0202 	orr.w	r2, r2, #2
3418d05c:	609a      	str	r2, [r3, #8]
        }

        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3418d05e:	687b      	ldr	r3, [r7, #4]
3418d060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418d062:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418d066:	d107      	bne.n	3418d078 <HAL_XSPI_Init+0x1e0>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3418d068:	687b      	ldr	r3, [r7, #4]
3418d06a:	681b      	ldr	r3, [r3, #0]
3418d06c:	689a      	ldr	r2, [r3, #8]
3418d06e:	687b      	ldr	r3, [r7, #4]
3418d070:	681b      	ldr	r3, [r3, #0]
3418d072:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
3418d076:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418d078:	687b      	ldr	r3, [r7, #4]
3418d07a:	68db      	ldr	r3, [r3, #12]
3418d07c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418d080:	d103      	bne.n	3418d08a <HAL_XSPI_Init+0x1f2>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3418d082:	687b      	ldr	r3, [r7, #4]
3418d084:	2201      	movs	r2, #1
3418d086:	659a      	str	r2, [r3, #88]	@ 0x58
3418d088:	e002      	b.n	3418d090 <HAL_XSPI_Init+0x1f8>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
3418d08a:	687b      	ldr	r3, [r7, #4]
3418d08c:	2202      	movs	r2, #2
3418d08e:	659a      	str	r2, [r3, #88]	@ 0x58
        }
      }
    }
  }
  return status;
3418d090:	7bfb      	ldrb	r3, [r7, #15]
}
3418d092:	4618      	mov	r0, r3
3418d094:	3710      	adds	r7, #16
3418d096:	46bd      	mov	sp, r7
3418d098:	bd80      	pop	{r7, pc}
3418d09a:	bf00      	nop
3418d09c:	f8e0c0fc 	.word	0xf8e0c0fc
3418d0a0:	58025000 	.word	0x58025000
3418d0a4:	48025000 	.word	0x48025000
3418d0a8:	5802a000 	.word	0x5802a000
3418d0ac:	4802a000 	.word	0x4802a000
3418d0b0:	5802d000 	.word	0x5802d000
3418d0b4:	4802d000 	.word	0x4802d000

3418d0b8 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd, uint32_t Timeout)
{
3418d0b8:	b580      	push	{r7, lr}
3418d0ba:	b08a      	sub	sp, #40	@ 0x28
3418d0bc:	af02      	add	r7, sp, #8
3418d0be:	60f8      	str	r0, [r7, #12]
3418d0c0:	60b9      	str	r1, [r7, #8]
3418d0c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
3418d0c4:	f7f4 fe96 	bl	34181df4 <HAL_GetTick>
3418d0c8:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418d0ca:	68bb      	ldr	r3, [r7, #8]
3418d0cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418d0ce:	2b00      	cmp	r3, #0
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));

  /* Check the state of the driver */
  state = hxspi->State;
3418d0d0:	68fb      	ldr	r3, [r7, #12]
3418d0d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418d0d4:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3418d0d6:	697b      	ldr	r3, [r7, #20]
3418d0d8:	2b02      	cmp	r3, #2
3418d0da:	d104      	bne.n	3418d0e6 <HAL_XSPI_Command+0x2e>
3418d0dc:	68fb      	ldr	r3, [r7, #12]
3418d0de:	68db      	ldr	r3, [r3, #12]
3418d0e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418d0e4:	d115      	bne.n	3418d112 <HAL_XSPI_Command+0x5a>
3418d0e6:	697b      	ldr	r3, [r7, #20]
3418d0e8:	2b14      	cmp	r3, #20
3418d0ea:	d107      	bne.n	3418d0fc <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3418d0ec:	68bb      	ldr	r3, [r7, #8]
3418d0ee:	681b      	ldr	r3, [r3, #0]
3418d0f0:	2b02      	cmp	r3, #2
3418d0f2:	d00e      	beq.n	3418d112 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3418d0f4:	68bb      	ldr	r3, [r7, #8]
3418d0f6:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3418d0f8:	2b03      	cmp	r3, #3
3418d0fa:	d00a      	beq.n	3418d112 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3418d0fc:	697b      	ldr	r3, [r7, #20]
3418d0fe:	2b24      	cmp	r3, #36	@ 0x24
3418d100:	d15e      	bne.n	3418d1c0 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3418d102:	68bb      	ldr	r3, [r7, #8]
3418d104:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3418d106:	2b01      	cmp	r3, #1
3418d108:	d003      	beq.n	3418d112 <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
3418d10a:	68bb      	ldr	r3, [r7, #8]
3418d10c:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3418d10e:	2b03      	cmp	r3, #3
3418d110:	d156      	bne.n	3418d1c0 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418d112:	687b      	ldr	r3, [r7, #4]
3418d114:	9300      	str	r3, [sp, #0]
3418d116:	69bb      	ldr	r3, [r7, #24]
3418d118:	2200      	movs	r2, #0
3418d11a:	2120      	movs	r1, #32
3418d11c:	68f8      	ldr	r0, [r7, #12]
3418d11e:	f000 fc29 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418d122:	4603      	mov	r3, r0
3418d124:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
3418d126:	7ffb      	ldrb	r3, [r7, #31]
3418d128:	2b00      	cmp	r3, #0
3418d12a:	d146      	bne.n	3418d1ba <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3418d12c:	68fb      	ldr	r3, [r7, #12]
3418d12e:	2200      	movs	r2, #0
3418d130:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
3418d132:	68b9      	ldr	r1, [r7, #8]
3418d134:	68f8      	ldr	r0, [r7, #12]
3418d136:	f000 fc53 	bl	3418d9e0 <XSPI_ConfigCmd>
3418d13a:	4603      	mov	r3, r0
3418d13c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
3418d13e:	7ffb      	ldrb	r3, [r7, #31]
3418d140:	2b00      	cmp	r3, #0
3418d142:	d143      	bne.n	3418d1cc <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3418d144:	68bb      	ldr	r3, [r7, #8]
3418d146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418d148:	2b00      	cmp	r3, #0
3418d14a:	d10e      	bne.n	3418d16a <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418d14c:	687b      	ldr	r3, [r7, #4]
3418d14e:	9300      	str	r3, [sp, #0]
3418d150:	69bb      	ldr	r3, [r7, #24]
3418d152:	2200      	movs	r2, #0
3418d154:	2120      	movs	r1, #32
3418d156:	68f8      	ldr	r0, [r7, #12]
3418d158:	f000 fc0c 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418d15c:	4603      	mov	r3, r0
3418d15e:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418d160:	68fb      	ldr	r3, [r7, #12]
3418d162:	681b      	ldr	r3, [r3, #0]
3418d164:	2202      	movs	r2, #2
3418d166:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
3418d168:	e030      	b.n	3418d1cc <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418d16a:	68bb      	ldr	r3, [r7, #8]
3418d16c:	681b      	ldr	r3, [r3, #0]
3418d16e:	2b00      	cmp	r3, #0
3418d170:	d103      	bne.n	3418d17a <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418d172:	68fb      	ldr	r3, [r7, #12]
3418d174:	2204      	movs	r2, #4
3418d176:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418d178:	e028      	b.n	3418d1cc <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3418d17a:	68bb      	ldr	r3, [r7, #8]
3418d17c:	681b      	ldr	r3, [r3, #0]
3418d17e:	2b01      	cmp	r3, #1
3418d180:	d10b      	bne.n	3418d19a <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3418d182:	68fb      	ldr	r3, [r7, #12]
3418d184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418d186:	2b24      	cmp	r3, #36	@ 0x24
3418d188:	d103      	bne.n	3418d192 <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418d18a:	68fb      	ldr	r3, [r7, #12]
3418d18c:	2204      	movs	r2, #4
3418d18e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418d190:	e01c      	b.n	3418d1cc <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3418d192:	68fb      	ldr	r3, [r7, #12]
3418d194:	2214      	movs	r2, #20
3418d196:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418d198:	e018      	b.n	3418d1cc <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3418d19a:	68bb      	ldr	r3, [r7, #8]
3418d19c:	681b      	ldr	r3, [r3, #0]
3418d19e:	2b02      	cmp	r3, #2
3418d1a0:	d114      	bne.n	3418d1cc <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3418d1a2:	68fb      	ldr	r3, [r7, #12]
3418d1a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418d1a6:	2b14      	cmp	r3, #20
3418d1a8:	d103      	bne.n	3418d1b2 <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418d1aa:	68fb      	ldr	r3, [r7, #12]
3418d1ac:	2204      	movs	r2, #4
3418d1ae:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418d1b0:	e00c      	b.n	3418d1cc <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3418d1b2:	68fb      	ldr	r3, [r7, #12]
3418d1b4:	2224      	movs	r2, #36	@ 0x24
3418d1b6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418d1b8:	e008      	b.n	3418d1cc <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
3418d1ba:	2302      	movs	r3, #2
3418d1bc:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3418d1be:	e005      	b.n	3418d1cc <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
3418d1c0:	2301      	movs	r3, #1
3418d1c2:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418d1c4:	68fb      	ldr	r3, [r7, #12]
3418d1c6:	2210      	movs	r2, #16
3418d1c8:	65da      	str	r2, [r3, #92]	@ 0x5c
3418d1ca:	e000      	b.n	3418d1ce <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
3418d1cc:	bf00      	nop
  }

  return status;
3418d1ce:	7ffb      	ldrb	r3, [r7, #31]
}
3418d1d0:	4618      	mov	r0, r3
3418d1d2:	3720      	adds	r7, #32
3418d1d4:	46bd      	mov	sp, r7
3418d1d6:	bd80      	pop	{r7, pc}

3418d1d8 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
3418d1d8:	b580      	push	{r7, lr}
3418d1da:	b08a      	sub	sp, #40	@ 0x28
3418d1dc:	af02      	add	r7, sp, #8
3418d1de:	60f8      	str	r0, [r7, #12]
3418d1e0:	60b9      	str	r1, [r7, #8]
3418d1e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418d1e4:	f7f4 fe06 	bl	34181df4 <HAL_GetTick>
3418d1e8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418d1ea:	68fb      	ldr	r3, [r7, #12]
3418d1ec:	681b      	ldr	r3, [r3, #0]
3418d1ee:	3350      	adds	r3, #80	@ 0x50
3418d1f0:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3418d1f2:	68bb      	ldr	r3, [r7, #8]
3418d1f4:	2b00      	cmp	r3, #0
3418d1f6:	d105      	bne.n	3418d204 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
3418d1f8:	2301      	movs	r3, #1
3418d1fa:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418d1fc:	68fb      	ldr	r3, [r7, #12]
3418d1fe:	2208      	movs	r2, #8
3418d200:	65da      	str	r2, [r3, #92]	@ 0x5c
3418d202:	e057      	b.n	3418d2b4 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418d204:	68fb      	ldr	r3, [r7, #12]
3418d206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418d208:	2b04      	cmp	r3, #4
3418d20a:	d14e      	bne.n	3418d2aa <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3418d20c:	68fb      	ldr	r3, [r7, #12]
3418d20e:	681b      	ldr	r3, [r3, #0]
3418d210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418d212:	1c5a      	adds	r2, r3, #1
3418d214:	68fb      	ldr	r3, [r7, #12]
3418d216:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3418d218:	68fb      	ldr	r3, [r7, #12]
3418d21a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418d21c:	68fb      	ldr	r3, [r7, #12]
3418d21e:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = (uint8_t *)pData;
3418d220:	68fb      	ldr	r3, [r7, #12]
3418d222:	68ba      	ldr	r2, [r7, #8]
3418d224:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3418d226:	68fb      	ldr	r3, [r7, #12]
3418d228:	681b      	ldr	r3, [r3, #0]
3418d22a:	681a      	ldr	r2, [r3, #0]
3418d22c:	68fb      	ldr	r3, [r7, #12]
3418d22e:	681b      	ldr	r3, [r3, #0]
3418d230:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418d234:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3418d236:	687b      	ldr	r3, [r7, #4]
3418d238:	9300      	str	r3, [sp, #0]
3418d23a:	69bb      	ldr	r3, [r7, #24]
3418d23c:	2201      	movs	r2, #1
3418d23e:	2104      	movs	r1, #4
3418d240:	68f8      	ldr	r0, [r7, #12]
3418d242:	f000 fb97 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418d246:	4603      	mov	r3, r0
3418d248:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
3418d24a:	7ffb      	ldrb	r3, [r7, #31]
3418d24c:	2b00      	cmp	r3, #0
3418d24e:	d113      	bne.n	3418d278 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3418d250:	68fb      	ldr	r3, [r7, #12]
3418d252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418d254:	781a      	ldrb	r2, [r3, #0]
3418d256:	697b      	ldr	r3, [r7, #20]
3418d258:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418d25a:	68fb      	ldr	r3, [r7, #12]
3418d25c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418d25e:	1c5a      	adds	r2, r3, #1
3418d260:	68fb      	ldr	r3, [r7, #12]
3418d262:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418d264:	68fb      	ldr	r3, [r7, #12]
3418d266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418d268:	1e5a      	subs	r2, r3, #1
3418d26a:	68fb      	ldr	r3, [r7, #12]
3418d26c:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3418d26e:	68fb      	ldr	r3, [r7, #12]
3418d270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418d272:	2b00      	cmp	r3, #0
3418d274:	d1df      	bne.n	3418d236 <HAL_XSPI_Transmit+0x5e>
3418d276:	e000      	b.n	3418d27a <HAL_XSPI_Transmit+0xa2>
          break;
3418d278:	bf00      	nop

      if (status == HAL_OK)
3418d27a:	7ffb      	ldrb	r3, [r7, #31]
3418d27c:	2b00      	cmp	r3, #0
3418d27e:	d119      	bne.n	3418d2b4 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418d280:	687b      	ldr	r3, [r7, #4]
3418d282:	9300      	str	r3, [sp, #0]
3418d284:	69bb      	ldr	r3, [r7, #24]
3418d286:	2201      	movs	r2, #1
3418d288:	2102      	movs	r1, #2
3418d28a:	68f8      	ldr	r0, [r7, #12]
3418d28c:	f000 fb72 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418d290:	4603      	mov	r3, r0
3418d292:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
3418d294:	7ffb      	ldrb	r3, [r7, #31]
3418d296:	2b00      	cmp	r3, #0
3418d298:	d10c      	bne.n	3418d2b4 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418d29a:	68fb      	ldr	r3, [r7, #12]
3418d29c:	681b      	ldr	r3, [r3, #0]
3418d29e:	2202      	movs	r2, #2
3418d2a0:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3418d2a2:	68fb      	ldr	r3, [r7, #12]
3418d2a4:	2202      	movs	r2, #2
3418d2a6:	659a      	str	r2, [r3, #88]	@ 0x58
3418d2a8:	e004      	b.n	3418d2b4 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3418d2aa:	2301      	movs	r3, #1
3418d2ac:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418d2ae:	68fb      	ldr	r3, [r7, #12]
3418d2b0:	2210      	movs	r2, #16
3418d2b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418d2b4:	7ffb      	ldrb	r3, [r7, #31]
}
3418d2b6:	4618      	mov	r0, r3
3418d2b8:	3720      	adds	r7, #32
3418d2ba:	46bd      	mov	sp, r7
3418d2bc:	bd80      	pop	{r7, pc}

3418d2be <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *pData, uint32_t Timeout)
{
3418d2be:	b580      	push	{r7, lr}
3418d2c0:	b08c      	sub	sp, #48	@ 0x30
3418d2c2:	af02      	add	r7, sp, #8
3418d2c4:	60f8      	str	r0, [r7, #12]
3418d2c6:	60b9      	str	r1, [r7, #8]
3418d2c8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418d2ca:	f7f4 fd93 	bl	34181df4 <HAL_GetTick>
3418d2ce:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418d2d0:	68fb      	ldr	r3, [r7, #12]
3418d2d2:	681b      	ldr	r3, [r3, #0]
3418d2d4:	3350      	adds	r3, #80	@ 0x50
3418d2d6:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
3418d2d8:	68fb      	ldr	r3, [r7, #12]
3418d2da:	681b      	ldr	r3, [r3, #0]
3418d2dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418d2de:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
3418d2e0:	68fb      	ldr	r3, [r7, #12]
3418d2e2:	681b      	ldr	r3, [r3, #0]
3418d2e4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418d2e8:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3418d2ea:	68bb      	ldr	r3, [r7, #8]
3418d2ec:	2b00      	cmp	r3, #0
3418d2ee:	d106      	bne.n	3418d2fe <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
3418d2f0:	2301      	movs	r3, #1
3418d2f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418d2f6:	68fb      	ldr	r3, [r7, #12]
3418d2f8:	2208      	movs	r2, #8
3418d2fa:	65da      	str	r2, [r3, #92]	@ 0x5c
3418d2fc:	e07c      	b.n	3418d3f8 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418d2fe:	68fb      	ldr	r3, [r7, #12]
3418d300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418d302:	2b04      	cmp	r3, #4
3418d304:	d172      	bne.n	3418d3ec <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3418d306:	68fb      	ldr	r3, [r7, #12]
3418d308:	681b      	ldr	r3, [r3, #0]
3418d30a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418d30c:	1c5a      	adds	r2, r3, #1
3418d30e:	68fb      	ldr	r3, [r7, #12]
3418d310:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3418d312:	68fb      	ldr	r3, [r7, #12]
3418d314:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418d316:	68fb      	ldr	r3, [r7, #12]
3418d318:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = pData;
3418d31a:	68fb      	ldr	r3, [r7, #12]
3418d31c:	68ba      	ldr	r2, [r7, #8]
3418d31e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3418d320:	68fb      	ldr	r3, [r7, #12]
3418d322:	681b      	ldr	r3, [r3, #0]
3418d324:	681b      	ldr	r3, [r3, #0]
3418d326:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
3418d32a:	68fb      	ldr	r3, [r7, #12]
3418d32c:	681b      	ldr	r3, [r3, #0]
3418d32e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
3418d332:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418d334:	68fb      	ldr	r3, [r7, #12]
3418d336:	68db      	ldr	r3, [r3, #12]
3418d338:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418d33c:	d104      	bne.n	3418d348 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3418d33e:	68fb      	ldr	r3, [r7, #12]
3418d340:	681b      	ldr	r3, [r3, #0]
3418d342:	69ba      	ldr	r2, [r7, #24]
3418d344:	649a      	str	r2, [r3, #72]	@ 0x48
3418d346:	e011      	b.n	3418d36c <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3418d348:	68fb      	ldr	r3, [r7, #12]
3418d34a:	681b      	ldr	r3, [r3, #0]
3418d34c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418d350:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3418d354:	2b00      	cmp	r3, #0
3418d356:	d004      	beq.n	3418d362 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3418d358:	68fb      	ldr	r3, [r7, #12]
3418d35a:	681b      	ldr	r3, [r3, #0]
3418d35c:	69ba      	ldr	r2, [r7, #24]
3418d35e:	649a      	str	r2, [r3, #72]	@ 0x48
3418d360:	e004      	b.n	3418d36c <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3418d362:	68fb      	ldr	r3, [r7, #12]
3418d364:	681b      	ldr	r3, [r3, #0]
3418d366:	697a      	ldr	r2, [r7, #20]
3418d368:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3418d36c:	687b      	ldr	r3, [r7, #4]
3418d36e:	9300      	str	r3, [sp, #0]
3418d370:	6a3b      	ldr	r3, [r7, #32]
3418d372:	2201      	movs	r2, #1
3418d374:	2106      	movs	r1, #6
3418d376:	68f8      	ldr	r0, [r7, #12]
3418d378:	f000 fafc 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418d37c:	4603      	mov	r3, r0
3418d37e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
3418d382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d386:	2b00      	cmp	r3, #0
3418d388:	d114      	bne.n	3418d3b4 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3418d38a:	68fb      	ldr	r3, [r7, #12]
3418d38c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418d38e:	69fa      	ldr	r2, [r7, #28]
3418d390:	7812      	ldrb	r2, [r2, #0]
3418d392:	b2d2      	uxtb	r2, r2
3418d394:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418d396:	68fb      	ldr	r3, [r7, #12]
3418d398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418d39a:	1c5a      	adds	r2, r3, #1
3418d39c:	68fb      	ldr	r3, [r7, #12]
3418d39e:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418d3a0:	68fb      	ldr	r3, [r7, #12]
3418d3a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418d3a4:	1e5a      	subs	r2, r3, #1
3418d3a6:	68fb      	ldr	r3, [r7, #12]
3418d3a8:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3418d3aa:	68fb      	ldr	r3, [r7, #12]
3418d3ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418d3ae:	2b00      	cmp	r3, #0
3418d3b0:	d1dc      	bne.n	3418d36c <HAL_XSPI_Receive+0xae>
3418d3b2:	e000      	b.n	3418d3b6 <HAL_XSPI_Receive+0xf8>
          break;
3418d3b4:	bf00      	nop

      if (status == HAL_OK)
3418d3b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d3ba:	2b00      	cmp	r3, #0
3418d3bc:	d11c      	bne.n	3418d3f8 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418d3be:	687b      	ldr	r3, [r7, #4]
3418d3c0:	9300      	str	r3, [sp, #0]
3418d3c2:	6a3b      	ldr	r3, [r7, #32]
3418d3c4:	2201      	movs	r2, #1
3418d3c6:	2102      	movs	r1, #2
3418d3c8:	68f8      	ldr	r0, [r7, #12]
3418d3ca:	f000 fad3 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418d3ce:	4603      	mov	r3, r0
3418d3d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
3418d3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418d3d8:	2b00      	cmp	r3, #0
3418d3da:	d10d      	bne.n	3418d3f8 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418d3dc:	68fb      	ldr	r3, [r7, #12]
3418d3de:	681b      	ldr	r3, [r3, #0]
3418d3e0:	2202      	movs	r2, #2
3418d3e2:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3418d3e4:	68fb      	ldr	r3, [r7, #12]
3418d3e6:	2202      	movs	r2, #2
3418d3e8:	659a      	str	r2, [r3, #88]	@ 0x58
3418d3ea:	e005      	b.n	3418d3f8 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3418d3ec:	2301      	movs	r3, #1
3418d3ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418d3f2:	68fb      	ldr	r3, [r7, #12]
3418d3f4:	2210      	movs	r2, #16
3418d3f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418d3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418d3fc:	4618      	mov	r0, r3
3418d3fe:	3728      	adds	r7, #40	@ 0x28
3418d400:	46bd      	mov	sp, r7
3418d402:	bd80      	pop	{r7, pc}

3418d404 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, const XSPI_AutoPollingTypeDef *pCfg,
                                       uint32_t Timeout)
{
3418d404:	b580      	push	{r7, lr}
3418d406:	b08a      	sub	sp, #40	@ 0x28
3418d408:	af02      	add	r7, sp, #8
3418d40a:	60f8      	str	r0, [r7, #12]
3418d40c:	60b9      	str	r1, [r7, #8]
3418d40e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418d410:	f7f4 fcf0 	bl	34181df4 <HAL_GetTick>
3418d414:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
3418d416:	68fb      	ldr	r3, [r7, #12]
3418d418:	681b      	ldr	r3, [r3, #0]
3418d41a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418d41c:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
3418d41e:	68fb      	ldr	r3, [r7, #12]
3418d420:	681b      	ldr	r3, [r3, #0]
3418d422:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418d426:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3418d428:	68fb      	ldr	r3, [r7, #12]
3418d42a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418d42c:	2b04      	cmp	r3, #4
3418d42e:	d167      	bne.n	3418d500 <HAL_XSPI_AutoPolling+0xfc>
3418d430:	68bb      	ldr	r3, [r7, #8]
3418d432:	68db      	ldr	r3, [r3, #12]
3418d434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3418d438:	d162      	bne.n	3418d500 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418d43a:	687b      	ldr	r3, [r7, #4]
3418d43c:	9300      	str	r3, [sp, #0]
3418d43e:	69bb      	ldr	r3, [r7, #24]
3418d440:	2200      	movs	r2, #0
3418d442:	2120      	movs	r1, #32
3418d444:	68f8      	ldr	r0, [r7, #12]
3418d446:	f000 fa95 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418d44a:	4603      	mov	r3, r0
3418d44c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
3418d44e:	7ffb      	ldrb	r3, [r7, #31]
3418d450:	2b00      	cmp	r3, #0
3418d452:	d152      	bne.n	3418d4fa <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3418d454:	68fb      	ldr	r3, [r7, #12]
3418d456:	681b      	ldr	r3, [r3, #0]
3418d458:	68ba      	ldr	r2, [r7, #8]
3418d45a:	6812      	ldr	r2, [r2, #0]
3418d45c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3418d460:	68fb      	ldr	r3, [r7, #12]
3418d462:	681b      	ldr	r3, [r3, #0]
3418d464:	68ba      	ldr	r2, [r7, #8]
3418d466:	6852      	ldr	r2, [r2, #4]
3418d468:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3418d46c:	68fb      	ldr	r3, [r7, #12]
3418d46e:	681b      	ldr	r3, [r3, #0]
3418d470:	68ba      	ldr	r2, [r7, #8]
3418d472:	6912      	ldr	r2, [r2, #16]
3418d474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3418d478:	68fb      	ldr	r3, [r7, #12]
3418d47a:	681b      	ldr	r3, [r3, #0]
3418d47c:	681b      	ldr	r3, [r3, #0]
3418d47e:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
3418d482:	68bb      	ldr	r3, [r7, #8]
3418d484:	6899      	ldr	r1, [r3, #8]
3418d486:	68bb      	ldr	r3, [r7, #8]
3418d488:	68db      	ldr	r3, [r3, #12]
3418d48a:	430b      	orrs	r3, r1
3418d48c:	431a      	orrs	r2, r3
3418d48e:	68fb      	ldr	r3, [r7, #12]
3418d490:	681b      	ldr	r3, [r3, #0]
3418d492:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
3418d496:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418d498:	68fb      	ldr	r3, [r7, #12]
3418d49a:	68db      	ldr	r3, [r3, #12]
3418d49c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418d4a0:	d104      	bne.n	3418d4ac <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3418d4a2:	68fb      	ldr	r3, [r7, #12]
3418d4a4:	681b      	ldr	r3, [r3, #0]
3418d4a6:	697a      	ldr	r2, [r7, #20]
3418d4a8:	649a      	str	r2, [r3, #72]	@ 0x48
3418d4aa:	e011      	b.n	3418d4d0 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3418d4ac:	68fb      	ldr	r3, [r7, #12]
3418d4ae:	681b      	ldr	r3, [r3, #0]
3418d4b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418d4b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3418d4b8:	2b00      	cmp	r3, #0
3418d4ba:	d004      	beq.n	3418d4c6 <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3418d4bc:	68fb      	ldr	r3, [r7, #12]
3418d4be:	681b      	ldr	r3, [r3, #0]
3418d4c0:	697a      	ldr	r2, [r7, #20]
3418d4c2:	649a      	str	r2, [r3, #72]	@ 0x48
3418d4c4:	e004      	b.n	3418d4d0 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3418d4c6:	68fb      	ldr	r3, [r7, #12]
3418d4c8:	681b      	ldr	r3, [r3, #0]
3418d4ca:	693a      	ldr	r2, [r7, #16]
3418d4cc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3418d4d0:	687b      	ldr	r3, [r7, #4]
3418d4d2:	9300      	str	r3, [sp, #0]
3418d4d4:	69bb      	ldr	r3, [r7, #24]
3418d4d6:	2201      	movs	r2, #1
3418d4d8:	2108      	movs	r1, #8
3418d4da:	68f8      	ldr	r0, [r7, #12]
3418d4dc:	f000 fa4a 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418d4e0:	4603      	mov	r3, r0
3418d4e2:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
3418d4e4:	7ffb      	ldrb	r3, [r7, #31]
3418d4e6:	2b00      	cmp	r3, #0
3418d4e8:	d110      	bne.n	3418d50c <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3418d4ea:	68fb      	ldr	r3, [r7, #12]
3418d4ec:	681b      	ldr	r3, [r3, #0]
3418d4ee:	2208      	movs	r2, #8
3418d4f0:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
3418d4f2:	68fb      	ldr	r3, [r7, #12]
3418d4f4:	2202      	movs	r2, #2
3418d4f6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418d4f8:	e008      	b.n	3418d50c <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
3418d4fa:	2302      	movs	r3, #2
3418d4fc:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3418d4fe:	e005      	b.n	3418d50c <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
3418d500:	2301      	movs	r3, #1
3418d502:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418d504:	68fb      	ldr	r3, [r7, #12]
3418d506:	2210      	movs	r2, #16
3418d508:	65da      	str	r2, [r3, #92]	@ 0x5c
3418d50a:	e000      	b.n	3418d50e <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
3418d50c:	bf00      	nop
  }

  return status;
3418d50e:	7ffb      	ldrb	r3, [r7, #31]
}
3418d510:	4618      	mov	r0, r3
3418d512:	3720      	adds	r7, #32
3418d514:	46bd      	mov	sp, r7
3418d516:	bd80      	pop	{r7, pc}

3418d518 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, const XSPI_MemoryMappedTypeDef *pCfg)
{
3418d518:	b580      	push	{r7, lr}
3418d51a:	b086      	sub	sp, #24
3418d51c:	af02      	add	r7, sp, #8
3418d51e:	6078      	str	r0, [r7, #4]
3418d520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418d522:	f7f4 fc67 	bl	34181df4 <HAL_GetTick>
3418d526:	60b8      	str	r0, [r7, #8]
  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418d528:	687b      	ldr	r3, [r7, #4]
3418d52a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418d52c:	2b04      	cmp	r3, #4
3418d52e:	d155      	bne.n	3418d5dc <HAL_XSPI_MemoryMapped+0xc4>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418d530:	687b      	ldr	r3, [r7, #4]
3418d532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418d534:	9300      	str	r3, [sp, #0]
3418d536:	68bb      	ldr	r3, [r7, #8]
3418d538:	2200      	movs	r2, #0
3418d53a:	2120      	movs	r1, #32
3418d53c:	6878      	ldr	r0, [r7, #4]
3418d53e:	f000 fa19 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418d542:	4603      	mov	r3, r0
3418d544:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
3418d546:	7bfb      	ldrb	r3, [r7, #15]
3418d548:	2b00      	cmp	r3, #0
3418d54a:	d14c      	bne.n	3418d5e6 <HAL_XSPI_MemoryMapped+0xce>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3418d54c:	687b      	ldr	r3, [r7, #4]
3418d54e:	2288      	movs	r2, #136	@ 0x88
3418d550:	659a      	str	r2, [r3, #88]	@ 0x58

      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3418d552:	683b      	ldr	r3, [r7, #0]
3418d554:	689b      	ldr	r3, [r3, #8]
3418d556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418d55a:	d10b      	bne.n	3418d574 <HAL_XSPI_MemoryMapped+0x5c>
      {
        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3418d55c:	687b      	ldr	r3, [r7, #4]
3418d55e:	681b      	ldr	r3, [r3, #0]
3418d560:	681b      	ldr	r3, [r3, #0]
3418d562:	f023 7100 	bic.w	r1, r3, #33554432	@ 0x2000000
3418d566:	683b      	ldr	r3, [r7, #0]
3418d568:	689a      	ldr	r2, [r3, #8]
3418d56a:	687b      	ldr	r3, [r7, #4]
3418d56c:	681b      	ldr	r3, [r3, #0]
3418d56e:	430a      	orrs	r2, r1
3418d570:	601a      	str	r2, [r3, #0]
3418d572:	e00d      	b.n	3418d590 <HAL_XSPI_MemoryMapped+0x78>
      else
      {
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));

        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3418d574:	687b      	ldr	r3, [r7, #4]
3418d576:	681b      	ldr	r3, [r3, #0]
3418d578:	681b      	ldr	r3, [r3, #0]
3418d57a:	f023 61c0 	bic.w	r1, r3, #100663296	@ 0x6000000
3418d57e:	683b      	ldr	r3, [r7, #0]
3418d580:	689a      	ldr	r2, [r3, #8]
3418d582:	683b      	ldr	r3, [r7, #0]
3418d584:	68db      	ldr	r3, [r3, #12]
3418d586:	431a      	orrs	r2, r3
3418d588:	687b      	ldr	r3, [r7, #4]
3418d58a:	681b      	ldr	r3, [r3, #0]
3418d58c:	430a      	orrs	r2, r1
3418d58e:	601a      	str	r2, [r3, #0]
                   (pCfg->NoPrefetchData | pCfg->NoPrefetchAXI));
      }
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3418d590:	683b      	ldr	r3, [r7, #0]
3418d592:	681b      	ldr	r3, [r3, #0]
3418d594:	2b08      	cmp	r3, #8
3418d596:	d111      	bne.n	3418d5bc <HAL_XSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3418d598:	687b      	ldr	r3, [r7, #4]
3418d59a:	681b      	ldr	r3, [r3, #0]
3418d59c:	683a      	ldr	r2, [r7, #0]
3418d59e:	6852      	ldr	r2, [r2, #4]
3418d5a0:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3418d5a4:	687b      	ldr	r3, [r7, #4]
3418d5a6:	681b      	ldr	r3, [r3, #0]
3418d5a8:	2210      	movs	r2, #16
3418d5aa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3418d5ac:	687b      	ldr	r3, [r7, #4]
3418d5ae:	681b      	ldr	r3, [r3, #0]
3418d5b0:	681a      	ldr	r2, [r3, #0]
3418d5b2:	687b      	ldr	r3, [r7, #4]
3418d5b4:	681b      	ldr	r3, [r3, #0]
3418d5b6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3418d5ba:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3418d5bc:	687b      	ldr	r3, [r7, #4]
3418d5be:	681b      	ldr	r3, [r3, #0]
3418d5c0:	681b      	ldr	r3, [r3, #0]
3418d5c2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3418d5c6:	f023 0308 	bic.w	r3, r3, #8
3418d5ca:	683a      	ldr	r2, [r7, #0]
3418d5cc:	6812      	ldr	r2, [r2, #0]
3418d5ce:	431a      	orrs	r2, r3
3418d5d0:	687b      	ldr	r3, [r7, #4]
3418d5d2:	681b      	ldr	r3, [r3, #0]
3418d5d4:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
3418d5d8:	601a      	str	r2, [r3, #0]
3418d5da:	e004      	b.n	3418d5e6 <HAL_XSPI_MemoryMapped+0xce>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
3418d5dc:	2301      	movs	r3, #1
3418d5de:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418d5e0:	687b      	ldr	r3, [r7, #4]
3418d5e2:	2210      	movs	r2, #16
3418d5e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
3418d5e6:	7bfb      	ldrb	r3, [r7, #15]
}
3418d5e8:	4618      	mov	r0, r3
3418d5ea:	3710      	adds	r7, #16
3418d5ec:	46bd      	mov	sp, r7
3418d5ee:	bd80      	pop	{r7, pc}

3418d5f0 <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
3418d5f0:	b580      	push	{r7, lr}
3418d5f2:	b086      	sub	sp, #24
3418d5f4:	af02      	add	r7, sp, #8
3418d5f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418d5f8:	2300      	movs	r3, #0
3418d5fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3418d5fc:	f7f4 fbfa 	bl	34181df4 <HAL_GetTick>
3418d600:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
3418d602:	687b      	ldr	r3, [r7, #4]
3418d604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418d606:	2b00      	cmp	r3, #0
3418d608:	d06f      	beq.n	3418d6ea <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418d60a:	687b      	ldr	r3, [r7, #4]
3418d60c:	681b      	ldr	r3, [r3, #0]
3418d60e:	681b      	ldr	r3, [r3, #0]
3418d610:	f003 0304 	and.w	r3, r3, #4
3418d614:	2b00      	cmp	r3, #0
3418d616:	d021      	beq.n	3418d65c <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
3418d618:	687b      	ldr	r3, [r7, #4]
3418d61a:	681b      	ldr	r3, [r3, #0]
3418d61c:	681a      	ldr	r2, [r3, #0]
3418d61e:	687b      	ldr	r3, [r7, #4]
3418d620:	681b      	ldr	r3, [r3, #0]
3418d622:	f022 0204 	bic.w	r2, r2, #4
3418d626:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
3418d628:	687b      	ldr	r3, [r7, #4]
3418d62a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418d62c:	4618      	mov	r0, r3
3418d62e:	f7f4 febc 	bl	341823aa <HAL_DMA_Abort>
3418d632:	4603      	mov	r3, r0
3418d634:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
3418d636:	7bfb      	ldrb	r3, [r7, #15]
3418d638:	2b00      	cmp	r3, #0
3418d63a:	d002      	beq.n	3418d642 <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
3418d63c:	687b      	ldr	r3, [r7, #4]
3418d63e:	2204      	movs	r2, #4
3418d640:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
3418d642:	687b      	ldr	r3, [r7, #4]
3418d644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418d646:	4618      	mov	r0, r3
3418d648:	f7f4 feaf 	bl	341823aa <HAL_DMA_Abort>
3418d64c:	4603      	mov	r3, r0
3418d64e:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
3418d650:	7bfb      	ldrb	r3, [r7, #15]
3418d652:	2b00      	cmp	r3, #0
3418d654:	d002      	beq.n	3418d65c <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
3418d656:	687b      	ldr	r3, [r7, #4]
3418d658:	2204      	movs	r2, #4
3418d65a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
3418d65c:	687b      	ldr	r3, [r7, #4]
3418d65e:	681b      	ldr	r3, [r3, #0]
3418d660:	6a1b      	ldr	r3, [r3, #32]
3418d662:	f003 0320 	and.w	r3, r3, #32
3418d666:	2b00      	cmp	r3, #0
3418d668:	d033      	beq.n	3418d6d2 <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
3418d66a:	687b      	ldr	r3, [r7, #4]
3418d66c:	681b      	ldr	r3, [r3, #0]
3418d66e:	681a      	ldr	r2, [r3, #0]
3418d670:	687b      	ldr	r3, [r7, #4]
3418d672:	681b      	ldr	r3, [r3, #0]
3418d674:	f042 0202 	orr.w	r2, r2, #2
3418d678:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
3418d67a:	687b      	ldr	r3, [r7, #4]
3418d67c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418d67e:	9300      	str	r3, [sp, #0]
3418d680:	68bb      	ldr	r3, [r7, #8]
3418d682:	2201      	movs	r2, #1
3418d684:	2102      	movs	r1, #2
3418d686:	6878      	ldr	r0, [r7, #4]
3418d688:	f000 f974 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418d68c:	4603      	mov	r3, r0
3418d68e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
3418d690:	7bfb      	ldrb	r3, [r7, #15]
3418d692:	2b00      	cmp	r3, #0
3418d694:	d12e      	bne.n	3418d6f4 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418d696:	687b      	ldr	r3, [r7, #4]
3418d698:	681b      	ldr	r3, [r3, #0]
3418d69a:	2202      	movs	r2, #2
3418d69c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418d69e:	687b      	ldr	r3, [r7, #4]
3418d6a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418d6a2:	9300      	str	r3, [sp, #0]
3418d6a4:	68bb      	ldr	r3, [r7, #8]
3418d6a6:	2200      	movs	r2, #0
3418d6a8:	2120      	movs	r1, #32
3418d6aa:	6878      	ldr	r0, [r7, #4]
3418d6ac:	f000 f962 	bl	3418d974 <XSPI_WaitFlagStateUntilTimeout>
3418d6b0:	4603      	mov	r3, r0
3418d6b2:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
3418d6b4:	7bfb      	ldrb	r3, [r7, #15]
3418d6b6:	2b00      	cmp	r3, #0
3418d6b8:	d11c      	bne.n	3418d6f4 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
3418d6ba:	687b      	ldr	r3, [r7, #4]
3418d6bc:	681b      	ldr	r3, [r3, #0]
3418d6be:	681a      	ldr	r2, [r3, #0]
3418d6c0:	687b      	ldr	r3, [r7, #4]
3418d6c2:	681b      	ldr	r3, [r3, #0]
3418d6c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418d6c8:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
3418d6ca:	687b      	ldr	r3, [r7, #4]
3418d6cc:	2202      	movs	r2, #2
3418d6ce:	659a      	str	r2, [r3, #88]	@ 0x58
3418d6d0:	e010      	b.n	3418d6f4 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
3418d6d2:	687b      	ldr	r3, [r7, #4]
3418d6d4:	681b      	ldr	r3, [r3, #0]
3418d6d6:	681a      	ldr	r2, [r3, #0]
3418d6d8:	687b      	ldr	r3, [r7, #4]
3418d6da:	681b      	ldr	r3, [r3, #0]
3418d6dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418d6e0:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
3418d6e2:	687b      	ldr	r3, [r7, #4]
3418d6e4:	2202      	movs	r2, #2
3418d6e6:	659a      	str	r2, [r3, #88]	@ 0x58
3418d6e8:	e004      	b.n	3418d6f4 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
3418d6ea:	2301      	movs	r3, #1
3418d6ec:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418d6ee:	687b      	ldr	r3, [r7, #4]
3418d6f0:	2210      	movs	r2, #16
3418d6f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
3418d6f4:	7bfb      	ldrb	r3, [r7, #15]
}
3418d6f6:	4618      	mov	r0, r3
3418d6f8:	3710      	adds	r7, #16
3418d6fa:	46bd      	mov	sp, r7
3418d6fc:	bd80      	pop	{r7, pc}

3418d6fe <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
3418d6fe:	b480      	push	{r7}
3418d700:	b083      	sub	sp, #12
3418d702:	af00      	add	r7, sp, #0
3418d704:	6078      	str	r0, [r7, #4]
3418d706:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
3418d708:	687b      	ldr	r3, [r7, #4]
3418d70a:	683a      	ldr	r2, [r7, #0]
3418d70c:	661a      	str	r2, [r3, #96]	@ 0x60
  return HAL_OK;
3418d70e:	2300      	movs	r3, #0
}
3418d710:	4618      	mov	r0, r3
3418d712:	370c      	adds	r7, #12
3418d714:	46bd      	mov	sp, r7
3418d716:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d71a:	4770      	bx	lr

3418d71c <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *hxspi, const XSPIM_CfgTypeDef *pCfg, uint32_t Timeout)
{
3418d71c:	b580      	push	{r7, lr}
3418d71e:	b08e      	sub	sp, #56	@ 0x38
3418d720:	af00      	add	r7, sp, #0
3418d722:	60f8      	str	r0, [r7, #12]
3418d724:	60b9      	str	r1, [r7, #8]
3418d726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418d728:	2300      	movs	r3, #0
3418d72a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  uint8_t index;
  uint8_t xspi_enabled = 0U;
3418d72e:	2300      	movs	r3, #0
3418d730:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
3418d734:	f107 0310 	add.w	r3, r7, #16
3418d738:	2224      	movs	r2, #36	@ 0x24
3418d73a:	2100      	movs	r1, #0
3418d73c:	4618      	mov	r0, r3
3418d73e:	f003 faeb 	bl	34190d18 <memset>
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
3418d742:	2300      	movs	r3, #0
3418d744:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418d748:	e014      	b.n	3418d774 <HAL_XSPIM_Config+0x58>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
3418d74a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418d74e:	3301      	adds	r3, #1
3418d750:	b2d8      	uxtb	r0, r3
3418d752:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
3418d756:	f107 0110 	add.w	r1, r7, #16
3418d75a:	4613      	mov	r3, r2
3418d75c:	005b      	lsls	r3, r3, #1
3418d75e:	4413      	add	r3, r2
3418d760:	009b      	lsls	r3, r3, #2
3418d762:	440b      	add	r3, r1
3418d764:	4619      	mov	r1, r3
3418d766:	f000 fad9 	bl	3418dd1c <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
3418d76a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418d76e:	3301      	adds	r3, #1
3418d770:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418d774:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418d778:	2b02      	cmp	r3, #2
3418d77a:	d9e6      	bls.n	3418d74a <HAL_XSPIM_Config+0x2e>
  }

  /********** Disable all XSPI to configure XSPI IO Manager **********/
  if (__HAL_RCC_XSPI1_IS_CLK_ENABLED() != 0U)
3418d77c:	2020      	movs	r0, #32
3418d77e:	f7ff fb73 	bl	3418ce68 <LL_AHB5_GRP1_IsEnabledClock>
3418d782:	4603      	mov	r3, r0
3418d784:	2b00      	cmp	r3, #0
3418d786:	d011      	beq.n	3418d7ac <HAL_XSPIM_Config+0x90>
  {
    if ((XSPI1->CR & XSPI_CR_EN) != 0U)
3418d788:	4b76      	ldr	r3, [pc, #472]	@ (3418d964 <HAL_XSPIM_Config+0x248>)
3418d78a:	681b      	ldr	r3, [r3, #0]
3418d78c:	f003 0301 	and.w	r3, r3, #1
3418d790:	2b00      	cmp	r3, #0
3418d792:	d00b      	beq.n	3418d7ac <HAL_XSPIM_Config+0x90>
    {
      CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
3418d794:	4b73      	ldr	r3, [pc, #460]	@ (3418d964 <HAL_XSPIM_Config+0x248>)
3418d796:	681b      	ldr	r3, [r3, #0]
3418d798:	4a72      	ldr	r2, [pc, #456]	@ (3418d964 <HAL_XSPIM_Config+0x248>)
3418d79a:	f023 0301 	bic.w	r3, r3, #1
3418d79e:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x1U;
3418d7a0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418d7a4:	f043 0301 	orr.w	r3, r3, #1
3418d7a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI2_IS_CLK_ENABLED() != 0U)
3418d7ac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
3418d7b0:	f7ff fb5a 	bl	3418ce68 <LL_AHB5_GRP1_IsEnabledClock>
3418d7b4:	4603      	mov	r3, r0
3418d7b6:	2b00      	cmp	r3, #0
3418d7b8:	d011      	beq.n	3418d7de <HAL_XSPIM_Config+0xc2>
  {
    if ((XSPI2->CR & XSPI_CR_EN) != 0U)
3418d7ba:	4b6b      	ldr	r3, [pc, #428]	@ (3418d968 <HAL_XSPIM_Config+0x24c>)
3418d7bc:	681b      	ldr	r3, [r3, #0]
3418d7be:	f003 0301 	and.w	r3, r3, #1
3418d7c2:	2b00      	cmp	r3, #0
3418d7c4:	d00b      	beq.n	3418d7de <HAL_XSPIM_Config+0xc2>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
3418d7c6:	4b68      	ldr	r3, [pc, #416]	@ (3418d968 <HAL_XSPIM_Config+0x24c>)
3418d7c8:	681b      	ldr	r3, [r3, #0]
3418d7ca:	4a67      	ldr	r2, [pc, #412]	@ (3418d968 <HAL_XSPIM_Config+0x24c>)
3418d7cc:	f023 0301 	bic.w	r3, r3, #1
3418d7d0:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x2U;
3418d7d2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418d7d6:	f043 0302 	orr.w	r3, r3, #2
3418d7da:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI3_IS_CLK_ENABLED() != 0U)
3418d7de:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
3418d7e2:	f7ff fb41 	bl	3418ce68 <LL_AHB5_GRP1_IsEnabledClock>
3418d7e6:	4603      	mov	r3, r0
3418d7e8:	2b00      	cmp	r3, #0
3418d7ea:	d011      	beq.n	3418d810 <HAL_XSPIM_Config+0xf4>
  {
    if ((XSPI3->CR & XSPI_CR_EN) != 0U)
3418d7ec:	4b5f      	ldr	r3, [pc, #380]	@ (3418d96c <HAL_XSPIM_Config+0x250>)
3418d7ee:	681b      	ldr	r3, [r3, #0]
3418d7f0:	f003 0301 	and.w	r3, r3, #1
3418d7f4:	2b00      	cmp	r3, #0
3418d7f6:	d00b      	beq.n	3418d810 <HAL_XSPIM_Config+0xf4>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
3418d7f8:	4b5b      	ldr	r3, [pc, #364]	@ (3418d968 <HAL_XSPIM_Config+0x24c>)
3418d7fa:	681b      	ldr	r3, [r3, #0]
3418d7fc:	4a5a      	ldr	r2, [pc, #360]	@ (3418d968 <HAL_XSPIM_Config+0x24c>)
3418d7fe:	f023 0301 	bic.w	r3, r3, #1
3418d802:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x4U;
3418d804:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418d808:	f043 0304 	orr.w	r3, r3, #4
3418d80c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
3418d810:	4b57      	ldr	r3, [pc, #348]	@ (3418d970 <HAL_XSPIM_Config+0x254>)
3418d812:	2200      	movs	r2, #0
3418d814:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
3418d816:	4b56      	ldr	r3, [pc, #344]	@ (3418d970 <HAL_XSPIM_Config+0x254>)
3418d818:	681b      	ldr	r3, [r3, #0]
3418d81a:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
3418d81e:	68bb      	ldr	r3, [r7, #8]
3418d820:	689b      	ldr	r3, [r3, #8]
3418d822:	3b01      	subs	r3, #1
3418d824:	041b      	lsls	r3, r3, #16
3418d826:	4952      	ldr	r1, [pc, #328]	@ (3418d970 <HAL_XSPIM_Config+0x254>)
3418d828:	4313      	orrs	r3, r2
3418d82a:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
3418d82c:	68fb      	ldr	r3, [r7, #12]
3418d82e:	681b      	ldr	r3, [r3, #0]
3418d830:	4a4c      	ldr	r2, [pc, #304]	@ (3418d964 <HAL_XSPIM_Config+0x248>)
3418d832:	4293      	cmp	r3, r2
3418d834:	d110      	bne.n	3418d858 <HAL_XSPIM_Config+0x13c>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
3418d836:	68bb      	ldr	r3, [r7, #8]
3418d838:	685b      	ldr	r3, [r3, #4]
3418d83a:	617b      	str	r3, [r7, #20]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
3418d83c:	68bb      	ldr	r3, [r7, #8]
3418d83e:	681b      	ldr	r3, [r3, #0]
3418d840:	2b00      	cmp	r3, #0
3418d842:	d03e      	beq.n	3418d8c2 <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
3418d844:	4b4a      	ldr	r3, [pc, #296]	@ (3418d970 <HAL_XSPIM_Config+0x254>)
3418d846:	681b      	ldr	r3, [r3, #0]
3418d848:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3418d84c:	68bb      	ldr	r3, [r7, #8]
3418d84e:	681b      	ldr	r3, [r3, #0]
3418d850:	4947      	ldr	r1, [pc, #284]	@ (3418d970 <HAL_XSPIM_Config+0x254>)
3418d852:	4313      	orrs	r3, r2
3418d854:	600b      	str	r3, [r1, #0]
3418d856:	e034      	b.n	3418d8c2 <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
3418d858:	68fb      	ldr	r3, [r7, #12]
3418d85a:	681b      	ldr	r3, [r3, #0]
3418d85c:	4a42      	ldr	r2, [pc, #264]	@ (3418d968 <HAL_XSPIM_Config+0x24c>)
3418d85e:	4293      	cmp	r3, r2
3418d860:	d110      	bne.n	3418d884 <HAL_XSPIM_Config+0x168>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
3418d862:	68bb      	ldr	r3, [r7, #8]
3418d864:	685b      	ldr	r3, [r3, #4]
3418d866:	623b      	str	r3, [r7, #32]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
3418d868:	68bb      	ldr	r3, [r7, #8]
3418d86a:	681b      	ldr	r3, [r3, #0]
3418d86c:	2b00      	cmp	r3, #0
3418d86e:	d028      	beq.n	3418d8c2 <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
3418d870:	4b3f      	ldr	r3, [pc, #252]	@ (3418d970 <HAL_XSPIM_Config+0x254>)
3418d872:	681b      	ldr	r3, [r3, #0]
3418d874:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
3418d878:	68bb      	ldr	r3, [r7, #8]
3418d87a:	681b      	ldr	r3, [r3, #0]
3418d87c:	493c      	ldr	r1, [pc, #240]	@ (3418d970 <HAL_XSPIM_Config+0x254>)
3418d87e:	4313      	orrs	r3, r2
3418d880:	600b      	str	r3, [r1, #0]
3418d882:	e01e      	b.n	3418d8c2 <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI3)
3418d884:	68fb      	ldr	r3, [r7, #12]
3418d886:	681b      	ldr	r3, [r3, #0]
3418d888:	4a38      	ldr	r2, [pc, #224]	@ (3418d96c <HAL_XSPIM_Config+0x250>)
3418d88a:	4293      	cmp	r3, r2
3418d88c:	d111      	bne.n	3418d8b2 <HAL_XSPIM_Config+0x196>
  {
    if (pCfg->IOPort == HAL_XSPIM_IOPORT_1)
3418d88e:	68bb      	ldr	r3, [r7, #8]
3418d890:	685b      	ldr	r3, [r3, #4]
3418d892:	2b00      	cmp	r3, #0
3418d894:	d104      	bne.n	3418d8a0 <HAL_XSPIM_Config+0x184>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_2 ;
3418d896:	2301      	movs	r3, #1
3418d898:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_2 ;
3418d89a:	2301      	movs	r3, #1
3418d89c:	623b      	str	r3, [r7, #32]
3418d89e:	e010      	b.n	3418d8c2 <HAL_XSPIM_Config+0x1a6>
    }
    else if (pCfg->IOPort == HAL_XSPIM_IOPORT_2)
3418d8a0:	68bb      	ldr	r3, [r7, #8]
3418d8a2:	685b      	ldr	r3, [r3, #4]
3418d8a4:	2b01      	cmp	r3, #1
3418d8a6:	d10c      	bne.n	3418d8c2 <HAL_XSPIM_Config+0x1a6>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_1 ;
3418d8a8:	2300      	movs	r3, #0
3418d8aa:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_1 ;
3418d8ac:	2300      	movs	r3, #0
3418d8ae:	623b      	str	r3, [r7, #32]
3418d8b0:	e007      	b.n	3418d8c2 <HAL_XSPIM_Config+0x1a6>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
3418d8b2:	68fb      	ldr	r3, [r7, #12]
3418d8b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418d8b6:	f043 0208 	orr.w	r2, r3, #8
3418d8ba:	68fb      	ldr	r3, [r7, #12]
3418d8bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
3418d8be:	2301      	movs	r3, #1
3418d8c0:	e04c      	b.n	3418d95c <HAL_XSPIM_Config+0x240>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
3418d8c2:	2300      	movs	r3, #0
3418d8c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418d8c8:	e02a      	b.n	3418d920 <HAL_XSPIM_Config+0x204>
  {
    if (IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort)
3418d8ca:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
3418d8ce:	4613      	mov	r3, r2
3418d8d0:	005b      	lsls	r3, r3, #1
3418d8d2:	4413      	add	r3, r2
3418d8d4:	009b      	lsls	r3, r3, #2
3418d8d6:	3338      	adds	r3, #56	@ 0x38
3418d8d8:	443b      	add	r3, r7
3418d8da:	3b24      	subs	r3, #36	@ 0x24
3418d8dc:	6819      	ldr	r1, [r3, #0]
3418d8de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418d8e2:	1c5a      	adds	r2, r3, #1
3418d8e4:	4613      	mov	r3, r2
3418d8e6:	005b      	lsls	r3, r3, #1
3418d8e8:	4413      	add	r3, r2
3418d8ea:	009b      	lsls	r3, r3, #2
3418d8ec:	3338      	adds	r3, #56	@ 0x38
3418d8ee:	443b      	add	r3, r7
3418d8f0:	3b24      	subs	r3, #36	@ 0x24
3418d8f2:	681b      	ldr	r3, [r3, #0]
3418d8f4:	4299      	cmp	r1, r3
3418d8f6:	d105      	bne.n	3418d904 <HAL_XSPIM_Config+0x1e8>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
3418d8f8:	4b1d      	ldr	r3, [pc, #116]	@ (3418d970 <HAL_XSPIM_Config+0x254>)
3418d8fa:	681b      	ldr	r3, [r3, #0]
3418d8fc:	4a1c      	ldr	r2, [pc, #112]	@ (3418d970 <HAL_XSPIM_Config+0x254>)
3418d8fe:	f043 0301 	orr.w	r3, r3, #1
3418d902:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
3418d904:	697b      	ldr	r3, [r7, #20]
3418d906:	2b01      	cmp	r3, #1
3418d908:	d105      	bne.n	3418d916 <HAL_XSPIM_Config+0x1fa>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
3418d90a:	4b19      	ldr	r3, [pc, #100]	@ (3418d970 <HAL_XSPIM_Config+0x254>)
3418d90c:	681b      	ldr	r3, [r3, #0]
3418d90e:	4a18      	ldr	r2, [pc, #96]	@ (3418d970 <HAL_XSPIM_Config+0x254>)
3418d910:	f043 0302 	orr.w	r3, r3, #2
3418d914:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
3418d916:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418d91a:	3301      	adds	r3, #1
3418d91c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418d920:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418d924:	2b00      	cmp	r3, #0
3418d926:	d0d0      	beq.n	3418d8ca <HAL_XSPIM_Config+0x1ae>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
3418d928:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418d92c:	f003 0301 	and.w	r3, r3, #1
3418d930:	2b00      	cmp	r3, #0
3418d932:	d005      	beq.n	3418d940 <HAL_XSPIM_Config+0x224>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
3418d934:	4b0b      	ldr	r3, [pc, #44]	@ (3418d964 <HAL_XSPIM_Config+0x248>)
3418d936:	681b      	ldr	r3, [r3, #0]
3418d938:	4a0a      	ldr	r2, [pc, #40]	@ (3418d964 <HAL_XSPIM_Config+0x248>)
3418d93a:	f043 0301 	orr.w	r3, r3, #1
3418d93e:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
3418d940:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418d944:	f003 0302 	and.w	r3, r3, #2
3418d948:	2b00      	cmp	r3, #0
3418d94a:	d005      	beq.n	3418d958 <HAL_XSPIM_Config+0x23c>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
3418d94c:	4b06      	ldr	r3, [pc, #24]	@ (3418d968 <HAL_XSPIM_Config+0x24c>)
3418d94e:	681b      	ldr	r3, [r3, #0]
3418d950:	4a05      	ldr	r2, [pc, #20]	@ (3418d968 <HAL_XSPIM_Config+0x24c>)
3418d952:	f043 0301 	orr.w	r3, r3, #1
3418d956:	6013      	str	r3, [r2, #0]
  }

  return status;
3418d958:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
3418d95c:	4618      	mov	r0, r3
3418d95e:	3738      	adds	r7, #56	@ 0x38
3418d960:	46bd      	mov	sp, r7
3418d962:	bd80      	pop	{r7, pc}
3418d964:	58025000 	.word	0x58025000
3418d968:	5802a000 	.word	0x5802a000
3418d96c:	5802d000 	.word	0x5802d000
3418d970:	5802b400 	.word	0x5802b400

3418d974 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
3418d974:	b580      	push	{r7, lr}
3418d976:	b084      	sub	sp, #16
3418d978:	af00      	add	r7, sp, #0
3418d97a:	60f8      	str	r0, [r7, #12]
3418d97c:	60b9      	str	r1, [r7, #8]
3418d97e:	603b      	str	r3, [r7, #0]
3418d980:	4613      	mov	r3, r2
3418d982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3418d984:	e019      	b.n	3418d9ba <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3418d986:	69bb      	ldr	r3, [r7, #24]
3418d988:	f1b3 3fff 	cmp.w	r3, #4294967295
3418d98c:	d015      	beq.n	3418d9ba <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418d98e:	f7f4 fa31 	bl	34181df4 <HAL_GetTick>
3418d992:	4602      	mov	r2, r0
3418d994:	683b      	ldr	r3, [r7, #0]
3418d996:	1ad3      	subs	r3, r2, r3
3418d998:	69ba      	ldr	r2, [r7, #24]
3418d99a:	429a      	cmp	r2, r3
3418d99c:	d302      	bcc.n	3418d9a4 <XSPI_WaitFlagStateUntilTimeout+0x30>
3418d99e:	69bb      	ldr	r3, [r7, #24]
3418d9a0:	2b00      	cmp	r3, #0
3418d9a2:	d10a      	bne.n	3418d9ba <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
3418d9a4:	68fb      	ldr	r3, [r7, #12]
3418d9a6:	2202      	movs	r2, #2
3418d9a8:	659a      	str	r2, [r3, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3418d9aa:	68fb      	ldr	r3, [r7, #12]
3418d9ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418d9ae:	f043 0201 	orr.w	r2, r3, #1
3418d9b2:	68fb      	ldr	r3, [r7, #12]
3418d9b4:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
3418d9b6:	2303      	movs	r3, #3
3418d9b8:	e00e      	b.n	3418d9d8 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3418d9ba:	68fb      	ldr	r3, [r7, #12]
3418d9bc:	681b      	ldr	r3, [r3, #0]
3418d9be:	6a1a      	ldr	r2, [r3, #32]
3418d9c0:	68bb      	ldr	r3, [r7, #8]
3418d9c2:	4013      	ands	r3, r2
3418d9c4:	2b00      	cmp	r3, #0
3418d9c6:	bf14      	ite	ne
3418d9c8:	2301      	movne	r3, #1
3418d9ca:	2300      	moveq	r3, #0
3418d9cc:	b2db      	uxtb	r3, r3
3418d9ce:	461a      	mov	r2, r3
3418d9d0:	79fb      	ldrb	r3, [r7, #7]
3418d9d2:	429a      	cmp	r2, r3
3418d9d4:	d1d7      	bne.n	3418d986 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
3418d9d6:	2300      	movs	r3, #0
}
3418d9d8:	4618      	mov	r0, r3
3418d9da:	3710      	adds	r7, #16
3418d9dc:	46bd      	mov	sp, r7
3418d9de:	bd80      	pop	{r7, pc}

3418d9e0 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd)
{
3418d9e0:	b480      	push	{r7}
3418d9e2:	b089      	sub	sp, #36	@ 0x24
3418d9e4:	af00      	add	r7, sp, #0
3418d9e6:	6078      	str	r0, [r7, #4]
3418d9e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
3418d9ea:	2300      	movs	r3, #0
3418d9ec:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3418d9ee:	687b      	ldr	r3, [r7, #4]
3418d9f0:	681b      	ldr	r3, [r3, #0]
3418d9f2:	681a      	ldr	r2, [r3, #0]
3418d9f4:	687b      	ldr	r3, [r7, #4]
3418d9f6:	681b      	ldr	r3, [r3, #0]
3418d9f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418d9fc:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3418d9fe:	687b      	ldr	r3, [r7, #4]
3418da00:	689b      	ldr	r3, [r3, #8]
3418da02:	2b00      	cmp	r3, #0
3418da04:	d10a      	bne.n	3418da1c <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3418da06:	687b      	ldr	r3, [r7, #4]
3418da08:	681b      	ldr	r3, [r3, #0]
3418da0a:	681b      	ldr	r3, [r3, #0]
3418da0c:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
3418da10:	683b      	ldr	r3, [r7, #0]
3418da12:	685a      	ldr	r2, [r3, #4]
3418da14:	687b      	ldr	r3, [r7, #4]
3418da16:	681b      	ldr	r3, [r3, #0]
3418da18:	430a      	orrs	r2, r1
3418da1a:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3418da1c:	683b      	ldr	r3, [r7, #0]
3418da1e:	681b      	ldr	r3, [r3, #0]
3418da20:	2b02      	cmp	r3, #2
3418da22:	d114      	bne.n	3418da4e <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3418da24:	687b      	ldr	r3, [r7, #4]
3418da26:	681b      	ldr	r3, [r3, #0]
3418da28:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
3418da2c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
3418da2e:	687b      	ldr	r3, [r7, #4]
3418da30:	681b      	ldr	r3, [r3, #0]
3418da32:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
3418da36:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
3418da38:	687b      	ldr	r3, [r7, #4]
3418da3a:	681b      	ldr	r3, [r3, #0]
3418da3c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
3418da40:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
3418da42:	687b      	ldr	r3, [r7, #4]
3418da44:	681b      	ldr	r3, [r3, #0]
3418da46:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
3418da4a:	60fb      	str	r3, [r7, #12]
3418da4c:	e02c      	b.n	3418daa8 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3418da4e:	683b      	ldr	r3, [r7, #0]
3418da50:	681b      	ldr	r3, [r3, #0]
3418da52:	2b03      	cmp	r3, #3
3418da54:	d114      	bne.n	3418da80 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
3418da56:	687b      	ldr	r3, [r7, #4]
3418da58:	681b      	ldr	r3, [r3, #0]
3418da5a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
3418da5e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
3418da60:	687b      	ldr	r3, [r7, #4]
3418da62:	681b      	ldr	r3, [r3, #0]
3418da64:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
3418da68:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
3418da6a:	687b      	ldr	r3, [r7, #4]
3418da6c:	681b      	ldr	r3, [r3, #0]
3418da6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
3418da72:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
3418da74:	687b      	ldr	r3, [r7, #4]
3418da76:	681b      	ldr	r3, [r3, #0]
3418da78:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
3418da7c:	60fb      	str	r3, [r7, #12]
3418da7e:	e013      	b.n	3418daa8 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
3418da80:	687b      	ldr	r3, [r7, #4]
3418da82:	681b      	ldr	r3, [r3, #0]
3418da84:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418da88:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
3418da8a:	687b      	ldr	r3, [r7, #4]
3418da8c:	681b      	ldr	r3, [r3, #0]
3418da8e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
3418da92:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
3418da94:	687b      	ldr	r3, [r7, #4]
3418da96:	681b      	ldr	r3, [r3, #0]
3418da98:	f503 7388 	add.w	r3, r3, #272	@ 0x110
3418da9c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
3418da9e:	687b      	ldr	r3, [r7, #4]
3418daa0:	681b      	ldr	r3, [r3, #0]
3418daa2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
3418daa6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3418daa8:	683b      	ldr	r3, [r7, #0]
3418daaa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418daac:	69bb      	ldr	r3, [r7, #24]
3418daae:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3418dab0:	683b      	ldr	r3, [r7, #0]
3418dab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418dab4:	2b00      	cmp	r3, #0
3418dab6:	d012      	beq.n	3418dade <XSPI_ConfigCmd+0xfe>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3418dab8:	683b      	ldr	r3, [r7, #0]
3418daba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418dabc:	68fb      	ldr	r3, [r7, #12]
3418dabe:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3418dac0:	69bb      	ldr	r3, [r7, #24]
3418dac2:	681b      	ldr	r3, [r3, #0]
3418dac4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
3418dac8:	683b      	ldr	r3, [r7, #0]
3418daca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3418dacc:	683b      	ldr	r3, [r7, #0]
3418dace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418dad0:	4319      	orrs	r1, r3
3418dad2:	683b      	ldr	r3, [r7, #0]
3418dad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418dad6:	430b      	orrs	r3, r1
3418dad8:	431a      	orrs	r2, r3
3418dada:	69bb      	ldr	r3, [r7, #24]
3418dadc:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3418dade:	697b      	ldr	r3, [r7, #20]
3418dae0:	681b      	ldr	r3, [r3, #0]
3418dae2:	f023 021f 	bic.w	r2, r3, #31
3418dae6:	683b      	ldr	r3, [r7, #0]
3418dae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418daea:	431a      	orrs	r2, r3
3418daec:	697b      	ldr	r3, [r7, #20]
3418daee:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418daf0:	683b      	ldr	r3, [r7, #0]
3418daf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418daf4:	2b00      	cmp	r3, #0
3418daf6:	d009      	beq.n	3418db0c <XSPI_ConfigCmd+0x12c>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418daf8:	683b      	ldr	r3, [r7, #0]
3418dafa:	681b      	ldr	r3, [r3, #0]
3418dafc:	2b00      	cmp	r3, #0
3418dafe:	d105      	bne.n	3418db0c <XSPI_ConfigCmd+0x12c>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3418db00:	683b      	ldr	r3, [r7, #0]
3418db02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3418db04:	687b      	ldr	r3, [r7, #4]
3418db06:	681b      	ldr	r3, [r3, #0]
3418db08:	3a01      	subs	r2, #1
3418db0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418db0c:	683b      	ldr	r3, [r7, #0]
3418db0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418db10:	2b00      	cmp	r3, #0
3418db12:	d01e      	beq.n	3418db52 <XSPI_ConfigCmd+0x172>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3418db14:	683b      	ldr	r3, [r7, #0]
3418db16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418db18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418db1c:	d10a      	bne.n	3418db34 <XSPI_ConfigCmd+0x154>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3418db1e:	687b      	ldr	r3, [r7, #4]
3418db20:	681b      	ldr	r3, [r3, #0]
3418db22:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418db26:	687b      	ldr	r3, [r7, #4]
3418db28:	681b      	ldr	r3, [r3, #0]
3418db2a:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
3418db2e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
3418db32:	e00e      	b.n	3418db52 <XSPI_ConfigCmd+0x172>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3418db34:	687b      	ldr	r3, [r7, #4]
3418db36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418db38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418db3c:	d109      	bne.n	3418db52 <XSPI_ConfigCmd+0x172>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3418db3e:	687b      	ldr	r3, [r7, #4]
3418db40:	681b      	ldr	r3, [r3, #0]
3418db42:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418db46:	687b      	ldr	r3, [r7, #4]
3418db48:	681b      	ldr	r3, [r3, #0]
3418db4a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3418db4e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3418db52:	683b      	ldr	r3, [r7, #0]
3418db54:	68db      	ldr	r3, [r3, #12]
3418db56:	2b00      	cmp	r3, #0
3418db58:	f000 808f 	beq.w	3418dc7a <XSPI_ConfigCmd+0x29a>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3418db5c:	683b      	ldr	r3, [r7, #0]
3418db5e:	69db      	ldr	r3, [r3, #28]
3418db60:	2b00      	cmp	r3, #0
3418db62:	d050      	beq.n	3418dc06 <XSPI_ConfigCmd+0x226>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418db64:	683b      	ldr	r3, [r7, #0]
3418db66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418db68:	2b00      	cmp	r3, #0
3418db6a:	d01e      	beq.n	3418dbaa <XSPI_ConfigCmd+0x1ca>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3418db6c:	69bb      	ldr	r3, [r7, #24]
3418db6e:	681a      	ldr	r2, [r3, #0]
3418db70:	4b69      	ldr	r3, [pc, #420]	@ (3418dd18 <XSPI_ConfigCmd+0x338>)
3418db72:	4013      	ands	r3, r2
3418db74:	683a      	ldr	r2, [r7, #0]
3418db76:	68d1      	ldr	r1, [r2, #12]
3418db78:	683a      	ldr	r2, [r7, #0]
3418db7a:	6952      	ldr	r2, [r2, #20]
3418db7c:	4311      	orrs	r1, r2
3418db7e:	683a      	ldr	r2, [r7, #0]
3418db80:	6912      	ldr	r2, [r2, #16]
3418db82:	4311      	orrs	r1, r2
3418db84:	683a      	ldr	r2, [r7, #0]
3418db86:	69d2      	ldr	r2, [r2, #28]
3418db88:	4311      	orrs	r1, r2
3418db8a:	683a      	ldr	r2, [r7, #0]
3418db8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418db8e:	4311      	orrs	r1, r2
3418db90:	683a      	ldr	r2, [r7, #0]
3418db92:	6a12      	ldr	r2, [r2, #32]
3418db94:	4311      	orrs	r1, r2
3418db96:	683a      	ldr	r2, [r7, #0]
3418db98:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418db9a:	4311      	orrs	r1, r2
3418db9c:	683a      	ldr	r2, [r7, #0]
3418db9e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418dba0:	430a      	orrs	r2, r1
3418dba2:	431a      	orrs	r2, r3
3418dba4:	69bb      	ldr	r3, [r7, #24]
3418dba6:	601a      	str	r2, [r3, #0]
3418dba8:	e023      	b.n	3418dbf2 <XSPI_ConfigCmd+0x212>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3418dbaa:	69bb      	ldr	r3, [r7, #24]
3418dbac:	681b      	ldr	r3, [r3, #0]
3418dbae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3418dbb2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3418dbb6:	683a      	ldr	r2, [r7, #0]
3418dbb8:	68d1      	ldr	r1, [r2, #12]
3418dbba:	683a      	ldr	r2, [r7, #0]
3418dbbc:	6952      	ldr	r2, [r2, #20]
3418dbbe:	4311      	orrs	r1, r2
3418dbc0:	683a      	ldr	r2, [r7, #0]
3418dbc2:	6912      	ldr	r2, [r2, #16]
3418dbc4:	4311      	orrs	r1, r2
3418dbc6:	683a      	ldr	r2, [r7, #0]
3418dbc8:	69d2      	ldr	r2, [r2, #28]
3418dbca:	4311      	orrs	r1, r2
3418dbcc:	683a      	ldr	r2, [r7, #0]
3418dbce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418dbd0:	4311      	orrs	r1, r2
3418dbd2:	683a      	ldr	r2, [r7, #0]
3418dbd4:	6a12      	ldr	r2, [r2, #32]
3418dbd6:	430a      	orrs	r2, r1
3418dbd8:	431a      	orrs	r2, r3
3418dbda:	69bb      	ldr	r3, [r7, #24]
3418dbdc:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* DDTR bit should be activated */
        if (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE)
3418dbde:	683b      	ldr	r3, [r7, #0]
3418dbe0:	695b      	ldr	r3, [r3, #20]
3418dbe2:	2b08      	cmp	r3, #8
3418dbe4:	d105      	bne.n	3418dbf2 <XSPI_ConfigCmd+0x212>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3418dbe6:	69bb      	ldr	r3, [r7, #24]
3418dbe8:	681b      	ldr	r3, [r3, #0]
3418dbea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418dbee:	69bb      	ldr	r3, [r7, #24]
3418dbf0:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3418dbf2:	683b      	ldr	r3, [r7, #0]
3418dbf4:	689a      	ldr	r2, [r3, #8]
3418dbf6:	693b      	ldr	r3, [r7, #16]
3418dbf8:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
3418dbfa:	687b      	ldr	r3, [r7, #4]
3418dbfc:	681b      	ldr	r3, [r3, #0]
3418dbfe:	683a      	ldr	r2, [r7, #0]
3418dc00:	6992      	ldr	r2, [r2, #24]
3418dc02:	649a      	str	r2, [r3, #72]	@ 0x48
3418dc04:	e073      	b.n	3418dcee <XSPI_ConfigCmd+0x30e>
        assert_param(IS_XSPI_PROG_ADDR(hxspi->Instance->AR, pCmd->Address));
      }
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418dc06:	683b      	ldr	r3, [r7, #0]
3418dc08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418dc0a:	2b00      	cmp	r3, #0
3418dc0c:	d017      	beq.n	3418dc3e <XSPI_ConfigCmd+0x25e>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3418dc0e:	69bb      	ldr	r3, [r7, #24]
3418dc10:	681b      	ldr	r3, [r3, #0]
3418dc12:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
3418dc16:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3418dc1a:	683a      	ldr	r2, [r7, #0]
3418dc1c:	68d1      	ldr	r1, [r2, #12]
3418dc1e:	683a      	ldr	r2, [r7, #0]
3418dc20:	6952      	ldr	r2, [r2, #20]
3418dc22:	4311      	orrs	r1, r2
3418dc24:	683a      	ldr	r2, [r7, #0]
3418dc26:	6912      	ldr	r2, [r2, #16]
3418dc28:	4311      	orrs	r1, r2
3418dc2a:	683a      	ldr	r2, [r7, #0]
3418dc2c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418dc2e:	4311      	orrs	r1, r2
3418dc30:	683a      	ldr	r2, [r7, #0]
3418dc32:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418dc34:	430a      	orrs	r2, r1
3418dc36:	431a      	orrs	r2, r3
3418dc38:	69bb      	ldr	r3, [r7, #24]
3418dc3a:	601a      	str	r2, [r3, #0]
3418dc3c:	e018      	b.n	3418dc70 <XSPI_ConfigCmd+0x290>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3418dc3e:	69bb      	ldr	r3, [r7, #24]
3418dc40:	681b      	ldr	r3, [r3, #0]
3418dc42:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
3418dc46:	683b      	ldr	r3, [r7, #0]
3418dc48:	68d9      	ldr	r1, [r3, #12]
3418dc4a:	683b      	ldr	r3, [r7, #0]
3418dc4c:	695b      	ldr	r3, [r3, #20]
3418dc4e:	4319      	orrs	r1, r3
3418dc50:	683b      	ldr	r3, [r7, #0]
3418dc52:	691b      	ldr	r3, [r3, #16]
3418dc54:	430b      	orrs	r3, r1
3418dc56:	431a      	orrs	r2, r3
3418dc58:	69bb      	ldr	r3, [r7, #24]
3418dc5a:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* DDTR bit should be activated */
        if (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE)
3418dc5c:	683b      	ldr	r3, [r7, #0]
3418dc5e:	695b      	ldr	r3, [r3, #20]
3418dc60:	2b08      	cmp	r3, #8
3418dc62:	d105      	bne.n	3418dc70 <XSPI_ConfigCmd+0x290>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3418dc64:	69bb      	ldr	r3, [r7, #24]
3418dc66:	681b      	ldr	r3, [r3, #0]
3418dc68:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418dc6c:	69bb      	ldr	r3, [r7, #24]
3418dc6e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3418dc70:	683b      	ldr	r3, [r7, #0]
3418dc72:	689a      	ldr	r2, [r3, #8]
3418dc74:	693b      	ldr	r3, [r7, #16]
3418dc76:	601a      	str	r2, [r3, #0]
3418dc78:	e039      	b.n	3418dcee <XSPI_ConfigCmd+0x30e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3418dc7a:	683b      	ldr	r3, [r7, #0]
3418dc7c:	69db      	ldr	r3, [r3, #28]
3418dc7e:	2b00      	cmp	r3, #0
3418dc80:	d030      	beq.n	3418dce4 <XSPI_ConfigCmd+0x304>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418dc82:	683b      	ldr	r3, [r7, #0]
3418dc84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418dc86:	2b00      	cmp	r3, #0
3418dc88:	d017      	beq.n	3418dcba <XSPI_ConfigCmd+0x2da>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3418dc8a:	69bb      	ldr	r3, [r7, #24]
3418dc8c:	681b      	ldr	r3, [r3, #0]
3418dc8e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
3418dc92:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3418dc96:	683a      	ldr	r2, [r7, #0]
3418dc98:	69d1      	ldr	r1, [r2, #28]
3418dc9a:	683a      	ldr	r2, [r7, #0]
3418dc9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418dc9e:	4311      	orrs	r1, r2
3418dca0:	683a      	ldr	r2, [r7, #0]
3418dca2:	6a12      	ldr	r2, [r2, #32]
3418dca4:	4311      	orrs	r1, r2
3418dca6:	683a      	ldr	r2, [r7, #0]
3418dca8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418dcaa:	4311      	orrs	r1, r2
3418dcac:	683a      	ldr	r2, [r7, #0]
3418dcae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418dcb0:	430a      	orrs	r2, r1
3418dcb2:	431a      	orrs	r2, r3
3418dcb4:	69bb      	ldr	r3, [r7, #24]
3418dcb6:	601a      	str	r2, [r3, #0]
3418dcb8:	e00e      	b.n	3418dcd8 <XSPI_ConfigCmd+0x2f8>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3418dcba:	69bb      	ldr	r3, [r7, #24]
3418dcbc:	681b      	ldr	r3, [r3, #0]
3418dcbe:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
3418dcc2:	683b      	ldr	r3, [r7, #0]
3418dcc4:	69d9      	ldr	r1, [r3, #28]
3418dcc6:	683b      	ldr	r3, [r7, #0]
3418dcc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418dcca:	4319      	orrs	r1, r3
3418dccc:	683b      	ldr	r3, [r7, #0]
3418dcce:	6a1b      	ldr	r3, [r3, #32]
3418dcd0:	430b      	orrs	r3, r1
3418dcd2:	431a      	orrs	r2, r3
3418dcd4:	69bb      	ldr	r3, [r7, #24]
3418dcd6:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3418dcd8:	687b      	ldr	r3, [r7, #4]
3418dcda:	681b      	ldr	r3, [r3, #0]
3418dcdc:	683a      	ldr	r2, [r7, #0]
3418dcde:	6992      	ldr	r2, [r2, #24]
3418dce0:	649a      	str	r2, [r3, #72]	@ 0x48
3418dce2:	e004      	b.n	3418dcee <XSPI_ConfigCmd+0x30e>
      }
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
3418dce4:	2301      	movs	r3, #1
3418dce6:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418dce8:	687b      	ldr	r3, [r7, #4]
3418dcea:	2208      	movs	r2, #8
3418dcec:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418dcee:	683b      	ldr	r3, [r7, #0]
3418dcf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418dcf2:	2b00      	cmp	r3, #0
3418dcf4:	d009      	beq.n	3418dd0a <XSPI_ConfigCmd+0x32a>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418dcf6:	683b      	ldr	r3, [r7, #0]
3418dcf8:	681b      	ldr	r3, [r3, #0]
3418dcfa:	2b00      	cmp	r3, #0
3418dcfc:	d105      	bne.n	3418dd0a <XSPI_ConfigCmd+0x32a>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3418dcfe:	683b      	ldr	r3, [r7, #0]
3418dd00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3418dd02:	687b      	ldr	r3, [r7, #4]
3418dd04:	681b      	ldr	r3, [r3, #0]
3418dd06:	3a01      	subs	r2, #1
3418dd08:	641a      	str	r2, [r3, #64]	@ 0x40
      /* Verify if programmed data fit with requirement of Reference Manual 28.5 chapter */
      assert_param(IS_XSPI_PROG_DATA(hxspi->Instance->DLR, (pCmd->DataLength - 1U)));
    }
  }

  return status;
3418dd0a:	7ffb      	ldrb	r3, [r7, #31]
}
3418dd0c:	4618      	mov	r0, r3
3418dd0e:	3724      	adds	r7, #36	@ 0x24
3418dd10:	46bd      	mov	sp, r7
3418dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dd16:	4770      	bx	lr
3418dd18:	f0ffc0c0 	.word	0xf0ffc0c0

3418dd1c <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *pCfg)
{
3418dd1c:	b480      	push	{r7}
3418dd1e:	b085      	sub	sp, #20
3418dd20:	af00      	add	r7, sp, #0
3418dd22:	4603      	mov	r3, r0
3418dd24:	6039      	str	r1, [r7, #0]
3418dd26:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
3418dd28:	79fb      	ldrb	r3, [r7, #7]
3418dd2a:	2b01      	cmp	r3, #1
3418dd2c:	d124      	bne.n	3418dd78 <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
3418dd2e:	4b2c      	ldr	r3, [pc, #176]	@ (3418dde0 <XSPIM_GetConfig+0xc4>)
3418dd30:	681b      	ldr	r3, [r3, #0]
3418dd32:	f003 0302 	and.w	r3, r3, #2
3418dd36:	2b00      	cmp	r3, #0
3418dd38:	d103      	bne.n	3418dd42 <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
3418dd3a:	683b      	ldr	r3, [r7, #0]
3418dd3c:	2200      	movs	r2, #0
3418dd3e:	605a      	str	r2, [r3, #4]
3418dd40:	e002      	b.n	3418dd48 <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
3418dd42:	683b      	ldr	r3, [r7, #0]
3418dd44:	2201      	movs	r2, #1
3418dd46:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
3418dd48:	4b25      	ldr	r3, [pc, #148]	@ (3418dde0 <XSPIM_GetConfig+0xc4>)
3418dd4a:	681b      	ldr	r3, [r3, #0]
3418dd4c:	f003 0310 	and.w	r3, r3, #16
3418dd50:	2b10      	cmp	r3, #16
3418dd52:	d003      	beq.n	3418dd5c <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
3418dd54:	683b      	ldr	r3, [r7, #0]
3418dd56:	2200      	movs	r2, #0
3418dd58:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
3418dd5a:	e03a      	b.n	3418ddd2 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
3418dd5c:	4b20      	ldr	r3, [pc, #128]	@ (3418dde0 <XSPIM_GetConfig+0xc4>)
3418dd5e:	681b      	ldr	r3, [r3, #0]
3418dd60:	f003 0320 	and.w	r3, r3, #32
3418dd64:	2b20      	cmp	r3, #32
3418dd66:	d103      	bne.n	3418dd70 <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
3418dd68:	683b      	ldr	r3, [r7, #0]
3418dd6a:	2270      	movs	r2, #112	@ 0x70
3418dd6c:	601a      	str	r2, [r3, #0]
}
3418dd6e:	e030      	b.n	3418ddd2 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418dd70:	683b      	ldr	r3, [r7, #0]
3418dd72:	2210      	movs	r2, #16
3418dd74:	601a      	str	r2, [r3, #0]
}
3418dd76:	e02c      	b.n	3418ddd2 <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
3418dd78:	4b19      	ldr	r3, [pc, #100]	@ (3418dde0 <XSPIM_GetConfig+0xc4>)
3418dd7a:	681b      	ldr	r3, [r3, #0]
3418dd7c:	f003 0301 	and.w	r3, r3, #1
3418dd80:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
3418dd82:	4b17      	ldr	r3, [pc, #92]	@ (3418dde0 <XSPIM_GetConfig+0xc4>)
3418dd84:	681b      	ldr	r3, [r3, #0]
3418dd86:	085b      	lsrs	r3, r3, #1
3418dd88:	f003 0301 	and.w	r3, r3, #1
3418dd8c:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
3418dd8e:	68fa      	ldr	r2, [r7, #12]
3418dd90:	68bb      	ldr	r3, [r7, #8]
3418dd92:	429a      	cmp	r2, r3
3418dd94:	d003      	beq.n	3418dd9e <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
3418dd96:	683b      	ldr	r3, [r7, #0]
3418dd98:	2200      	movs	r2, #0
3418dd9a:	605a      	str	r2, [r3, #4]
3418dd9c:	e002      	b.n	3418dda4 <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
3418dd9e:	683b      	ldr	r3, [r7, #0]
3418dda0:	2201      	movs	r2, #1
3418dda2:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
3418dda4:	4b0e      	ldr	r3, [pc, #56]	@ (3418dde0 <XSPIM_GetConfig+0xc4>)
3418dda6:	681b      	ldr	r3, [r3, #0]
3418dda8:	f003 0310 	and.w	r3, r3, #16
3418ddac:	2b10      	cmp	r3, #16
3418ddae:	d003      	beq.n	3418ddb8 <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
3418ddb0:	683b      	ldr	r3, [r7, #0]
3418ddb2:	2200      	movs	r2, #0
3418ddb4:	601a      	str	r2, [r3, #0]
}
3418ddb6:	e00c      	b.n	3418ddd2 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
3418ddb8:	4b09      	ldr	r3, [pc, #36]	@ (3418dde0 <XSPIM_GetConfig+0xc4>)
3418ddba:	681b      	ldr	r3, [r3, #0]
3418ddbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418ddc0:	2b40      	cmp	r3, #64	@ 0x40
3418ddc2:	d103      	bne.n	3418ddcc <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
3418ddc4:	683b      	ldr	r3, [r7, #0]
3418ddc6:	2270      	movs	r2, #112	@ 0x70
3418ddc8:	601a      	str	r2, [r3, #0]
}
3418ddca:	e002      	b.n	3418ddd2 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418ddcc:	683b      	ldr	r3, [r7, #0]
3418ddce:	2210      	movs	r2, #16
3418ddd0:	601a      	str	r2, [r3, #0]
}
3418ddd2:	bf00      	nop
3418ddd4:	3714      	adds	r7, #20
3418ddd6:	46bd      	mov	sp, r7
3418ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418dddc:	4770      	bx	lr
3418ddde:	bf00      	nop
3418dde0:	5802b400 	.word	0x5802b400

3418dde4 <BOOT_Application>:
  *  @addtogroup BOOT_XIP_Exported_Functions Boot XIP exported functions
  * @{
  */

BOOTStatus_TypeDef BOOT_Application(void)
{
3418dde4:	b580      	push	{r7, lr}
3418dde6:	b082      	sub	sp, #8
3418dde8:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr;

  /* mount the memory */
  retr = MapMemory();
3418ddea:	f000 f80e 	bl	3418de0a <MapMemory>
3418ddee:	4603      	mov	r3, r0
3418ddf0:	71fb      	strb	r3, [r7, #7]
  if (BOOT_OK == retr)
3418ddf2:	79fb      	ldrb	r3, [r7, #7]
3418ddf4:	2b00      	cmp	r3, #0
3418ddf6:	d103      	bne.n	3418de00 <BOOT_Application+0x1c>
  {
    /* jump on the application */
    retr = JumpToApplication();
3418ddf8:	f000 f836 	bl	3418de68 <JumpToApplication>
3418ddfc:	4603      	mov	r3, r0
3418ddfe:	71fb      	strb	r3, [r7, #7]
  }
  return retr;
3418de00:	79fb      	ldrb	r3, [r7, #7]
}
3418de02:	4618      	mov	r0, r3
3418de04:	3708      	adds	r7, #8
3418de06:	46bd      	mov	sp, r7
3418de08:	bd80      	pop	{r7, pc}

3418de0a <MapMemory>:
/**
  * @brief  this function maps the memory
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef MapMemory(void)
{
3418de0a:	b580      	push	{r7, lr}
3418de0c:	b082      	sub	sp, #8
3418de0e:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
3418de10:	2300      	movs	r3, #0
3418de12:	71fb      	strb	r3, [r7, #7]

  /* Map all the memory */
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
3418de14:	2300      	movs	r3, #0
3418de16:	71bb      	strb	r3, [r7, #6]
3418de18:	e01d      	b.n	3418de56 <MapMemory+0x4c>
  {
    switch(EXTMEM_MemoryMappedMode(index, EXTMEM_ENABLE))
3418de1a:	79bb      	ldrb	r3, [r7, #6]
3418de1c:	2100      	movs	r1, #0
3418de1e:	4618      	mov	r0, r3
3418de20:	f000 f942 	bl	3418e0a8 <EXTMEM_MemoryMappedMode>
3418de24:	4603      	mov	r3, r0
3418de26:	f1b3 3fff 	cmp.w	r3, #4294967295
3418de2a:	d002      	beq.n	3418de32 <MapMemory+0x28>
3418de2c:	2b00      	cmp	r3, #0
3418de2e:	d00e      	beq.n	3418de4e <MapMemory+0x44>
3418de30:	e00a      	b.n	3418de48 <MapMemory+0x3e>
    {
    case EXTMEM_ERROR_NOTSUPPORTED :
      if (EXTMEM_MEMORY_BOOTXIP ==  index)
3418de32:	79bb      	ldrb	r3, [r7, #6]
3418de34:	2b00      	cmp	r3, #0
3418de36:	d102      	bne.n	3418de3e <MapMemory+0x34>
      {
        retr = BOOT_ERROR_INCOMPATIBLEMEMORY;
3418de38:	2304      	movs	r3, #4
3418de3a:	71fb      	strb	r3, [r7, #7]
      else
      {
        /* We considers the memory will be not used any more */
        EXTMEM_DeInit(index);
      }
      break;
3418de3c:	e008      	b.n	3418de50 <MapMemory+0x46>
        EXTMEM_DeInit(index);
3418de3e:	79bb      	ldrb	r3, [r7, #6]
3418de40:	4618      	mov	r0, r3
3418de42:	f000 f905 	bl	3418e050 <EXTMEM_DeInit>
      break;
3418de46:	e003      	b.n	3418de50 <MapMemory+0x46>
    case EXTMEM_OK:
      break;
    default :
      retr = BOOT_ERROR_MAPPEDMODEFAIL;
3418de48:	2303      	movs	r3, #3
3418de4a:	71fb      	strb	r3, [r7, #7]
      break;
3418de4c:	e000      	b.n	3418de50 <MapMemory+0x46>
      break;
3418de4e:	bf00      	nop
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
3418de50:	79bb      	ldrb	r3, [r7, #6]
3418de52:	3301      	adds	r3, #1
3418de54:	71bb      	strb	r3, [r7, #6]
3418de56:	79bb      	ldrb	r3, [r7, #6]
3418de58:	2b00      	cmp	r3, #0
3418de5a:	d0de      	beq.n	3418de1a <MapMemory+0x10>
    }
  }
  return retr;
3418de5c:	79fb      	ldrb	r3, [r7, #7]
}
3418de5e:	4618      	mov	r0, r3
3418de60:	3708      	adds	r7, #8
3418de62:	46bd      	mov	sp, r7
3418de64:	bd80      	pop	{r7, pc}
	...

3418de68 <JumpToApplication>:
/**
  * @brief  This function jumps to the application through its vector table
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef JumpToApplication(void)
{
3418de68:	b590      	push	{r4, r7, lr}
3418de6a:	b091      	sub	sp, #68	@ 0x44
3418de6c:	af00      	add	r7, sp, #0
3418de6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
3418de72:	3b40      	subs	r3, #64	@ 0x40
3418de74:	331f      	adds	r3, #31
3418de76:	095b      	lsrs	r3, r3, #5
3418de78:	015c      	lsls	r4, r3, #5
  uint32_t primask_bit;
  typedef  void (*pFunction)(void);
  static pFunction JumpToApp;
  uint32_t Application_vector;

  if (EXTMEM_OK != EXTMEM_GetMapAddress(EXTMEM_MEMORY_BOOTXIP, &Application_vector))
3418de7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
3418de7e:	4619      	mov	r1, r3
3418de80:	2000      	movs	r0, #0
3418de82:	f000 f95f 	bl	3418e144 <EXTMEM_GetMapAddress>
3418de86:	4603      	mov	r3, r0
3418de88:	2b00      	cmp	r3, #0
3418de8a:	d001      	beq.n	3418de90 <JumpToApplication+0x28>
  {
      return BOOT_ERROR_INCOMPATIBLEMEMORY;
3418de8c:	2304      	movs	r3, #4
3418de8e:	e095      	b.n	3418dfbc <JumpToApplication+0x154>
  }

  /* Suspend SysTick */
  HAL_SuspendTick();
3418de90:	f7f3 ffe0 	bl	34181e54 <HAL_SuspendTick>

#if defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  /* if I-Cache is enabled, disable I-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_IC_Msk)
3418de94:	4b4b      	ldr	r3, [pc, #300]	@ (3418dfc4 <JumpToApplication+0x15c>)
3418de96:	695b      	ldr	r3, [r3, #20]
3418de98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418de9c:	2b00      	cmp	r3, #0
3418de9e:	d016      	beq.n	3418dece <JumpToApplication+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
3418dea0:	f3bf 8f4f 	dsb	sy
}
3418dea4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418dea6:	f3bf 8f6f 	isb	sy
}
3418deaa:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
3418deac:	4b45      	ldr	r3, [pc, #276]	@ (3418dfc4 <JumpToApplication+0x15c>)
3418deae:	695b      	ldr	r3, [r3, #20]
3418deb0:	4a44      	ldr	r2, [pc, #272]	@ (3418dfc4 <JumpToApplication+0x15c>)
3418deb2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3418deb6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
3418deb8:	4b42      	ldr	r3, [pc, #264]	@ (3418dfc4 <JumpToApplication+0x15c>)
3418deba:	2200      	movs	r2, #0
3418debc:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
3418dec0:	f3bf 8f4f 	dsb	sy
}
3418dec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418dec6:	f3bf 8f6f 	isb	sy
}
3418deca:	bf00      	nop
}
3418decc:	bf00      	nop
  }
#endif /* defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U) */

#if defined(__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
  /* if D-Cache is enabled, disable D-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_DC_Msk)
3418dece:	4b3d      	ldr	r3, [pc, #244]	@ (3418dfc4 <JumpToApplication+0x15c>)
3418ded0:	695b      	ldr	r3, [r3, #20]
3418ded2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418ded6:	2b00      	cmp	r3, #0
3418ded8:	d043      	beq.n	3418df62 <JumpToApplication+0xfa>
    #if ((defined(__GNUC__) || defined(__clang__)) && !defined(__OPTIMIZE__))
       __ALIGNED(__SCB_DCACHE_LINE_SIZE)
    #endif
    ;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
3418deda:	4b3a      	ldr	r3, [pc, #232]	@ (3418dfc4 <JumpToApplication+0x15c>)
3418dedc:	2200      	movs	r2, #0
3418dede:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3418dee2:	f3bf 8f4f 	dsb	sy
}
3418dee6:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
3418dee8:	4b36      	ldr	r3, [pc, #216]	@ (3418dfc4 <JumpToApplication+0x15c>)
3418deea:	695b      	ldr	r3, [r3, #20]
3418deec:	4a35      	ldr	r2, [pc, #212]	@ (3418dfc4 <JumpToApplication+0x15c>)
3418deee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418def2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3418def4:	f3bf 8f4f 	dsb	sy
}
3418def8:	bf00      	nop
    /* As we can't align the stack to the cache line size, invalidate each of the variables */
      SCB->DCCIMVAC = (uint32_t)&locals.sets;
      SCB->DCCIMVAC = (uint32_t)&locals.ways;
      SCB->DCCIMVAC = (uint32_t)&locals.ccsidr;
    #else
      SCB->DCCIMVAC = (uint32_t)&locals;
3418defa:	4b32      	ldr	r3, [pc, #200]	@ (3418dfc4 <JumpToApplication+0x15c>)
3418defc:	4622      	mov	r2, r4
3418defe:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270
  __ASM volatile ("dsb 0xF":::"memory");
3418df02:	f3bf 8f4f 	dsb	sy
}
3418df06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418df08:	f3bf 8f6f 	isb	sy
}
3418df0c:	bf00      	nop
    #endif
      __DSB();
      __ISB();
    #endif

    locals.ccsidr = SCB->CCSIDR;
3418df0e:	4b2d      	ldr	r3, [pc, #180]	@ (3418dfc4 <JumpToApplication+0x15c>)
3418df10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418df14:	6023      	str	r3, [r4, #0]
                                            /* clean & invalidate D-Cache */
    locals.sets = (uint32_t)(CCSIDR_SETS(locals.ccsidr));
3418df16:	6823      	ldr	r3, [r4, #0]
3418df18:	0b5b      	lsrs	r3, r3, #13
3418df1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
3418df1e:	6063      	str	r3, [r4, #4]
    do {
      locals.ways = (uint32_t)(CCSIDR_WAYS(locals.ccsidr));
3418df20:	6823      	ldr	r3, [r4, #0]
3418df22:	08db      	lsrs	r3, r3, #3
3418df24:	f3c3 0309 	ubfx	r3, r3, #0, #10
3418df28:	60a3      	str	r3, [r4, #8]
      do {
        SCB->DCCISW = (((locals.sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3418df2a:	6863      	ldr	r3, [r4, #4]
3418df2c:	015a      	lsls	r2, r3, #5
3418df2e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
3418df32:	4013      	ands	r3, r2
                       ((locals.ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
3418df34:	68a2      	ldr	r2, [r4, #8]
3418df36:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((locals.sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3418df38:	4922      	ldr	r1, [pc, #136]	@ (3418dfc4 <JumpToApplication+0x15c>)
3418df3a:	4313      	orrs	r3, r2
3418df3c:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (locals.ways-- != 0U);
3418df40:	68a3      	ldr	r3, [r4, #8]
3418df42:	1e5a      	subs	r2, r3, #1
3418df44:	60a2      	str	r2, [r4, #8]
3418df46:	2b00      	cmp	r3, #0
3418df48:	d1ef      	bne.n	3418df2a <JumpToApplication+0xc2>
    } while(locals.sets-- != 0U);
3418df4a:	6863      	ldr	r3, [r4, #4]
3418df4c:	1e5a      	subs	r2, r3, #1
3418df4e:	6062      	str	r2, [r4, #4]
3418df50:	2b00      	cmp	r3, #0
3418df52:	d1e5      	bne.n	3418df20 <JumpToApplication+0xb8>
  __ASM volatile ("dsb 0xF":::"memory");
3418df54:	f3bf 8f4f 	dsb	sy
}
3418df58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418df5a:	f3bf 8f6f 	isb	sy
}
3418df5e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
3418df60:	bf00      	nop
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
3418df62:	f3ef 8310 	mrs	r3, PRIMASK
3418df66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
3418df68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    SCB_DisableDCache();
  }
#endif /* defined(__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U) */

  /* Initialize user application's Stack Pointer & Jump to user application  */
  primask_bit = __get_PRIMASK();
3418df6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
3418df6c:	b672      	cpsid	i
}
3418df6e:	bf00      	nop
  __disable_irq();

  /* Apply offsets for image location and vector table offset */
  Application_vector += EXTMEM_XIP_IMAGE_OFFSET + EXTMEM_HEADER_OFFSET;
3418df70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418df72:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
3418df76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3418df7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  SCB->VTOR = (uint32_t)Application_vector;
3418df7c:	4a11      	ldr	r2, [pc, #68]	@ (3418dfc4 <JumpToApplication+0x15c>)
3418df7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418df80:	6093      	str	r3, [r2, #8]
  JumpToApp = (pFunction) (*(__IO uint32_t *)(Application_vector + 4u));
3418df82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418df84:	3304      	adds	r3, #4
3418df86:	681b      	ldr	r3, [r3, #0]
3418df88:	461a      	mov	r2, r3
3418df8a:	4b0f      	ldr	r3, [pc, #60]	@ (3418dfc8 <JumpToApplication+0x160>)
3418df8c:	601a      	str	r2, [r3, #0]
3418df8e:	2300      	movs	r3, #0
3418df90:	633b      	str	r3, [r7, #48]	@ 0x30
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
3418df92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418df94:	f383 880a 	msr	MSPLIM, r3
#endif
}
3418df98:	bf00      	nop
     (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
  /* on ARM v8m, set MSPLIM before setting MSP to avoid unwanted stack overflow faults */
  __set_MSPLIM(0x00000000);
#endif  /* __ARM_ARCH_8M_MAIN__ or __ARM_ARCH_8M_BASE__ */

  __set_MSP(*(__IO uint32_t*) Application_vector);
3418df9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418df9c:	681b      	ldr	r3, [r3, #0]
3418df9e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
3418dfa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418dfa2:	f383 8808 	msr	MSP, r3
}
3418dfa6:	bf00      	nop
3418dfa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418dfaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
3418dfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418dfae:	f383 8810 	msr	PRIMASK, r3
}
3418dfb2:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);

  JumpToApp();
3418dfb4:	4b04      	ldr	r3, [pc, #16]	@ (3418dfc8 <JumpToApplication+0x160>)
3418dfb6:	681b      	ldr	r3, [r3, #0]
3418dfb8:	4798      	blx	r3
  return BOOT_OK;
3418dfba:	2300      	movs	r3, #0
}
3418dfbc:	4618      	mov	r0, r3
3418dfbe:	3744      	adds	r7, #68	@ 0x44
3418dfc0:	46bd      	mov	sp, r7
3418dfc2:	bd90      	pop	{r4, r7, pc}
3418dfc4:	e000ed00 	.word	0xe000ed00
3418dfc8:	341c029c 	.word	0x341c029c

3418dfcc <EXTMEM_Init>:
/** @defgroup EXTMEM_Exported_Functions External Memory Exported Functions
  * @{
  */

EXTMEM_StatusTypeDef EXTMEM_Init(uint32_t MemId, uint32_t ClockInput)
{
3418dfcc:	b580      	push	{r7, lr}
3418dfce:	b084      	sub	sp, #16
3418dfd0:	af00      	add	r7, sp, #0
3418dfd2:	6078      	str	r0, [r7, #4]
3418dfd4:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418dfd6:	23fb      	movs	r3, #251	@ 0xfb
3418dfd8:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418dfda:	687b      	ldr	r3, [r7, #4]
3418dfdc:	2b00      	cmp	r3, #0
3418dfde:	d12f      	bne.n	3418e040 <EXTMEM_Init+0x74>
  {
    retr = EXTMEM_OK;
3418dfe0:	2300      	movs	r3, #0
3418dfe2:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418dfe4:	4a19      	ldr	r2, [pc, #100]	@ (3418e04c <EXTMEM_Init+0x80>)
3418dfe6:	687b      	ldr	r3, [r7, #4]
3418dfe8:	21ac      	movs	r1, #172	@ 0xac
3418dfea:	fb01 f303 	mul.w	r3, r1, r3
3418dfee:	4413      	add	r3, r2
3418dff0:	781b      	ldrb	r3, [r3, #0]
3418dff2:	2b00      	cmp	r3, #0
3418dff4:	d120      	bne.n	3418e038 <EXTMEM_Init+0x6c>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Init(extmem_list_config[MemId].Handle,
3418dff6:	4a15      	ldr	r2, [pc, #84]	@ (3418e04c <EXTMEM_Init+0x80>)
3418dff8:	687b      	ldr	r3, [r7, #4]
3418dffa:	21ac      	movs	r1, #172	@ 0xac
3418dffc:	fb01 f303 	mul.w	r3, r1, r3
3418e000:	4413      	add	r3, r2
3418e002:	3304      	adds	r3, #4
3418e004:	6818      	ldr	r0, [r3, #0]
3418e006:	4a11      	ldr	r2, [pc, #68]	@ (3418e04c <EXTMEM_Init+0x80>)
3418e008:	687b      	ldr	r3, [r7, #4]
3418e00a:	21ac      	movs	r1, #172	@ 0xac
3418e00c:	fb01 f303 	mul.w	r3, r1, r3
3418e010:	4413      	add	r3, r2
3418e012:	3308      	adds	r3, #8
3418e014:	7819      	ldrb	r1, [r3, #0]
3418e016:	687b      	ldr	r3, [r7, #4]
3418e018:	22ac      	movs	r2, #172	@ 0xac
3418e01a:	fb02 f303 	mul.w	r3, r2, r3
3418e01e:	3308      	adds	r3, #8
3418e020:	4a0a      	ldr	r2, [pc, #40]	@ (3418e04c <EXTMEM_Init+0x80>)
3418e022:	4413      	add	r3, r2
3418e024:	3304      	adds	r3, #4
3418e026:	683a      	ldr	r2, [r7, #0]
3418e028:	f002 fb7c 	bl	34190724 <EXTMEM_DRIVER_NOR_SFDP_Init>
3418e02c:	4603      	mov	r3, r0
3418e02e:	2b00      	cmp	r3, #0
3418e030:	d005      	beq.n	3418e03e <EXTMEM_Init+0x72>
                                                                     extmem_list_config[MemId].ConfigType,
                                                                     ClockInput,
                                                                     &extmem_list_config[MemId].NorSfdpObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
3418e032:	23fd      	movs	r3, #253	@ 0xfd
3418e034:	73fb      	strb	r3, [r7, #15]
        }
        break;
3418e036:	e002      	b.n	3418e03e <EXTMEM_Init+0x72>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418e038:	23fe      	movs	r3, #254	@ 0xfe
3418e03a:	73fb      	strb	r3, [r7, #15]
        break;
3418e03c:	e000      	b.n	3418e040 <EXTMEM_Init+0x74>
        break;
3418e03e:	bf00      	nop
      }
    }
  }
  return retr;
3418e040:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418e044:	4618      	mov	r0, r3
3418e046:	3710      	adds	r7, #16
3418e048:	46bd      	mov	sp, r7
3418e04a:	bd80      	pop	{r7, pc}
3418e04c:	341c000c 	.word	0x341c000c

3418e050 <EXTMEM_DeInit>:

EXTMEM_StatusTypeDef EXTMEM_DeInit(uint32_t MemId)
{
3418e050:	b580      	push	{r7, lr}
3418e052:	b084      	sub	sp, #16
3418e054:	af00      	add	r7, sp, #0
3418e056:	6078      	str	r0, [r7, #4]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418e058:	23fb      	movs	r3, #251	@ 0xfb
3418e05a:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418e05c:	687b      	ldr	r3, [r7, #4]
3418e05e:	2b00      	cmp	r3, #0
3418e060:	d119      	bne.n	3418e096 <EXTMEM_DeInit+0x46>
  {
    retr = EXTMEM_OK;
3418e062:	2300      	movs	r3, #0
3418e064:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418e066:	4a0f      	ldr	r2, [pc, #60]	@ (3418e0a4 <EXTMEM_DeInit+0x54>)
3418e068:	687b      	ldr	r3, [r7, #4]
3418e06a:	21ac      	movs	r1, #172	@ 0xac
3418e06c:	fb01 f303 	mul.w	r3, r1, r3
3418e070:	4413      	add	r3, r2
3418e072:	781b      	ldrb	r3, [r3, #0]
3418e074:	2b00      	cmp	r3, #0
3418e076:	d10b      	bne.n	3418e090 <EXTMEM_DeInit+0x40>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* UnInitialize the SFDP memory, the return is always OK no need to test the returned value */
        (void)EXTMEM_DRIVER_NOR_SFDP_DeInit(&extmem_list_config[MemId].NorSfdpObject);
3418e078:	687b      	ldr	r3, [r7, #4]
3418e07a:	22ac      	movs	r2, #172	@ 0xac
3418e07c:	fb02 f303 	mul.w	r3, r2, r3
3418e080:	3308      	adds	r3, #8
3418e082:	4a08      	ldr	r2, [pc, #32]	@ (3418e0a4 <EXTMEM_DeInit+0x54>)
3418e084:	4413      	add	r3, r2
3418e086:	3304      	adds	r3, #4
3418e088:	4618      	mov	r0, r3
3418e08a:	f002 fc07 	bl	3419089c <EXTMEM_DRIVER_NOR_SFDP_DeInit>
        break;
3418e08e:	e002      	b.n	3418e096 <EXTMEM_DeInit+0x46>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
      default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418e090:	23fe      	movs	r3, #254	@ 0xfe
3418e092:	73fb      	strb	r3, [r7, #15]
        break;
3418e094:	bf00      	nop
      }
    }
  }
  return retr;
3418e096:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418e09a:	4618      	mov	r0, r3
3418e09c:	3710      	adds	r7, #16
3418e09e:	46bd      	mov	sp, r7
3418e0a0:	bd80      	pop	{r7, pc}
3418e0a2:	bf00      	nop
3418e0a4:	341c000c 	.word	0x341c000c

3418e0a8 <EXTMEM_MemoryMappedMode>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_MemoryMappedMode(uint32_t MemId, EXTMEM_StateTypeDef State)
{
3418e0a8:	b580      	push	{r7, lr}
3418e0aa:	b084      	sub	sp, #16
3418e0ac:	af00      	add	r7, sp, #0
3418e0ae:	6078      	str	r0, [r7, #4]
3418e0b0:	460b      	mov	r3, r1
3418e0b2:	70fb      	strb	r3, [r7, #3]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418e0b4:	23fb      	movs	r3, #251	@ 0xfb
3418e0b6:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418e0b8:	687b      	ldr	r3, [r7, #4]
3418e0ba:	2b00      	cmp	r3, #0
3418e0bc:	d139      	bne.n	3418e132 <EXTMEM_MemoryMappedMode+0x8a>
  {
    retr = EXTMEM_OK;
3418e0be:	2300      	movs	r3, #0
3418e0c0:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418e0c2:	4a1f      	ldr	r2, [pc, #124]	@ (3418e140 <EXTMEM_MemoryMappedMode+0x98>)
3418e0c4:	687b      	ldr	r3, [r7, #4]
3418e0c6:	21ac      	movs	r1, #172	@ 0xac
3418e0c8:	fb01 f303 	mul.w	r3, r1, r3
3418e0cc:	4413      	add	r3, r2
3418e0ce:	781b      	ldrb	r3, [r3, #0]
3418e0d0:	2b00      	cmp	r3, #0
3418e0d2:	d002      	beq.n	3418e0da <EXTMEM_MemoryMappedMode+0x32>
3418e0d4:	2b03      	cmp	r3, #3
3418e0d6:	d025      	beq.n	3418e124 <EXTMEM_MemoryMappedMode+0x7c>
3418e0d8:	e027      	b.n	3418e12a <EXTMEM_MemoryMappedMode+0x82>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        if (EXTMEM_ENABLE == State)
3418e0da:	78fb      	ldrb	r3, [r7, #3]
3418e0dc:	2b00      	cmp	r3, #0
3418e0de:	d110      	bne.n	3418e102 <EXTMEM_MemoryMappedMode+0x5a>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
3418e0e0:	687b      	ldr	r3, [r7, #4]
3418e0e2:	22ac      	movs	r2, #172	@ 0xac
3418e0e4:	fb02 f303 	mul.w	r3, r2, r3
3418e0e8:	3308      	adds	r3, #8
3418e0ea:	4a15      	ldr	r2, [pc, #84]	@ (3418e140 <EXTMEM_MemoryMappedMode+0x98>)
3418e0ec:	4413      	add	r3, r2
3418e0ee:	3304      	adds	r3, #4
3418e0f0:	4618      	mov	r0, r3
3418e0f2:	f002 fbe2 	bl	341908ba <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>
3418e0f6:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
3418e0f8:	2b00      	cmp	r3, #0
3418e0fa:	d019      	beq.n	3418e130 <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
3418e0fc:	f06f 0302 	mvn.w	r3, #2
3418e100:	e019      	b.n	3418e136 <EXTMEM_MemoryMappedMode+0x8e>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
3418e102:	687b      	ldr	r3, [r7, #4]
3418e104:	22ac      	movs	r2, #172	@ 0xac
3418e106:	fb02 f303 	mul.w	r3, r2, r3
3418e10a:	3308      	adds	r3, #8
3418e10c:	4a0c      	ldr	r2, [pc, #48]	@ (3418e140 <EXTMEM_MemoryMappedMode+0x98>)
3418e10e:	4413      	add	r3, r2
3418e110:	3304      	adds	r3, #4
3418e112:	4618      	mov	r0, r3
3418e114:	f002 fbf2 	bl	341908fc <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>
3418e118:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
3418e11a:	2b00      	cmp	r3, #0
3418e11c:	d008      	beq.n	3418e130 <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
3418e11e:	f06f 0302 	mvn.w	r3, #2
3418e122:	e008      	b.n	3418e136 <EXTMEM_MemoryMappedMode+0x8e>
       }
       break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    case EXTMEM_SDCARD :
      retr = EXTMEM_ERROR_NOTSUPPORTED;
3418e124:	23ff      	movs	r3, #255	@ 0xff
3418e126:	73fb      	strb	r3, [r7, #15]
    break;
3418e128:	e003      	b.n	3418e132 <EXTMEM_MemoryMappedMode+0x8a>
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418e12a:	23fe      	movs	r3, #254	@ 0xfe
3418e12c:	73fb      	strb	r3, [r7, #15]
        break;
3418e12e:	e000      	b.n	3418e132 <EXTMEM_MemoryMappedMode+0x8a>
        break;
3418e130:	bf00      	nop
      }
    }
  }
  return retr;
3418e132:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418e136:	4618      	mov	r0, r3
3418e138:	3710      	adds	r7, #16
3418e13a:	46bd      	mov	sp, r7
3418e13c:	bd80      	pop	{r7, pc}
3418e13e:	bf00      	nop
3418e140:	341c000c 	.word	0x341c000c

3418e144 <EXTMEM_GetMapAddress>:

EXTMEM_StatusTypeDef EXTMEM_GetMapAddress(uint32_t MemId, uint32_t *BaseAddress)
{
3418e144:	b480      	push	{r7}
3418e146:	b085      	sub	sp, #20
3418e148:	af00      	add	r7, sp, #0
3418e14a:	6078      	str	r0, [r7, #4]
3418e14c:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418e14e:	23fb      	movs	r3, #251	@ 0xfb
3418e150:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418e152:	687b      	ldr	r3, [r7, #4]
3418e154:	2b00      	cmp	r3, #0
3418e156:	d145      	bne.n	3418e1e4 <EXTMEM_GetMapAddress+0xa0>
  {
    retr = EXTMEM_OK;
3418e158:	2300      	movs	r3, #0
3418e15a:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418e15c:	4a25      	ldr	r2, [pc, #148]	@ (3418e1f4 <EXTMEM_GetMapAddress+0xb0>)
3418e15e:	687b      	ldr	r3, [r7, #4]
3418e160:	21ac      	movs	r1, #172	@ 0xac
3418e162:	fb01 f303 	mul.w	r3, r1, r3
3418e166:	4413      	add	r3, r2
3418e168:	781b      	ldrb	r3, [r3, #0]
3418e16a:	2b00      	cmp	r3, #0
3418e16c:	d001      	beq.n	3418e172 <EXTMEM_GetMapAddress+0x2e>
3418e16e:	2b02      	cmp	r3, #2
3418e170:	d135      	bne.n	3418e1de <EXTMEM_GetMapAddress+0x9a>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1 || EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM:
      case EXTMEM_NOR_SFDP:{
#if defined(XSPI1)
       if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI1)
3418e172:	4a20      	ldr	r2, [pc, #128]	@ (3418e1f4 <EXTMEM_GetMapAddress+0xb0>)
3418e174:	687b      	ldr	r3, [r7, #4]
3418e176:	21ac      	movs	r1, #172	@ 0xac
3418e178:	fb01 f303 	mul.w	r3, r1, r3
3418e17c:	4413      	add	r3, r2
3418e17e:	3304      	adds	r3, #4
3418e180:	681b      	ldr	r3, [r3, #0]
3418e182:	681b      	ldr	r3, [r3, #0]
3418e184:	4a1c      	ldr	r2, [pc, #112]	@ (3418e1f8 <EXTMEM_GetMapAddress+0xb4>)
3418e186:	4293      	cmp	r3, r2
3418e188:	d104      	bne.n	3418e194 <EXTMEM_GetMapAddress+0x50>
        {
          *BaseAddress = XSPI1_BASE;
3418e18a:	683b      	ldr	r3, [r7, #0]
3418e18c:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
3418e190:	601a      	str	r2, [r3, #0]
       else
       {
          retr = EXTMEM_ERROR_DRIVER;
       }

       break;
3418e192:	e027      	b.n	3418e1e4 <EXTMEM_GetMapAddress+0xa0>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI2)
3418e194:	4a17      	ldr	r2, [pc, #92]	@ (3418e1f4 <EXTMEM_GetMapAddress+0xb0>)
3418e196:	687b      	ldr	r3, [r7, #4]
3418e198:	21ac      	movs	r1, #172	@ 0xac
3418e19a:	fb01 f303 	mul.w	r3, r1, r3
3418e19e:	4413      	add	r3, r2
3418e1a0:	3304      	adds	r3, #4
3418e1a2:	681b      	ldr	r3, [r3, #0]
3418e1a4:	681b      	ldr	r3, [r3, #0]
3418e1a6:	4a15      	ldr	r2, [pc, #84]	@ (3418e1fc <EXTMEM_GetMapAddress+0xb8>)
3418e1a8:	4293      	cmp	r3, r2
3418e1aa:	d104      	bne.n	3418e1b6 <EXTMEM_GetMapAddress+0x72>
          *BaseAddress = XSPI2_BASE;
3418e1ac:	683b      	ldr	r3, [r7, #0]
3418e1ae:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
3418e1b2:	601a      	str	r2, [r3, #0]
       break;
3418e1b4:	e016      	b.n	3418e1e4 <EXTMEM_GetMapAddress+0xa0>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI3)
3418e1b6:	4a0f      	ldr	r2, [pc, #60]	@ (3418e1f4 <EXTMEM_GetMapAddress+0xb0>)
3418e1b8:	687b      	ldr	r3, [r7, #4]
3418e1ba:	21ac      	movs	r1, #172	@ 0xac
3418e1bc:	fb01 f303 	mul.w	r3, r1, r3
3418e1c0:	4413      	add	r3, r2
3418e1c2:	3304      	adds	r3, #4
3418e1c4:	681b      	ldr	r3, [r3, #0]
3418e1c6:	681b      	ldr	r3, [r3, #0]
3418e1c8:	4a0d      	ldr	r2, [pc, #52]	@ (3418e200 <EXTMEM_GetMapAddress+0xbc>)
3418e1ca:	4293      	cmp	r3, r2
3418e1cc:	d104      	bne.n	3418e1d8 <EXTMEM_GetMapAddress+0x94>
          *BaseAddress = XSPI3_BASE;
3418e1ce:	683b      	ldr	r3, [r7, #0]
3418e1d0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
3418e1d4:	601a      	str	r2, [r3, #0]
       break;
3418e1d6:	e005      	b.n	3418e1e4 <EXTMEM_GetMapAddress+0xa0>
          retr = EXTMEM_ERROR_DRIVER;
3418e1d8:	23fd      	movs	r3, #253	@ 0xfd
3418e1da:	73fb      	strb	r3, [r7, #15]
       break;
3418e1dc:	e002      	b.n	3418e1e4 <EXTMEM_GetMapAddress+0xa0>
      break;
      }
#endif /* EXTMEM_DRIVER_USER == 1 */
      default :
      {
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418e1de:	23fe      	movs	r3, #254	@ 0xfe
3418e1e0:	73fb      	strb	r3, [r7, #15]
        break;
3418e1e2:	bf00      	nop
      }
    }
  }
  return retr;
3418e1e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418e1e8:	4618      	mov	r0, r3
3418e1ea:	3714      	adds	r7, #20
3418e1ec:	46bd      	mov	sp, r7
3418e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e1f2:	4770      	bx	lr
3418e1f4:	341c000c 	.word	0x341c000c
3418e1f8:	58025000 	.word	0x58025000
3418e1fc:	5802a000 	.word	0x5802a000
3418e200:	5802d000 	.word	0x5802d000

3418e204 <SAL_XSPI_SetClock>:
/* Private variables ---------------------------------------------------------*/
/** @defgroup SAL_XSPI_Exported_Functions SAL XSP Exported Functions
  * @{
  */
HAL_StatusTypeDef SAL_XSPI_SetClock(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t ClockIn, uint32_t ClockRequested, uint32_t *ClockReal)
{
3418e204:	b480      	push	{r7}
3418e206:	b087      	sub	sp, #28
3418e208:	af00      	add	r7, sp, #0
3418e20a:	60f8      	str	r0, [r7, #12]
3418e20c:	60b9      	str	r1, [r7, #8]
3418e20e:	607a      	str	r2, [r7, #4]
3418e210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr = HAL_OK;
3418e212:	2300      	movs	r3, #0
3418e214:	75fb      	strb	r3, [r7, #23]
  uint32_t divider;

  if (ClockRequested == 0u)
3418e216:	687b      	ldr	r3, [r7, #4]
3418e218:	2b00      	cmp	r3, #0
3418e21a:	d102      	bne.n	3418e222 <SAL_XSPI_SetClock+0x1e>
  {
    retr = HAL_ERROR;
3418e21c:	2301      	movs	r3, #1
3418e21e:	75fb      	strb	r3, [r7, #23]
3418e220:	e028      	b.n	3418e274 <SAL_XSPI_SetClock+0x70>
  }
  else
  {
    divider = (ClockIn / ClockRequested);
3418e222:	68ba      	ldr	r2, [r7, #8]
3418e224:	687b      	ldr	r3, [r7, #4]
3418e226:	fbb2 f3f3 	udiv	r3, r2, r3
3418e22a:	613b      	str	r3, [r7, #16]
    if (divider >= 1u)
3418e22c:	693b      	ldr	r3, [r7, #16]
3418e22e:	2b00      	cmp	r3, #0
3418e230:	d00d      	beq.n	3418e24e <SAL_XSPI_SetClock+0x4a>
    {
      *ClockReal = ClockIn / divider;
3418e232:	68ba      	ldr	r2, [r7, #8]
3418e234:	693b      	ldr	r3, [r7, #16]
3418e236:	fbb2 f2f3 	udiv	r2, r2, r3
3418e23a:	683b      	ldr	r3, [r7, #0]
3418e23c:	601a      	str	r2, [r3, #0]
      if (*ClockReal <= ClockRequested)
3418e23e:	683b      	ldr	r3, [r7, #0]
3418e240:	681b      	ldr	r3, [r3, #0]
3418e242:	687a      	ldr	r2, [r7, #4]
3418e244:	429a      	cmp	r2, r3
3418e246:	d302      	bcc.n	3418e24e <SAL_XSPI_SetClock+0x4a>
      {
        divider--;
3418e248:	693b      	ldr	r3, [r7, #16]
3418e24a:	3b01      	subs	r3, #1
3418e24c:	613b      	str	r3, [r7, #16]
      }
    }

    /* real clock calculation */
    *ClockReal = ClockIn / (divider + 1u);
3418e24e:	693b      	ldr	r3, [r7, #16]
3418e250:	3301      	adds	r3, #1
3418e252:	68ba      	ldr	r2, [r7, #8]
3418e254:	fbb2 f2f3 	udiv	r2, r2, r3
3418e258:	683b      	ldr	r3, [r7, #0]
3418e25a:	601a      	str	r2, [r3, #0]

    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLOCKDIV::"); DEBUG_PARAM_INT(divider+1); DEBUG_PARAM_END();
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLKFREQ::"); DEBUG_PARAM_INTD(*ClockReal); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER, (uint32_t)divider << XSPI_DCR2_PRESCALER_Pos);
3418e25c:	68fb      	ldr	r3, [r7, #12]
3418e25e:	681b      	ldr	r3, [r3, #0]
3418e260:	681b      	ldr	r3, [r3, #0]
3418e262:	68db      	ldr	r3, [r3, #12]
3418e264:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418e268:	68fb      	ldr	r3, [r7, #12]
3418e26a:	681b      	ldr	r3, [r3, #0]
3418e26c:	681b      	ldr	r3, [r3, #0]
3418e26e:	693a      	ldr	r2, [r7, #16]
3418e270:	430a      	orrs	r2, r1
3418e272:	60da      	str	r2, [r3, #12]
  }

  return retr;
3418e274:	7dfb      	ldrb	r3, [r7, #23]
}
3418e276:	4618      	mov	r0, r3
3418e278:	371c      	adds	r7, #28
3418e27a:	46bd      	mov	sp, r7
3418e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e280:	4770      	bx	lr

3418e282 <SAL_XSPI_Init>:
/*
* This function is used to configure the way to discuss with the memory
*
*/
HAL_StatusTypeDef SAL_XSPI_Init(SAL_XSPI_ObjectTypeDef *SalXspi, void *HALHandle)
{
3418e282:	b580      	push	{r7, lr}
3418e284:	b096      	sub	sp, #88	@ 0x58
3418e286:	af00      	add	r7, sp, #0
3418e288:	6078      	str	r0, [r7, #4]
3418e28a:	6039      	str	r1, [r7, #0]
  XSPI_RegularCmdTypeDef s_commandbase = {
3418e28c:	f107 030c 	add.w	r3, r7, #12
3418e290:	224c      	movs	r2, #76	@ 0x4c
3418e292:	2100      	movs	r1, #0
3418e294:	4618      	mov	r0, r3
3418e296:	f002 fd3f 	bl	34190d18 <memset>
3418e29a:	235a      	movs	r3, #90	@ 0x5a
3418e29c:	617b      	str	r3, [r7, #20]
3418e29e:	2301      	movs	r3, #1
3418e2a0:	61bb      	str	r3, [r7, #24]
3418e2a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418e2a6:	62bb      	str	r3, [r7, #40]	@ 0x28
3418e2a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418e2ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418e2ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418e2b2:	647b      	str	r3, [r7, #68]	@ 0x44
3418e2b4:	2308      	movs	r3, #8
3418e2b6:	653b      	str	r3, [r7, #80]	@ 0x50
#if defined(XSPI_CCR_SIOO)
      .SIOOMode = HAL_XSPI_SIOO_INST_EVERY_CMD,
#endif /* HAL_XSPI_SIOO_INST_EVERY_CMD */
  };

  SalXspi->hxspi = (XSPI_HandleTypeDef *)HALHandle;
3418e2b8:	687b      	ldr	r3, [r7, #4]
3418e2ba:	683a      	ldr	r2, [r7, #0]
3418e2bc:	601a      	str	r2, [r3, #0]
  SalXspi->Commandbase = s_commandbase;
3418e2be:	687b      	ldr	r3, [r7, #4]
3418e2c0:	3304      	adds	r3, #4
3418e2c2:	f107 010c 	add.w	r1, r7, #12
3418e2c6:	224c      	movs	r2, #76	@ 0x4c
3418e2c8:	4618      	mov	r0, r3
3418e2ca:	f002 fda0 	bl	34190e0e <memcpy>
  SalXspi->CommandExtension = 0;
3418e2ce:	687b      	ldr	r3, [r7, #4]
3418e2d0:	2200      	movs	r2, #0
3418e2d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  SalXspi->PhyLink = PHY_LINK_1S1S1S;
3418e2d6:	687b      	ldr	r3, [r7, #4]
3418e2d8:	2200      	movs	r2, #0
3418e2da:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_TX_CPLT_CB_ID, SAL_XSPI_CompleteCallback);
  /* set the error callback */
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_ERROR_CB_ID, SAL_XSPI_ErrorCallback);
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return HAL_OK;
3418e2de:	2300      	movs	r3, #0
}
3418e2e0:	4618      	mov	r0, r3
3418e2e2:	3758      	adds	r7, #88	@ 0x58
3418e2e4:	46bd      	mov	sp, r7
3418e2e6:	bd80      	pop	{r7, pc}

3418e2e8 <SAL_XSPI_MemoryConfig>:

HAL_StatusTypeDef SAL_XSPI_MemoryConfig(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_MemParamTypeTypeDef ParametersType, void *ParamVal)
{
3418e2e8:	b580      	push	{r7, lr}
3418e2ea:	b098      	sub	sp, #96	@ 0x60
3418e2ec:	af00      	add	r7, sp, #0
3418e2ee:	60f8      	str	r0, [r7, #12]
3418e2f0:	460b      	mov	r3, r1
3418e2f2:	607a      	str	r2, [r7, #4]
3418e2f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr = HAL_OK;
3418e2f6:	2300      	movs	r3, #0
3418e2f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  XSPI_RegularCmdTypeDef s_commandbase = SalXspi->Commandbase;
3418e2fc:	68fb      	ldr	r3, [r7, #12]
3418e2fe:	f107 0010 	add.w	r0, r7, #16
3418e302:	3304      	adds	r3, #4
3418e304:	224c      	movs	r2, #76	@ 0x4c
3418e306:	4619      	mov	r1, r3
3418e308:	f002 fd81 	bl	34190e0e <memcpy>

  switch (ParametersType) {
3418e30c:	7afb      	ldrb	r3, [r7, #11]
3418e30e:	2b04      	cmp	r3, #4
3418e310:	f200 812a 	bhi.w	3418e568 <SAL_XSPI_MemoryConfig+0x280>
3418e314:	a201      	add	r2, pc, #4	@ (adr r2, 3418e31c <SAL_XSPI_MemoryConfig+0x34>)
3418e316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418e31a:	bf00      	nop
3418e31c:	3418e331 	.word	0x3418e331
3418e320:	3418e559 	.word	0x3418e559
3418e324:	3418e52b 	.word	0x3418e52b
3418e328:	3418e569 	.word	0x3418e569
3418e32c:	3418e533 	.word	0x3418e533
  case PARAM_PHY_LINK:{
    SalXspi->PhyLink = *((SAL_XSPI_PhysicalLinkTypeDef *)ParamVal);
3418e330:	687b      	ldr	r3, [r7, #4]
3418e332:	781a      	ldrb	r2, [r3, #0]
3418e334:	68fb      	ldr	r3, [r7, #12]
3418e336:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_PHY_LINK::");DEBUG_PARAM_DATA(STR_PHY_LINK(SalXspi->PhyLink));
    switch (SalXspi->PhyLink)
3418e33a:	68fb      	ldr	r3, [r7, #12]
3418e33c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
3418e340:	2b0b      	cmp	r3, #11
3418e342:	f200 80ed 	bhi.w	3418e520 <SAL_XSPI_MemoryConfig+0x238>
3418e346:	a201      	add	r2, pc, #4	@ (adr r2, 3418e34c <SAL_XSPI_MemoryConfig+0x64>)
3418e348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418e34c:	3418e37d 	.word	0x3418e37d
3418e350:	3418e37d 	.word	0x3418e37d
3418e354:	3418e37d 	.word	0x3418e37d
3418e358:	3418e37d 	.word	0x3418e37d
3418e35c:	3418e3ad 	.word	0x3418e3ad
3418e360:	3418e3ad 	.word	0x3418e3ad
3418e364:	3418e3dd 	.word	0x3418e3dd
3418e368:	3418e411 	.word	0x3418e411
3418e36c:	3418e441 	.word	0x3418e441
3418e370:	3418e477 	.word	0x3418e477
3418e374:	3418e4ad 	.word	0x3418e4ad
3418e378:	3418e4e7 	.word	0x3418e4e7
    {
    case PHY_LINK_1S1D1D:
    case PHY_LINK_1S2S2S:
    case PHY_LINK_1S1S2S:
    case PHY_LINK_1S1S1S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
3418e37c:	2301      	movs	r3, #1
3418e37e:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418e380:	2300      	movs	r3, #0
3418e382:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418e384:	2300      	movs	r3, #0
3418e386:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_1_LINE;
3418e388:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418e38c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418e38e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418e392:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418e394:	2300      	movs	r3, #0
3418e396:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_1_LINE;
3418e398:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418e39c:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418e39e:	2300      	movs	r3, #0
3418e3a0:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418e3a2:	2308      	movs	r3, #8
3418e3a4:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418e3a6:	2300      	movs	r3, #0
3418e3a8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418e3aa:	e0bd      	b.n	3418e528 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_4S4D4D:
    case PHY_LINK_4S4S4S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
3418e3ac:	2303      	movs	r3, #3
3418e3ae:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418e3b0:	2300      	movs	r3, #0
3418e3b2:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418e3b4:	2300      	movs	r3, #0
3418e3b6:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
3418e3b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
3418e3bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418e3be:	2300      	movs	r3, #0
3418e3c0:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418e3c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418e3c6:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
3418e3c8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3418e3cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418e3ce:	2300      	movs	r3, #0
3418e3d0:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
3418e3d2:	2306      	movs	r3, #6
3418e3d4:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418e3d6:	2300      	movs	r3, #0
3418e3d8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418e3da:	e0a5      	b.n	3418e528 <SAL_XSPI_MemoryConfig+0x240>
      }
    case PHY_LINK_4D4D4D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
3418e3dc:	2303      	movs	r3, #3
3418e3de:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418e3e0:	2300      	movs	r3, #0
3418e3e2:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3418e3e4:	2308      	movs	r3, #8
3418e3e6:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
3418e3e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
3418e3ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418e3ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418e3f2:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418e3f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418e3f8:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
3418e3fa:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3418e3fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418e400:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418e404:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
3418e406:	2306      	movs	r3, #6
3418e408:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418e40a:	2300      	movs	r3, #0
3418e40c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418e40e:	e08b      	b.n	3418e528 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_1S8S8S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
3418e410:	2301      	movs	r3, #1
3418e412:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418e414:	2300      	movs	r3, #0
3418e416:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418e418:	2300      	movs	r3, #0
3418e41a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418e41c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418e420:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418e422:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418e426:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418e428:	2300      	movs	r3, #0
3418e42a:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418e42c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418e430:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418e432:	2300      	movs	r3, #0
3418e434:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418e436:	2308      	movs	r3, #8
3418e438:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418e43a:	2300      	movs	r3, #0
3418e43c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418e43e:	e073      	b.n	3418e528 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_8S8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3418e440:	2304      	movs	r3, #4
3418e442:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418e444:	2300      	movs	r3, #0
3418e446:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418e448:	2300      	movs	r3, #0
3418e44a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418e44c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418e450:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418e452:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418e456:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418e458:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418e45c:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418e45e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418e462:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418e464:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418e468:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418e46a:	2308      	movs	r3, #8
3418e46c:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
3418e46e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418e472:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418e474:	e058      	b.n	3418e528 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_8D8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3418e476:	2304      	movs	r3, #4
3418e478:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
3418e47a:	2310      	movs	r3, #16
3418e47c:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3418e47e:	2308      	movs	r3, #8
3418e480:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418e482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418e486:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418e488:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418e48c:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418e48e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418e492:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418e494:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418e498:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418e49a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418e49e:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 20;
3418e4a0:	2314      	movs	r3, #20
3418e4a2:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
3418e4a4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418e4a8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418e4aa:	e03d      	b.n	3418e528 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_RAM8:{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3418e4ac:	2304      	movs	r3, #4
3418e4ae:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
3418e4b0:	2300      	movs	r3, #0
3418e4b2:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418e4b4:	2300      	movs	r3, #0
3418e4b6:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3418e4b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418e4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3418e4be:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418e4c2:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418e4c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418e4c8:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3418e4ca:	2300      	movs	r3, #0
3418e4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_8_LINES;
3418e4ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418e4d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
3418e4d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418e4d8:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
3418e4da:	230a      	movs	r3, #10
3418e4dc:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
3418e4de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418e4e2:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418e4e4:	e020      	b.n	3418e528 <SAL_XSPI_MemoryConfig+0x240>
    }
#if defined(HAL_XSPI_DATA_16_LINES)
    case PHY_LINK_RAM16 :{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3418e4e6:	2304      	movs	r3, #4
3418e4e8:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
3418e4ea:	2300      	movs	r3, #0
3418e4ec:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418e4ee:	2300      	movs	r3, #0
3418e4f0:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3418e4f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418e4f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3418e4f8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418e4fc:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418e4fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418e502:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3418e504:	2300      	movs	r3, #0
3418e506:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_16_LINES;
3418e508:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
3418e50c:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
3418e50e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418e512:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
3418e514:	230a      	movs	r3, #10
3418e516:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
3418e518:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418e51c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418e51e:	e003      	b.n	3418e528 <SAL_XSPI_MemoryConfig+0x240>
    }
#endif /* defined(HAL_XSPI_DATA_16_LINES) */
    default:
      retr = HAL_ERROR;
3418e520:	2301      	movs	r3, #1
3418e522:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
3418e526:	bf00      	nop
    }
    DEBUG_PARAM_END();
    break;
3418e528:	e022      	b.n	3418e570 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_ADDRESS_4BYTES: {
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_ADDRESS_4BYTES"); DEBUG_PARAM_END();
    s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418e52a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418e52e:	633b      	str	r3, [r7, #48]	@ 0x30
    break;
3418e530:	e01e      	b.n	3418e570 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_FLASHSIZE:{
    uint8_t valParam = *((uint8_t *)ParamVal);
3418e532:	687b      	ldr	r3, [r7, #4]
3418e534:	781b      	ldrb	r3, [r3, #0]
3418e536:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_FLASHSIZE::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_DEVSIZE, ((uint32_t)valParam) << XSPI_DCR1_DEVSIZE_Pos);
3418e53a:	68fb      	ldr	r3, [r7, #12]
3418e53c:	681b      	ldr	r3, [r3, #0]
3418e53e:	681b      	ldr	r3, [r3, #0]
3418e540:	689b      	ldr	r3, [r3, #8]
3418e542:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
3418e546:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
3418e54a:	041a      	lsls	r2, r3, #16
3418e54c:	68fb      	ldr	r3, [r7, #12]
3418e54e:	681b      	ldr	r3, [r3, #0]
3418e550:	681b      	ldr	r3, [r3, #0]
3418e552:	430a      	orrs	r2, r1
3418e554:	609a      	str	r2, [r3, #8]
    break;
3418e556:	e00b      	b.n	3418e570 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_DUMMY_CYCLES:{
    uint8_t valParam = *((uint8_t *)ParamVal);
3418e558:	687b      	ldr	r3, [r7, #4]
3418e55a:	781b      	ldrb	r3, [r3, #0]
3418e55c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_DUMMY_CYCLES::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    s_commandbase.DummyCycles = valParam;
3418e560:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
3418e564:	657b      	str	r3, [r7, #84]	@ 0x54
    break;
3418e566:	e003      	b.n	3418e570 <SAL_XSPI_MemoryConfig+0x288>
  }
  default:
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_MemoryConfig::ERROR"); DEBUG_PARAM_END();
    retr = HAL_ERROR;
3418e568:	2301      	movs	r3, #1
3418e56a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    break;
3418e56e:	bf00      	nop
  }
  SalXspi->Commandbase = s_commandbase;
3418e570:	68fb      	ldr	r3, [r7, #12]
3418e572:	3304      	adds	r3, #4
3418e574:	f107 0110 	add.w	r1, r7, #16
3418e578:	224c      	movs	r2, #76	@ 0x4c
3418e57a:	4618      	mov	r0, r3
3418e57c:	f002 fc47 	bl	34190e0e <memcpy>
  return retr;
3418e580:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418e584:	4618      	mov	r0, r3
3418e586:	3760      	adds	r7, #96	@ 0x60
3418e588:	46bd      	mov	sp, r7
3418e58a:	bd80      	pop	{r7, pc}

3418e58c <SAL_XSPI_GetSFDP>:

HAL_StatusTypeDef SAL_XSPI_GetSFDP(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
3418e58c:	b580      	push	{r7, lr}
3418e58e:	b098      	sub	sp, #96	@ 0x60
3418e590:	af00      	add	r7, sp, #0
3418e592:	60f8      	str	r0, [r7, #12]
3418e594:	60b9      	str	r1, [r7, #8]
3418e596:	607a      	str	r2, [r7, #4]
3418e598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418e59a:	68fb      	ldr	r3, [r7, #12]
3418e59c:	f107 0010 	add.w	r0, r7, #16
3418e5a0:	3304      	adds	r3, #4
3418e5a2:	224c      	movs	r2, #76	@ 0x4c
3418e5a4:	4619      	mov	r1, r3
3418e5a6:	f002 fc32 	bl	34190e0e <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth,
3418e5aa:	68fb      	ldr	r3, [r7, #12]
3418e5ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418e5b0:	6a39      	ldr	r1, [r7, #32]
3418e5b2:	225a      	movs	r2, #90	@ 0x5a
3418e5b4:	4618      	mov	r0, r3
3418e5b6:	f000 fbca 	bl	3418ed4e <XSPI_FormatCommand>
3418e5ba:	4603      	mov	r3, r0
3418e5bc:	61bb      	str	r3, [r7, #24]
                                             EXTMEM_READ_SFDP_COMMAND);

  s_command.Address     = Address;
3418e5be:	68bb      	ldr	r3, [r7, #8]
3418e5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength  = DataSize;
3418e5c2:	683b      	ldr	r3, [r7, #0]
3418e5c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* Nb of Dummy cycles for READ SFDP command does not correspond to SFDPDummyCycle field of SAL structure,
     as initialised after SFDP Header analysis */
  s_command.DummyCycles = EXTMEM_READ_SFDP_NB_DUMMY_CYCLES_DEFAULT;
3418e5c6:	2308      	movs	r3, #8
3418e5c8:	657b      	str	r3, [r7, #84]	@ 0x54

  if (s_command.AddressMode == HAL_XSPI_ADDRESS_1_LINE)
3418e5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418e5cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418e5d0:	d102      	bne.n	3418e5d8 <SAL_XSPI_GetSFDP+0x4c>
  {
    s_command.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418e5d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418e5d6:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3418e5d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418e5da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418e5de:	d103      	bne.n	3418e5e8 <SAL_XSPI_GetSFDP+0x5c>
  {
    s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
3418e5e0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418e5e4:	65bb      	str	r3, [r7, #88]	@ 0x58
3418e5e6:	e001      	b.n	3418e5ec <SAL_XSPI_GetSFDP+0x60>
  }
  else
  {
    s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
3418e5e8:	2300      	movs	r3, #0
3418e5ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e5ec:	68fb      	ldr	r3, [r7, #12]
3418e5ee:	681b      	ldr	r3, [r3, #0]
3418e5f0:	f107 0110 	add.w	r1, r7, #16
3418e5f4:	2264      	movs	r2, #100	@ 0x64
3418e5f6:	4618      	mov	r0, r3
3418e5f8:	f7fe fd5e 	bl	3418d0b8 <HAL_XSPI_Command>
3418e5fc:	4603      	mov	r3, r0
3418e5fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418e602:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e606:	2b00      	cmp	r3, #0
3418e608:	d10a      	bne.n	3418e620 <SAL_XSPI_GetSFDP+0x94>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e60a:	68fb      	ldr	r3, [r7, #12]
3418e60c:	681b      	ldr	r3, [r3, #0]
3418e60e:	2264      	movs	r2, #100	@ 0x64
3418e610:	6879      	ldr	r1, [r7, #4]
3418e612:	4618      	mov	r0, r3
3418e614:	f7fe fe53 	bl	3418d2be <HAL_XSPI_Receive>
3418e618:	4603      	mov	r3, r0
3418e61a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418e61e:	e000      	b.n	3418e622 <SAL_XSPI_GetSFDP+0x96>
    goto error;
3418e620:	bf00      	nop

error:
  if (retr != HAL_OK )
3418e622:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e626:	2b00      	cmp	r3, #0
3418e628:	d004      	beq.n	3418e634 <SAL_XSPI_GetSFDP+0xa8>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418e62a:	68fb      	ldr	r3, [r7, #12]
3418e62c:	681b      	ldr	r3, [r3, #0]
3418e62e:	4618      	mov	r0, r3
3418e630:	f7fe ffde 	bl	3418d5f0 <HAL_XSPI_Abort>
  }
  return retr;
3418e634:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418e638:	4618      	mov	r0, r3
3418e63a:	3760      	adds	r7, #96	@ 0x60
3418e63c:	46bd      	mov	sp, r7
3418e63e:	bd80      	pop	{r7, pc}

3418e640 <SAL_XSPI_GetId>:

HAL_StatusTypeDef SAL_XSPI_GetId(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t *Data, uint32_t DataSize)
{
3418e640:	b580      	push	{r7, lr}
3418e642:	b098      	sub	sp, #96	@ 0x60
3418e644:	af00      	add	r7, sp, #0
3418e646:	60f8      	str	r0, [r7, #12]
3418e648:	60b9      	str	r1, [r7, #8]
3418e64a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418e64c:	68fb      	ldr	r3, [r7, #12]
3418e64e:	f107 0010 	add.w	r0, r7, #16
3418e652:	3304      	adds	r3, #4
3418e654:	224c      	movs	r2, #76	@ 0x4c
3418e656:	4619      	mov	r1, r3
3418e658:	f002 fbd9 	bl	34190e0e <memcpy>

  /* Initialize the Read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth,
3418e65c:	68fb      	ldr	r3, [r7, #12]
3418e65e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418e662:	6a39      	ldr	r1, [r7, #32]
3418e664:	229f      	movs	r2, #159	@ 0x9f
3418e666:	4618      	mov	r0, r3
3418e668:	f000 fb71 	bl	3418ed4e <XSPI_FormatCommand>
3418e66c:	4603      	mov	r3, r0
3418e66e:	61bb      	str	r3, [r7, #24]
                                             EXTMEM_READ_JEDEC_ID_SPI_COMMAND);

  s_command.DataLength  = DataSize;
3418e670:	687b      	ldr	r3, [r7, #4]
3418e672:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
3418e674:	69fb      	ldr	r3, [r7, #28]
3418e676:	2b01      	cmp	r3, #1
3418e678:	d107      	bne.n	3418e68a <SAL_XSPI_GetId+0x4a>
  {
    s_command.AddressMode       = HAL_XSPI_ADDRESS_NONE;
3418e67a:	2300      	movs	r3, #0
3418e67c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DummyCycles       = 0;
3418e67e:	2300      	movs	r3, #0
3418e680:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with micron memory to read ID in 1S8S8S */
    s_command.DataMode = HAL_XSPI_DATA_1_LINE;
3418e682:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418e686:	64bb      	str	r3, [r7, #72]	@ 0x48
3418e688:	e030      	b.n	3418e6ec <SAL_XSPI_GetId+0xac>
  }
  else if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_4_LINES)
3418e68a:	69fb      	ldr	r3, [r7, #28]
3418e68c:	2b03      	cmp	r3, #3
3418e68e:	d107      	bne.n	3418e6a0 <SAL_XSPI_GetId+0x60>
  {
    s_command.AddressMode       = HAL_XSPI_ADDRESS_NONE;
3418e690:	2300      	movs	r3, #0
3418e692:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DummyCycles       = 0;
3418e694:	2300      	movs	r3, #0
3418e696:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with ISSI memory to read ID in 4S4S4S */
    s_command.DataMode          = HAL_XSPI_DATA_4_LINES;
3418e698:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3418e69c:	64bb      	str	r3, [r7, #72]	@ 0x48
3418e69e:	e025      	b.n	3418e6ec <SAL_XSPI_GetId+0xac>
  }
  else if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_8_LINES)
3418e6a0:	69fb      	ldr	r3, [r7, #28]
3418e6a2:	2b04      	cmp	r3, #4
3418e6a4:	d11e      	bne.n	3418e6e4 <SAL_XSPI_GetId+0xa4>
  {
    s_command.Address = 0;
3418e6a6:	2300      	movs	r3, #0
3418e6a8:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Specific case for Macronix memories : RDID is not Data DTR  */
    if ((Data[0] == 0xC2) && (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE))
3418e6aa:	68bb      	ldr	r3, [r7, #8]
3418e6ac:	781b      	ldrb	r3, [r3, #0]
3418e6ae:	2bc2      	cmp	r3, #194	@ 0xc2
3418e6b0:	d108      	bne.n	3418e6c4 <SAL_XSPI_GetId+0x84>
3418e6b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418e6b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418e6b8:	d104      	bne.n	3418e6c4 <SAL_XSPI_GetId+0x84>
    {
      s_command.DummyCycles       = 4;
3418e6ba:	2304      	movs	r3, #4
3418e6bc:	657b      	str	r3, [r7, #84]	@ 0x54
      s_command.DataDTRMode       = HAL_XSPI_DATA_DTR_DISABLE;
3418e6be:	2300      	movs	r3, #0
3418e6c0:	653b      	str	r3, [r7, #80]	@ 0x50
3418e6c2:	e013      	b.n	3418e6ec <SAL_XSPI_GetId+0xac>
    }
    /* Specific case for GigaDevice memories : RDID has no address even in Octal mode  */
    else if ((Data[0] == 0xC8) && (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE))
3418e6c4:	68bb      	ldr	r3, [r7, #8]
3418e6c6:	781b      	ldrb	r3, [r3, #0]
3418e6c8:	2bc8      	cmp	r3, #200	@ 0xc8
3418e6ca:	d108      	bne.n	3418e6de <SAL_XSPI_GetId+0x9e>
3418e6cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418e6ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418e6d2:	d104      	bne.n	3418e6de <SAL_XSPI_GetId+0x9e>
    {
      s_command.DummyCycles       = 8;
3418e6d4:	2308      	movs	r3, #8
3418e6d6:	657b      	str	r3, [r7, #84]	@ 0x54
      s_command.AddressMode       = HAL_XSPI_ADDRESS_NONE;
3418e6d8:	2300      	movs	r3, #0
3418e6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418e6dc:	e006      	b.n	3418e6ec <SAL_XSPI_GetId+0xac>
    }
    else
    {
      s_command.DummyCycles = 8;
3418e6de:	2308      	movs	r3, #8
3418e6e0:	657b      	str	r3, [r7, #84]	@ 0x54
3418e6e2:	e003      	b.n	3418e6ec <SAL_XSPI_GetId+0xac>
    }
    /* Required behavior to be confirmed on the other memories */
  }
  else
  {
    s_command.Address = 0;
3418e6e4:	2300      	movs	r3, #0
3418e6e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.DummyCycles = 8;
3418e6e8:	2308      	movs	r3, #8
3418e6ea:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e6ec:	68fb      	ldr	r3, [r7, #12]
3418e6ee:	681b      	ldr	r3, [r3, #0]
3418e6f0:	f107 0110 	add.w	r1, r7, #16
3418e6f4:	2264      	movs	r2, #100	@ 0x64
3418e6f6:	4618      	mov	r0, r3
3418e6f8:	f7fe fcde 	bl	3418d0b8 <HAL_XSPI_Command>
3418e6fc:	4603      	mov	r3, r0
3418e6fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418e702:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e706:	2b00      	cmp	r3, #0
3418e708:	d10a      	bne.n	3418e720 <SAL_XSPI_GetId+0xe0>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e70a:	68fb      	ldr	r3, [r7, #12]
3418e70c:	681b      	ldr	r3, [r3, #0]
3418e70e:	2264      	movs	r2, #100	@ 0x64
3418e710:	68b9      	ldr	r1, [r7, #8]
3418e712:	4618      	mov	r0, r3
3418e714:	f7fe fdd3 	bl	3418d2be <HAL_XSPI_Receive>
3418e718:	4603      	mov	r3, r0
3418e71a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418e71e:	e000      	b.n	3418e722 <SAL_XSPI_GetId+0xe2>
    goto error;
3418e720:	bf00      	nop

error:
  if (retr != HAL_OK )
3418e722:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e726:	2b00      	cmp	r3, #0
3418e728:	d004      	beq.n	3418e734 <SAL_XSPI_GetId+0xf4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418e72a:	68fb      	ldr	r3, [r7, #12]
3418e72c:	681b      	ldr	r3, [r3, #0]
3418e72e:	4618      	mov	r0, r3
3418e730:	f7fe ff5e 	bl	3418d5f0 <HAL_XSPI_Abort>
  }
  return retr;
3418e734:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418e738:	4618      	mov	r0, r3
3418e73a:	3760      	adds	r7, #96	@ 0x60
3418e73c:	46bd      	mov	sp, r7
3418e73e:	bd80      	pop	{r7, pc}

3418e740 <SAL_XSPI_Read>:

HAL_StatusTypeDef SAL_XSPI_Read(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
3418e740:	b580      	push	{r7, lr}
3418e742:	b098      	sub	sp, #96	@ 0x60
3418e744:	af00      	add	r7, sp, #0
3418e746:	60f8      	str	r0, [r7, #12]
3418e748:	607a      	str	r2, [r7, #4]
3418e74a:	603b      	str	r3, [r7, #0]
3418e74c:	460b      	mov	r3, r1
3418e74e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418e750:	68fb      	ldr	r3, [r7, #12]
3418e752:	f107 0010 	add.w	r0, r7, #16
3418e756:	3304      	adds	r3, #4
3418e758:	224c      	movs	r2, #76	@ 0x4c
3418e75a:	4619      	mov	r1, r3
3418e75c:	f002 fb57 	bl	34190e0e <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418e760:	68fb      	ldr	r3, [r7, #12]
3418e762:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418e766:	6a39      	ldr	r1, [r7, #32]
3418e768:	7afa      	ldrb	r2, [r7, #11]
3418e76a:	4618      	mov	r0, r3
3418e76c:	f000 faef 	bl	3418ed4e <XSPI_FormatCommand>
3418e770:	4603      	mov	r3, r0
3418e772:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
3418e774:	687b      	ldr	r3, [r7, #4]
3418e776:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
3418e778:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418e77a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DTR management for single/dual/quad */
  switch(SalXspi->PhyLink)
3418e77c:	68fb      	ldr	r3, [r7, #12]
3418e77e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
3418e782:	2b05      	cmp	r3, #5
3418e784:	d006      	beq.n	3418e794 <SAL_XSPI_Read+0x54>
3418e786:	2b05      	cmp	r3, #5
3418e788:	dc1a      	bgt.n	3418e7c0 <SAL_XSPI_Read+0x80>
3418e78a:	2b01      	cmp	r3, #1
3418e78c:	d014      	beq.n	3418e7b8 <SAL_XSPI_Read+0x78>
3418e78e:	2b02      	cmp	r3, #2
3418e790:	d00b      	beq.n	3418e7aa <SAL_XSPI_Read+0x6a>
     s_command.DataMode       = HAL_XSPI_DATA_2_LINES;
   break;
   }
   default :{
     /* keep default parameters */
   break;
3418e792:	e015      	b.n	3418e7c0 <SAL_XSPI_Read+0x80>
     s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418e794:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418e798:	637b      	str	r3, [r7, #52]	@ 0x34
     s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_ENABLE;
3418e79a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418e79e:	653b      	str	r3, [r7, #80]	@ 0x50
     s_command.DummyCycles    = SalXspi->DTRDummyCycle;
3418e7a0:	68fb      	ldr	r3, [r7, #12]
3418e7a2:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
3418e7a6:	657b      	str	r3, [r7, #84]	@ 0x54
   break;
3418e7a8:	e00b      	b.n	3418e7c2 <SAL_XSPI_Read+0x82>
     s_command.AddressMode    = HAL_XSPI_ADDRESS_2_LINES;
3418e7aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418e7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
     s_command.DataMode       = HAL_XSPI_DATA_2_LINES;
3418e7b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
3418e7b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
3418e7b6:	e004      	b.n	3418e7c2 <SAL_XSPI_Read+0x82>
     s_command.DataMode       = HAL_XSPI_DATA_2_LINES;
3418e7b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
3418e7bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
3418e7be:	e000      	b.n	3418e7c2 <SAL_XSPI_Read+0x82>
   break;
3418e7c0:	bf00      	nop
   }
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e7c2:	68fb      	ldr	r3, [r7, #12]
3418e7c4:	681b      	ldr	r3, [r3, #0]
3418e7c6:	f107 0110 	add.w	r1, r7, #16
3418e7ca:	2264      	movs	r2, #100	@ 0x64
3418e7cc:	4618      	mov	r0, r3
3418e7ce:	f7fe fc73 	bl	3418d0b8 <HAL_XSPI_Command>
3418e7d2:	4603      	mov	r3, r0
3418e7d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (retr  != HAL_OK)
3418e7d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e7dc:	2b00      	cmp	r3, #0
3418e7de:	d107      	bne.n	3418e7f0 <SAL_XSPI_Read+0xb0>
  {
    goto error;
  }

  /* read the data */
  retr = XSPI_Receive(SalXspi, Data);
3418e7e0:	6839      	ldr	r1, [r7, #0]
3418e7e2:	68f8      	ldr	r0, [r7, #12]
3418e7e4:	f000 faef 	bl	3418edc6 <XSPI_Receive>
3418e7e8:	4603      	mov	r3, r0
3418e7ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418e7ee:	e000      	b.n	3418e7f2 <SAL_XSPI_Read+0xb2>
    goto error;
3418e7f0:	bf00      	nop

error:
  if (retr != HAL_OK )
3418e7f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e7f6:	2b00      	cmp	r3, #0
3418e7f8:	d004      	beq.n	3418e804 <SAL_XSPI_Read+0xc4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418e7fa:	68fb      	ldr	r3, [r7, #12]
3418e7fc:	681b      	ldr	r3, [r3, #0]
3418e7fe:	4618      	mov	r0, r3
3418e800:	f7fe fef6 	bl	3418d5f0 <HAL_XSPI_Abort>
  }
  return retr;
3418e804:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418e808:	4618      	mov	r0, r3
3418e80a:	3760      	adds	r7, #96	@ 0x60
3418e80c:	46bd      	mov	sp, r7
3418e80e:	bd80      	pop	{r7, pc}

3418e810 <SAL_XSPI_Write>:

HAL_StatusTypeDef SAL_XSPI_Write(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, const uint8_t *Data, uint32_t DataSize)
{
3418e810:	b580      	push	{r7, lr}
3418e812:	b098      	sub	sp, #96	@ 0x60
3418e814:	af00      	add	r7, sp, #0
3418e816:	60f8      	str	r0, [r7, #12]
3418e818:	607a      	str	r2, [r7, #4]
3418e81a:	603b      	str	r3, [r7, #0]
3418e81c:	460b      	mov	r3, r1
3418e81e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418e820:	68fb      	ldr	r3, [r7, #12]
3418e822:	f107 0010 	add.w	r0, r7, #16
3418e826:	3304      	adds	r3, #4
3418e828:	224c      	movs	r2, #76	@ 0x4c
3418e82a:	4619      	mov	r1, r3
3418e82c:	f002 faef 	bl	34190e0e <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418e830:	68fb      	ldr	r3, [r7, #12]
3418e832:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418e836:	6a39      	ldr	r1, [r7, #32]
3418e838:	7afa      	ldrb	r2, [r7, #11]
3418e83a:	4618      	mov	r0, r3
3418e83c:	f000 fa87 	bl	3418ed4e <XSPI_FormatCommand>
3418e840:	4603      	mov	r3, r0
3418e842:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
3418e844:	687b      	ldr	r3, [r7, #4]
3418e846:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
3418e848:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418e84a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0u;
3418e84c:	2300      	movs	r3, #0
3418e84e:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode           = HAL_XSPI_DQS_DISABLE;
3418e850:	2300      	movs	r3, #0
3418e852:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e854:	68fb      	ldr	r3, [r7, #12]
3418e856:	681b      	ldr	r3, [r3, #0]
3418e858:	f107 0110 	add.w	r1, r7, #16
3418e85c:	2264      	movs	r2, #100	@ 0x64
3418e85e:	4618      	mov	r0, r3
3418e860:	f7fe fc2a 	bl	3418d0b8 <HAL_XSPI_Command>
3418e864:	4603      	mov	r3, r0
3418e866:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (HAL_OK != retr)
3418e86a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e86e:	2b00      	cmp	r3, #0
3418e870:	d107      	bne.n	3418e882 <SAL_XSPI_Write+0x72>
  {
    goto error;
  }

  /* transmit data */
  retr = XSPI_Transmit(SalXspi, Data);
3418e872:	6839      	ldr	r1, [r7, #0]
3418e874:	68f8      	ldr	r0, [r7, #12]
3418e876:	f000 fa93 	bl	3418eda0 <XSPI_Transmit>
3418e87a:	4603      	mov	r3, r0
3418e87c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418e880:	e000      	b.n	3418e884 <SAL_XSPI_Write+0x74>
    goto error;
3418e882:	bf00      	nop

error:
  if (retr != HAL_OK )
3418e884:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e888:	2b00      	cmp	r3, #0
3418e88a:	d004      	beq.n	3418e896 <SAL_XSPI_Write+0x86>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418e88c:	68fb      	ldr	r3, [r7, #12]
3418e88e:	681b      	ldr	r3, [r3, #0]
3418e890:	4618      	mov	r0, r3
3418e892:	f7fe fead 	bl	3418d5f0 <HAL_XSPI_Abort>
  }
  return retr;
3418e896:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418e89a:	4618      	mov	r0, r3
3418e89c:	3760      	adds	r7, #96	@ 0x60
3418e89e:	46bd      	mov	sp, r7
3418e8a0:	bd80      	pop	{r7, pc}

3418e8a2 <SAL_XSPI_CommandSendData>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_CommandSendData(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
3418e8a2:	b580      	push	{r7, lr}
3418e8a4:	b098      	sub	sp, #96	@ 0x60
3418e8a6:	af00      	add	r7, sp, #0
3418e8a8:	60f8      	str	r0, [r7, #12]
3418e8aa:	607a      	str	r2, [r7, #4]
3418e8ac:	461a      	mov	r2, r3
3418e8ae:	460b      	mov	r3, r1
3418e8b0:	72fb      	strb	r3, [r7, #11]
3418e8b2:	4613      	mov	r3, r2
3418e8b4:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418e8b6:	68fb      	ldr	r3, [r7, #12]
3418e8b8:	f107 0010 	add.w	r0, r7, #16
3418e8bc:	3304      	adds	r3, #4
3418e8be:	224c      	movs	r2, #76	@ 0x4c
3418e8c0:	4619      	mov	r1, r3
3418e8c2:	f002 faa4 	bl	34190e0e <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418e8c6:	68fb      	ldr	r3, [r7, #12]
3418e8c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418e8cc:	6a39      	ldr	r1, [r7, #32]
3418e8ce:	7afa      	ldrb	r2, [r7, #11]
3418e8d0:	4618      	mov	r0, r3
3418e8d2:	f000 fa3c 	bl	3418ed4e <XSPI_FormatCommand>
3418e8d6:	4603      	mov	r3, r0
3418e8d8:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3418e8da:	2300      	movs	r3, #0
3418e8dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0U;
3418e8de:	2300      	movs	r3, #0
3418e8e0:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418e8e2:	893b      	ldrh	r3, [r7, #8]
3418e8e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418e8e6:	2300      	movs	r3, #0
3418e8e8:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
3418e8ea:	893b      	ldrh	r3, [r7, #8]
3418e8ec:	2b00      	cmp	r3, #0
3418e8ee:	d101      	bne.n	3418e8f4 <SAL_XSPI_CommandSendData+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
3418e8f0:	2300      	movs	r3, #0
3418e8f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e8f4:	68fb      	ldr	r3, [r7, #12]
3418e8f6:	681b      	ldr	r3, [r3, #0]
3418e8f8:	f107 0110 	add.w	r1, r7, #16
3418e8fc:	2264      	movs	r2, #100	@ 0x64
3418e8fe:	4618      	mov	r0, r3
3418e900:	f7fe fbda 	bl	3418d0b8 <HAL_XSPI_Command>
3418e904:	4603      	mov	r3, r0
3418e906:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
3418e90a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e90e:	2b00      	cmp	r3, #0
3418e910:	d10c      	bne.n	3418e92c <SAL_XSPI_CommandSendData+0x8a>
3418e912:	893b      	ldrh	r3, [r7, #8]
3418e914:	2b00      	cmp	r3, #0
3418e916:	d009      	beq.n	3418e92c <SAL_XSPI_CommandSendData+0x8a>
  {
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e918:	68fb      	ldr	r3, [r7, #12]
3418e91a:	681b      	ldr	r3, [r3, #0]
3418e91c:	2264      	movs	r2, #100	@ 0x64
3418e91e:	6879      	ldr	r1, [r7, #4]
3418e920:	4618      	mov	r0, r3
3418e922:	f7fe fc59 	bl	3418d1d8 <HAL_XSPI_Transmit>
3418e926:	4603      	mov	r3, r0
3418e928:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418e92c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e930:	2b00      	cmp	r3, #0
3418e932:	d004      	beq.n	3418e93e <SAL_XSPI_CommandSendData+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418e934:	68fb      	ldr	r3, [r7, #12]
3418e936:	681b      	ldr	r3, [r3, #0]
3418e938:	4618      	mov	r0, r3
3418e93a:	f7fe fe59 	bl	3418d5f0 <HAL_XSPI_Abort>
  }
  return retr;
3418e93e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418e942:	4618      	mov	r0, r3
3418e944:	3760      	adds	r7, #96	@ 0x60
3418e946:	46bd      	mov	sp, r7
3418e948:	bd80      	pop	{r7, pc}

3418e94a <SAL_XSPI_SendReadCommand>:

HAL_StatusTypeDef SAL_XSPI_SendReadCommand(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
3418e94a:	b580      	push	{r7, lr}
3418e94c:	b098      	sub	sp, #96	@ 0x60
3418e94e:	af00      	add	r7, sp, #0
3418e950:	60f8      	str	r0, [r7, #12]
3418e952:	607a      	str	r2, [r7, #4]
3418e954:	461a      	mov	r2, r3
3418e956:	460b      	mov	r3, r1
3418e958:	72fb      	strb	r3, [r7, #11]
3418e95a:	4613      	mov	r3, r2
3418e95c:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418e95e:	68fb      	ldr	r3, [r7, #12]
3418e960:	f107 0010 	add.w	r0, r7, #16
3418e964:	3304      	adds	r3, #4
3418e966:	224c      	movs	r2, #76	@ 0x4c
3418e968:	4619      	mov	r1, r3
3418e96a:	f002 fa50 	bl	34190e0e <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the reading of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418e96e:	68fb      	ldr	r3, [r7, #12]
3418e970:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418e974:	6a39      	ldr	r1, [r7, #32]
3418e976:	7afa      	ldrb	r2, [r7, #11]
3418e978:	4618      	mov	r0, r3
3418e97a:	f000 f9e8 	bl	3418ed4e <XSPI_FormatCommand>
3418e97e:	4603      	mov	r3, r0
3418e980:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3418e982:	2300      	movs	r3, #0
3418e984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0u;
3418e986:	2300      	movs	r3, #0
3418e988:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418e98a:	893b      	ldrh	r3, [r7, #8]
3418e98c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418e98e:	2300      	movs	r3, #0
3418e990:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
3418e992:	893b      	ldrh	r3, [r7, #8]
3418e994:	2b00      	cmp	r3, #0
3418e996:	d101      	bne.n	3418e99c <SAL_XSPI_SendReadCommand+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
3418e998:	2300      	movs	r3, #0
3418e99a:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e99c:	68fb      	ldr	r3, [r7, #12]
3418e99e:	681b      	ldr	r3, [r3, #0]
3418e9a0:	f107 0110 	add.w	r1, r7, #16
3418e9a4:	2264      	movs	r2, #100	@ 0x64
3418e9a6:	4618      	mov	r0, r3
3418e9a8:	f7fe fb86 	bl	3418d0b8 <HAL_XSPI_Command>
3418e9ac:	4603      	mov	r3, r0
3418e9ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
3418e9b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e9b6:	2b00      	cmp	r3, #0
3418e9b8:	d10c      	bne.n	3418e9d4 <SAL_XSPI_SendReadCommand+0x8a>
3418e9ba:	893b      	ldrh	r3, [r7, #8]
3418e9bc:	2b00      	cmp	r3, #0
3418e9be:	d009      	beq.n	3418e9d4 <SAL_XSPI_SendReadCommand+0x8a>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e9c0:	68fb      	ldr	r3, [r7, #12]
3418e9c2:	681b      	ldr	r3, [r3, #0]
3418e9c4:	2264      	movs	r2, #100	@ 0x64
3418e9c6:	6879      	ldr	r1, [r7, #4]
3418e9c8:	4618      	mov	r0, r3
3418e9ca:	f7fe fc78 	bl	3418d2be <HAL_XSPI_Receive>
3418e9ce:	4603      	mov	r3, r0
3418e9d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418e9d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e9d8:	2b00      	cmp	r3, #0
3418e9da:	d004      	beq.n	3418e9e6 <SAL_XSPI_SendReadCommand+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418e9dc:	68fb      	ldr	r3, [r7, #12]
3418e9de:	681b      	ldr	r3, [r3, #0]
3418e9e0:	4618      	mov	r0, r3
3418e9e2:	f7fe fe05 	bl	3418d5f0 <HAL_XSPI_Abort>
  }
  return retr;
3418e9e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418e9ea:	4618      	mov	r0, r3
3418e9ec:	3760      	adds	r7, #96	@ 0x60
3418e9ee:	46bd      	mov	sp, r7
3418e9f0:	bd80      	pop	{r7, pc}

3418e9f2 <SAL_XSPI_CommandSendReadAddress>:

HAL_StatusTypeDef SAL_XSPI_CommandSendReadAddress(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                                  uint32_t Address, uint8_t *Data, uint16_t DataSize,
                                                  uint8_t ManuId)
{
3418e9f2:	b580      	push	{r7, lr}
3418e9f4:	b098      	sub	sp, #96	@ 0x60
3418e9f6:	af00      	add	r7, sp, #0
3418e9f8:	60f8      	str	r0, [r7, #12]
3418e9fa:	607a      	str	r2, [r7, #4]
3418e9fc:	603b      	str	r3, [r7, #0]
3418e9fe:	460b      	mov	r3, r1
3418ea00:	72fb      	strb	r3, [r7, #11]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418ea02:	68fb      	ldr	r3, [r7, #12]
3418ea04:	f107 0010 	add.w	r0, r7, #16
3418ea08:	3304      	adds	r3, #4
3418ea0a:	224c      	movs	r2, #76	@ 0x4c
3418ea0c:	4619      	mov	r1, r3
3418ea0e:	f002 f9fe 	bl	34190e0e <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the reading of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418ea12:	68fb      	ldr	r3, [r7, #12]
3418ea14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418ea18:	6a39      	ldr	r1, [r7, #32]
3418ea1a:	7afa      	ldrb	r2, [r7, #11]
3418ea1c:	4618      	mov	r0, r3
3418ea1e:	f000 f996 	bl	3418ed4e <XSPI_FormatCommand>
3418ea22:	4603      	mov	r3, r0
3418ea24:	61bb      	str	r3, [r7, #24]

  s_command.Address            = Address;
3418ea26:	687b      	ldr	r3, [r7, #4]
3418ea28:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DummyCycles        = SalXspi->SFDPDummyCycle;
3418ea2a:	68fb      	ldr	r3, [r7, #12]
3418ea2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
3418ea30:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418ea32:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
3418ea36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* Specific case for Macronix memories : RDID and RDCR are not Data DTR  */
  if ((ManuId == EXTMEM_MANFACTURER_MACRONIX) && (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE))
3418ea38:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
3418ea3c:	2bc2      	cmp	r3, #194	@ 0xc2
3418ea3e:	d106      	bne.n	3418ea4e <SAL_XSPI_CommandSendReadAddress+0x5c>
3418ea40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418ea42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418ea46:	d102      	bne.n	3418ea4e <SAL_XSPI_CommandSendReadAddress+0x5c>
  {
    s_command.DataDTRMode      = HAL_XSPI_DATA_DTR_DISABLE;
3418ea48:	2300      	movs	r3, #0
3418ea4a:	653b      	str	r3, [r7, #80]	@ 0x50
3418ea4c:	e00e      	b.n	3418ea6c <SAL_XSPI_CommandSendReadAddress+0x7a>
  }
  /* Specific case for GigaDevice memories : Read Configuration Register are not Data DTR  */
  else if ((ManuId == 0xC8) && (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE))
3418ea4e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
3418ea52:	2bc8      	cmp	r3, #200	@ 0xc8
3418ea54:	d108      	bne.n	3418ea68 <SAL_XSPI_CommandSendReadAddress+0x76>
3418ea56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418ea58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418ea5c:	d104      	bne.n	3418ea68 <SAL_XSPI_CommandSendReadAddress+0x76>
  {
    s_command.DataDTRMode      = HAL_XSPI_DATA_DTR_DISABLE;
3418ea5e:	2300      	movs	r3, #0
3418ea60:	653b      	str	r3, [r7, #80]	@ 0x50
    s_command.DQSMode          = HAL_XSPI_DQS_DISABLE;
3418ea62:	2300      	movs	r3, #0
3418ea64:	65bb      	str	r3, [r7, #88]	@ 0x58
3418ea66:	e001      	b.n	3418ea6c <SAL_XSPI_CommandSendReadAddress+0x7a>
  }
  else
  {
    s_command.DQSMode          = HAL_XSPI_DQS_DISABLE;
3418ea68:	2300      	movs	r3, #0
3418ea6a:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418ea6c:	68fb      	ldr	r3, [r7, #12]
3418ea6e:	681b      	ldr	r3, [r3, #0]
3418ea70:	f107 0110 	add.w	r1, r7, #16
3418ea74:	2264      	movs	r2, #100	@ 0x64
3418ea76:	4618      	mov	r0, r3
3418ea78:	f7fe fb1e 	bl	3418d0b8 <HAL_XSPI_Command>
3418ea7c:	4603      	mov	r3, r0
3418ea7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ( retr == HAL_OK)
3418ea82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418ea86:	2b00      	cmp	r3, #0
3418ea88:	d109      	bne.n	3418ea9e <SAL_XSPI_CommandSendReadAddress+0xac>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418ea8a:	68fb      	ldr	r3, [r7, #12]
3418ea8c:	681b      	ldr	r3, [r3, #0]
3418ea8e:	2264      	movs	r2, #100	@ 0x64
3418ea90:	6839      	ldr	r1, [r7, #0]
3418ea92:	4618      	mov	r0, r3
3418ea94:	f7fe fc13 	bl	3418d2be <HAL_XSPI_Receive>
3418ea98:	4603      	mov	r3, r0
3418ea9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418ea9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418eaa2:	2b00      	cmp	r3, #0
3418eaa4:	d004      	beq.n	3418eab0 <SAL_XSPI_CommandSendReadAddress+0xbe>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418eaa6:	68fb      	ldr	r3, [r7, #12]
3418eaa8:	681b      	ldr	r3, [r3, #0]
3418eaaa:	4618      	mov	r0, r3
3418eaac:	f7fe fda0 	bl	3418d5f0 <HAL_XSPI_Abort>
  }
  return retr;
3418eab0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418eab4:	4618      	mov	r0, r3
3418eab6:	3760      	adds	r7, #96	@ 0x60
3418eab8:	46bd      	mov	sp, r7
3418eaba:	bd80      	pop	{r7, pc}

3418eabc <SAL_XSPI_CheckStatusRegister>:

HAL_StatusTypeDef SAL_XSPI_CheckStatusRegister(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address,
                                               uint8_t MatchValue, uint8_t MatchMask, uint8_t ManuId,
                                               uint32_t Timeout)
{
3418eabc:	b580      	push	{r7, lr}
3418eabe:	b09e      	sub	sp, #120	@ 0x78
3418eac0:	af00      	add	r7, sp, #0
3418eac2:	60f8      	str	r0, [r7, #12]
3418eac4:	607a      	str	r2, [r7, #4]
3418eac6:	461a      	mov	r2, r3
3418eac8:	460b      	mov	r3, r1
3418eaca:	72fb      	strb	r3, [r7, #11]
3418eacc:	4613      	mov	r3, r2
3418eace:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418ead0:	68fb      	ldr	r3, [r7, #12]
3418ead2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
3418ead6:	3304      	adds	r3, #4
3418ead8:	224c      	movs	r2, #76	@ 0x4c
3418eada:	4619      	mov	r1, r3
3418eadc:	f002 f997 	bl	34190e0e <memcpy>
  XSPI_AutoPollingTypeDef  s_config = {
3418eae0:	7abb      	ldrb	r3, [r7, #10]
3418eae2:	617b      	str	r3, [r7, #20]
3418eae4:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
3418eae8:	61bb      	str	r3, [r7, #24]
3418eaea:	2300      	movs	r3, #0
3418eaec:	61fb      	str	r3, [r7, #28]
3418eaee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
3418eaf2:	623b      	str	r3, [r7, #32]
3418eaf4:	2310      	movs	r3, #16
3418eaf6:	627b      	str	r3, [r7, #36]	@ 0x24
                                       .IntervalTime  = 0x10
                                      };
  HAL_StatusTypeDef retr;

  /* Initialize the reading of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418eaf8:	68fb      	ldr	r3, [r7, #12]
3418eafa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418eafe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
3418eb00:	7afa      	ldrb	r2, [r7, #11]
3418eb02:	4618      	mov	r0, r3
3418eb04:	f000 f923 	bl	3418ed4e <XSPI_FormatCommand>
3418eb08:	4603      	mov	r3, r0
3418eb0a:	633b      	str	r3, [r7, #48]	@ 0x30

  s_command.DataLength     = 1u;
3418eb0c:	2301      	movs	r3, #1
3418eb0e:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode        = HAL_XSPI_DQS_DISABLE;
3418eb10:	2300      	movs	r3, #0
3418eb12:	673b      	str	r3, [r7, #112]	@ 0x70

  if (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
3418eb14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418eb16:	2b01      	cmp	r3, #1
3418eb18:	d106      	bne.n	3418eb28 <SAL_XSPI_CheckStatusRegister+0x6c>
  {
    /* patch cypress to force 1 line on status read */
    s_command.DataMode    = HAL_XSPI_DATA_1_LINE;
3418eb1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418eb1e:	663b      	str	r3, [r7, #96]	@ 0x60
    s_command.AddressMode = HAL_XSPI_DATA_NONE;
3418eb20:	2300      	movs	r3, #0
3418eb22:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.DummyCycles = 0u;
3418eb24:	2300      	movs	r3, #0
3418eb26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* @ is used only in 8 LINES format */
  if (s_command.DataMode == HAL_XSPI_DATA_8_LINES)
3418eb28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
3418eb2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418eb2e:	d114      	bne.n	3418eb5a <SAL_XSPI_CheckStatusRegister+0x9e>
  {
    /* Specific case for Macronix memories : RDID and RDCR are not Data DTR  */
    if ((ManuId == EXTMEM_MANFACTURER_MACRONIX) && (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE))
3418eb30:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
3418eb34:	2bc2      	cmp	r3, #194	@ 0xc2
3418eb36:	d108      	bne.n	3418eb4a <SAL_XSPI_CheckStatusRegister+0x8e>
3418eb38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418eb3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418eb3e:	d104      	bne.n	3418eb4a <SAL_XSPI_CheckStatusRegister+0x8e>
    {
      s_command.DQSMode        = HAL_XSPI_DQS_ENABLE;
3418eb40:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418eb44:	673b      	str	r3, [r7, #112]	@ 0x70
      s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_DISABLE;
3418eb46:	2300      	movs	r3, #0
3418eb48:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    s_command.AddressMode    = HAL_XSPI_ADDRESS_8_LINES;
3418eb4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418eb4e:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
3418eb50:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418eb54:	64bb      	str	r3, [r7, #72]	@ 0x48
    s_command.Address        = Address;
3418eb56:	687b      	ldr	r3, [r7, #4]
3418eb58:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418eb5a:	68fb      	ldr	r3, [r7, #12]
3418eb5c:	681b      	ldr	r3, [r3, #0]
3418eb5e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
3418eb62:	2264      	movs	r2, #100	@ 0x64
3418eb64:	4618      	mov	r0, r3
3418eb66:	f7fe faa7 	bl	3418d0b8 <HAL_XSPI_Command>
3418eb6a:	4603      	mov	r3, r0
3418eb6c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if ( retr == HAL_OK)
3418eb70:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
3418eb74:	2b00      	cmp	r3, #0
3418eb76:	d10b      	bne.n	3418eb90 <SAL_XSPI_CheckStatusRegister+0xd4>
  {
    retr = HAL_XSPI_AutoPolling(SalXspi->hxspi, &s_config, Timeout);
3418eb78:	68fb      	ldr	r3, [r7, #12]
3418eb7a:	681b      	ldr	r3, [r3, #0]
3418eb7c:	f107 0114 	add.w	r1, r7, #20
3418eb80:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
3418eb84:	4618      	mov	r0, r3
3418eb86:	f7fe fc3d 	bl	3418d404 <HAL_XSPI_AutoPolling>
3418eb8a:	4603      	mov	r3, r0
3418eb8c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    DEBUG_AUTOPOLLING(SalXspi->hxspi->Instance->DR, s_config.MatchValue, s_config.MatchMask)
  }

  if (retr != HAL_OK )
3418eb90:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
3418eb94:	2b00      	cmp	r3, #0
3418eb96:	d004      	beq.n	3418eba2 <SAL_XSPI_CheckStatusRegister+0xe6>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418eb98:	68fb      	ldr	r3, [r7, #12]
3418eb9a:	681b      	ldr	r3, [r3, #0]
3418eb9c:	4618      	mov	r0, r3
3418eb9e:	f7fe fd27 	bl	3418d5f0 <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
3418eba2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
3418eba6:	4618      	mov	r0, r3
3418eba8:	3778      	adds	r7, #120	@ 0x78
3418ebaa:	46bd      	mov	sp, r7
3418ebac:	bd80      	pop	{r7, pc}

3418ebae <SAL_XSPI_EnableMapMode>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_EnableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t CommandRead, uint8_t DummyRead,
                                         uint8_t CommandWrite, uint8_t DummyWrite)
{
3418ebae:	b580      	push	{r7, lr}
3418ebb0:	b09a      	sub	sp, #104	@ 0x68
3418ebb2:	af00      	add	r7, sp, #0
3418ebb4:	6078      	str	r0, [r7, #4]
3418ebb6:	4608      	mov	r0, r1
3418ebb8:	4611      	mov	r1, r2
3418ebba:	461a      	mov	r2, r3
3418ebbc:	4603      	mov	r3, r0
3418ebbe:	70fb      	strb	r3, [r7, #3]
3418ebc0:	460b      	mov	r3, r1
3418ebc2:	70bb      	strb	r3, [r7, #2]
3418ebc4:	4613      	mov	r3, r2
3418ebc6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418ebc8:	687b      	ldr	r3, [r7, #4]
3418ebca:	f107 0018 	add.w	r0, r7, #24
3418ebce:	3304      	adds	r3, #4
3418ebd0:	224c      	movs	r2, #76	@ 0x4c
3418ebd2:	4619      	mov	r1, r3
3418ebd4:	f002 f91b 	bl	34190e0e <memcpy>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
3418ebd8:	f107 0308 	add.w	r3, r7, #8
3418ebdc:	2200      	movs	r2, #0
3418ebde:	601a      	str	r2, [r3, #0]
3418ebe0:	605a      	str	r2, [r3, #4]
3418ebe2:	609a      	str	r2, [r3, #8]
3418ebe4:	60da      	str	r2, [r3, #12]

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3418ebe6:	2301      	movs	r3, #1
3418ebe8:	61bb      	str	r3, [r7, #24]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandRead);
3418ebea:	687b      	ldr	r3, [r7, #4]
3418ebec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418ebf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418ebf2:	78fa      	ldrb	r2, [r7, #3]
3418ebf4:	4618      	mov	r0, r3
3418ebf6:	f000 f8aa 	bl	3418ed4e <XSPI_FormatCommand>
3418ebfa:	4603      	mov	r3, r0
3418ebfc:	623b      	str	r3, [r7, #32]
  s_command.DummyCycles = DummyRead;
3418ebfe:	78bb      	ldrb	r3, [r7, #2]
3418ec00:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418ec02:	687b      	ldr	r3, [r7, #4]
3418ec04:	681b      	ldr	r3, [r3, #0]
3418ec06:	f107 0118 	add.w	r1, r7, #24
3418ec0a:	2264      	movs	r2, #100	@ 0x64
3418ec0c:	4618      	mov	r0, r3
3418ec0e:	f7fe fa53 	bl	3418d0b8 <HAL_XSPI_Command>
3418ec12:	4603      	mov	r3, r0
3418ec14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if ( retr  != HAL_OK)
3418ec18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418ec1c:	2b00      	cmp	r3, #0
3418ec1e:	d12d      	bne.n	3418ec7c <SAL_XSPI_EnableMapMode+0xce>
  {
    goto error;
  }

  /* Initialize the read ID command */
  s_command.OperationType     = HAL_XSPI_OPTYPE_WRITE_CFG;
3418ec20:	2302      	movs	r3, #2
3418ec22:	61bb      	str	r3, [r7, #24]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandWrite);
3418ec24:	687b      	ldr	r3, [r7, #4]
3418ec26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418ec2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418ec2c:	787a      	ldrb	r2, [r7, #1]
3418ec2e:	4618      	mov	r0, r3
3418ec30:	f000 f88d 	bl	3418ed4e <XSPI_FormatCommand>
3418ec34:	4603      	mov	r3, r0
3418ec36:	623b      	str	r3, [r7, #32]
  s_command.DummyCycles = DummyWrite;
3418ec38:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
3418ec3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418ec3e:	687b      	ldr	r3, [r7, #4]
3418ec40:	681b      	ldr	r3, [r3, #0]
3418ec42:	f107 0118 	add.w	r1, r7, #24
3418ec46:	2264      	movs	r2, #100	@ 0x64
3418ec48:	4618      	mov	r0, r3
3418ec4a:	f7fe fa35 	bl	3418d0b8 <HAL_XSPI_Command>
3418ec4e:	4603      	mov	r3, r0
3418ec50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if ( retr  != HAL_OK)
3418ec54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418ec58:	2b00      	cmp	r3, #0
3418ec5a:	d111      	bne.n	3418ec80 <SAL_XSPI_EnableMapMode+0xd2>
  {
    goto error;
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation  = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3418ec5c:	2300      	movs	r3, #0
3418ec5e:	60bb      	str	r3, [r7, #8]
  sMemMappedCfg.TimeoutPeriodClock = 0x50;
3418ec60:	2350      	movs	r3, #80	@ 0x50
3418ec62:	60fb      	str	r3, [r7, #12]
  retr = HAL_XSPI_MemoryMapped(SalXspi->hxspi, &sMemMappedCfg);
3418ec64:	687b      	ldr	r3, [r7, #4]
3418ec66:	681b      	ldr	r3, [r3, #0]
3418ec68:	f107 0208 	add.w	r2, r7, #8
3418ec6c:	4611      	mov	r1, r2
3418ec6e:	4618      	mov	r0, r3
3418ec70:	f7fe fc52 	bl	3418d518 <HAL_XSPI_MemoryMapped>
3418ec74:	4603      	mov	r3, r0
3418ec76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
3418ec7a:	e002      	b.n	3418ec82 <SAL_XSPI_EnableMapMode+0xd4>
    goto error;
3418ec7c:	bf00      	nop
3418ec7e:	e000      	b.n	3418ec82 <SAL_XSPI_EnableMapMode+0xd4>
    goto error;
3418ec80:	bf00      	nop

error:
  if (retr != HAL_OK )
3418ec82:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418ec86:	2b00      	cmp	r3, #0
3418ec88:	d004      	beq.n	3418ec94 <SAL_XSPI_EnableMapMode+0xe6>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418ec8a:	687b      	ldr	r3, [r7, #4]
3418ec8c:	681b      	ldr	r3, [r3, #0]
3418ec8e:	4618      	mov	r0, r3
3418ec90:	f7fe fcae 	bl	3418d5f0 <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
3418ec94:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
3418ec98:	4618      	mov	r0, r3
3418ec9a:	3768      	adds	r7, #104	@ 0x68
3418ec9c:	46bd      	mov	sp, r7
3418ec9e:	bd80      	pop	{r7, pc}

3418eca0 <SAL_XSPI_DisableMapMode>:

HAL_StatusTypeDef SAL_XSPI_DisableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi)
{
3418eca0:	b580      	push	{r7, lr}
3418eca2:	b082      	sub	sp, #8
3418eca4:	af00      	add	r7, sp, #0
3418eca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
3418eca8:	f3bf 8f4f 	dsb	sy
}
3418ecac:	bf00      	nop
  __DSB();
  return HAL_XSPI_Abort(SalXspi->hxspi);
3418ecae:	687b      	ldr	r3, [r7, #4]
3418ecb0:	681b      	ldr	r3, [r3, #0]
3418ecb2:	4618      	mov	r0, r3
3418ecb4:	f7fe fc9c 	bl	3418d5f0 <HAL_XSPI_Abort>
3418ecb8:	4603      	mov	r3, r0
}
3418ecba:	4618      	mov	r0, r3
3418ecbc:	3708      	adds	r7, #8
3418ecbe:	46bd      	mov	sp, r7
3418ecc0:	bd80      	pop	{r7, pc}

3418ecc2 <SAL_XSPI_UpdateMemoryType>:


HAL_StatusTypeDef SAL_XSPI_UpdateMemoryType(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_DataOrderTypeDef DataOrder)
{
3418ecc2:	b480      	push	{r7}
3418ecc4:	b085      	sub	sp, #20
3418ecc6:	af00      	add	r7, sp, #0
3418ecc8:	6078      	str	r0, [r7, #4]
3418ecca:	460b      	mov	r3, r1
3418eccc:	70fb      	strb	r3, [r7, #3]
HAL_StatusTypeDef retr = HAL_OK;
3418ecce:	2300      	movs	r3, #0
3418ecd0:	73fb      	strb	r3, [r7, #15]

  /* read the memory type value */
  uint32_t memorytype = READ_REG(SalXspi->hxspi->Instance->DCR1) & XSPI_DCR1_MTYP;
3418ecd2:	687b      	ldr	r3, [r7, #4]
3418ecd4:	681b      	ldr	r3, [r3, #0]
3418ecd6:	681b      	ldr	r3, [r3, #0]
3418ecd8:	689b      	ldr	r3, [r3, #8]
3418ecda:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
3418ecde:	60bb      	str	r3, [r7, #8]

  switch(DataOrder)
3418ece0:	78fb      	ldrb	r3, [r7, #3]
3418ece2:	2b00      	cmp	r3, #0
3418ece4:	d11e      	bne.n	3418ed24 <SAL_XSPI_UpdateMemoryType+0x62>
  {
  case SAL_XSPI_ORDERINVERTED :
    if (memorytype == HAL_XSPI_MEMTYPE_MICRON) {
3418ece6:	68bb      	ldr	r3, [r7, #8]
3418ece8:	2b00      	cmp	r3, #0
3418ecea:	d103      	bne.n	3418ecf4 <SAL_XSPI_UpdateMemoryType+0x32>
      memorytype = HAL_XSPI_MEMTYPE_MACRONIX;
3418ecec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418ecf0:	60bb      	str	r3, [r7, #8]
3418ecf2:	e008      	b.n	3418ed06 <SAL_XSPI_UpdateMemoryType+0x44>
    } else if (memorytype == HAL_XSPI_MEMTYPE_MACRONIX) {
3418ecf4:	68bb      	ldr	r3, [r7, #8]
3418ecf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418ecfa:	d102      	bne.n	3418ed02 <SAL_XSPI_UpdateMemoryType+0x40>
      memorytype = HAL_XSPI_MEMTYPE_MICRON;
3418ecfc:	2300      	movs	r3, #0
3418ecfe:	60bb      	str	r3, [r7, #8]
3418ed00:	e001      	b.n	3418ed06 <SAL_XSPI_UpdateMemoryType+0x44>
    } else {
      retr = HAL_ERROR;
3418ed02:	2301      	movs	r3, #1
3418ed04:	73fb      	strb	r3, [r7, #15]
    }
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_MTYP, memorytype);
3418ed06:	687b      	ldr	r3, [r7, #4]
3418ed08:	681b      	ldr	r3, [r3, #0]
3418ed0a:	681b      	ldr	r3, [r3, #0]
3418ed0c:	689b      	ldr	r3, [r3, #8]
3418ed0e:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
3418ed12:	687b      	ldr	r3, [r7, #4]
3418ed14:	681b      	ldr	r3, [r3, #0]
3418ed16:	681b      	ldr	r3, [r3, #0]
3418ed18:	68ba      	ldr	r2, [r7, #8]
3418ed1a:	430a      	orrs	r2, r1
3418ed1c:	609a      	str	r2, [r3, #8]
    break;
3418ed1e:	bf00      	nop
    return HAL_ERROR;
    break;
  }

  DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_UpdateMemoryType::"); DEBUG_PARAM_INT(memorytype); DEBUG_PARAM_END();
  return retr;
3418ed20:	7bfb      	ldrb	r3, [r7, #15]
3418ed22:	e000      	b.n	3418ed26 <SAL_XSPI_UpdateMemoryType+0x64>
    return HAL_ERROR;
3418ed24:	2301      	movs	r3, #1
}
3418ed26:	4618      	mov	r0, r3
3418ed28:	3714      	adds	r7, #20
3418ed2a:	46bd      	mov	sp, r7
3418ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ed30:	4770      	bx	lr

3418ed32 <SAL_XSPI_Abort>:

HAL_StatusTypeDef SAL_XSPI_Abort(SAL_XSPI_ObjectTypeDef *SalXspi)
{
3418ed32:	b580      	push	{r7, lr}
3418ed34:	b082      	sub	sp, #8
3418ed36:	af00      	add	r7, sp, #0
3418ed38:	6078      	str	r0, [r7, #4]
  return HAL_XSPI_Abort(SalXspi->hxspi);
3418ed3a:	687b      	ldr	r3, [r7, #4]
3418ed3c:	681b      	ldr	r3, [r3, #0]
3418ed3e:	4618      	mov	r0, r3
3418ed40:	f7fe fc56 	bl	3418d5f0 <HAL_XSPI_Abort>
3418ed44:	4603      	mov	r3, r0
}
3418ed46:	4618      	mov	r0, r3
3418ed48:	3708      	adds	r7, #8
3418ed4a:	46bd      	mov	sp, r7
3418ed4c:	bd80      	pop	{r7, pc}

3418ed4e <XSPI_FormatCommand>:
  * @param InstructionWidth instruction width
  * @param Command command
  * @return the formatted command
  */
uint16_t XSPI_FormatCommand(uint8_t CommandExtension, uint32_t InstructionWidth, uint8_t Command)
{
3418ed4e:	b480      	push	{r7}
3418ed50:	b085      	sub	sp, #20
3418ed52:	af00      	add	r7, sp, #0
3418ed54:	4603      	mov	r3, r0
3418ed56:	6039      	str	r1, [r7, #0]
3418ed58:	71fb      	strb	r3, [r7, #7]
3418ed5a:	4613      	mov	r3, r2
3418ed5c:	71bb      	strb	r3, [r7, #6]
  uint16_t retr;
  if  (InstructionWidth == HAL_XSPI_INSTRUCTION_16_BITS)
3418ed5e:	683b      	ldr	r3, [r7, #0]
3418ed60:	2b10      	cmp	r3, #16
3418ed62:	d114      	bne.n	3418ed8e <XSPI_FormatCommand+0x40>
  {
    /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
    /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
    /* 0b11 Command and Command Extension forms a 16 bit command word :: Not yet handled */
    retr = ((uint16_t)Command << 8u);
3418ed64:	79bb      	ldrb	r3, [r7, #6]
3418ed66:	b29b      	uxth	r3, r3
3418ed68:	021b      	lsls	r3, r3, #8
3418ed6a:	81fb      	strh	r3, [r7, #14]
    if (CommandExtension == 1u)
3418ed6c:	79fb      	ldrb	r3, [r7, #7]
3418ed6e:	2b01      	cmp	r3, #1
3418ed70:	d107      	bne.n	3418ed82 <XSPI_FormatCommand+0x34>
    {
       retr|=  (uint8_t)(~Command & 0xFFu);
3418ed72:	79bb      	ldrb	r3, [r7, #6]
3418ed74:	43db      	mvns	r3, r3
3418ed76:	b2db      	uxtb	r3, r3
3418ed78:	461a      	mov	r2, r3
3418ed7a:	89fb      	ldrh	r3, [r7, #14]
3418ed7c:	4313      	orrs	r3, r2
3418ed7e:	81fb      	strh	r3, [r7, #14]
3418ed80:	e007      	b.n	3418ed92 <XSPI_FormatCommand+0x44>
    }
    else
    {
       retr|=  (uint8_t)(Command & 0xFFu);
3418ed82:	79bb      	ldrb	r3, [r7, #6]
3418ed84:	b29a      	uxth	r2, r3
3418ed86:	89fb      	ldrh	r3, [r7, #14]
3418ed88:	4313      	orrs	r3, r2
3418ed8a:	81fb      	strh	r3, [r7, #14]
3418ed8c:	e001      	b.n	3418ed92 <XSPI_FormatCommand+0x44>
    }
  }
  else
  {
    retr = Command;
3418ed8e:	79bb      	ldrb	r3, [r7, #6]
3418ed90:	81fb      	strh	r3, [r7, #14]
  }

  return retr;
3418ed92:	89fb      	ldrh	r3, [r7, #14]
}
3418ed94:	4618      	mov	r0, r3
3418ed96:	3714      	adds	r7, #20
3418ed98:	46bd      	mov	sp, r7
3418ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ed9e:	4770      	bx	lr

3418eda0 <XSPI_Transmit>:
  * @param SalXspi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Transmit(SAL_XSPI_ObjectTypeDef *SalXspi, const uint8_t *Data)
{
3418eda0:	b580      	push	{r7, lr}
3418eda2:	b084      	sub	sp, #16
3418eda4:	af00      	add	r7, sp, #0
3418eda6:	6078      	str	r0, [r7, #4]
3418eda8:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmatx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* transmit data */
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418edaa:	687b      	ldr	r3, [r7, #4]
3418edac:	681b      	ldr	r3, [r3, #0]
3418edae:	2264      	movs	r2, #100	@ 0x64
3418edb0:	6839      	ldr	r1, [r7, #0]
3418edb2:	4618      	mov	r0, r3
3418edb4:	f7fe fa10 	bl	3418d1d8 <HAL_XSPI_Transmit>
3418edb8:	4603      	mov	r3, r0
3418edba:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return retr;
3418edbc:	7bfb      	ldrb	r3, [r7, #15]
}
3418edbe:	4618      	mov	r0, r3
3418edc0:	3710      	adds	r7, #16
3418edc2:	46bd      	mov	sp, r7
3418edc4:	bd80      	pop	{r7, pc}

3418edc6 <XSPI_Receive>:
  * @param SalXspi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Receive(SAL_XSPI_ObjectTypeDef *SalXspi,  uint8_t *Data)
{
3418edc6:	b580      	push	{r7, lr}
3418edc8:	b084      	sub	sp, #16
3418edca:	af00      	add	r7, sp, #0
3418edcc:	6078      	str	r0, [r7, #4]
3418edce:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmarx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* Reception of the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418edd0:	687b      	ldr	r3, [r7, #4]
3418edd2:	681b      	ldr	r3, [r3, #0]
3418edd4:	2264      	movs	r2, #100	@ 0x64
3418edd6:	6839      	ldr	r1, [r7, #0]
3418edd8:	4618      	mov	r0, r3
3418edda:	f7fe fa70 	bl	3418d2be <HAL_XSPI_Receive>
3418edde:	4603      	mov	r3, r0
3418ede0:	73fb      	strb	r3, [r7, #15]
        retr = HAL_ERROR;
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  return retr;
3418ede2:	7bfb      	ldrb	r3, [r7, #15]
}
3418ede4:	4618      	mov	r0, r3
3418ede6:	3710      	adds	r7, #16
3418ede8:	46bd      	mov	sp, r7
3418edea:	bd80      	pop	{r7, pc}

3418edec <SFDP_ReadHeader>:
 * @param Object memory Object
 * @param sfdp_header data of the SFDP header
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef SFDP_ReadHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFDP_HeaderTypeDef *sfdp_header)
{
3418edec:	b580      	push	{r7, lr}
3418edee:	b084      	sub	sp, #16
3418edf0:	af00      	add	r7, sp, #0
3418edf2:	6078      	str	r0, [r7, #4]
3418edf4:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr;
  uint8_t retry_counter = 0;
3418edf6:	2300      	movs	r3, #0
3418edf8:	73bb      	strb	r3, [r7, #14]
  SFDP_DEBUG_STR(__func__);

  do {
    /* Reset the signature value */
    sfdp_header->Signature = 0;
3418edfa:	683b      	ldr	r3, [r7, #0]
3418edfc:	2200      	movs	r2, #0
3418edfe:	601a      	str	r2, [r3, #0]

    /* send the SFDP command to read the header */
    if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfdp_private.SALObject, 0, (uint8_t*)sfdp_header, SFDP_HEADER_SIZE))
3418ee00:	687b      	ldr	r3, [r7, #4]
3418ee02:	f103 0008 	add.w	r0, r3, #8
3418ee06:	2308      	movs	r3, #8
3418ee08:	683a      	ldr	r2, [r7, #0]
3418ee0a:	2100      	movs	r1, #0
3418ee0c:	f7ff fbbe 	bl	3418e58c <SAL_XSPI_GetSFDP>
3418ee10:	4603      	mov	r3, r0
3418ee12:	2b00      	cmp	r3, #0
3418ee14:	d002      	beq.n	3418ee1c <SFDP_ReadHeader+0x30>
    {
      retr = EXTMEM_SFDP_ERROR_SFDPREAD;
3418ee16:	2303      	movs	r3, #3
3418ee18:	73fb      	strb	r3, [r7, #15]
      goto error;
3418ee1a:	e01f      	b.n	3418ee5c <SFDP_ReadHeader+0x70>
    }

    /* view the header signature value  */
    SFDP_DEBUG_INT("SFDP signature::", sfdp_header->Signature);

    switch(CheckSFDP_Signature(Object, sfdp_header->Signature))
3418ee1c:	683b      	ldr	r3, [r7, #0]
3418ee1e:	681b      	ldr	r3, [r3, #0]
3418ee20:	4619      	mov	r1, r3
3418ee22:	6878      	ldr	r0, [r7, #4]
3418ee24:	f001 fc54 	bl	341906d0 <CheckSFDP_Signature>
3418ee28:	4603      	mov	r3, r0
3418ee2a:	2b00      	cmp	r3, #0
3418ee2c:	d002      	beq.n	3418ee34 <SFDP_ReadHeader+0x48>
3418ee2e:	2b05      	cmp	r3, #5
3418ee30:	d005      	beq.n	3418ee3e <SFDP_ReadHeader+0x52>
3418ee32:	e00a      	b.n	3418ee4a <SFDP_ReadHeader+0x5e>
    {
    case EXTMEM_SFDP_OK:
      SFDP_DEBUG_INT("param_number=", sfdp_header->param_number);
      SFDP_DEBUG_INT("AccessProtocol=", sfdp_header->AccessProtocol);
      retr = EXTMEM_SFDP_OK;
3418ee34:	2300      	movs	r3, #0
3418ee36:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
3418ee38:	2302      	movs	r3, #2
3418ee3a:	73bb      	strb	r3, [r7, #14]
    break;
3418ee3c:	e00a      	b.n	3418ee54 <SFDP_ReadHeader+0x68>
    case EXTMEM_SFDP_ERROR_SIGNATUREMTYPE:
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418ee3e:	2304      	movs	r3, #4
3418ee40:	73fb      	strb	r3, [r7, #15]
      retry_counter++;
3418ee42:	7bbb      	ldrb	r3, [r7, #14]
3418ee44:	3301      	adds	r3, #1
3418ee46:	73bb      	strb	r3, [r7, #14]
      break;
3418ee48:	e004      	b.n	3418ee54 <SFDP_ReadHeader+0x68>
    /* case EXTMEM_SFDP_ERROR_SIGNATURE :*/
    default :
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418ee4a:	2304      	movs	r3, #4
3418ee4c:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
3418ee4e:	2302      	movs	r3, #2
3418ee50:	73bb      	strb	r3, [r7, #14]
      break;
3418ee52:	bf00      	nop
    }
  } while(retry_counter < 2u);
3418ee54:	7bbb      	ldrb	r3, [r7, #14]
3418ee56:	2b01      	cmp	r3, #1
3418ee58:	d9cf      	bls.n	3418edfa <SFDP_ReadHeader+0xe>

error:
3418ee5a:	bf00      	nop
  return retr;
3418ee5c:	7bfb      	ldrb	r3, [r7, #15]
}
3418ee5e:	4618      	mov	r0, r3
3418ee60:	3710      	adds	r7, #16
3418ee62:	46bd      	mov	sp, r7
3418ee64:	bd80      	pop	{r7, pc}
	...

3418ee68 <SFDP_GetHeader>:


SFDP_StatusTypeDef SFDP_GetHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFDP_HeaderTypeDef *sfdp_header)
{
3418ee68:	b590      	push	{r4, r7, lr}
3418ee6a:	b089      	sub	sp, #36	@ 0x24
3418ee6c:	af00      	add	r7, sp, #0
3418ee6e:	6078      	str	r0, [r7, #4]
3418ee70:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418ee72:	2304      	movs	r3, #4
3418ee74:	77fb      	strb	r3, [r7, #31]
  SFDP_DEBUG_STR(__func__);
  const TableConfig_Typedef table_config[] =
3418ee76:	4b2a      	ldr	r3, [pc, #168]	@ (3418ef20 <SFDP_GetHeader+0xb8>)
3418ee78:	f107 040c 	add.w	r4, r7, #12
3418ee7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
3418ee7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {PHY_LINK_8D8D8D, 10u},
    {PHY_LINK_8D8D8D, 16u}
  };

  /* loop to find the link configuration of the memory */
  for (uint8_t index = 0u;
3418ee82:	2300      	movs	r3, #0
3418ee84:	77bb      	strb	r3, [r7, #30]
3418ee86:	e040      	b.n	3418ef0a <SFDP_GetHeader+0xa2>
  {
    /* Set the command mode */
    SFDP_DEBUG_STR("try a command configuration");

    /* Configure the link */
    Object->sfdp_private.DriverInfo.SpiPhyLink  = table_config[index].PhyLink;
3418ee88:	7fbb      	ldrb	r3, [r7, #30]
3418ee8a:	005b      	lsls	r3, r3, #1
3418ee8c:	3320      	adds	r3, #32
3418ee8e:	443b      	add	r3, r7
3418ee90:	f813 2c14 	ldrb.w	r2, [r3, #-20]
3418ee94:	687b      	ldr	r3, [r7, #4]
3418ee96:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    (void)SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_PHY_LINK, &Object->sfdp_private.DriverInfo.SpiPhyLink);
3418ee9a:	687b      	ldr	r3, [r7, #4]
3418ee9c:	f103 0008 	add.w	r0, r3, #8
3418eea0:	687b      	ldr	r3, [r7, #4]
3418eea2:	3364      	adds	r3, #100	@ 0x64
3418eea4:	461a      	mov	r2, r3
3418eea6:	2100      	movs	r1, #0
3418eea8:	f7ff fa1e 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>
    SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfdp_private.SALObject, table_config[index].DummyCycle);
3418eeac:	7fbb      	ldrb	r3, [r7, #30]
3418eeae:	005b      	lsls	r3, r3, #1
3418eeb0:	3320      	adds	r3, #32
3418eeb2:	443b      	add	r3, r7
3418eeb4:	f813 2c13 	ldrb.w	r2, [r3, #-19]
3418eeb8:	687b      	ldr	r3, [r7, #4]
3418eeba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Loop on the instruction extension */
    for (uint8_t IExt = 0u;
3418eebe:	2300      	movs	r3, #0
3418eec0:	777b      	strb	r3, [r7, #29]
3418eec2:	e017      	b.n	3418eef4 <SFDP_GetHeader+0x8c>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
    {
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfdp_private.SALObject, IExt);
3418eec4:	687b      	ldr	r3, [r7, #4]
3418eec6:	7f7a      	ldrb	r2, [r7, #29]
3418eec8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Read the sfdp header */
      if (EXTMEM_SFDP_OK == SFDP_ReadHeader(Object, sfdp_header))
3418eecc:	6839      	ldr	r1, [r7, #0]
3418eece:	6878      	ldr	r0, [r7, #4]
3418eed0:	f7ff ff8c 	bl	3418edec <SFDP_ReadHeader>
3418eed4:	4603      	mov	r3, r0
3418eed6:	2b00      	cmp	r3, #0
3418eed8:	d101      	bne.n	3418eede <SFDP_GetHeader+0x76>
      {
        retr = EXTMEM_SFDP_OK;
3418eeda:	2300      	movs	r3, #0
3418eedc:	77fb      	strb	r3, [r7, #31]
      }

      if (table_config[index].PhyLink < PHY_LINK_4S4S4S)
3418eede:	7fbb      	ldrb	r3, [r7, #30]
3418eee0:	005b      	lsls	r3, r3, #1
3418eee2:	3320      	adds	r3, #32
3418eee4:	443b      	add	r3, r7
3418eee6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
3418eeea:	2b03      	cmp	r3, #3
3418eeec:	d909      	bls.n	3418ef02 <SFDP_GetHeader+0x9a>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
3418eeee:	7f7b      	ldrb	r3, [r7, #29]
3418eef0:	3301      	adds	r3, #1
3418eef2:	777b      	strb	r3, [r7, #29]
3418eef4:	7f7b      	ldrb	r3, [r7, #29]
3418eef6:	2b01      	cmp	r3, #1
3418eef8:	d804      	bhi.n	3418ef04 <SFDP_GetHeader+0x9c>
3418eefa:	7ffb      	ldrb	r3, [r7, #31]
3418eefc:	2b04      	cmp	r3, #4
3418eefe:	d0e1      	beq.n	3418eec4 <SFDP_GetHeader+0x5c>
3418ef00:	e000      	b.n	3418ef04 <SFDP_GetHeader+0x9c>
      {
        /* Config 1 is invalid so exit the loop */
        break;
3418ef02:	bf00      	nop
           ; index++)
3418ef04:	7fbb      	ldrb	r3, [r7, #30]
3418ef06:	3301      	adds	r3, #1
3418ef08:	77bb      	strb	r3, [r7, #30]
       (index < (sizeof(table_config)/sizeof(TableConfig_Typedef))) &&
3418ef0a:	7fbb      	ldrb	r3, [r7, #30]
3418ef0c:	2b07      	cmp	r3, #7
3418ef0e:	d802      	bhi.n	3418ef16 <SFDP_GetHeader+0xae>
3418ef10:	7ffb      	ldrb	r3, [r7, #31]
3418ef12:	2b04      	cmp	r3, #4
3418ef14:	d0b8      	beq.n	3418ee88 <SFDP_GetHeader+0x20>
      }
    }
  }
  return retr;
3418ef16:	7ffb      	ldrb	r3, [r7, #31]
}
3418ef18:	4618      	mov	r0, r3
3418ef1a:	3724      	adds	r7, #36	@ 0x24
3418ef1c:	46bd      	mov	sp, r7
3418ef1e:	bd90      	pop	{r4, r7, pc}
3418ef20:	341912d0 	.word	0x341912d0

3418ef24 <SFDP_CollectData>:

SFDP_StatusTypeDef SFDP_CollectData(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418ef24:	b580      	push	{r7, lr}
3418ef26:	b088      	sub	sp, #32
3418ef28:	af00      	add	r7, sp, #0
3418ef2a:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418ef2c:	2300      	movs	r3, #0
3418ef2e:	77fb      	strb	r3, [r7, #31]
  uint32_t sfdp_address = SFDP_HEADER_SIZE;
3418ef30:	2308      	movs	r3, #8
3418ef32:	61bb      	str	r3, [r7, #24]
  SFDP_DEBUG_STR(__func__);

  /* reset the table mask */
  Object->sfdp_private.Sfdp_table_mask = 0;
3418ef34:	687b      	ldr	r3, [r7, #4]
3418ef36:	2200      	movs	r2, #0
3418ef38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* reset the param info */
  (void)memset(sfdp_param_info, 0x0, sizeof(sfdp_param_info));
3418ef3c:	2278      	movs	r2, #120	@ 0x78
3418ef3e:	2100      	movs	r1, #0
3418ef40:	485f      	ldr	r0, [pc, #380]	@ (3418f0c0 <SFDP_CollectData+0x19c>)
3418ef42:	f001 fee9 	bl	34190d18 <memset>

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfdp_private.Sfdp_param_number + 1u); index++)
3418ef46:	2300      	movs	r3, #0
3418ef48:	75fb      	strb	r3, [r7, #23]
3418ef4a:	e027      	b.n	3418ef9c <SFDP_CollectData+0x78>
  {
    CHECK_FUNCTION_CALL(sfdp_get_paraminfo(Object, sfdp_address, &sfdp_param_info[index]))
3418ef4c:	7dfa      	ldrb	r2, [r7, #23]
3418ef4e:	4613      	mov	r3, r2
3418ef50:	005b      	lsls	r3, r3, #1
3418ef52:	4413      	add	r3, r2
3418ef54:	009b      	lsls	r3, r3, #2
3418ef56:	4a5a      	ldr	r2, [pc, #360]	@ (3418f0c0 <SFDP_CollectData+0x19c>)
3418ef58:	4413      	add	r3, r2
3418ef5a:	461a      	mov	r2, r3
3418ef5c:	69b9      	ldr	r1, [r7, #24]
3418ef5e:	6878      	ldr	r0, [r7, #4]
3418ef60:	f000 ffe4 	bl	3418ff2c <sfdp_get_paraminfo>
3418ef64:	4603      	mov	r3, r0
3418ef66:	77fb      	strb	r3, [r7, #31]
3418ef68:	7ffb      	ldrb	r3, [r7, #31]
3418ef6a:	2b00      	cmp	r3, #0
3418ef6c:	f040 80a2 	bne.w	3418f0b4 <SFDP_CollectData+0x190>
    Object->sfdp_private.Sfdp_table_mask |= (uint32_t)sfdp_param_info[index].type;
3418ef70:	687b      	ldr	r3, [r7, #4]
3418ef72:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
3418ef76:	7dfa      	ldrb	r2, [r7, #23]
3418ef78:	4851      	ldr	r0, [pc, #324]	@ (3418f0c0 <SFDP_CollectData+0x19c>)
3418ef7a:	4613      	mov	r3, r2
3418ef7c:	005b      	lsls	r3, r3, #1
3418ef7e:	4413      	add	r3, r2
3418ef80:	009b      	lsls	r3, r3, #2
3418ef82:	4403      	add	r3, r0
3418ef84:	681b      	ldr	r3, [r3, #0]
3418ef86:	ea41 0203 	orr.w	r2, r1, r3
3418ef8a:	687b      	ldr	r3, [r7, #4]
3418ef8c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    sfdp_address+= SFDP_PARAM_HEADER_SIZE;
3418ef90:	69bb      	ldr	r3, [r7, #24]
3418ef92:	3308      	adds	r3, #8
3418ef94:	61bb      	str	r3, [r7, #24]
  for(uint8_t index = 0u; index <  (Object->sfdp_private.Sfdp_param_number + 1u); index++)
3418ef96:	7dfb      	ldrb	r3, [r7, #23]
3418ef98:	3301      	adds	r3, #1
3418ef9a:	75fb      	strb	r3, [r7, #23]
3418ef9c:	7dfa      	ldrb	r2, [r7, #23]
3418ef9e:	687b      	ldr	r3, [r7, #4]
3418efa0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
3418efa4:	3301      	adds	r3, #1
3418efa6:	429a      	cmp	r2, r3
3418efa8:	d3d0      	bcc.n	3418ef4c <SFDP_CollectData+0x28>
  }

  /* Read each table param to extract the information to build the driver */
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFDP_PARAMID_UNKNOWN; index++)
3418efaa:	2300      	movs	r3, #0
3418efac:	75bb      	strb	r3, [r7, #22]
3418efae:	e075      	b.n	3418f09c <SFDP_CollectData+0x178>
  {
    uint8_t *ptr = NULL;
3418efb0:	2300      	movs	r3, #0
3418efb2:	613b      	str	r3, [r7, #16]
    uint32_t size = sfdp_param_info[index].size;
3418efb4:	7dba      	ldrb	r2, [r7, #22]
3418efb6:	4942      	ldr	r1, [pc, #264]	@ (3418f0c0 <SFDP_CollectData+0x19c>)
3418efb8:	4613      	mov	r3, r2
3418efba:	005b      	lsls	r3, r3, #1
3418efbc:	4413      	add	r3, r2
3418efbe:	009b      	lsls	r3, r3, #2
3418efc0:	440b      	add	r3, r1
3418efc2:	3308      	adds	r3, #8
3418efc4:	781b      	ldrb	r3, [r3, #0]
3418efc6:	60fb      	str	r3, [r7, #12]
    switch(sfdp_param_info[index].type)
3418efc8:	7dba      	ldrb	r2, [r7, #22]
3418efca:	493d      	ldr	r1, [pc, #244]	@ (3418f0c0 <SFDP_CollectData+0x19c>)
3418efcc:	4613      	mov	r3, r2
3418efce:	005b      	lsls	r3, r3, #1
3418efd0:	4413      	add	r3, r2
3418efd2:	009b      	lsls	r3, r3, #2
3418efd4:	440b      	add	r3, r1
3418efd6:	681b      	ldr	r3, [r3, #0]
3418efd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418efdc:	d029      	beq.n	3418f032 <SFDP_CollectData+0x10e>
3418efde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418efe2:	d829      	bhi.n	3418f038 <SFDP_CollectData+0x114>
3418efe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418efe8:	d01d      	beq.n	3418f026 <SFDP_CollectData+0x102>
3418efea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418efee:	d823      	bhi.n	3418f038 <SFDP_CollectData+0x114>
3418eff0:	2b80      	cmp	r3, #128	@ 0x80
3418eff2:	d01b      	beq.n	3418f02c <SFDP_CollectData+0x108>
3418eff4:	2b80      	cmp	r3, #128	@ 0x80
3418eff6:	d81f      	bhi.n	3418f038 <SFDP_CollectData+0x114>
3418eff8:	2b08      	cmp	r3, #8
3418effa:	d002      	beq.n	3418f002 <SFDP_CollectData+0xde>
3418effc:	2b40      	cmp	r3, #64	@ 0x40
3418effe:	d00f      	beq.n	3418f020 <SFDP_CollectData+0xfc>
    case SFDP_PARAMID_OCTAL_DDR:
      ptr = JEDEC_OctalDdr.data_BYTE;
      break;
    default :
      SFDP_DEBUG_STR("the table is not yet handled by the SW");
      break;
3418f000:	e01a      	b.n	3418f038 <SFDP_CollectData+0x114>
      JEDEC_Basic.size = sfdp_param_info[index].size;
3418f002:	7dba      	ldrb	r2, [r7, #22]
3418f004:	492e      	ldr	r1, [pc, #184]	@ (3418f0c0 <SFDP_CollectData+0x19c>)
3418f006:	4613      	mov	r3, r2
3418f008:	005b      	lsls	r3, r3, #1
3418f00a:	4413      	add	r3, r2
3418f00c:	009b      	lsls	r3, r3, #2
3418f00e:	440b      	add	r3, r1
3418f010:	3308      	adds	r3, #8
3418f012:	781b      	ldrb	r3, [r3, #0]
3418f014:	461a      	mov	r2, r3
3418f016:	4b2b      	ldr	r3, [pc, #172]	@ (3418f0c4 <SFDP_CollectData+0x1a0>)
3418f018:	601a      	str	r2, [r3, #0]
      ptr = JEDEC_Basic.Params.data_BYTE;
3418f01a:	4b2b      	ldr	r3, [pc, #172]	@ (3418f0c8 <SFDP_CollectData+0x1a4>)
3418f01c:	613b      	str	r3, [r7, #16]
      break;
3418f01e:	e00c      	b.n	3418f03a <SFDP_CollectData+0x116>
      ptr = JEDEC_Address4Bytes.data_BYTE;
3418f020:	4b2a      	ldr	r3, [pc, #168]	@ (3418f0cc <SFDP_CollectData+0x1a8>)
3418f022:	613b      	str	r3, [r7, #16]
      break;
3418f024:	e009      	b.n	3418f03a <SFDP_CollectData+0x116>
      ptr = JEDEC_SCCR_Map.data_b;
3418f026:	4b2a      	ldr	r3, [pc, #168]	@ (3418f0d0 <SFDP_CollectData+0x1ac>)
3418f028:	613b      	str	r3, [r7, #16]
      break;
3418f02a:	e006      	b.n	3418f03a <SFDP_CollectData+0x116>
      ptr = JEDEC_XSPI10.data_BYTE;
3418f02c:	4b29      	ldr	r3, [pc, #164]	@ (3418f0d4 <SFDP_CollectData+0x1b0>)
3418f02e:	613b      	str	r3, [r7, #16]
      break;
3418f030:	e003      	b.n	3418f03a <SFDP_CollectData+0x116>
      ptr = JEDEC_OctalDdr.data_BYTE;
3418f032:	4b29      	ldr	r3, [pc, #164]	@ (3418f0d8 <SFDP_CollectData+0x1b4>)
3418f034:	613b      	str	r3, [r7, #16]
      break;
3418f036:	e000      	b.n	3418f03a <SFDP_CollectData+0x116>
      break;
3418f038:	bf00      	nop
    }
    if (ptr != NULL)
3418f03a:	693b      	ldr	r3, [r7, #16]
3418f03c:	2b00      	cmp	r3, #0
3418f03e:	d016      	beq.n	3418f06e <SFDP_CollectData+0x14a>
    {
      if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfdp_private.SALObject,
3418f040:	687b      	ldr	r3, [r7, #4]
3418f042:	f103 0008 	add.w	r0, r3, #8
3418f046:	7dba      	ldrb	r2, [r7, #22]
3418f048:	491d      	ldr	r1, [pc, #116]	@ (3418f0c0 <SFDP_CollectData+0x19c>)
3418f04a:	4613      	mov	r3, r2
3418f04c:	005b      	lsls	r3, r3, #1
3418f04e:	4413      	add	r3, r2
3418f050:	009b      	lsls	r3, r3, #2
3418f052:	440b      	add	r3, r1
3418f054:	3304      	adds	r3, #4
3418f056:	6819      	ldr	r1, [r3, #0]
3418f058:	68fb      	ldr	r3, [r7, #12]
3418f05a:	009b      	lsls	r3, r3, #2
3418f05c:	693a      	ldr	r2, [r7, #16]
3418f05e:	f7ff fa95 	bl	3418e58c <SAL_XSPI_GetSFDP>
3418f062:	4603      	mov	r3, r0
3418f064:	2b00      	cmp	r3, #0
3418f066:	d002      	beq.n	3418f06e <SFDP_CollectData+0x14a>
                                     sfdp_param_info[index].address,
                                     ptr, size * 4u))
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f068:	230c      	movs	r3, #12
3418f06a:	77fb      	strb	r3, [r7, #31]
        goto error;
3418f06c:	e022      	b.n	3418f0b4 <SFDP_CollectData+0x190>
      }
    }

    if (SFDP_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[index].type)
3418f06e:	7dba      	ldrb	r2, [r7, #22]
3418f070:	4913      	ldr	r1, [pc, #76]	@ (3418f0c0 <SFDP_CollectData+0x19c>)
3418f072:	4613      	mov	r3, r2
3418f074:	005b      	lsls	r3, r3, #1
3418f076:	4413      	add	r3, r2
3418f078:	009b      	lsls	r3, r3, #2
3418f07a:	440b      	add	r3, r1
3418f07c:	681b      	ldr	r3, [r3, #0]
3418f07e:	2b08      	cmp	r3, #8
3418f080:	d109      	bne.n	3418f096 <SFDP_CollectData+0x172>
    {
      /* save data about the reset procedure */
      Object->sfdp_private.Reset_info = JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support;
3418f082:	4b10      	ldr	r3, [pc, #64]	@ (3418f0c4 <SFDP_CollectData+0x1a0>)
3418f084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418f088:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418f08c:	b2db      	uxtb	r3, r3
3418f08e:	461a      	mov	r2, r3
3418f090:	687b      	ldr	r3, [r7, #4]
3418f092:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFDP_PARAMID_UNKNOWN; index++)
3418f096:	7dbb      	ldrb	r3, [r7, #22]
3418f098:	3301      	adds	r3, #1
3418f09a:	75bb      	strb	r3, [r7, #22]
3418f09c:	7dba      	ldrb	r2, [r7, #22]
3418f09e:	4908      	ldr	r1, [pc, #32]	@ (3418f0c0 <SFDP_CollectData+0x19c>)
3418f0a0:	4613      	mov	r3, r2
3418f0a2:	005b      	lsls	r3, r3, #1
3418f0a4:	4413      	add	r3, r2
3418f0a6:	009b      	lsls	r3, r3, #2
3418f0a8:	440b      	add	r3, r1
3418f0aa:	681b      	ldr	r3, [r3, #0]
3418f0ac:	2b00      	cmp	r3, #0
3418f0ae:	f47f af7f 	bne.w	3418efb0 <SFDP_CollectData+0x8c>
    }
  }

error:
3418f0b2:	bf00      	nop
  return retr;
3418f0b4:	7ffb      	ldrb	r3, [r7, #31]
}
3418f0b6:	4618      	mov	r0, r3
3418f0b8:	3720      	adds	r7, #32
3418f0ba:	46bd      	mov	sp, r7
3418f0bc:	bd80      	pop	{r7, pc}
3418f0be:	bf00      	nop
3418f0c0:	341c02a0 	.word	0x341c02a0
3418f0c4:	341c0318 	.word	0x341c0318
3418f0c8:	341c031c 	.word	0x341c031c
3418f0cc:	341c0378 	.word	0x341c0378
3418f0d0:	341c0398 	.word	0x341c0398
3418f0d4:	341c0380 	.word	0x341c0380
3418f0d8:	341c0408 	.word	0x341c0408

3418f0dc <SFDP_MemoryReset>:

SFDP_StatusTypeDef SFDP_MemoryReset(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418f0dc:	b580      	push	{r7, lr}
3418f0de:	b086      	sub	sp, #24
3418f0e0:	af00      	add	r7, sp, #0
3418f0e2:	6078      	str	r0, [r7, #4]
  RESET_METHOD reset_method;
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
3418f0e4:	2307      	movs	r3, #7
3418f0e6:	75bb      	strb	r3, [r7, #22]
  uint32_t sfdp_address = SFDP_HEADER_SIZE;
3418f0e8:	2308      	movs	r3, #8
3418f0ea:	613b      	str	r3, [r7, #16]
  uint8_t find = 0u;
3418f0ec:	2300      	movs	r3, #0
3418f0ee:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR(__func__);

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfdp_private.Sfdp_param_number + 1u); index++)
3418f0f0:	2300      	movs	r3, #0
3418f0f2:	73bb      	strb	r3, [r7, #14]
3418f0f4:	e02e      	b.n	3418f154 <SFDP_MemoryReset+0x78>
  {
    retr = sfdp_get_paraminfo(Object, sfdp_address, &sfdp_param_info[0]);
3418f0f6:	4a64      	ldr	r2, [pc, #400]	@ (3418f288 <SFDP_MemoryReset+0x1ac>)
3418f0f8:	6939      	ldr	r1, [r7, #16]
3418f0fa:	6878      	ldr	r0, [r7, #4]
3418f0fc:	f000 ff16 	bl	3418ff2c <sfdp_get_paraminfo>
3418f100:	4603      	mov	r3, r0
3418f102:	75bb      	strb	r3, [r7, #22]
    if (EXTMEM_SFDP_OK == retr)
3418f104:	7dbb      	ldrb	r3, [r7, #22]
3418f106:	2b00      	cmp	r3, #0
3418f108:	d118      	bne.n	3418f13c <SFDP_MemoryReset+0x60>
    {
      /* check if the table is basic table */
      if (SFDP_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[0].type)
3418f10a:	4b5f      	ldr	r3, [pc, #380]	@ (3418f288 <SFDP_MemoryReset+0x1ac>)
3418f10c:	681b      	ldr	r3, [r3, #0]
3418f10e:	2b08      	cmp	r3, #8
3418f110:	d114      	bne.n	3418f13c <SFDP_MemoryReset+0x60>
      {
        /* read the JEDEC basic param */
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfdp_private.SALObject,
3418f112:	687b      	ldr	r3, [r7, #4]
3418f114:	f103 0008 	add.w	r0, r3, #8
3418f118:	4b5b      	ldr	r3, [pc, #364]	@ (3418f288 <SFDP_MemoryReset+0x1ac>)
3418f11a:	6859      	ldr	r1, [r3, #4]
                                       sfdp_param_info[0].address,
                                       JEDEC_Basic.Params.data_BYTE,
                                       ((uint32_t)sfdp_param_info[0].size) * 4u))
3418f11c:	4b5a      	ldr	r3, [pc, #360]	@ (3418f288 <SFDP_MemoryReset+0x1ac>)
3418f11e:	7a1b      	ldrb	r3, [r3, #8]
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfdp_private.SALObject,
3418f120:	009b      	lsls	r3, r3, #2
3418f122:	4a5a      	ldr	r2, [pc, #360]	@ (3418f28c <SFDP_MemoryReset+0x1b0>)
3418f124:	f7ff fa32 	bl	3418e58c <SAL_XSPI_GetSFDP>
3418f128:	4603      	mov	r3, r0
3418f12a:	2b00      	cmp	r3, #0
3418f12c:	d002      	beq.n	3418f134 <SFDP_MemoryReset+0x58>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f12e:	230c      	movs	r3, #12
3418f130:	75bb      	strb	r3, [r7, #22]
3418f132:	e003      	b.n	3418f13c <SFDP_MemoryReset+0x60>
        }
        else
        {
          retr = EXTMEM_SFDP_OK;
3418f134:	2300      	movs	r3, #0
3418f136:	75bb      	strb	r3, [r7, #22]
          find = 1u;
3418f138:	2301      	movs	r3, #1
3418f13a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }

    if ((EXTMEM_SFDP_OK != retr) || (1u == find))
3418f13c:	7dbb      	ldrb	r3, [r7, #22]
3418f13e:	2b00      	cmp	r3, #0
3418f140:	d10f      	bne.n	3418f162 <SFDP_MemoryReset+0x86>
3418f142:	7bfb      	ldrb	r3, [r7, #15]
3418f144:	2b01      	cmp	r3, #1
3418f146:	d00c      	beq.n	3418f162 <SFDP_MemoryReset+0x86>
    {
        /* stop the read, if there is an error or if the table has been found */
        break;
    }
    /* look for the next table */
    sfdp_address+= SFDP_PARAM_HEADER_SIZE;
3418f148:	693b      	ldr	r3, [r7, #16]
3418f14a:	3308      	adds	r3, #8
3418f14c:	613b      	str	r3, [r7, #16]
  for(uint8_t index = 0u; index <  (Object->sfdp_private.Sfdp_param_number + 1u); index++)
3418f14e:	7bbb      	ldrb	r3, [r7, #14]
3418f150:	3301      	adds	r3, #1
3418f152:	73bb      	strb	r3, [r7, #14]
3418f154:	7bba      	ldrb	r2, [r7, #14]
3418f156:	687b      	ldr	r3, [r7, #4]
3418f158:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
3418f15c:	3301      	adds	r3, #1
3418f15e:	429a      	cmp	r2, r3
3418f160:	d3c9      	bcc.n	3418f0f6 <SFDP_MemoryReset+0x1a>
  }

  /* if an error has been returned or if the table has not been found */
  if ((EXTMEM_SFDP_OK != retr) || (0u == find))
3418f162:	7dbb      	ldrb	r3, [r7, #22]
3418f164:	2b00      	cmp	r3, #0
3418f166:	d102      	bne.n	3418f16e <SFDP_MemoryReset+0x92>
3418f168:	7bfb      	ldrb	r3, [r7, #15]
3418f16a:	2b00      	cmp	r3, #0
3418f16c:	d102      	bne.n	3418f174 <SFDP_MemoryReset+0x98>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f16e:	230c      	movs	r3, #12
3418f170:	75bb      	strb	r3, [r7, #22]
    goto error;
3418f172:	e083      	b.n	3418f27c <SFDP_MemoryReset+0x1a0>
  }

  /* determine how to proceed memory reset */
  if( 0x0u == JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support)
3418f174:	4b46      	ldr	r3, [pc, #280]	@ (3418f290 <SFDP_MemoryReset+0x1b4>)
3418f176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418f17a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3418f17e:	b2db      	uxtb	r3, r3
3418f180:	2b00      	cmp	r3, #0
3418f182:	d102      	bne.n	3418f18a <SFDP_MemoryReset+0xae>
  {
    /* 00_0000b: no software reset instruction is supported */
    reset_method = RESET_NONE;
3418f184:	2300      	movs	r3, #0
3418f186:	75fb      	strb	r3, [r7, #23]
3418f188:	e053      	b.n	3418f232 <SFDP_MemoryReset+0x156>
  }
  else if (0x1u == (0x1u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418f18a:	4b41      	ldr	r3, [pc, #260]	@ (3418f290 <SFDP_MemoryReset+0x1b4>)
3418f18c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418f190:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418f194:	b2db      	uxtb	r3, r3
3418f196:	f003 0301 	and.w	r3, r3, #1
3418f19a:	b2db      	uxtb	r3, r3
3418f19c:	2b00      	cmp	r3, #0
3418f19e:	d002      	beq.n	3418f1a6 <SFDP_MemoryReset+0xca>
  {
    /* xx_xxx1b: drive Fh on all 4 data wires for 8 clocks */
    reset_method = RESET_Fh_4DATA_8CLOCK;
3418f1a0:	2301      	movs	r3, #1
3418f1a2:	75fb      	strb	r3, [r7, #23]
3418f1a4:	e045      	b.n	3418f232 <SFDP_MemoryReset+0x156>
  }
  else if (0x2u == (0x2u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418f1a6:	4b3a      	ldr	r3, [pc, #232]	@ (3418f290 <SFDP_MemoryReset+0x1b4>)
3418f1a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418f1ac:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418f1b0:	b2db      	uxtb	r3, r3
3418f1b2:	f003 0302 	and.w	r3, r3, #2
3418f1b6:	b2db      	uxtb	r3, r3
3418f1b8:	2b00      	cmp	r3, #0
3418f1ba:	d002      	beq.n	3418f1c2 <SFDP_MemoryReset+0xe6>
  {
    /* xx_xx1xb: drive Fh on all 4 data wires for 10 clocks if device is operating in 4-byte address mode */
    reset_method = RESET_Fh_4DATA_10CLOCK;
3418f1bc:	2302      	movs	r3, #2
3418f1be:	75fb      	strb	r3, [r7, #23]
3418f1c0:	e037      	b.n	3418f232 <SFDP_MemoryReset+0x156>
  }
  else if (0x4u == (0x4u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418f1c2:	4b33      	ldr	r3, [pc, #204]	@ (3418f290 <SFDP_MemoryReset+0x1b4>)
3418f1c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418f1c8:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418f1cc:	b2db      	uxtb	r3, r3
3418f1ce:	f003 0304 	and.w	r3, r3, #4
3418f1d2:	b2db      	uxtb	r3, r3
3418f1d4:	2b00      	cmp	r3, #0
3418f1d6:	d002      	beq.n	3418f1de <SFDP_MemoryReset+0x102>
  {
    /* xx_x1xxb: drive Fh on all 4 data wires for 16 clocks */
    reset_method = RESET_Fh_4DATA_16CLOCK;
3418f1d8:	2303      	movs	r3, #3
3418f1da:	75fb      	strb	r3, [r7, #23]
3418f1dc:	e029      	b.n	3418f232 <SFDP_MemoryReset+0x156>
  }
  else if (0x8u == (0x8u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418f1de:	4b2c      	ldr	r3, [pc, #176]	@ (3418f290 <SFDP_MemoryReset+0x1b4>)
3418f1e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418f1e4:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418f1e8:	b2db      	uxtb	r3, r3
3418f1ea:	f003 0308 	and.w	r3, r3, #8
3418f1ee:	b2db      	uxtb	r3, r3
3418f1f0:	2b00      	cmp	r3, #0
3418f1f2:	d002      	beq.n	3418f1fa <SFDP_MemoryReset+0x11e>
  {
    /* xx_1xxxb: issue instruction F0h */
    reset_method = RESET_INSTRUCTION_F0;
3418f1f4:	2304      	movs	r3, #4
3418f1f6:	75fb      	strb	r3, [r7, #23]
3418f1f8:	e01b      	b.n	3418f232 <SFDP_MemoryReset+0x156>
  }
  else if (0x10u == (0x10u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418f1fa:	4b25      	ldr	r3, [pc, #148]	@ (3418f290 <SFDP_MemoryReset+0x1b4>)
3418f1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418f200:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418f204:	b2db      	uxtb	r3, r3
3418f206:	f003 0310 	and.w	r3, r3, #16
3418f20a:	b2db      	uxtb	r3, r3
3418f20c:	2b00      	cmp	r3, #0
3418f20e:	d002      	beq.n	3418f216 <SFDP_MemoryReset+0x13a>
  {
    /* x1_xxxxb: issue reset enable instruction 66h, then issue reset instruction 99h. The reset enable,
    reset sequence may be issued on 1, 2, or 4 wires depending on the device operating mode.
    */
    reset_method = RESET_INSTRUCTION_66_99;
3418f210:	2305      	movs	r3, #5
3418f212:	75fb      	strb	r3, [r7, #23]
3418f214:	e00d      	b.n	3418f232 <SFDP_MemoryReset+0x156>
  }
  else if (0x20u == (0x20u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418f216:	4b1e      	ldr	r3, [pc, #120]	@ (3418f290 <SFDP_MemoryReset+0x1b4>)
3418f218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418f21c:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418f220:	b2db      	uxtb	r3, r3
3418f222:	2b1f      	cmp	r3, #31
3418f224:	d902      	bls.n	3418f22c <SFDP_MemoryReset+0x150>
    xx_xx1x_xxxxb: Hardware reset
    xx_x1xx_xxxxb: Software reset (see bits 13:8 in this DWORD)
    xx_1xxx_xxxxb: Power cycle
    x1_xxxx_xxxxb: Reserved
    */
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418f226:	230f      	movs	r3, #15
3418f228:	75bb      	strb	r3, [r7, #22]
    goto error;
3418f22a:	e027      	b.n	3418f27c <SFDP_MemoryReset+0x1a0>
  }
  else
  {
    /* no coherence, should be managed as error */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f22c:	230c      	movs	r3, #12
3418f22e:	75bb      	strb	r3, [r7, #22]
    goto error;
3418f230:	e024      	b.n	3418f27c <SFDP_MemoryReset+0x1a0>
  }

  switch(reset_method)
3418f232:	7dfb      	ldrb	r3, [r7, #23]
3418f234:	2b05      	cmp	r3, #5
3418f236:	d009      	beq.n	3418f24c <SFDP_MemoryReset+0x170>
3418f238:	2b05      	cmp	r3, #5
3418f23a:	dc1b      	bgt.n	3418f274 <SFDP_MemoryReset+0x198>
3418f23c:	2b00      	cmp	r3, #0
3418f23e:	d01c      	beq.n	3418f27a <SFDP_MemoryReset+0x19e>
3418f240:	2b00      	cmp	r3, #0
3418f242:	db17      	blt.n	3418f274 <SFDP_MemoryReset+0x198>
3418f244:	3b01      	subs	r3, #1
3418f246:	2b03      	cmp	r3, #3
3418f248:	d814      	bhi.n	3418f274 <SFDP_MemoryReset+0x198>
3418f24a:	e010      	b.n	3418f26e <SFDP_MemoryReset+0x192>
  case RESET_NONE:
    break;
  case RESET_INSTRUCTION_66_99:
    /* perform the reset in 1, 2 and 4 lines */
    SFDP_DEBUG_STR("::reset 0x66 0x99");
    (void)SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, 0x66, NULL, 0);
3418f24c:	687b      	ldr	r3, [r7, #4]
3418f24e:	f103 0008 	add.w	r0, r3, #8
3418f252:	2300      	movs	r3, #0
3418f254:	2200      	movs	r2, #0
3418f256:	2166      	movs	r1, #102	@ 0x66
3418f258:	f7ff fb23 	bl	3418e8a2 <SAL_XSPI_CommandSendData>
    (void)SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, 0x99, NULL, 0);
3418f25c:	687b      	ldr	r3, [r7, #4]
3418f25e:	f103 0008 	add.w	r0, r3, #8
3418f262:	2300      	movs	r3, #0
3418f264:	2200      	movs	r2, #0
3418f266:	2199      	movs	r1, #153	@ 0x99
3418f268:	f7ff fb1b 	bl	3418e8a2 <SAL_XSPI_CommandSendData>
    break;
3418f26c:	e006      	b.n	3418f27c <SFDP_MemoryReset+0x1a0>
  case RESET_INSTRUCTION_F0:
  case RESET_Fh_4DATA_8CLOCK:
  case RESET_Fh_4DATA_10CLOCK:
  case RESET_Fh_4DATA_16CLOCK:
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418f26e:	230f      	movs	r3, #15
3418f270:	75bb      	strb	r3, [r7, #22]
    break;
3418f272:	e003      	b.n	3418f27c <SFDP_MemoryReset+0x1a0>
  /* case RESET_ERROR:*/
  default :
    retr = EXTMEM_SFDP_ERROR_PARAM;
3418f274:	2301      	movs	r3, #1
3418f276:	75bb      	strb	r3, [r7, #22]
    break;
3418f278:	e000      	b.n	3418f27c <SFDP_MemoryReset+0x1a0>
    break;
3418f27a:	bf00      	nop
  }
error :
  return retr;
3418f27c:	7dbb      	ldrb	r3, [r7, #22]
}
3418f27e:	4618      	mov	r0, r3
3418f280:	3718      	adds	r7, #24
3418f282:	46bd      	mov	sp, r7
3418f284:	bd80      	pop	{r7, pc}
3418f286:	bf00      	nop
3418f288:	341c02a0 	.word	0x341c02a0
3418f28c:	341c031c 	.word	0x341c031c
3418f290:	341c0318 	.word	0x341c0318

3418f294 <SFDP_BuildGenericDriver>:

SFDP_StatusTypeDef SFDP_BuildGenericDriver(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint8_t *FreqUpdated)
{
3418f294:	b5f0      	push	{r4, r5, r6, r7, lr}
3418f296:	b08f      	sub	sp, #60	@ 0x3c
3418f298:	af04      	add	r7, sp, #16
3418f29a:	6078      	str	r0, [r7, #4]
3418f29c:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418f29e:	2300      	movs	r3, #0
3418f2a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  static const uint16_t block_erase_unit[] = { 16u, 256u, 4000u, 64000u};
  static const uint32_t chip_erase_unit[]  = { 16u, 256u, 4000u, 64000u};
  SFDP_DEBUG_STR(__func__);
  uint8_t flag4byteAddress = 0u;
3418f2a4:	2300      	movs	r3, #0
3418f2a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint32_t dummyCycles, dummyCyclesValue;
  uint8_t FlashSize;

  if ((Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_BASIC_SPIPROTOCOL) != (uint32_t)SFDP_PARAMID_BASIC_SPIPROTOCOL)
3418f2aa:	687b      	ldr	r3, [r7, #4]
3418f2ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418f2b0:	f003 0308 	and.w	r3, r3, #8
3418f2b4:	2b00      	cmp	r3, #0
3418f2b6:	d104      	bne.n	3418f2c2 <SFDP_BuildGenericDriver+0x2e>
  {
    /* This table is mandatory to build the driver data */
    retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
3418f2b8:	2307      	movs	r3, #7
3418f2ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418f2be:	f000 bdbd 	b.w	3418fe3c <SFDP_BuildGenericDriver+0xba8>
  /* ---------------------------------------------------
   *  Flash sizing
   * ---------------------------------------------------
   */
  /* Calculation of the flash density in puissance of 2 */
  if ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x80000000u) == 0x0u)
3418f2c2:	4bba      	ldr	r3, [pc, #744]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f2c4:	689b      	ldr	r3, [r3, #8]
3418f2c6:	2b00      	cmp	r3, #0
3418f2c8:	db13      	blt.n	3418f2f2 <SFDP_BuildGenericDriver+0x5e>
  {
#if( __CORTEX_M == 0)
#error "the assembly instruction is not available"
#else
    Object->sfdp_private.FlashSize = 31u - (uint8_t)__CLZ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize + 1u));
3418f2ca:	4bb8      	ldr	r3, [pc, #736]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f2cc:	689b      	ldr	r3, [r3, #8]
3418f2ce:	3301      	adds	r3, #1
3418f2d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
3418f2d2:	69bb      	ldr	r3, [r7, #24]
3418f2d4:	2b00      	cmp	r3, #0
3418f2d6:	d101      	bne.n	3418f2dc <SFDP_BuildGenericDriver+0x48>
    return 32U;
3418f2d8:	2320      	movs	r3, #32
3418f2da:	e003      	b.n	3418f2e4 <SFDP_BuildGenericDriver+0x50>
  return __builtin_clz(value);
3418f2dc:	69bb      	ldr	r3, [r7, #24]
3418f2de:	fab3 f383 	clz	r3, r3
3418f2e2:	b2db      	uxtb	r3, r3
3418f2e4:	f1c3 031f 	rsb	r3, r3, #31
3418f2e8:	b2da      	uxtb	r2, r3
3418f2ea:	687b      	ldr	r3, [r7, #4]
3418f2ec:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
3418f2f0:	e005      	b.n	3418f2fe <SFDP_BuildGenericDriver+0x6a>
#endif /* __CORTEX_M */
  }
  else
  {
    Object->sfdp_private.FlashSize = (uint8_t)(JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x7FFFFFFFu);
3418f2f2:	4bae      	ldr	r3, [pc, #696]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f2f4:	689b      	ldr	r3, [r3, #8]
3418f2f6:	b2da      	uxtb	r2, r3
3418f2f8:	687b      	ldr	r3, [r7, #4]
3418f2fa:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  }

  /* Conversion bit to byte */
  Object->sfdp_private.FlashSize = Object->sfdp_private.FlashSize - 3u; /* divide by eight the value */
3418f2fe:	687b      	ldr	r3, [r7, #4]
3418f300:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
3418f304:	3b03      	subs	r3, #3
3418f306:	b2da      	uxtb	r2, r3
3418f308:	687b      	ldr	r3, [r7, #4]
3418f30a:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e

  SFDP_DEBUG_INT("-> flash size: 2^", Object->sfdp_private.FlashSize);
  FlashSize = Object->sfdp_private.FlashSize - 1u;
3418f30e:	687b      	ldr	r3, [r7, #4]
3418f310:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
3418f314:	3b01      	subs	r3, #1
3418f316:	b2db      	uxtb	r3, r3
3418f318:	74fb      	strb	r3, [r7, #19]
  (void) SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_FLASHSIZE, &FlashSize);
3418f31a:	687b      	ldr	r3, [r7, #4]
3418f31c:	3308      	adds	r3, #8
3418f31e:	f107 0213 	add.w	r2, r7, #19
3418f322:	2104      	movs	r1, #4
3418f324:	4618      	mov	r0, r3
3418f326:	f7fe ffdf 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>

  /* get the page size info */
  Object->sfdp_private.PageSize = ((uint32_t)1u <<  JEDEC_Basic.Params.Param_DWORD.D11.PageSize);
3418f32a:	4ba0      	ldr	r3, [pc, #640]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f32c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
3418f330:	f3c3 1303 	ubfx	r3, r3, #4, #4
3418f334:	b2db      	uxtb	r3, r3
3418f336:	461a      	mov	r2, r3
3418f338:	2301      	movs	r3, #1
3418f33a:	fa03 f202 	lsl.w	r2, r3, r2
3418f33e:	687b      	ldr	r3, [r7, #4]
3418f340:	661a      	str	r2, [r3, #96]	@ 0x60

  /* ---------------------------------------------------
   *  Set default command
   * ---------------------------------------------------
   */
  Object->sfdp_private.DriverInfo.PageProgramInstruction = SFDP_DRIVER_PAGE_PROGRAM_COMMAND;
3418f342:	687b      	ldr	r3, [r7, #4]
3418f344:	2202      	movs	r2, #2
3418f346:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
  /* ---------------------------------------------------
   *  Erase management
   * ---------------------------------------------------
   */
  /* Manage erase data */
  Object->sfdp_private.DriverInfo.EraseType1Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Size;
3418f34a:	4b98      	ldr	r3, [pc, #608]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f34c:	f893 2020 	ldrb.w	r2, [r3, #32]
3418f350:	687b      	ldr	r3, [r7, #4]
3418f352:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
  Object->sfdp_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Instruction;
3418f356:	4b95      	ldr	r3, [pc, #596]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f358:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
3418f35c:	687b      	ldr	r3, [r7, #4]
3418f35e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  Object->sfdp_private.DriverInfo.EraseType2Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Size;
3418f362:	4b92      	ldr	r3, [pc, #584]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f364:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
3418f368:	687b      	ldr	r3, [r7, #4]
3418f36a:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  Object->sfdp_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Instruction;
3418f36e:	4b8f      	ldr	r3, [pc, #572]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f370:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
3418f374:	687b      	ldr	r3, [r7, #4]
3418f376:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  Object->sfdp_private.DriverInfo.EraseType3Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Size;
3418f37a:	4b8c      	ldr	r3, [pc, #560]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f37c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
3418f380:	687b      	ldr	r3, [r7, #4]
3418f382:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
  Object->sfdp_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Instruction;
3418f386:	4b89      	ldr	r3, [pc, #548]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f388:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
3418f38c:	687b      	ldr	r3, [r7, #4]
3418f38e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  Object->sfdp_private.DriverInfo.EraseType4Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Size;
3418f392:	4b86      	ldr	r3, [pc, #536]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f394:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
3418f398:	687b      	ldr	r3, [r7, #4]
3418f39a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  Object->sfdp_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Instruction;
3418f39e:	4b83      	ldr	r3, [pc, #524]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f3a0:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
3418f3a4:	687b      	ldr	r3, [r7, #4]
3418f3a6:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

  if (Object->sfdp_private.DriverInfo.EraseType1Command != 0x0u)
3418f3aa:	687b      	ldr	r3, [r7, #4]
3418f3ac:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
3418f3b0:	2b00      	cmp	r3, #0
3418f3b2:	d01d      	beq.n	3418f3f0 <SFDP_BuildGenericDriver+0x15c>
  {
    Object->sfdp_private.DriverInfo.EraseType1Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_units];
3418f3b4:	4b7d      	ldr	r3, [pc, #500]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f3b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418f3ba:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418f3be:	b2db      	uxtb	r3, r3
3418f3c0:	461a      	mov	r2, r3
3418f3c2:	4b7a      	ldr	r3, [pc, #488]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f3c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
3418f3c6:	f3c3 1304 	ubfx	r3, r3, #4, #5
3418f3ca:	b2db      	uxtb	r3, r3
3418f3cc:	3301      	adds	r3, #1
3418f3ce:	fb02 f303 	mul.w	r3, r2, r3
3418f3d2:	4a76      	ldr	r2, [pc, #472]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f3d4:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
3418f3d8:	f3c2 0241 	ubfx	r2, r2, #1, #2
3418f3dc:	b2d2      	uxtb	r2, r2
3418f3de:	4611      	mov	r1, r2
3418f3e0:	4a73      	ldr	r2, [pc, #460]	@ (3418f5b0 <SFDP_BuildGenericDriver+0x31c>)
3418f3e2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418f3e6:	fb03 f202 	mul.w	r2, r3, r2
3418f3ea:	687b      	ldr	r3, [r7, #4]
3418f3ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  if (Object->sfdp_private.DriverInfo.EraseType2Command != 0x0u)
3418f3f0:	687b      	ldr	r3, [r7, #4]
3418f3f2:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
3418f3f6:	2b00      	cmp	r3, #0
3418f3f8:	d01e      	beq.n	3418f438 <SFDP_BuildGenericDriver+0x1a4>
  {
    Object->sfdp_private.DriverInfo.EraseType2Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_units];
3418f3fa:	4b6c      	ldr	r3, [pc, #432]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f3fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418f400:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418f404:	b2db      	uxtb	r3, r3
3418f406:	461a      	mov	r2, r3
3418f408:	4b68      	ldr	r3, [pc, #416]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f40a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
3418f40e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
3418f412:	b2db      	uxtb	r3, r3
3418f414:	3301      	adds	r3, #1
3418f416:	fb02 f303 	mul.w	r3, r2, r3
3418f41a:	4a64      	ldr	r2, [pc, #400]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f41c:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
3418f420:	f3c2 0201 	ubfx	r2, r2, #0, #2
3418f424:	b2d2      	uxtb	r2, r2
3418f426:	4611      	mov	r1, r2
3418f428:	4a61      	ldr	r2, [pc, #388]	@ (3418f5b0 <SFDP_BuildGenericDriver+0x31c>)
3418f42a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418f42e:	fb03 f202 	mul.w	r2, r3, r2
3418f432:	687b      	ldr	r3, [r7, #4]
3418f434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  if (Object->sfdp_private.DriverInfo.EraseType3Command != 0x0u)
3418f438:	687b      	ldr	r3, [r7, #4]
3418f43a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
3418f43e:	2b00      	cmp	r3, #0
3418f440:	d01d      	beq.n	3418f47e <SFDP_BuildGenericDriver+0x1ea>
  {
    Object->sfdp_private.DriverInfo.EraseType3Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_units];
3418f442:	4b5a      	ldr	r3, [pc, #360]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418f448:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418f44c:	b2db      	uxtb	r3, r3
3418f44e:	461a      	mov	r2, r3
3418f450:	4b56      	ldr	r3, [pc, #344]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f452:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
3418f456:	f3c3 0384 	ubfx	r3, r3, #2, #5
3418f45a:	b2db      	uxtb	r3, r3
3418f45c:	3301      	adds	r3, #1
3418f45e:	fb02 f303 	mul.w	r3, r2, r3
3418f462:	4a52      	ldr	r2, [pc, #328]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f464:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
3418f466:	f3c2 12c1 	ubfx	r2, r2, #7, #2
3418f46a:	b2d2      	uxtb	r2, r2
3418f46c:	4611      	mov	r1, r2
3418f46e:	4a50      	ldr	r2, [pc, #320]	@ (3418f5b0 <SFDP_BuildGenericDriver+0x31c>)
3418f470:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418f474:	fb03 f202 	mul.w	r2, r3, r2
3418f478:	687b      	ldr	r3, [r7, #4]
3418f47a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  if (Object->sfdp_private.DriverInfo.EraseType4Command != 0x0u)
3418f47e:	687b      	ldr	r3, [r7, #4]
3418f480:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
3418f484:	2b00      	cmp	r3, #0
3418f486:	d01e      	beq.n	3418f4c6 <SFDP_BuildGenericDriver+0x232>
  {
    Object->sfdp_private.DriverInfo.EraseType4Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_units];
3418f488:	4b48      	ldr	r3, [pc, #288]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f48a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418f48e:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418f492:	b2db      	uxtb	r3, r3
3418f494:	461a      	mov	r2, r3
3418f496:	4b45      	ldr	r3, [pc, #276]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f498:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
3418f49c:	f3c3 0344 	ubfx	r3, r3, #1, #5
3418f4a0:	b2db      	uxtb	r3, r3
3418f4a2:	3301      	adds	r3, #1
3418f4a4:	fb02 f303 	mul.w	r3, r2, r3
3418f4a8:	4a40      	ldr	r2, [pc, #256]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f4aa:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
3418f4ae:	f3c2 1281 	ubfx	r2, r2, #6, #2
3418f4b2:	b2d2      	uxtb	r2, r2
3418f4b4:	4611      	mov	r1, r2
3418f4b6:	4a3e      	ldr	r2, [pc, #248]	@ (3418f5b0 <SFDP_BuildGenericDriver+0x31c>)
3418f4b8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418f4bc:	fb03 f202 	mul.w	r2, r3, r2
3418f4c0:	687b      	ldr	r3, [r7, #4]
3418f4c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  Object->sfdp_private.DriverInfo.EraseChipTiming   = JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_count + 1u)* chip_erase_unit[JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_units];
3418f4c6:	4b39      	ldr	r3, [pc, #228]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f4c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418f4cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418f4d0:	b2db      	uxtb	r3, r3
3418f4d2:	461a      	mov	r2, r3
3418f4d4:	4b35      	ldr	r3, [pc, #212]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f4d6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
3418f4da:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418f4de:	b2db      	uxtb	r3, r3
3418f4e0:	3301      	adds	r3, #1
3418f4e2:	fb02 f303 	mul.w	r3, r2, r3
3418f4e6:	4a31      	ldr	r2, [pc, #196]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f4e8:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
3418f4ec:	f3c2 1241 	ubfx	r2, r2, #5, #2
3418f4f0:	b2d2      	uxtb	r2, r2
3418f4f2:	4611      	mov	r1, r2
3418f4f4:	4a2f      	ldr	r2, [pc, #188]	@ (3418f5b4 <SFDP_BuildGenericDriver+0x320>)
3418f4f6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
3418f4fa:	fb03 f202 	mul.w	r2, r3, r2
3418f4fe:	687b      	ldr	r3, [r7, #4]
3418f500:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   *   WIP/WEL : write in progress/ write enable management
   * ------------------------------------------------------
   */
  /* This bit definition is maintained for legacy compatibility only. New system implementations
  should refer to 6.4.19 for a full definition of volatile and non-volatile behavior. */
  Object->sfdp_private.DriverInfo.ReadWELCommand = SFDP_DRIVER_READ_STATUS_REGISTER_COMMAND;
3418f504:	687b      	ldr	r3, [r7, #4]
3418f506:	2205      	movs	r2, #5
3418f508:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
  Object->sfdp_private.DriverInfo.ReadWIPCommand = SFDP_DRIVER_READ_STATUS_REGISTER_COMMAND;
3418f50c:	687b      	ldr	r3, [r7, #4]
3418f50e:	2205      	movs	r2, #5
3418f510:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  if (JEDEC_Basic.Params.Param_DWORD.D1.WriteEnableInstructionVolatileRegister == 0u)
3418f514:	4b25      	ldr	r3, [pc, #148]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f516:	791b      	ldrb	r3, [r3, #4]
3418f518:	f003 0310 	and.w	r3, r3, #16
3418f51c:	b2db      	uxtb	r3, r3
3418f51e:	2b00      	cmp	r3, #0
3418f520:	d104      	bne.n	3418f52c <SFDP_BuildGenericDriver+0x298>
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_50H_COMMAND;
3418f522:	687b      	ldr	r3, [r7, #4]
3418f524:	2250      	movs	r2, #80	@ 0x50
3418f526:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418f52a:	e003      	b.n	3418f534 <SFDP_BuildGenericDriver+0x2a0>
  }
  else
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_06H_COMMAND;
3418f52c:	687b      	ldr	r3, [r7, #4]
3418f52e:	2206      	movs	r2, #6
3418f530:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
  /* Volatile or Non-Volatile Register and Write Enable Instruction for Status Register 1
     The instruction 01h is typically used to write status register 1 which contains Block Protection (BP) and other bits. Status register 1 is written by the first data byte following the instruction 01h. The protection bits must be written to zero to enable writes/erases to the device.
     This field describes how to modify the writable bits in status register 1 in either a volatile or non-volatile manner. Bits 1:0 in status register 1 are de-facto standard write enable and busy status and are excluded from the definitions below.
  */
  /* xxx_xxx1b: Non-Volatile Status Register 1, powers-up to last written value, use instruction 06h to enable write */
  if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x1u) != 0u)
3418f534:	4b1d      	ldr	r3, [pc, #116]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f536:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418f53a:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418f53e:	b2db      	uxtb	r3, r3
3418f540:	f003 0301 	and.w	r3, r3, #1
3418f544:	2b00      	cmp	r3, #0
3418f546:	d004      	beq.n	3418f552 <SFDP_BuildGenericDriver+0x2be>
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_06H_COMMAND;
3418f548:	687b      	ldr	r3, [r7, #4]
3418f54a:	2206      	movs	r2, #6
3418f54c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418f550:	e046      	b.n	3418f5e0 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_xx1xb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 06h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x02u) != 0u)
3418f552:	4b16      	ldr	r3, [pc, #88]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f554:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418f558:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418f55c:	b2db      	uxtb	r3, r3
3418f55e:	f003 0302 	and.w	r3, r3, #2
3418f562:	2b00      	cmp	r3, #0
3418f564:	d004      	beq.n	3418f570 <SFDP_BuildGenericDriver+0x2dc>
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_06H_COMMAND;
3418f566:	687b      	ldr	r3, [r7, #4]
3418f568:	2206      	movs	r2, #6
3418f56a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418f56e:	e037      	b.n	3418f5e0 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_x1xxb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 50h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x04u) != 0u)
3418f570:	4b0e      	ldr	r3, [pc, #56]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418f576:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418f57a:	b2db      	uxtb	r3, r3
3418f57c:	f003 0304 	and.w	r3, r3, #4
3418f580:	2b00      	cmp	r3, #0
3418f582:	d004      	beq.n	3418f58e <SFDP_BuildGenericDriver+0x2fa>
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_50H_COMMAND;
3418f584:	687b      	ldr	r3, [r7, #4]
3418f586:	2250      	movs	r2, #80	@ 0x50
3418f588:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418f58c:	e028      	b.n	3418f5e0 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_1xxxb: Non-Volatile/Volatile status register 1 powers-up to last written value in the non-volatile status register,
     use instruction 06h to enable write to non-volatile status register. Volatile status register may be activated after
     power-up to override the non-volatile status register, use instruction 50h to enable write and activate the volatile
     status register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x08u) != 0u)
3418f58e:	4b07      	ldr	r3, [pc, #28]	@ (3418f5ac <SFDP_BuildGenericDriver+0x318>)
3418f590:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418f594:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418f598:	b2db      	uxtb	r3, r3
3418f59a:	f003 0308 	and.w	r3, r3, #8
3418f59e:	2b00      	cmp	r3, #0
3418f5a0:	d00a      	beq.n	3418f5b8 <SFDP_BuildGenericDriver+0x324>
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_06H_COMMAND;
3418f5a2:	687b      	ldr	r3, [r7, #4]
3418f5a4:	2206      	movs	r2, #6
3418f5a6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418f5aa:	e019      	b.n	3418f5e0 <SFDP_BuildGenericDriver+0x34c>
3418f5ac:	341c0318 	.word	0x341c0318
3418f5b0:	34191324 	.word	0x34191324
3418f5b4:	3419132c 	.word	0x3419132c
  }
  /* xx1_xxxxb: Status Register 1 contains a mix of volatile and non-volatile bits. The 06h instruction is used to
     enable writing of the register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x10u) != 0u)
3418f5b8:	4b66      	ldr	r3, [pc, #408]	@ (3418f754 <SFDP_BuildGenericDriver+0x4c0>)
3418f5ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418f5be:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418f5c2:	b2db      	uxtb	r3, r3
3418f5c4:	f003 0310 	and.w	r3, r3, #16
3418f5c8:	2b00      	cmp	r3, #0
3418f5ca:	d004      	beq.n	3418f5d6 <SFDP_BuildGenericDriver+0x342>
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_06H_COMMAND;
3418f5cc:	687b      	ldr	r3, [r7, #4]
3418f5ce:	2206      	movs	r2, #6
3418f5d0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418f5d4:	e004      	b.n	3418f5e0 <SFDP_BuildGenericDriver+0x34c>
     1xx_xxxxb: Reserved
     NOTE If the status register is read-only then this field will contain all zeros in bits 4:0.
  */
  else
  {
    retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D16;
3418f5d6:	230a      	movs	r3, #10
3418f5d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418f5dc:	f000 bc2e 	b.w	3418fe3c <SFDP_BuildGenericDriver+0xba8>
  }

  if(0u != (Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
3418f5e0:	687b      	ldr	r3, [r7, #4]
3418f5e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418f5e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418f5ea:	2b00      	cmp	r3, #0
3418f5ec:	d078      	beq.n	3418f6e0 <SFDP_BuildGenericDriver+0x44c>
  {
    /* WIP */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitAvailable)
3418f5ee:	4b5a      	ldr	r3, [pc, #360]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f5f0:	7cdb      	ldrb	r3, [r3, #19]
3418f5f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418f5f6:	b2db      	uxtb	r3, r3
3418f5f8:	2b00      	cmp	r3, #0
3418f5fa:	d034      	beq.n	3418f666 <SFDP_BuildGenericDriver+0x3d2>
    {
      Object->sfdp_private.DriverInfo.ReadWIPCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.CommandReadAccess;
3418f5fc:	4b56      	ldr	r3, [pc, #344]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f5fe:	7c5a      	ldrb	r2, [r3, #17]
3418f600:	687b      	ldr	r3, [r7, #4]
3418f602:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      Object->sfdp_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
3418f606:	4b54      	ldr	r3, [pc, #336]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f608:	7cdb      	ldrb	r3, [r3, #19]
3418f60a:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418f60e:	b2db      	uxtb	r3, r3
3418f610:	461a      	mov	r2, r3
3418f612:	687b      	ldr	r3, [r7, #4]
3418f614:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      Object->sfdp_private.DriverInfo.WIPBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.WIPpolarity;
3418f618:	4b4f      	ldr	r3, [pc, #316]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f61a:	7cdb      	ldrb	r3, [r3, #19]
3418f61c:	f3c3 1380 	ubfx	r3, r3, #6, #1
3418f620:	b2db      	uxtb	r3, r3
3418f622:	461a      	mov	r2, r3
3418f624:	687b      	ldr	r3, [r7, #4]
3418f626:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
      Object->sfdp_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
3418f62a:	4b4b      	ldr	r3, [pc, #300]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f62c:	7cdb      	ldrb	r3, [r3, #19]
3418f62e:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418f632:	b2db      	uxtb	r3, r3
3418f634:	461a      	mov	r2, r3
3418f636:	687b      	ldr	r3, [r7, #4]
3418f638:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
3418f63c:	4b46      	ldr	r3, [pc, #280]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f63e:	7cdb      	ldrb	r3, [r3, #19]
3418f640:	f003 0310 	and.w	r3, r3, #16
3418f644:	b2db      	uxtb	r3, r3
3418f646:	2b00      	cmp	r3, #0
3418f648:	d009      	beq.n	3418f65e <SFDP_BuildGenericDriver+0x3ca>
      {
        /* Address management */
        Object->sfdp_private.DriverInfo.WIPAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.LocalAddressForWIP;
3418f64a:	4b43      	ldr	r3, [pc, #268]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f64c:	7cdb      	ldrb	r3, [r3, #19]
3418f64e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
3418f652:	b2db      	uxtb	r3, r3
3418f654:	461a      	mov	r2, r3
3418f656:	687b      	ldr	r3, [r7, #4]
3418f658:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
3418f65c:	e003      	b.n	3418f666 <SFDP_BuildGenericDriver+0x3d2>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfdp_private.DriverInfo.WIPAddress = EXTMEM_ADDRESS_NONE;
3418f65e:	687b      	ldr	r3, [r7, #4]
3418f660:	22ff      	movs	r2, #255	@ 0xff
3418f662:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
      }
    }

    /* WEL */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D6.WELBitAvailable)
3418f666:	4b3c      	ldr	r3, [pc, #240]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f668:	7ddb      	ldrb	r3, [r3, #23]
3418f66a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418f66e:	b2db      	uxtb	r3, r3
3418f670:	2b00      	cmp	r3, #0
3418f672:	d073      	beq.n	3418f75c <SFDP_BuildGenericDriver+0x4c8>
    {
      Object->sfdp_private.DriverInfo.ReadWELCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.CommandReadAccess;
3418f674:	4b38      	ldr	r3, [pc, #224]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f676:	7d5a      	ldrb	r2, [r3, #21]
3418f678:	687b      	ldr	r3, [r7, #4]
3418f67a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
      Object->sfdp_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
3418f67e:	4b36      	ldr	r3, [pc, #216]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f680:	7ddb      	ldrb	r3, [r3, #23]
3418f682:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418f686:	b2db      	uxtb	r3, r3
3418f688:	461a      	mov	r2, r3
3418f68a:	687b      	ldr	r3, [r7, #4]
3418f68c:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfdp_private.DriverInfo.WELBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELpolarity;
3418f690:	4b31      	ldr	r3, [pc, #196]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f692:	7ddb      	ldrb	r3, [r3, #23]
3418f694:	f3c3 1380 	ubfx	r3, r3, #6, #1
3418f698:	b2db      	uxtb	r3, r3
3418f69a:	461a      	mov	r2, r3
3418f69c:	687b      	ldr	r3, [r7, #4]
3418f69e:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
      Object->sfdp_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
3418f6a2:	4b2d      	ldr	r3, [pc, #180]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f6a4:	7ddb      	ldrb	r3, [r3, #23]
3418f6a6:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418f6aa:	b2db      	uxtb	r3, r3
3418f6ac:	461a      	mov	r2, r3
3418f6ae:	687b      	ldr	r3, [r7, #4]
3418f6b0:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
3418f6b4:	4b28      	ldr	r3, [pc, #160]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f6b6:	7cdb      	ldrb	r3, [r3, #19]
3418f6b8:	f003 0310 	and.w	r3, r3, #16
3418f6bc:	b2db      	uxtb	r3, r3
3418f6be:	2b00      	cmp	r3, #0
3418f6c0:	d009      	beq.n	3418f6d6 <SFDP_BuildGenericDriver+0x442>
      {
        /* Address management */
        Object->sfdp_private.DriverInfo.WELAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELLocalAddress;
3418f6c2:	4b25      	ldr	r3, [pc, #148]	@ (3418f758 <SFDP_BuildGenericDriver+0x4c4>)
3418f6c4:	7ddb      	ldrb	r3, [r3, #23]
3418f6c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
3418f6ca:	b2db      	uxtb	r3, r3
3418f6cc:	461a      	mov	r2, r3
3418f6ce:	687b      	ldr	r3, [r7, #4]
3418f6d0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
3418f6d4:	e042      	b.n	3418f75c <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfdp_private.DriverInfo.WELAddress = EXTMEM_ADDRESS_NONE;
3418f6d6:	687b      	ldr	r3, [r7, #4]
3418f6d8:	22ff      	movs	r2, #255	@ 0xff
3418f6da:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
3418f6de:	e03d      	b.n	3418f75c <SFDP_BuildGenericDriver+0x4c8>
      }
    }
  }
  else
  {
      Object->sfdp_private.DriverInfo.WELPosition     = 1;
3418f6e0:	687b      	ldr	r3, [r7, #4]
3418f6e2:	2201      	movs	r2, #1
3418f6e4:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfdp_private.DriverInfo.WELBusyPolarity = 0;
3418f6e8:	687b      	ldr	r3, [r7, #4]
3418f6ea:	2200      	movs	r2, #0
3418f6ec:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

      /*
       *   WIP : Status register read management
       *         Basic D14 Status register Polling device Busy
       */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x01u))
3418f6f0:	4b18      	ldr	r3, [pc, #96]	@ (3418f754 <SFDP_BuildGenericDriver+0x4c0>)
3418f6f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3418f6f6:	f3c3 0385 	ubfx	r3, r3, #2, #6
3418f6fa:	b2db      	uxtb	r3, r3
3418f6fc:	f003 0301 	and.w	r3, r3, #1
3418f700:	2b00      	cmp	r3, #0
3418f702:	d00c      	beq.n	3418f71e <SFDP_BuildGenericDriver+0x48a>
      {
        /* xx_xxx1b: Use of legacy polling is supported by reading the Status Register with 05h instruction
           and checking WIP bit[0] (0=ready; 1=busy). */
        Object->sfdp_private.DriverInfo.ReadWIPCommand = SFDP_DRIVER_READ_STATUS_REGISTER_COMMAND;
3418f704:	687b      	ldr	r3, [r7, #4]
3418f706:	2205      	movs	r2, #5
3418f708:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfdp_private.DriverInfo.WIPPosition = 0u;
3418f70c:	687b      	ldr	r3, [r7, #4]
3418f70e:	2200      	movs	r2, #0
3418f710:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfdp_private.DriverInfo.WIPBusyPolarity = 0u;
3418f714:	687b      	ldr	r3, [r7, #4]
3418f716:	2200      	movs	r2, #0
3418f718:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
3418f71c:	e01e      	b.n	3418f75c <SFDP_BuildGenericDriver+0x4c8>
      }
      else if (0x02u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x02u))
3418f71e:	4b0d      	ldr	r3, [pc, #52]	@ (3418f754 <SFDP_BuildGenericDriver+0x4c0>)
3418f720:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3418f724:	f3c3 0385 	ubfx	r3, r3, #2, #6
3418f728:	b2db      	uxtb	r3, r3
3418f72a:	f003 0302 	and.w	r3, r3, #2
3418f72e:	2b00      	cmp	r3, #0
3418f730:	d00c      	beq.n	3418f74c <SFDP_BuildGenericDriver+0x4b8>
      {
        /* xx_xx1xb: Bit 7 of the Flag Status Register may be polled any time a Program, Erase, Suspend/Resume
           command is issued, or after a Reset command while the device is busy. The read instruction is 70h.
           Flag Status Register bit definitions: bit[7]: Program or erase controller status (0=busy; 1=ready)*/
        Object->sfdp_private.DriverInfo.ReadWIPCommand = 0x70;
3418f732:	687b      	ldr	r3, [r7, #4]
3418f734:	2270      	movs	r2, #112	@ 0x70
3418f736:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfdp_private.DriverInfo.WIPPosition = 7u;
3418f73a:	687b      	ldr	r3, [r7, #4]
3418f73c:	2207      	movs	r2, #7
3418f73e:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfdp_private.DriverInfo.WIPBusyPolarity = 0u;
3418f742:	687b      	ldr	r3, [r7, #4]
3418f744:	2200      	movs	r2, #0
3418f746:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
3418f74a:	e007      	b.n	3418f75c <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
          retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D14;
3418f74c:	2309      	movs	r3, #9
3418f74e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418f752:	e373      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
3418f754:	341c0318 	.word	0x341c0318
3418f758:	341c0398 	.word	0x341c0398
      }
  }

  /* Set default value for Read instruction */
  Object->sfdp_private.DriverInfo.ReadInstruction     = SFDP_DRIVER_READ_COMMAND;
3418f75c:	687b      	ldr	r3, [r7, #4]
3418f75e:	2203      	movs	r2, #3
3418f760:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

  /* ---------------------------------------------------
   *  command based on SFDP_PARAMID_BASIC_SPIPROTOCOL
   * ---------------------------------------------------
   */
  if (((Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_BASIC_SPIPROTOCOL)
3418f764:	687b      	ldr	r3, [r7, #4]
3418f766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418f76a:	f003 0308 	and.w	r3, r3, #8
3418f76e:	2b00      	cmp	r3, #0
3418f770:	f000 80af 	beq.w	3418f8d2 <SFDP_BuildGenericDriver+0x63e>
       == (uint32_t)SFDP_PARAMID_BASIC_SPIPROTOCOL)
      && (Object->sfdp_private.Config < EXTMEM_LINK_CONFIG_8LINES))
3418f774:	687b      	ldr	r3, [r7, #4]
3418f776:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418f77a:	2b02      	cmp	r3, #2
3418f77c:	f200 80a9 	bhi.w	3418f8d2 <SFDP_BuildGenericDriver+0x63e>
  {
    dummyCycles = 0;
3418f780:	2300      	movs	r3, #0
3418f782:	617b      	str	r3, [r7, #20]
    Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
3418f784:	687b      	ldr	r3, [r7, #4]
3418f786:	2200      	movs	r2, #0
3418f788:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

    if (Object->sfdp_private.Config > EXTMEM_LINK_CONFIG_1LINE)
3418f78c:	687b      	ldr	r3, [r7, #4]
3418f78e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418f792:	2b00      	cmp	r3, #0
3418f794:	d04c      	beq.n	3418f830 <SFDP_BuildGenericDriver+0x59c>
    {
      /* control if read 1s1s2s is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction != 0u)
3418f796:	4baa      	ldr	r3, [pc, #680]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f798:	7c5b      	ldrb	r3, [r3, #17]
3418f79a:	2b00      	cmp	r3, #0
3418f79c:	d015      	beq.n	3418f7ca <SFDP_BuildGenericDriver+0x536>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_ModeClock;
3418f79e:	4ba8      	ldr	r3, [pc, #672]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f7a0:	7c1b      	ldrb	r3, [r3, #16]
3418f7a2:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418f7a6:	b2db      	uxtb	r3, r3
3418f7a8:	461a      	mov	r2, r3
3418f7aa:	4ba5      	ldr	r3, [pc, #660]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f7ac:	7c1b      	ldrb	r3, [r3, #16]
3418f7ae:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418f7b2:	b2db      	uxtb	r3, r3
3418f7b4:	4413      	add	r3, r2
3418f7b6:	617b      	str	r3, [r7, #20]
        Object->sfdp_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction;
3418f7b8:	4ba1      	ldr	r3, [pc, #644]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f7ba:	7c5a      	ldrb	r2, [r3, #17]
3418f7bc:	687b      	ldr	r3, [r7, #4]
3418f7be:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S2S;
3418f7c2:	687b      	ldr	r3, [r7, #4]
3418f7c4:	2201      	movs	r2, #1
3418f7c6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* control if read 1S2S2S is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction != 0u)
3418f7ca:	4b9d      	ldr	r3, [pc, #628]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f7cc:	7cdb      	ldrb	r3, [r3, #19]
3418f7ce:	2b00      	cmp	r3, #0
3418f7d0:	d015      	beq.n	3418f7fe <SFDP_BuildGenericDriver+0x56a>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_ModeClock;
3418f7d2:	4b9b      	ldr	r3, [pc, #620]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f7d4:	7c9b      	ldrb	r3, [r3, #18]
3418f7d6:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418f7da:	b2db      	uxtb	r3, r3
3418f7dc:	461a      	mov	r2, r3
3418f7de:	4b98      	ldr	r3, [pc, #608]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f7e0:	7c9b      	ldrb	r3, [r3, #18]
3418f7e2:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418f7e6:	b2db      	uxtb	r3, r3
3418f7e8:	4413      	add	r3, r2
3418f7ea:	617b      	str	r3, [r7, #20]
        Object->sfdp_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction;
3418f7ec:	4b94      	ldr	r3, [pc, #592]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f7ee:	7cda      	ldrb	r2, [r3, #19]
3418f7f0:	687b      	ldr	r3, [r7, #4]
3418f7f2:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_1S2S2S;
3418f7f6:	687b      	ldr	r3, [r7, #4]
3418f7f8:	2202      	movs	r2, #2
3418f7fa:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* The memory work only in 2S2S2S */
      if (JEDEC_Basic.Params.Param_DWORD.D5._2S2S2S_FastReadSupport != 0u)
3418f7fe:	4b90      	ldr	r3, [pc, #576]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f800:	7d1b      	ldrb	r3, [r3, #20]
3418f802:	f003 0301 	and.w	r3, r3, #1
3418f806:	b2db      	uxtb	r3, r3
3418f808:	2b00      	cmp	r3, #0
3418f80a:	d011      	beq.n	3418f830 <SFDP_BuildGenericDriver+0x59c>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_ModeClock;
3418f80c:	4b8c      	ldr	r3, [pc, #560]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f80e:	7e9b      	ldrb	r3, [r3, #26]
3418f810:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418f814:	b2db      	uxtb	r3, r3
3418f816:	461a      	mov	r2, r3
3418f818:	4b89      	ldr	r3, [pc, #548]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f81a:	7e9b      	ldrb	r3, [r3, #26]
3418f81c:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418f820:	b2db      	uxtb	r3, r3
3418f822:	4413      	add	r3, r2
3418f824:	617b      	str	r3, [r7, #20]
        Object->sfdp_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_FastReadInstruction;
3418f826:	4b86      	ldr	r3, [pc, #536]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f828:	7eda      	ldrb	r2, [r3, #27]
3418f82a:	687b      	ldr	r3, [r7, #4]
3418f82c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      }
    }

    /* the command set is only based on this table */
    /* determine the best line configuration */
    if (Object->sfdp_private.Config > EXTMEM_LINK_CONFIG_2LINES)
3418f830:	687b      	ldr	r3, [r7, #4]
3418f832:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418f836:	2b01      	cmp	r3, #1
3418f838:	d92c      	bls.n	3418f894 <SFDP_BuildGenericDriver+0x600>
    {
      if (JEDEC_Basic.Params.Param_DWORD.D5._4S4S4S_FastReadSupport != 0u)
3418f83a:	4b81      	ldr	r3, [pc, #516]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f83c:	7d1b      	ldrb	r3, [r3, #20]
3418f83e:	f003 0310 	and.w	r3, r3, #16
3418f842:	b2db      	uxtb	r3, r3
3418f844:	2b00      	cmp	r3, #0
3418f846:	d020      	beq.n	3418f88a <SFDP_BuildGenericDriver+0x5f6>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_ModeClock;
3418f848:	4b7d      	ldr	r3, [pc, #500]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f84a:	7f9b      	ldrb	r3, [r3, #30]
3418f84c:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418f850:	b2db      	uxtb	r3, r3
3418f852:	461a      	mov	r2, r3
3418f854:	4b7a      	ldr	r3, [pc, #488]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f856:	7f9b      	ldrb	r3, [r3, #30]
3418f858:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418f85c:	b2db      	uxtb	r3, r3
3418f85e:	4413      	add	r3, r2
3418f860:	617b      	str	r3, [r7, #20]
        Object->sfdp_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_FastReadInstruction;
3418f862:	4b77      	ldr	r3, [pc, #476]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f864:	7fda      	ldrb	r2, [r3, #31]
3418f866:	687b      	ldr	r3, [r7, #4]
3418f868:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_4S4S4S;
3418f86c:	687b      	ldr	r3, [r7, #4]
3418f86e:	2204      	movs	r2, #4
3418f870:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

        retr = JEDEC_Basic_Manage4S4S4SEnableSequence(Object);
3418f874:	6878      	ldr	r0, [r7, #4]
3418f876:	f000 feeb 	bl	34190650 <JEDEC_Basic_Manage4S4S4SEnableSequence>
3418f87a:	4603      	mov	r3, r0
3418f87c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ( retr != EXTMEM_SFDP_OK)
3418f880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418f884:	2b00      	cmp	r3, #0
3418f886:	f040 82d6 	bne.w	3418fe36 <SFDP_BuildGenericDriver+0xba2>
      }
      else /* other configuration with more 4 lines */
      {
        /* not yet handled */
      }
      SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfdp_private.SALObject, (uint8_t)dummyCycles);
3418f88a:	697b      	ldr	r3, [r7, #20]
3418f88c:	b2da      	uxtb	r2, r3
3418f88e:	687b      	ldr	r3, [r7, #4]
3418f890:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
#endif /* IS25WP032D_ENABLE_DTR */

    }

    /* Configure the link */
    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_PHY_LINK, &Object->sfdp_private.DriverInfo.SpiPhyLink))
3418f894:	687b      	ldr	r3, [r7, #4]
3418f896:	f103 0008 	add.w	r0, r3, #8
3418f89a:	687b      	ldr	r3, [r7, #4]
3418f89c:	3364      	adds	r3, #100	@ 0x64
3418f89e:	461a      	mov	r2, r3
3418f8a0:	2100      	movs	r1, #0
3418f8a2:	f7fe fd21 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>
3418f8a6:	4603      	mov	r3, r0
3418f8a8:	2b00      	cmp	r3, #0
3418f8aa:	d003      	beq.n	3418f8b4 <SFDP_BuildGenericDriver+0x620>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f8ac:	230c      	movs	r3, #12
3418f8ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418f8b2:	e2c3      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
    }

    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_DUMMY_CYCLES, &dummyCycles))
3418f8b4:	687b      	ldr	r3, [r7, #4]
3418f8b6:	3308      	adds	r3, #8
3418f8b8:	f107 0214 	add.w	r2, r7, #20
3418f8bc:	2101      	movs	r1, #1
3418f8be:	4618      	mov	r0, r3
3418f8c0:	f7fe fd12 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>
3418f8c4:	4603      	mov	r3, r0
3418f8c6:	2b00      	cmp	r3, #0
3418f8c8:	d003      	beq.n	3418f8d2 <SFDP_BuildGenericDriver+0x63e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f8ca:	230c      	movs	r3, #12
3418f8cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418f8d0:	e2b4      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
  /* -------------------------------------------------------------------------------------------------------------------
     If an octal DDR table is present and the target is 8D8D8D,
     when switch in octal DDR mode
     -------------------------------------------------------------------------------------------------------------------
  */
  if (((uint32_t)SFDP_PARAMID_OCTAL_DDR == (Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_OCTAL_DDR))
3418f8d2:	687b      	ldr	r3, [r7, #4]
3418f8d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418f8d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418f8dc:	2b00      	cmp	r3, #0
3418f8de:	d073      	beq.n	3418f9c8 <SFDP_BuildGenericDriver+0x734>
      && (EXTMEM_LINK_CONFIG_8LINES == Object->sfdp_private.Config))
3418f8e0:	687b      	ldr	r3, [r7, #4]
3418f8e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418f8e6:	2b03      	cmp	r3, #3
3418f8e8:	d16e      	bne.n	3418f9c8 <SFDP_BuildGenericDriver+0x734>
  {
    /* check if we are not already in octal mode */
    if (PHY_LINK_8D8D8D == Object->sfdp_private.DriverInfo.SpiPhyLink)
3418f8ea:	687b      	ldr	r3, [r7, #4]
3418f8ec:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418f8f0:	2b09      	cmp	r3, #9
3418f8f2:	d103      	bne.n	3418f8fc <SFDP_BuildGenericDriver+0x668>
    {
      flag4byteAddress = 1u;
3418f8f4:	2301      	movs	r3, #1
3418f8f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
3418f8fa:	e044      	b.n	3418f986 <SFDP_BuildGenericDriver+0x6f2>
    }
    else
    {
      /* Execute the flash command sequence to switch in octal DDR */
      if (EXTMEM_SFDP_OK == sfdp_enter_octal_mode(Object))
3418f8fc:	6878      	ldr	r0, [r7, #4]
3418f8fe:	f000 fc11 	bl	34190124 <sfdp_enter_octal_mode>
3418f902:	4603      	mov	r3, r0
3418f904:	2b00      	cmp	r3, #0
3418f906:	d13e      	bne.n	3418f986 <SFDP_BuildGenericDriver+0x6f2>
      {
        /* switch the memory interface configuration according to the Access protocol field */
        flag4byteAddress = 1u;
3418f908:	2301      	movs	r3, #1
3418f90a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* Specific case of GigaDevice memory GD25LX512ME whose Instruction mode remains on 8S (8bit commands) */
        if (Object->sfdp_private.ManuID == EXTMEM_MANFACTURER_GIGADEVICE)
3418f90e:	687b      	ldr	r3, [r7, #4]
3418f910:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
3418f914:	2bc8      	cmp	r3, #200	@ 0xc8
3418f916:	d104      	bne.n	3418f922 <SFDP_BuildGenericDriver+0x68e>
        {
          Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_8S8D8D;
3418f918:	687b      	ldr	r3, [r7, #4]
3418f91a:	2208      	movs	r2, #8
3418f91c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
3418f920:	e003      	b.n	3418f92a <SFDP_BuildGenericDriver+0x696>
        }
        else
        {
          Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_8D8D8D;
3418f922:	687b      	ldr	r3, [r7, #4]
3418f924:	2209      	movs	r2, #9
3418f926:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        }

        /* update the physical link */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_PHY_LINK, &Object->sfdp_private.DriverInfo.SpiPhyLink))
3418f92a:	687b      	ldr	r3, [r7, #4]
3418f92c:	f103 0008 	add.w	r0, r3, #8
3418f930:	687b      	ldr	r3, [r7, #4]
3418f932:	3364      	adds	r3, #100	@ 0x64
3418f934:	461a      	mov	r2, r3
3418f936:	2100      	movs	r1, #0
3418f938:	f7fe fcd6 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>
3418f93c:	4603      	mov	r3, r0
3418f93e:	2b00      	cmp	r3, #0
3418f940:	d003      	beq.n	3418f94a <SFDP_BuildGenericDriver+0x6b6>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f942:	230c      	movs	r3, #12
3418f944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418f948:	e278      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
        }

        if (Object->sfdp_private.Sfdp_AccessProtocol == 0xFDu)
3418f94a:	687b      	ldr	r3, [r7, #4]
3418f94c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
3418f950:	2bfd      	cmp	r3, #253	@ 0xfd
3418f952:	d109      	bne.n	3418f968 <SFDP_BuildGenericDriver+0x6d4>
        {
          /* set 20 wait state */
          dummyCycles = 20;
3418f954:	2314      	movs	r3, #20
3418f956:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418f958:	687b      	ldr	r3, [r7, #4]
3418f95a:	3308      	adds	r3, #8
3418f95c:	f107 0214 	add.w	r2, r7, #20
3418f960:	2101      	movs	r1, #1
3418f962:	4618      	mov	r0, r3
3418f964:	f7fe fcc0 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>
        }
        if (Object->sfdp_private.Sfdp_AccessProtocol == 0xFEu)
3418f968:	687b      	ldr	r3, [r7, #4]
3418f96a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
3418f96e:	2bfe      	cmp	r3, #254	@ 0xfe
3418f970:	d109      	bne.n	3418f986 <SFDP_BuildGenericDriver+0x6f2>
        {
          /* set 8 wait state */
          dummyCycles = 8;
3418f972:	2308      	movs	r3, #8
3418f974:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418f976:	687b      	ldr	r3, [r7, #4]
3418f978:	3308      	adds	r3, #8
3418f97a:	f107 0214 	add.w	r2, r7, #20
3418f97e:	2101      	movs	r1, #1
3418f980:	4618      	mov	r0, r3
3418f982:	f7fe fcb1 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>
        /* an error occurs when trying to switch the mode                        */
        /* when continue the process and check if another mode could be targeted */
      }
    }

    if ((0u != (Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_BASIC_SPIPROTOCOL)) &&
3418f986:	687b      	ldr	r3, [r7, #4]
3418f988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418f98c:	f003 0308 	and.w	r3, r3, #8
3418f990:	2b00      	cmp	r3, #0
3418f992:	d019      	beq.n	3418f9c8 <SFDP_BuildGenericDriver+0x734>
        (JEDEC_Basic.size > 16u))
3418f994:	4b2a      	ldr	r3, [pc, #168]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f996:	681b      	ldr	r3, [r3, #0]
    if ((0u != (Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_BASIC_SPIPROTOCOL)) &&
3418f998:	2b10      	cmp	r3, #16
3418f99a:	d915      	bls.n	3418f9c8 <SFDP_BuildGenericDriver+0x734>
    {
      /* check octal information to determine */
      /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
      /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
      /* 0b11 Command and Command Extension forms a 16-bit command word */
      if (JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension > 1u)
3418f99c:	4b28      	ldr	r3, [pc, #160]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f99e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
3418f9a2:	f3c3 1341 	ubfx	r3, r3, #5, #2
3418f9a6:	b2db      	uxtb	r3, r3
3418f9a8:	2b01      	cmp	r3, #1
3418f9aa:	d903      	bls.n	3418f9b4 <SFDP_BuildGenericDriver+0x720>
      {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418f9ac:	230f      	movs	r3, #15
3418f9ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418f9b2:	e243      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
      }
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfdp_private.SALObject, (uint8_t)JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension);
3418f9b4:	4b22      	ldr	r3, [pc, #136]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f9b6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
3418f9ba:	f3c3 1341 	ubfx	r3, r3, #5, #2
3418f9be:	b2db      	uxtb	r3, r3
3418f9c0:	461a      	mov	r2, r3
3418f9c2:	687b      	ldr	r3, [r7, #4]
3418f9c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }
  }

  /* Check WIP flag with new access mode */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418f9c8:	2164      	movs	r1, #100	@ 0x64
3418f9ca:	6878      	ldr	r0, [r7, #4]
3418f9cc:	f000 fa4a 	bl	3418fe64 <driver_check_FlagBUSY>
3418f9d0:	4603      	mov	r3, r0
3418f9d2:	2b00      	cmp	r3, #0
3418f9d4:	d003      	beq.n	3418f9de <SFDP_BuildGenericDriver+0x74a>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f9d6:	230c      	movs	r3, #12
3418f9d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418f9dc:	e22e      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
  }

  if ((Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_4BYTE_ADDRESS_INSTRUCTION) == (uint32_t)SFDP_PARAMID_4BYTE_ADDRESS_INSTRUCTION)
3418f9de:	687b      	ldr	r3, [r7, #4]
3418f9e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418f9e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418f9e8:	2b00      	cmp	r3, #0
3418f9ea:	f000 8144 	beq.w	3418fc76 <SFDP_BuildGenericDriver+0x9e2>
  {
    if (0u == flag4byteAddress)
3418f9ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
3418f9f2:	2b00      	cmp	r3, #0
3418f9f4:	f040 80a2 	bne.w	3418fb3c <SFDP_BuildGenericDriver+0x8a8>
    {
      /* xxxx_xxx1b: issue instruction B7h (preceding write enable not required) */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x01u))
3418f9f8:	4b11      	ldr	r3, [pc, #68]	@ (3418fa40 <SFDP_BuildGenericDriver+0x7ac>)
3418f9fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418f9fe:	f003 0301 	and.w	r3, r3, #1
3418fa02:	2b00      	cmp	r3, #0
3418fa04:	d01e      	beq.n	3418fa44 <SFDP_BuildGenericDriver+0x7b0>
      {
        /* send command to enter 4-bytes Address mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject,0xB7, NULL, 0))
3418fa06:	687b      	ldr	r3, [r7, #4]
3418fa08:	f103 0008 	add.w	r0, r3, #8
3418fa0c:	2300      	movs	r3, #0
3418fa0e:	2200      	movs	r2, #0
3418fa10:	21b7      	movs	r1, #183	@ 0xb7
3418fa12:	f7fe ff46 	bl	3418e8a2 <SAL_XSPI_CommandSendData>
3418fa16:	4603      	mov	r3, r0
3418fa18:	2b00      	cmp	r3, #0
3418fa1a:	d003      	beq.n	3418fa24 <SFDP_BuildGenericDriver+0x790>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fa1c:	230c      	movs	r3, #12
3418fa1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418fa22:	e20b      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
        }

        /* Set 4-Byte addressing on PHY side */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_ADDRESS_4BYTES, NULL))
3418fa24:	687b      	ldr	r3, [r7, #4]
3418fa26:	3308      	adds	r3, #8
3418fa28:	2200      	movs	r2, #0
3418fa2a:	2102      	movs	r1, #2
3418fa2c:	4618      	mov	r0, r3
3418fa2e:	f7fe fc5b 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>
3418fa32:	4603      	mov	r3, r0
3418fa34:	2b00      	cmp	r3, #0
3418fa36:	d06f      	beq.n	3418fb18 <SFDP_BuildGenericDriver+0x884>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fa38:	230c      	movs	r3, #12
3418fa3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418fa3e:	e1fd      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
3418fa40:	341c0318 	.word	0x341c0318
        }

        /* flag4byteAddress = 1u; this setting is not needed because variable is no more used */
      }
      /* xxxx_xx1xb: issue write enable instruction 06h, then issue instruction B7h */
      else if (0x2u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x2u))
3418fa44:	4b53      	ldr	r3, [pc, #332]	@ (3418fb94 <SFDP_BuildGenericDriver+0x900>)
3418fa46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418fa4a:	f003 0302 	and.w	r3, r3, #2
3418fa4e:	2b00      	cmp	r3, #0
3418fa50:	d050      	beq.n	3418faf4 <SFDP_BuildGenericDriver+0x860>
      {
        /* send command to write enable */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject,
3418fa52:	687b      	ldr	r3, [r7, #4]
3418fa54:	f103 0008 	add.w	r0, r3, #8
3418fa58:	687b      	ldr	r3, [r7, #4]
3418fa5a:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418fa5e:	2300      	movs	r3, #0
3418fa60:	2200      	movs	r2, #0
3418fa62:	f7fe ff1e 	bl	3418e8a2 <SAL_XSPI_CommandSendData>
3418fa66:	4603      	mov	r3, r0
3418fa68:	2b00      	cmp	r3, #0
3418fa6a:	d003      	beq.n	3418fa74 <SFDP_BuildGenericDriver+0x7e0>
                                           Object->sfdp_private.DriverInfo.WriteWELCommand, NULL, 0u))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fa6c:	230c      	movs	r3, #12
3418fa6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418fa72:	e1e3      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
        }

        /* control the write enable */
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
3418fa74:	687b      	ldr	r3, [r7, #4]
3418fa76:	f103 0008 	add.w	r0, r3, #8
3418fa7a:	687b      	ldr	r3, [r7, #4]
3418fa7c:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                                   Object->sfdp_private.DriverInfo.ReadWELCommand,
                                                   Object->sfdp_private.DriverInfo.WELAddress,
3418fa80:	687b      	ldr	r3, [r7, #4]
3418fa82:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
3418fa86:	461e      	mov	r6, r3
                                                   ((Object->sfdp_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfdp_private.DriverInfo.WELPosition,
3418fa88:	687b      	ldr	r3, [r7, #4]
3418fa8a:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
3418fa8e:	2b00      	cmp	r3, #0
3418fa90:	d101      	bne.n	3418fa96 <SFDP_BuildGenericDriver+0x802>
3418fa92:	2301      	movs	r3, #1
3418fa94:	e000      	b.n	3418fa98 <SFDP_BuildGenericDriver+0x804>
3418fa96:	2300      	movs	r3, #0
3418fa98:	687a      	ldr	r2, [r7, #4]
3418fa9a:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
3418fa9e:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
3418faa0:	b2dc      	uxtb	r4, r3
                                                   1u << Object->sfdp_private.DriverInfo.WELPosition,
3418faa2:	687b      	ldr	r3, [r7, #4]
3418faa4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
3418faa8:	461a      	mov	r2, r3
3418faaa:	2301      	movs	r3, #1
3418faac:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
3418faae:	b2db      	uxtb	r3, r3
3418fab0:	687a      	ldr	r2, [r7, #4]
3418fab2:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
3418fab6:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
3418faba:	9502      	str	r5, [sp, #8]
3418fabc:	9201      	str	r2, [sp, #4]
3418fabe:	9300      	str	r3, [sp, #0]
3418fac0:	4623      	mov	r3, r4
3418fac2:	4632      	mov	r2, r6
3418fac4:	f7fe fffa 	bl	3418eabc <SAL_XSPI_CheckStatusRegister>
3418fac8:	4603      	mov	r3, r0
3418faca:	2b00      	cmp	r3, #0
3418facc:	d003      	beq.n	3418fad6 <SFDP_BuildGenericDriver+0x842>
                                                   Object->sfdp_private.ManuID, 1000))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418face:	230c      	movs	r3, #12
3418fad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418fad4:	e1b2      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
        }

        /* send command to enter 4-bytes Address mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, 0xB7, NULL, 0u))
3418fad6:	687b      	ldr	r3, [r7, #4]
3418fad8:	f103 0008 	add.w	r0, r3, #8
3418fadc:	2300      	movs	r3, #0
3418fade:	2200      	movs	r2, #0
3418fae0:	21b7      	movs	r1, #183	@ 0xb7
3418fae2:	f7fe fede 	bl	3418e8a2 <SAL_XSPI_CommandSendData>
3418fae6:	4603      	mov	r3, r0
3418fae8:	2b00      	cmp	r3, #0
3418faea:	d015      	beq.n	3418fb18 <SFDP_BuildGenericDriver+0x884>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418faec:	230c      	movs	r3, #12
3418faee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418faf2:	e1a3      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
        }
      }
      /* x1xx_xxxxb: Always operates in 4-Byte address mode */
      else if (0x40u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x40u))
3418faf4:	4b27      	ldr	r3, [pc, #156]	@ (3418fb94 <SFDP_BuildGenericDriver+0x900>)
3418faf6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418fafa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418fafe:	2b00      	cmp	r3, #0
3418fb00:	d10a      	bne.n	3418fb18 <SFDP_BuildGenericDriver+0x884>
      {
        /* nothing to do */
        /* flag4byteAddress = 1u; this setting is not needed because variable is no more used */
      }
      /* xx1x_xxxxb: Supports dedicated 4-Byte address instruction set. Consult vendor data sheet for the instruction set definition.*/
      else if (0x20u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x20u))
3418fb02:	4b24      	ldr	r3, [pc, #144]	@ (3418fb94 <SFDP_BuildGenericDriver+0x900>)
3418fb04:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418fb08:	f003 0320 	and.w	r3, r3, #32
3418fb0c:	2b00      	cmp	r3, #0
3418fb0e:	d103      	bne.n	3418fb18 <SFDP_BuildGenericDriver+0x884>
        /* xxxx_x1xxb: 8-bit volatile extended address register used to define A[31:24] bits. Read with instruction C8h. Write instruction is C5h with 1 byte of data. Select the active 128 Mbit memory segment by setting the appropriate A[31:24] bits and use 3-Byte addressing.
           xxxx_1xxxb: 8-bit volatile bank register used to define A[30:A24] bits. MSB (bit[7]) is used to enable/disable 4-byte address mode. When MSB is set to 1, 4-byte address mode is active and A[30:24] bits are do not care. Read with instruction 16h. Write instruction is 17h with 1 byte of data. When MSB is cleared to 0, select the active 128 Mbit segment by setting the appropriate A[30:24] bits and use 3-Byte addressing.
           xxx1_xxxxb: A 16-bit nonvolatile configuration register controls 3-Byte/4-Byte address mode. Read instruction is B5h. Bit[0] controls address mode [0=3-Byte;1=4-Byte]. Write configuration register instruction is B1h, data length is 2 bytes.
        */
      else {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418fb10:	230f      	movs	r3, #15
3418fb12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418fb16:	e191      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>

      }

      /* Set 4 bytes addressing on PHY side */
      if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_ADDRESS_4BYTES, NULL))
3418fb18:	687b      	ldr	r3, [r7, #4]
3418fb1a:	3308      	adds	r3, #8
3418fb1c:	2200      	movs	r2, #0
3418fb1e:	2102      	movs	r1, #2
3418fb20:	4618      	mov	r0, r3
3418fb22:	f7fe fbe1 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>
3418fb26:	4603      	mov	r3, r0
3418fb28:	2b00      	cmp	r3, #0
3418fb2a:	d003      	beq.n	3418fb34 <SFDP_BuildGenericDriver+0x8a0>
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fb2c:	230c      	movs	r3, #12
3418fb2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418fb32:	e183      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
      }

      /* Set the read function for 4 bytes Address */
      Object->sfdp_private.DriverInfo.ReadInstruction = 0x13U;
3418fb34:	687b      	ldr	r3, [r7, #4]
3418fb36:	2213      	movs	r2, #19
3418fb38:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if ((EXTMEM_LINK_CONFIG_8LINES == Object->sfdp_private.Config) && (PHY_LINK_1S1S1S == Object->sfdp_private.DriverInfo.SpiPhyLink))
3418fb3c:	687b      	ldr	r3, [r7, #4]
3418fb3e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418fb42:	2b03      	cmp	r3, #3
3418fb44:	d132      	bne.n	3418fbac <SFDP_BuildGenericDriver+0x918>
3418fb46:	687b      	ldr	r3, [r7, #4]
3418fb48:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418fb4c:	2b00      	cmp	r3, #0
3418fb4e:	d12d      	bne.n	3418fbac <SFDP_BuildGenericDriver+0x918>
    {
      /* check if we can switch to if the config is still 1S8S8S */
      if ((0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)  && (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand))
3418fb50:	4b11      	ldr	r3, [pc, #68]	@ (3418fb98 <SFDP_BuildGenericDriver+0x904>)
3418fb52:	789b      	ldrb	r3, [r3, #2]
3418fb54:	f003 0320 	and.w	r3, r3, #32
3418fb58:	b2db      	uxtb	r3, r3
3418fb5a:	2b00      	cmp	r3, #0
3418fb5c:	d026      	beq.n	3418fbac <SFDP_BuildGenericDriver+0x918>
3418fb5e:	4b0e      	ldr	r3, [pc, #56]	@ (3418fb98 <SFDP_BuildGenericDriver+0x904>)
3418fb60:	78db      	ldrb	r3, [r3, #3]
3418fb62:	f003 0301 	and.w	r3, r3, #1
3418fb66:	b2db      	uxtb	r3, r3
3418fb68:	2b00      	cmp	r3, #0
3418fb6a:	d01f      	beq.n	3418fbac <SFDP_BuildGenericDriver+0x918>
      {
        /* Patch Micron write command 0x81 @0x0 0xE7 */
        Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_1S8S8S;
3418fb6c:	687b      	ldr	r3, [r7, #4]
3418fb6e:	2207      	movs	r2, #7
3418fb70:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_PHY_LINK, &Object->sfdp_private.DriverInfo.SpiPhyLink))
3418fb74:	687b      	ldr	r3, [r7, #4]
3418fb76:	f103 0008 	add.w	r0, r3, #8
3418fb7a:	687b      	ldr	r3, [r7, #4]
3418fb7c:	3364      	adds	r3, #100	@ 0x64
3418fb7e:	461a      	mov	r2, r3
3418fb80:	2100      	movs	r1, #0
3418fb82:	f7fe fbb1 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>
3418fb86:	4603      	mov	r3, r0
3418fb88:	2b00      	cmp	r3, #0
3418fb8a:	d007      	beq.n	3418fb9c <SFDP_BuildGenericDriver+0x908>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fb8c:	230c      	movs	r3, #12
3418fb8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418fb92:	e153      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
3418fb94:	341c0318 	.word	0x341c0318
3418fb98:	341c0378 	.word	0x341c0378
        }
        Object->sfdp_private.DriverInfo.ReadInstruction = 0xCC;
3418fb9c:	687b      	ldr	r3, [r7, #4]
3418fb9e:	22cc      	movs	r2, #204	@ 0xcc
3418fba0:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfdp_private.DriverInfo.PageProgramInstruction = 0x8E;
3418fba4:	687b      	ldr	r3, [r7, #4]
3418fba6:	228e      	movs	r2, #142	@ 0x8e
3418fba8:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

    /*
      need to be study more; it seems that Macronix used it to define the command maybe because only one mode is
      supported in their case
    */
    if ((Object->sfdp_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) ||
3418fbac:	687b      	ldr	r3, [r7, #4]
3418fbae:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418fbb2:	2b09      	cmp	r3, #9
3418fbb4:	d004      	beq.n	3418fbc0 <SFDP_BuildGenericDriver+0x92c>
        (Object->sfdp_private.DriverInfo.SpiPhyLink == PHY_LINK_1S1S1S))
3418fbb6:	687b      	ldr	r3, [r7, #4]
3418fbb8:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    if ((Object->sfdp_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) ||
3418fbbc:	2b00      	cmp	r3, #0
3418fbbe:	d120      	bne.n	3418fc02 <SFDP_BuildGenericDriver+0x96e>
    {
      if (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S1S1S_PageProgramCommand) {Object->sfdp_private.DriverInfo.PageProgramInstruction = 0x12u;}
3418fbc0:	4ba1      	ldr	r3, [pc, #644]	@ (3418fe48 <SFDP_BuildGenericDriver+0xbb4>)
3418fbc2:	781b      	ldrb	r3, [r3, #0]
3418fbc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418fbc8:	b2db      	uxtb	r3, r3
3418fbca:	2b00      	cmp	r3, #0
3418fbcc:	d003      	beq.n	3418fbd6 <SFDP_BuildGenericDriver+0x942>
3418fbce:	687b      	ldr	r3, [r7, #4]
3418fbd0:	2212      	movs	r2, #18
3418fbd2:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S1S1S_ReadCommand)        {Object->sfdp_private.DriverInfo.ReadInstruction        = 0x13u;}
3418fbd6:	4b9c      	ldr	r3, [pc, #624]	@ (3418fe48 <SFDP_BuildGenericDriver+0xbb4>)
3418fbd8:	781b      	ldrb	r3, [r3, #0]
3418fbda:	f003 0301 	and.w	r3, r3, #1
3418fbde:	b2db      	uxtb	r3, r3
3418fbe0:	2b00      	cmp	r3, #0
3418fbe2:	d003      	beq.n	3418fbec <SFDP_BuildGenericDriver+0x958>
3418fbe4:	687b      	ldr	r3, [r7, #4]
3418fbe6:	2213      	movs	r2, #19
3418fbe8:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S1S1S_FastReadCommand)    {Object->sfdp_private.DriverInfo.ReadInstruction        = 0x0Cu;}
3418fbec:	4b96      	ldr	r3, [pc, #600]	@ (3418fe48 <SFDP_BuildGenericDriver+0xbb4>)
3418fbee:	781b      	ldrb	r3, [r3, #0]
3418fbf0:	f003 0302 	and.w	r3, r3, #2
3418fbf4:	b2db      	uxtb	r3, r3
3418fbf6:	2b00      	cmp	r3, #0
3418fbf8:	d003      	beq.n	3418fc02 <SFDP_BuildGenericDriver+0x96e>
3418fbfa:	687b      	ldr	r3, [r7, #4]
3418fbfc:	220c      	movs	r2, #12
3418fbfe:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if (Object->sfdp_private.DriverInfo.SpiPhyLink == PHY_LINK_8S8D8D)
3418fc02:	687b      	ldr	r3, [r7, #4]
3418fc04:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418fc08:	2b08      	cmp	r3, #8
3418fc0a:	d120      	bne.n	3418fc4e <SFDP_BuildGenericDriver+0x9ba>
    {
      if (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand) {Object->sfdp_private.DriverInfo.PageProgramInstruction  = 0x02u;}
3418fc0c:	4b8e      	ldr	r3, [pc, #568]	@ (3418fe48 <SFDP_BuildGenericDriver+0xbb4>)
3418fc0e:	78db      	ldrb	r3, [r3, #3]
3418fc10:	f003 0301 	and.w	r3, r3, #1
3418fc14:	b2db      	uxtb	r3, r3
3418fc16:	2b00      	cmp	r3, #0
3418fc18:	d003      	beq.n	3418fc22 <SFDP_BuildGenericDriver+0x98e>
3418fc1a:	687b      	ldr	r3, [r7, #4]
3418fc1c:	2202      	movs	r2, #2
3418fc1e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)    {Object->sfdp_private.DriverInfo.ReadInstruction         = 0xCCu;}
3418fc22:	4b89      	ldr	r3, [pc, #548]	@ (3418fe48 <SFDP_BuildGenericDriver+0xbb4>)
3418fc24:	789b      	ldrb	r3, [r3, #2]
3418fc26:	f003 0320 	and.w	r3, r3, #32
3418fc2a:	b2db      	uxtb	r3, r3
3418fc2c:	2b00      	cmp	r3, #0
3418fc2e:	d003      	beq.n	3418fc38 <SFDP_BuildGenericDriver+0x9a4>
3418fc30:	687b      	ldr	r3, [r7, #4]
3418fc32:	22cc      	movs	r2, #204	@ 0xcc
3418fc34:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S8D8D_DTRReadCommand)     {Object->sfdp_private.DriverInfo.ReadInstruction         = 0xFDu;}
3418fc38:	4b83      	ldr	r3, [pc, #524]	@ (3418fe48 <SFDP_BuildGenericDriver+0xbb4>)
3418fc3a:	789b      	ldrb	r3, [r3, #2]
3418fc3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418fc40:	b2db      	uxtb	r3, r3
3418fc42:	2b00      	cmp	r3, #0
3418fc44:	d003      	beq.n	3418fc4e <SFDP_BuildGenericDriver+0x9ba>
3418fc46:	687b      	ldr	r3, [r7, #4]
3418fc48:	22fd      	movs	r2, #253	@ 0xfd
3418fc4a:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    Object->sfdp_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Address4Bytes.Param_DWORD.D2.InstructionEraseType1;
3418fc4e:	4b7e      	ldr	r3, [pc, #504]	@ (3418fe48 <SFDP_BuildGenericDriver+0xbb4>)
3418fc50:	791a      	ldrb	r2, [r3, #4]
3418fc52:	687b      	ldr	r3, [r7, #4]
3418fc54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    Object->sfdp_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Address4Bytes.Param_DWORD.D2.InstructionEraseType2;
3418fc58:	4b7b      	ldr	r3, [pc, #492]	@ (3418fe48 <SFDP_BuildGenericDriver+0xbb4>)
3418fc5a:	795a      	ldrb	r2, [r3, #5]
3418fc5c:	687b      	ldr	r3, [r7, #4]
3418fc5e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
    Object->sfdp_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Address4Bytes.Param_DWORD.D2.InstructionEraseType3;
3418fc62:	4b79      	ldr	r3, [pc, #484]	@ (3418fe48 <SFDP_BuildGenericDriver+0xbb4>)
3418fc64:	799a      	ldrb	r2, [r3, #6]
3418fc66:	687b      	ldr	r3, [r7, #4]
3418fc68:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Object->sfdp_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Address4Bytes.Param_DWORD.D2.InstructionEraseType4;
3418fc6c:	4b76      	ldr	r3, [pc, #472]	@ (3418fe48 <SFDP_BuildGenericDriver+0xbb4>)
3418fc6e:	79da      	ldrb	r2, [r3, #7]
3418fc70:	687b      	ldr	r3, [r7, #4]
3418fc72:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  }

  if(((uint32_t)SFDP_PARAMID_XSPI_V1_0 == (Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_XSPI_V1_0))
3418fc76:	687b      	ldr	r3, [r7, #4]
3418fc78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418fc7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418fc80:	2b00      	cmp	r3, #0
3418fc82:	f000 80da 	beq.w	3418fe3a <SFDP_BuildGenericDriver+0xba6>
      &&
      ((PHY_LINK_8D8D8D == Object->sfdp_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfdp_private.DriverInfo.SpiPhyLink)))
3418fc86:	687b      	ldr	r3, [r7, #4]
3418fc88:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
      &&
3418fc8c:	2b09      	cmp	r3, #9
3418fc8e:	d005      	beq.n	3418fc9c <SFDP_BuildGenericDriver+0xa08>
      ((PHY_LINK_8D8D8D == Object->sfdp_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfdp_private.DriverInfo.SpiPhyLink)))
3418fc90:	687b      	ldr	r3, [r7, #4]
3418fc92:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418fc96:	2b08      	cmp	r3, #8
3418fc98:	f040 80cf 	bne.w	3418fe3a <SFDP_BuildGenericDriver+0xba6>
  {
    uint32_t ClockOut = 0u;
3418fc9c:	2300      	movs	r3, #0
3418fc9e:	60fb      	str	r3, [r7, #12]
    uint32_t MaxFreqMhz;
    /* Read command */
    if (0u != JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand)
3418fca0:	4b6a      	ldr	r3, [pc, #424]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fca2:	785b      	ldrb	r3, [r3, #1]
3418fca4:	2b00      	cmp	r3, #0
3418fca6:	d004      	beq.n	3418fcb2 <SFDP_BuildGenericDriver+0xa1e>
    {
      Object->sfdp_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand;
3418fca8:	4b68      	ldr	r3, [pc, #416]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fcaa:	785a      	ldrb	r2, [r3, #1]
3418fcac:	687b      	ldr	r3, [r7, #4]
3418fcae:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if (JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle != 0u)
3418fcb2:	4b66      	ldr	r3, [pc, #408]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fcb4:	7d1b      	ldrb	r3, [r3, #20]
3418fcb6:	f003 031f 	and.w	r3, r3, #31
3418fcba:	b2db      	uxtb	r3, r3
3418fcbc:	2b00      	cmp	r3, #0
3418fcbe:	d00d      	beq.n	3418fcdc <SFDP_BuildGenericDriver+0xa48>
    {
      /* Set the default dummy cycle of this mode */
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle;
3418fcc0:	4b62      	ldr	r3, [pc, #392]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fcc2:	7d1b      	ldrb	r3, [r3, #20]
3418fcc4:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418fcc8:	b2db      	uxtb	r3, r3
3418fcca:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418fccc:	687b      	ldr	r3, [r7, #4]
3418fcce:	3308      	adds	r3, #8
3418fcd0:	f107 0214 	add.w	r2, r7, #20
3418fcd4:	2101      	movs	r1, #1
3418fcd6:	4618      	mov	r0, r3
3418fcd8:	f7fe fb06 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>
    }

    /* adapt the memory interface frequency according to its capabilities */
    MaxFreqMhz = sfdp_getfrequencevalue(JEDEC_Basic.Params.Param_DWORD.D20._8D8D8D_MaximunSpeedWithStrobe);
3418fcdc:	4b5c      	ldr	r3, [pc, #368]	@ (3418fe50 <SFDP_BuildGenericDriver+0xbbc>)
3418fcde:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
3418fce2:	f3c3 1303 	ubfx	r3, r3, #4, #4
3418fce6:	b2db      	uxtb	r3, r3
3418fce8:	4618      	mov	r0, r3
3418fcea:	f000 f8f9 	bl	3418fee0 <sfdp_getfrequencevalue>
3418fcee:	61f8      	str	r0, [r7, #28]
    if (MaxFreqMhz > Object->sfdp_private.DriverInfo.ClockIn)
3418fcf0:	687b      	ldr	r3, [r7, #4]
3418fcf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418fcf4:	69fa      	ldr	r2, [r7, #28]
3418fcf6:	429a      	cmp	r2, r3
3418fcf8:	d902      	bls.n	3418fd00 <SFDP_BuildGenericDriver+0xa6c>
    {
      /* Adjust the frequence with the ClockIn */
      MaxFreqMhz = Object->sfdp_private.DriverInfo.ClockIn;
3418fcfa:	687b      	ldr	r3, [r7, #4]
3418fcfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418fcfe:	61fb      	str	r3, [r7, #28]
    }

    /* Update the clock to be aligned with selected configuration */
    if(HAL_OK != SAL_XSPI_SetClock(&Object->sfdp_private.SALObject, Object->sfdp_private.DriverInfo.ClockIn, MaxFreqMhz, &ClockOut))
3418fd00:	687b      	ldr	r3, [r7, #4]
3418fd02:	f103 0008 	add.w	r0, r3, #8
3418fd06:	687b      	ldr	r3, [r7, #4]
3418fd08:	6e99      	ldr	r1, [r3, #104]	@ 0x68
3418fd0a:	f107 030c 	add.w	r3, r7, #12
3418fd0e:	69fa      	ldr	r2, [r7, #28]
3418fd10:	f7fe fa78 	bl	3418e204 <SAL_XSPI_SetClock>
3418fd14:	4603      	mov	r3, r0
3418fd16:	2b00      	cmp	r3, #0
3418fd18:	d003      	beq.n	3418fd22 <SFDP_BuildGenericDriver+0xa8e>
    {
      retr = EXTMEM_SFDP_ERROR_SETCLOCK;
3418fd1a:	230d      	movs	r3, #13
3418fd1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418fd20:	e08c      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
    }
    *FreqUpdated = 1u; /* Used to indicate that the clock configuration has been updated */
3418fd22:	683b      	ldr	r3, [r7, #0]
3418fd24:	2201      	movs	r2, #1
3418fd26:	701a      	strb	r2, [r3, #0]

    /* get the dummy cycle value according to the real output clock */
    if ((ClockOut >= CLOCK_200MHZ) && (JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle != 0u))
3418fd28:	68fb      	ldr	r3, [r7, #12]
3418fd2a:	4a4a      	ldr	r2, [pc, #296]	@ (3418fe54 <SFDP_BuildGenericDriver+0xbc0>)
3418fd2c:	4293      	cmp	r3, r2
3418fd2e:	d913      	bls.n	3418fd58 <SFDP_BuildGenericDriver+0xac4>
3418fd30:	4b46      	ldr	r3, [pc, #280]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fd32:	899b      	ldrh	r3, [r3, #12]
3418fd34:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
3418fd38:	b29b      	uxth	r3, r3
3418fd3a:	2b00      	cmp	r3, #0
3418fd3c:	d00c      	beq.n	3418fd58 <SFDP_BuildGenericDriver+0xac4>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle;
3418fd3e:	4b43      	ldr	r3, [pc, #268]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fd40:	899b      	ldrh	r3, [r3, #12]
3418fd42:	f3c3 13c4 	ubfx	r3, r3, #7, #5
3418fd46:	b2db      	uxtb	r3, r3
3418fd48:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_ConfigPattern;
3418fd4a:	4b40      	ldr	r3, [pc, #256]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fd4c:	7b1b      	ldrb	r3, [r3, #12]
3418fd4e:	f3c3 0384 	ubfx	r3, r3, #2, #5
3418fd52:	b2db      	uxtb	r3, r3
3418fd54:	623b      	str	r3, [r7, #32]
3418fd56:	e03b      	b.n	3418fdd0 <SFDP_BuildGenericDriver+0xb3c>
    }
    else if ((ClockOut >= CLOCK_166MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle != 0u))
3418fd58:	68fb      	ldr	r3, [r7, #12]
3418fd5a:	4a3f      	ldr	r2, [pc, #252]	@ (3418fe58 <SFDP_BuildGenericDriver+0xbc4>)
3418fd5c:	4293      	cmp	r3, r2
3418fd5e:	d913      	bls.n	3418fd88 <SFDP_BuildGenericDriver+0xaf4>
3418fd60:	4b3a      	ldr	r3, [pc, #232]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fd62:	7cdb      	ldrb	r3, [r3, #19]
3418fd64:	f023 0307 	bic.w	r3, r3, #7
3418fd68:	b2db      	uxtb	r3, r3
3418fd6a:	2b00      	cmp	r3, #0
3418fd6c:	d00c      	beq.n	3418fd88 <SFDP_BuildGenericDriver+0xaf4>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle;
3418fd6e:	4b37      	ldr	r3, [pc, #220]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fd70:	7cdb      	ldrb	r3, [r3, #19]
3418fd72:	f3c3 03c4 	ubfx	r3, r3, #3, #5
3418fd76:	b2db      	uxtb	r3, r3
3418fd78:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_ConfigPattern;
3418fd7a:	4b34      	ldr	r3, [pc, #208]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fd7c:	8a5b      	ldrh	r3, [r3, #18]
3418fd7e:	f3c3 1384 	ubfx	r3, r3, #6, #5
3418fd82:	b2db      	uxtb	r3, r3
3418fd84:	623b      	str	r3, [r7, #32]
3418fd86:	e023      	b.n	3418fdd0 <SFDP_BuildGenericDriver+0xb3c>
    }
    else if ((ClockOut >= CLOCK_133MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle != 0u))
3418fd88:	68fb      	ldr	r3, [r7, #12]
3418fd8a:	4a34      	ldr	r2, [pc, #208]	@ (3418fe5c <SFDP_BuildGenericDriver+0xbc8>)
3418fd8c:	4293      	cmp	r3, r2
3418fd8e:	d913      	bls.n	3418fdb8 <SFDP_BuildGenericDriver+0xb24>
3418fd90:	4b2e      	ldr	r3, [pc, #184]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fd92:	7c9b      	ldrb	r3, [r3, #18]
3418fd94:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
3418fd98:	b2db      	uxtb	r3, r3
3418fd9a:	2b00      	cmp	r3, #0
3418fd9c:	d00c      	beq.n	3418fdb8 <SFDP_BuildGenericDriver+0xb24>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle;
3418fd9e:	4b2b      	ldr	r3, [pc, #172]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fda0:	7c9b      	ldrb	r3, [r3, #18]
3418fda2:	f3c3 0344 	ubfx	r3, r3, #1, #5
3418fda6:	b2db      	uxtb	r3, r3
3418fda8:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_ConfigPattern;
3418fdaa:	4b28      	ldr	r3, [pc, #160]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fdac:	691b      	ldr	r3, [r3, #16]
3418fdae:	f3c3 3304 	ubfx	r3, r3, #12, #5
3418fdb2:	b2db      	uxtb	r3, r3
3418fdb4:	623b      	str	r3, [r7, #32]
3418fdb6:	e00b      	b.n	3418fdd0 <SFDP_BuildGenericDriver+0xb3c>
    }
    else /* if (ClockOut =< 100Mhz) */
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_DummyCycle;
3418fdb8:	4b24      	ldr	r3, [pc, #144]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fdba:	8a1b      	ldrh	r3, [r3, #16]
3418fdbc:	f3c3 13c4 	ubfx	r3, r3, #7, #5
3418fdc0:	b2db      	uxtb	r3, r3
3418fdc2:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_ConfigPattern;
3418fdc4:	4b21      	ldr	r3, [pc, #132]	@ (3418fe4c <SFDP_BuildGenericDriver+0xbb8>)
3418fdc6:	7c1b      	ldrb	r3, [r3, #16]
3418fdc8:	f3c3 0384 	ubfx	r3, r3, #2, #5
3418fdcc:	b2db      	uxtb	r3, r3
3418fdce:	623b      	str	r3, [r7, #32]
    }

    /* Specific case of GigaDevice memory with wrongly coded SFDP table in JEDEC_SCCR_Map.Param_DWORD.D9 */
    if (Object->sfdp_private.ManuID == EXTMEM_MANFACTURER_GIGADEVICE)
3418fdd0:	687b      	ldr	r3, [r7, #4]
3418fdd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
3418fdd6:	2bc8      	cmp	r3, #200	@ 0xc8
3418fdd8:	d10a      	bne.n	3418fdf0 <SFDP_BuildGenericDriver+0xb5c>
    {
      dummyCycles = 16;
3418fdda:	2310      	movs	r3, #16
3418fddc:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418fdde:	687b      	ldr	r3, [r7, #4]
3418fde0:	3308      	adds	r3, #8
3418fde2:	f107 0214 	add.w	r2, r7, #20
3418fde6:	2101      	movs	r1, #1
3418fde8:	4618      	mov	r0, r3
3418fdea:	f7fe fa7d 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>
3418fdee:	e025      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
    }
    else
    {
      /* Write the dummy cycle value in the configuration register using information coming from SCCR Map */
      if((0u != (Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
3418fdf0:	687b      	ldr	r3, [r7, #4]
3418fdf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418fdf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418fdfa:	2b00      	cmp	r3, #0
3418fdfc:	d017      	beq.n	3418fe2e <SFDP_BuildGenericDriver+0xb9a>
         && (0u != JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable))
3418fdfe:	4b18      	ldr	r3, [pc, #96]	@ (3418fe60 <SFDP_BuildGenericDriver+0xbcc>)
3418fe00:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418fe04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418fe08:	b2db      	uxtb	r3, r3
3418fe0a:	2b00      	cmp	r3, #0
3418fe0c:	d00f      	beq.n	3418fe2e <SFDP_BuildGenericDriver+0xb9a>
      {
        /* Update the frequence with MaxFreqMhz information */
        if( sfdp_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
3418fe0e:	6a39      	ldr	r1, [r7, #32]
3418fe10:	6878      	ldr	r0, [r7, #4]
3418fe12:	f000 fa6b 	bl	341902ec <sfdp_set_dummycycle>
3418fe16:	4603      	mov	r3, r0
3418fe18:	2b00      	cmp	r3, #0
3418fe1a:	d10f      	bne.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
        {
          /* Set the dummy cycle corresponding */
          (void)SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418fe1c:	687b      	ldr	r3, [r7, #4]
3418fe1e:	3308      	adds	r3, #8
3418fe20:	f107 0214 	add.w	r2, r7, #20
3418fe24:	2101      	movs	r1, #1
3418fe26:	4618      	mov	r0, r3
3418fe28:	f7fe fa5e 	bl	3418e2e8 <SAL_XSPI_MemoryConfig>
        if( sfdp_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
3418fe2c:	e006      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
        }
      }
      else
      {
        retr = EXTMEM_SFDP_ERROR_CONFIGDUMMY;
3418fe2e:	230e      	movs	r3, #14
3418fe30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418fe34:	e002      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
          goto error;
3418fe36:	bf00      	nop
3418fe38:	e000      	b.n	3418fe3c <SFDP_BuildGenericDriver+0xba8>
      }
    }
  }

error :
3418fe3a:	bf00      	nop
  return retr;
3418fe3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418fe40:	4618      	mov	r0, r3
3418fe42:	372c      	adds	r7, #44	@ 0x2c
3418fe44:	46bd      	mov	sp, r7
3418fe46:	bdf0      	pop	{r4, r5, r6, r7, pc}
3418fe48:	341c0378 	.word	0x341c0378
3418fe4c:	341c0380 	.word	0x341c0380
3418fe50:	341c0318 	.word	0x341c0318
3418fe54:	0bebc1ff 	.word	0x0bebc1ff
3418fe58:	09e4f57f 	.word	0x09e4f57f
3418fe5c:	07ed6b3f 	.word	0x07ed6b3f
3418fe60:	341c0398 	.word	0x341c0398

3418fe64 <driver_check_FlagBUSY>:


EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef driver_check_FlagBUSY(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Timeout)
{
3418fe64:	b5f0      	push	{r4, r5, r6, r7, lr}
3418fe66:	b089      	sub	sp, #36	@ 0x24
3418fe68:	af04      	add	r7, sp, #16
3418fe6a:	6078      	str	r0, [r7, #4]
3418fe6c:	6039      	str	r1, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUSY;
3418fe6e:	23fb      	movs	r3, #251	@ 0xfb
3418fe70:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR((uint8_t *)__func__)
  if (0u != SFDPObject->sfdp_private.DriverInfo.ReadWIPCommand)
3418fe72:	687b      	ldr	r3, [r7, #4]
3418fe74:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
3418fe78:	2b00      	cmp	r3, #0
3418fe7a:	d02b      	beq.n	3418fed4 <driver_check_FlagBUSY+0x70>
  {
    /* check that the WIP flag is not set */
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfdp_private.SALObject,
3418fe7c:	687b      	ldr	r3, [r7, #4]
3418fe7e:	f103 0008 	add.w	r0, r3, #8
3418fe82:	687b      	ldr	r3, [r7, #4]
3418fe84:	f893 406c 	ldrb.w	r4, [r3, #108]	@ 0x6c
                                               SFDPObject->sfdp_private.DriverInfo.ReadWIPCommand,
                                               SFDPObject->sfdp_private.DriverInfo.WIPAddress,
3418fe88:	687b      	ldr	r3, [r7, #4]
3418fe8a:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfdp_private.SALObject,
3418fe8e:	461e      	mov	r6, r3
                                               SFDPObject->sfdp_private.DriverInfo.WIPBusyPolarity << SFDPObject->sfdp_private.DriverInfo.WIPPosition,
3418fe90:	687b      	ldr	r3, [r7, #4]
3418fe92:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
3418fe96:	461a      	mov	r2, r3
3418fe98:	687b      	ldr	r3, [r7, #4]
3418fe9a:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
3418fe9e:	fa02 f303 	lsl.w	r3, r2, r3
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfdp_private.SALObject,
3418fea2:	b2dd      	uxtb	r5, r3
                                               1u << SFDPObject->sfdp_private.DriverInfo.WIPPosition,
3418fea4:	687b      	ldr	r3, [r7, #4]
3418fea6:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
3418feaa:	461a      	mov	r2, r3
3418feac:	2301      	movs	r3, #1
3418feae:	4093      	lsls	r3, r2
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfdp_private.SALObject,
3418feb0:	b2db      	uxtb	r3, r3
3418feb2:	687a      	ldr	r2, [r7, #4]
3418feb4:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
3418feb8:	6839      	ldr	r1, [r7, #0]
3418feba:	9102      	str	r1, [sp, #8]
3418febc:	9201      	str	r2, [sp, #4]
3418febe:	9300      	str	r3, [sp, #0]
3418fec0:	462b      	mov	r3, r5
3418fec2:	4632      	mov	r2, r6
3418fec4:	4621      	mov	r1, r4
3418fec6:	f7fe fdf9 	bl	3418eabc <SAL_XSPI_CheckStatusRegister>
3418feca:	4603      	mov	r3, r0
3418fecc:	2b00      	cmp	r3, #0
3418fece:	d101      	bne.n	3418fed4 <driver_check_FlagBUSY+0x70>
                                               SFDPObject->sfdp_private.ManuID, Timeout))
    {
      retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418fed0:	2300      	movs	r3, #0
3418fed2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return retr;
3418fed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418fed8:	4618      	mov	r0, r3
3418feda:	3714      	adds	r7, #20
3418fedc:	46bd      	mov	sp, r7
3418fede:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418fee0 <sfdp_getfrequencevalue>:
 * @brief This function returns the frequency value corresponding to a frequency
 * @param BitField bit field value
 * @return frequency value
 */
uint32_t sfdp_getfrequencevalue(uint32_t BitField)
{
3418fee0:	b4b0      	push	{r4, r5, r7}
3418fee2:	b08b      	sub	sp, #44	@ 0x2c
3418fee4:	af00      	add	r7, sp, #0
3418fee6:	6078      	str	r0, [r7, #4]
  const uint16_t freqMhz_table[] = { 0x0, 33, 50, 66, 80, 100, 133, 166, 200, 250, 266, 333, 400 };
3418fee8:	4b0e      	ldr	r3, [pc, #56]	@ (3418ff24 <sfdp_getfrequencevalue+0x44>)
3418feea:	f107 040c 	add.w	r4, r7, #12
3418feee:	461d      	mov	r5, r3
3418fef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3418fef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3418fef4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
3418fef8:	c403      	stmia	r4!, {r0, r1}
3418fefa:	8022      	strh	r2, [r4, #0]
  SFDP_DEBUG_STR(__func__);

  if (BitField < 0b1010u)
3418fefc:	687b      	ldr	r3, [r7, #4]
3418fefe:	2b09      	cmp	r3, #9
3418ff00:	d80a      	bhi.n	3418ff18 <sfdp_getfrequencevalue+0x38>
  {
    return (uint32_t)freqMhz_table[BitField]* 1000000u;
3418ff02:	687b      	ldr	r3, [r7, #4]
3418ff04:	005b      	lsls	r3, r3, #1
3418ff06:	3328      	adds	r3, #40	@ 0x28
3418ff08:	443b      	add	r3, r7
3418ff0a:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
3418ff0e:	461a      	mov	r2, r3
3418ff10:	4b05      	ldr	r3, [pc, #20]	@ (3418ff28 <sfdp_getfrequencevalue+0x48>)
3418ff12:	fb02 f303 	mul.w	r3, r2, r3
3418ff16:	e000      	b.n	3418ff1a <sfdp_getfrequencevalue+0x3a>
  }
  return 0; /* the max frequency is unknown */
3418ff18:	2300      	movs	r3, #0
}
3418ff1a:	4618      	mov	r0, r3
3418ff1c:	372c      	adds	r7, #44	@ 0x2c
3418ff1e:	46bd      	mov	sp, r7
3418ff20:	bcb0      	pop	{r4, r5, r7}
3418ff22:	4770      	bx	lr
3418ff24:	341912e0 	.word	0x341912e0
3418ff28:	000f4240 	.word	0x000f4240

3418ff2c <sfdp_get_paraminfo>:
 * @param sfdp_param_info pointer on parameter info
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_get_paraminfo(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t sfdp_address,
                                      SFDP_ParameterTableTypeDef *Param_info)
{
3418ff2c:	b580      	push	{r7, lr}
3418ff2e:	b088      	sub	sp, #32
3418ff30:	af00      	add	r7, sp, #0
3418ff32:	60f8      	str	r0, [r7, #12]
3418ff34:	60b9      	str	r1, [r7, #8]
3418ff36:	607a      	str	r2, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418ff38:	2300      	movs	r3, #0
3418ff3a:	77fb      	strb	r3, [r7, #31]
  SFDP_ParameterHeaderTypeDef sfdp_param_header = {0};
3418ff3c:	f107 0314 	add.w	r3, r7, #20
3418ff40:	2200      	movs	r2, #0
3418ff42:	601a      	str	r2, [r3, #0]
3418ff44:	605a      	str	r2, [r3, #4]
  SFDP_DEBUG_STR(__func__);

  /* send the SFDP command to read the header */
  if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfdp_private.SALObject, sfdp_address,
3418ff46:	68fb      	ldr	r3, [r7, #12]
3418ff48:	f103 0008 	add.w	r0, r3, #8
3418ff4c:	f107 0214 	add.w	r2, r7, #20
3418ff50:	2308      	movs	r3, #8
3418ff52:	68b9      	ldr	r1, [r7, #8]
3418ff54:	f7fe fb1a 	bl	3418e58c <SAL_XSPI_GetSFDP>
3418ff58:	4603      	mov	r3, r0
3418ff5a:	2b00      	cmp	r3, #0
3418ff5c:	d002      	beq.n	3418ff64 <sfdp_get_paraminfo+0x38>
                                (uint8_t*)&sfdp_param_header, SFDP_PARAM_HEADER_SIZE))
  {
    retr = EXTMEM_SFDP_ERROR_SFDPREAD;
3418ff5e:	2303      	movs	r3, #3
3418ff60:	77fb      	strb	r3, [r7, #31]
    goto error;
3418ff62:	e0d9      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
  }

  Param_info->type = SFDP_PARAMID_UNKNOWN;
3418ff64:	687b      	ldr	r3, [r7, #4]
3418ff66:	2200      	movs	r2, #0
3418ff68:	601a      	str	r2, [r3, #0]
  Param_info->size = sfdp_param_header.Length ;
3418ff6a:	7dfa      	ldrb	r2, [r7, #23]
3418ff6c:	687b      	ldr	r3, [r7, #4]
3418ff6e:	721a      	strb	r2, [r3, #8]
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
3418ff70:	7ebb      	ldrb	r3, [r7, #26]
3418ff72:	041a      	lsls	r2, r3, #16
                        |((uint32_t)sfdp_param_header.TableAddressPointer[1u] << 8u)
3418ff74:	7e7b      	ldrb	r3, [r7, #25]
3418ff76:	021b      	lsls	r3, r3, #8
3418ff78:	4313      	orrs	r3, r2
                        |((uint32_t)sfdp_param_header.TableAddressPointer[0u]));
3418ff7a:	7e3a      	ldrb	r2, [r7, #24]
3418ff7c:	431a      	orrs	r2, r3
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
3418ff7e:	687b      	ldr	r3, [r7, #4]
3418ff80:	605a      	str	r2, [r3, #4]

  if ((sfdp_param_header.ID_msb > 0x00u) && (sfdp_param_header.ID_msb < 0x80u))
3418ff82:	7efb      	ldrb	r3, [r7, #27]
3418ff84:	2b00      	cmp	r3, #0
3418ff86:	d010      	beq.n	3418ffaa <sfdp_get_paraminfo+0x7e>
3418ff88:	7efb      	ldrb	r3, [r7, #27]
3418ff8a:	b25b      	sxtb	r3, r3
3418ff8c:	2b00      	cmp	r3, #0
3418ff8e:	db0c      	blt.n	3418ffaa <sfdp_get_paraminfo+0x7e>
  {
    if ((sfdp_param_header.ID_lsb & 0x01u) == 0x01u)
3418ff90:	7d3b      	ldrb	r3, [r7, #20]
3418ff92:	f003 0301 	and.w	r3, r3, #1
3418ff96:	2b00      	cmp	r3, #0
3418ff98:	d003      	beq.n	3418ffa2 <sfdp_get_paraminfo+0x76>
    {
      Param_info->type = SFDP_PARAMID_VENDOR;
3418ff9a:	687b      	ldr	r3, [r7, #4]
3418ff9c:	2201      	movs	r2, #1
3418ff9e:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_lsb & 0x01u) == 0x01u)
3418ffa0:	e0ba      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
      SFDP_DEBUG_STR("-> type SFDP_PARAMID_VENDOR");
    }
    else
    {
      Param_info->type = SFDP_PARAMID_FUNCTION_VENDOR;
3418ffa2:	687b      	ldr	r3, [r7, #4]
3418ffa4:	2202      	movs	r2, #2
3418ffa6:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_lsb & 0x01u) == 0x01u)
3418ffa8:	e0b6      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
      SFDP_DEBUG_STR("-> type SFDP_PARAMID_FUNCTION_VENDOR");
    }
  }
  else if (sfdp_param_header.ID_msb >= 0x80u)
3418ffaa:	7efb      	ldrb	r3, [r7, #27]
3418ffac:	b25b      	sxtb	r3, r3
3418ffae:	2b00      	cmp	r3, #0
3418ffb0:	f280 80ae 	bge.w	34190110 <sfdp_get_paraminfo+0x1e4>
  {
    if((sfdp_param_header.ID_lsb & 0x01u) == 0x00u)
3418ffb4:	7d3b      	ldrb	r3, [r7, #20]
3418ffb6:	f003 0301 	and.w	r3, r3, #1
3418ffba:	2b00      	cmp	r3, #0
3418ffbc:	d102      	bne.n	3418ffc4 <sfdp_get_paraminfo+0x98>
    {
      Param_info->type = SFDP_PARAMID_FUNCTION_JEDEC;
3418ffbe:	687b      	ldr	r3, [r7, #4]
3418ffc0:	2204      	movs	r2, #4
3418ffc2:	601a      	str	r2, [r3, #0]
      SFDP_DEBUG_STR("-> type SFDP_PARAMID_FUNCTION_JEDEC");
    }

    if (sfdp_param_header.ID_msb == SFDP_BASIC_PARAMETER_TABLE_MSB)
3418ffc4:	7efb      	ldrb	r3, [r7, #27]
3418ffc6:	2bff      	cmp	r3, #255	@ 0xff
3418ffc8:	f040 80a6 	bne.w	34190118 <sfdp_get_paraminfo+0x1ec>
    {
      switch(sfdp_param_header.ID_lsb)
3418ffcc:	7d3b      	ldrb	r3, [r7, #20]
3418ffce:	2b0f      	cmp	r3, #15
3418ffd0:	dc4c      	bgt.n	3419006c <sfdp_get_paraminfo+0x140>
3418ffd2:	2b00      	cmp	r3, #0
3418ffd4:	da24      	bge.n	34190020 <sfdp_get_paraminfo+0xf4>
        Param_info->type = SFDP_PARAMID_RESERVED;
        SFDP_DEBUG_STR("-> info SFDP_PARAMID_RESERVED");
        break;
      default :
        SFDP_DEBUG_STR("-> info SFDP_PARAMID_????");
        break;
3418ffd6:	e09e      	b.n	34190116 <sfdp_get_paraminfo+0x1ea>
      switch(sfdp_param_header.ID_lsb)
3418ffd8:	3b81      	subs	r3, #129	@ 0x81
3418ffda:	2b0d      	cmp	r3, #13
3418ffdc:	f200 809b 	bhi.w	34190116 <sfdp_get_paraminfo+0x1ea>
3418ffe0:	a201      	add	r2, pc, #4	@ (adr r2, 3418ffe8 <sfdp_get_paraminfo+0xbc>)
3418ffe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418ffe6:	bf00      	nop
3418ffe8:	3419008d 	.word	0x3419008d
3418ffec:	34190117 	.word	0x34190117
3418fff0:	34190117 	.word	0x34190117
3418fff4:	3419009d 	.word	0x3419009d
3418fff8:	34190117 	.word	0x34190117
3418fffc:	34190117 	.word	0x34190117
34190000:	341900b7 	.word	0x341900b7
34190004:	341900c1 	.word	0x341900c1
34190008:	34190117 	.word	0x34190117
3419000c:	34190117 	.word	0x34190117
34190010:	341900df 	.word	0x341900df
34190014:	34190117 	.word	0x34190117
34190018:	341900f3 	.word	0x341900f3
3419001c:	341900fd 	.word	0x341900fd
34190020:	2b0f      	cmp	r3, #15
34190022:	d878      	bhi.n	34190116 <sfdp_get_paraminfo+0x1ea>
34190024:	a201      	add	r2, pc, #4	@ (adr r2, 3419002c <sfdp_get_paraminfo+0x100>)
34190026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3419002a:	bf00      	nop
3419002c:	34190077 	.word	0x34190077
34190030:	34190117 	.word	0x34190117
34190034:	34190117 	.word	0x34190117
34190038:	34190095 	.word	0x34190095
3419003c:	34190117 	.word	0x34190117
34190040:	341900a5 	.word	0x341900a5
34190044:	341900ad 	.word	0x341900ad
34190048:	34190117 	.word	0x34190117
3419004c:	34190117 	.word	0x34190117
34190050:	341900cb 	.word	0x341900cb
34190054:	341900d5 	.word	0x341900d5
34190058:	34190117 	.word	0x34190117
3419005c:	341900e9 	.word	0x341900e9
34190060:	34190117 	.word	0x34190117
34190064:	34190117 	.word	0x34190117
34190068:	34190107 	.word	0x34190107
3419006c:	2b8e      	cmp	r3, #142	@ 0x8e
3419006e:	dc52      	bgt.n	34190116 <sfdp_get_paraminfo+0x1ea>
34190070:	2b81      	cmp	r3, #129	@ 0x81
34190072:	dab1      	bge.n	3418ffd8 <sfdp_get_paraminfo+0xac>
        break;
34190074:	e04f      	b.n	34190116 <sfdp_get_paraminfo+0x1ea>
        Param_info->type = SFDP_PARAMID_BASIC_SPIPROTOCOL;
34190076:	687b      	ldr	r3, [r7, #4]
34190078:	2208      	movs	r2, #8
3419007a:	601a      	str	r2, [r3, #0]
        Param_info->size = ((sfdp_param_header.Length ) < SFDP_PARAMS_BASIC_TABLE_DEFAULTSIZE)
3419007c:	7dfb      	ldrb	r3, [r7, #23]
                             ? sfdp_param_header.Length : SFDP_PARAMS_BASIC_TABLE_DEFAULTSIZE;
3419007e:	2b17      	cmp	r3, #23
34190080:	bf28      	it	cs
34190082:	2317      	movcs	r3, #23
34190084:	b2da      	uxtb	r2, r3
        Param_info->size = ((sfdp_param_header.Length ) < SFDP_PARAMS_BASIC_TABLE_DEFAULTSIZE)
34190086:	687b      	ldr	r3, [r7, #4]
34190088:	721a      	strb	r2, [r3, #8]
        break;
3419008a:	e045      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_SECTORMAP;
3419008c:	687b      	ldr	r3, [r7, #4]
3419008e:	2210      	movs	r2, #16
34190090:	601a      	str	r2, [r3, #0]
        break;
34190092:	e041      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_RPMC;
34190094:	687b      	ldr	r3, [r7, #4]
34190096:	2220      	movs	r2, #32
34190098:	601a      	str	r2, [r3, #0]
        break;
3419009a:	e03d      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_4BYTE_ADDRESS_INSTRUCTION;
3419009c:	687b      	ldr	r3, [r7, #4]
3419009e:	2240      	movs	r2, #64	@ 0x40
341900a0:	601a      	str	r2, [r3, #0]
        break;
341900a2:	e039      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_XSPI_V1_0;
341900a4:	687b      	ldr	r3, [r7, #4]
341900a6:	2280      	movs	r2, #128	@ 0x80
341900a8:	601a      	str	r2, [r3, #0]
        break;
341900aa:	e035      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_XSPI_V2_0;
341900ac:	687b      	ldr	r3, [r7, #4]
341900ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
341900b2:	601a      	str	r2, [r3, #0]
        break;
341900b4:	e030      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP;
341900b6:	687b      	ldr	r3, [r7, #4]
341900b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
341900bc:	601a      	str	r2, [r3, #0]
        break;
341900be:	e02b      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP_MULTICHIP;
341900c0:	687b      	ldr	r3, [r7, #4]
341900c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
341900c6:	601a      	str	r2, [r3, #0]
        break;
341900c8:	e026      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_STATUS_CONTROL_CONFIG_XSPI_V2_0;
341900ca:	687b      	ldr	r3, [r7, #4]
341900cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
341900d0:	601a      	str	r2, [r3, #0]
        break;
341900d2:	e021      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_OCTAL_DDR;
341900d4:	687b      	ldr	r3, [r7, #4]
341900d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
341900da:	601a      	str	r2, [r3, #0]
        break;
341900dc:	e01c      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_MSPT;
341900de:	687b      	ldr	r3, [r7, #4]
341900e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
341900e4:	601a      	str	r2, [r3, #0]
        break;
341900e6:	e017      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_X4QUAD_DS;
341900e8:	687b      	ldr	r3, [r7, #4]
341900ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
341900ee:	601a      	str	r2, [r3, #0]
        break;
341900f0:	e012      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_QUAD_DDR;
341900f2:	687b      	ldr	r3, [r7, #4]
341900f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
341900f8:	601a      	str	r2, [r3, #0]
        break;
341900fa:	e00d      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_SECURE_PACKET_READ_WRITE;
341900fc:	687b      	ldr	r3, [r7, #4]
341900fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34190102:	601a      	str	r2, [r3, #0]
        break;
34190104:	e008      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_RESERVED;
34190106:	687b      	ldr	r3, [r7, #4]
34190108:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3419010c:	601a      	str	r2, [r3, #0]
        break;
3419010e:	e003      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
  }
  else
  {
    /* Unexpected value for MSB field of SFDP Parameter ID */
    SFDP_DEBUG_STR("-> Unexpected value for MSB field of SFDP Parameter ID");
    retr = EXTMEM_SFDP_ERROR_SFDPREAD;
34190110:	2303      	movs	r3, #3
34190112:	77fb      	strb	r3, [r7, #31]
    goto error;
34190114:	e000      	b.n	34190118 <sfdp_get_paraminfo+0x1ec>
        break;
34190116:	bf00      	nop
  }

error:
  return retr;
34190118:	7ffb      	ldrb	r3, [r7, #31]
}
3419011a:	4618      	mov	r0, r3
3419011c:	3720      	adds	r7, #32
3419011e:	46bd      	mov	sp, r7
34190120:	bd80      	pop	{r7, pc}
34190122:	bf00      	nop

34190124 <sfdp_enter_octal_mode>:
 * @brief This function executes the octal DDR table to enter octal DDR mode
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_enter_octal_mode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
34190124:	b590      	push	{r4, r7, lr}
34190126:	b085      	sub	sp, #20
34190128:	af00      	add	r7, sp, #0
3419012a:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3419012c:	2300      	movs	r3, #0
3419012e:	73fb      	strb	r3, [r7, #15]
  uint8_t data[7];
  SFDP_DEBUG_STR(__func__);
  /* D1-D2 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D1.LengthCommand)
34190130:	4b6d      	ldr	r3, [pc, #436]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190132:	78db      	ldrb	r3, [r3, #3]
34190134:	2b00      	cmp	r3, #0
34190136:	d028      	beq.n	3419018a <sfdp_enter_octal_mode+0x66>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte1CommandSequence;
34190138:	4b6b      	ldr	r3, [pc, #428]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
3419013a:	789b      	ldrb	r3, [r3, #2]
3419013c:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte2CommandSequence;
3419013e:	4b6a      	ldr	r3, [pc, #424]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190140:	785b      	ldrb	r3, [r3, #1]
34190142:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte3CommandSequence;
34190144:	4b68      	ldr	r3, [pc, #416]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190146:	781b      	ldrb	r3, [r3, #0]
34190148:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte4CommandSequence;
3419014a:	4b67      	ldr	r3, [pc, #412]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
3419014c:	79db      	ldrb	r3, [r3, #7]
3419014e:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte5CommandSequence;
34190150:	4b65      	ldr	r3, [pc, #404]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190152:	799b      	ldrb	r3, [r3, #6]
34190154:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte6CommandSequence;
34190156:	4b64      	ldr	r3, [pc, #400]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190158:	795b      	ldrb	r3, [r3, #5]
3419015a:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte7CommandSequence;
3419015c:	4b62      	ldr	r3, [pc, #392]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
3419015e:	791b      	ldrb	r3, [r3, #4]
34190160:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
34190162:	687b      	ldr	r3, [r7, #4]
34190164:	f103 0008 	add.w	r0, r3, #8
34190168:	7a39      	ldrb	r1, [r7, #8]
                                           (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D1.LengthCommand - 1u)))
3419016a:	4b5f      	ldr	r3, [pc, #380]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
3419016c:	78db      	ldrb	r3, [r3, #3]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
3419016e:	3b01      	subs	r3, #1
34190170:	b29c      	uxth	r4, r3
34190172:	f107 0308 	add.w	r3, r7, #8
34190176:	1c5a      	adds	r2, r3, #1
34190178:	4623      	mov	r3, r4
3419017a:	f7fe fb92 	bl	3418e8a2 <SAL_XSPI_CommandSendData>
3419017e:	4603      	mov	r3, r0
34190180:	2b00      	cmp	r3, #0
34190182:	d002      	beq.n	3419018a <sfdp_enter_octal_mode+0x66>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
34190184:	230b      	movs	r3, #11
34190186:	73fb      	strb	r3, [r7, #15]
      goto error;
34190188:	e0a9      	b.n	341902de <sfdp_enter_octal_mode+0x1ba>
    }
  }

  /* D3-D4 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D3.LengthCommand)
3419018a:	4b57      	ldr	r3, [pc, #348]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
3419018c:	7adb      	ldrb	r3, [r3, #11]
3419018e:	2b00      	cmp	r3, #0
34190190:	d032      	beq.n	341901f8 <sfdp_enter_octal_mode+0xd4>
  {
    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
34190192:	2164      	movs	r1, #100	@ 0x64
34190194:	6878      	ldr	r0, [r7, #4]
34190196:	f7ff fe65 	bl	3418fe64 <driver_check_FlagBUSY>
3419019a:	4603      	mov	r3, r0
3419019c:	2b00      	cmp	r3, #0
3419019e:	d002      	beq.n	341901a6 <sfdp_enter_octal_mode+0x82>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
341901a0:	230c      	movs	r3, #12
341901a2:	73fb      	strb	r3, [r7, #15]
      goto error;
341901a4:	e09b      	b.n	341902de <sfdp_enter_octal_mode+0x1ba>
    }

    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte1CommandSequence;
341901a6:	4b50      	ldr	r3, [pc, #320]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
341901a8:	7a9b      	ldrb	r3, [r3, #10]
341901aa:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte2CommandSequence;
341901ac:	4b4e      	ldr	r3, [pc, #312]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
341901ae:	7a5b      	ldrb	r3, [r3, #9]
341901b0:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte3CommandSequence;
341901b2:	4b4d      	ldr	r3, [pc, #308]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
341901b4:	7a1b      	ldrb	r3, [r3, #8]
341901b6:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte4CommandSequence;
341901b8:	4b4b      	ldr	r3, [pc, #300]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
341901ba:	7bdb      	ldrb	r3, [r3, #15]
341901bc:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte5CommandSequence;
341901be:	4b4a      	ldr	r3, [pc, #296]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
341901c0:	7b9b      	ldrb	r3, [r3, #14]
341901c2:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte6CommandSequence;
341901c4:	4b48      	ldr	r3, [pc, #288]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
341901c6:	7b5b      	ldrb	r3, [r3, #13]
341901c8:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte7CommandSequence;
341901ca:	4b47      	ldr	r3, [pc, #284]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
341901cc:	7b1b      	ldrb	r3, [r3, #12]
341901ce:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
341901d0:	687b      	ldr	r3, [r7, #4]
341901d2:	f103 0008 	add.w	r0, r3, #8
341901d6:	7a39      	ldrb	r1, [r7, #8]
                                           (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D3.LengthCommand - 1u)))
341901d8:	4b43      	ldr	r3, [pc, #268]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
341901da:	7adb      	ldrb	r3, [r3, #11]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
341901dc:	3b01      	subs	r3, #1
341901de:	b29c      	uxth	r4, r3
341901e0:	f107 0308 	add.w	r3, r7, #8
341901e4:	1c5a      	adds	r2, r3, #1
341901e6:	4623      	mov	r3, r4
341901e8:	f7fe fb5b 	bl	3418e8a2 <SAL_XSPI_CommandSendData>
341901ec:	4603      	mov	r3, r0
341901ee:	2b00      	cmp	r3, #0
341901f0:	d002      	beq.n	341901f8 <sfdp_enter_octal_mode+0xd4>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
341901f2:	230b      	movs	r3, #11
341901f4:	73fb      	strb	r3, [r7, #15]
      goto error;
341901f6:	e072      	b.n	341902de <sfdp_enter_octal_mode+0x1ba>
    }
  }

  /* D5-D6 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D5.LengthCommand)
341901f8:	4b3b      	ldr	r3, [pc, #236]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
341901fa:	7cdb      	ldrb	r3, [r3, #19]
341901fc:	2b00      	cmp	r3, #0
341901fe:	d032      	beq.n	34190266 <sfdp_enter_octal_mode+0x142>
  {
    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
34190200:	2164      	movs	r1, #100	@ 0x64
34190202:	6878      	ldr	r0, [r7, #4]
34190204:	f7ff fe2e 	bl	3418fe64 <driver_check_FlagBUSY>
34190208:	4603      	mov	r3, r0
3419020a:	2b00      	cmp	r3, #0
3419020c:	d002      	beq.n	34190214 <sfdp_enter_octal_mode+0xf0>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3419020e:	230c      	movs	r3, #12
34190210:	73fb      	strb	r3, [r7, #15]
      goto error;
34190212:	e064      	b.n	341902de <sfdp_enter_octal_mode+0x1ba>
    }

    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte1CommandSequence;
34190214:	4b34      	ldr	r3, [pc, #208]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190216:	7c9b      	ldrb	r3, [r3, #18]
34190218:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte2CommandSequence;
3419021a:	4b33      	ldr	r3, [pc, #204]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
3419021c:	7c5b      	ldrb	r3, [r3, #17]
3419021e:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte3CommandSequence;
34190220:	4b31      	ldr	r3, [pc, #196]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190222:	7c1b      	ldrb	r3, [r3, #16]
34190224:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte4CommandSequence;
34190226:	4b30      	ldr	r3, [pc, #192]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190228:	7ddb      	ldrb	r3, [r3, #23]
3419022a:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte5CommandSequence;
3419022c:	4b2e      	ldr	r3, [pc, #184]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
3419022e:	7d9b      	ldrb	r3, [r3, #22]
34190230:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte6CommandSequence;
34190232:	4b2d      	ldr	r3, [pc, #180]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190234:	7d5b      	ldrb	r3, [r3, #21]
34190236:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte7CommandSequence;
34190238:	4b2b      	ldr	r3, [pc, #172]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
3419023a:	7d1b      	ldrb	r3, [r3, #20]
3419023c:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
3419023e:	687b      	ldr	r3, [r7, #4]
34190240:	f103 0008 	add.w	r0, r3, #8
34190244:	7a39      	ldrb	r1, [r7, #8]
                                           (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D5.LengthCommand - 1u)))
34190246:	4b28      	ldr	r3, [pc, #160]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190248:	7cdb      	ldrb	r3, [r3, #19]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
3419024a:	3b01      	subs	r3, #1
3419024c:	b29c      	uxth	r4, r3
3419024e:	f107 0308 	add.w	r3, r7, #8
34190252:	1c5a      	adds	r2, r3, #1
34190254:	4623      	mov	r3, r4
34190256:	f7fe fb24 	bl	3418e8a2 <SAL_XSPI_CommandSendData>
3419025a:	4603      	mov	r3, r0
3419025c:	2b00      	cmp	r3, #0
3419025e:	d002      	beq.n	34190266 <sfdp_enter_octal_mode+0x142>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
34190260:	230b      	movs	r3, #11
34190262:	73fb      	strb	r3, [r7, #15]
      goto error;
34190264:	e03b      	b.n	341902de <sfdp_enter_octal_mode+0x1ba>
    }
  }

  /* D7-D8 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D7.LengthCommand)
34190266:	4b20      	ldr	r3, [pc, #128]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190268:	7edb      	ldrb	r3, [r3, #27]
3419026a:	2b00      	cmp	r3, #0
3419026c:	d032      	beq.n	341902d4 <sfdp_enter_octal_mode+0x1b0>
  {
    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3419026e:	2164      	movs	r1, #100	@ 0x64
34190270:	6878      	ldr	r0, [r7, #4]
34190272:	f7ff fdf7 	bl	3418fe64 <driver_check_FlagBUSY>
34190276:	4603      	mov	r3, r0
34190278:	2b00      	cmp	r3, #0
3419027a:	d002      	beq.n	34190282 <sfdp_enter_octal_mode+0x15e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3419027c:	230c      	movs	r3, #12
3419027e:	73fb      	strb	r3, [r7, #15]
      goto error;
34190280:	e02d      	b.n	341902de <sfdp_enter_octal_mode+0x1ba>
    }

    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte1CommandSequence;
34190282:	4b19      	ldr	r3, [pc, #100]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190284:	7e9b      	ldrb	r3, [r3, #26]
34190286:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte2CommandSequence;
34190288:	4b17      	ldr	r3, [pc, #92]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
3419028a:	7e5b      	ldrb	r3, [r3, #25]
3419028c:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte3CommandSequence;
3419028e:	4b16      	ldr	r3, [pc, #88]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190290:	7e1b      	ldrb	r3, [r3, #24]
34190292:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte4CommandSequence;
34190294:	4b14      	ldr	r3, [pc, #80]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
34190296:	7fdb      	ldrb	r3, [r3, #31]
34190298:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte5CommandSequence;
3419029a:	4b13      	ldr	r3, [pc, #76]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
3419029c:	7f9b      	ldrb	r3, [r3, #30]
3419029e:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte6CommandSequence;
341902a0:	4b11      	ldr	r3, [pc, #68]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
341902a2:	7f5b      	ldrb	r3, [r3, #29]
341902a4:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte7CommandSequence;
341902a6:	4b10      	ldr	r3, [pc, #64]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
341902a8:	7f1b      	ldrb	r3, [r3, #28]
341902aa:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
341902ac:	687b      	ldr	r3, [r7, #4]
341902ae:	f103 0008 	add.w	r0, r3, #8
341902b2:	7a39      	ldrb	r1, [r7, #8]
                                           (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D7.LengthCommand - 1u)))
341902b4:	4b0c      	ldr	r3, [pc, #48]	@ (341902e8 <sfdp_enter_octal_mode+0x1c4>)
341902b6:	7edb      	ldrb	r3, [r3, #27]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
341902b8:	3b01      	subs	r3, #1
341902ba:	b29c      	uxth	r4, r3
341902bc:	f107 0308 	add.w	r3, r7, #8
341902c0:	1c5a      	adds	r2, r3, #1
341902c2:	4623      	mov	r3, r4
341902c4:	f7fe faed 	bl	3418e8a2 <SAL_XSPI_CommandSendData>
341902c8:	4603      	mov	r3, r0
341902ca:	2b00      	cmp	r3, #0
341902cc:	d002      	beq.n	341902d4 <sfdp_enter_octal_mode+0x1b0>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
341902ce:	230b      	movs	r3, #11
341902d0:	73fb      	strb	r3, [r7, #15]
      goto error;
341902d2:	e004      	b.n	341902de <sfdp_enter_octal_mode+0x1ba>

    /* no more wait for busy flag clear here, as command format might have changed to Octal */
  }

  /* Abort any ongoing transfer to avoid performance issue */
  SAL_XSPI_Abort(&Object->sfdp_private.SALObject);
341902d4:	687b      	ldr	r3, [r7, #4]
341902d6:	3308      	adds	r3, #8
341902d8:	4618      	mov	r0, r3
341902da:	f7fe fd2a 	bl	3418ed32 <SAL_XSPI_Abort>

error:
  return retr;
341902de:	7bfb      	ldrb	r3, [r7, #15]
}
341902e0:	4618      	mov	r0, r3
341902e2:	3714      	adds	r7, #20
341902e4:	46bd      	mov	sp, r7
341902e6:	bd90      	pop	{r4, r7, pc}
341902e8:	341c0408 	.word	0x341c0408

341902ec <sfdp_set_dummycycle>:
 * @brief This function writes the config register to set dummy cycle
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_set_dummycycle(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t DummyValue)
{
341902ec:	b5f0      	push	{r4, r5, r6, r7, lr}
341902ee:	b08b      	sub	sp, #44	@ 0x2c
341902f0:	af04      	add	r7, sp, #16
341902f2:	6078      	str	r0, [r7, #4]
341902f4:	6039      	str	r1, [r7, #0]
const uint8_t MaskWaitStateValue[4] = { 0x3u, 0x7u, 0xFu, 0x1Fu };
341902f6:	4b76      	ldr	r3, [pc, #472]	@ (341904d0 <sfdp_set_dummycycle+0x1e4>)
341902f8:	60fb      	str	r3, [r7, #12]
SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
341902fa:	2300      	movs	r3, #0
341902fc:	75fb      	strb	r3, [r7, #23]
uint8_t localValue[2] = { 0 };
341902fe:	2300      	movs	r3, #0
34190300:	813b      	strh	r3, [r7, #8]
uint32_t Address;

  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
34190302:	4b74      	ldr	r3, [pc, #464]	@ (341904d4 <sfdp_set_dummycycle+0x1e8>)
34190304:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34190308:	f003 0310 	and.w	r3, r3, #16
3419030c:	b2db      	uxtb	r3, r3
3419030e:	2b00      	cmp	r3, #0
34190310:	d10a      	bne.n	34190328 <sfdp_set_dummycycle+0x3c>
    (JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable == 1u))
34190312:	4b70      	ldr	r3, [pc, #448]	@ (341904d4 <sfdp_set_dummycycle+0x1e8>)
34190314:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34190318:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3419031c:	b2db      	uxtb	r3, r3
  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
3419031e:	2b00      	cmp	r3, #0
34190320:	d002      	beq.n	34190328 <sfdp_set_dummycycle+0x3c>
  {
    /* Not yet supported */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34190322:	230c      	movs	r3, #12
34190324:	75fb      	strb	r3, [r7, #23]
    goto error;
34190326:	e0ce      	b.n	341904c6 <sfdp_set_dummycycle+0x1da>
  }

  /* Compute the Address */
  if (JEDEC_SCCR_Map.Param_DWORD.D9.LocalAddress == 1u)
34190328:	4b6a      	ldr	r3, [pc, #424]	@ (341904d4 <sfdp_set_dummycycle+0x1e8>)
3419032a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3419032e:	f003 0308 	and.w	r3, r3, #8
34190332:	b2db      	uxtb	r3, r3
34190334:	2b00      	cmp	r3, #0
34190336:	d005      	beq.n	34190344 <sfdp_set_dummycycle+0x58>
  {
    /* Local Address is found in Byte 1 of 32-bit address */
    Address = JEDEC_SCCR_Map.Param_DWORD.D9.AddressRegisterOrModesSupported << 8;
34190338:	4b66      	ldr	r3, [pc, #408]	@ (341904d4 <sfdp_set_dummycycle+0x1e8>)
3419033a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
3419033e:	021b      	lsls	r3, r3, #8
34190340:	613b      	str	r3, [r7, #16]
34190342:	e00b      	b.n	3419035c <sfdp_set_dummycycle+0x70>
  }
  else
  {
    /* Specific case of GigaDevice GD25LX512ME where register address is wrongly coded in SFDP table */
    if (Object->sfdp_private.ManuID == 0xC8)
34190344:	687b      	ldr	r3, [r7, #4]
34190346:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
3419034a:	2bc8      	cmp	r3, #200	@ 0xc8
3419034c:	d102      	bne.n	34190354 <sfdp_set_dummycycle+0x68>
    {
      /* Address value in datasheet : 1, address value coded in SFDP table 200 */
      Address = 1U;
3419034e:	2301      	movs	r3, #1
34190350:	613b      	str	r3, [r7, #16]
34190352:	e003      	b.n	3419035c <sfdp_set_dummycycle+0x70>
    }
    else
    {
      /* Local address for Variable Dummy Cycle Settings bits is found in last byte of the address */
      Address = JEDEC_SCCR_Map.Param_DWORD.D9.AddressRegisterOrModesSupported;
34190354:	4b5f      	ldr	r3, [pc, #380]	@ (341904d4 <sfdp_set_dummycycle+0x1e8>)
34190356:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
3419035a:	613b      	str	r3, [r7, #16]
    }
  }

  /* Read the configuration */
  if (HAL_OK != SAL_XSPI_CommandSendReadAddress(&Object->sfdp_private.SALObject,
3419035c:	687b      	ldr	r3, [r7, #4]
3419035e:	f103 0008 	add.w	r0, r3, #8
34190362:	4b5c      	ldr	r3, [pc, #368]	@ (341904d4 <sfdp_set_dummycycle+0x1e8>)
34190364:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
34190368:	687b      	ldr	r3, [r7, #4]
3419036a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
3419036e:	f107 0208 	add.w	r2, r7, #8
34190372:	9301      	str	r3, [sp, #4]
34190374:	2302      	movs	r3, #2
34190376:	9300      	str	r3, [sp, #0]
34190378:	4613      	mov	r3, r2
3419037a:	693a      	ldr	r2, [r7, #16]
3419037c:	f7fe fb39 	bl	3418e9f2 <SAL_XSPI_CommandSendReadAddress>
34190380:	4603      	mov	r3, r0
34190382:	2b00      	cmp	r3, #0
34190384:	d002      	beq.n	3419038c <sfdp_set_dummycycle+0xa0>
                                                Address,
                                                (uint8_t *)localValue,
                                                2u,
                                                Object->sfdp_private.ManuID))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34190386:	230c      	movs	r3, #12
34190388:	75fb      	strb	r3, [r7, #23]
    goto error;
3419038a:	e09c      	b.n	341904c6 <sfdp_set_dummycycle+0x1da>
  }

  /* send command to write enable */
  if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject,
3419038c:	687b      	ldr	r3, [r7, #4]
3419038e:	f103 0008 	add.w	r0, r3, #8
34190392:	687b      	ldr	r3, [r7, #4]
34190394:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
34190398:	2300      	movs	r3, #0
3419039a:	2200      	movs	r2, #0
3419039c:	f7fe fa81 	bl	3418e8a2 <SAL_XSPI_CommandSendData>
341903a0:	4603      	mov	r3, r0
341903a2:	2b00      	cmp	r3, #0
341903a4:	d002      	beq.n	341903ac <sfdp_set_dummycycle+0xc0>
                                         Object->sfdp_private.DriverInfo.WriteWELCommand, NULL, 0u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
341903a6:	230c      	movs	r3, #12
341903a8:	75fb      	strb	r3, [r7, #23]
    goto error;
341903aa:	e08c      	b.n	341904c6 <sfdp_set_dummycycle+0x1da>
  }

  /* control the write enable */
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
341903ac:	687b      	ldr	r3, [r7, #4]
341903ae:	f103 0008 	add.w	r0, r3, #8
341903b2:	687b      	ldr	r3, [r7, #4]
341903b4:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                             Object->sfdp_private.DriverInfo.ReadWELCommand,
                                             Object->sfdp_private.DriverInfo.WELAddress,
341903b8:	687b      	ldr	r3, [r7, #4]
341903ba:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
341903be:	461e      	mov	r6, r3
                                             ((Object->sfdp_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfdp_private.DriverInfo.WELPosition,
341903c0:	687b      	ldr	r3, [r7, #4]
341903c2:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
341903c6:	2b00      	cmp	r3, #0
341903c8:	d101      	bne.n	341903ce <sfdp_set_dummycycle+0xe2>
341903ca:	2301      	movs	r3, #1
341903cc:	e000      	b.n	341903d0 <sfdp_set_dummycycle+0xe4>
341903ce:	2300      	movs	r3, #0
341903d0:	687a      	ldr	r2, [r7, #4]
341903d2:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
341903d6:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
341903d8:	b2dc      	uxtb	r4, r3
                                             1u << Object->sfdp_private.DriverInfo.WELPosition,
341903da:	687b      	ldr	r3, [r7, #4]
341903dc:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
341903e0:	461a      	mov	r2, r3
341903e2:	2301      	movs	r3, #1
341903e4:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
341903e6:	b2db      	uxtb	r3, r3
341903e8:	687a      	ldr	r2, [r7, #4]
341903ea:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
341903ee:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
341903f2:	9502      	str	r5, [sp, #8]
341903f4:	9201      	str	r2, [sp, #4]
341903f6:	9300      	str	r3, [sp, #0]
341903f8:	4623      	mov	r3, r4
341903fa:	4632      	mov	r2, r6
341903fc:	f7fe fb5e 	bl	3418eabc <SAL_XSPI_CheckStatusRegister>
34190400:	4603      	mov	r3, r0
34190402:	2b00      	cmp	r3, #0
34190404:	d002      	beq.n	3419040c <sfdp_set_dummycycle+0x120>
                                             Object->sfdp_private.ManuID, 1000))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34190406:	230c      	movs	r3, #12
34190408:	75fb      	strb	r3, [r7, #23]
    goto error;
3419040a:	e05c      	b.n	341904c6 <sfdp_set_dummycycle+0x1da>
  }

  /* clear the value */
  localValue[0] = localValue[0] & ~(MaskWaitStateValue[JEDEC_SCCR_Map.Param_DWORD.D9.NumberBitsUsedToSetWaitStates] << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
3419040c:	7a3b      	ldrb	r3, [r7, #8]
3419040e:	b25a      	sxtb	r2, r3
34190410:	4b30      	ldr	r3, [pc, #192]	@ (341904d4 <sfdp_set_dummycycle+0x1e8>)
34190412:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34190416:	f3c3 1341 	ubfx	r3, r3, #5, #2
3419041a:	b2db      	uxtb	r3, r3
3419041c:	3318      	adds	r3, #24
3419041e:	443b      	add	r3, r7
34190420:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
34190424:	4619      	mov	r1, r3
34190426:	4b2b      	ldr	r3, [pc, #172]	@ (341904d4 <sfdp_set_dummycycle+0x1e8>)
34190428:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3419042c:	f3c3 0302 	ubfx	r3, r3, #0, #3
34190430:	b2db      	uxtb	r3, r3
34190432:	fa01 f303 	lsl.w	r3, r1, r3
34190436:	b25b      	sxtb	r3, r3
34190438:	43db      	mvns	r3, r3
3419043a:	b25b      	sxtb	r3, r3
3419043c:	4013      	ands	r3, r2
3419043e:	b25b      	sxtb	r3, r3
34190440:	b2db      	uxtb	r3, r3
34190442:	723b      	strb	r3, [r7, #8]

  /* Apply the value with the mask */
  localValue[0] =  localValue[0] | (uint8_t)(DummyValue << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
34190444:	7a3a      	ldrb	r2, [r7, #8]
34190446:	4b23      	ldr	r3, [pc, #140]	@ (341904d4 <sfdp_set_dummycycle+0x1e8>)
34190448:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3419044c:	f3c3 0302 	ubfx	r3, r3, #0, #3
34190450:	b2db      	uxtb	r3, r3
34190452:	4619      	mov	r1, r3
34190454:	683b      	ldr	r3, [r7, #0]
34190456:	408b      	lsls	r3, r1
34190458:	b2db      	uxtb	r3, r3
3419045a:	4313      	orrs	r3, r2
3419045c:	b2db      	uxtb	r3, r3
3419045e:	723b      	strb	r3, [r7, #8]
  localValue[1] = localValue[0];
34190460:	7a3b      	ldrb	r3, [r7, #8]
34190462:	727b      	strb	r3, [r7, #9]

  /* Write de configuration */
  if (HAL_OK != SAL_XSPI_Write(&Object->sfdp_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandWriteAccess, Address, (uint8_t *)localValue, 2u))
34190464:	687b      	ldr	r3, [r7, #4]
34190466:	f103 0008 	add.w	r0, r3, #8
3419046a:	4b1a      	ldr	r3, [pc, #104]	@ (341904d4 <sfdp_set_dummycycle+0x1e8>)
3419046c:	f893 1020 	ldrb.w	r1, [r3, #32]
34190470:	f107 0308 	add.w	r3, r7, #8
34190474:	2202      	movs	r2, #2
34190476:	9200      	str	r2, [sp, #0]
34190478:	693a      	ldr	r2, [r7, #16]
3419047a:	f7fe f9c9 	bl	3418e810 <SAL_XSPI_Write>
3419047e:	4603      	mov	r3, r0
34190480:	2b00      	cmp	r3, #0
34190482:	d002      	beq.n	3419048a <sfdp_set_dummycycle+0x19e>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34190484:	230c      	movs	r3, #12
34190486:	75fb      	strb	r3, [r7, #23]
    goto error;
34190488:	e01d      	b.n	341904c6 <sfdp_set_dummycycle+0x1da>
  }

  /* wait for busy flag clear */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3419048a:	2164      	movs	r1, #100	@ 0x64
3419048c:	6878      	ldr	r0, [r7, #4]
3419048e:	f7ff fce9 	bl	3418fe64 <driver_check_FlagBUSY>
34190492:	4603      	mov	r3, r0
34190494:	2b00      	cmp	r3, #0
34190496:	d002      	beq.n	3419049e <sfdp_set_dummycycle+0x1b2>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34190498:	230c      	movs	r3, #12
3419049a:	75fb      	strb	r3, [r7, #23]
    goto error;
3419049c:	e013      	b.n	341904c6 <sfdp_set_dummycycle+0x1da>
  }

  /* Read the configuration, line can be removed it is only used for debug purpose */
  if (HAL_OK != SAL_XSPI_Read(&Object->sfdp_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess,
3419049e:	687b      	ldr	r3, [r7, #4]
341904a0:	f103 0008 	add.w	r0, r3, #8
341904a4:	4b0b      	ldr	r3, [pc, #44]	@ (341904d4 <sfdp_set_dummycycle+0x1e8>)
341904a6:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
341904aa:	f107 0308 	add.w	r3, r7, #8
341904ae:	2202      	movs	r2, #2
341904b0:	9200      	str	r2, [sp, #0]
341904b2:	693a      	ldr	r2, [r7, #16]
341904b4:	f7fe f944 	bl	3418e740 <SAL_XSPI_Read>
341904b8:	4603      	mov	r3, r0
341904ba:	2b00      	cmp	r3, #0
341904bc:	d002      	beq.n	341904c4 <sfdp_set_dummycycle+0x1d8>
                              Address, (uint8_t *)localValue, 2u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
341904be:	230c      	movs	r3, #12
341904c0:	75fb      	strb	r3, [r7, #23]
    goto error;
341904c2:	e000      	b.n	341904c6 <sfdp_set_dummycycle+0x1da>
  }

error :
341904c4:	bf00      	nop
  return retr;
341904c6:	7dfb      	ldrb	r3, [r7, #23]
}
341904c8:	4618      	mov	r0, r3
341904ca:	371c      	adds	r7, #28
341904cc:	46bd      	mov	sp, r7
341904ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
341904d0:	1f0f0703 	.word	0x1f0f0703
341904d4:	341c0398 	.word	0x341c0398

341904d8 <JEDEC_Basic_ManageQuadEnableRequirement>:
          JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequirement parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_ManageQuadEnableRequirement(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
341904d8:	b580      	push	{r7, lr}
341904da:	b084      	sub	sp, #16
341904dc:	af00      	add	r7, sp, #0
341904de:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
341904e0:	230f      	movs	r3, #15
341904e2:	73fb      	strb	r3, [r7, #15]
  uint8_t localValue[2];

  /* switch the mode in QSPI if available */
  switch (JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequirement & 0x7u)
341904e4:	4b59      	ldr	r3, [pc, #356]	@ (3419064c <JEDEC_Basic_ManageQuadEnableRequirement+0x174>)
341904e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
341904ea:	f3c3 1302 	ubfx	r3, r3, #4, #3
341904ee:	b2db      	uxtb	r3, r3
341904f0:	2b07      	cmp	r3, #7
341904f2:	f200 80a4 	bhi.w	3419063e <JEDEC_Basic_ManageQuadEnableRequirement+0x166>
341904f6:	a201      	add	r2, pc, #4	@ (adr r2, 341904fc <JEDEC_Basic_ManageQuadEnableRequirement+0x24>)
341904f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
341904fc:	3419063f 	.word	0x3419063f
34190500:	3419063f 	.word	0x3419063f
34190504:	3419051d 	.word	0x3419051d
34190508:	3419063f 	.word	0x3419063f
3419050c:	3419059d 	.word	0x3419059d
34190510:	3419063f 	.word	0x3419063f
34190514:	3419063f 	.word	0x3419063f
34190518:	3419063f 	.word	0x3419063f
              */
    break;
  case 0x2u: {/* 010b: QE is bit 6 of status register 1. It is set via Write Status with one data byte where bit 6 is one.
                 It is cleared via Write Status with one data byte where bit 6 is zero. */
    /* 1 - set the write enable */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfdp_private.SALObject,
3419051c:	687b      	ldr	r3, [r7, #4]
3419051e:	f103 0008 	add.w	r0, r3, #8
34190522:	687b      	ldr	r3, [r7, #4]
34190524:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
34190528:	2300      	movs	r3, #0
3419052a:	2200      	movs	r2, #0
3419052c:	f7fe fa0d 	bl	3418e94a <SAL_XSPI_SendReadCommand>
34190530:	4603      	mov	r3, r0
34190532:	2b00      	cmp	r3, #0
34190534:	d002      	beq.n	3419053c <JEDEC_Basic_ManageQuadEnableRequirement+0x64>
                                           Object->sfdp_private.DriverInfo.WriteWELCommand, NULL, 0u))
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34190536:	230c      	movs	r3, #12
34190538:	73fb      	strb	r3, [r7, #15]
      goto error;
3419053a:	e081      	b.n	34190640 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* 2 - read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfdp_private.SALObject, SFDP_DRIVER_READ_STATUS_REGISTER_COMMAND,
3419053c:	687b      	ldr	r3, [r7, #4]
3419053e:	f103 0008 	add.w	r0, r3, #8
34190542:	f107 020c 	add.w	r2, r7, #12
34190546:	2301      	movs	r3, #1
34190548:	2105      	movs	r1, #5
3419054a:	f7fe f9fe 	bl	3418e94a <SAL_XSPI_SendReadCommand>
3419054e:	4603      	mov	r3, r0
34190550:	2b00      	cmp	r3, #0
34190552:	d002      	beq.n	3419055a <JEDEC_Basic_ManageQuadEnableRequirement+0x82>
                                           (uint8_t *)&localValue[0], 1u))
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34190554:	230c      	movs	r3, #12
34190556:	73fb      	strb	r3, [r7, #15]
      goto error;
34190558:	e072      	b.n	34190640 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* 3 - update the status register to enable QPI mode*/
    localValue[0] = localValue[0] | 0x40u;
3419055a:	7b3b      	ldrb	r3, [r7, #12]
3419055c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34190560:	b2db      	uxtb	r3, r3
34190562:	733b      	strb	r3, [r7, #12]

    /* 4 - write the status register with QPI mode to 1 */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 1u))
34190564:	687b      	ldr	r3, [r7, #4]
34190566:	f103 0008 	add.w	r0, r3, #8
3419056a:	f107 020c 	add.w	r2, r7, #12
3419056e:	2301      	movs	r3, #1
34190570:	2101      	movs	r1, #1
34190572:	f7fe f996 	bl	3418e8a2 <SAL_XSPI_CommandSendData>
34190576:	4603      	mov	r3, r0
34190578:	2b00      	cmp	r3, #0
3419057a:	d002      	beq.n	34190582 <JEDEC_Basic_ManageQuadEnableRequirement+0xaa>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3419057c:	230c      	movs	r3, #12
3419057e:	73fb      	strb	r3, [r7, #15]
      goto error;
34190580:	e05e      	b.n	34190640 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
34190582:	2164      	movs	r1, #100	@ 0x64
34190584:	6878      	ldr	r0, [r7, #4]
34190586:	f7ff fc6d 	bl	3418fe64 <driver_check_FlagBUSY>
3419058a:	4603      	mov	r3, r0
3419058c:	2b00      	cmp	r3, #0
3419058e:	d002      	beq.n	34190596 <JEDEC_Basic_ManageQuadEnableRequirement+0xbe>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34190590:	230c      	movs	r3, #12
34190592:	73fb      	strb	r3, [r7, #15]
      goto error;
34190594:	e054      	b.n	34190640 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    retr = EXTMEM_SFDP_OK;
34190596:	2300      	movs	r3, #0
34190598:	73fb      	strb	r3, [r7, #15]
    break;
3419059a:	e051      	b.n	34190640 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
  case 0x4u:{ /* 100b: QE is bit 1 of status register 2. It is set via Write Status with two data bytes where bit 1 of the second byte is one.
                It is cleared via Write Status with two data bytes where bit 1 of the second byte is zero.
                In contrast to the 001b code, writing one byte to the status register does not modify status register 2.*/

    /* read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfdp_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
3419059c:	687b      	ldr	r3, [r7, #4]
3419059e:	f103 0008 	add.w	r0, r3, #8
341905a2:	f107 020c 	add.w	r2, r7, #12
341905a6:	2302      	movs	r3, #2
341905a8:	2105      	movs	r1, #5
341905aa:	f7fe f9ce 	bl	3418e94a <SAL_XSPI_SendReadCommand>
341905ae:	4603      	mov	r3, r0
341905b0:	2b00      	cmp	r3, #0
341905b2:	d002      	beq.n	341905ba <JEDEC_Basic_ManageQuadEnableRequirement+0xe2>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
341905b4:	230c      	movs	r3, #12
341905b6:	73fb      	strb	r3, [r7, #15]
      goto error;
341905b8:	e042      	b.n	34190640 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* update the status register */
    localValue[1] |= 2u;
341905ba:	7b7b      	ldrb	r3, [r7, #13]
341905bc:	f043 0302 	orr.w	r3, r3, #2
341905c0:	b2db      	uxtb	r3, r3
341905c2:	737b      	strb	r3, [r7, #13]

    /* WEL */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfdp_private.SALObject, Object->sfdp_private.DriverInfo.WriteWELCommand, NULL, 0u))
341905c4:	687b      	ldr	r3, [r7, #4]
341905c6:	f103 0008 	add.w	r0, r3, #8
341905ca:	687b      	ldr	r3, [r7, #4]
341905cc:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
341905d0:	2300      	movs	r3, #0
341905d2:	2200      	movs	r2, #0
341905d4:	f7fe f9b9 	bl	3418e94a <SAL_XSPI_SendReadCommand>
341905d8:	4603      	mov	r3, r0
341905da:	2b00      	cmp	r3, #0
341905dc:	d002      	beq.n	341905e4 <JEDEC_Basic_ManageQuadEnableRequirement+0x10c>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
341905de:	230c      	movs	r3, #12
341905e0:	73fb      	strb	r3, [r7, #15]
      goto error;
341905e2:	e02d      	b.n	34190640 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* write the status register */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 2u))
341905e4:	687b      	ldr	r3, [r7, #4]
341905e6:	f103 0008 	add.w	r0, r3, #8
341905ea:	f107 020c 	add.w	r2, r7, #12
341905ee:	2302      	movs	r3, #2
341905f0:	2101      	movs	r1, #1
341905f2:	f7fe f956 	bl	3418e8a2 <SAL_XSPI_CommandSendData>
341905f6:	4603      	mov	r3, r0
341905f8:	2b00      	cmp	r3, #0
341905fa:	d002      	beq.n	34190602 <JEDEC_Basic_ManageQuadEnableRequirement+0x12a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
341905fc:	230c      	movs	r3, #12
341905fe:	73fb      	strb	r3, [r7, #15]
      goto error;
34190600:	e01e      	b.n	34190640 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
34190602:	2164      	movs	r1, #100	@ 0x64
34190604:	6878      	ldr	r0, [r7, #4]
34190606:	f7ff fc2d 	bl	3418fe64 <driver_check_FlagBUSY>
3419060a:	4603      	mov	r3, r0
3419060c:	2b00      	cmp	r3, #0
3419060e:	d002      	beq.n	34190616 <JEDEC_Basic_ManageQuadEnableRequirement+0x13e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34190610:	230c      	movs	r3, #12
34190612:	73fb      	strb	r3, [r7, #15]
      goto error;
34190614:	e014      	b.n	34190640 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* Optional : only for control read the status register and check write operation is OK */
    localValue[1] = 0xFF;
34190616:	23ff      	movs	r3, #255	@ 0xff
34190618:	737b      	strb	r3, [r7, #13]
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfdp_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
3419061a:	687b      	ldr	r3, [r7, #4]
3419061c:	f103 0008 	add.w	r0, r3, #8
34190620:	f107 020c 	add.w	r2, r7, #12
34190624:	2302      	movs	r3, #2
34190626:	2105      	movs	r1, #5
34190628:	f7fe f98f 	bl	3418e94a <SAL_XSPI_SendReadCommand>
3419062c:	4603      	mov	r3, r0
3419062e:	2b00      	cmp	r3, #0
34190630:	d002      	beq.n	34190638 <JEDEC_Basic_ManageQuadEnableRequirement+0x160>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34190632:	230c      	movs	r3, #12
34190634:	73fb      	strb	r3, [r7, #15]
      goto error;
34190636:	e003      	b.n	34190640 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    retr = EXTMEM_SFDP_OK;
34190638:	2300      	movs	r3, #0
3419063a:	73fb      	strb	r3, [r7, #15]
    break;
3419063c:	e000      	b.n	34190640 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
  case 0x6u: /* 110b: QE is bit 1 of the status register 2. Status register 1 is read using Read Status instruction 05h. Status register 2 is read using instruction 35h, and status register 3 is read using instruction 15h. QE is set via Write Status Register instruction 31h with one data byte where bit 1 is one. It is cleared via Write Status Register instruction 31h with one data byte where bit 1 is zero.*/
    break;
  case 0x7u: /*111b: Reserved */
    break;
  default :/* Added for Misra */
    break;
3419063e:	bf00      	nop
  }
error :
  return retr;
34190640:	7bfb      	ldrb	r3, [r7, #15]
}
34190642:	4618      	mov	r0, r3
34190644:	3710      	adds	r7, #16
34190646:	46bd      	mov	sp, r7
34190648:	bd80      	pop	{r7, pc}
3419064a:	bf00      	nop
3419064c:	341c0318 	.word	0x341c0318

34190650 <JEDEC_Basic_Manage4S4S4SEnableSequence>:
          JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_Manage4S4S4SEnableSequence(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
34190650:	b580      	push	{r7, lr}
34190652:	b084      	sub	sp, #16
34190654:	af00      	add	r7, sp, #0
34190656:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
34190658:	230f      	movs	r3, #15
3419065a:	73fb      	strb	r3, [r7, #15]
  uint8_t instruction = 0x00u;
3419065c:	2300      	movs	r3, #0
3419065e:	73bb      	strb	r3, [r7, #14]

  /* 4-4-4 mode enable sequences; This field describes the supported methods to enter 4-4-4 mode from 1-1-1 mode */
  /* x_xxx1b: set QE per QER description above, then issue instruction 38h */
  if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x1u) == 0x1u)
34190660:	4b1a      	ldr	r3, [pc, #104]	@ (341906cc <JEDEC_Basic_Manage4S4S4SEnableSequence+0x7c>)
34190662:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
34190664:	f3c3 1304 	ubfx	r3, r3, #4, #5
34190668:	b2db      	uxtb	r3, r3
3419066a:	f003 0301 	and.w	r3, r3, #1
3419066e:	2b00      	cmp	r3, #0
34190670:	d007      	beq.n	34190682 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x32>
  {
    retr = JEDEC_Basic_ManageQuadEnableRequirement(Object);
34190672:	6878      	ldr	r0, [r7, #4]
34190674:	f7ff ff30 	bl	341904d8 <JEDEC_Basic_ManageQuadEnableRequirement>
34190678:	4603      	mov	r3, r0
3419067a:	73fb      	strb	r3, [r7, #15]
    instruction = 0x38u;
3419067c:	2338      	movs	r3, #56	@ 0x38
3419067e:	73bb      	strb	r3, [r7, #14]
34190680:	e00f      	b.n	341906a2 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x52>
  }
  /* x_x1xxb: issue instruction 35h */
  else if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x4u) == 0x4u)
34190682:	4b12      	ldr	r3, [pc, #72]	@ (341906cc <JEDEC_Basic_Manage4S4S4SEnableSequence+0x7c>)
34190684:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
34190686:	f3c3 1304 	ubfx	r3, r3, #4, #5
3419068a:	b2db      	uxtb	r3, r3
3419068c:	f003 0304 	and.w	r3, r3, #4
34190690:	2b00      	cmp	r3, #0
34190692:	d006      	beq.n	341906a2 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x52>
  {
    /* If QE bit exists, Quad Enable Requirement describes method to enable Quad operations */
    retr = JEDEC_Basic_ManageQuadEnableRequirement(Object);
34190694:	6878      	ldr	r0, [r7, #4]
34190696:	f7ff ff1f 	bl	341904d8 <JEDEC_Basic_ManageQuadEnableRequirement>
3419069a:	4603      	mov	r3, r0
3419069c:	73fb      	strb	r3, [r7, #15]
    instruction = 0x35u;
3419069e:	2335      	movs	r3, #53	@ 0x35
341906a0:	73bb      	strb	r3, [r7, #14]
       Device uses a read-modify-write sequence of operations:
       Read Volatile Enhanced Configuration Register using instruction 65h, no address is required, set bit 7 to 1.
       Write Volatile Enhanced Configuration Register using instruction 61h, no address is required. This configuration is volatile.
  NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 enable sequence is issued.
  */
  if ((retr == EXTMEM_SFDP_OK) && (instruction != 0u))
341906a2:	7bfb      	ldrb	r3, [r7, #15]
341906a4:	2b00      	cmp	r3, #0
341906a6:	d10c      	bne.n	341906c2 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x72>
341906a8:	7bbb      	ldrb	r3, [r7, #14]
341906aa:	2b00      	cmp	r3, #0
341906ac:	d009      	beq.n	341906c2 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x72>
  {
    (void)SAL_XSPI_SendReadCommand(&Object->sfdp_private.SALObject, instruction, NULL, 0u);
341906ae:	687b      	ldr	r3, [r7, #4]
341906b0:	f103 0008 	add.w	r0, r3, #8
341906b4:	7bb9      	ldrb	r1, [r7, #14]
341906b6:	2300      	movs	r3, #0
341906b8:	2200      	movs	r2, #0
341906ba:	f7fe f946 	bl	3418e94a <SAL_XSPI_SendReadCommand>
    /* @note on memory W25Q64JV the command 38h does not exist so the control on command execution has been removed */
    retr = EXTMEM_SFDP_OK;
341906be:	2300      	movs	r3, #0
341906c0:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
341906c2:	7bfb      	ldrb	r3, [r7, #15]
}
341906c4:	4618      	mov	r0, r3
341906c6:	3710      	adds	r7, #16
341906c8:	46bd      	mov	sp, r7
341906ca:	bd80      	pop	{r7, pc}
341906cc:	341c0318 	.word	0x341c0318

341906d0 <CheckSFDP_Signature>:
 * @param Object memory Object
 * @param Signature value of the SFDP signature
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef CheckSFDP_Signature(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t Signature )
{
341906d0:	b580      	push	{r7, lr}
341906d2:	b084      	sub	sp, #16
341906d4:	af00      	add	r7, sp, #0
341906d6:	6078      	str	r0, [r7, #4]
341906d8:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
341906da:	2304      	movs	r3, #4
341906dc:	73fb      	strb	r3, [r7, #15]

  /* check the magic number */
  switch(Signature)
341906de:	683b      	ldr	r3, [r7, #0]
341906e0:	4a0e      	ldr	r2, [pc, #56]	@ (3419071c <CheckSFDP_Signature+0x4c>)
341906e2:	4293      	cmp	r3, r2
341906e4:	d006      	beq.n	341906f4 <CheckSFDP_Signature+0x24>
341906e6:	683b      	ldr	r3, [r7, #0]
341906e8:	4a0d      	ldr	r2, [pc, #52]	@ (34190720 <CheckSFDP_Signature+0x50>)
341906ea:	4293      	cmp	r3, r2
341906ec:	d10e      	bne.n	3419070c <CheckSFDP_Signature+0x3c>
  {
  case SFDP_SIGNATURE :
    SFDP_DEBUG_STR("signature of the header: OK");
    retr = EXTMEM_SFDP_OK;
341906ee:	2300      	movs	r3, #0
341906f0:	73fb      	strb	r3, [r7, #15]
    break;
341906f2:	e00e      	b.n	34190712 <CheckSFDP_Signature+0x42>
  case SFDP_SIGNATURE_INVERTED :
    SFDP_DEBUG_STR("signature of the header: KO inverted data order");
    /* Change the memory type settings */
    if (HAL_OK == SAL_XSPI_UpdateMemoryType(&Object->sfdp_private.SALObject, SAL_XSPI_ORDERINVERTED))
341906f4:	687b      	ldr	r3, [r7, #4]
341906f6:	3308      	adds	r3, #8
341906f8:	2100      	movs	r1, #0
341906fa:	4618      	mov	r0, r3
341906fc:	f7fe fae1 	bl	3418ecc2 <SAL_XSPI_UpdateMemoryType>
34190700:	4603      	mov	r3, r0
34190702:	2b00      	cmp	r3, #0
34190704:	d104      	bne.n	34190710 <CheckSFDP_Signature+0x40>
    {
      retr = EXTMEM_SFDP_ERROR_SIGNATUREMTYPE;
34190706:	2305      	movs	r3, #5
34190708:	73fb      	strb	r3, [r7, #15]
    }
    break;
3419070a:	e001      	b.n	34190710 <CheckSFDP_Signature+0x40>
  default :
    SFDP_DEBUG_STR("signature of the header: KO");
    break;
3419070c:	bf00      	nop
3419070e:	e000      	b.n	34190712 <CheckSFDP_Signature+0x42>
    break;
34190710:	bf00      	nop
  }
  return retr;
34190712:	7bfb      	ldrb	r3, [r7, #15]
}
34190714:	4618      	mov	r0, r3
34190716:	3710      	adds	r7, #16
34190718:	46bd      	mov	sp, r7
3419071a:	bd80      	pop	{r7, pc}
3419071c:	44505346 	.word	0x44505346
34190720:	50444653 	.word	0x50444653

34190724 <EXTMEM_DRIVER_NOR_SFDP_Init>:
/** @defgroup DRIVER_SFDP_Exported_Functions DRIVER SFDP Exported Functions
  * @{
  */

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config, uint32_t ClockInput, EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
34190724:	b580      	push	{r7, lr}
34190726:	b08a      	sub	sp, #40	@ 0x28
34190728:	af00      	add	r7, sp, #0
3419072a:	60f8      	str	r0, [r7, #12]
3419072c:	607a      	str	r2, [r7, #4]
3419072e:	603b      	str	r3, [r7, #0]
34190730:	460b      	mov	r3, r1
34190732:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
34190734:	2300      	movs	r3, #0
34190736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SFDP_HeaderTypeDef JEDEC_SFDP_Header;
  uint8_t FreqUpdate = 0u;
3419073a:	2300      	movs	r3, #0
3419073c:	76fb      	strb	r3, [r7, #27]
  uint8_t DataID[6];
  uint32_t ClockOut;

  /* reset data of SFDPObject to zero */
  SFDP_DEBUG_STR("1 - reset data SFDPObject to zero")
  (void)memset((void *)&SFDPObject->sfdp_private, 0x0, sizeof(SFDPObject->sfdp_private));
3419073e:	683b      	ldr	r3, [r7, #0]
34190740:	3308      	adds	r3, #8
34190742:	2298      	movs	r2, #152	@ 0x98
34190744:	2100      	movs	r1, #0
34190746:	4618      	mov	r0, r3
34190748:	f000 fae6 	bl	34190d18 <memset>

  /* initialize the SFDPObject */
  SFDP_DEBUG_STR("2 - initialize the SFDPObject")
  SFDPObject->sfdp_private.Config = Config;
3419074c:	683b      	ldr	r3, [r7, #0]
3419074e:	7afa      	ldrb	r2, [r7, #11]
34190750:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  SFDPObject->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
34190754:	683b      	ldr	r3, [r7, #0]
34190756:	2200      	movs	r2, #0
34190758:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  SFDPObject->sfdp_private.DriverInfo.ClockIn = ClockInput;
3419075c:	683b      	ldr	r3, [r7, #0]
3419075e:	687a      	ldr	r2, [r7, #4]
34190760:	669a      	str	r2, [r3, #104]	@ 0x68
  SAL_XSPI_SET_SFDPDUMMYCYLE(SFDPObject->sfdp_private.SALObject, EXTMEM_READ_SFDP_NB_DUMMY_CYCLES_DEFAULT);
34190762:	683b      	ldr	r3, [r7, #0]
34190764:	2208      	movs	r2, #8
34190766:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* set memory speed to 50Mhz maximum */
  SFDP_DEBUG_STR("3 - set memory link and speed to 50Mhz maximum")
  (void)SAL_XSPI_Init(&SFDPObject->sfdp_private.SALObject, Peripheral);
3419076a:	683b      	ldr	r3, [r7, #0]
3419076c:	3308      	adds	r3, #8
3419076e:	68f9      	ldr	r1, [r7, #12]
34190770:	4618      	mov	r0, r3
34190772:	f7fd fd86 	bl	3418e282 <SAL_XSPI_Init>
  (void)SAL_XSPI_SetClock(&SFDPObject->sfdp_private.SALObject, ClockInput, DRIVER_SFDP_DEFAULT_CLOCK, &ClockOut);
34190776:	683b      	ldr	r3, [r7, #0]
34190778:	f103 0008 	add.w	r0, r3, #8
3419077c:	f107 0310 	add.w	r3, r7, #16
34190780:	4a45      	ldr	r2, [pc, #276]	@ (34190898 <EXTMEM_DRIVER_NOR_SFDP_Init+0x174>)
34190782:	6879      	ldr	r1, [r7, #4]
34190784:	f7fd fd3e 	bl	3418e204 <SAL_XSPI_SetClock>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&SFDPObject->sfdp_private.SALObject);
34190788:	683b      	ldr	r3, [r7, #0]
3419078a:	3308      	adds	r3, #8
3419078c:	4618      	mov	r0, r3
3419078e:	f7fe fa87 	bl	3418eca0 <SAL_XSPI_DisableMapMode>

  /* analyze the SFDP structure to get driver information */
  SFDP_DEBUG_STR("4 - analyze the SFDP structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
34190792:	f107 031c 	add.w	r3, r7, #28
34190796:	4619      	mov	r1, r3
34190798:	6838      	ldr	r0, [r7, #0]
3419079a:	f7fe fb65 	bl	3418ee68 <SFDP_GetHeader>
3419079e:	4603      	mov	r3, r0
341907a0:	2b00      	cmp	r3, #0
341907a2:	d003      	beq.n	341907ac <EXTMEM_DRIVER_NOR_SFDP_Init+0x88>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only performed in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
341907a4:	23ff      	movs	r3, #255	@ 0xff
341907a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
341907aa:	e06e      	b.n	3419088a <EXTMEM_DRIVER_NOR_SFDP_Init+0x166>
  }

  /* Reset the memory */
  SFDP_DEBUG_STR("5 - reset the memory")
  if(EXTMEM_SFDP_OK != SFDP_MemoryReset(SFDPObject))
341907ac:	6838      	ldr	r0, [r7, #0]
341907ae:	f7fe fc95 	bl	3418f0dc <SFDP_MemoryReset>
     */
    SFDP_DEBUG_STR("ERROR::on the call of SFDP_MemoryReset but no error returned")
  }

  /* wait few ms after the reset operation, this is done to avoid issue on SFDP read */
  HAL_Delay(10);
341907b2:	200a      	movs	r0, #10
341907b4:	f7f1 fb2a 	bl	34181e0c <HAL_Delay>

  /* analyze the SFDP structure to get driver information after the reset */
  SFDP_DEBUG_STR("6 - analyze the SFDP structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
341907b8:	f107 031c 	add.w	r3, r7, #28
341907bc:	4619      	mov	r1, r3
341907be:	6838      	ldr	r0, [r7, #0]
341907c0:	f7fe fb52 	bl	3418ee68 <SFDP_GetHeader>
341907c4:	4603      	mov	r3, r0
341907c6:	2b00      	cmp	r3, #0
341907c8:	d003      	beq.n	341907d2 <EXTMEM_DRIVER_NOR_SFDP_Init+0xae>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only perform in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
341907ca:	23ff      	movs	r3, #255	@ 0xff
341907cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
341907d0:	e05b      	b.n	3419088a <EXTMEM_DRIVER_NOR_SFDP_Init+0x166>
  }

  /* Save information from the SFDP table
     Nb of parameters starts at 0 (0 means 1 parameter) */
  if (JEDEC_SFDP_Header.param_number >= SFDP_MAX_NB_OF_PARAM)
341907d2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
341907d6:	2b09      	cmp	r3, #9
341907d8:	d904      	bls.n	341907e4 <EXTMEM_DRIVER_NOR_SFDP_Init+0xc0>
  {
    SFDPObject->sfdp_private.Sfdp_param_number = SFDP_MAX_NB_OF_PARAM - 1;
341907da:	683b      	ldr	r3, [r7, #0]
341907dc:	2209      	movs	r2, #9
341907de:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
341907e2:	e004      	b.n	341907ee <EXTMEM_DRIVER_NOR_SFDP_Init+0xca>
  }
  else
  {
    SFDPObject->sfdp_private.Sfdp_param_number = JEDEC_SFDP_Header.param_number;
341907e4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
341907e8:	683b      	ldr	r3, [r7, #0]
341907ea:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
  }
  SFDPObject->sfdp_private.Sfdp_AccessProtocol = JEDEC_SFDP_Header.AccessProtocol;
341907ee:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
341907f2:	683b      	ldr	r3, [r7, #0]
341907f4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

  /* read the flash ID */
  SFDP_DEBUG_STR("7 - read the flash ID")
  (void)SAL_XSPI_GetId(&SFDPObject->sfdp_private.SALObject, DataID, EXTMEM_READ_JEDEC_ID_SIZE);
341907f8:	683b      	ldr	r3, [r7, #0]
341907fa:	3308      	adds	r3, #8
341907fc:	f107 0114 	add.w	r1, r7, #20
34190800:	2204      	movs	r2, #4
34190802:	4618      	mov	r0, r3
34190804:	f7fd ff1c 	bl	3418e640 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

  /* Keep manufacturer information, it could be used to help in
     building of consistent driver */
  SFDPObject->sfdp_private.ManuID = DataID[0];
34190808:	7d3a      	ldrb	r2, [r7, #20]
3419080a:	683b      	ldr	r3, [r7, #0]
3419080c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* get the SFDP data */
  SFDP_DEBUG_STR("8 - collect the SFDP data")
  if(EXTMEM_SFDP_OK != SFDP_CollectData(SFDPObject))
34190810:	6838      	ldr	r0, [r7, #0]
34190812:	f7fe fb87 	bl	3418ef24 <SFDP_CollectData>
34190816:	4603      	mov	r3, r0
34190818:	2b00      	cmp	r3, #0
3419081a:	d003      	beq.n	34190824 <EXTMEM_DRIVER_NOR_SFDP_Init+0x100>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
3419081c:	23ff      	movs	r3, #255	@ 0xff
3419081e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
34190822:	e032      	b.n	3419088a <EXTMEM_DRIVER_NOR_SFDP_Init+0x166>
  }

  /* setup the generic driver information and prepare the physical layer */
  SFDP_DEBUG_STR("9 - build the generic driver information and prepare the physical layer")
  if(EXTMEM_SFDP_OK != SFDP_BuildGenericDriver(SFDPObject, &FreqUpdate))
34190824:	f107 031b 	add.w	r3, r7, #27
34190828:	4619      	mov	r1, r3
3419082a:	6838      	ldr	r0, [r7, #0]
3419082c:	f7fe fd32 	bl	3418f294 <SFDP_BuildGenericDriver>
34190830:	4603      	mov	r3, r0
34190832:	2b00      	cmp	r3, #0
34190834:	d003      	beq.n	3419083e <EXTMEM_DRIVER_NOR_SFDP_Init+0x11a>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD;
34190836:	23fd      	movs	r3, #253	@ 0xfd
34190838:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3419083c:	e025      	b.n	3419088a <EXTMEM_DRIVER_NOR_SFDP_Init+0x166>
  }

  SFDP_DEBUG_STR("10 - adjust the frequency if required")
  if ((FreqUpdate == 0u) && (SFDPObject->sfdp_public.MaxFreq != 0u))
3419083e:	7efb      	ldrb	r3, [r7, #27]
34190840:	2b00      	cmp	r3, #0
34190842:	d10d      	bne.n	34190860 <EXTMEM_DRIVER_NOR_SFDP_Init+0x13c>
34190844:	683b      	ldr	r3, [r7, #0]
34190846:	681b      	ldr	r3, [r3, #0]
34190848:	2b00      	cmp	r3, #0
3419084a:	d009      	beq.n	34190860 <EXTMEM_DRIVER_NOR_SFDP_Init+0x13c>
  {
    (void)SAL_XSPI_SetClock(&SFDPObject->sfdp_private.SALObject, ClockInput, SFDPObject->sfdp_public.MaxFreq, &ClockOut);
3419084c:	683b      	ldr	r3, [r7, #0]
3419084e:	f103 0008 	add.w	r0, r3, #8
34190852:	683b      	ldr	r3, [r7, #0]
34190854:	681a      	ldr	r2, [r3, #0]
34190856:	f107 0310 	add.w	r3, r7, #16
3419085a:	6879      	ldr	r1, [r7, #4]
3419085c:	f7fd fcd2 	bl	3418e204 <SAL_XSPI_SetClock>
    SFDP_DEBUG_STR("--> new freq configured");
  }

  SFDP_DEBUG_STR("11 - read again the SFDP header to adjust memory type if necessary")
  if(EXTMEM_SFDP_OK != SFDP_ReadHeader(SFDPObject, &JEDEC_SFDP_Header))
34190860:	f107 031c 	add.w	r3, r7, #28
34190864:	4619      	mov	r1, r3
34190866:	6838      	ldr	r0, [r7, #0]
34190868:	f7fe fac0 	bl	3418edec <SFDP_ReadHeader>
3419086c:	4603      	mov	r3, r0
3419086e:	2b00      	cmp	r3, #0
34190870:	d003      	beq.n	3419087a <EXTMEM_DRIVER_NOR_SFDP_Init+0x156>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_MEMTYPE_CHECK")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MEMTYPE_CHECK;
34190872:	23f2      	movs	r3, #242	@ 0xf2
34190874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
34190878:	e007      	b.n	3419088a <EXTMEM_DRIVER_NOR_SFDP_Init+0x166>
  }

  (void)SAL_XSPI_GetId(&SFDPObject->sfdp_private.SALObject, DataID, EXTMEM_READ_JEDEC_ID_SIZE);
3419087a:	683b      	ldr	r3, [r7, #0]
3419087c:	3308      	adds	r3, #8
3419087e:	f107 0114 	add.w	r1, r7, #20
34190882:	2204      	movs	r2, #4
34190884:	4618      	mov	r0, r3
34190886:	f7fd fedb 	bl	3418e640 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

error:
  return retr;
3419088a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
3419088e:	4618      	mov	r0, r3
34190890:	3728      	adds	r7, #40	@ 0x28
34190892:	46bd      	mov	sp, r7
34190894:	bd80      	pop	{r7, pc}
34190896:	bf00      	nop
34190898:	02faf080 	.word	0x02faf080

3419089c <EXTMEM_DRIVER_NOR_SFDP_DeInit>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_DeInit(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3419089c:	b480      	push	{r7}
3419089e:	b083      	sub	sp, #12
341908a0:	af00      	add	r7, sp, #0
341908a2:	6078      	str	r0, [r7, #4]
  SFDPObject->sfdp_private.FlashSize = 0;
341908a4:	687b      	ldr	r3, [r7, #4]
341908a6:	2200      	movs	r2, #0
341908a8:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  return EXTMEM_DRIVER_NOR_SFDP_OK;
341908ac:	2300      	movs	r3, #0
}
341908ae:	4618      	mov	r0, r3
341908b0:	370c      	adds	r7, #12
341908b2:	46bd      	mov	sp, r7
341908b4:	f85d 7b04 	ldr.w	r7, [sp], #4
341908b8:	4770      	bx	lr

341908ba <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
341908ba:	b590      	push	{r4, r7, lr}
341908bc:	b087      	sub	sp, #28
341908be:	af02      	add	r7, sp, #8
341908c0:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
341908c2:	2300      	movs	r3, #0
341908c4:	73fb      	strb	r3, [r7, #15]

  /* enter the mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfdp_private.SALObject, SFDPObject->sfdp_private.DriverInfo.ReadInstruction,
341908c6:	687b      	ldr	r3, [r7, #4]
341908c8:	f103 0008 	add.w	r0, r3, #8
341908cc:	687b      	ldr	r3, [r7, #4]
341908ce:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
                                        (uint8_t)SFDPObject->sfdp_private.SALObject.Commandbase.DummyCycles,
341908d2:	687b      	ldr	r3, [r7, #4]
341908d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfdp_private.SALObject, SFDPObject->sfdp_private.DriverInfo.ReadInstruction,
341908d6:	b2da      	uxtb	r2, r3
341908d8:	687b      	ldr	r3, [r7, #4]
341908da:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
341908de:	2400      	movs	r4, #0
341908e0:	9400      	str	r4, [sp, #0]
341908e2:	f7fe f964 	bl	3418ebae <SAL_XSPI_EnableMapMode>
341908e6:	4603      	mov	r3, r0
341908e8:	2b00      	cmp	r3, #0
341908ea:	d001      	beq.n	341908f0 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode+0x36>
                                        SFDPObject->sfdp_private.DriverInfo.PageProgramInstruction, 0))
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
341908ec:	23f3      	movs	r3, #243	@ 0xf3
341908ee:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
341908f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
341908f4:	4618      	mov	r0, r3
341908f6:	3714      	adds	r7, #20
341908f8:	46bd      	mov	sp, r7
341908fa:	bd90      	pop	{r4, r7, pc}

341908fc <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
341908fc:	b580      	push	{r7, lr}
341908fe:	b084      	sub	sp, #16
34190900:	af00      	add	r7, sp, #0
34190902:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
34190904:	2300      	movs	r3, #0
34190906:	73fb      	strb	r3, [r7, #15]

  /* exit the mapped mode */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&SFDPObject->sfdp_private.SALObject))
34190908:	687b      	ldr	r3, [r7, #4]
3419090a:	3308      	adds	r3, #8
3419090c:	4618      	mov	r0, r3
3419090e:	f7fe f9c7 	bl	3418eca0 <SAL_XSPI_DisableMapMode>
34190912:	4603      	mov	r3, r0
34190914:	2b00      	cmp	r3, #0
34190916:	d001      	beq.n	3419091c <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode+0x20>
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
34190918:	23f3      	movs	r3, #243	@ 0xf3
3419091a:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
3419091c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
34190920:	4618      	mov	r0, r3
34190922:	3710      	adds	r7, #16
34190924:	46bd      	mov	sp, r7
34190926:	bd80      	pop	{r7, pc}

34190928 <std>:
34190928:	2300      	movs	r3, #0
3419092a:	b510      	push	{r4, lr}
3419092c:	4604      	mov	r4, r0
3419092e:	6083      	str	r3, [r0, #8]
34190930:	8181      	strh	r1, [r0, #12]
34190932:	4619      	mov	r1, r3
34190934:	6643      	str	r3, [r0, #100]	@ 0x64
34190936:	81c2      	strh	r2, [r0, #14]
34190938:	2208      	movs	r2, #8
3419093a:	6183      	str	r3, [r0, #24]
3419093c:	e9c0 3300 	strd	r3, r3, [r0]
34190940:	e9c0 3304 	strd	r3, r3, [r0, #16]
34190944:	305c      	adds	r0, #92	@ 0x5c
34190946:	f000 f9e7 	bl	34190d18 <memset>
3419094a:	4b0d      	ldr	r3, [pc, #52]	@ (34190980 <std+0x58>)
3419094c:	6224      	str	r4, [r4, #32]
3419094e:	6263      	str	r3, [r4, #36]	@ 0x24
34190950:	4b0c      	ldr	r3, [pc, #48]	@ (34190984 <std+0x5c>)
34190952:	62a3      	str	r3, [r4, #40]	@ 0x28
34190954:	4b0c      	ldr	r3, [pc, #48]	@ (34190988 <std+0x60>)
34190956:	62e3      	str	r3, [r4, #44]	@ 0x2c
34190958:	4b0c      	ldr	r3, [pc, #48]	@ (3419098c <std+0x64>)
3419095a:	6323      	str	r3, [r4, #48]	@ 0x30
3419095c:	4b0c      	ldr	r3, [pc, #48]	@ (34190990 <std+0x68>)
3419095e:	429c      	cmp	r4, r3
34190960:	d006      	beq.n	34190970 <std+0x48>
34190962:	f103 0268 	add.w	r2, r3, #104	@ 0x68
34190966:	4294      	cmp	r4, r2
34190968:	d002      	beq.n	34190970 <std+0x48>
3419096a:	33d0      	adds	r3, #208	@ 0xd0
3419096c:	429c      	cmp	r4, r3
3419096e:	d105      	bne.n	3419097c <std+0x54>
34190970:	f104 0058 	add.w	r0, r4, #88	@ 0x58
34190974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34190978:	f000 ba46 	b.w	34190e08 <__retarget_lock_init_recursive>
3419097c:	bd10      	pop	{r4, pc}
3419097e:	bf00      	nop
34190980:	34190b69 	.word	0x34190b69
34190984:	34190b8b 	.word	0x34190b8b
34190988:	34190bc3 	.word	0x34190bc3
3419098c:	34190be7 	.word	0x34190be7
34190990:	341c0428 	.word	0x341c0428

34190994 <stdio_exit_handler>:
34190994:	4a02      	ldr	r2, [pc, #8]	@ (341909a0 <stdio_exit_handler+0xc>)
34190996:	4903      	ldr	r1, [pc, #12]	@ (341909a4 <stdio_exit_handler+0x10>)
34190998:	4803      	ldr	r0, [pc, #12]	@ (341909a8 <stdio_exit_handler+0x14>)
3419099a:	f000 b869 	b.w	34190a70 <_fwalk_sglue>
3419099e:	bf00      	nop
341909a0:	341c00b8 	.word	0x341c00b8
341909a4:	34191121 	.word	0x34191121
341909a8:	341c00c8 	.word	0x341c00c8

341909ac <cleanup_stdio>:
341909ac:	6841      	ldr	r1, [r0, #4]
341909ae:	4b0c      	ldr	r3, [pc, #48]	@ (341909e0 <cleanup_stdio+0x34>)
341909b0:	4299      	cmp	r1, r3
341909b2:	b510      	push	{r4, lr}
341909b4:	4604      	mov	r4, r0
341909b6:	d001      	beq.n	341909bc <cleanup_stdio+0x10>
341909b8:	f000 fbb2 	bl	34191120 <_fflush_r>
341909bc:	68a1      	ldr	r1, [r4, #8]
341909be:	4b09      	ldr	r3, [pc, #36]	@ (341909e4 <cleanup_stdio+0x38>)
341909c0:	4299      	cmp	r1, r3
341909c2:	d002      	beq.n	341909ca <cleanup_stdio+0x1e>
341909c4:	4620      	mov	r0, r4
341909c6:	f000 fbab 	bl	34191120 <_fflush_r>
341909ca:	68e1      	ldr	r1, [r4, #12]
341909cc:	4b06      	ldr	r3, [pc, #24]	@ (341909e8 <cleanup_stdio+0x3c>)
341909ce:	4299      	cmp	r1, r3
341909d0:	d004      	beq.n	341909dc <cleanup_stdio+0x30>
341909d2:	4620      	mov	r0, r4
341909d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
341909d8:	f000 bba2 	b.w	34191120 <_fflush_r>
341909dc:	bd10      	pop	{r4, pc}
341909de:	bf00      	nop
341909e0:	341c0428 	.word	0x341c0428
341909e4:	341c0490 	.word	0x341c0490
341909e8:	341c04f8 	.word	0x341c04f8

341909ec <global_stdio_init.part.0>:
341909ec:	b510      	push	{r4, lr}
341909ee:	4b0b      	ldr	r3, [pc, #44]	@ (34190a1c <global_stdio_init.part.0+0x30>)
341909f0:	2104      	movs	r1, #4
341909f2:	4c0b      	ldr	r4, [pc, #44]	@ (34190a20 <global_stdio_init.part.0+0x34>)
341909f4:	4a0b      	ldr	r2, [pc, #44]	@ (34190a24 <global_stdio_init.part.0+0x38>)
341909f6:	4620      	mov	r0, r4
341909f8:	601a      	str	r2, [r3, #0]
341909fa:	2200      	movs	r2, #0
341909fc:	f7ff ff94 	bl	34190928 <std>
34190a00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
34190a04:	2201      	movs	r2, #1
34190a06:	2109      	movs	r1, #9
34190a08:	f7ff ff8e 	bl	34190928 <std>
34190a0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
34190a10:	2202      	movs	r2, #2
34190a12:	2112      	movs	r1, #18
34190a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34190a18:	f7ff bf86 	b.w	34190928 <std>
34190a1c:	341c0560 	.word	0x341c0560
34190a20:	341c0428 	.word	0x341c0428
34190a24:	34190995 	.word	0x34190995

34190a28 <__sfp_lock_acquire>:
34190a28:	4801      	ldr	r0, [pc, #4]	@ (34190a30 <__sfp_lock_acquire+0x8>)
34190a2a:	f000 b9ee 	b.w	34190e0a <__retarget_lock_acquire_recursive>
34190a2e:	bf00      	nop
34190a30:	341c0569 	.word	0x341c0569

34190a34 <__sfp_lock_release>:
34190a34:	4801      	ldr	r0, [pc, #4]	@ (34190a3c <__sfp_lock_release+0x8>)
34190a36:	f000 b9e9 	b.w	34190e0c <__retarget_lock_release_recursive>
34190a3a:	bf00      	nop
34190a3c:	341c0569 	.word	0x341c0569

34190a40 <__sinit>:
34190a40:	b510      	push	{r4, lr}
34190a42:	4604      	mov	r4, r0
34190a44:	f7ff fff0 	bl	34190a28 <__sfp_lock_acquire>
34190a48:	6a23      	ldr	r3, [r4, #32]
34190a4a:	b11b      	cbz	r3, 34190a54 <__sinit+0x14>
34190a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34190a50:	f7ff bff0 	b.w	34190a34 <__sfp_lock_release>
34190a54:	4b04      	ldr	r3, [pc, #16]	@ (34190a68 <__sinit+0x28>)
34190a56:	6223      	str	r3, [r4, #32]
34190a58:	4b04      	ldr	r3, [pc, #16]	@ (34190a6c <__sinit+0x2c>)
34190a5a:	681b      	ldr	r3, [r3, #0]
34190a5c:	2b00      	cmp	r3, #0
34190a5e:	d1f5      	bne.n	34190a4c <__sinit+0xc>
34190a60:	f7ff ffc4 	bl	341909ec <global_stdio_init.part.0>
34190a64:	e7f2      	b.n	34190a4c <__sinit+0xc>
34190a66:	bf00      	nop
34190a68:	341909ad 	.word	0x341909ad
34190a6c:	341c0560 	.word	0x341c0560

34190a70 <_fwalk_sglue>:
34190a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34190a74:	4607      	mov	r7, r0
34190a76:	4688      	mov	r8, r1
34190a78:	4614      	mov	r4, r2
34190a7a:	2600      	movs	r6, #0
34190a7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
34190a80:	f1b9 0901 	subs.w	r9, r9, #1
34190a84:	d505      	bpl.n	34190a92 <_fwalk_sglue+0x22>
34190a86:	6824      	ldr	r4, [r4, #0]
34190a88:	2c00      	cmp	r4, #0
34190a8a:	d1f7      	bne.n	34190a7c <_fwalk_sglue+0xc>
34190a8c:	4630      	mov	r0, r6
34190a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34190a92:	89ab      	ldrh	r3, [r5, #12]
34190a94:	2b01      	cmp	r3, #1
34190a96:	d907      	bls.n	34190aa8 <_fwalk_sglue+0x38>
34190a98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
34190a9c:	3301      	adds	r3, #1
34190a9e:	d003      	beq.n	34190aa8 <_fwalk_sglue+0x38>
34190aa0:	4629      	mov	r1, r5
34190aa2:	4638      	mov	r0, r7
34190aa4:	47c0      	blx	r8
34190aa6:	4306      	orrs	r6, r0
34190aa8:	3568      	adds	r5, #104	@ 0x68
34190aaa:	e7e9      	b.n	34190a80 <_fwalk_sglue+0x10>

34190aac <_puts_r>:
34190aac:	6a03      	ldr	r3, [r0, #32]
34190aae:	b570      	push	{r4, r5, r6, lr}
34190ab0:	4605      	mov	r5, r0
34190ab2:	460e      	mov	r6, r1
34190ab4:	6884      	ldr	r4, [r0, #8]
34190ab6:	b90b      	cbnz	r3, 34190abc <_puts_r+0x10>
34190ab8:	f7ff ffc2 	bl	34190a40 <__sinit>
34190abc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34190abe:	07db      	lsls	r3, r3, #31
34190ac0:	d405      	bmi.n	34190ace <_puts_r+0x22>
34190ac2:	89a3      	ldrh	r3, [r4, #12]
34190ac4:	0598      	lsls	r0, r3, #22
34190ac6:	d402      	bmi.n	34190ace <_puts_r+0x22>
34190ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34190aca:	f000 f99e 	bl	34190e0a <__retarget_lock_acquire_recursive>
34190ace:	89a3      	ldrh	r3, [r4, #12]
34190ad0:	0719      	lsls	r1, r3, #28
34190ad2:	d502      	bpl.n	34190ada <_puts_r+0x2e>
34190ad4:	6923      	ldr	r3, [r4, #16]
34190ad6:	2b00      	cmp	r3, #0
34190ad8:	d135      	bne.n	34190b46 <_puts_r+0x9a>
34190ada:	4621      	mov	r1, r4
34190adc:	4628      	mov	r0, r5
34190ade:	f000 f8c5 	bl	34190c6c <__swsetup_r>
34190ae2:	b380      	cbz	r0, 34190b46 <_puts_r+0x9a>
34190ae4:	f04f 35ff 	mov.w	r5, #4294967295
34190ae8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34190aea:	07da      	lsls	r2, r3, #31
34190aec:	d405      	bmi.n	34190afa <_puts_r+0x4e>
34190aee:	89a3      	ldrh	r3, [r4, #12]
34190af0:	059b      	lsls	r3, r3, #22
34190af2:	d402      	bmi.n	34190afa <_puts_r+0x4e>
34190af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34190af6:	f000 f989 	bl	34190e0c <__retarget_lock_release_recursive>
34190afa:	4628      	mov	r0, r5
34190afc:	bd70      	pop	{r4, r5, r6, pc}
34190afe:	2b00      	cmp	r3, #0
34190b00:	da04      	bge.n	34190b0c <_puts_r+0x60>
34190b02:	69a2      	ldr	r2, [r4, #24]
34190b04:	429a      	cmp	r2, r3
34190b06:	dc17      	bgt.n	34190b38 <_puts_r+0x8c>
34190b08:	290a      	cmp	r1, #10
34190b0a:	d015      	beq.n	34190b38 <_puts_r+0x8c>
34190b0c:	6823      	ldr	r3, [r4, #0]
34190b0e:	1c5a      	adds	r2, r3, #1
34190b10:	6022      	str	r2, [r4, #0]
34190b12:	7019      	strb	r1, [r3, #0]
34190b14:	68a3      	ldr	r3, [r4, #8]
34190b16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
34190b1a:	3b01      	subs	r3, #1
34190b1c:	60a3      	str	r3, [r4, #8]
34190b1e:	2900      	cmp	r1, #0
34190b20:	d1ed      	bne.n	34190afe <_puts_r+0x52>
34190b22:	2b00      	cmp	r3, #0
34190b24:	da11      	bge.n	34190b4a <_puts_r+0x9e>
34190b26:	4622      	mov	r2, r4
34190b28:	210a      	movs	r1, #10
34190b2a:	4628      	mov	r0, r5
34190b2c:	f000 f85f 	bl	34190bee <__swbuf_r>
34190b30:	3001      	adds	r0, #1
34190b32:	d0d7      	beq.n	34190ae4 <_puts_r+0x38>
34190b34:	250a      	movs	r5, #10
34190b36:	e7d7      	b.n	34190ae8 <_puts_r+0x3c>
34190b38:	4622      	mov	r2, r4
34190b3a:	4628      	mov	r0, r5
34190b3c:	f000 f857 	bl	34190bee <__swbuf_r>
34190b40:	3001      	adds	r0, #1
34190b42:	d1e7      	bne.n	34190b14 <_puts_r+0x68>
34190b44:	e7ce      	b.n	34190ae4 <_puts_r+0x38>
34190b46:	3e01      	subs	r6, #1
34190b48:	e7e4      	b.n	34190b14 <_puts_r+0x68>
34190b4a:	6823      	ldr	r3, [r4, #0]
34190b4c:	1c5a      	adds	r2, r3, #1
34190b4e:	6022      	str	r2, [r4, #0]
34190b50:	220a      	movs	r2, #10
34190b52:	701a      	strb	r2, [r3, #0]
34190b54:	e7ee      	b.n	34190b34 <_puts_r+0x88>
	...

34190b58 <puts>:
34190b58:	4b02      	ldr	r3, [pc, #8]	@ (34190b64 <puts+0xc>)
34190b5a:	4601      	mov	r1, r0
34190b5c:	6818      	ldr	r0, [r3, #0]
34190b5e:	f7ff bfa5 	b.w	34190aac <_puts_r>
34190b62:	bf00      	nop
34190b64:	341c00c4 	.word	0x341c00c4

34190b68 <__sread>:
34190b68:	b510      	push	{r4, lr}
34190b6a:	460c      	mov	r4, r1
34190b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34190b70:	f000 f8fc 	bl	34190d6c <_read_r>
34190b74:	2800      	cmp	r0, #0
34190b76:	bfab      	itete	ge
34190b78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
34190b7a:	89a3      	ldrhlt	r3, [r4, #12]
34190b7c:	181b      	addge	r3, r3, r0
34190b7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
34190b82:	bfac      	ite	ge
34190b84:	6563      	strge	r3, [r4, #84]	@ 0x54
34190b86:	81a3      	strhlt	r3, [r4, #12]
34190b88:	bd10      	pop	{r4, pc}

34190b8a <__swrite>:
34190b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34190b8e:	461f      	mov	r7, r3
34190b90:	898b      	ldrh	r3, [r1, #12]
34190b92:	4605      	mov	r5, r0
34190b94:	460c      	mov	r4, r1
34190b96:	05db      	lsls	r3, r3, #23
34190b98:	4616      	mov	r6, r2
34190b9a:	d505      	bpl.n	34190ba8 <__swrite+0x1e>
34190b9c:	2302      	movs	r3, #2
34190b9e:	2200      	movs	r2, #0
34190ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34190ba4:	f000 f8d0 	bl	34190d48 <_lseek_r>
34190ba8:	89a3      	ldrh	r3, [r4, #12]
34190baa:	4632      	mov	r2, r6
34190bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34190bb0:	4628      	mov	r0, r5
34190bb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
34190bb6:	81a3      	strh	r3, [r4, #12]
34190bb8:	463b      	mov	r3, r7
34190bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
34190bbe:	f000 b8e7 	b.w	34190d90 <_write_r>

34190bc2 <__sseek>:
34190bc2:	b510      	push	{r4, lr}
34190bc4:	460c      	mov	r4, r1
34190bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34190bca:	f000 f8bd 	bl	34190d48 <_lseek_r>
34190bce:	1c43      	adds	r3, r0, #1
34190bd0:	89a3      	ldrh	r3, [r4, #12]
34190bd2:	bf15      	itete	ne
34190bd4:	6560      	strne	r0, [r4, #84]	@ 0x54
34190bd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
34190bda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
34190bde:	81a3      	strheq	r3, [r4, #12]
34190be0:	bf18      	it	ne
34190be2:	81a3      	strhne	r3, [r4, #12]
34190be4:	bd10      	pop	{r4, pc}

34190be6 <__sclose>:
34190be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34190bea:	f000 b89d 	b.w	34190d28 <_close_r>

34190bee <__swbuf_r>:
34190bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34190bf0:	460e      	mov	r6, r1
34190bf2:	4614      	mov	r4, r2
34190bf4:	4605      	mov	r5, r0
34190bf6:	b118      	cbz	r0, 34190c00 <__swbuf_r+0x12>
34190bf8:	6a03      	ldr	r3, [r0, #32]
34190bfa:	b90b      	cbnz	r3, 34190c00 <__swbuf_r+0x12>
34190bfc:	f7ff ff20 	bl	34190a40 <__sinit>
34190c00:	69a3      	ldr	r3, [r4, #24]
34190c02:	60a3      	str	r3, [r4, #8]
34190c04:	89a3      	ldrh	r3, [r4, #12]
34190c06:	071a      	lsls	r2, r3, #28
34190c08:	d501      	bpl.n	34190c0e <__swbuf_r+0x20>
34190c0a:	6923      	ldr	r3, [r4, #16]
34190c0c:	b943      	cbnz	r3, 34190c20 <__swbuf_r+0x32>
34190c0e:	4621      	mov	r1, r4
34190c10:	4628      	mov	r0, r5
34190c12:	f000 f82b 	bl	34190c6c <__swsetup_r>
34190c16:	b118      	cbz	r0, 34190c20 <__swbuf_r+0x32>
34190c18:	f04f 37ff 	mov.w	r7, #4294967295
34190c1c:	4638      	mov	r0, r7
34190c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34190c20:	6823      	ldr	r3, [r4, #0]
34190c22:	b2f6      	uxtb	r6, r6
34190c24:	6922      	ldr	r2, [r4, #16]
34190c26:	4637      	mov	r7, r6
34190c28:	1a98      	subs	r0, r3, r2
34190c2a:	6963      	ldr	r3, [r4, #20]
34190c2c:	4283      	cmp	r3, r0
34190c2e:	dc05      	bgt.n	34190c3c <__swbuf_r+0x4e>
34190c30:	4621      	mov	r1, r4
34190c32:	4628      	mov	r0, r5
34190c34:	f000 fa74 	bl	34191120 <_fflush_r>
34190c38:	2800      	cmp	r0, #0
34190c3a:	d1ed      	bne.n	34190c18 <__swbuf_r+0x2a>
34190c3c:	68a3      	ldr	r3, [r4, #8]
34190c3e:	3b01      	subs	r3, #1
34190c40:	60a3      	str	r3, [r4, #8]
34190c42:	6823      	ldr	r3, [r4, #0]
34190c44:	1c5a      	adds	r2, r3, #1
34190c46:	6022      	str	r2, [r4, #0]
34190c48:	701e      	strb	r6, [r3, #0]
34190c4a:	1c43      	adds	r3, r0, #1
34190c4c:	6962      	ldr	r2, [r4, #20]
34190c4e:	429a      	cmp	r2, r3
34190c50:	d004      	beq.n	34190c5c <__swbuf_r+0x6e>
34190c52:	89a3      	ldrh	r3, [r4, #12]
34190c54:	07db      	lsls	r3, r3, #31
34190c56:	d5e1      	bpl.n	34190c1c <__swbuf_r+0x2e>
34190c58:	2e0a      	cmp	r6, #10
34190c5a:	d1df      	bne.n	34190c1c <__swbuf_r+0x2e>
34190c5c:	4621      	mov	r1, r4
34190c5e:	4628      	mov	r0, r5
34190c60:	f000 fa5e 	bl	34191120 <_fflush_r>
34190c64:	2800      	cmp	r0, #0
34190c66:	d0d9      	beq.n	34190c1c <__swbuf_r+0x2e>
34190c68:	e7d6      	b.n	34190c18 <__swbuf_r+0x2a>
	...

34190c6c <__swsetup_r>:
34190c6c:	b538      	push	{r3, r4, r5, lr}
34190c6e:	4b29      	ldr	r3, [pc, #164]	@ (34190d14 <__swsetup_r+0xa8>)
34190c70:	4605      	mov	r5, r0
34190c72:	460c      	mov	r4, r1
34190c74:	6818      	ldr	r0, [r3, #0]
34190c76:	b118      	cbz	r0, 34190c80 <__swsetup_r+0x14>
34190c78:	6a03      	ldr	r3, [r0, #32]
34190c7a:	b90b      	cbnz	r3, 34190c80 <__swsetup_r+0x14>
34190c7c:	f7ff fee0 	bl	34190a40 <__sinit>
34190c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34190c84:	0719      	lsls	r1, r3, #28
34190c86:	d422      	bmi.n	34190cce <__swsetup_r+0x62>
34190c88:	06da      	lsls	r2, r3, #27
34190c8a:	d407      	bmi.n	34190c9c <__swsetup_r+0x30>
34190c8c:	2209      	movs	r2, #9
34190c8e:	602a      	str	r2, [r5, #0]
34190c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34190c94:	f04f 30ff 	mov.w	r0, #4294967295
34190c98:	81a3      	strh	r3, [r4, #12]
34190c9a:	e033      	b.n	34190d04 <__swsetup_r+0x98>
34190c9c:	0758      	lsls	r0, r3, #29
34190c9e:	d512      	bpl.n	34190cc6 <__swsetup_r+0x5a>
34190ca0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
34190ca2:	b141      	cbz	r1, 34190cb6 <__swsetup_r+0x4a>
34190ca4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
34190ca8:	4299      	cmp	r1, r3
34190caa:	d002      	beq.n	34190cb2 <__swsetup_r+0x46>
34190cac:	4628      	mov	r0, r5
34190cae:	f000 f8bb 	bl	34190e28 <_free_r>
34190cb2:	2300      	movs	r3, #0
34190cb4:	6363      	str	r3, [r4, #52]	@ 0x34
34190cb6:	89a3      	ldrh	r3, [r4, #12]
34190cb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
34190cbc:	81a3      	strh	r3, [r4, #12]
34190cbe:	2300      	movs	r3, #0
34190cc0:	6063      	str	r3, [r4, #4]
34190cc2:	6923      	ldr	r3, [r4, #16]
34190cc4:	6023      	str	r3, [r4, #0]
34190cc6:	89a3      	ldrh	r3, [r4, #12]
34190cc8:	f043 0308 	orr.w	r3, r3, #8
34190ccc:	81a3      	strh	r3, [r4, #12]
34190cce:	6923      	ldr	r3, [r4, #16]
34190cd0:	b94b      	cbnz	r3, 34190ce6 <__swsetup_r+0x7a>
34190cd2:	89a3      	ldrh	r3, [r4, #12]
34190cd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
34190cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34190cdc:	d003      	beq.n	34190ce6 <__swsetup_r+0x7a>
34190cde:	4621      	mov	r1, r4
34190ce0:	4628      	mov	r0, r5
34190ce2:	f000 fa6a 	bl	341911ba <__smakebuf_r>
34190ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34190cea:	f013 0201 	ands.w	r2, r3, #1
34190cee:	d00a      	beq.n	34190d06 <__swsetup_r+0x9a>
34190cf0:	2200      	movs	r2, #0
34190cf2:	60a2      	str	r2, [r4, #8]
34190cf4:	6962      	ldr	r2, [r4, #20]
34190cf6:	4252      	negs	r2, r2
34190cf8:	61a2      	str	r2, [r4, #24]
34190cfa:	6922      	ldr	r2, [r4, #16]
34190cfc:	b942      	cbnz	r2, 34190d10 <__swsetup_r+0xa4>
34190cfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
34190d02:	d1c5      	bne.n	34190c90 <__swsetup_r+0x24>
34190d04:	bd38      	pop	{r3, r4, r5, pc}
34190d06:	0799      	lsls	r1, r3, #30
34190d08:	bf58      	it	pl
34190d0a:	6962      	ldrpl	r2, [r4, #20]
34190d0c:	60a2      	str	r2, [r4, #8]
34190d0e:	e7f4      	b.n	34190cfa <__swsetup_r+0x8e>
34190d10:	2000      	movs	r0, #0
34190d12:	e7f7      	b.n	34190d04 <__swsetup_r+0x98>
34190d14:	341c00c4 	.word	0x341c00c4

34190d18 <memset>:
34190d18:	4402      	add	r2, r0
34190d1a:	4603      	mov	r3, r0
34190d1c:	4293      	cmp	r3, r2
34190d1e:	d100      	bne.n	34190d22 <memset+0xa>
34190d20:	4770      	bx	lr
34190d22:	f803 1b01 	strb.w	r1, [r3], #1
34190d26:	e7f9      	b.n	34190d1c <memset+0x4>

34190d28 <_close_r>:
34190d28:	b538      	push	{r3, r4, r5, lr}
34190d2a:	2300      	movs	r3, #0
34190d2c:	4d05      	ldr	r5, [pc, #20]	@ (34190d44 <_close_r+0x1c>)
34190d2e:	4604      	mov	r4, r0
34190d30:	4608      	mov	r0, r1
34190d32:	602b      	str	r3, [r5, #0]
34190d34:	f7f0 f990 	bl	34181058 <_close>
34190d38:	1c43      	adds	r3, r0, #1
34190d3a:	d102      	bne.n	34190d42 <_close_r+0x1a>
34190d3c:	682b      	ldr	r3, [r5, #0]
34190d3e:	b103      	cbz	r3, 34190d42 <_close_r+0x1a>
34190d40:	6023      	str	r3, [r4, #0]
34190d42:	bd38      	pop	{r3, r4, r5, pc}
34190d44:	341c0564 	.word	0x341c0564

34190d48 <_lseek_r>:
34190d48:	b538      	push	{r3, r4, r5, lr}
34190d4a:	4604      	mov	r4, r0
34190d4c:	4d06      	ldr	r5, [pc, #24]	@ (34190d68 <_lseek_r+0x20>)
34190d4e:	4608      	mov	r0, r1
34190d50:	4611      	mov	r1, r2
34190d52:	2200      	movs	r2, #0
34190d54:	602a      	str	r2, [r5, #0]
34190d56:	461a      	mov	r2, r3
34190d58:	f7f0 f9a5 	bl	341810a6 <_lseek>
34190d5c:	1c43      	adds	r3, r0, #1
34190d5e:	d102      	bne.n	34190d66 <_lseek_r+0x1e>
34190d60:	682b      	ldr	r3, [r5, #0]
34190d62:	b103      	cbz	r3, 34190d66 <_lseek_r+0x1e>
34190d64:	6023      	str	r3, [r4, #0]
34190d66:	bd38      	pop	{r3, r4, r5, pc}
34190d68:	341c0564 	.word	0x341c0564

34190d6c <_read_r>:
34190d6c:	b538      	push	{r3, r4, r5, lr}
34190d6e:	4604      	mov	r4, r0
34190d70:	4d06      	ldr	r5, [pc, #24]	@ (34190d8c <_read_r+0x20>)
34190d72:	4608      	mov	r0, r1
34190d74:	4611      	mov	r1, r2
34190d76:	2200      	movs	r2, #0
34190d78:	602a      	str	r2, [r5, #0]
34190d7a:	461a      	mov	r2, r3
34190d7c:	f7f0 f933 	bl	34180fe6 <_read>
34190d80:	1c43      	adds	r3, r0, #1
34190d82:	d102      	bne.n	34190d8a <_read_r+0x1e>
34190d84:	682b      	ldr	r3, [r5, #0]
34190d86:	b103      	cbz	r3, 34190d8a <_read_r+0x1e>
34190d88:	6023      	str	r3, [r4, #0]
34190d8a:	bd38      	pop	{r3, r4, r5, pc}
34190d8c:	341c0564 	.word	0x341c0564

34190d90 <_write_r>:
34190d90:	b538      	push	{r3, r4, r5, lr}
34190d92:	4604      	mov	r4, r0
34190d94:	4d06      	ldr	r5, [pc, #24]	@ (34190db0 <_write_r+0x20>)
34190d96:	4608      	mov	r0, r1
34190d98:	4611      	mov	r1, r2
34190d9a:	2200      	movs	r2, #0
34190d9c:	602a      	str	r2, [r5, #0]
34190d9e:	461a      	mov	r2, r3
34190da0:	f7f0 f93e 	bl	34181020 <_write>
34190da4:	1c43      	adds	r3, r0, #1
34190da6:	d102      	bne.n	34190dae <_write_r+0x1e>
34190da8:	682b      	ldr	r3, [r5, #0]
34190daa:	b103      	cbz	r3, 34190dae <_write_r+0x1e>
34190dac:	6023      	str	r3, [r4, #0]
34190dae:	bd38      	pop	{r3, r4, r5, pc}
34190db0:	341c0564 	.word	0x341c0564

34190db4 <__errno>:
34190db4:	4b01      	ldr	r3, [pc, #4]	@ (34190dbc <__errno+0x8>)
34190db6:	6818      	ldr	r0, [r3, #0]
34190db8:	4770      	bx	lr
34190dba:	bf00      	nop
34190dbc:	341c00c4 	.word	0x341c00c4

34190dc0 <__libc_init_array>:
34190dc0:	b570      	push	{r4, r5, r6, lr}
34190dc2:	4d0d      	ldr	r5, [pc, #52]	@ (34190df8 <__libc_init_array+0x38>)
34190dc4:	2600      	movs	r6, #0
34190dc6:	4c0d      	ldr	r4, [pc, #52]	@ (34190dfc <__libc_init_array+0x3c>)
34190dc8:	1b64      	subs	r4, r4, r5
34190dca:	10a4      	asrs	r4, r4, #2
34190dcc:	42a6      	cmp	r6, r4
34190dce:	d109      	bne.n	34190de4 <__libc_init_array+0x24>
34190dd0:	4d0b      	ldr	r5, [pc, #44]	@ (34190e00 <__libc_init_array+0x40>)
34190dd2:	2600      	movs	r6, #0
34190dd4:	4c0b      	ldr	r4, [pc, #44]	@ (34190e04 <__libc_init_array+0x44>)
34190dd6:	f000 fa5f 	bl	34191298 <_init>
34190dda:	1b64      	subs	r4, r4, r5
34190ddc:	10a4      	asrs	r4, r4, #2
34190dde:	42a6      	cmp	r6, r4
34190de0:	d105      	bne.n	34190dee <__libc_init_array+0x2e>
34190de2:	bd70      	pop	{r4, r5, r6, pc}
34190de4:	f855 3b04 	ldr.w	r3, [r5], #4
34190de8:	3601      	adds	r6, #1
34190dea:	4798      	blx	r3
34190dec:	e7ee      	b.n	34190dcc <__libc_init_array+0xc>
34190dee:	f855 3b04 	ldr.w	r3, [r5], #4
34190df2:	3601      	adds	r6, #1
34190df4:	4798      	blx	r3
34190df6:	e7f2      	b.n	34190dde <__libc_init_array+0x1e>
34190df8:	34191344 	.word	0x34191344
34190dfc:	34191344 	.word	0x34191344
34190e00:	34191344 	.word	0x34191344
34190e04:	34191348 	.word	0x34191348

34190e08 <__retarget_lock_init_recursive>:
34190e08:	4770      	bx	lr

34190e0a <__retarget_lock_acquire_recursive>:
34190e0a:	4770      	bx	lr

34190e0c <__retarget_lock_release_recursive>:
34190e0c:	4770      	bx	lr

34190e0e <memcpy>:
34190e0e:	440a      	add	r2, r1
34190e10:	1e43      	subs	r3, r0, #1
34190e12:	4291      	cmp	r1, r2
34190e14:	d100      	bne.n	34190e18 <memcpy+0xa>
34190e16:	4770      	bx	lr
34190e18:	b510      	push	{r4, lr}
34190e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
34190e1e:	4291      	cmp	r1, r2
34190e20:	f803 4f01 	strb.w	r4, [r3, #1]!
34190e24:	d1f9      	bne.n	34190e1a <memcpy+0xc>
34190e26:	bd10      	pop	{r4, pc}

34190e28 <_free_r>:
34190e28:	b538      	push	{r3, r4, r5, lr}
34190e2a:	4605      	mov	r5, r0
34190e2c:	2900      	cmp	r1, #0
34190e2e:	d041      	beq.n	34190eb4 <_free_r+0x8c>
34190e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
34190e34:	1f0c      	subs	r4, r1, #4
34190e36:	2b00      	cmp	r3, #0
34190e38:	bfb8      	it	lt
34190e3a:	18e4      	addlt	r4, r4, r3
34190e3c:	f000 f8e0 	bl	34191000 <__malloc_lock>
34190e40:	4a1d      	ldr	r2, [pc, #116]	@ (34190eb8 <_free_r+0x90>)
34190e42:	6813      	ldr	r3, [r2, #0]
34190e44:	b933      	cbnz	r3, 34190e54 <_free_r+0x2c>
34190e46:	6063      	str	r3, [r4, #4]
34190e48:	6014      	str	r4, [r2, #0]
34190e4a:	4628      	mov	r0, r5
34190e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
34190e50:	f000 b8dc 	b.w	3419100c <__malloc_unlock>
34190e54:	42a3      	cmp	r3, r4
34190e56:	d908      	bls.n	34190e6a <_free_r+0x42>
34190e58:	6820      	ldr	r0, [r4, #0]
34190e5a:	1821      	adds	r1, r4, r0
34190e5c:	428b      	cmp	r3, r1
34190e5e:	bf01      	itttt	eq
34190e60:	6819      	ldreq	r1, [r3, #0]
34190e62:	685b      	ldreq	r3, [r3, #4]
34190e64:	1809      	addeq	r1, r1, r0
34190e66:	6021      	streq	r1, [r4, #0]
34190e68:	e7ed      	b.n	34190e46 <_free_r+0x1e>
34190e6a:	461a      	mov	r2, r3
34190e6c:	685b      	ldr	r3, [r3, #4]
34190e6e:	b10b      	cbz	r3, 34190e74 <_free_r+0x4c>
34190e70:	42a3      	cmp	r3, r4
34190e72:	d9fa      	bls.n	34190e6a <_free_r+0x42>
34190e74:	6811      	ldr	r1, [r2, #0]
34190e76:	1850      	adds	r0, r2, r1
34190e78:	42a0      	cmp	r0, r4
34190e7a:	d10b      	bne.n	34190e94 <_free_r+0x6c>
34190e7c:	6820      	ldr	r0, [r4, #0]
34190e7e:	4401      	add	r1, r0
34190e80:	1850      	adds	r0, r2, r1
34190e82:	6011      	str	r1, [r2, #0]
34190e84:	4283      	cmp	r3, r0
34190e86:	d1e0      	bne.n	34190e4a <_free_r+0x22>
34190e88:	6818      	ldr	r0, [r3, #0]
34190e8a:	685b      	ldr	r3, [r3, #4]
34190e8c:	4408      	add	r0, r1
34190e8e:	6053      	str	r3, [r2, #4]
34190e90:	6010      	str	r0, [r2, #0]
34190e92:	e7da      	b.n	34190e4a <_free_r+0x22>
34190e94:	d902      	bls.n	34190e9c <_free_r+0x74>
34190e96:	230c      	movs	r3, #12
34190e98:	602b      	str	r3, [r5, #0]
34190e9a:	e7d6      	b.n	34190e4a <_free_r+0x22>
34190e9c:	6820      	ldr	r0, [r4, #0]
34190e9e:	1821      	adds	r1, r4, r0
34190ea0:	428b      	cmp	r3, r1
34190ea2:	bf02      	ittt	eq
34190ea4:	6819      	ldreq	r1, [r3, #0]
34190ea6:	685b      	ldreq	r3, [r3, #4]
34190ea8:	1809      	addeq	r1, r1, r0
34190eaa:	6063      	str	r3, [r4, #4]
34190eac:	bf08      	it	eq
34190eae:	6021      	streq	r1, [r4, #0]
34190eb0:	6054      	str	r4, [r2, #4]
34190eb2:	e7ca      	b.n	34190e4a <_free_r+0x22>
34190eb4:	bd38      	pop	{r3, r4, r5, pc}
34190eb6:	bf00      	nop
34190eb8:	341c0570 	.word	0x341c0570

34190ebc <sbrk_aligned>:
34190ebc:	b570      	push	{r4, r5, r6, lr}
34190ebe:	4e0f      	ldr	r6, [pc, #60]	@ (34190efc <sbrk_aligned+0x40>)
34190ec0:	460c      	mov	r4, r1
34190ec2:	4605      	mov	r5, r0
34190ec4:	6831      	ldr	r1, [r6, #0]
34190ec6:	b911      	cbnz	r1, 34190ece <sbrk_aligned+0x12>
34190ec8:	f000 f9d6 	bl	34191278 <_sbrk_r>
34190ecc:	6030      	str	r0, [r6, #0]
34190ece:	4621      	mov	r1, r4
34190ed0:	4628      	mov	r0, r5
34190ed2:	f000 f9d1 	bl	34191278 <_sbrk_r>
34190ed6:	1c43      	adds	r3, r0, #1
34190ed8:	d103      	bne.n	34190ee2 <sbrk_aligned+0x26>
34190eda:	f04f 34ff 	mov.w	r4, #4294967295
34190ede:	4620      	mov	r0, r4
34190ee0:	bd70      	pop	{r4, r5, r6, pc}
34190ee2:	1cc4      	adds	r4, r0, #3
34190ee4:	f024 0403 	bic.w	r4, r4, #3
34190ee8:	42a0      	cmp	r0, r4
34190eea:	d0f8      	beq.n	34190ede <sbrk_aligned+0x22>
34190eec:	1a21      	subs	r1, r4, r0
34190eee:	4628      	mov	r0, r5
34190ef0:	f000 f9c2 	bl	34191278 <_sbrk_r>
34190ef4:	3001      	adds	r0, #1
34190ef6:	d1f2      	bne.n	34190ede <sbrk_aligned+0x22>
34190ef8:	e7ef      	b.n	34190eda <sbrk_aligned+0x1e>
34190efa:	bf00      	nop
34190efc:	341c056c 	.word	0x341c056c

34190f00 <_malloc_r>:
34190f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34190f04:	1ccd      	adds	r5, r1, #3
34190f06:	4606      	mov	r6, r0
34190f08:	f025 0503 	bic.w	r5, r5, #3
34190f0c:	3508      	adds	r5, #8
34190f0e:	2d0c      	cmp	r5, #12
34190f10:	bf38      	it	cc
34190f12:	250c      	movcc	r5, #12
34190f14:	2d00      	cmp	r5, #0
34190f16:	db01      	blt.n	34190f1c <_malloc_r+0x1c>
34190f18:	42a9      	cmp	r1, r5
34190f1a:	d904      	bls.n	34190f26 <_malloc_r+0x26>
34190f1c:	230c      	movs	r3, #12
34190f1e:	6033      	str	r3, [r6, #0]
34190f20:	2000      	movs	r0, #0
34190f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34190f26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 34190ffc <_malloc_r+0xfc>
34190f2a:	f000 f869 	bl	34191000 <__malloc_lock>
34190f2e:	f8d8 3000 	ldr.w	r3, [r8]
34190f32:	461c      	mov	r4, r3
34190f34:	bb44      	cbnz	r4, 34190f88 <_malloc_r+0x88>
34190f36:	4629      	mov	r1, r5
34190f38:	4630      	mov	r0, r6
34190f3a:	f7ff ffbf 	bl	34190ebc <sbrk_aligned>
34190f3e:	1c43      	adds	r3, r0, #1
34190f40:	4604      	mov	r4, r0
34190f42:	d158      	bne.n	34190ff6 <_malloc_r+0xf6>
34190f44:	f8d8 4000 	ldr.w	r4, [r8]
34190f48:	4627      	mov	r7, r4
34190f4a:	2f00      	cmp	r7, #0
34190f4c:	d143      	bne.n	34190fd6 <_malloc_r+0xd6>
34190f4e:	2c00      	cmp	r4, #0
34190f50:	d04b      	beq.n	34190fea <_malloc_r+0xea>
34190f52:	6823      	ldr	r3, [r4, #0]
34190f54:	4639      	mov	r1, r7
34190f56:	4630      	mov	r0, r6
34190f58:	eb04 0903 	add.w	r9, r4, r3
34190f5c:	f000 f98c 	bl	34191278 <_sbrk_r>
34190f60:	4581      	cmp	r9, r0
34190f62:	d142      	bne.n	34190fea <_malloc_r+0xea>
34190f64:	6821      	ldr	r1, [r4, #0]
34190f66:	4630      	mov	r0, r6
34190f68:	1a6d      	subs	r5, r5, r1
34190f6a:	4629      	mov	r1, r5
34190f6c:	f7ff ffa6 	bl	34190ebc <sbrk_aligned>
34190f70:	3001      	adds	r0, #1
34190f72:	d03a      	beq.n	34190fea <_malloc_r+0xea>
34190f74:	6823      	ldr	r3, [r4, #0]
34190f76:	442b      	add	r3, r5
34190f78:	6023      	str	r3, [r4, #0]
34190f7a:	f8d8 3000 	ldr.w	r3, [r8]
34190f7e:	685a      	ldr	r2, [r3, #4]
34190f80:	bb62      	cbnz	r2, 34190fdc <_malloc_r+0xdc>
34190f82:	f8c8 7000 	str.w	r7, [r8]
34190f86:	e00f      	b.n	34190fa8 <_malloc_r+0xa8>
34190f88:	6822      	ldr	r2, [r4, #0]
34190f8a:	1b52      	subs	r2, r2, r5
34190f8c:	d420      	bmi.n	34190fd0 <_malloc_r+0xd0>
34190f8e:	2a0b      	cmp	r2, #11
34190f90:	d917      	bls.n	34190fc2 <_malloc_r+0xc2>
34190f92:	1961      	adds	r1, r4, r5
34190f94:	42a3      	cmp	r3, r4
34190f96:	6025      	str	r5, [r4, #0]
34190f98:	bf18      	it	ne
34190f9a:	6059      	strne	r1, [r3, #4]
34190f9c:	6863      	ldr	r3, [r4, #4]
34190f9e:	bf08      	it	eq
34190fa0:	f8c8 1000 	streq.w	r1, [r8]
34190fa4:	5162      	str	r2, [r4, r5]
34190fa6:	604b      	str	r3, [r1, #4]
34190fa8:	4630      	mov	r0, r6
34190faa:	f000 f82f 	bl	3419100c <__malloc_unlock>
34190fae:	f104 000b 	add.w	r0, r4, #11
34190fb2:	1d23      	adds	r3, r4, #4
34190fb4:	f020 0007 	bic.w	r0, r0, #7
34190fb8:	1ac2      	subs	r2, r0, r3
34190fba:	bf1c      	itt	ne
34190fbc:	1a1b      	subne	r3, r3, r0
34190fbe:	50a3      	strne	r3, [r4, r2]
34190fc0:	e7af      	b.n	34190f22 <_malloc_r+0x22>
34190fc2:	6862      	ldr	r2, [r4, #4]
34190fc4:	42a3      	cmp	r3, r4
34190fc6:	bf0c      	ite	eq
34190fc8:	f8c8 2000 	streq.w	r2, [r8]
34190fcc:	605a      	strne	r2, [r3, #4]
34190fce:	e7eb      	b.n	34190fa8 <_malloc_r+0xa8>
34190fd0:	4623      	mov	r3, r4
34190fd2:	6864      	ldr	r4, [r4, #4]
34190fd4:	e7ae      	b.n	34190f34 <_malloc_r+0x34>
34190fd6:	463c      	mov	r4, r7
34190fd8:	687f      	ldr	r7, [r7, #4]
34190fda:	e7b6      	b.n	34190f4a <_malloc_r+0x4a>
34190fdc:	461a      	mov	r2, r3
34190fde:	685b      	ldr	r3, [r3, #4]
34190fe0:	42a3      	cmp	r3, r4
34190fe2:	d1fb      	bne.n	34190fdc <_malloc_r+0xdc>
34190fe4:	2300      	movs	r3, #0
34190fe6:	6053      	str	r3, [r2, #4]
34190fe8:	e7de      	b.n	34190fa8 <_malloc_r+0xa8>
34190fea:	230c      	movs	r3, #12
34190fec:	4630      	mov	r0, r6
34190fee:	6033      	str	r3, [r6, #0]
34190ff0:	f000 f80c 	bl	3419100c <__malloc_unlock>
34190ff4:	e794      	b.n	34190f20 <_malloc_r+0x20>
34190ff6:	6005      	str	r5, [r0, #0]
34190ff8:	e7d6      	b.n	34190fa8 <_malloc_r+0xa8>
34190ffa:	bf00      	nop
34190ffc:	341c0570 	.word	0x341c0570

34191000 <__malloc_lock>:
34191000:	4801      	ldr	r0, [pc, #4]	@ (34191008 <__malloc_lock+0x8>)
34191002:	f7ff bf02 	b.w	34190e0a <__retarget_lock_acquire_recursive>
34191006:	bf00      	nop
34191008:	341c0568 	.word	0x341c0568

3419100c <__malloc_unlock>:
3419100c:	4801      	ldr	r0, [pc, #4]	@ (34191014 <__malloc_unlock+0x8>)
3419100e:	f7ff befd 	b.w	34190e0c <__retarget_lock_release_recursive>
34191012:	bf00      	nop
34191014:	341c0568 	.word	0x341c0568

34191018 <__sflush_r>:
34191018:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3419101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34191020:	0716      	lsls	r6, r2, #28
34191022:	4605      	mov	r5, r0
34191024:	460c      	mov	r4, r1
34191026:	d454      	bmi.n	341910d2 <__sflush_r+0xba>
34191028:	684b      	ldr	r3, [r1, #4]
3419102a:	2b00      	cmp	r3, #0
3419102c:	dc02      	bgt.n	34191034 <__sflush_r+0x1c>
3419102e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
34191030:	2b00      	cmp	r3, #0
34191032:	dd48      	ble.n	341910c6 <__sflush_r+0xae>
34191034:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
34191036:	2e00      	cmp	r6, #0
34191038:	d045      	beq.n	341910c6 <__sflush_r+0xae>
3419103a:	2300      	movs	r3, #0
3419103c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
34191040:	682f      	ldr	r7, [r5, #0]
34191042:	6a21      	ldr	r1, [r4, #32]
34191044:	602b      	str	r3, [r5, #0]
34191046:	d030      	beq.n	341910aa <__sflush_r+0x92>
34191048:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3419104a:	89a3      	ldrh	r3, [r4, #12]
3419104c:	0759      	lsls	r1, r3, #29
3419104e:	d505      	bpl.n	3419105c <__sflush_r+0x44>
34191050:	6863      	ldr	r3, [r4, #4]
34191052:	1ad2      	subs	r2, r2, r3
34191054:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34191056:	b10b      	cbz	r3, 3419105c <__sflush_r+0x44>
34191058:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3419105a:	1ad2      	subs	r2, r2, r3
3419105c:	2300      	movs	r3, #0
3419105e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
34191060:	6a21      	ldr	r1, [r4, #32]
34191062:	4628      	mov	r0, r5
34191064:	47b0      	blx	r6
34191066:	1c43      	adds	r3, r0, #1
34191068:	89a3      	ldrh	r3, [r4, #12]
3419106a:	d106      	bne.n	3419107a <__sflush_r+0x62>
3419106c:	6829      	ldr	r1, [r5, #0]
3419106e:	291d      	cmp	r1, #29
34191070:	d82b      	bhi.n	341910ca <__sflush_r+0xb2>
34191072:	4a2a      	ldr	r2, [pc, #168]	@ (3419111c <__sflush_r+0x104>)
34191074:	40ca      	lsrs	r2, r1
34191076:	07d6      	lsls	r6, r2, #31
34191078:	d527      	bpl.n	341910ca <__sflush_r+0xb2>
3419107a:	2200      	movs	r2, #0
3419107c:	04d9      	lsls	r1, r3, #19
3419107e:	6062      	str	r2, [r4, #4]
34191080:	6922      	ldr	r2, [r4, #16]
34191082:	6022      	str	r2, [r4, #0]
34191084:	d504      	bpl.n	34191090 <__sflush_r+0x78>
34191086:	1c42      	adds	r2, r0, #1
34191088:	d101      	bne.n	3419108e <__sflush_r+0x76>
3419108a:	682b      	ldr	r3, [r5, #0]
3419108c:	b903      	cbnz	r3, 34191090 <__sflush_r+0x78>
3419108e:	6560      	str	r0, [r4, #84]	@ 0x54
34191090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
34191092:	602f      	str	r7, [r5, #0]
34191094:	b1b9      	cbz	r1, 341910c6 <__sflush_r+0xae>
34191096:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3419109a:	4299      	cmp	r1, r3
3419109c:	d002      	beq.n	341910a4 <__sflush_r+0x8c>
3419109e:	4628      	mov	r0, r5
341910a0:	f7ff fec2 	bl	34190e28 <_free_r>
341910a4:	2300      	movs	r3, #0
341910a6:	6363      	str	r3, [r4, #52]	@ 0x34
341910a8:	e00d      	b.n	341910c6 <__sflush_r+0xae>
341910aa:	2301      	movs	r3, #1
341910ac:	4628      	mov	r0, r5
341910ae:	47b0      	blx	r6
341910b0:	4602      	mov	r2, r0
341910b2:	1c50      	adds	r0, r2, #1
341910b4:	d1c9      	bne.n	3419104a <__sflush_r+0x32>
341910b6:	682b      	ldr	r3, [r5, #0]
341910b8:	2b00      	cmp	r3, #0
341910ba:	d0c6      	beq.n	3419104a <__sflush_r+0x32>
341910bc:	2b1d      	cmp	r3, #29
341910be:	d001      	beq.n	341910c4 <__sflush_r+0xac>
341910c0:	2b16      	cmp	r3, #22
341910c2:	d11d      	bne.n	34191100 <__sflush_r+0xe8>
341910c4:	602f      	str	r7, [r5, #0]
341910c6:	2000      	movs	r0, #0
341910c8:	e021      	b.n	3419110e <__sflush_r+0xf6>
341910ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
341910ce:	b21b      	sxth	r3, r3
341910d0:	e01a      	b.n	34191108 <__sflush_r+0xf0>
341910d2:	690f      	ldr	r7, [r1, #16]
341910d4:	2f00      	cmp	r7, #0
341910d6:	d0f6      	beq.n	341910c6 <__sflush_r+0xae>
341910d8:	0793      	lsls	r3, r2, #30
341910da:	680e      	ldr	r6, [r1, #0]
341910dc:	600f      	str	r7, [r1, #0]
341910de:	bf0c      	ite	eq
341910e0:	694b      	ldreq	r3, [r1, #20]
341910e2:	2300      	movne	r3, #0
341910e4:	eba6 0807 	sub.w	r8, r6, r7
341910e8:	608b      	str	r3, [r1, #8]
341910ea:	f1b8 0f00 	cmp.w	r8, #0
341910ee:	ddea      	ble.n	341910c6 <__sflush_r+0xae>
341910f0:	4643      	mov	r3, r8
341910f2:	463a      	mov	r2, r7
341910f4:	6a21      	ldr	r1, [r4, #32]
341910f6:	4628      	mov	r0, r5
341910f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
341910fa:	47b0      	blx	r6
341910fc:	2800      	cmp	r0, #0
341910fe:	dc08      	bgt.n	34191112 <__sflush_r+0xfa>
34191100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34191104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34191108:	f04f 30ff 	mov.w	r0, #4294967295
3419110c:	81a3      	strh	r3, [r4, #12]
3419110e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34191112:	4407      	add	r7, r0
34191114:	eba8 0800 	sub.w	r8, r8, r0
34191118:	e7e7      	b.n	341910ea <__sflush_r+0xd2>
3419111a:	bf00      	nop
3419111c:	20400001 	.word	0x20400001

34191120 <_fflush_r>:
34191120:	b538      	push	{r3, r4, r5, lr}
34191122:	690b      	ldr	r3, [r1, #16]
34191124:	4605      	mov	r5, r0
34191126:	460c      	mov	r4, r1
34191128:	b913      	cbnz	r3, 34191130 <_fflush_r+0x10>
3419112a:	2500      	movs	r5, #0
3419112c:	4628      	mov	r0, r5
3419112e:	bd38      	pop	{r3, r4, r5, pc}
34191130:	b118      	cbz	r0, 3419113a <_fflush_r+0x1a>
34191132:	6a03      	ldr	r3, [r0, #32]
34191134:	b90b      	cbnz	r3, 3419113a <_fflush_r+0x1a>
34191136:	f7ff fc83 	bl	34190a40 <__sinit>
3419113a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3419113e:	2b00      	cmp	r3, #0
34191140:	d0f3      	beq.n	3419112a <_fflush_r+0xa>
34191142:	6e62      	ldr	r2, [r4, #100]	@ 0x64
34191144:	07d0      	lsls	r0, r2, #31
34191146:	d404      	bmi.n	34191152 <_fflush_r+0x32>
34191148:	0599      	lsls	r1, r3, #22
3419114a:	d402      	bmi.n	34191152 <_fflush_r+0x32>
3419114c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3419114e:	f7ff fe5c 	bl	34190e0a <__retarget_lock_acquire_recursive>
34191152:	4628      	mov	r0, r5
34191154:	4621      	mov	r1, r4
34191156:	f7ff ff5f 	bl	34191018 <__sflush_r>
3419115a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3419115c:	4605      	mov	r5, r0
3419115e:	07da      	lsls	r2, r3, #31
34191160:	d4e4      	bmi.n	3419112c <_fflush_r+0xc>
34191162:	89a3      	ldrh	r3, [r4, #12]
34191164:	059b      	lsls	r3, r3, #22
34191166:	d4e1      	bmi.n	3419112c <_fflush_r+0xc>
34191168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3419116a:	f7ff fe4f 	bl	34190e0c <__retarget_lock_release_recursive>
3419116e:	e7dd      	b.n	3419112c <_fflush_r+0xc>

34191170 <__swhatbuf_r>:
34191170:	b570      	push	{r4, r5, r6, lr}
34191172:	460c      	mov	r4, r1
34191174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34191178:	b096      	sub	sp, #88	@ 0x58
3419117a:	4615      	mov	r5, r2
3419117c:	2900      	cmp	r1, #0
3419117e:	461e      	mov	r6, r3
34191180:	da0c      	bge.n	3419119c <__swhatbuf_r+0x2c>
34191182:	89a3      	ldrh	r3, [r4, #12]
34191184:	2100      	movs	r1, #0
34191186:	f013 0f80 	tst.w	r3, #128	@ 0x80
3419118a:	bf14      	ite	ne
3419118c:	2340      	movne	r3, #64	@ 0x40
3419118e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
34191192:	2000      	movs	r0, #0
34191194:	6031      	str	r1, [r6, #0]
34191196:	602b      	str	r3, [r5, #0]
34191198:	b016      	add	sp, #88	@ 0x58
3419119a:	bd70      	pop	{r4, r5, r6, pc}
3419119c:	466a      	mov	r2, sp
3419119e:	f000 f849 	bl	34191234 <_fstat_r>
341911a2:	2800      	cmp	r0, #0
341911a4:	dbed      	blt.n	34191182 <__swhatbuf_r+0x12>
341911a6:	9901      	ldr	r1, [sp, #4]
341911a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
341911ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
341911b0:	4259      	negs	r1, r3
341911b2:	4159      	adcs	r1, r3
341911b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
341911b8:	e7eb      	b.n	34191192 <__swhatbuf_r+0x22>

341911ba <__smakebuf_r>:
341911ba:	898b      	ldrh	r3, [r1, #12]
341911bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
341911be:	079d      	lsls	r5, r3, #30
341911c0:	4606      	mov	r6, r0
341911c2:	460c      	mov	r4, r1
341911c4:	d507      	bpl.n	341911d6 <__smakebuf_r+0x1c>
341911c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
341911ca:	6023      	str	r3, [r4, #0]
341911cc:	6123      	str	r3, [r4, #16]
341911ce:	2301      	movs	r3, #1
341911d0:	6163      	str	r3, [r4, #20]
341911d2:	b003      	add	sp, #12
341911d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
341911d6:	ab01      	add	r3, sp, #4
341911d8:	466a      	mov	r2, sp
341911da:	f7ff ffc9 	bl	34191170 <__swhatbuf_r>
341911de:	9f00      	ldr	r7, [sp, #0]
341911e0:	4605      	mov	r5, r0
341911e2:	4630      	mov	r0, r6
341911e4:	4639      	mov	r1, r7
341911e6:	f7ff fe8b 	bl	34190f00 <_malloc_r>
341911ea:	b948      	cbnz	r0, 34191200 <__smakebuf_r+0x46>
341911ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
341911f0:	059a      	lsls	r2, r3, #22
341911f2:	d4ee      	bmi.n	341911d2 <__smakebuf_r+0x18>
341911f4:	f023 0303 	bic.w	r3, r3, #3
341911f8:	f043 0302 	orr.w	r3, r3, #2
341911fc:	81a3      	strh	r3, [r4, #12]
341911fe:	e7e2      	b.n	341911c6 <__smakebuf_r+0xc>
34191200:	89a3      	ldrh	r3, [r4, #12]
34191202:	6020      	str	r0, [r4, #0]
34191204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
34191208:	81a3      	strh	r3, [r4, #12]
3419120a:	9b01      	ldr	r3, [sp, #4]
3419120c:	e9c4 0704 	strd	r0, r7, [r4, #16]
34191210:	b15b      	cbz	r3, 3419122a <__smakebuf_r+0x70>
34191212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34191216:	4630      	mov	r0, r6
34191218:	f000 f81e 	bl	34191258 <_isatty_r>
3419121c:	b128      	cbz	r0, 3419122a <__smakebuf_r+0x70>
3419121e:	89a3      	ldrh	r3, [r4, #12]
34191220:	f023 0303 	bic.w	r3, r3, #3
34191224:	f043 0301 	orr.w	r3, r3, #1
34191228:	81a3      	strh	r3, [r4, #12]
3419122a:	89a3      	ldrh	r3, [r4, #12]
3419122c:	431d      	orrs	r5, r3
3419122e:	81a5      	strh	r5, [r4, #12]
34191230:	e7cf      	b.n	341911d2 <__smakebuf_r+0x18>
	...

34191234 <_fstat_r>:
34191234:	b538      	push	{r3, r4, r5, lr}
34191236:	2300      	movs	r3, #0
34191238:	4d06      	ldr	r5, [pc, #24]	@ (34191254 <_fstat_r+0x20>)
3419123a:	4604      	mov	r4, r0
3419123c:	4608      	mov	r0, r1
3419123e:	4611      	mov	r1, r2
34191240:	602b      	str	r3, [r5, #0]
34191242:	f7ef ff15 	bl	34181070 <_fstat>
34191246:	1c43      	adds	r3, r0, #1
34191248:	d102      	bne.n	34191250 <_fstat_r+0x1c>
3419124a:	682b      	ldr	r3, [r5, #0]
3419124c:	b103      	cbz	r3, 34191250 <_fstat_r+0x1c>
3419124e:	6023      	str	r3, [r4, #0]
34191250:	bd38      	pop	{r3, r4, r5, pc}
34191252:	bf00      	nop
34191254:	341c0564 	.word	0x341c0564

34191258 <_isatty_r>:
34191258:	b538      	push	{r3, r4, r5, lr}
3419125a:	2300      	movs	r3, #0
3419125c:	4d05      	ldr	r5, [pc, #20]	@ (34191274 <_isatty_r+0x1c>)
3419125e:	4604      	mov	r4, r0
34191260:	4608      	mov	r0, r1
34191262:	602b      	str	r3, [r5, #0]
34191264:	f7ef ff14 	bl	34181090 <_isatty>
34191268:	1c43      	adds	r3, r0, #1
3419126a:	d102      	bne.n	34191272 <_isatty_r+0x1a>
3419126c:	682b      	ldr	r3, [r5, #0]
3419126e:	b103      	cbz	r3, 34191272 <_isatty_r+0x1a>
34191270:	6023      	str	r3, [r4, #0]
34191272:	bd38      	pop	{r3, r4, r5, pc}
34191274:	341c0564 	.word	0x341c0564

34191278 <_sbrk_r>:
34191278:	b538      	push	{r3, r4, r5, lr}
3419127a:	2300      	movs	r3, #0
3419127c:	4d05      	ldr	r5, [pc, #20]	@ (34191294 <_sbrk_r+0x1c>)
3419127e:	4604      	mov	r4, r0
34191280:	4608      	mov	r0, r1
34191282:	602b      	str	r3, [r5, #0]
34191284:	f7ef ff1c 	bl	341810c0 <_sbrk>
34191288:	1c43      	adds	r3, r0, #1
3419128a:	d102      	bne.n	34191292 <_sbrk_r+0x1a>
3419128c:	682b      	ldr	r3, [r5, #0]
3419128e:	b103      	cbz	r3, 34191292 <_sbrk_r+0x1a>
34191290:	6023      	str	r3, [r4, #0]
34191292:	bd38      	pop	{r3, r4, r5, pc}
34191294:	341c0564 	.word	0x341c0564

34191298 <_init>:
34191298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3419129a:	bf00      	nop
3419129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
3419129e:	bc08      	pop	{r3}
341912a0:	469e      	mov	lr, r3
341912a2:	4770      	bx	lr

341912a4 <_fini>:
341912a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
341912a6:	bf00      	nop
341912a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
341912aa:	bc08      	pop	{r3}
341912ac:	469e      	mov	lr, r3
341912ae:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

34191460 <SECURE_SystemCoreClockUpdate>:
34191460:	e97f e97f 	sg
34191464:	f7f0 b8d6 	b.w	34181614 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
