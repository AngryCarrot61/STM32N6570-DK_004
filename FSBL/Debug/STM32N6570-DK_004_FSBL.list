
STM32N6570-DK_004_FSBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34180400  34180400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012050  3418074c  3418074c  0000074c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  3419279c  3419279c  0001279c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  341928d4  341928d4  00013a20  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  341928d4  341928d4  000128d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  341928dc  341928dc  00013a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  341928dc  341928dc  000128dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  341928e0  341928e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  341c0000  341928e4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noncacheable 00000004  341c0114  341929f8  00013114  2**0
                  ALLOC
 10 .gnu.sgstubs  00000020  34192a00  34192a00  00013a00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          000004a8  341c0118  341c0118  00014118  2**2
                  ALLOC
 12 ._user_heap_stack 00001500  341c05c0  341c05c0  00014118  2**0
                  ALLOC
 13 .ARM.attributes 0000003a  00000000  00000000  00013a20  2**0
                  CONTENTS, READONLY
 14 .debug_info   000304f8  00000000  00000000  00013a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004786  00000000  00000000  00043f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002528  00000000  00000000  000486d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001c98  00000000  00000000  0004ac00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000075a2  00000000  00000000  0004c898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002c74a  00000000  00000000  00053e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    002346c7  00000000  00000000  00080584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002b4c4b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a5a8  00000000  00000000  002b4c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  002bf238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

3418074c <__do_global_dtors_aux>:
3418074c:	b510      	push	{r4, lr}
3418074e:	4c05      	ldr	r4, [pc, #20]	@ (34180764 <__do_global_dtors_aux+0x18>)
34180750:	7823      	ldrb	r3, [r4, #0]
34180752:	b933      	cbnz	r3, 34180762 <__do_global_dtors_aux+0x16>
34180754:	4b04      	ldr	r3, [pc, #16]	@ (34180768 <__do_global_dtors_aux+0x1c>)
34180756:	b113      	cbz	r3, 3418075e <__do_global_dtors_aux+0x12>
34180758:	4804      	ldr	r0, [pc, #16]	@ (3418076c <__do_global_dtors_aux+0x20>)
3418075a:	f3af 8000 	nop.w
3418075e:	2301      	movs	r3, #1
34180760:	7023      	strb	r3, [r4, #0]
34180762:	bd10      	pop	{r4, pc}
34180764:	341c0118 	.word	0x341c0118
34180768:	00000000 	.word	0x00000000
3418076c:	34192784 	.word	0x34192784

34180770 <frame_dummy>:
34180770:	b508      	push	{r3, lr}
34180772:	4b03      	ldr	r3, [pc, #12]	@ (34180780 <frame_dummy+0x10>)
34180774:	b11b      	cbz	r3, 3418077e <frame_dummy+0xe>
34180776:	4903      	ldr	r1, [pc, #12]	@ (34180784 <frame_dummy+0x14>)
34180778:	4803      	ldr	r0, [pc, #12]	@ (34180788 <frame_dummy+0x18>)
3418077a:	f3af 8000 	nop.w
3418077e:	bd08      	pop	{r3, pc}
34180780:	00000000 	.word	0x00000000
34180784:	341c011c 	.word	0x341c011c
34180788:	34192784 	.word	0x34192784

3418078c <__aeabi_uldivmod>:
3418078c:	b953      	cbnz	r3, 341807a4 <__aeabi_uldivmod+0x18>
3418078e:	b94a      	cbnz	r2, 341807a4 <__aeabi_uldivmod+0x18>
34180790:	2900      	cmp	r1, #0
34180792:	bf08      	it	eq
34180794:	2800      	cmpeq	r0, #0
34180796:	bf1c      	itt	ne
34180798:	f04f 31ff 	movne.w	r1, #4294967295
3418079c:	f04f 30ff 	movne.w	r0, #4294967295
341807a0:	f000 b9b0 	b.w	34180b04 <__aeabi_idiv0>
341807a4:	f1ad 0c08 	sub.w	ip, sp, #8
341807a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
341807ac:	f000 f806 	bl	341807bc <__udivmoddi4>
341807b0:	f8dd e004 	ldr.w	lr, [sp, #4]
341807b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
341807b8:	b004      	add	sp, #16
341807ba:	4770      	bx	lr

341807bc <__udivmoddi4>:
341807bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341807c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
341807c2:	4688      	mov	r8, r1
341807c4:	4604      	mov	r4, r0
341807c6:	468e      	mov	lr, r1
341807c8:	2b00      	cmp	r3, #0
341807ca:	d14a      	bne.n	34180862 <__udivmoddi4+0xa6>
341807cc:	428a      	cmp	r2, r1
341807ce:	4617      	mov	r7, r2
341807d0:	d95f      	bls.n	34180892 <__udivmoddi4+0xd6>
341807d2:	fab2 f682 	clz	r6, r2
341807d6:	b14e      	cbz	r6, 341807ec <__udivmoddi4+0x30>
341807d8:	f1c6 0320 	rsb	r3, r6, #32
341807dc:	fa01 fe06 	lsl.w	lr, r1, r6
341807e0:	40b7      	lsls	r7, r6
341807e2:	40b4      	lsls	r4, r6
341807e4:	fa20 f303 	lsr.w	r3, r0, r3
341807e8:	ea43 0e0e 	orr.w	lr, r3, lr
341807ec:	ea4f 4817 	mov.w	r8, r7, lsr #16
341807f0:	fa1f fc87 	uxth.w	ip, r7
341807f4:	0c23      	lsrs	r3, r4, #16
341807f6:	fbbe f1f8 	udiv	r1, lr, r8
341807fa:	fb08 ee11 	mls	lr, r8, r1, lr
341807fe:	fb01 f20c 	mul.w	r2, r1, ip
34180802:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
34180806:	429a      	cmp	r2, r3
34180808:	d907      	bls.n	3418081a <__udivmoddi4+0x5e>
3418080a:	18fb      	adds	r3, r7, r3
3418080c:	f101 30ff 	add.w	r0, r1, #4294967295
34180810:	d202      	bcs.n	34180818 <__udivmoddi4+0x5c>
34180812:	429a      	cmp	r2, r3
34180814:	f200 8154 	bhi.w	34180ac0 <__udivmoddi4+0x304>
34180818:	4601      	mov	r1, r0
3418081a:	1a9b      	subs	r3, r3, r2
3418081c:	b2a2      	uxth	r2, r4
3418081e:	fbb3 f0f8 	udiv	r0, r3, r8
34180822:	fb08 3310 	mls	r3, r8, r0, r3
34180826:	fb00 fc0c 	mul.w	ip, r0, ip
3418082a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3418082e:	4594      	cmp	ip, r2
34180830:	d90b      	bls.n	3418084a <__udivmoddi4+0x8e>
34180832:	18ba      	adds	r2, r7, r2
34180834:	f100 33ff 	add.w	r3, r0, #4294967295
34180838:	bf2c      	ite	cs
3418083a:	2401      	movcs	r4, #1
3418083c:	2400      	movcc	r4, #0
3418083e:	4594      	cmp	ip, r2
34180840:	d902      	bls.n	34180848 <__udivmoddi4+0x8c>
34180842:	2c00      	cmp	r4, #0
34180844:	f000 813f 	beq.w	34180ac6 <__udivmoddi4+0x30a>
34180848:	4618      	mov	r0, r3
3418084a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
3418084e:	eba2 020c 	sub.w	r2, r2, ip
34180852:	2100      	movs	r1, #0
34180854:	b11d      	cbz	r5, 3418085e <__udivmoddi4+0xa2>
34180856:	40f2      	lsrs	r2, r6
34180858:	2300      	movs	r3, #0
3418085a:	e9c5 2300 	strd	r2, r3, [r5]
3418085e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34180862:	428b      	cmp	r3, r1
34180864:	d905      	bls.n	34180872 <__udivmoddi4+0xb6>
34180866:	b10d      	cbz	r5, 3418086c <__udivmoddi4+0xb0>
34180868:	e9c5 0100 	strd	r0, r1, [r5]
3418086c:	2100      	movs	r1, #0
3418086e:	4608      	mov	r0, r1
34180870:	e7f5      	b.n	3418085e <__udivmoddi4+0xa2>
34180872:	fab3 f183 	clz	r1, r3
34180876:	2900      	cmp	r1, #0
34180878:	d14e      	bne.n	34180918 <__udivmoddi4+0x15c>
3418087a:	4543      	cmp	r3, r8
3418087c:	f0c0 8112 	bcc.w	34180aa4 <__udivmoddi4+0x2e8>
34180880:	4282      	cmp	r2, r0
34180882:	f240 810f 	bls.w	34180aa4 <__udivmoddi4+0x2e8>
34180886:	4608      	mov	r0, r1
34180888:	2d00      	cmp	r5, #0
3418088a:	d0e8      	beq.n	3418085e <__udivmoddi4+0xa2>
3418088c:	e9c5 4e00 	strd	r4, lr, [r5]
34180890:	e7e5      	b.n	3418085e <__udivmoddi4+0xa2>
34180892:	2a00      	cmp	r2, #0
34180894:	f000 80ac 	beq.w	341809f0 <__udivmoddi4+0x234>
34180898:	fab2 f682 	clz	r6, r2
3418089c:	2e00      	cmp	r6, #0
3418089e:	f040 80bb 	bne.w	34180a18 <__udivmoddi4+0x25c>
341808a2:	1a8b      	subs	r3, r1, r2
341808a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
341808a8:	b2bc      	uxth	r4, r7
341808aa:	2101      	movs	r1, #1
341808ac:	0c02      	lsrs	r2, r0, #16
341808ae:	b280      	uxth	r0, r0
341808b0:	fbb3 fcfe 	udiv	ip, r3, lr
341808b4:	fb0e 331c 	mls	r3, lr, ip, r3
341808b8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
341808bc:	fb04 f20c 	mul.w	r2, r4, ip
341808c0:	429a      	cmp	r2, r3
341808c2:	d90e      	bls.n	341808e2 <__udivmoddi4+0x126>
341808c4:	18fb      	adds	r3, r7, r3
341808c6:	f10c 38ff 	add.w	r8, ip, #4294967295
341808ca:	bf2c      	ite	cs
341808cc:	f04f 0901 	movcs.w	r9, #1
341808d0:	f04f 0900 	movcc.w	r9, #0
341808d4:	429a      	cmp	r2, r3
341808d6:	d903      	bls.n	341808e0 <__udivmoddi4+0x124>
341808d8:	f1b9 0f00 	cmp.w	r9, #0
341808dc:	f000 80ec 	beq.w	34180ab8 <__udivmoddi4+0x2fc>
341808e0:	46c4      	mov	ip, r8
341808e2:	1a9b      	subs	r3, r3, r2
341808e4:	fbb3 f8fe 	udiv	r8, r3, lr
341808e8:	fb0e 3318 	mls	r3, lr, r8, r3
341808ec:	fb04 f408 	mul.w	r4, r4, r8
341808f0:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
341808f4:	4294      	cmp	r4, r2
341808f6:	d90b      	bls.n	34180910 <__udivmoddi4+0x154>
341808f8:	18ba      	adds	r2, r7, r2
341808fa:	f108 33ff 	add.w	r3, r8, #4294967295
341808fe:	bf2c      	ite	cs
34180900:	2001      	movcs	r0, #1
34180902:	2000      	movcc	r0, #0
34180904:	4294      	cmp	r4, r2
34180906:	d902      	bls.n	3418090e <__udivmoddi4+0x152>
34180908:	2800      	cmp	r0, #0
3418090a:	f000 80d1 	beq.w	34180ab0 <__udivmoddi4+0x2f4>
3418090e:	4698      	mov	r8, r3
34180910:	1b12      	subs	r2, r2, r4
34180912:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
34180916:	e79d      	b.n	34180854 <__udivmoddi4+0x98>
34180918:	f1c1 0620 	rsb	r6, r1, #32
3418091c:	408b      	lsls	r3, r1
3418091e:	fa08 f401 	lsl.w	r4, r8, r1
34180922:	fa00 f901 	lsl.w	r9, r0, r1
34180926:	fa22 f706 	lsr.w	r7, r2, r6
3418092a:	fa28 f806 	lsr.w	r8, r8, r6
3418092e:	408a      	lsls	r2, r1
34180930:	431f      	orrs	r7, r3
34180932:	fa20 f306 	lsr.w	r3, r0, r6
34180936:	0c38      	lsrs	r0, r7, #16
34180938:	4323      	orrs	r3, r4
3418093a:	fa1f fc87 	uxth.w	ip, r7
3418093e:	0c1c      	lsrs	r4, r3, #16
34180940:	fbb8 fef0 	udiv	lr, r8, r0
34180944:	fb00 881e 	mls	r8, r0, lr, r8
34180948:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
3418094c:	fb0e f80c 	mul.w	r8, lr, ip
34180950:	45a0      	cmp	r8, r4
34180952:	d90e      	bls.n	34180972 <__udivmoddi4+0x1b6>
34180954:	193c      	adds	r4, r7, r4
34180956:	f10e 3aff 	add.w	sl, lr, #4294967295
3418095a:	bf2c      	ite	cs
3418095c:	f04f 0b01 	movcs.w	fp, #1
34180960:	f04f 0b00 	movcc.w	fp, #0
34180964:	45a0      	cmp	r8, r4
34180966:	d903      	bls.n	34180970 <__udivmoddi4+0x1b4>
34180968:	f1bb 0f00 	cmp.w	fp, #0
3418096c:	f000 80b8 	beq.w	34180ae0 <__udivmoddi4+0x324>
34180970:	46d6      	mov	lr, sl
34180972:	eba4 0408 	sub.w	r4, r4, r8
34180976:	fa1f f883 	uxth.w	r8, r3
3418097a:	fbb4 f3f0 	udiv	r3, r4, r0
3418097e:	fb00 4413 	mls	r4, r0, r3, r4
34180982:	fb03 fc0c 	mul.w	ip, r3, ip
34180986:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
3418098a:	45a4      	cmp	ip, r4
3418098c:	d90e      	bls.n	341809ac <__udivmoddi4+0x1f0>
3418098e:	193c      	adds	r4, r7, r4
34180990:	f103 30ff 	add.w	r0, r3, #4294967295
34180994:	bf2c      	ite	cs
34180996:	f04f 0801 	movcs.w	r8, #1
3418099a:	f04f 0800 	movcc.w	r8, #0
3418099e:	45a4      	cmp	ip, r4
341809a0:	d903      	bls.n	341809aa <__udivmoddi4+0x1ee>
341809a2:	f1b8 0f00 	cmp.w	r8, #0
341809a6:	f000 809f 	beq.w	34180ae8 <__udivmoddi4+0x32c>
341809aa:	4603      	mov	r3, r0
341809ac:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
341809b0:	eba4 040c 	sub.w	r4, r4, ip
341809b4:	fba0 ec02 	umull	lr, ip, r0, r2
341809b8:	4564      	cmp	r4, ip
341809ba:	4673      	mov	r3, lr
341809bc:	46e0      	mov	r8, ip
341809be:	d302      	bcc.n	341809c6 <__udivmoddi4+0x20a>
341809c0:	d107      	bne.n	341809d2 <__udivmoddi4+0x216>
341809c2:	45f1      	cmp	r9, lr
341809c4:	d205      	bcs.n	341809d2 <__udivmoddi4+0x216>
341809c6:	ebbe 0302 	subs.w	r3, lr, r2
341809ca:	eb6c 0c07 	sbc.w	ip, ip, r7
341809ce:	3801      	subs	r0, #1
341809d0:	46e0      	mov	r8, ip
341809d2:	b15d      	cbz	r5, 341809ec <__udivmoddi4+0x230>
341809d4:	ebb9 0203 	subs.w	r2, r9, r3
341809d8:	eb64 0408 	sbc.w	r4, r4, r8
341809dc:	fa04 f606 	lsl.w	r6, r4, r6
341809e0:	fa22 f301 	lsr.w	r3, r2, r1
341809e4:	40cc      	lsrs	r4, r1
341809e6:	431e      	orrs	r6, r3
341809e8:	e9c5 6400 	strd	r6, r4, [r5]
341809ec:	2100      	movs	r1, #0
341809ee:	e736      	b.n	3418085e <__udivmoddi4+0xa2>
341809f0:	fbb1 fcf2 	udiv	ip, r1, r2
341809f4:	0c01      	lsrs	r1, r0, #16
341809f6:	4614      	mov	r4, r2
341809f8:	b280      	uxth	r0, r0
341809fa:	4696      	mov	lr, r2
341809fc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34180a00:	2620      	movs	r6, #32
34180a02:	4690      	mov	r8, r2
34180a04:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34180a08:	4610      	mov	r0, r2
34180a0a:	fbb1 f1f2 	udiv	r1, r1, r2
34180a0e:	eba3 0308 	sub.w	r3, r3, r8
34180a12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34180a16:	e74b      	b.n	341808b0 <__udivmoddi4+0xf4>
34180a18:	40b7      	lsls	r7, r6
34180a1a:	f1c6 0320 	rsb	r3, r6, #32
34180a1e:	fa01 f206 	lsl.w	r2, r1, r6
34180a22:	fa21 f803 	lsr.w	r8, r1, r3
34180a26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34180a2a:	fa20 f303 	lsr.w	r3, r0, r3
34180a2e:	b2bc      	uxth	r4, r7
34180a30:	40b0      	lsls	r0, r6
34180a32:	4313      	orrs	r3, r2
34180a34:	0c02      	lsrs	r2, r0, #16
34180a36:	0c19      	lsrs	r1, r3, #16
34180a38:	b280      	uxth	r0, r0
34180a3a:	fbb8 f9fe 	udiv	r9, r8, lr
34180a3e:	fb0e 8819 	mls	r8, lr, r9, r8
34180a42:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34180a46:	fb09 f804 	mul.w	r8, r9, r4
34180a4a:	4588      	cmp	r8, r1
34180a4c:	d951      	bls.n	34180af2 <__udivmoddi4+0x336>
34180a4e:	1879      	adds	r1, r7, r1
34180a50:	f109 3cff 	add.w	ip, r9, #4294967295
34180a54:	bf2c      	ite	cs
34180a56:	f04f 0a01 	movcs.w	sl, #1
34180a5a:	f04f 0a00 	movcc.w	sl, #0
34180a5e:	4588      	cmp	r8, r1
34180a60:	d902      	bls.n	34180a68 <__udivmoddi4+0x2ac>
34180a62:	f1ba 0f00 	cmp.w	sl, #0
34180a66:	d031      	beq.n	34180acc <__udivmoddi4+0x310>
34180a68:	eba1 0108 	sub.w	r1, r1, r8
34180a6c:	fbb1 f9fe 	udiv	r9, r1, lr
34180a70:	fb09 f804 	mul.w	r8, r9, r4
34180a74:	fb0e 1119 	mls	r1, lr, r9, r1
34180a78:	b29b      	uxth	r3, r3
34180a7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34180a7e:	4543      	cmp	r3, r8
34180a80:	d235      	bcs.n	34180aee <__udivmoddi4+0x332>
34180a82:	18fb      	adds	r3, r7, r3
34180a84:	f109 31ff 	add.w	r1, r9, #4294967295
34180a88:	bf2c      	ite	cs
34180a8a:	f04f 0a01 	movcs.w	sl, #1
34180a8e:	f04f 0a00 	movcc.w	sl, #0
34180a92:	4543      	cmp	r3, r8
34180a94:	d2bb      	bcs.n	34180a0e <__udivmoddi4+0x252>
34180a96:	f1ba 0f00 	cmp.w	sl, #0
34180a9a:	d1b8      	bne.n	34180a0e <__udivmoddi4+0x252>
34180a9c:	f1a9 0102 	sub.w	r1, r9, #2
34180aa0:	443b      	add	r3, r7
34180aa2:	e7b4      	b.n	34180a0e <__udivmoddi4+0x252>
34180aa4:	1a84      	subs	r4, r0, r2
34180aa6:	eb68 0203 	sbc.w	r2, r8, r3
34180aaa:	2001      	movs	r0, #1
34180aac:	4696      	mov	lr, r2
34180aae:	e6eb      	b.n	34180888 <__udivmoddi4+0xcc>
34180ab0:	443a      	add	r2, r7
34180ab2:	f1a8 0802 	sub.w	r8, r8, #2
34180ab6:	e72b      	b.n	34180910 <__udivmoddi4+0x154>
34180ab8:	f1ac 0c02 	sub.w	ip, ip, #2
34180abc:	443b      	add	r3, r7
34180abe:	e710      	b.n	341808e2 <__udivmoddi4+0x126>
34180ac0:	3902      	subs	r1, #2
34180ac2:	443b      	add	r3, r7
34180ac4:	e6a9      	b.n	3418081a <__udivmoddi4+0x5e>
34180ac6:	443a      	add	r2, r7
34180ac8:	3802      	subs	r0, #2
34180aca:	e6be      	b.n	3418084a <__udivmoddi4+0x8e>
34180acc:	eba7 0808 	sub.w	r8, r7, r8
34180ad0:	f1a9 0c02 	sub.w	ip, r9, #2
34180ad4:	4441      	add	r1, r8
34180ad6:	fbb1 f9fe 	udiv	r9, r1, lr
34180ada:	fb09 f804 	mul.w	r8, r9, r4
34180ade:	e7c9      	b.n	34180a74 <__udivmoddi4+0x2b8>
34180ae0:	f1ae 0e02 	sub.w	lr, lr, #2
34180ae4:	443c      	add	r4, r7
34180ae6:	e744      	b.n	34180972 <__udivmoddi4+0x1b6>
34180ae8:	3b02      	subs	r3, #2
34180aea:	443c      	add	r4, r7
34180aec:	e75e      	b.n	341809ac <__udivmoddi4+0x1f0>
34180aee:	4649      	mov	r1, r9
34180af0:	e78d      	b.n	34180a0e <__udivmoddi4+0x252>
34180af2:	eba1 0108 	sub.w	r1, r1, r8
34180af6:	46cc      	mov	ip, r9
34180af8:	fbb1 f9fe 	udiv	r9, r1, lr
34180afc:	fb09 f804 	mul.w	r8, r9, r4
34180b00:	e7b8      	b.n	34180a74 <__udivmoddi4+0x2b8>
34180b02:	bf00      	nop

34180b04 <__aeabi_idiv0>:
34180b04:	4770      	bx	lr
34180b06:	bf00      	nop

34180b08 <MX_EXTMEM_Init>:
/**
  * Init Secure Manager API
  * @retval None
  */
void MX_EXTMEM_Init(void)
{
34180b08:	b580      	push	{r7, lr}
34180b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MX_EXTMEM_Init_PreTreatment */
    
  /* USER CODE END MX_EXTMEM_Init_PreTreatment */

  EXTMEM_Init(EXTMEMORY_1, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI2));
34180b0c:	f04f 0000 	mov.w	r0, #0
34180b10:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
34180b14:	f007 fda8 	bl	34188668 <HAL_RCCEx_GetPeriphCLKFreq>
34180b18:	4603      	mov	r3, r0
34180b1a:	4619      	mov	r1, r3
34180b1c:	2000      	movs	r0, #0
34180b1e:	f00e f9d9 	bl	3418eed4 <EXTMEM_Init>
  EXTMEM_Init(EXTMEMORY_2, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI1));
34180b22:	f04f 0000 	mov.w	r0, #0
34180b26:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
34180b2a:	f007 fd9d 	bl	34188668 <HAL_RCCEx_GetPeriphCLKFreq>
34180b2e:	4603      	mov	r3, r0
34180b30:	4619      	mov	r1, r3
34180b32:	2001      	movs	r0, #1
34180b34:	f00e f9ce 	bl	3418eed4 <EXTMEM_Init>

  /* USER CODE BEGIN MX_EXTMEM_Init_PostTreatment */

  /* USER CODE END MX_EXTMEM_Init_PostTreatment */
}
34180b38:	bf00      	nop
34180b3a:	bd80      	pop	{r7, pc}

34180b3c <LL_AHB4_GRP1_EnableClock>:
  *         @arg @ref LL_AHB4_GRP1_PERIPH_PWR
  *         @arg @ref LL_AHB4_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
34180b3c:	b480      	push	{r7}
34180b3e:	b085      	sub	sp, #20
34180b40:	af00      	add	r7, sp, #0
34180b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34180b44:	4a07      	ldr	r2, [pc, #28]	@ (34180b64 <LL_AHB4_GRP1_EnableClock+0x28>)
34180b46:	687b      	ldr	r3, [r7, #4]
34180b48:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
34180b4c:	4b05      	ldr	r3, [pc, #20]	@ (34180b64 <LL_AHB4_GRP1_EnableClock+0x28>)
34180b4e:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34180b52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180b54:	68fb      	ldr	r3, [r7, #12]
}
34180b56:	bf00      	nop
34180b58:	3714      	adds	r7, #20
34180b5a:	46bd      	mov	sp, r7
34180b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34180b60:	4770      	bx	lr
34180b62:	bf00      	nop
34180b64:	56028000 	.word	0x56028000

34180b68 <MX_GPIO_Init>:
     CSI_D0N   ------> CSI_D0N
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PB5(JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
34180b68:	b580      	push	{r7, lr}
34180b6a:	b086      	sub	sp, #24
34180b6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
34180b6e:	1d3b      	adds	r3, r7, #4
34180b70:	2200      	movs	r2, #0
34180b72:	601a      	str	r2, [r3, #0]
34180b74:	605a      	str	r2, [r3, #4]
34180b76:	609a      	str	r2, [r3, #8]
34180b78:	60da      	str	r2, [r3, #12]
34180b7a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
34180b7c:	2001      	movs	r0, #1
34180b7e:	f7ff ffdd 	bl	34180b3c <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
34180b82:	2002      	movs	r0, #2
34180b84:	f7ff ffda 	bl	34180b3c <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
34180b88:	2004      	movs	r0, #4
34180b8a:	f7ff ffd7 	bl	34180b3c <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
34180b8e:	2008      	movs	r0, #8
34180b90:	f7ff ffd4 	bl	34180b3c <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
34180b94:	2010      	movs	r0, #16
34180b96:	f7ff ffd1 	bl	34180b3c <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOG_CLK_ENABLE();
34180b9a:	2040      	movs	r0, #64	@ 0x40
34180b9c:	f7ff ffce 	bl	34180b3c <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
34180ba0:	2080      	movs	r0, #128	@ 0x80
34180ba2:	f7ff ffcb 	bl	34180b3c <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPION_CLK_ENABLE();
34180ba6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34180baa:	f7ff ffc7 	bl	34180b3c <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOO_CLK_ENABLE();
34180bae:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
34180bb2:	f7ff ffc3 	bl	34180b3c <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOP_CLK_ENABLE();
34180bb6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
34180bba:	f7ff ffbf 	bl	34180b3c <LL_AHB4_GRP1_EnableClock>

  /*Configure the EXTI line attribute */
  HAL_EXTI_ConfigLineAttributes(EXTI_LINE_13, EXTI_LINE_SEC);
34180bbe:	f240 1101 	movw	r1, #257	@ 0x101
34180bc2:	481d      	ldr	r0, [pc, #116]	@ (34180c38 <MX_GPIO_Init+0xd0>)
34180bc4:	f001 ff90 	bl	34182ae8 <HAL_EXTI_ConfigLineAttributes>

  /*Configure GPIO pin : User_Pin */
  GPIO_InitStruct.Pin = User_Pin;
34180bc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34180bcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
34180bce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
34180bd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
34180bd4:	2300      	movs	r3, #0
34180bd6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_GPIO_Port, &GPIO_InitStruct);
34180bd8:	1d3b      	adds	r3, r7, #4
34180bda:	4619      	mov	r1, r3
34180bdc:	4817      	ldr	r0, [pc, #92]	@ (34180c3c <MX_GPIO_Init+0xd4>)
34180bde:	f001 ffe5 	bl	34182bac <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
34180be2:	2200      	movs	r2, #0
34180be4:	2102      	movs	r1, #2
34180be6:	4816      	ldr	r0, [pc, #88]	@ (34180c40 <MX_GPIO_Init+0xd8>)
34180be8:	f002 f992 	bl	34182f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
34180bec:	2200      	movs	r2, #0
34180bee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
34180bf2:	4814      	ldr	r0, [pc, #80]	@ (34180c44 <MX_GPIO_Init+0xdc>)
34180bf4:	f002 f98c 	bl	34182f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
34180bf8:	2302      	movs	r3, #2
34180bfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
34180bfc:	2301      	movs	r3, #1
34180bfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
34180c00:	2300      	movs	r3, #0
34180c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34180c04:	2300      	movs	r3, #0
34180c06:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
34180c08:	1d3b      	adds	r3, r7, #4
34180c0a:	4619      	mov	r1, r3
34180c0c:	480c      	ldr	r0, [pc, #48]	@ (34180c40 <MX_GPIO_Init+0xd8>)
34180c0e:	f001 ffcd 	bl	34182bac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
34180c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34180c16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
34180c18:	2301      	movs	r3, #1
34180c1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
34180c1c:	2300      	movs	r3, #0
34180c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34180c20:	2300      	movs	r3, #0
34180c22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
34180c24:	1d3b      	adds	r3, r7, #4
34180c26:	4619      	mov	r1, r3
34180c28:	4806      	ldr	r0, [pc, #24]	@ (34180c44 <MX_GPIO_Init+0xdc>)
34180c2a:	f001 ffbf 	bl	34182bac <HAL_GPIO_Init>

}
34180c2e:	bf00      	nop
34180c30:	3718      	adds	r7, #24
34180c32:	46bd      	mov	sp, r7
34180c34:	bd80      	pop	{r7, pc}
34180c36:	bf00      	nop
34180c38:	1600000d 	.word	0x1600000d
34180c3c:	56020800 	.word	0x56020800
34180c40:	56023800 	.word	0x56023800
34180c44:	56021800 	.word	0x56021800

34180c48 <__io_putchar>:
#endif /* NO_OTP_FUSE */

/* Private functions ---------------------------------------------------------*/

int __io_putchar(int ch)
{
34180c48:	b580      	push	{r7, lr}
34180c4a:	b082      	sub	sp, #8
34180c4c:	af00      	add	r7, sp, #0
34180c4e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
34180c50:	1d39      	adds	r1, r7, #4
34180c52:	f04f 33ff 	mov.w	r3, #4294967295
34180c56:	2201      	movs	r2, #1
34180c58:	4803      	ldr	r0, [pc, #12]	@ (34180c68 <__io_putchar+0x20>)
34180c5a:	f00c f8e4 	bl	3418ce26 <HAL_UART_Transmit>
  return ch;
34180c5e:	687b      	ldr	r3, [r7, #4]
}
34180c60:	4618      	mov	r0, r3
34180c62:	3708      	adds	r7, #8
34180c64:	46bd      	mov	sp, r7
34180c66:	bd80      	pop	{r7, pc}
34180c68:	341c0184 	.word	0x341c0184

34180c6c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
34180c6c:	b580      	push	{r7, lr}
34180c6e:	b088      	sub	sp, #32
34180c70:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
34180c72:	4b77      	ldr	r3, [pc, #476]	@ (34180e50 <main+0x1e4>)
34180c74:	2200      	movs	r2, #0
34180c76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34180c7a:	f3bf 8f4f 	dsb	sy
}
34180c7e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
34180c80:	4b73      	ldr	r3, [pc, #460]	@ (34180e50 <main+0x1e4>)
34180c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34180c86:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
34180c88:	68fb      	ldr	r3, [r7, #12]
34180c8a:	0b5b      	lsrs	r3, r3, #13
34180c8c:	f3c3 030e 	ubfx	r3, r3, #0, #15
34180c90:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
34180c92:	68fb      	ldr	r3, [r7, #12]
34180c94:	08db      	lsrs	r3, r3, #3
34180c96:	f3c3 0309 	ubfx	r3, r3, #0, #10
34180c9a:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
34180c9c:	68bb      	ldr	r3, [r7, #8]
34180c9e:	015a      	lsls	r2, r3, #5
34180ca0:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
34180ca4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
34180ca6:	687a      	ldr	r2, [r7, #4]
34180ca8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
34180caa:	4969      	ldr	r1, [pc, #420]	@ (34180e50 <main+0x1e4>)
34180cac:	4313      	orrs	r3, r2
34180cae:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
34180cb2:	687b      	ldr	r3, [r7, #4]
34180cb4:	1e5a      	subs	r2, r3, #1
34180cb6:	607a      	str	r2, [r7, #4]
34180cb8:	2b00      	cmp	r3, #0
34180cba:	d1ef      	bne.n	34180c9c <main+0x30>
    } while(sets-- != 0U);
34180cbc:	68bb      	ldr	r3, [r7, #8]
34180cbe:	1e5a      	subs	r2, r3, #1
34180cc0:	60ba      	str	r2, [r7, #8]
34180cc2:	2b00      	cmp	r3, #0
34180cc4:	d1e5      	bne.n	34180c92 <main+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
34180cc6:	f3bf 8f4f 	dsb	sy
}
34180cca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34180ccc:	f3bf 8f6f 	isb	sy
}
34180cd0:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
34180cd2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
34180cd4:	f3bf 8f4f 	dsb	sy
}
34180cd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34180cda:	f3bf 8f6f 	isb	sy
}
34180cde:	bf00      	nop
    SCB->ICIALLU = 0UL;
34180ce0:	4b5b      	ldr	r3, [pc, #364]	@ (34180e50 <main+0x1e4>)
34180ce2:	2200      	movs	r2, #0
34180ce4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
34180ce8:	f3bf 8f4f 	dsb	sy
}
34180cec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34180cee:	f3bf 8f6f 	isb	sy
}
34180cf2:	bf00      	nop
}
34180cf4:	bf00      	nop
  /* USER CODE BEGIN 1 */
  SCB_InvalidateDCache();
  SCB_InvalidateICache();

  /* Enable and set up the MPU------------------------------------------------*/
  MPU_Config();
34180cf6:	f000 f9bd 	bl	34181074 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34180cfa:	4b55      	ldr	r3, [pc, #340]	@ (34180e50 <main+0x1e4>)
34180cfc:	695b      	ldr	r3, [r3, #20]
34180cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34180d02:	2b00      	cmp	r3, #0
34180d04:	d11b      	bne.n	34180d3e <main+0xd2>
  __ASM volatile ("dsb 0xF":::"memory");
34180d06:	f3bf 8f4f 	dsb	sy
}
34180d0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34180d0c:	f3bf 8f6f 	isb	sy
}
34180d10:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
34180d12:	4b4f      	ldr	r3, [pc, #316]	@ (34180e50 <main+0x1e4>)
34180d14:	2200      	movs	r2, #0
34180d16:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
34180d1a:	f3bf 8f4f 	dsb	sy
}
34180d1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34180d20:	f3bf 8f6f 	isb	sy
}
34180d24:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
34180d26:	4b4a      	ldr	r3, [pc, #296]	@ (34180e50 <main+0x1e4>)
34180d28:	695b      	ldr	r3, [r3, #20]
34180d2a:	4a49      	ldr	r2, [pc, #292]	@ (34180e50 <main+0x1e4>)
34180d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34180d30:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
34180d32:	f3bf 8f4f 	dsb	sy
}
34180d36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34180d38:	f3bf 8f6f 	isb	sy
}
34180d3c:	e000      	b.n	34180d40 <main+0xd4>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34180d3e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
34180d40:	4b43      	ldr	r3, [pc, #268]	@ (34180e50 <main+0x1e4>)
34180d42:	695b      	ldr	r3, [r3, #20]
34180d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34180d48:	2b00      	cmp	r3, #0
34180d4a:	d138      	bne.n	34180dbe <main+0x152>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
34180d4c:	4b40      	ldr	r3, [pc, #256]	@ (34180e50 <main+0x1e4>)
34180d4e:	2200      	movs	r2, #0
34180d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
34180d54:	f3bf 8f4f 	dsb	sy
}
34180d58:	bf00      	nop
    ccsidr = SCB->CCSIDR;
34180d5a:	4b3d      	ldr	r3, [pc, #244]	@ (34180e50 <main+0x1e4>)
34180d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34180d60:	61bb      	str	r3, [r7, #24]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
34180d62:	69bb      	ldr	r3, [r7, #24]
34180d64:	0b5b      	lsrs	r3, r3, #13
34180d66:	f3c3 030e 	ubfx	r3, r3, #0, #15
34180d6a:	617b      	str	r3, [r7, #20]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
34180d6c:	69bb      	ldr	r3, [r7, #24]
34180d6e:	08db      	lsrs	r3, r3, #3
34180d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
34180d74:	613b      	str	r3, [r7, #16]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
34180d76:	697b      	ldr	r3, [r7, #20]
34180d78:	015a      	lsls	r2, r3, #5
34180d7a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
34180d7e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
34180d80:	693a      	ldr	r2, [r7, #16]
34180d82:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
34180d84:	4932      	ldr	r1, [pc, #200]	@ (34180e50 <main+0x1e4>)
34180d86:	4313      	orrs	r3, r2
34180d88:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
34180d8c:	693b      	ldr	r3, [r7, #16]
34180d8e:	1e5a      	subs	r2, r3, #1
34180d90:	613a      	str	r2, [r7, #16]
34180d92:	2b00      	cmp	r3, #0
34180d94:	d1ef      	bne.n	34180d76 <main+0x10a>
    } while(sets-- != 0U);
34180d96:	697b      	ldr	r3, [r7, #20]
34180d98:	1e5a      	subs	r2, r3, #1
34180d9a:	617a      	str	r2, [r7, #20]
34180d9c:	2b00      	cmp	r3, #0
34180d9e:	d1e5      	bne.n	34180d6c <main+0x100>
  __ASM volatile ("dsb 0xF":::"memory");
34180da0:	f3bf 8f4f 	dsb	sy
}
34180da4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
34180da6:	4b2a      	ldr	r3, [pc, #168]	@ (34180e50 <main+0x1e4>)
34180da8:	695b      	ldr	r3, [r3, #20]
34180daa:	4a29      	ldr	r2, [pc, #164]	@ (34180e50 <main+0x1e4>)
34180dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34180db0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
34180db2:	f3bf 8f4f 	dsb	sy
}
34180db6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34180db8:	f3bf 8f6f 	isb	sy
}
34180dbc:	e000      	b.n	34180dc0 <main+0x154>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
34180dbe:	bf00      	nop

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  HAL_Init();
34180dc0:	f001 fab3 	bl	3418232a <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
34180dc4:	f000 f85a 	bl	34180e7c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
34180dc8:	f000 f927 	bl	3418101a <PeriphCommonClock_Config>
  {
    Error_Handler();
  }
#endif /* NO_OTP_FUSE */

  MX_GPIO_Init();
34180dcc:	f7ff fecc 	bl	34180b68 <MX_GPIO_Init>
//  HAL_Delay(2000);

  MX_USART1_UART_Init();
34180dd0:	f000 ff20 	bl	34181c14 <MX_USART1_UART_Init>

  printf("\nHello STM32N6 world!\n");
34180dd4:	481f      	ldr	r0, [pc, #124]	@ (34180e54 <main+0x1e8>)
34180dd6:	f010 fe55 	bl	34191a84 <puts>

  /* Add your application code here */
  MX_XSPI1_Init();
34180dda:	f001 f80f 	bl	34181dfc <MX_XSPI1_Init>
  MX_XSPI2_Init();
34180dde:	f001 f869 	bl	34181eb4 <MX_XSPI2_Init>

#if 1
  printf("Configure_APMemory\n");
34180de2:	481d      	ldr	r0, [pc, #116]	@ (34180e58 <main+0x1ec>)
34180de4:	f010 fe4e 	bl	34191a84 <puts>
  Map_APMemory();
34180de8:	f000 fb2e 	bl	34181448 <Map_APMemory>
#endif

  /* USER CODE BEGIN 2 */

#if 1
  printf("----------\n");
34180dec:	481b      	ldr	r0, [pc, #108]	@ (34180e5c <main+0x1f0>)
34180dee:	f010 fe49 	bl	34191a84 <puts>
  printf("Accessing external memory ");
34180df2:	481b      	ldr	r0, [pc, #108]	@ (34180e60 <main+0x1f4>)
34180df4:	f010 fdde 	bl	341919b4 <iprintf>
  *((uint32_t *) XSPI1_BASE) = 0x12345678;
34180df8:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
34180dfc:	4a19      	ldr	r2, [pc, #100]	@ (34180e64 <main+0x1f8>)
34180dfe:	601a      	str	r2, [r3, #0]
  uint32_t data = *((uint32_t *) XSPI1_BASE);
34180e00:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
34180e04:	681b      	ldr	r3, [r3, #0]
34180e06:	61fb      	str	r3, [r7, #28]
  if (data == 0x12345678)
34180e08:	69fb      	ldr	r3, [r7, #28]
34180e0a:	4a16      	ldr	r2, [pc, #88]	@ (34180e64 <main+0x1f8>)
34180e0c:	4293      	cmp	r3, r2
34180e0e:	d103      	bne.n	34180e18 <main+0x1ac>
  {
    printf("PASSED!\n");
34180e10:	4815      	ldr	r0, [pc, #84]	@ (34180e68 <main+0x1fc>)
34180e12:	f010 fe37 	bl	34191a84 <puts>
34180e16:	e002      	b.n	34180e1e <main+0x1b2>
  }
  else
  {
    printf("FAILED!\n");
34180e18:	4814      	ldr	r0, [pc, #80]	@ (34180e6c <main+0x200>)
34180e1a:	f010 fe33 	bl	34191a84 <puts>
  }
  printf("----------\n");
34180e1e:	480f      	ldr	r0, [pc, #60]	@ (34180e5c <main+0x1f0>)
34180e20:	f010 fe30 	bl	34191a84 <puts>

  *((uint32_t *) 0x90000000 + (800*240+400) * 4) = 0x55;
34180e24:	4b12      	ldr	r3, [pc, #72]	@ (34180e70 <main+0x204>)
34180e26:	2255      	movs	r2, #85	@ 0x55
34180e28:	601a      	str	r2, [r3, #0]
#endif

  /* Initialize the serial memory */
  printf("Initialize the serial memory\n");
34180e2a:	4812      	ldr	r0, [pc, #72]	@ (34180e74 <main+0x208>)
34180e2c:	f010 fe2a 	bl	34191a84 <puts>
  MX_EXTMEM_Init(); /* Makes jump possible */
34180e30:	f7ff fe6a 	bl	34180b08 <MX_EXTMEM_Init>
//  MX_EXTMEM_MANAGER_Init();

  /* USER CODE END 2 */

  /* Launch the application */
  printf("BOOT_Application\n");
34180e34:	4810      	ldr	r0, [pc, #64]	@ (34180e78 <main+0x20c>)
34180e36:	f010 fe25 	bl	34191a84 <puts>
  if (BOOT_OK != BOOT_Application())
34180e3a:	f00d ff57 	bl	3418ecec <BOOT_Application>
34180e3e:	4603      	mov	r3, r0
34180e40:	2b00      	cmp	r3, #0
34180e42:	d002      	beq.n	34180e4a <main+0x1de>
  {
    Error_Handler();
34180e44:	f000 f96c 	bl	34181120 <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
34180e48:	bf00      	nop
34180e4a:	bf00      	nop
34180e4c:	e7fd      	b.n	34180e4a <main+0x1de>
34180e4e:	bf00      	nop
34180e50:	e000ed00 	.word	0xe000ed00
34180e54:	3419279c 	.word	0x3419279c
34180e58:	341927b4 	.word	0x341927b4
34180e5c:	341927c8 	.word	0x341927c8
34180e60:	341927d4 	.word	0x341927d4
34180e64:	12345678 	.word	0x12345678
34180e68:	341927f0 	.word	0x341927f0
34180e6c:	341927f8 	.word	0x341927f8
34180e70:	902ef900 	.word	0x902ef900
34180e74:	34192800 	.word	0x34192800
34180e78:	34192820 	.word	0x34192820

34180e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
34180e7c:	b580      	push	{r7, lr}
34180e7e:	b0b6      	sub	sp, #216	@ 0xd8
34180e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34180e82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180e86:	2298      	movs	r2, #152	@ 0x98
34180e88:	2100      	movs	r1, #0
34180e8a:	4618      	mov	r0, r3
34180e8c:	f010 feda 	bl	34191c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34180e90:	463b      	mov	r3, r7
34180e92:	2240      	movs	r2, #64	@ 0x40
34180e94:	2100      	movs	r1, #0
34180e96:	4618      	mov	r0, r3
34180e98:	f010 fed4 	bl	34191c44 <memset>

  /** Configure the System Power Supply
  */
  if (HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY) != HAL_OK)
34180e9c:	2000      	movs	r0, #0
34180e9e:	f002 f869 	bl	34182f74 <HAL_PWREx_ConfigSupply>
34180ea2:	4603      	mov	r3, r0
34180ea4:	2b00      	cmp	r3, #0
34180ea6:	d001      	beq.n	34180eac <SystemClock_Config+0x30>
  {
    Error_Handler();
34180ea8:	f000 f93a 	bl	34181120 <Error_Handler>
  }

  /* Enable HSI */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
34180eac:	2302      	movs	r3, #2
34180eae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
34180eb0:	2308      	movs	r3, #8
34180eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
34180eb4:	2300      	movs	r3, #0
34180eb6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
34180eb8:	2300      	movs	r3, #0
34180eba:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
34180ebc:	2300      	movs	r3, #0
34180ebe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180ec0:	2300      	movs	r3, #0
34180ec2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180ec6:	2300      	movs	r3, #0
34180ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180ecc:	2300      	movs	r3, #0
34180ece:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180ed2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180ed6:	4618      	mov	r0, r3
34180ed8:	f002 fb72 	bl	341835c0 <HAL_RCC_OscConfig>
34180edc:	4603      	mov	r3, r0
34180ede:	2b00      	cmp	r3, #0
34180ee0:	d001      	beq.n	34180ee6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
34180ee2:	f000 f91d 	bl	34181120 <Error_Handler>
  }

  /* Wait HSE stabilization time before its selection as PLL source. */
  HAL_Delay(HSE_STARTUP_TIMEOUT);
34180ee6:	2064      	movs	r0, #100	@ 0x64
34180ee8:	f001 fa8a 	bl	34182400 <HAL_Delay>

  /** Get current CPU/System buses clocks configuration and if necessary switch
 to intermediate HSI clock to ensure target clock can be set
  */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct);
34180eec:	463b      	mov	r3, r7
34180eee:	4618      	mov	r0, r3
34180ef0:	f003 f9da 	bl	341842a8 <HAL_RCC_GetClockConfig>
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180ef4:	687b      	ldr	r3, [r7, #4]
34180ef6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34180efa:	d003      	beq.n	34180f04 <SystemClock_Config+0x88>
     (RCC_ClkInitStruct.SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11))
34180efc:	68bb      	ldr	r3, [r7, #8]
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180efe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34180f02:	d10e      	bne.n	34180f22 <SystemClock_Config+0xa6>
  {
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK);
34180f04:	2303      	movs	r3, #3
34180f06:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
34180f08:	2300      	movs	r3, #0
34180f0a:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
34180f0c:	2300      	movs	r3, #0
34180f0e:	60bb      	str	r3, [r7, #8]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180f10:	463b      	mov	r3, r7
34180f12:	4618      	mov	r0, r3
34180f14:	f002 ff34 	bl	34183d80 <HAL_RCC_ClockConfig>
34180f18:	4603      	mov	r3, r0
34180f1a:	2b00      	cmp	r3, #0
34180f1c:	d001      	beq.n	34180f22 <SystemClock_Config+0xa6>
    {
      /* Initialization Error */
      Error_Handler();
34180f1e:	f000 f8ff 	bl	34181120 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
34180f22:	2301      	movs	r3, #1
34180f24:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
34180f26:	2310      	movs	r3, #16
34180f28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34180f2a:	2302      	movs	r3, #2
34180f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34180f2e:	2300      	movs	r3, #0
34180f30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL1.PLLM = 4;
34180f32:	2304      	movs	r3, #4
34180f34:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL1.PLLN = 100;
34180f36:	2364      	movs	r3, #100	@ 0x64
34180f38:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34180f3a:	2300      	movs	r3, #0
34180f3c:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34180f3e:	2301      	movs	r3, #1
34180f40:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34180f42:	2301      	movs	r3, #1
34180f44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180f48:	2300      	movs	r3, #0
34180f4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
34180f4e:	2302      	movs	r3, #2
34180f50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
34180f54:	2300      	movs	r3, #0
34180f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLM = 1;
34180f5a:	2301      	movs	r3, #1
34180f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLN = 25;
34180f60:	2319      	movs	r3, #25
34180f62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
34180f66:	2300      	movs	r3, #0
34180f68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
34180f6c:	2301      	movs	r3, #1
34180f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLP2 = 1;
34180f72:	2301      	movs	r3, #1
34180f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
34180f78:	2302      	movs	r3, #2
34180f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSE;
34180f7e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34180f82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  RCC_OscInitStruct.PLL4.PLLM = 3;
34180f86:	2303      	movs	r3, #3
34180f88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL4.PLLN = 250;
34180f8c:	23fa      	movs	r3, #250	@ 0xfa
34180f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
34180f92:	2300      	movs	r3, #0
34180f94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL4.PLLP1 = 1;
34180f98:	2301      	movs	r3, #1
34180f9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL4.PLLP2 = 1;
34180f9e:	2301      	movs	r3, #1
34180fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180fa4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180fa8:	4618      	mov	r0, r3
34180faa:	f002 fb09 	bl	341835c0 <HAL_RCC_OscConfig>
34180fae:	4603      	mov	r3, r0
34180fb0:	2b00      	cmp	r3, #0
34180fb2:	d001      	beq.n	34180fb8 <SystemClock_Config+0x13c>
  {
    Error_Handler();
34180fb4:	f000 f8b4 	bl	34181120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_CPUCLK|RCC_CLOCKTYPE_HCLK
34180fb8:	237f      	movs	r3, #127	@ 0x7f
34180fba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2|RCC_CLOCKTYPE_PCLK5
                              |RCC_CLOCKTYPE_PCLK4;
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34180fbc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34180fc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34180fc2:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34180fc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34180fc8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34180fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34180fce:	2300      	movs	r3, #0
34180fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
34180fd2:	2300      	movs	r3, #0
34180fd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34180fd6:	2300      	movs	r3, #0
34180fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34180fda:	2300      	movs	r3, #0
34180fdc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.IC1Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180fde:	2300      	movs	r3, #0
34180fe0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 2;
34180fe2:	2302      	movs	r3, #2
34180fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180fe6:	2300      	movs	r3, #0
34180fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 4;
34180fea:	2304      	movs	r3, #4
34180fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL4;
34180fee:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
34180ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 2;
34180ff4:	2302      	movs	r3, #2
34180ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180ff8:	2300      	movs	r3, #0
34180ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 2;
34180ffc:	2302      	movs	r3, #2
34180ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34181000:	463b      	mov	r3, r7
34181002:	4618      	mov	r0, r3
34181004:	f002 febc 	bl	34183d80 <HAL_RCC_ClockConfig>
34181008:	4603      	mov	r3, r0
3418100a:	2b00      	cmp	r3, #0
3418100c:	d001      	beq.n	34181012 <SystemClock_Config+0x196>
  {
    Error_Handler();
3418100e:	f000 f887 	bl	34181120 <Error_Handler>
  }
}
34181012:	bf00      	nop
34181014:	37d8      	adds	r7, #216	@ 0xd8
34181016:	46bd      	mov	sp, r7
34181018:	bd80      	pop	{r7, pc}

3418101a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
3418101a:	b580      	push	{r7, lr}
3418101c:	b0e4      	sub	sp, #400	@ 0x190
3418101e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181020:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34181024:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34181028:	4618      	mov	r0, r3
3418102a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
3418102e:	461a      	mov	r2, r3
34181030:	2100      	movs	r1, #0
34181032:	f010 fe07 	bl	34191c44 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
34181036:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
3418103a:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
3418103e:	f04f 0200 	mov.w	r2, #0
34181042:	f04f 0380 	mov.w	r3, #128	@ 0x80
34181046:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_DIV1;
3418104a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
3418104e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34181052:	2200      	movs	r2, #0
34181054:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181058:	463b      	mov	r3, r7
3418105a:	4618      	mov	r0, r3
3418105c:	f005 f820 	bl	341860a0 <HAL_RCCEx_PeriphCLKConfig>
34181060:	4603      	mov	r3, r0
34181062:	2b00      	cmp	r3, #0
34181064:	d001      	beq.n	3418106a <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
34181066:	f000 f85b 	bl	34181120 <Error_Handler>
  }
}
3418106a:	bf00      	nop
3418106c:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
34181070:	46bd      	mov	sp, r7
34181072:	bd80      	pop	{r7, pc}

34181074 <MPU_Config>:
  return retr;
}
#endif /* NO_OTP_FUSE */

static void MPU_Config(void)
{
34181074:	b580      	push	{r7, lr}
34181076:	b088      	sub	sp, #32
34181078:	af00      	add	r7, sp, #0
  /*
   * XSPI2 0x70000000 128MB FLASH (1-Gbit   Octo-SPI)
   * XSPI1 0x90000000  32MB PSRAM (256-Mbit Hexadeca-SPI)
   */
  MPU_Region_InitTypeDef default_config = {0};
3418107a:	1d3b      	adds	r3, r7, #4
3418107c:	2200      	movs	r2, #0
3418107e:	601a      	str	r2, [r3, #0]
34181080:	605a      	str	r2, [r3, #4]
34181082:	609a      	str	r2, [r3, #8]
34181084:	60da      	str	r2, [r3, #12]
  MPU_Attributes_InitTypeDef attr_config = {0};
34181086:	2300      	movs	r3, #0
34181088:	803b      	strh	r3, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
3418108a:	f3ef 8310 	mrs	r3, PRIMASK
3418108e:	617b      	str	r3, [r7, #20]
  return(result);
34181090:	697b      	ldr	r3, [r7, #20]
  uint32_t primask_bit = __get_PRIMASK();
34181092:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
34181094:	b672      	cpsid	i
}
34181096:	bf00      	nop
  __disable_irq();

  /* disable the MPU */
  HAL_MPU_Disable();
34181098:	f001 fbda 	bl	34182850 <HAL_MPU_Disable>

  /* create an attribute configuration for the MPU */
  attr_config.Attributes = INNER_OUTER(MPU_WRITE_BACK | MPU_NON_TRANSIENT | MPU_RW_ALLOCATE);
3418109c:	23ff      	movs	r3, #255	@ 0xff
3418109e:	707b      	strb	r3, [r7, #1]
  attr_config.Number = MPU_ATTRIBUTES_NUMBER0;
341810a0:	2300      	movs	r3, #0
341810a2:	703b      	strb	r3, [r7, #0]

  HAL_MPU_ConfigMemoryAttributes(&attr_config);
341810a4:	463b      	mov	r3, r7
341810a6:	4618      	mov	r0, r3
341810a8:	f001 fc00 	bl	341828ac <HAL_MPU_ConfigMemoryAttributes>

  /* Create a region associated with memory address 0x70000000 */
  /*Normal memory type, code execution allowed */
  default_config.Number = MPU_REGION_NUMBER0;
341810ac:	2300      	movs	r3, #0
341810ae:	717b      	strb	r3, [r7, #5]
  default_config.Enable = MPU_REGION_ENABLE;
341810b0:	2301      	movs	r3, #1
341810b2:	713b      	strb	r3, [r7, #4]
  default_config.BaseAddress = XSPI2_BASE; /* FLASH 128MB 0x70000000 */
341810b4:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
341810b8:	60bb      	str	r3, [r7, #8]
  default_config.LimitAddress = XSPI2_BASE + 0x08000000-1;
341810ba:	f06f 4308 	mvn.w	r3, #2281701376	@ 0x88000000
341810be:	60fb      	str	r3, [r7, #12]
  default_config.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
341810c0:	2300      	movs	r3, #0
341810c2:	747b      	strb	r3, [r7, #17]
  default_config.AccessPermission = MPU_REGION_ALL_RO;
341810c4:	2303      	movs	r3, #3
341810c6:	743b      	strb	r3, [r7, #16]
  default_config.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
341810c8:	2300      	movs	r3, #0
341810ca:	74fb      	strb	r3, [r7, #19]
  default_config.AttributesIndex = MPU_ATTRIBUTES_NUMBER0;
341810cc:	2300      	movs	r3, #0
341810ce:	71bb      	strb	r3, [r7, #6]
  HAL_MPU_ConfigRegion(&default_config);
341810d0:	1d3b      	adds	r3, r7, #4
341810d2:	4618      	mov	r0, r3
341810d4:	f001 fbdc 	bl	34182890 <HAL_MPU_ConfigRegion>

  /* Ensure the FSBL enables MPU access for the PSRAM region before mapping it: */
  default_config.Number = MPU_REGION_NUMBER1;
341810d8:	2301      	movs	r3, #1
341810da:	717b      	strb	r3, [r7, #5]
  default_config.Enable = MPU_REGION_ENABLE;
341810dc:	2301      	movs	r3, #1
341810de:	713b      	strb	r3, [r7, #4]
  default_config.BaseAddress = XSPI1_BASE; /* PSRAM 32MB 0x90000000 */
341810e0:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
341810e4:	60bb      	str	r3, [r7, #8]
  default_config.LimitAddress = XSPI1_BASE + 0x02000000-1;
341810e6:	f06f 43dc 	mvn.w	r3, #1845493760	@ 0x6e000000
341810ea:	60fb      	str	r3, [r7, #12]
//  default_config.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  default_config.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
341810ec:	2300      	movs	r3, #0
341810ee:	747b      	strb	r3, [r7, #17]
  default_config.AccessPermission = MPU_REGION_ALL_RW;
341810f0:	2301      	movs	r3, #1
341810f2:	743b      	strb	r3, [r7, #16]
  default_config.IsShareable = MPU_ACCESS_INNER_SHAREABLE | MPU_ACCESS_OUTER_SHAREABLE;
341810f4:	2303      	movs	r3, #3
341810f6:	74fb      	strb	r3, [r7, #19]
//  default_config.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  default_config.AttributesIndex = MPU_ATTRIBUTES_NUMBER0;
341810f8:	2300      	movs	r3, #0
341810fa:	71bb      	strb	r3, [r7, #6]
//  default_config.Size = MPU_REGION_SIZE_64MB;
//  default_config.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
//  default_config.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//  default_config.TypeExtField = MPU_TEX_LEVEL0;
//  default_config.SubRegionDisable = 0x00;
  HAL_MPU_ConfigRegion(&default_config);
341810fc:	1d3b      	adds	r3, r7, #4
341810fe:	4618      	mov	r0, r3
34181100:	f001 fbc6 	bl	34182890 <HAL_MPU_ConfigRegion>

  /* enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
34181104:	2004      	movs	r0, #4
34181106:	f001 fb81 	bl	3418280c <HAL_MPU_Enable>
3418110a:	69fb      	ldr	r3, [r7, #28]
3418110c:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
3418110e:	69bb      	ldr	r3, [r7, #24]
34181110:	f383 8810 	msr	PRIMASK, r3
}
34181114:	bf00      	nop

  /* Exit critical section to lock the system and avoid any issue around MPU mechanisme */
  __set_PRIMASK(primask_bit);
}
34181116:	bf00      	nop
34181118:	3720      	adds	r7, #32
3418111a:	46bd      	mov	sp, r7
3418111c:	bd80      	pop	{r7, pc}
	...

34181120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
34181120:	b580      	push	{r7, lr}
34181122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  while(1)
  {
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
34181124:	2102      	movs	r1, #2
34181126:	4806      	ldr	r0, [pc, #24]	@ (34181140 <Error_Handler+0x20>)
34181128:	f001 ff0a 	bl	34182f40 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
3418112c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
34181130:	4804      	ldr	r0, [pc, #16]	@ (34181144 <Error_Handler+0x24>)
34181132:	f001 ff05 	bl	34182f40 <HAL_GPIO_TogglePin>
//    for (volatile uint32_t i = 0; i < 1000000; i++);
    HAL_Delay(200);
34181136:	20c8      	movs	r0, #200	@ 0xc8
34181138:	f001 f962 	bl	34182400 <HAL_Delay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
3418113c:	bf00      	nop
3418113e:	e7f1      	b.n	34181124 <Error_Handler+0x4>
34181140:	56023800 	.word	0x56023800
34181144:	56021800 	.word	0x56021800

34181148 <APS256_WriteReg>:
* @param  Address Register address
* @param  Value Register value pointer
* @retval error status
*/
static uint32_t APS256_WriteReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t *Value)
{
34181148:	b580      	push	{r7, lr}
3418114a:	b098      	sub	sp, #96	@ 0x60
3418114c:	af00      	add	r7, sp, #0
3418114e:	60f8      	str	r0, [r7, #12]
34181150:	60b9      	str	r1, [r7, #8]
34181152:	607a      	str	r2, [r7, #4]
  XSPI_RegularCmdTypeDef sCommand1={0};
34181154:	f107 0314 	add.w	r3, r7, #20
34181158:	224c      	movs	r2, #76	@ 0x4c
3418115a:	2100      	movs	r1, #0
3418115c:	4618      	mov	r0, r3
3418115e:	f010 fd71 	bl	34191c44 <memset>

  /* Initialize the write register command */
  sCommand1.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34181162:	2300      	movs	r3, #0
34181164:	617b      	str	r3, [r7, #20]
  sCommand1.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
34181166:	2304      	movs	r3, #4
34181168:	623b      	str	r3, [r7, #32]
  sCommand1.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
3418116a:	2300      	movs	r3, #0
3418116c:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand1.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418116e:	2300      	movs	r3, #0
34181170:	62bb      	str	r3, [r7, #40]	@ 0x28
  sCommand1.Instruction        = WRITE_REG_CMD;
34181172:	23c0      	movs	r3, #192	@ 0xc0
34181174:	61fb      	str	r3, [r7, #28]
  sCommand1.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34181176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418117a:	633b      	str	r3, [r7, #48]	@ 0x30
  sCommand1.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3418117c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34181180:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand1.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
34181182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34181186:	63bb      	str	r3, [r7, #56]	@ 0x38
  sCommand1.Address            = Address;
34181188:	68bb      	ldr	r3, [r7, #8]
3418118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand1.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3418118c:	2300      	movs	r3, #0
3418118e:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand1.DataMode           = HAL_XSPI_DATA_8_LINES;
34181190:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34181194:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand1.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
34181196:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418119a:	657b      	str	r3, [r7, #84]	@ 0x54
  sCommand1.DataLength         = 2;
3418119c:	2302      	movs	r3, #2
3418119e:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand1.DummyCycles        = 0;
341811a0:	2300      	movs	r3, #0
341811a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand1.DQSMode            = HAL_XSPI_DQS_DISABLE;
341811a4:	2300      	movs	r3, #0
341811a6:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand1, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
341811a8:	f107 0314 	add.w	r3, r7, #20
341811ac:	f241 3288 	movw	r2, #5000	@ 0x1388
341811b0:	4619      	mov	r1, r3
341811b2:	68f8      	ldr	r0, [r7, #12]
341811b4:	f00c fe50 	bl	3418de58 <HAL_XSPI_Command>
341811b8:	4603      	mov	r3, r0
341811ba:	2b00      	cmp	r3, #0
341811bc:	d001      	beq.n	341811c2 <APS256_WriteReg+0x7a>
  {
    return HAL_ERROR;
341811be:	2301      	movs	r3, #1
341811c0:	e00b      	b.n	341811da <APS256_WriteReg+0x92>
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, (uint8_t *)(Value), HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
341811c2:	f241 3288 	movw	r2, #5000	@ 0x1388
341811c6:	6879      	ldr	r1, [r7, #4]
341811c8:	68f8      	ldr	r0, [r7, #12]
341811ca:	f00c fed5 	bl	3418df78 <HAL_XSPI_Transmit>
341811ce:	4603      	mov	r3, r0
341811d0:	2b00      	cmp	r3, #0
341811d2:	d001      	beq.n	341811d8 <APS256_WriteReg+0x90>
  {
    return HAL_ERROR;
341811d4:	2301      	movs	r3, #1
341811d6:	e000      	b.n	341811da <APS256_WriteReg+0x92>
  }

  return HAL_OK;
341811d8:	2300      	movs	r3, #0
}
341811da:	4618      	mov	r0, r3
341811dc:	3760      	adds	r7, #96	@ 0x60
341811de:	46bd      	mov	sp, r7
341811e0:	bd80      	pop	{r7, pc}

341811e2 <APS256_ReadReg>:
* @param  Value Register value pointer
* @param  LatencyCode Latency used for the access
* @retval error status
*/
static uint32_t APS256_ReadReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t *Value, uint32_t LatencyCode)
{
341811e2:	b580      	push	{r7, lr}
341811e4:	b098      	sub	sp, #96	@ 0x60
341811e6:	af00      	add	r7, sp, #0
341811e8:	60f8      	str	r0, [r7, #12]
341811ea:	60b9      	str	r1, [r7, #8]
341811ec:	607a      	str	r2, [r7, #4]
341811ee:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef sCommand={0};
341811f0:	f107 0314 	add.w	r3, r7, #20
341811f4:	224c      	movs	r2, #76	@ 0x4c
341811f6:	2100      	movs	r1, #0
341811f8:	4618      	mov	r0, r3
341811fa:	f010 fd23 	bl	34191c44 <memset>

  /* Initialize the read register command */
  sCommand.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
341811fe:	2300      	movs	r3, #0
34181200:	617b      	str	r3, [r7, #20]
  sCommand.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
34181202:	2304      	movs	r3, #4
34181204:	623b      	str	r3, [r7, #32]
  sCommand.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
34181206:	2300      	movs	r3, #0
34181208:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418120a:	2300      	movs	r3, #0
3418120c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sCommand.Instruction        = READ_REG_CMD;
3418120e:	2340      	movs	r3, #64	@ 0x40
34181210:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34181212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34181216:	633b      	str	r3, [r7, #48]	@ 0x30
  sCommand.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34181218:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418121c:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418121e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34181222:	63bb      	str	r3, [r7, #56]	@ 0x38
  sCommand.Address            = Address;
34181224:	68bb      	ldr	r3, [r7, #8]
34181226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34181228:	2300      	movs	r3, #0
3418122a:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.DataMode           = HAL_XSPI_DATA_8_LINES;
3418122c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34181230:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
34181232:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34181236:	657b      	str	r3, [r7, #84]	@ 0x54
  sCommand.DataLength         = 2;
34181238:	2302      	movs	r3, #2
3418123a:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.DummyCycles        = (LatencyCode - 1U);
3418123c:	683b      	ldr	r3, [r7, #0]
3418123e:	3b01      	subs	r3, #1
34181240:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.DQSMode            = HAL_XSPI_DQS_ENABLE;
34181242:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34181246:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34181248:	f107 0314 	add.w	r3, r7, #20
3418124c:	f241 3288 	movw	r2, #5000	@ 0x1388
34181250:	4619      	mov	r1, r3
34181252:	68f8      	ldr	r0, [r7, #12]
34181254:	f00c fe00 	bl	3418de58 <HAL_XSPI_Command>
34181258:	4603      	mov	r3, r0
3418125a:	2b00      	cmp	r3, #0
3418125c:	d001      	beq.n	34181262 <APS256_ReadReg+0x80>
  {
    return HAL_ERROR;
3418125e:	2301      	movs	r3, #1
34181260:	e00b      	b.n	3418127a <APS256_ReadReg+0x98>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, (uint8_t *)Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34181262:	f241 3288 	movw	r2, #5000	@ 0x1388
34181266:	6879      	ldr	r1, [r7, #4]
34181268:	68f8      	ldr	r0, [r7, #12]
3418126a:	f00c fef8 	bl	3418e05e <HAL_XSPI_Receive>
3418126e:	4603      	mov	r3, r0
34181270:	2b00      	cmp	r3, #0
34181272:	d001      	beq.n	34181278 <APS256_ReadReg+0x96>
  {
    return HAL_ERROR;
34181274:	2301      	movs	r3, #1
34181276:	e000      	b.n	3418127a <APS256_ReadReg+0x98>
  }

  return HAL_OK;
34181278:	2300      	movs	r3, #0
}
3418127a:	4618      	mov	r0, r3
3418127c:	3760      	adds	r7, #96	@ 0x60
3418127e:	46bd      	mov	sp, r7
34181280:	bd80      	pop	{r7, pc}
	...

34181284 <Configure_APMemory>:
* @brief  Switch from Octal Mode to Hexa Mode on the memory
* @param  None
* @retval None
*/
void Configure_APMemory(void)
{
34181284:	b580      	push	{r7, lr}
34181286:	b086      	sub	sp, #24
34181288:	af00      	add	r7, sp, #0
  /* MR0 register for read and write */
  uint8_t regW_MR0[2] = { 0x30, 0x8D }; /* To configure AP memory Latency Type and drive Strength */
3418128a:	f648 5330 	movw	r3, #36144	@ 0x8d30
3418128e:	82bb      	strh	r3, [r7, #20]
  uint8_t regR_MR0[2] = { 0 };
34181290:	2300      	movs	r3, #0
34181292:	823b      	strh	r3, [r7, #16]

  uint8_t regW_MR4[2] = { 0x20, 0xF0 }; /* To configure AP memory, Write Latency=7 up to 200MHz */
34181294:	f24f 0320 	movw	r3, #61472	@ 0xf020
34181298:	81bb      	strh	r3, [r7, #12]
  uint8_t regR_MR4[2] = { 0 };
3418129a:	2300      	movs	r3, #0
3418129c:	813b      	strh	r3, [r7, #8]

  /* MR8 register for read and write */
  uint8_t regW_MR8[2] = { 0x4B, 0x08 }; /* To configure AP memory Burst Type */
3418129e:	f640 034b 	movw	r3, #2123	@ 0x84b
341812a2:	80bb      	strh	r3, [r7, #4]
  uint8_t regR_MR8[2] = { 0 };
341812a4:	2300      	movs	r3, #0
341812a6:	803b      	strh	r3, [r7, #0]

  /* Read Latency */
  uint8_t latency = 6;
341812a8:	2306      	movs	r3, #6
341812aa:	75fb      	strb	r3, [r7, #23]

  /* Configure Read Latency and drive Strength */
  if (APS256_WriteReg(&hxspi1, MR0, regW_MR0) != HAL_OK)
341812ac:	f107 0314 	add.w	r3, r7, #20
341812b0:	461a      	mov	r2, r3
341812b2:	2100      	movs	r1, #0
341812b4:	482b      	ldr	r0, [pc, #172]	@ (34181364 <Configure_APMemory+0xe0>)
341812b6:	f7ff ff47 	bl	34181148 <APS256_WriteReg>
341812ba:	4603      	mov	r3, r0
341812bc:	2b00      	cmp	r3, #0
341812be:	d001      	beq.n	341812c4 <Configure_APMemory+0x40>
  {
    Error_Handler();
341812c0:	f7ff ff2e 	bl	34181120 <Error_Handler>
  }

  /* Check MR0 configuration */
  if (APS256_ReadReg(&hxspi1, MR0, regR_MR0, latency ) != HAL_OK)
341812c4:	7dfb      	ldrb	r3, [r7, #23]
341812c6:	f107 0210 	add.w	r2, r7, #16
341812ca:	2100      	movs	r1, #0
341812cc:	4825      	ldr	r0, [pc, #148]	@ (34181364 <Configure_APMemory+0xe0>)
341812ce:	f7ff ff88 	bl	341811e2 <APS256_ReadReg>
341812d2:	4603      	mov	r3, r0
341812d4:	2b00      	cmp	r3, #0
341812d6:	d001      	beq.n	341812dc <Configure_APMemory+0x58>
  {
    Error_Handler();
341812d8:	f7ff ff22 	bl	34181120 <Error_Handler>
  }

  /* Check MR0 configuration */
  if (regR_MR0 [0] != regW_MR0 [0])
341812dc:	7c3a      	ldrb	r2, [r7, #16]
341812de:	7d3b      	ldrb	r3, [r7, #20]
341812e0:	429a      	cmp	r2, r3
341812e2:	d001      	beq.n	341812e8 <Configure_APMemory+0x64>
  {
    Error_Handler() ;
341812e4:	f7ff ff1c 	bl	34181120 <Error_Handler>
  }

  /* Configure Write Latency */
  if (APS256_WriteReg(&hxspi1, MR4, regW_MR4) != HAL_OK)
341812e8:	f107 030c 	add.w	r3, r7, #12
341812ec:	461a      	mov	r2, r3
341812ee:	2104      	movs	r1, #4
341812f0:	481c      	ldr	r0, [pc, #112]	@ (34181364 <Configure_APMemory+0xe0>)
341812f2:	f7ff ff29 	bl	34181148 <APS256_WriteReg>
341812f6:	4603      	mov	r3, r0
341812f8:	2b00      	cmp	r3, #0
341812fa:	d001      	beq.n	34181300 <Configure_APMemory+0x7c>
  {
    Error_Handler();
341812fc:	f7ff ff10 	bl	34181120 <Error_Handler>
  }

  /* Check MR4 configuration */
  if (APS256_ReadReg(&hxspi1, MR4, regR_MR4, latency) != HAL_OK)
34181300:	7dfb      	ldrb	r3, [r7, #23]
34181302:	f107 0208 	add.w	r2, r7, #8
34181306:	2104      	movs	r1, #4
34181308:	4816      	ldr	r0, [pc, #88]	@ (34181364 <Configure_APMemory+0xe0>)
3418130a:	f7ff ff6a 	bl	341811e2 <APS256_ReadReg>
3418130e:	4603      	mov	r3, r0
34181310:	2b00      	cmp	r3, #0
34181312:	d001      	beq.n	34181318 <Configure_APMemory+0x94>
  {
    Error_Handler();
34181314:	f7ff ff04 	bl	34181120 <Error_Handler>
  }

  if (regR_MR4[0] != regW_MR4[0])
34181318:	7a3a      	ldrb	r2, [r7, #8]
3418131a:	7b3b      	ldrb	r3, [r7, #12]
3418131c:	429a      	cmp	r2, r3
3418131e:	d001      	beq.n	34181324 <Configure_APMemory+0xa0>
  {
    Error_Handler() ;
34181320:	f7ff fefe 	bl	34181120 <Error_Handler>
  }

  /* Configure Burst Length */
  if (APS256_WriteReg(&hxspi1, MR8, regW_MR8) != HAL_OK)
34181324:	1d3b      	adds	r3, r7, #4
34181326:	461a      	mov	r2, r3
34181328:	2108      	movs	r1, #8
3418132a:	480e      	ldr	r0, [pc, #56]	@ (34181364 <Configure_APMemory+0xe0>)
3418132c:	f7ff ff0c 	bl	34181148 <APS256_WriteReg>
34181330:	4603      	mov	r3, r0
34181332:	2b00      	cmp	r3, #0
34181334:	d001      	beq.n	3418133a <Configure_APMemory+0xb6>
  {
    Error_Handler();
34181336:	f7ff fef3 	bl	34181120 <Error_Handler>
  }

  /* Check MR8 configuration */
  if (APS256_ReadReg(&hxspi1, MR8, regR_MR8, 6) != HAL_OK)
3418133a:	463a      	mov	r2, r7
3418133c:	2306      	movs	r3, #6
3418133e:	2108      	movs	r1, #8
34181340:	4808      	ldr	r0, [pc, #32]	@ (34181364 <Configure_APMemory+0xe0>)
34181342:	f7ff ff4e 	bl	341811e2 <APS256_ReadReg>
34181346:	4603      	mov	r3, r0
34181348:	2b00      	cmp	r3, #0
3418134a:	d001      	beq.n	34181350 <Configure_APMemory+0xcc>
  {
    Error_Handler();
3418134c:	f7ff fee8 	bl	34181120 <Error_Handler>
  }

  if (regR_MR8[0] != regW_MR8[0])
34181350:	783a      	ldrb	r2, [r7, #0]
34181352:	793b      	ldrb	r3, [r7, #4]
34181354:	429a      	cmp	r2, r3
34181356:	d001      	beq.n	3418135c <Configure_APMemory+0xd8>
  {
    Error_Handler() ;
34181358:	f7ff fee2 	bl	34181120 <Error_Handler>
  }
}
3418135c:	bf00      	nop
3418135e:	3718      	adds	r7, #24
34181360:	46bd      	mov	sp, r7
34181362:	bd80      	pop	{r7, pc}
34181364:	341c0218 	.word	0x341c0218

34181368 <Configure_APMemory_Mapped_Mode>:
* @brief  Switch from Octal Mode to Hexa Mode on the memory
* @param  None
* @retval None
*/
void Configure_APMemory_Mapped_Mode(void)
{
34181368:	b580      	push	{r7, lr}
3418136a:	b098      	sub	sp, #96	@ 0x60
3418136c:	af00      	add	r7, sp, #0
  XSPI_RegularCmdTypeDef sCommand = {0};
3418136e:	f107 0314 	add.w	r3, r7, #20
34181372:	224c      	movs	r2, #76	@ 0x4c
34181374:	2100      	movs	r1, #0
34181376:	4618      	mov	r0, r3
34181378:	f010 fc64 	bl	34191c44 <memset>
  XSPI_MemoryMappedTypeDef sMemMappedCfg;

  /* Configure Memory Mapped mode */
  sCommand.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
3418137c:	2302      	movs	r3, #2
3418137e:	617b      	str	r3, [r7, #20]
  sCommand.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
34181380:	2304      	movs	r3, #4
34181382:	623b      	str	r3, [r7, #32]
  sCommand.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
34181384:	2300      	movs	r3, #0
34181386:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34181388:	2300      	movs	r3, #0
3418138a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sCommand.Instruction        = WRITE_CMD;
3418138c:	2380      	movs	r3, #128	@ 0x80
3418138e:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34181390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34181394:	633b      	str	r3, [r7, #48]	@ 0x30
  sCommand.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34181396:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418139a:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418139c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
341813a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sCommand.Address            = 0x0;
341813a2:	2300      	movs	r3, #0
341813a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
341813a6:	2300      	movs	r3, #0
341813a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.DataMode           = HAL_XSPI_DATA_16_LINES;
341813aa:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
341813ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
341813b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
341813b4:	657b      	str	r3, [r7, #84]	@ 0x54
  sCommand.DataLength         = BUFFERSIZE;
341813b6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
341813ba:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.DummyCycles        = DUMMY_CLOCK_CYCLES_WRITE;
341813bc:	2306      	movs	r3, #6
341813be:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.DQSMode            = HAL_XSPI_DQS_ENABLE;
341813c0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
341813c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_XSPI_Command(&hxspi1, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
341813c6:	f107 0314 	add.w	r3, r7, #20
341813ca:	f241 3288 	movw	r2, #5000	@ 0x1388
341813ce:	4619      	mov	r1, r3
341813d0:	4817      	ldr	r0, [pc, #92]	@ (34181430 <Configure_APMemory_Mapped_Mode+0xc8>)
341813d2:	f00c fd41 	bl	3418de58 <HAL_XSPI_Command>
341813d6:	4603      	mov	r3, r0
341813d8:	2b00      	cmp	r3, #0
341813da:	d001      	beq.n	341813e0 <Configure_APMemory_Mapped_Mode+0x78>
  {
    Error_Handler();
341813dc:	f7ff fea0 	bl	34181120 <Error_Handler>
  }

  sCommand.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
341813e0:	2301      	movs	r3, #1
341813e2:	617b      	str	r3, [r7, #20]
  sCommand.Instruction = READ_CMD;
341813e4:	2300      	movs	r3, #0
341813e6:	61fb      	str	r3, [r7, #28]
  sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ;
341813e8:	2306      	movs	r3, #6
341813ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.DQSMode     = HAL_XSPI_DQS_ENABLE;
341813ec:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
341813f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_XSPI_Command(&hxspi1, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
341813f2:	f107 0314 	add.w	r3, r7, #20
341813f6:	f241 3288 	movw	r2, #5000	@ 0x1388
341813fa:	4619      	mov	r1, r3
341813fc:	480c      	ldr	r0, [pc, #48]	@ (34181430 <Configure_APMemory_Mapped_Mode+0xc8>)
341813fe:	f00c fd2b 	bl	3418de58 <HAL_XSPI_Command>
34181402:	4603      	mov	r3, r0
34181404:	2b00      	cmp	r3, #0
34181406:	d001      	beq.n	3418140c <Configure_APMemory_Mapped_Mode+0xa4>
  {
    Error_Handler();
34181408:	f7ff fe8a 	bl	34181120 <Error_Handler>
  }

  sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_ENABLE;
3418140c:	2308      	movs	r3, #8
3418140e:	607b      	str	r3, [r7, #4]
  sMemMappedCfg.TimeoutPeriodClock      = 0x34;
34181410:	2334      	movs	r3, #52	@ 0x34
34181412:	60bb      	str	r3, [r7, #8]
  if (HAL_XSPI_MemoryMapped(&hxspi1, &sMemMappedCfg) != HAL_OK)
34181414:	1d3b      	adds	r3, r7, #4
34181416:	4619      	mov	r1, r3
34181418:	4805      	ldr	r0, [pc, #20]	@ (34181430 <Configure_APMemory_Mapped_Mode+0xc8>)
3418141a:	f00c ff4d 	bl	3418e2b8 <HAL_XSPI_MemoryMapped>
3418141e:	4603      	mov	r3, r0
34181420:	2b00      	cmp	r3, #0
34181422:	d001      	beq.n	34181428 <Configure_APMemory_Mapped_Mode+0xc0>
  {
    Error_Handler();
34181424:	f7ff fe7c 	bl	34181120 <Error_Handler>
  }
}
34181428:	bf00      	nop
3418142a:	3760      	adds	r7, #96	@ 0x60
3418142c:	46bd      	mov	sp, r7
3418142e:	bd80      	pop	{r7, pc}
34181430:	341c0218 	.word	0x341c0218

34181434 <Bypass_APMemory_Prescaler>:
* @brief  Bypass the Pre-scaler
* @param  None
* @retval None
*/
void Bypass_APMemory_Prescaler(void)
{
34181434:	b580      	push	{r7, lr}
34181436:	af00      	add	r7, sp, #0
  /* change, XSPI1/PSRAM CLK: 200MHz */
  HAL_XSPI_SetClockPrescaler(&hxspi1, 0);
34181438:	2100      	movs	r1, #0
3418143a:	4802      	ldr	r0, [pc, #8]	@ (34181444 <Bypass_APMemory_Prescaler+0x10>)
3418143c:	f00d f87f 	bl	3418e53e <HAL_XSPI_SetClockPrescaler>
}
34181440:	bf00      	nop
34181442:	bd80      	pop	{r7, pc}
34181444:	341c0218 	.word	0x341c0218

34181448 <Map_APMemory>:
* @brief  Map APMemory
* @param  None
* @retval None
*/
void Map_APMemory(void)
{
34181448:	b580      	push	{r7, lr}
3418144a:	af00      	add	r7, sp, #0
  Configure_APMemory();
3418144c:	f7ff ff1a 	bl	34181284 <Configure_APMemory>
  Bypass_APMemory_Prescaler();
34181450:	f7ff fff0 	bl	34181434 <Bypass_APMemory_Prescaler>
  Configure_APMemory_Mapped_Mode();
34181454:	f7ff ff88 	bl	34181368 <Configure_APMemory_Mapped_Mode>
}
34181458:	bf00      	nop
3418145a:	bd80      	pop	{r7, pc}

3418145c <HAL_MspInit>:
/**
  * @brief  Initialize the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
3418145c:	b580      	push	{r7, lr}
3418145e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  HAL_PWREx_EnableVddIO2();
34181460:	f001 fe02 	bl	34183068 <HAL_PWREx_EnableVddIO2>

  HAL_PWREx_EnableVddIO3();
34181464:	f001 fe10 	bl	34183088 <HAL_PWREx_EnableVddIO3>

  HAL_PWREx_EnableVddIO4();
34181468:	f001 fe1e 	bl	341830a8 <HAL_PWREx_EnableVddIO4>

  HAL_PWREx_EnableVddIO5();
3418146c:	f001 fe2c 	bl	341830c8 <HAL_PWREx_EnableVddIO5>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
34181470:	bf00      	nop
34181472:	bd80      	pop	{r7, pc}

34181474 <NMI_Handler>:
/**
  * @brief  This function handles NMI exception.
  * @retval None
  */
void NMI_Handler(void)
{
34181474:	b480      	push	{r7}
34181476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
34181478:	bf00      	nop
3418147a:	e7fd      	b.n	34181478 <NMI_Handler+0x4>

3418147c <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @retval None
  */
void HardFault_Handler(void)
{
3418147c:	b580      	push	{r7, lr}
3418147e:	b082      	sub	sp, #8
34181480:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
34181482:	2102      	movs	r1, #2
34181484:	4809      	ldr	r0, [pc, #36]	@ (341814ac <HardFault_Handler+0x30>)
34181486:	f001 fd5b 	bl	34182f40 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
3418148a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3418148e:	4808      	ldr	r0, [pc, #32]	@ (341814b0 <HardFault_Handler+0x34>)
34181490:	f001 fd56 	bl	34182f40 <HAL_GPIO_TogglePin>
    for (volatile uint32_t i = 0; i < 20000000; i++);
34181494:	2300      	movs	r3, #0
34181496:	607b      	str	r3, [r7, #4]
34181498:	e002      	b.n	341814a0 <HardFault_Handler+0x24>
3418149a:	687b      	ldr	r3, [r7, #4]
3418149c:	3301      	adds	r3, #1
3418149e:	607b      	str	r3, [r7, #4]
341814a0:	687b      	ldr	r3, [r7, #4]
341814a2:	4a04      	ldr	r2, [pc, #16]	@ (341814b4 <HardFault_Handler+0x38>)
341814a4:	4293      	cmp	r3, r2
341814a6:	d9f8      	bls.n	3418149a <HardFault_Handler+0x1e>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
341814a8:	e7eb      	b.n	34181482 <HardFault_Handler+0x6>
341814aa:	bf00      	nop
341814ac:	56023800 	.word	0x56023800
341814b0:	56021800 	.word	0x56021800
341814b4:	01312cff 	.word	0x01312cff

341814b8 <MemManage_Handler>:
/**
  * @brief  This function handles Memory Manage exception.
  * @retval None
  */
void MemManage_Handler(void)
{
341814b8:	b480      	push	{r7}
341814ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
341814bc:	bf00      	nop
341814be:	e7fd      	b.n	341814bc <MemManage_Handler+0x4>

341814c0 <BusFault_Handler>:
/**
  * @brief  This function handles Bus Fault exception.
  * @retval None
  */
void BusFault_Handler(void)
{
341814c0:	b480      	push	{r7}
341814c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
341814c4:	bf00      	nop
341814c6:	e7fd      	b.n	341814c4 <BusFault_Handler+0x4>

341814c8 <UsageFault_Handler>:
/**
  * @brief  This function handles Usage Fault exception.
  * @retval None
  */
void UsageFault_Handler(void)
{
341814c8:	b480      	push	{r7}
341814ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
341814cc:	bf00      	nop
341814ce:	e7fd      	b.n	341814cc <UsageFault_Handler+0x4>

341814d0 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
341814d0:	b480      	push	{r7}
341814d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
341814d4:	bf00      	nop
341814d6:	e7fd      	b.n	341814d4 <SecureFault_Handler+0x4>

341814d8 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @retval None
  */
void SVC_Handler(void)
{
341814d8:	b480      	push	{r7}
341814da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
341814dc:	bf00      	nop
341814de:	46bd      	mov	sp, r7
341814e0:	f85d 7b04 	ldr.w	r7, [sp], #4
341814e4:	4770      	bx	lr

341814e6 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @retval None
  */
void DebugMon_Handler(void)
{
341814e6:	b480      	push	{r7}
341814e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
  while (1)
341814ea:	bf00      	nop
341814ec:	e7fd      	b.n	341814ea <DebugMon_Handler+0x4>

341814ee <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @retval None
  */
void PendSV_Handler(void)
{
341814ee:	b480      	push	{r7}
341814f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
  while (1)
341814f2:	bf00      	nop
341814f4:	e7fd      	b.n	341814f2 <PendSV_Handler+0x4>

341814f6 <SysTick_Handler>:
/**
  * @brief  This function handles SysTick Handler.
  * @retval None
  */
void SysTick_Handler(void)
{
341814f6:	b580      	push	{r7, lr}
341814f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
341814fa:	f000 ff61 	bl	341823c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
341814fe:	bf00      	nop
34181500:	bd80      	pop	{r7, pc}
	...

34181504 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
34181504:	b580      	push	{r7, lr}
34181506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
34181508:	4802      	ldr	r0, [pc, #8]	@ (34181514 <TIM2_IRQHandler+0x10>)
3418150a:	f00b fa75 	bl	3418c9f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
3418150e:	bf00      	nop
34181510:	bd80      	pop	{r7, pc}
34181512:	bf00      	nop
34181514:	341c0138 	.word	0x341c0138

34181518 <XSPI1_IRQHandler>:

/**
  * @brief This function handles XSPI1 global interrupt.
  */
void XSPI1_IRQHandler(void)
{
34181518:	b580      	push	{r7, lr}
3418151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN XSPI1_IRQn 0 */

  /* USER CODE END XSPI1_IRQn 0 */
  HAL_XSPI_IRQHandler(&hxspi1);
3418151c:	4802      	ldr	r0, [pc, #8]	@ (34181528 <XSPI1_IRQHandler+0x10>)
3418151e:	f00c fb47 	bl	3418dbb0 <HAL_XSPI_IRQHandler>
  /* USER CODE BEGIN XSPI1_IRQn 1 */

  /* USER CODE END XSPI1_IRQn 1 */
}
34181522:	bf00      	nop
34181524:	bd80      	pop	{r7, pc}
34181526:	bf00      	nop
34181528:	341c0218 	.word	0x341c0218

3418152c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
3418152c:	b580      	push	{r7, lr}
3418152e:	b086      	sub	sp, #24
34181530:	af00      	add	r7, sp, #0
34181532:	60f8      	str	r0, [r7, #12]
34181534:	60b9      	str	r1, [r7, #8]
34181536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34181538:	2300      	movs	r3, #0
3418153a:	617b      	str	r3, [r7, #20]
3418153c:	e00a      	b.n	34181554 <_read+0x28>
  {
    *ptr++ = __io_getchar();
3418153e:	f3af 8000 	nop.w
34181542:	4601      	mov	r1, r0
34181544:	68bb      	ldr	r3, [r7, #8]
34181546:	1c5a      	adds	r2, r3, #1
34181548:	60ba      	str	r2, [r7, #8]
3418154a:	b2ca      	uxtb	r2, r1
3418154c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
3418154e:	697b      	ldr	r3, [r7, #20]
34181550:	3301      	adds	r3, #1
34181552:	617b      	str	r3, [r7, #20]
34181554:	697a      	ldr	r2, [r7, #20]
34181556:	687b      	ldr	r3, [r7, #4]
34181558:	429a      	cmp	r2, r3
3418155a:	dbf0      	blt.n	3418153e <_read+0x12>
  }

  return len;
3418155c:	687b      	ldr	r3, [r7, #4]
}
3418155e:	4618      	mov	r0, r3
34181560:	3718      	adds	r7, #24
34181562:	46bd      	mov	sp, r7
34181564:	bd80      	pop	{r7, pc}

34181566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
34181566:	b580      	push	{r7, lr}
34181568:	b086      	sub	sp, #24
3418156a:	af00      	add	r7, sp, #0
3418156c:	60f8      	str	r0, [r7, #12]
3418156e:	60b9      	str	r1, [r7, #8]
34181570:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34181572:	2300      	movs	r3, #0
34181574:	617b      	str	r3, [r7, #20]
34181576:	e009      	b.n	3418158c <_write+0x26>
  {
    __io_putchar(*ptr++);
34181578:	68bb      	ldr	r3, [r7, #8]
3418157a:	1c5a      	adds	r2, r3, #1
3418157c:	60ba      	str	r2, [r7, #8]
3418157e:	781b      	ldrb	r3, [r3, #0]
34181580:	4618      	mov	r0, r3
34181582:	f7ff fb61 	bl	34180c48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34181586:	697b      	ldr	r3, [r7, #20]
34181588:	3301      	adds	r3, #1
3418158a:	617b      	str	r3, [r7, #20]
3418158c:	697a      	ldr	r2, [r7, #20]
3418158e:	687b      	ldr	r3, [r7, #4]
34181590:	429a      	cmp	r2, r3
34181592:	dbf1      	blt.n	34181578 <_write+0x12>
  }
  return len;
34181594:	687b      	ldr	r3, [r7, #4]
}
34181596:	4618      	mov	r0, r3
34181598:	3718      	adds	r7, #24
3418159a:	46bd      	mov	sp, r7
3418159c:	bd80      	pop	{r7, pc}

3418159e <_close>:

int _close(int file)
{
3418159e:	b480      	push	{r7}
341815a0:	b083      	sub	sp, #12
341815a2:	af00      	add	r7, sp, #0
341815a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
341815a6:	f04f 33ff 	mov.w	r3, #4294967295
}
341815aa:	4618      	mov	r0, r3
341815ac:	370c      	adds	r7, #12
341815ae:	46bd      	mov	sp, r7
341815b0:	f85d 7b04 	ldr.w	r7, [sp], #4
341815b4:	4770      	bx	lr

341815b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
341815b6:	b480      	push	{r7}
341815b8:	b083      	sub	sp, #12
341815ba:	af00      	add	r7, sp, #0
341815bc:	6078      	str	r0, [r7, #4]
341815be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
341815c0:	683b      	ldr	r3, [r7, #0]
341815c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
341815c6:	605a      	str	r2, [r3, #4]
  return 0;
341815c8:	2300      	movs	r3, #0
}
341815ca:	4618      	mov	r0, r3
341815cc:	370c      	adds	r7, #12
341815ce:	46bd      	mov	sp, r7
341815d0:	f85d 7b04 	ldr.w	r7, [sp], #4
341815d4:	4770      	bx	lr

341815d6 <_isatty>:

int _isatty(int file)
{
341815d6:	b480      	push	{r7}
341815d8:	b083      	sub	sp, #12
341815da:	af00      	add	r7, sp, #0
341815dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
341815de:	2301      	movs	r3, #1
}
341815e0:	4618      	mov	r0, r3
341815e2:	370c      	adds	r7, #12
341815e4:	46bd      	mov	sp, r7
341815e6:	f85d 7b04 	ldr.w	r7, [sp], #4
341815ea:	4770      	bx	lr

341815ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
341815ec:	b480      	push	{r7}
341815ee:	b085      	sub	sp, #20
341815f0:	af00      	add	r7, sp, #0
341815f2:	60f8      	str	r0, [r7, #12]
341815f4:	60b9      	str	r1, [r7, #8]
341815f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
341815f8:	2300      	movs	r3, #0
}
341815fa:	4618      	mov	r0, r3
341815fc:	3714      	adds	r7, #20
341815fe:	46bd      	mov	sp, r7
34181600:	f85d 7b04 	ldr.w	r7, [sp], #4
34181604:	4770      	bx	lr
	...

34181608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
34181608:	b580      	push	{r7, lr}
3418160a:	b086      	sub	sp, #24
3418160c:	af00      	add	r7, sp, #0
3418160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
34181610:	4a14      	ldr	r2, [pc, #80]	@ (34181664 <_sbrk+0x5c>)
34181612:	4b15      	ldr	r3, [pc, #84]	@ (34181668 <_sbrk+0x60>)
34181614:	1ad3      	subs	r3, r2, r3
34181616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
34181618:	697b      	ldr	r3, [r7, #20]
3418161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
3418161c:	4b13      	ldr	r3, [pc, #76]	@ (3418166c <_sbrk+0x64>)
3418161e:	681b      	ldr	r3, [r3, #0]
34181620:	2b00      	cmp	r3, #0
34181622:	d102      	bne.n	3418162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
34181624:	4b11      	ldr	r3, [pc, #68]	@ (3418166c <_sbrk+0x64>)
34181626:	4a12      	ldr	r2, [pc, #72]	@ (34181670 <_sbrk+0x68>)
34181628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
3418162a:	4b10      	ldr	r3, [pc, #64]	@ (3418166c <_sbrk+0x64>)
3418162c:	681a      	ldr	r2, [r3, #0]
3418162e:	687b      	ldr	r3, [r7, #4]
34181630:	4413      	add	r3, r2
34181632:	693a      	ldr	r2, [r7, #16]
34181634:	429a      	cmp	r2, r3
34181636:	d207      	bcs.n	34181648 <_sbrk+0x40>
  {
    errno = ENOMEM;
34181638:	f010 fb52 	bl	34191ce0 <__errno>
3418163c:	4603      	mov	r3, r0
3418163e:	220c      	movs	r2, #12
34181640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
34181642:	f04f 33ff 	mov.w	r3, #4294967295
34181646:	e009      	b.n	3418165c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
34181648:	4b08      	ldr	r3, [pc, #32]	@ (3418166c <_sbrk+0x64>)
3418164a:	681b      	ldr	r3, [r3, #0]
3418164c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
3418164e:	4b07      	ldr	r3, [pc, #28]	@ (3418166c <_sbrk+0x64>)
34181650:	681a      	ldr	r2, [r3, #0]
34181652:	687b      	ldr	r3, [r7, #4]
34181654:	4413      	add	r3, r2
34181656:	4a05      	ldr	r2, [pc, #20]	@ (3418166c <_sbrk+0x64>)
34181658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
3418165a:	68fb      	ldr	r3, [r7, #12]
}
3418165c:	4618      	mov	r0, r3
3418165e:	3718      	adds	r7, #24
34181660:	46bd      	mov	sp, r7
34181662:	bd80      	pop	{r7, pc}
34181664:	34200000 	.word	0x34200000
34181668:	00001000 	.word	0x00001000
3418166c:	341c0134 	.word	0x341c0134
34181670:	341c05c0 	.word	0x341c05c0

34181674 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
34181674:	b480      	push	{r7}
34181676:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34181678:	4b6a      	ldr	r3, [pc, #424]	@ (34181824 <SystemInit+0x1b0>)
3418167a:	4a6b      	ldr	r2, [pc, #428]	@ (34181828 <SystemInit+0x1b4>)
3418167c:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3418167e:	4b6b      	ldr	r3, [pc, #428]	@ (3418182c <SystemInit+0x1b8>)
34181680:	2201      	movs	r2, #1
34181682:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34181686:	4b69      	ldr	r3, [pc, #420]	@ (3418182c <SystemInit+0x1b8>)
34181688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418168c:	461a      	mov	r2, r3
3418168e:	2301      	movs	r3, #1
34181690:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
34181694:	4b65      	ldr	r3, [pc, #404]	@ (3418182c <SystemInit+0x1b8>)
34181696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418169a:	461a      	mov	r2, r3
3418169c:	2301      	movs	r3, #1
3418169e:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
341816a2:	4b63      	ldr	r3, [pc, #396]	@ (34181830 <SystemInit+0x1bc>)
341816a4:	2200      	movs	r2, #0
341816a6:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341816a8:	4b61      	ldr	r3, [pc, #388]	@ (34181830 <SystemInit+0x1bc>)
341816aa:	2200      	movs	r2, #0
341816ac:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341816ae:	4b60      	ldr	r3, [pc, #384]	@ (34181830 <SystemInit+0x1bc>)
341816b0:	2200      	movs	r2, #0
341816b2:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
341816b4:	4b5e      	ldr	r3, [pc, #376]	@ (34181830 <SystemInit+0x1bc>)
341816b6:	2201      	movs	r2, #1
341816b8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341816ba:	4b5d      	ldr	r3, [pc, #372]	@ (34181830 <SystemInit+0x1bc>)
341816bc:	2200      	movs	r2, #0
341816be:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341816c0:	4b5b      	ldr	r3, [pc, #364]	@ (34181830 <SystemInit+0x1bc>)
341816c2:	2200      	movs	r2, #0
341816c4:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
341816c6:	4b5a      	ldr	r3, [pc, #360]	@ (34181830 <SystemInit+0x1bc>)
341816c8:	2202      	movs	r2, #2
341816ca:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341816cc:	4b58      	ldr	r3, [pc, #352]	@ (34181830 <SystemInit+0x1bc>)
341816ce:	2200      	movs	r2, #0
341816d0:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341816d2:	4b57      	ldr	r3, [pc, #348]	@ (34181830 <SystemInit+0x1bc>)
341816d4:	2200      	movs	r2, #0
341816d6:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
341816d8:	4b55      	ldr	r3, [pc, #340]	@ (34181830 <SystemInit+0x1bc>)
341816da:	2203      	movs	r2, #3
341816dc:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341816de:	4b54      	ldr	r3, [pc, #336]	@ (34181830 <SystemInit+0x1bc>)
341816e0:	2200      	movs	r2, #0
341816e2:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341816e4:	4b52      	ldr	r3, [pc, #328]	@ (34181830 <SystemInit+0x1bc>)
341816e6:	2200      	movs	r2, #0
341816e8:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
341816ea:	4b51      	ldr	r3, [pc, #324]	@ (34181830 <SystemInit+0x1bc>)
341816ec:	2204      	movs	r2, #4
341816ee:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341816f0:	4b4f      	ldr	r3, [pc, #316]	@ (34181830 <SystemInit+0x1bc>)
341816f2:	2200      	movs	r2, #0
341816f4:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341816f6:	4b4e      	ldr	r3, [pc, #312]	@ (34181830 <SystemInit+0x1bc>)
341816f8:	2200      	movs	r2, #0
341816fa:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
341816fc:	4b4c      	ldr	r3, [pc, #304]	@ (34181830 <SystemInit+0x1bc>)
341816fe:	2205      	movs	r2, #5
34181700:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34181702:	4b4b      	ldr	r3, [pc, #300]	@ (34181830 <SystemInit+0x1bc>)
34181704:	2200      	movs	r2, #0
34181706:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34181708:	4b49      	ldr	r3, [pc, #292]	@ (34181830 <SystemInit+0x1bc>)
3418170a:	2200      	movs	r2, #0
3418170c:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
3418170e:	4b48      	ldr	r3, [pc, #288]	@ (34181830 <SystemInit+0x1bc>)
34181710:	2206      	movs	r2, #6
34181712:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34181714:	4b46      	ldr	r3, [pc, #280]	@ (34181830 <SystemInit+0x1bc>)
34181716:	2200      	movs	r2, #0
34181718:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418171a:	4b45      	ldr	r3, [pc, #276]	@ (34181830 <SystemInit+0x1bc>)
3418171c:	2200      	movs	r2, #0
3418171e:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
34181720:	4b43      	ldr	r3, [pc, #268]	@ (34181830 <SystemInit+0x1bc>)
34181722:	2207      	movs	r2, #7
34181724:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34181726:	4b42      	ldr	r3, [pc, #264]	@ (34181830 <SystemInit+0x1bc>)
34181728:	2200      	movs	r2, #0
3418172a:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418172c:	4b40      	ldr	r3, [pc, #256]	@ (34181830 <SystemInit+0x1bc>)
3418172e:	2200      	movs	r2, #0
34181730:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34181732:	4b3e      	ldr	r3, [pc, #248]	@ (3418182c <SystemInit+0x1b8>)
34181734:	2201      	movs	r2, #1
34181736:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
3418173a:	4b3c      	ldr	r3, [pc, #240]	@ (3418182c <SystemInit+0x1b8>)
3418173c:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34181740:	4b38      	ldr	r3, [pc, #224]	@ (34181824 <SystemInit+0x1b0>)
34181742:	4a3c      	ldr	r2, [pc, #240]	@ (34181834 <SystemInit+0x1c0>)
34181744:	689b      	ldr	r3, [r3, #8]
34181746:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34181748:	4b3b      	ldr	r3, [pc, #236]	@ (34181838 <SystemInit+0x1c4>)
3418174a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418174c:	4a3a      	ldr	r2, [pc, #232]	@ (34181838 <SystemInit+0x1c4>)
3418174e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34181752:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
34181754:	4b38      	ldr	r3, [pc, #224]	@ (34181838 <SystemInit+0x1c4>)
34181756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34181758:	4a37      	ldr	r2, [pc, #220]	@ (34181838 <SystemInit+0x1c4>)
3418175a:	f043 0310 	orr.w	r3, r3, #16
3418175e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34181760:	4b35      	ldr	r3, [pc, #212]	@ (34181838 <SystemInit+0x1c4>)
34181762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
34181764:	4b31      	ldr	r3, [pc, #196]	@ (3418182c <SystemInit+0x1b8>)
34181766:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
3418176a:	4a30      	ldr	r2, [pc, #192]	@ (3418182c <SystemInit+0x1b8>)
3418176c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34181770:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
34181774:	4b2d      	ldr	r3, [pc, #180]	@ (3418182c <SystemInit+0x1b8>)
34181776:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
3418177a:	4a2c      	ldr	r2, [pc, #176]	@ (3418182c <SystemInit+0x1b8>)
3418177c:	f043 0310 	orr.w	r3, r3, #16
34181780:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34181784:	4b29      	ldr	r3, [pc, #164]	@ (3418182c <SystemInit+0x1b8>)
34181786:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
3418178a:	4b28      	ldr	r3, [pc, #160]	@ (3418182c <SystemInit+0x1b8>)
3418178c:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34181790:	4a26      	ldr	r2, [pc, #152]	@ (3418182c <SystemInit+0x1b8>)
34181792:	f023 0310 	bic.w	r3, r3, #16
34181796:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
3418179a:	4b24      	ldr	r3, [pc, #144]	@ (3418182c <SystemInit+0x1b8>)
3418179c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
341817a0:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
341817a4:	4b21      	ldr	r3, [pc, #132]	@ (3418182c <SystemInit+0x1b8>)
341817a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341817aa:	461a      	mov	r2, r3
341817ac:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
341817b0:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
341817b4:	4b1d      	ldr	r3, [pc, #116]	@ (3418182c <SystemInit+0x1b8>)
341817b6:	2201      	movs	r2, #1
341817b8:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
341817bc:	4b1b      	ldr	r3, [pc, #108]	@ (3418182c <SystemInit+0x1b8>)
341817be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341817c2:	461a      	mov	r2, r3
341817c4:	2301      	movs	r3, #1
341817c6:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
341817ca:	4b18      	ldr	r3, [pc, #96]	@ (3418182c <SystemInit+0x1b8>)
341817cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341817d0:	461a      	mov	r2, r3
341817d2:	2301      	movs	r3, #1
341817d4:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
341817d8:	4b14      	ldr	r3, [pc, #80]	@ (3418182c <SystemInit+0x1b8>)
341817da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341817de:	461a      	mov	r2, r3
341817e0:	2340      	movs	r3, #64	@ 0x40
341817e2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
341817e6:	4b13      	ldr	r3, [pc, #76]	@ (34181834 <SystemInit+0x1c0>)
341817e8:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
341817ea:	4b10      	ldr	r3, [pc, #64]	@ (3418182c <SystemInit+0x1b8>)
341817ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341817f0:	461a      	mov	r2, r3
341817f2:	2301      	movs	r3, #1
341817f4:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
341817f8:	4b0a      	ldr	r3, [pc, #40]	@ (34181824 <SystemInit+0x1b0>)
341817fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341817fe:	4a09      	ldr	r2, [pc, #36]	@ (34181824 <SystemInit+0x1b0>)
34181800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34181804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34181808:	4b0c      	ldr	r3, [pc, #48]	@ (3418183c <SystemInit+0x1c8>)
3418180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418180e:	4a0b      	ldr	r2, [pc, #44]	@ (3418183c <SystemInit+0x1c8>)
34181810:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34181814:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34181818:	bf00      	nop
3418181a:	46bd      	mov	sp, r7
3418181c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181820:	4770      	bx	lr
34181822:	bf00      	nop
34181824:	e000ed00 	.word	0xe000ed00
34181828:	34180400 	.word	0x34180400
3418182c:	56028000 	.word	0x56028000
34181830:	e000edd0 	.word	0xe000edd0
34181834:	56008000 	.word	0x56008000
34181838:	56024800 	.word	0x56024800
3418183c:	e002ed00 	.word	0xe002ed00

34181840 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
34181840:	b480      	push	{r7}
34181842:	b08d      	sub	sp, #52	@ 0x34
34181844:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
34181846:	2300      	movs	r3, #0
34181848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
3418184a:	2300      	movs	r3, #0
3418184c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
3418184e:	2300      	movs	r3, #0
34181850:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
34181852:	2300      	movs	r3, #0
34181854:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
34181856:	2300      	movs	r3, #0
34181858:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
3418185a:	2300      	movs	r3, #0
3418185c:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3418185e:	4b9b      	ldr	r3, [pc, #620]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
34181860:	6a1b      	ldr	r3, [r3, #32]
34181862:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34181866:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418186a:	d029      	beq.n	341818c0 <SystemCoreClockUpdate+0x80>
3418186c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34181870:	f200 8180 	bhi.w	34181b74 <SystemCoreClockUpdate+0x334>
34181874:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34181878:	d01f      	beq.n	341818ba <SystemCoreClockUpdate+0x7a>
3418187a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418187e:	f200 8179 	bhi.w	34181b74 <SystemCoreClockUpdate+0x334>
34181882:	2b00      	cmp	r3, #0
34181884:	d003      	beq.n	3418188e <SystemCoreClockUpdate+0x4e>
34181886:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418188a:	d00a      	beq.n	341818a2 <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
3418188c:	e172      	b.n	34181b74 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3418188e:	4b8f      	ldr	r3, [pc, #572]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
34181890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181892:	09db      	lsrs	r3, r3, #7
34181894:	f003 0303 	and.w	r3, r3, #3
34181898:	4a8d      	ldr	r2, [pc, #564]	@ (34181ad0 <SystemCoreClockUpdate+0x290>)
3418189a:	fa22 f303 	lsr.w	r3, r2, r3
3418189e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341818a0:	e169      	b.n	34181b76 <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
341818a2:	4b8a      	ldr	r3, [pc, #552]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
341818a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341818a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341818aa:	2b00      	cmp	r3, #0
341818ac:	d102      	bne.n	341818b4 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
341818ae:	4b89      	ldr	r3, [pc, #548]	@ (34181ad4 <SystemCoreClockUpdate+0x294>)
341818b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341818b2:	e160      	b.n	34181b76 <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
341818b4:	4b88      	ldr	r3, [pc, #544]	@ (34181ad8 <SystemCoreClockUpdate+0x298>)
341818b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341818b8:	e15d      	b.n	34181b76 <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
341818ba:	4b88      	ldr	r3, [pc, #544]	@ (34181adc <SystemCoreClockUpdate+0x29c>)
341818bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341818be:	e15a      	b.n	34181b76 <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
341818c0:	4b82      	ldr	r3, [pc, #520]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
341818c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341818c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
341818ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341818ce:	d066      	beq.n	3418199e <SystemCoreClockUpdate+0x15e>
341818d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341818d4:	f200 8091 	bhi.w	341819fa <SystemCoreClockUpdate+0x1ba>
341818d8:	2b00      	cmp	r3, #0
341818da:	d003      	beq.n	341818e4 <SystemCoreClockUpdate+0xa4>
341818dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341818e0:	d02f      	beq.n	34181942 <SystemCoreClockUpdate+0x102>
341818e2:	e08a      	b.n	341819fa <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
341818e4:	4b79      	ldr	r3, [pc, #484]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
341818e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341818ea:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
341818ec:	68fb      	ldr	r3, [r7, #12]
341818ee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341818f2:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
341818f4:	68fb      	ldr	r3, [r7, #12]
341818f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341818fa:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341818fc:	693b      	ldr	r3, [r7, #16]
341818fe:	2b00      	cmp	r3, #0
34181900:	f040 80a9 	bne.w	34181a56 <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
34181904:	68fb      	ldr	r3, [r7, #12]
34181906:	0d1b      	lsrs	r3, r3, #20
34181908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3418190c:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
3418190e:	68fb      	ldr	r3, [r7, #12]
34181910:	0a1b      	lsrs	r3, r3, #8
34181912:	f3c3 030b 	ubfx	r3, r3, #0, #12
34181916:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34181918:	4b6c      	ldr	r3, [pc, #432]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
3418191a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3418191e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34181922:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34181924:	4b69      	ldr	r3, [pc, #420]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
34181926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418192a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
3418192c:	68fb      	ldr	r3, [r7, #12]
3418192e:	0edb      	lsrs	r3, r3, #27
34181930:	f003 0307 	and.w	r3, r3, #7
34181934:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
34181936:	68fb      	ldr	r3, [r7, #12]
34181938:	0e1b      	lsrs	r3, r3, #24
3418193a:	f003 0307 	and.w	r3, r3, #7
3418193e:	61bb      	str	r3, [r7, #24]
      break;
34181940:	e089      	b.n	34181a56 <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
34181942:	4b62      	ldr	r3, [pc, #392]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
34181944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34181948:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
3418194a:	68fb      	ldr	r3, [r7, #12]
3418194c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34181950:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
34181952:	68fb      	ldr	r3, [r7, #12]
34181954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34181958:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3418195a:	693b      	ldr	r3, [r7, #16]
3418195c:	2b00      	cmp	r3, #0
3418195e:	d17c      	bne.n	34181a5a <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
34181960:	68fb      	ldr	r3, [r7, #12]
34181962:	0d1b      	lsrs	r3, r3, #20
34181964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34181968:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
3418196a:	68fb      	ldr	r3, [r7, #12]
3418196c:	0a1b      	lsrs	r3, r3, #8
3418196e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34181972:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34181974:	4b55      	ldr	r3, [pc, #340]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
34181976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418197a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3418197e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34181980:	4b52      	ldr	r3, [pc, #328]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
34181982:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34181986:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
34181988:	68fb      	ldr	r3, [r7, #12]
3418198a:	0edb      	lsrs	r3, r3, #27
3418198c:	f003 0307 	and.w	r3, r3, #7
34181990:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
34181992:	68fb      	ldr	r3, [r7, #12]
34181994:	0e1b      	lsrs	r3, r3, #24
34181996:	f003 0307 	and.w	r3, r3, #7
3418199a:	61bb      	str	r3, [r7, #24]
      break;
3418199c:	e05d      	b.n	34181a5a <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
3418199e:	4b4b      	ldr	r3, [pc, #300]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
341819a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341819a4:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
341819a6:	68fb      	ldr	r3, [r7, #12]
341819a8:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341819ac:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
341819ae:	68fb      	ldr	r3, [r7, #12]
341819b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341819b4:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341819b6:	693b      	ldr	r3, [r7, #16]
341819b8:	2b00      	cmp	r3, #0
341819ba:	d150      	bne.n	34181a5e <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
341819bc:	68fb      	ldr	r3, [r7, #12]
341819be:	0d1b      	lsrs	r3, r3, #20
341819c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341819c4:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
341819c6:	68fb      	ldr	r3, [r7, #12]
341819c8:	0a1b      	lsrs	r3, r3, #8
341819ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
341819ce:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
341819d0:	4b3e      	ldr	r3, [pc, #248]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
341819d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
341819d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341819da:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
341819dc:	4b3b      	ldr	r3, [pc, #236]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
341819de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341819e2:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
341819e4:	68fb      	ldr	r3, [r7, #12]
341819e6:	0edb      	lsrs	r3, r3, #27
341819e8:	f003 0307 	and.w	r3, r3, #7
341819ec:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
341819ee:	68fb      	ldr	r3, [r7, #12]
341819f0:	0e1b      	lsrs	r3, r3, #24
341819f2:	f003 0307 	and.w	r3, r3, #7
341819f6:	61bb      	str	r3, [r7, #24]
      break;
341819f8:	e031      	b.n	34181a5e <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
341819fa:	4b34      	ldr	r3, [pc, #208]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
341819fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34181a00:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34181a02:	68fb      	ldr	r3, [r7, #12]
34181a04:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34181a08:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
34181a0a:	68fb      	ldr	r3, [r7, #12]
34181a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34181a10:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34181a12:	693b      	ldr	r3, [r7, #16]
34181a14:	2b00      	cmp	r3, #0
34181a16:	d124      	bne.n	34181a62 <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34181a18:	68fb      	ldr	r3, [r7, #12]
34181a1a:	0d1b      	lsrs	r3, r3, #20
34181a1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34181a20:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
34181a22:	68fb      	ldr	r3, [r7, #12]
34181a24:	0a1b      	lsrs	r3, r3, #8
34181a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
34181a2a:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34181a2c:	4b27      	ldr	r3, [pc, #156]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
34181a2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34181a32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34181a36:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34181a38:	4b24      	ldr	r3, [pc, #144]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
34181a3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34181a3e:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34181a40:	68fb      	ldr	r3, [r7, #12]
34181a42:	0edb      	lsrs	r3, r3, #27
34181a44:	f003 0307 	and.w	r3, r3, #7
34181a48:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34181a4a:	68fb      	ldr	r3, [r7, #12]
34181a4c:	0e1b      	lsrs	r3, r3, #24
34181a4e:	f003 0307 	and.w	r3, r3, #7
34181a52:	61bb      	str	r3, [r7, #24]
      break;
34181a54:	e005      	b.n	34181a62 <SystemCoreClockUpdate+0x222>
      break;
34181a56:	bf00      	nop
34181a58:	e004      	b.n	34181a64 <SystemCoreClockUpdate+0x224>
      break;
34181a5a:	bf00      	nop
34181a5c:	e002      	b.n	34181a64 <SystemCoreClockUpdate+0x224>
      break;
34181a5e:	bf00      	nop
34181a60:	e000      	b.n	34181a64 <SystemCoreClockUpdate+0x224>
      break;
34181a62:	bf00      	nop
    switch (pllsource)
34181a64:	697b      	ldr	r3, [r7, #20]
34181a66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34181a6a:	d02c      	beq.n	34181ac6 <SystemCoreClockUpdate+0x286>
34181a6c:	697b      	ldr	r3, [r7, #20]
34181a6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34181a72:	d839      	bhi.n	34181ae8 <SystemCoreClockUpdate+0x2a8>
34181a74:	697b      	ldr	r3, [r7, #20]
34181a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181a7a:	d021      	beq.n	34181ac0 <SystemCoreClockUpdate+0x280>
34181a7c:	697b      	ldr	r3, [r7, #20]
34181a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181a82:	d831      	bhi.n	34181ae8 <SystemCoreClockUpdate+0x2a8>
34181a84:	697b      	ldr	r3, [r7, #20]
34181a86:	2b00      	cmp	r3, #0
34181a88:	d004      	beq.n	34181a94 <SystemCoreClockUpdate+0x254>
34181a8a:	697b      	ldr	r3, [r7, #20]
34181a8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34181a90:	d00a      	beq.n	34181aa8 <SystemCoreClockUpdate+0x268>
      break;
34181a92:	e029      	b.n	34181ae8 <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34181a94:	4b0d      	ldr	r3, [pc, #52]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
34181a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181a98:	09db      	lsrs	r3, r3, #7
34181a9a:	f003 0303 	and.w	r3, r3, #3
34181a9e:	4a0c      	ldr	r2, [pc, #48]	@ (34181ad0 <SystemCoreClockUpdate+0x290>)
34181aa0:	fa22 f303 	lsr.w	r3, r2, r3
34181aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181aa6:	e020      	b.n	34181aea <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34181aa8:	4b08      	ldr	r3, [pc, #32]	@ (34181acc <SystemCoreClockUpdate+0x28c>)
34181aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34181aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34181ab0:	2b00      	cmp	r3, #0
34181ab2:	d102      	bne.n	34181aba <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
34181ab4:	4b07      	ldr	r3, [pc, #28]	@ (34181ad4 <SystemCoreClockUpdate+0x294>)
34181ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181ab8:	e017      	b.n	34181aea <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
34181aba:	4b07      	ldr	r3, [pc, #28]	@ (34181ad8 <SystemCoreClockUpdate+0x298>)
34181abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181abe:	e014      	b.n	34181aea <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
34181ac0:	4b06      	ldr	r3, [pc, #24]	@ (34181adc <SystemCoreClockUpdate+0x29c>)
34181ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181ac4:	e011      	b.n	34181aea <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34181ac6:	4b06      	ldr	r3, [pc, #24]	@ (34181ae0 <SystemCoreClockUpdate+0x2a0>)
34181ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181aca:	e00e      	b.n	34181aea <SystemCoreClockUpdate+0x2aa>
34181acc:	56028000 	.word	0x56028000
34181ad0:	03d09000 	.word	0x03d09000
34181ad4:	003d0900 	.word	0x003d0900
34181ad8:	00f42400 	.word	0x00f42400
34181adc:	02dc6c00 	.word	0x02dc6c00
34181ae0:	00bb8000 	.word	0x00bb8000
34181ae4:	4b800000 	.word	0x4b800000
      break;
34181ae8:	bf00      	nop
    if (pllbypass == 0U)
34181aea:	693b      	ldr	r3, [r7, #16]
34181aec:	2b00      	cmp	r3, #0
34181aee:	d134      	bne.n	34181b5a <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34181af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34181af2:	ee07 3a90 	vmov	s15, r3
34181af6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34181afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34181afc:	ee07 3a90 	vmov	s15, r3
34181b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
34181b04:	6a3b      	ldr	r3, [r7, #32]
34181b06:	ee07 3a90 	vmov	s15, r3
34181b0a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34181b0e:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 34181ae4 <SystemCoreClockUpdate+0x2a4>
34181b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
34181b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
34181b1a:	ee67 6a27 	vmul.f32	s13, s14, s15
34181b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34181b20:	ee07 3a90 	vmov	s15, r3
34181b24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34181b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
34181b2c:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34181b30:	69fb      	ldr	r3, [r7, #28]
34181b32:	ee07 3a90 	vmov	s15, r3
34181b36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34181b3a:	69bb      	ldr	r3, [r7, #24]
34181b3c:	ee07 3a90 	vmov	s15, r3
34181b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
34181b44:	ee27 7a27 	vmul.f32	s14, s14, s15
34181b48:	edd7 6a02 	vldr	s13, [r7, #8]
34181b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
34181b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34181b54:	ee17 3a90 	vmov	r3, s15
34181b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34181b5a:	4b0b      	ldr	r3, [pc, #44]	@ (34181b88 <SystemCoreClockUpdate+0x348>)
34181b5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34181b60:	0c1b      	lsrs	r3, r3, #16
34181b62:	b2db      	uxtb	r3, r3
34181b64:	3301      	adds	r3, #1
34181b66:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
34181b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34181b6a:	687b      	ldr	r3, [r7, #4]
34181b6c:	fbb2 f3f3 	udiv	r3, r2, r3
34181b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34181b72:	e000      	b.n	34181b76 <SystemCoreClockUpdate+0x336>
    break;
34181b74:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
34181b76:	4a05      	ldr	r2, [pc, #20]	@ (34181b8c <SystemCoreClockUpdate+0x34c>)
34181b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34181b7a:	6013      	str	r3, [r2, #0]
}
34181b7c:	bf00      	nop
34181b7e:	3734      	adds	r7, #52	@ 0x34
34181b80:	46bd      	mov	sp, r7
34181b82:	f85d 7b04 	ldr.w	r7, [sp], #4
34181b86:	4770      	bx	lr
34181b88:	56028000 	.word	0x56028000
34181b8c:	341c0000 	.word	0x341c0000

34181b90 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34181b90:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34181b94:	b588      	push	{r3, r7, lr}
34181b96:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
34181b98:	f7ff fe52 	bl	34181840 <SystemCoreClockUpdate>

  return SystemCoreClock;
34181b9c:	4b06      	ldr	r3, [pc, #24]	@ (34181bb8 <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
34181b9e:	681b      	ldr	r3, [r3, #0]
}
34181ba0:	4618      	mov	r0, r3
34181ba2:	46bd      	mov	sp, r7
34181ba4:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
34181ba8:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34181bac:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34181bb0:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34181bb4:	4774      	bxns	lr
34181bb6:	bf00      	nop
34181bb8:	341c0000 	.word	0x341c0000

34181bbc <LL_AHB4_GRP1_EnableClock>:
{
34181bbc:	b480      	push	{r7}
34181bbe:	b085      	sub	sp, #20
34181bc0:	af00      	add	r7, sp, #0
34181bc2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34181bc4:	4a07      	ldr	r2, [pc, #28]	@ (34181be4 <LL_AHB4_GRP1_EnableClock+0x28>)
34181bc6:	687b      	ldr	r3, [r7, #4]
34181bc8:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34181bcc:	4b05      	ldr	r3, [pc, #20]	@ (34181be4 <LL_AHB4_GRP1_EnableClock+0x28>)
34181bce:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34181bd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181bd4:	68fb      	ldr	r3, [r7, #12]
}
34181bd6:	bf00      	nop
34181bd8:	3714      	adds	r7, #20
34181bda:	46bd      	mov	sp, r7
34181bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
34181be0:	4770      	bx	lr
34181be2:	bf00      	nop
34181be4:	56028000 	.word	0x56028000

34181be8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_UART9
  *         @arg @ref LL_APB2_GRP1_PERIPH_USART10
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
34181be8:	b480      	push	{r7}
34181bea:	b085      	sub	sp, #20
34181bec:	af00      	add	r7, sp, #0
34181bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34181bf0:	4a07      	ldr	r2, [pc, #28]	@ (34181c10 <LL_APB2_GRP1_EnableClock+0x28>)
34181bf2:	687b      	ldr	r3, [r7, #4]
34181bf4:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34181bf8:	4b05      	ldr	r3, [pc, #20]	@ (34181c10 <LL_APB2_GRP1_EnableClock+0x28>)
34181bfa:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34181bfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181c00:	68fb      	ldr	r3, [r7, #12]
}
34181c02:	bf00      	nop
34181c04:	3714      	adds	r7, #20
34181c06:	46bd      	mov	sp, r7
34181c08:	f85d 7b04 	ldr.w	r7, [sp], #4
34181c0c:	4770      	bx	lr
34181c0e:	bf00      	nop
34181c10:	56028000 	.word	0x56028000

34181c14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
34181c14:	b580      	push	{r7, lr}
34181c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
34181c18:	4b22      	ldr	r3, [pc, #136]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c1a:	4a23      	ldr	r2, [pc, #140]	@ (34181ca8 <MX_USART1_UART_Init+0x94>)
34181c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
34181c1e:	4b21      	ldr	r3, [pc, #132]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
34181c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
34181c26:	4b1f      	ldr	r3, [pc, #124]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c28:	2200      	movs	r2, #0
34181c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
34181c2c:	4b1d      	ldr	r3, [pc, #116]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c2e:	2200      	movs	r2, #0
34181c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
34181c32:	4b1c      	ldr	r3, [pc, #112]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c34:	2200      	movs	r2, #0
34181c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
34181c38:	4b1a      	ldr	r3, [pc, #104]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c3a:	220c      	movs	r2, #12
34181c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
34181c3e:	4b19      	ldr	r3, [pc, #100]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c40:	2200      	movs	r2, #0
34181c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
34181c44:	4b17      	ldr	r3, [pc, #92]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c46:	2200      	movs	r2, #0
34181c48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
34181c4a:	4b16      	ldr	r3, [pc, #88]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c4c:	2200      	movs	r2, #0
34181c4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
34181c50:	4b14      	ldr	r3, [pc, #80]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c52:	2200      	movs	r2, #0
34181c54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
34181c56:	4b13      	ldr	r3, [pc, #76]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c58:	2200      	movs	r2, #0
34181c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
34181c5c:	4811      	ldr	r0, [pc, #68]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c5e:	f00b f892 	bl	3418cd86 <HAL_UART_Init>
34181c62:	4603      	mov	r3, r0
34181c64:	2b00      	cmp	r3, #0
34181c66:	d001      	beq.n	34181c6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
34181c68:	f7ff fa5a 	bl	34181120 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
34181c6c:	2100      	movs	r1, #0
34181c6e:	480d      	ldr	r0, [pc, #52]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c70:	f00b fdac 	bl	3418d7cc <HAL_UARTEx_SetTxFifoThreshold>
34181c74:	4603      	mov	r3, r0
34181c76:	2b00      	cmp	r3, #0
34181c78:	d001      	beq.n	34181c7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
34181c7a:	f7ff fa51 	bl	34181120 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
34181c7e:	2100      	movs	r1, #0
34181c80:	4808      	ldr	r0, [pc, #32]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c82:	f00b fde1 	bl	3418d848 <HAL_UARTEx_SetRxFifoThreshold>
34181c86:	4603      	mov	r3, r0
34181c88:	2b00      	cmp	r3, #0
34181c8a:	d001      	beq.n	34181c90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
34181c8c:	f7ff fa48 	bl	34181120 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
34181c90:	4804      	ldr	r0, [pc, #16]	@ (34181ca4 <MX_USART1_UART_Init+0x90>)
34181c92:	f00b fd62 	bl	3418d75a <HAL_UARTEx_DisableFifoMode>
34181c96:	4603      	mov	r3, r0
34181c98:	2b00      	cmp	r3, #0
34181c9a:	d001      	beq.n	34181ca0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
34181c9c:	f7ff fa40 	bl	34181120 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
34181ca0:	bf00      	nop
34181ca2:	bd80      	pop	{r7, pc}
34181ca4:	341c0184 	.word	0x341c0184
34181ca8:	52001000 	.word	0x52001000

34181cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
34181cac:	b580      	push	{r7, lr}
34181cae:	b0ec      	sub	sp, #432	@ 0x1b0
34181cb0:	af00      	add	r7, sp, #0
34181cb2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181cb6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181cba:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181cbc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181cc0:	2200      	movs	r2, #0
34181cc2:	601a      	str	r2, [r3, #0]
34181cc4:	605a      	str	r2, [r3, #4]
34181cc6:	609a      	str	r2, [r3, #8]
34181cc8:	60da      	str	r2, [r3, #12]
34181cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181ccc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181cd0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181cd4:	4618      	mov	r0, r3
34181cd6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181cda:	461a      	mov	r2, r3
34181cdc:	2100      	movs	r1, #0
34181cde:	f00f ffb1 	bl	34191c44 <memset>
  if(uartHandle->Instance==USART1)
34181ce2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181ce6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181cea:	681b      	ldr	r3, [r3, #0]
34181cec:	681b      	ldr	r3, [r3, #0]
34181cee:	4a1f      	ldr	r2, [pc, #124]	@ (34181d6c <HAL_UART_MspInit+0xc0>)
34181cf0:	4293      	cmp	r3, r2
34181cf2:	d135      	bne.n	34181d60 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
34181cf4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181cf8:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181cfc:	f04f 0200 	mov.w	r2, #0
34181d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
34181d04:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_CLKP;
34181d08:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181d0c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181d10:	4a17      	ldr	r2, [pc, #92]	@ (34181d70 <HAL_UART_MspInit+0xc4>)
34181d12:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181d16:	f107 0308 	add.w	r3, r7, #8
34181d1a:	4618      	mov	r0, r3
34181d1c:	f004 f9c0 	bl	341860a0 <HAL_RCCEx_PeriphCLKConfig>
34181d20:	4603      	mov	r3, r0
34181d22:	2b00      	cmp	r3, #0
34181d24:	d001      	beq.n	34181d2a <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
34181d26:	f7ff f9fb 	bl	34181120 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
34181d2a:	2010      	movs	r0, #16
34181d2c:	f7ff ff5c 	bl	34181be8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOE_CLK_ENABLE();
34181d30:	2010      	movs	r0, #16
34181d32:	f7ff ff43 	bl	34181bbc <LL_AHB4_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PE5     ------> USART1_TX
    PE6     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
34181d36:	2360      	movs	r3, #96	@ 0x60
34181d38:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181d3c:	2302      	movs	r3, #2
34181d3e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181d42:	2300      	movs	r3, #0
34181d44:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181d48:	2300      	movs	r3, #0
34181d4a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
34181d4e:	2307      	movs	r3, #7
34181d50:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
34181d54:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181d58:	4619      	mov	r1, r3
34181d5a:	4806      	ldr	r0, [pc, #24]	@ (34181d74 <HAL_UART_MspInit+0xc8>)
34181d5c:	f000 ff26 	bl	34182bac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
34181d60:	bf00      	nop
34181d62:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181d66:	46bd      	mov	sp, r7
34181d68:	bd80      	pop	{r7, pc}
34181d6a:	bf00      	nop
34181d6c:	52001000 	.word	0x52001000
34181d70:	07010030 	.word	0x07010030
34181d74:	56021000 	.word	0x56021000

34181d78 <LL_AHB4_GRP1_EnableClock>:
{
34181d78:	b480      	push	{r7}
34181d7a:	b085      	sub	sp, #20
34181d7c:	af00      	add	r7, sp, #0
34181d7e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34181d80:	4a07      	ldr	r2, [pc, #28]	@ (34181da0 <LL_AHB4_GRP1_EnableClock+0x28>)
34181d82:	687b      	ldr	r3, [r7, #4]
34181d84:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34181d88:	4b05      	ldr	r3, [pc, #20]	@ (34181da0 <LL_AHB4_GRP1_EnableClock+0x28>)
34181d8a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34181d8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181d90:	68fb      	ldr	r3, [r7, #12]
}
34181d92:	bf00      	nop
34181d94:	3714      	adds	r7, #20
34181d96:	46bd      	mov	sp, r7
34181d98:	f85d 7b04 	ldr.w	r7, [sp], #4
34181d9c:	4770      	bx	lr
34181d9e:	bf00      	nop
34181da0:	56028000 	.word	0x56028000

34181da4 <LL_AHB5_GRP1_EnableClock>:
{
34181da4:	b480      	push	{r7}
34181da6:	b085      	sub	sp, #20
34181da8:	af00      	add	r7, sp, #0
34181daa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34181dac:	4a07      	ldr	r2, [pc, #28]	@ (34181dcc <LL_AHB5_GRP1_EnableClock+0x28>)
34181dae:	687b      	ldr	r3, [r7, #4]
34181db0:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34181db4:	4b05      	ldr	r3, [pc, #20]	@ (34181dcc <LL_AHB5_GRP1_EnableClock+0x28>)
34181db6:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
34181dba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181dbc:	68fb      	ldr	r3, [r7, #12]
}
34181dbe:	bf00      	nop
34181dc0:	3714      	adds	r7, #20
34181dc2:	46bd      	mov	sp, r7
34181dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
34181dc8:	4770      	bx	lr
34181dca:	bf00      	nop
34181dcc:	56028000 	.word	0x56028000

34181dd0 <LL_APB4_GRP2_EnableClock>:
  *         @arg @ref LL_APB4_GRP2_PERIPH_SYSCFG
  *         @arg @ref LL_APB4_GRP2_PERIPH_DTS
  * @retval None
  */
__STATIC_INLINE void LL_APB4_GRP2_EnableClock(uint32_t Periphs)
{
34181dd0:	b480      	push	{r7}
34181dd2:	b085      	sub	sp, #20
34181dd4:	af00      	add	r7, sp, #0
34181dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB4ENSR2, Periphs);
34181dd8:	4a07      	ldr	r2, [pc, #28]	@ (34181df8 <LL_APB4_GRP2_EnableClock+0x28>)
34181dda:	687b      	ldr	r3, [r7, #4]
34181ddc:	f8c2 3a78 	str.w	r3, [r2, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB4ENR2);
34181de0:	4b05      	ldr	r3, [pc, #20]	@ (34181df8 <LL_APB4_GRP2_EnableClock+0x28>)
34181de2:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34181de6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181de8:	68fb      	ldr	r3, [r7, #12]
}
34181dea:	bf00      	nop
34181dec:	3714      	adds	r7, #20
34181dee:	46bd      	mov	sp, r7
34181df0:	f85d 7b04 	ldr.w	r7, [sp], #4
34181df4:	4770      	bx	lr
34181df6:	bf00      	nop
34181df8:	56028000 	.word	0x56028000

34181dfc <MX_XSPI1_Init>:
XSPI_HandleTypeDef hxspi1;
XSPI_HandleTypeDef hxspi2;

/* XSPI1 init function */
void MX_XSPI1_Init(void)
{
34181dfc:	b580      	push	{r7, lr}
34181dfe:	b084      	sub	sp, #16
34181e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI1_Init 0 */

  /* USER CODE END XSPI1_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
34181e02:	1d3b      	adds	r3, r7, #4
34181e04:	2200      	movs	r2, #0
34181e06:	601a      	str	r2, [r3, #0]
34181e08:	605a      	str	r2, [r3, #4]
34181e0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI1_Init 1 */

  /* USER CODE END XSPI1_Init 1 */
  /* XSPI1 parameter configuration*/
  hxspi1.Instance = XSPI1;
34181e0c:	4b27      	ldr	r3, [pc, #156]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e0e:	4a28      	ldr	r2, [pc, #160]	@ (34181eb0 <MX_XSPI1_Init+0xb4>)
34181e10:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
34181e12:	4b26      	ldr	r3, [pc, #152]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e14:	2204      	movs	r2, #4
34181e16:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
34181e18:	4b24      	ldr	r3, [pc, #144]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e1a:	2200      	movs	r2, #0
34181e1c:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM_16BITS;
34181e1e:	4b23      	ldr	r3, [pc, #140]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e20:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
34181e24:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_256MB;
34181e26:	4b21      	ldr	r3, [pc, #132]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e28:	2218      	movs	r2, #24
34181e2a:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 5;
34181e2c:	4b1f      	ldr	r3, [pc, #124]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e2e:	2205      	movs	r2, #5
34181e30:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
34181e32:	4b1e      	ldr	r3, [pc, #120]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e34:	2200      	movs	r2, #0
34181e36:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
34181e38:	4b1c      	ldr	r3, [pc, #112]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e3a:	2200      	movs	r2, #0
34181e3c:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
34181e3e:	4b1b      	ldr	r3, [pc, #108]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e40:	2200      	movs	r2, #0
34181e42:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 1;
34181e44:	4b19      	ldr	r3, [pc, #100]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e46:	2201      	movs	r2, #1
34181e48:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34181e4a:	4b18      	ldr	r3, [pc, #96]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e4c:	2200      	movs	r2, #0
34181e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34181e50:	4b16      	ldr	r3, [pc, #88]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e52:	2200      	movs	r2, #0
34181e54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_16KB;
34181e56:	4b15      	ldr	r3, [pc, #84]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e58:	220b      	movs	r2, #11
34181e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
34181e5c:	4b13      	ldr	r3, [pc, #76]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e5e:	2200      	movs	r2, #0
34181e60:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi1.Init.Refresh = 0;
34181e62:	4b12      	ldr	r3, [pc, #72]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e64:	2200      	movs	r2, #0
34181e66:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
34181e68:	4b10      	ldr	r3, [pc, #64]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e6a:	2200      	movs	r2, #0
34181e6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
34181e6e:	480f      	ldr	r0, [pc, #60]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e70:	f00b fd8e 	bl	3418d990 <HAL_XSPI_Init>
34181e74:	4603      	mov	r3, r0
34181e76:	2b00      	cmp	r3, #0
34181e78:	d001      	beq.n	34181e7e <MX_XSPI1_Init+0x82>
  {
    Error_Handler();
34181e7a:	f7ff f951 	bl	34181120 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
34181e7e:	2310      	movs	r3, #16
34181e80:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_1;
34181e82:	2300      	movs	r3, #0
34181e84:	60bb      	str	r3, [r7, #8]
  sXspiManagerCfg.Req2AckTime = 1;
34181e86:	2301      	movs	r3, #1
34181e88:	60fb      	str	r3, [r7, #12]
  if (HAL_XSPIM_Config(&hxspi1, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34181e8a:	1d3b      	adds	r3, r7, #4
34181e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
34181e90:	4619      	mov	r1, r3
34181e92:	4806      	ldr	r0, [pc, #24]	@ (34181eac <MX_XSPI1_Init+0xb0>)
34181e94:	f00c fb8a 	bl	3418e5ac <HAL_XSPIM_Config>
34181e98:	4603      	mov	r3, r0
34181e9a:	2b00      	cmp	r3, #0
34181e9c:	d001      	beq.n	34181ea2 <MX_XSPI1_Init+0xa6>
  {
    Error_Handler();
34181e9e:	f7ff f93f 	bl	34181120 <Error_Handler>
  }
  /* USER CODE BEGIN XSPI1_Init 2 */

  /* USER CODE END XSPI1_Init 2 */

}
34181ea2:	bf00      	nop
34181ea4:	3710      	adds	r7, #16
34181ea6:	46bd      	mov	sp, r7
34181ea8:	bd80      	pop	{r7, pc}
34181eaa:	bf00      	nop
34181eac:	341c0218 	.word	0x341c0218
34181eb0:	58025000 	.word	0x58025000

34181eb4 <MX_XSPI2_Init>:

/* XSPI2 init function */
void MX_XSPI2_Init(void)
{
34181eb4:	b580      	push	{r7, lr}
34181eb6:	b084      	sub	sp, #16
34181eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
34181eba:	1d3b      	adds	r3, r7, #4
34181ebc:	2200      	movs	r2, #0
34181ebe:	601a      	str	r2, [r3, #0]
34181ec0:	605a      	str	r2, [r3, #4]
34181ec2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  hxspi2.Instance = XSPI2;
34181ec4:	4b27      	ldr	r3, [pc, #156]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181ec6:	4a28      	ldr	r2, [pc, #160]	@ (34181f68 <MX_XSPI2_Init+0xb4>)
34181ec8:	601a      	str	r2, [r3, #0]
#if 1
  /* 005 */
  hxspi2.Init.FifoThresholdByte = 4;
34181eca:	4b26      	ldr	r3, [pc, #152]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181ecc:	2204      	movs	r2, #4
34181ece:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
34181ed0:	4b24      	ldr	r3, [pc, #144]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181ed2:	2200      	movs	r2, #0
34181ed4:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
34181ed6:	4b23      	ldr	r3, [pc, #140]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181ed8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34181edc:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_1GB;
34181ede:	4b21      	ldr	r3, [pc, #132]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181ee0:	221a      	movs	r2, #26
34181ee2:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 2;
34181ee4:	4b1f      	ldr	r3, [pc, #124]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181ee6:	2202      	movs	r2, #2
34181ee8:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
34181eea:	4b1e      	ldr	r3, [pc, #120]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181eec:	2200      	movs	r2, #0
34181eee:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
34181ef0:	4b1c      	ldr	r3, [pc, #112]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181ef2:	2200      	movs	r2, #0
34181ef4:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
34181ef6:	4b1b      	ldr	r3, [pc, #108]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181ef8:	2200      	movs	r2, #0
34181efa:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 0;
34181efc:	4b19      	ldr	r3, [pc, #100]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181efe:	2200      	movs	r2, #0
34181f00:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34181f02:	4b18      	ldr	r3, [pc, #96]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181f04:	2200      	movs	r2, #0
34181f06:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34181f08:	4b16      	ldr	r3, [pc, #88]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34181f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
34181f10:	4b14      	ldr	r3, [pc, #80]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181f12:	2200      	movs	r2, #0
34181f14:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
34181f16:	4b13      	ldr	r3, [pc, #76]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181f18:	2200      	movs	r2, #0
34181f1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 0;
34181f1c:	4b11      	ldr	r3, [pc, #68]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181f1e:	2200      	movs	r2, #0
34181f20:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
34181f22:	4b10      	ldr	r3, [pc, #64]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181f24:	2200      	movs	r2, #0
34181f26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hxspi2.Init.MaxTran = 0;
  hxspi2.Init.Refresh = 0;
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
#endif

  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
34181f28:	480e      	ldr	r0, [pc, #56]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181f2a:	f00b fd31 	bl	3418d990 <HAL_XSPI_Init>
34181f2e:	4603      	mov	r3, r0
34181f30:	2b00      	cmp	r3, #0
34181f32:	d001      	beq.n	34181f38 <MX_XSPI2_Init+0x84>
  {
    Error_Handler();
34181f34:	f7ff f8f4 	bl	34181120 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
34181f38:	2310      	movs	r3, #16
34181f3a:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
34181f3c:	2301      	movs	r3, #1
34181f3e:	60bb      	str	r3, [r7, #8]
  sXspiManagerCfg.Req2AckTime = 1;
34181f40:	2301      	movs	r3, #1
34181f42:	60fb      	str	r3, [r7, #12]
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34181f44:	1d3b      	adds	r3, r7, #4
34181f46:	f241 3288 	movw	r2, #5000	@ 0x1388
34181f4a:	4619      	mov	r1, r3
34181f4c:	4805      	ldr	r0, [pc, #20]	@ (34181f64 <MX_XSPI2_Init+0xb0>)
34181f4e:	f00c fb2d 	bl	3418e5ac <HAL_XSPIM_Config>
34181f52:	4603      	mov	r3, r0
34181f54:	2b00      	cmp	r3, #0
34181f56:	d001      	beq.n	34181f5c <MX_XSPI2_Init+0xa8>
  {
    Error_Handler();
34181f58:	f7ff f8e2 	bl	34181120 <Error_Handler>

  /* USER CODE BEGIN XSPI2_Init 2 */

  /* USER CODE END XSPI2_Init 2 */

}
34181f5c:	bf00      	nop
34181f5e:	3710      	adds	r7, #16
34181f60:	46bd      	mov	sp, r7
34181f62:	bd80      	pop	{r7, pc}
34181f64:	341c027c 	.word	0x341c027c
34181f68:	5802a000 	.word	0x5802a000

34181f6c <HAL_XSPI_MspInit>:

static uint32_t HAL_RCC_XSPIM_CLK_ENABLED=0;

void HAL_XSPI_MspInit(XSPI_HandleTypeDef* xspiHandle)
{
34181f6c:	b580      	push	{r7, lr}
34181f6e:	f5ad 7d58 	sub.w	sp, sp, #864	@ 0x360
34181f72:	af00      	add	r7, sp, #0
34181f74:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181f78:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
34181f7c:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181f7e:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
34181f82:	2200      	movs	r2, #0
34181f84:	601a      	str	r2, [r3, #0]
34181f86:	605a      	str	r2, [r3, #4]
34181f88:	609a      	str	r2, [r3, #8]
34181f8a:	60da      	str	r2, [r3, #12]
34181f8c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181f8e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181f92:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181f96:	4618      	mov	r0, r3
34181f98:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181f9c:	461a      	mov	r2, r3
34181f9e:	2100      	movs	r1, #0
34181fa0:	f00f fe50 	bl	34191c44 <memset>
  if(xspiHandle->Instance==XSPI1)
34181fa4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181fa8:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
34181fac:	681b      	ldr	r3, [r3, #0]
34181fae:	681b      	ldr	r3, [r3, #0]
34181fb0:	4abc      	ldr	r2, [pc, #752]	@ (341822a4 <HAL_XSPI_MspInit+0x338>)
34181fb2:	4293      	cmp	r3, r2
34181fb4:	d166      	bne.n	34182084 <HAL_XSPI_MspInit+0x118>

  /* USER CODE END XSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_XSPI1;
34181fb6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181fba:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181fbe:	f04f 0200 	mov.w	r2, #0
34181fc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34181fc6:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34181fca:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34181fce:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181fd2:	4ab5      	ldr	r2, [pc, #724]	@ (341822a8 <HAL_XSPI_MspInit+0x33c>)
34181fd4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181fd8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
34181fdc:	4618      	mov	r0, r3
34181fde:	f004 f85f 	bl	341860a0 <HAL_RCCEx_PeriphCLKConfig>
34181fe2:	4603      	mov	r3, r0
34181fe4:	2b00      	cmp	r3, #0
34181fe6:	d001      	beq.n	34181fec <HAL_XSPI_MspInit+0x80>
    {
      Error_Handler();
34181fe8:	f7ff f89a 	bl	34181120 <Error_Handler>
    }

    /* XSPI1 clock enable */
    HAL_RCC_XSPIM_CLK_ENABLED++;
34181fec:	4baf      	ldr	r3, [pc, #700]	@ (341822ac <HAL_XSPI_MspInit+0x340>)
34181fee:	681b      	ldr	r3, [r3, #0]
34181ff0:	3301      	adds	r3, #1
34181ff2:	4aae      	ldr	r2, [pc, #696]	@ (341822ac <HAL_XSPI_MspInit+0x340>)
34181ff4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
34181ff6:	4bad      	ldr	r3, [pc, #692]	@ (341822ac <HAL_XSPI_MspInit+0x340>)
34181ff8:	681b      	ldr	r3, [r3, #0]
34181ffa:	2b01      	cmp	r3, #1
34181ffc:	d103      	bne.n	34182006 <HAL_XSPI_MspInit+0x9a>
      __HAL_RCC_XSPIM_CLK_ENABLE();
34181ffe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34182002:	f7ff fecf 	bl	34181da4 <LL_AHB5_GRP1_EnableClock>
    }
    __HAL_RCC_XSPI1_CLK_ENABLE();
34182006:	2020      	movs	r0, #32
34182008:	f7ff fecc 	bl	34181da4 <LL_AHB5_GRP1_EnableClock>

    __HAL_RCC_GPIOP_CLK_ENABLE();
3418200c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
34182010:	f7ff feb2 	bl	34181d78 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOO_CLK_ENABLE();
34182014:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
34182018:	f7ff feae 	bl	34181d78 <LL_AHB4_GRP1_EnableClock>
    PO0     ------> XSPIM_P1_NCS1
    PP9     ------> XSPIM_P1_IO9
    PP10     ------> XSPIM_P1_IO10
    PO4     ------> XSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = HEXASPI_IO_7_Pin|HEXASPI_IO_6_Pin|HEXASPI_IO_0_Pin|HEXASPI_IO_4_Pin
3418201c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
34182020:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
                          |HEXASPI_IO_1_Pin|HEXASPI_IO_15_Pin|HEXASPI_IO_5_Pin|HEXASPI_IO_12_Pin
                          |HEXASPI_IO_3_Pin|HEXASPI_IO_2_Pin|HEXASPI_IO_13_Pin|HEXASPI_IO_11_Pin
                          |HEXASPI_IO_8_Pin|HEXASPI_IO_14_Pin|HEXASPI_IO_9_Pin|HEXASPI_IO_10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34182024:	2302      	movs	r3, #2
34182026:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
    GPIO_InitStruct.Pull = GPIO_NOPULL;
3418202a:	2300      	movs	r3, #0
3418202c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34182030:	2303      	movs	r3, #3
34182032:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
34182036:	2309      	movs	r3, #9
34182038:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
    HAL_GPIO_Init(GPIOP, &GPIO_InitStruct);
3418203c:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
34182040:	4619      	mov	r1, r3
34182042:	489b      	ldr	r0, [pc, #620]	@ (341822b0 <HAL_XSPI_MspInit+0x344>)
34182044:	f000 fdb2 	bl	34182bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HEXASPI_DQS0_Pin|HEXASPI_DQS1_Pin|HEXASPI_NCS_Pin|HEXASPI_CLK_Pin;
34182048:	231d      	movs	r3, #29
3418204a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
3418204e:	2302      	movs	r3, #2
34182050:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34182054:	2300      	movs	r3, #0
34182056:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
3418205a:	2303      	movs	r3, #3
3418205c:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
34182060:	2309      	movs	r3, #9
34182062:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
    HAL_GPIO_Init(GPIOO, &GPIO_InitStruct);
34182066:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
3418206a:	4619      	mov	r1, r3
3418206c:	4891      	ldr	r0, [pc, #580]	@ (341822b4 <HAL_XSPI_MspInit+0x348>)
3418206e:	f000 fd9d 	bl	34182bac <HAL_GPIO_Init>

    /* XSPI1 interrupt Init */
    HAL_NVIC_SetPriority(XSPI1_IRQn, 0, 0);
34182072:	2200      	movs	r2, #0
34182074:	2100      	movs	r1, #0
34182076:	20aa      	movs	r0, #170	@ 0xaa
34182078:	f000 fb91 	bl	3418279e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(XSPI1_IRQn);
3418207c:	20aa      	movs	r0, #170	@ 0xaa
3418207e:	f000 fbab 	bl	341827d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN XSPI2_MspInit 1 */

  /* USER CODE END XSPI2_MspInit 1 */

  }
}
34182082:	e10a      	b.n	3418229a <HAL_XSPI_MspInit+0x32e>
  else if(xspiHandle->Instance==XSPI2)
34182084:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34182088:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
3418208c:	681b      	ldr	r3, [r3, #0]
3418208e:	681b      	ldr	r3, [r3, #0]
34182090:	4a89      	ldr	r2, [pc, #548]	@ (341822b8 <HAL_XSPI_MspInit+0x34c>)
34182092:	4293      	cmp	r3, r2
34182094:	f040 8101 	bne.w	3418229a <HAL_XSPI_MspInit+0x32e>
    uint32_t fuse_data = 0;
34182098:	f507 7358 	add.w	r3, r7, #864	@ 0x360
3418209c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
341820a0:	2200      	movs	r2, #0
341820a2:	601a      	str	r2, [r3, #0]
    __HAL_RCC_BSEC_CLK_ENABLE();
341820a4:	2002      	movs	r0, #2
341820a6:	f7ff fe93 	bl	34181dd0 <LL_APB4_GRP2_EnableClock>
    __HAL_RCC_SYSCFG_CLK_ENABLE();
341820aa:	2001      	movs	r0, #1
341820ac:	f7ff fe90 	bl	34181dd0 <LL_APB4_GRP2_EnableClock>
    hbsec.Instance = BSEC;
341820b0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
341820b4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
341820b8:	4a80      	ldr	r2, [pc, #512]	@ (341822bc <HAL_XSPI_MspInit+0x350>)
341820ba:	601a      	str	r2, [r3, #0]
    if (HAL_BSEC_OTP_Read(&hbsec, HSLV_OTP, &fuse_data) != HAL_OK)
341820bc:	f507 72d6 	add.w	r2, r7, #428	@ 0x1ac
341820c0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341820c4:	217c      	movs	r1, #124	@ 0x7c
341820c6:	4618      	mov	r0, r3
341820c8:	f000 f9de 	bl	34182488 <HAL_BSEC_OTP_Read>
341820cc:	4603      	mov	r3, r0
341820ce:	2b00      	cmp	r3, #0
341820d0:	d001      	beq.n	341820d6 <HAL_XSPI_MspInit+0x16a>
      Error_Handler();
341820d2:	f7ff f825 	bl	34181120 <Error_Handler>
    if (fuse_data & VDDIO3_HSLV_MASK)
341820d6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
341820da:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
341820de:	681b      	ldr	r3, [r3, #0]
341820e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
341820e4:	2b00      	cmp	r3, #0
341820e6:	d027      	beq.n	34182138 <HAL_XSPI_MspInit+0x1cc>
      PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
341820e8:	f507 7358 	add.w	r3, r7, #864	@ 0x360
341820ec:	f5a3 7156 	sub.w	r1, r3, #856	@ 0x358
341820f0:	f04f 0200 	mov.w	r2, #0
341820f4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
341820f8:	e9c1 2300 	strd	r2, r3, [r1]
      PeriphClkInit.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_IC3;
341820fc:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34182100:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
34182104:	4a6e      	ldr	r2, [pc, #440]	@ (341822c0 <HAL_XSPI_MspInit+0x354>)
34182106:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      PeriphClkInit.ICSelection[RCC_IC3].ClockSelection = RCC_ICCLKSOURCE_PLL1;
3418210a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
3418210e:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
34182112:	2200      	movs	r2, #0
34182114:	619a      	str	r2, [r3, #24]
      PeriphClkInit.ICSelection[RCC_IC3].ClockDivider = 6;
34182116:	f507 7358 	add.w	r3, r7, #864	@ 0x360
3418211a:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
3418211e:	2206      	movs	r2, #6
34182120:	61da      	str	r2, [r3, #28]
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
34182122:	f107 0308 	add.w	r3, r7, #8
34182126:	4618      	mov	r0, r3
34182128:	f003 ffba 	bl	341860a0 <HAL_RCCEx_PeriphCLKConfig>
3418212c:	4603      	mov	r3, r0
3418212e:	2b00      	cmp	r3, #0
34182130:	d029      	beq.n	34182186 <HAL_XSPI_MspInit+0x21a>
        Error_Handler();
34182132:	f7fe fff5 	bl	34181120 <Error_Handler>
34182136:	e026      	b.n	34182186 <HAL_XSPI_MspInit+0x21a>
      PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
34182138:	f507 7358 	add.w	r3, r7, #864	@ 0x360
3418213c:	f5a3 7156 	sub.w	r1, r3, #856	@ 0x358
34182140:	f04f 0200 	mov.w	r2, #0
34182144:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
34182148:	e9c1 2300 	strd	r2, r3, [r1]
      PeriphClkInit.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_IC3;
3418214c:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34182150:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
34182154:	4a5a      	ldr	r2, [pc, #360]	@ (341822c0 <HAL_XSPI_MspInit+0x354>)
34182156:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      PeriphClkInit.ICSelection[RCC_IC3].ClockSelection = RCC_ICCLKSOURCE_PLL1;
3418215a:	f507 7358 	add.w	r3, r7, #864	@ 0x360
3418215e:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
34182162:	2200      	movs	r2, #0
34182164:	619a      	str	r2, [r3, #24]
      PeriphClkInit.ICSelection[RCC_IC3].ClockDivider = 24;
34182166:	f507 7358 	add.w	r3, r7, #864	@ 0x360
3418216a:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
3418216e:	2218      	movs	r2, #24
34182170:	61da      	str	r2, [r3, #28]
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
34182172:	f107 0308 	add.w	r3, r7, #8
34182176:	4618      	mov	r0, r3
34182178:	f003 ff92 	bl	341860a0 <HAL_RCCEx_PeriphCLKConfig>
3418217c:	4603      	mov	r3, r0
3418217e:	2b00      	cmp	r3, #0
34182180:	d001      	beq.n	34182186 <HAL_XSPI_MspInit+0x21a>
        Error_Handler();
34182182:	f7fe ffcd 	bl	34181120 <Error_Handler>
    __HAL_RCC_PWR_CLK_ENABLE();
34182186:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
3418218a:	f7ff fdf5 	bl	34181d78 <LL_AHB4_GRP1_EnableClock>
    HAL_PWREx_EnableVddIO3();
3418218e:	f000 ff7b 	bl	34183088 <HAL_PWREx_EnableVddIO3>
    HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
34182192:	2101      	movs	r1, #1
34182194:	2002      	movs	r0, #2
34182196:	f000 ff15 	bl	34182fc4 <HAL_PWREx_ConfigVddIORange>
    HAL_SYSCFG_EnableVDDIO3CompensationCell();
3418219a:	f000 f965 	bl	34182468 <HAL_SYSCFG_EnableVDDIO3CompensationCell>
    __HAL_RCC_XSPI2_CLK_ENABLE();
3418219e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
341821a2:	f7ff fdff 	bl	34181da4 <LL_AHB5_GRP1_EnableClock>
      __HAL_RCC_GPION_CLK_ENABLE();
341821a6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
341821aa:	f7ff fde5 	bl	34181d78 <LL_AHB4_GRP1_EnableClock>
      GPIO_InitTypeDef GPIO_InitStruct = {0};
341821ae:	f507 7358 	add.w	r3, r7, #864	@ 0x360
341821b2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
341821b6:	461a      	mov	r2, r3
341821b8:	2300      	movs	r3, #0
341821ba:	6013      	str	r3, [r2, #0]
341821bc:	6053      	str	r3, [r2, #4]
341821be:	6093      	str	r3, [r2, #8]
341821c0:	60d3      	str	r3, [r2, #12]
341821c2:	6113      	str	r3, [r2, #16]
      GPIO_InitStruct.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
341821c4:	f507 7358 	add.w	r3, r7, #864	@ 0x360
341821c8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
341821cc:	f640 727f 	movw	r2, #3967	@ 0xf7f
341821d0:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
341821d2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
341821d6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
341821da:	2202      	movs	r2, #2
341821dc:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
341821de:	f507 7358 	add.w	r3, r7, #864	@ 0x360
341821e2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
341821e6:	2203      	movs	r2, #3
341821e8:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Pull      = GPIO_NOPULL;
341821ea:	f507 7358 	add.w	r3, r7, #864	@ 0x360
341821ee:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
341821f2:	2200      	movs	r2, #0
341821f4:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
341821f6:	f507 7358 	add.w	r3, r7, #864	@ 0x360
341821fa:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
341821fe:	2209      	movs	r2, #9
34182200:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init(GPION, &GPIO_InitStruct);
34182202:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
34182206:	4619      	mov	r1, r3
34182208:	482e      	ldr	r0, [pc, #184]	@ (341822c4 <HAL_XSPI_MspInit+0x358>)
3418220a:	f000 fccf 	bl	34182bac <HAL_GPIO_Init>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
3418220e:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34182212:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34182216:	f04f 0200 	mov.w	r2, #0
3418221a:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
3418221e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34182222:	f507 7358 	add.w	r3, r7, #864	@ 0x360
34182226:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
3418222a:	4a27      	ldr	r2, [pc, #156]	@ (341822c8 <HAL_XSPI_MspInit+0x35c>)
3418222c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34182230:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
34182234:	4618      	mov	r0, r3
34182236:	f003 ff33 	bl	341860a0 <HAL_RCCEx_PeriphCLKConfig>
3418223a:	4603      	mov	r3, r0
3418223c:	2b00      	cmp	r3, #0
3418223e:	d001      	beq.n	34182244 <HAL_XSPI_MspInit+0x2d8>
      Error_Handler();
34182240:	f7fe ff6e 	bl	34181120 <Error_Handler>
    HAL_RCC_XSPIM_CLK_ENABLED++;
34182244:	4b19      	ldr	r3, [pc, #100]	@ (341822ac <HAL_XSPI_MspInit+0x340>)
34182246:	681b      	ldr	r3, [r3, #0]
34182248:	3301      	adds	r3, #1
3418224a:	4a18      	ldr	r2, [pc, #96]	@ (341822ac <HAL_XSPI_MspInit+0x340>)
3418224c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
3418224e:	4b17      	ldr	r3, [pc, #92]	@ (341822ac <HAL_XSPI_MspInit+0x340>)
34182250:	681b      	ldr	r3, [r3, #0]
34182252:	2b01      	cmp	r3, #1
34182254:	d103      	bne.n	3418225e <HAL_XSPI_MspInit+0x2f2>
      __HAL_RCC_XSPIM_CLK_ENABLE();
34182256:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
3418225a:	f7ff fda3 	bl	34181da4 <LL_AHB5_GRP1_EnableClock>
    __HAL_RCC_XSPI2_CLK_ENABLE();
3418225e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34182262:	f7ff fd9f 	bl	34181da4 <LL_AHB5_GRP1_EnableClock>
    __HAL_RCC_GPION_CLK_ENABLE();
34182266:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
3418226a:	f7ff fd85 	bl	34181d78 <LL_AHB4_GRP1_EnableClock>
    GPIO_InitStruct.Pin = OCTOSPI_IO2_Pin|OCTOSPI_CLK_Pin|OCTOSPI_IO4_Pin|OCTOSPI_DQS_Pin
3418226e:	f640 737f 	movw	r3, #3967	@ 0xf7f
34182272:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34182276:	2302      	movs	r3, #2
34182278:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
    GPIO_InitStruct.Pull = GPIO_NOPULL;
3418227c:	2300      	movs	r3, #0
3418227e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34182282:	2303      	movs	r3, #3
34182284:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
34182288:	2309      	movs	r3, #9
3418228a:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
    HAL_GPIO_Init(GPION, &GPIO_InitStruct);
3418228e:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
34182292:	4619      	mov	r1, r3
34182294:	480b      	ldr	r0, [pc, #44]	@ (341822c4 <HAL_XSPI_MspInit+0x358>)
34182296:	f000 fc89 	bl	34182bac <HAL_GPIO_Init>
}
3418229a:	bf00      	nop
3418229c:	f507 7758 	add.w	r7, r7, #864	@ 0x360
341822a0:	46bd      	mov	sp, r7
341822a2:	bd80      	pop	{r7, pc}
341822a4:	58025000 	.word	0x58025000
341822a8:	03000014 	.word	0x03000014
341822ac:	341c02e0 	.word	0x341c02e0
341822b0:	56023c00 	.word	0x56023c00
341822b4:	56023800 	.word	0x56023800
341822b8:	5802a000 	.word	0x5802a000
341822bc:	56009000 	.word	0x56009000
341822c0:	03020414 	.word	0x03020414
341822c4:	56023400 	.word	0x56023400
341822c8:	03000414 	.word	0x03000414

341822cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
341822cc:	480f      	ldr	r0, [pc, #60]	@ (3418230c <LoopForever+0x4>)
  msr   MSPLIM, r0
341822ce:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
341822d2:	480f      	ldr	r0, [pc, #60]	@ (34182310 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
341822d4:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
341822d6:	f7ff f9cd 	bl	34181674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
341822da:	480e      	ldr	r0, [pc, #56]	@ (34182314 <LoopForever+0xc>)
  ldr r1, =_edata
341822dc:	490e      	ldr	r1, [pc, #56]	@ (34182318 <LoopForever+0x10>)
  ldr r2, =_sidata
341822de:	4a0f      	ldr	r2, [pc, #60]	@ (3418231c <LoopForever+0x14>)
  movs r3, #0
341822e0:	2300      	movs	r3, #0
  b LoopCopyDataInit
341822e2:	e002      	b.n	341822ea <LoopCopyDataInit>

341822e4 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
341822e4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
341822e6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
341822e8:	3304      	adds	r3, #4

341822ea <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
341822ea:	18c4      	adds	r4, r0, r3
  cmp r4, r1
341822ec:	428c      	cmp	r4, r1
  bcc CopyDataInit
341822ee:	d3f9      	bcc.n	341822e4 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
341822f0:	4a0b      	ldr	r2, [pc, #44]	@ (34182320 <LoopForever+0x18>)
  ldr r4, =_ebss
341822f2:	4c0c      	ldr	r4, [pc, #48]	@ (34182324 <LoopForever+0x1c>)
  movs r3, #0
341822f4:	2300      	movs	r3, #0
  b LoopFillZerobss
341822f6:	e001      	b.n	341822fc <LoopFillZerobss>

341822f8 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
341822f8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
341822fa:	3204      	adds	r2, #4

341822fc <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
341822fc:	42a2      	cmp	r2, r4
  bcc FillZerobss
341822fe:	d3fb      	bcc.n	341822f8 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
34182300:	f00f fcf4 	bl	34191cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
34182304:	f7fe fcb2 	bl	34180c6c <main>

34182308 <LoopForever>:

LoopForever:
  b LoopForever
34182308:	e7fe      	b.n	34182308 <LoopForever>
3418230a:	0000      	.short	0x0000
  ldr   r0, =_sstack
3418230c:	341ff000 	.word	0x341ff000
  ldr   r0, =_estack
34182310:	34200000 	.word	0x34200000
  ldr r0, =_sdata
34182314:	341c0000 	.word	0x341c0000
  ldr r1, =_edata
34182318:	341c0114 	.word	0x341c0114
  ldr r2, =_sidata
3418231c:	341928e4 	.word	0x341928e4
  ldr r2, =_sbss
34182320:	341c0118 	.word	0x341c0118
  ldr r4, =_ebss
34182324:	341c05c0 	.word	0x341c05c0

34182328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
34182328:	e7fe      	b.n	34182328 <ADC1_2_IRQHandler>

3418232a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
3418232a:	b580      	push	{r7, lr}
3418232c:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
3418232e:	2003      	movs	r0, #3
34182330:	f000 fa2a 	bl	34182788 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
34182334:	f7ff fa84 	bl	34181840 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34182338:	200f      	movs	r0, #15
3418233a:	f000 f80b 	bl	34182354 <HAL_InitTick>
3418233e:	4603      	mov	r3, r0
34182340:	2b00      	cmp	r3, #0
34182342:	d001      	beq.n	34182348 <HAL_Init+0x1e>
  {
    return HAL_ERROR;
34182344:	2301      	movs	r3, #1
34182346:	e002      	b.n	3418234e <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
34182348:	f7ff f888 	bl	3418145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
3418234c:	2300      	movs	r3, #0
}
3418234e:	4618      	mov	r0, r3
34182350:	bd80      	pop	{r7, pc}
	...

34182354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34182354:	b580      	push	{r7, lr}
34182356:	b082      	sub	sp, #8
34182358:	af00      	add	r7, sp, #0
3418235a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
3418235c:	4b15      	ldr	r3, [pc, #84]	@ (341823b4 <HAL_InitTick+0x60>)
3418235e:	781b      	ldrb	r3, [r3, #0]
34182360:	2b00      	cmp	r3, #0
34182362:	d101      	bne.n	34182368 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
34182364:	2301      	movs	r3, #1
34182366:	e021      	b.n	341823ac <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
34182368:	4b13      	ldr	r3, [pc, #76]	@ (341823b8 <HAL_InitTick+0x64>)
3418236a:	681a      	ldr	r2, [r3, #0]
3418236c:	4b11      	ldr	r3, [pc, #68]	@ (341823b4 <HAL_InitTick+0x60>)
3418236e:	781b      	ldrb	r3, [r3, #0]
34182370:	4619      	mov	r1, r3
34182372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34182376:	fbb3 f3f1 	udiv	r3, r3, r1
3418237a:	fbb2 f3f3 	udiv	r3, r2, r3
3418237e:	4618      	mov	r0, r3
34182380:	f000 fa38 	bl	341827f4 <HAL_SYSTICK_Config>
34182384:	4603      	mov	r3, r0
34182386:	2b00      	cmp	r3, #0
34182388:	d001      	beq.n	3418238e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
3418238a:	2301      	movs	r3, #1
3418238c:	e00e      	b.n	341823ac <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
3418238e:	687b      	ldr	r3, [r7, #4]
34182390:	2b0f      	cmp	r3, #15
34182392:	d80a      	bhi.n	341823aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34182394:	2200      	movs	r2, #0
34182396:	6879      	ldr	r1, [r7, #4]
34182398:	f04f 30ff 	mov.w	r0, #4294967295
3418239c:	f000 f9ff 	bl	3418279e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
341823a0:	4a06      	ldr	r2, [pc, #24]	@ (341823bc <HAL_InitTick+0x68>)
341823a2:	687b      	ldr	r3, [r7, #4]
341823a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
341823a6:	2300      	movs	r3, #0
341823a8:	e000      	b.n	341823ac <HAL_InitTick+0x58>
    return HAL_ERROR;
341823aa:	2301      	movs	r3, #1
}
341823ac:	4618      	mov	r0, r3
341823ae:	3708      	adds	r7, #8
341823b0:	46bd      	mov	sp, r7
341823b2:	bd80      	pop	{r7, pc}
341823b4:	341c0008 	.word	0x341c0008
341823b8:	341c0000 	.word	0x341c0000
341823bc:	341c0004 	.word	0x341c0004

341823c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
341823c0:	b480      	push	{r7}
341823c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
341823c4:	4b06      	ldr	r3, [pc, #24]	@ (341823e0 <HAL_IncTick+0x20>)
341823c6:	781b      	ldrb	r3, [r3, #0]
341823c8:	461a      	mov	r2, r3
341823ca:	4b06      	ldr	r3, [pc, #24]	@ (341823e4 <HAL_IncTick+0x24>)
341823cc:	681b      	ldr	r3, [r3, #0]
341823ce:	4413      	add	r3, r2
341823d0:	4a04      	ldr	r2, [pc, #16]	@ (341823e4 <HAL_IncTick+0x24>)
341823d2:	6013      	str	r3, [r2, #0]
}
341823d4:	bf00      	nop
341823d6:	46bd      	mov	sp, r7
341823d8:	f85d 7b04 	ldr.w	r7, [sp], #4
341823dc:	4770      	bx	lr
341823de:	bf00      	nop
341823e0:	341c0008 	.word	0x341c0008
341823e4:	341c02e4 	.word	0x341c02e4

341823e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
341823e8:	b480      	push	{r7}
341823ea:	af00      	add	r7, sp, #0
  return uwTick;
341823ec:	4b03      	ldr	r3, [pc, #12]	@ (341823fc <HAL_GetTick+0x14>)
341823ee:	681b      	ldr	r3, [r3, #0]
}
341823f0:	4618      	mov	r0, r3
341823f2:	46bd      	mov	sp, r7
341823f4:	f85d 7b04 	ldr.w	r7, [sp], #4
341823f8:	4770      	bx	lr
341823fa:	bf00      	nop
341823fc:	341c02e4 	.word	0x341c02e4

34182400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34182400:	b580      	push	{r7, lr}
34182402:	b084      	sub	sp, #16
34182404:	af00      	add	r7, sp, #0
34182406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
34182408:	f7ff ffee 	bl	341823e8 <HAL_GetTick>
3418240c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
3418240e:	687b      	ldr	r3, [r7, #4]
34182410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
34182412:	68fb      	ldr	r3, [r7, #12]
34182414:	f1b3 3fff 	cmp.w	r3, #4294967295
34182418:	d005      	beq.n	34182426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
3418241a:	4b0a      	ldr	r3, [pc, #40]	@ (34182444 <HAL_Delay+0x44>)
3418241c:	781b      	ldrb	r3, [r3, #0]
3418241e:	461a      	mov	r2, r3
34182420:	68fb      	ldr	r3, [r7, #12]
34182422:	4413      	add	r3, r2
34182424:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
34182426:	bf00      	nop
34182428:	f7ff ffde 	bl	341823e8 <HAL_GetTick>
3418242c:	4602      	mov	r2, r0
3418242e:	68bb      	ldr	r3, [r7, #8]
34182430:	1ad3      	subs	r3, r2, r3
34182432:	68fa      	ldr	r2, [r7, #12]
34182434:	429a      	cmp	r2, r3
34182436:	d8f7      	bhi.n	34182428 <HAL_Delay+0x28>
  {
  }
}
34182438:	bf00      	nop
3418243a:	bf00      	nop
3418243c:	3710      	adds	r7, #16
3418243e:	46bd      	mov	sp, r7
34182440:	bd80      	pop	{r7, pc}
34182442:	bf00      	nop
34182444:	341c0008 	.word	0x341c0008

34182448 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
34182448:	b480      	push	{r7}
3418244a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
3418244c:	4b05      	ldr	r3, [pc, #20]	@ (34182464 <HAL_SuspendTick+0x1c>)
3418244e:	681b      	ldr	r3, [r3, #0]
34182450:	4a04      	ldr	r2, [pc, #16]	@ (34182464 <HAL_SuspendTick+0x1c>)
34182452:	f023 0302 	bic.w	r3, r3, #2
34182456:	6013      	str	r3, [r2, #0]
}
34182458:	bf00      	nop
3418245a:	46bd      	mov	sp, r7
3418245c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182460:	4770      	bx	lr
34182462:	bf00      	nop
34182464:	e000e010 	.word	0xe000e010

34182468 <HAL_SYSCFG_EnableVDDIO3CompensationCell>:
/**
  * @brief  Enable the VDDIO3 compensation cell.
  * @retval None
  */
void HAL_SYSCFG_EnableVDDIO3CompensationCell(void)
{
34182468:	b480      	push	{r7}
3418246a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->VDDIO3CCCR, SYSCFG_VDDIO3CCCR_EN);
3418246c:	4b05      	ldr	r3, [pc, #20]	@ (34182484 <HAL_SYSCFG_EnableVDDIO3CompensationCell+0x1c>)
3418246e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34182470:	4a04      	ldr	r2, [pc, #16]	@ (34182484 <HAL_SYSCFG_EnableVDDIO3CompensationCell+0x1c>)
34182472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34182476:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
34182478:	bf00      	nop
3418247a:	46bd      	mov	sp, r7
3418247c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182480:	4770      	bx	lr
34182482:	bf00      	nop
34182484:	56008000 	.word	0x56008000

34182488 <HAL_BSEC_OTP_Read>:
  * @param  pFuseData  Returned value of fuse. The returned value is between 0 and 0xFFFFFFFFU
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Read(BSEC_HandleTypeDef * hbsec, uint32_t FuseId, uint32_t *pFuseData)
{
34182488:	b580      	push	{r7, lr}
3418248a:	b084      	sub	sp, #16
3418248c:	af00      	add	r7, sp, #0
3418248e:	60f8      	str	r0, [r7, #12]
34182490:	60b9      	str	r1, [r7, #8]
34182492:	607a      	str	r2, [r7, #4]
  /* Check the handle pointer */
  if (hbsec == NULL)
34182494:	68fb      	ldr	r3, [r7, #12]
34182496:	2b00      	cmp	r3, #0
34182498:	d101      	bne.n	3418249e <HAL_BSEC_OTP_Read+0x16>
  {
    return HAL_ERROR;
3418249a:	2301      	movs	r3, #1
3418249c:	e026      	b.n	341824ec <HAL_BSEC_OTP_Read+0x64>
  }

  /* Check the address of returned value and instance */
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
3418249e:	687b      	ldr	r3, [r7, #4]
341824a0:	2b00      	cmp	r3, #0
341824a2:	d004      	beq.n	341824ae <HAL_BSEC_OTP_Read+0x26>
341824a4:	68fb      	ldr	r3, [r7, #12]
341824a6:	681b      	ldr	r3, [r3, #0]
341824a8:	4a12      	ldr	r2, [pc, #72]	@ (341824f4 <HAL_BSEC_OTP_Read+0x6c>)
341824aa:	4293      	cmp	r3, r2
341824ac:	d004      	beq.n	341824b8 <HAL_BSEC_OTP_Read+0x30>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
341824ae:	68fb      	ldr	r3, [r7, #12]
341824b0:	2201      	movs	r2, #1
341824b2:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
341824b4:	2301      	movs	r3, #1
341824b6:	e019      	b.n	341824ec <HAL_BSEC_OTP_Read+0x64>
  }

  if (FuseId < BSEC_NB_FUSES)
341824b8:	68bb      	ldr	r3, [r7, #8]
341824ba:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
341824be:	d211      	bcs.n	341824e4 <HAL_BSEC_OTP_Read+0x5c>
  {
    /* Reload the data :
       - Unshadowed fuse are not automatically reload and data no more available after register read
       - Shadowed fuse contains by default the shadow value in the register */
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
341824c0:	68b9      	ldr	r1, [r7, #8]
341824c2:	68f8      	ldr	r0, [r7, #12]
341824c4:	f000 f818 	bl	341824f8 <HAL_BSEC_OTP_Reload>
341824c8:	4603      	mov	r3, r0
341824ca:	2b00      	cmp	r3, #0
341824cc:	d108      	bne.n	341824e0 <HAL_BSEC_OTP_Read+0x58>
    {
      /* Read data from shadow register */
      *pFuseData = hbsec->Instance->FVRw[FuseId];
341824ce:	68fb      	ldr	r3, [r7, #12]
341824d0:	681b      	ldr	r3, [r3, #0]
341824d2:	68ba      	ldr	r2, [r7, #8]
341824d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
341824d8:	687b      	ldr	r3, [r7, #4]
341824da:	601a      	str	r2, [r3, #0]
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
341824dc:	2300      	movs	r3, #0
341824de:	e005      	b.n	341824ec <HAL_BSEC_OTP_Read+0x64>
      return HAL_ERROR;
341824e0:	2301      	movs	r3, #1
341824e2:	e003      	b.n	341824ec <HAL_BSEC_OTP_Read+0x64>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
341824e4:	68fb      	ldr	r3, [r7, #12]
341824e6:	2201      	movs	r2, #1
341824e8:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
341824ea:	2301      	movs	r3, #1
}
341824ec:	4618      	mov	r0, r3
341824ee:	3710      	adds	r7, #16
341824f0:	46bd      	mov	sp, r7
341824f2:	bd80      	pop	{r7, pc}
341824f4:	56009000 	.word	0x56009000

341824f8 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
341824f8:	b580      	push	{r7, lr}
341824fa:	b086      	sub	sp, #24
341824fc:	af00      	add	r7, sp, #0
341824fe:	6078      	str	r0, [r7, #4]
34182500:	6039      	str	r1, [r7, #0]
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
34182502:	f7ff ff71 	bl	341823e8 <HAL_GetTick>
34182506:	6178      	str	r0, [r7, #20]

  /* Check the handle pointer */
  if (hbsec == NULL)
34182508:	687b      	ldr	r3, [r7, #4]
3418250a:	2b00      	cmp	r3, #0
3418250c:	d101      	bne.n	34182512 <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
3418250e:	2301      	movs	r3, #1
34182510:	e063      	b.n	341825da <HAL_BSEC_OTP_Reload+0xe2>
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
34182512:	687b      	ldr	r3, [r7, #4]
34182514:	681b      	ldr	r3, [r3, #0]
34182516:	4a33      	ldr	r2, [pc, #204]	@ (341825e4 <HAL_BSEC_OTP_Reload+0xec>)
34182518:	4293      	cmp	r3, r2
3418251a:	d004      	beq.n	34182526 <HAL_BSEC_OTP_Reload+0x2e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
3418251c:	687b      	ldr	r3, [r7, #4]
3418251e:	2201      	movs	r2, #1
34182520:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34182522:	2301      	movs	r3, #1
34182524:	e059      	b.n	341825da <HAL_BSEC_OTP_Reload+0xe2>
  }

  if (FuseId < BSEC_NB_FUSES)
34182526:	683b      	ldr	r3, [r7, #0]
34182528:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
3418252c:	d24f      	bcs.n	341825ce <HAL_BSEC_OTP_Reload+0xd6>
  {
    status_reg = FuseId / 32U;
3418252e:	683b      	ldr	r3, [r7, #0]
34182530:	095b      	lsrs	r3, r3, #5
34182532:	613b      	str	r3, [r7, #16]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34182534:	683b      	ldr	r3, [r7, #0]
34182536:	f003 031f 	and.w	r3, r3, #31
3418253a:	2201      	movs	r2, #1
3418253c:	fa02 f303 	lsl.w	r3, r2, r3
34182540:	60fb      	str	r3, [r7, #12]

    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34182542:	687b      	ldr	r3, [r7, #4]
34182544:	681b      	ldr	r3, [r3, #0]
34182546:	693a      	ldr	r2, [r7, #16]
34182548:	f502 7208 	add.w	r2, r2, #544	@ 0x220
3418254c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34182550:	68fb      	ldr	r3, [r7, #12]
34182552:	4013      	ands	r3, r2
34182554:	2b00      	cmp	r3, #0
34182556:	d135      	bne.n	341825c4 <HAL_BSEC_OTP_Reload+0xcc>
    {
      /* Perform a reload of the fuse register */
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
34182558:	687b      	ldr	r3, [r7, #4]
3418255a:	681b      	ldr	r3, [r3, #0]
3418255c:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34182560:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
34182564:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34182568:	687a      	ldr	r2, [r7, #4]
3418256a:	6812      	ldr	r2, [r2, #0]
3418256c:	6839      	ldr	r1, [r7, #0]
3418256e:	430b      	orrs	r3, r1
34182570:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04

      /* Wait the operation is finished */
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34182574:	e00c      	b.n	34182590 <HAL_BSEC_OTP_Reload+0x98>
      {
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34182576:	f7ff ff37 	bl	341823e8 <HAL_GetTick>
3418257a:	4602      	mov	r2, r0
3418257c:	697b      	ldr	r3, [r7, #20]
3418257e:	1ad3      	subs	r3, r2, r3
34182580:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34182584:	d904      	bls.n	34182590 <HAL_BSEC_OTP_Reload+0x98>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34182586:	687b      	ldr	r3, [r7, #4]
34182588:	220a      	movs	r2, #10
3418258a:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
3418258c:	2301      	movs	r3, #1
3418258e:	e024      	b.n	341825da <HAL_BSEC_OTP_Reload+0xe2>
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34182590:	687b      	ldr	r3, [r7, #4]
34182592:	681b      	ldr	r3, [r3, #0]
34182594:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34182598:	f003 0301 	and.w	r3, r3, #1
3418259c:	2b00      	cmp	r3, #0
3418259e:	d1ea      	bne.n	34182576 <HAL_BSEC_OTP_Reload+0x7e>
        }
      }

      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
341825a0:	687b      	ldr	r3, [r7, #4]
341825a2:	681b      	ldr	r3, [r3, #0]
341825a4:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
341825a8:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
341825ac:	2b00      	cmp	r3, #0
341825ae:	d013      	beq.n	341825d8 <HAL_BSEC_OTP_Reload+0xe0>
      {
        /* An error occurred during reloading, value can't be relied on */
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
341825b0:	687b      	ldr	r3, [r7, #4]
341825b2:	681b      	ldr	r3, [r3, #0]
341825b4:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
341825b8:	f403 028c 	and.w	r2, r3, #4587520	@ 0x460000
341825bc:	687b      	ldr	r3, [r7, #4]
341825be:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
341825c0:	2301      	movs	r3, #1
341825c2:	e00a      	b.n	341825da <HAL_BSEC_OTP_Reload+0xe2>
      }
    }
    else
    {
      /* Shadow register is sticky reload locked */
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
341825c4:	687b      	ldr	r3, [r7, #4]
341825c6:	2204      	movs	r2, #4
341825c8:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
341825ca:	2301      	movs	r3, #1
341825cc:	e005      	b.n	341825da <HAL_BSEC_OTP_Reload+0xe2>
    }
  }
  else
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
341825ce:	687b      	ldr	r3, [r7, #4]
341825d0:	2201      	movs	r2, #1
341825d2:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
341825d4:	2301      	movs	r3, #1
341825d6:	e000      	b.n	341825da <HAL_BSEC_OTP_Reload+0xe2>
  }

  return HAL_OK;
341825d8:	2300      	movs	r3, #0
}
341825da:	4618      	mov	r0, r3
341825dc:	3718      	adds	r7, #24
341825de:	46bd      	mov	sp, r7
341825e0:	bd80      	pop	{r7, pc}
341825e2:	bf00      	nop
341825e4:	56009000 	.word	0x56009000

341825e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
341825e8:	b480      	push	{r7}
341825ea:	b085      	sub	sp, #20
341825ec:	af00      	add	r7, sp, #0
341825ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
341825f0:	687b      	ldr	r3, [r7, #4]
341825f2:	f003 0307 	and.w	r3, r3, #7
341825f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
341825f8:	4b0c      	ldr	r3, [pc, #48]	@ (3418262c <__NVIC_SetPriorityGrouping+0x44>)
341825fa:	68db      	ldr	r3, [r3, #12]
341825fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
341825fe:	68ba      	ldr	r2, [r7, #8]
34182600:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
34182604:	4013      	ands	r3, r2
34182606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34182608:	68fb      	ldr	r3, [r7, #12]
3418260a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
3418260c:	68bb      	ldr	r3, [r7, #8]
3418260e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
34182610:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34182614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34182618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
3418261a:	4a04      	ldr	r2, [pc, #16]	@ (3418262c <__NVIC_SetPriorityGrouping+0x44>)
3418261c:	68bb      	ldr	r3, [r7, #8]
3418261e:	60d3      	str	r3, [r2, #12]
}
34182620:	bf00      	nop
34182622:	3714      	adds	r7, #20
34182624:	46bd      	mov	sp, r7
34182626:	f85d 7b04 	ldr.w	r7, [sp], #4
3418262a:	4770      	bx	lr
3418262c:	e000ed00 	.word	0xe000ed00

34182630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
34182630:	b480      	push	{r7}
34182632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34182634:	4b04      	ldr	r3, [pc, #16]	@ (34182648 <__NVIC_GetPriorityGrouping+0x18>)
34182636:	68db      	ldr	r3, [r3, #12]
34182638:	0a1b      	lsrs	r3, r3, #8
3418263a:	f003 0307 	and.w	r3, r3, #7
}
3418263e:	4618      	mov	r0, r3
34182640:	46bd      	mov	sp, r7
34182642:	f85d 7b04 	ldr.w	r7, [sp], #4
34182646:	4770      	bx	lr
34182648:	e000ed00 	.word	0xe000ed00

3418264c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
3418264c:	b480      	push	{r7}
3418264e:	b083      	sub	sp, #12
34182650:	af00      	add	r7, sp, #0
34182652:	4603      	mov	r3, r0
34182654:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34182656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3418265a:	2b00      	cmp	r3, #0
3418265c:	db0b      	blt.n	34182676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3418265e:	88fb      	ldrh	r3, [r7, #6]
34182660:	f003 021f 	and.w	r2, r3, #31
34182664:	4907      	ldr	r1, [pc, #28]	@ (34182684 <__NVIC_EnableIRQ+0x38>)
34182666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3418266a:	095b      	lsrs	r3, r3, #5
3418266c:	2001      	movs	r0, #1
3418266e:	fa00 f202 	lsl.w	r2, r0, r2
34182672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
34182676:	bf00      	nop
34182678:	370c      	adds	r7, #12
3418267a:	46bd      	mov	sp, r7
3418267c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182680:	4770      	bx	lr
34182682:	bf00      	nop
34182684:	e000e100 	.word	0xe000e100

34182688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
34182688:	b480      	push	{r7}
3418268a:	b083      	sub	sp, #12
3418268c:	af00      	add	r7, sp, #0
3418268e:	4603      	mov	r3, r0
34182690:	6039      	str	r1, [r7, #0]
34182692:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34182694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34182698:	2b00      	cmp	r3, #0
3418269a:	db0a      	blt.n	341826b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3418269c:	683b      	ldr	r3, [r7, #0]
3418269e:	b2da      	uxtb	r2, r3
341826a0:	490c      	ldr	r1, [pc, #48]	@ (341826d4 <__NVIC_SetPriority+0x4c>)
341826a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
341826a6:	0112      	lsls	r2, r2, #4
341826a8:	b2d2      	uxtb	r2, r2
341826aa:	440b      	add	r3, r1
341826ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
341826b0:	e00a      	b.n	341826c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
341826b2:	683b      	ldr	r3, [r7, #0]
341826b4:	b2da      	uxtb	r2, r3
341826b6:	4908      	ldr	r1, [pc, #32]	@ (341826d8 <__NVIC_SetPriority+0x50>)
341826b8:	88fb      	ldrh	r3, [r7, #6]
341826ba:	f003 030f 	and.w	r3, r3, #15
341826be:	3b04      	subs	r3, #4
341826c0:	0112      	lsls	r2, r2, #4
341826c2:	b2d2      	uxtb	r2, r2
341826c4:	440b      	add	r3, r1
341826c6:	761a      	strb	r2, [r3, #24]
}
341826c8:	bf00      	nop
341826ca:	370c      	adds	r7, #12
341826cc:	46bd      	mov	sp, r7
341826ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341826d2:	4770      	bx	lr
341826d4:	e000e100 	.word	0xe000e100
341826d8:	e000ed00 	.word	0xe000ed00

341826dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
341826dc:	b480      	push	{r7}
341826de:	b089      	sub	sp, #36	@ 0x24
341826e0:	af00      	add	r7, sp, #0
341826e2:	60f8      	str	r0, [r7, #12]
341826e4:	60b9      	str	r1, [r7, #8]
341826e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
341826e8:	68fb      	ldr	r3, [r7, #12]
341826ea:	f003 0307 	and.w	r3, r3, #7
341826ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
341826f0:	69fb      	ldr	r3, [r7, #28]
341826f2:	f1c3 0307 	rsb	r3, r3, #7
341826f6:	2b04      	cmp	r3, #4
341826f8:	bf28      	it	cs
341826fa:	2304      	movcs	r3, #4
341826fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
341826fe:	69fb      	ldr	r3, [r7, #28]
34182700:	3304      	adds	r3, #4
34182702:	2b06      	cmp	r3, #6
34182704:	d902      	bls.n	3418270c <NVIC_EncodePriority+0x30>
34182706:	69fb      	ldr	r3, [r7, #28]
34182708:	3b03      	subs	r3, #3
3418270a:	e000      	b.n	3418270e <NVIC_EncodePriority+0x32>
3418270c:	2300      	movs	r3, #0
3418270e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34182710:	f04f 32ff 	mov.w	r2, #4294967295
34182714:	69bb      	ldr	r3, [r7, #24]
34182716:	fa02 f303 	lsl.w	r3, r2, r3
3418271a:	43da      	mvns	r2, r3
3418271c:	68bb      	ldr	r3, [r7, #8]
3418271e:	401a      	ands	r2, r3
34182720:	697b      	ldr	r3, [r7, #20]
34182722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34182724:	f04f 31ff 	mov.w	r1, #4294967295
34182728:	697b      	ldr	r3, [r7, #20]
3418272a:	fa01 f303 	lsl.w	r3, r1, r3
3418272e:	43d9      	mvns	r1, r3
34182730:	687b      	ldr	r3, [r7, #4]
34182732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34182734:	4313      	orrs	r3, r2
         );
}
34182736:	4618      	mov	r0, r3
34182738:	3724      	adds	r7, #36	@ 0x24
3418273a:	46bd      	mov	sp, r7
3418273c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182740:	4770      	bx	lr
	...

34182744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
34182744:	b580      	push	{r7, lr}
34182746:	b082      	sub	sp, #8
34182748:	af00      	add	r7, sp, #0
3418274a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
3418274c:	687b      	ldr	r3, [r7, #4]
3418274e:	3b01      	subs	r3, #1
34182750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34182754:	d301      	bcc.n	3418275a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
34182756:	2301      	movs	r3, #1
34182758:	e00f      	b.n	3418277a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
3418275a:	4a0a      	ldr	r2, [pc, #40]	@ (34182784 <SysTick_Config+0x40>)
3418275c:	687b      	ldr	r3, [r7, #4]
3418275e:	3b01      	subs	r3, #1
34182760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
34182762:	210f      	movs	r1, #15
34182764:	f04f 30ff 	mov.w	r0, #4294967295
34182768:	f7ff ff8e 	bl	34182688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
3418276c:	4b05      	ldr	r3, [pc, #20]	@ (34182784 <SysTick_Config+0x40>)
3418276e:	2200      	movs	r2, #0
34182770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34182772:	4b04      	ldr	r3, [pc, #16]	@ (34182784 <SysTick_Config+0x40>)
34182774:	2207      	movs	r2, #7
34182776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34182778:	2300      	movs	r3, #0
}
3418277a:	4618      	mov	r0, r3
3418277c:	3708      	adds	r7, #8
3418277e:	46bd      	mov	sp, r7
34182780:	bd80      	pop	{r7, pc}
34182782:	bf00      	nop
34182784:	e000e010 	.word	0xe000e010

34182788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34182788:	b580      	push	{r7, lr}
3418278a:	b082      	sub	sp, #8
3418278c:	af00      	add	r7, sp, #0
3418278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
34182790:	6878      	ldr	r0, [r7, #4]
34182792:	f7ff ff29 	bl	341825e8 <__NVIC_SetPriorityGrouping>
}
34182796:	bf00      	nop
34182798:	3708      	adds	r7, #8
3418279a:	46bd      	mov	sp, r7
3418279c:	bd80      	pop	{r7, pc}

3418279e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
3418279e:	b580      	push	{r7, lr}
341827a0:	b086      	sub	sp, #24
341827a2:	af00      	add	r7, sp, #0
341827a4:	4603      	mov	r3, r0
341827a6:	60b9      	str	r1, [r7, #8]
341827a8:	607a      	str	r2, [r7, #4]
341827aa:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
341827ac:	f7ff ff40 	bl	34182630 <__NVIC_GetPriorityGrouping>
341827b0:	4603      	mov	r3, r0
341827b2:	f003 0307 	and.w	r3, r3, #7
341827b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
341827b8:	687a      	ldr	r2, [r7, #4]
341827ba:	68b9      	ldr	r1, [r7, #8]
341827bc:	6978      	ldr	r0, [r7, #20]
341827be:	f7ff ff8d 	bl	341826dc <NVIC_EncodePriority>
341827c2:	4602      	mov	r2, r0
341827c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
341827c8:	4611      	mov	r1, r2
341827ca:	4618      	mov	r0, r3
341827cc:	f7ff ff5c 	bl	34182688 <__NVIC_SetPriority>
}
341827d0:	bf00      	nop
341827d2:	3718      	adds	r7, #24
341827d4:	46bd      	mov	sp, r7
341827d6:	bd80      	pop	{r7, pc}

341827d8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32n6xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
341827d8:	b580      	push	{r7, lr}
341827da:	b082      	sub	sp, #8
341827dc:	af00      	add	r7, sp, #0
341827de:	4603      	mov	r3, r0
341827e0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
341827e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
341827e6:	4618      	mov	r0, r3
341827e8:	f7ff ff30 	bl	3418264c <__NVIC_EnableIRQ>
}
341827ec:	bf00      	nop
341827ee:	3708      	adds	r7, #8
341827f0:	46bd      	mov	sp, r7
341827f2:	bd80      	pop	{r7, pc}

341827f4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
341827f4:	b580      	push	{r7, lr}
341827f6:	b082      	sub	sp, #8
341827f8:	af00      	add	r7, sp, #0
341827fa:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
341827fc:	6878      	ldr	r0, [r7, #4]
341827fe:	f7ff ffa1 	bl	34182744 <SysTick_Config>
34182802:	4603      	mov	r3, r0
}
34182804:	4618      	mov	r0, r3
34182806:	3708      	adds	r7, #8
34182808:	46bd      	mov	sp, r7
3418280a:	bd80      	pop	{r7, pc}

3418280c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
3418280c:	b480      	push	{r7}
3418280e:	b083      	sub	sp, #12
34182810:	af00      	add	r7, sp, #0
34182812:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
34182814:	f3bf 8f5f 	dmb	sy
}
34182818:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before enabling MPU */

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
3418281a:	4a0b      	ldr	r2, [pc, #44]	@ (34182848 <HAL_MPU_Enable+0x3c>)
3418281c:	687b      	ldr	r3, [r7, #4]
3418281e:	f043 0301 	orr.w	r3, r3, #1
34182822:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
34182824:	4b09      	ldr	r3, [pc, #36]	@ (3418284c <HAL_MPU_Enable+0x40>)
34182826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182828:	4a08      	ldr	r2, [pc, #32]	@ (3418284c <HAL_MPU_Enable+0x40>)
3418282a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3418282e:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
34182830:	f3bf 8f4f 	dsb	sy
}
34182834:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34182836:	f3bf 8f6f 	isb	sy
}
3418283a:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
3418283c:	bf00      	nop
3418283e:	370c      	adds	r7, #12
34182840:	46bd      	mov	sp, r7
34182842:	f85d 7b04 	ldr.w	r7, [sp], #4
34182846:	4770      	bx	lr
34182848:	e000ed90 	.word	0xe000ed90
3418284c:	e000ed00 	.word	0xe000ed00

34182850 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
34182850:	b480      	push	{r7}
34182852:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
34182854:	f3bf 8f5f 	dmb	sy
}
34182858:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
3418285a:	4b0b      	ldr	r3, [pc, #44]	@ (34182888 <HAL_MPU_Disable+0x38>)
3418285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418285e:	4a0a      	ldr	r2, [pc, #40]	@ (34182888 <HAL_MPU_Disable+0x38>)
34182860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182864:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU */
  MPU->CTRL &= ~MPU_CTRL_ENABLE_Msk;
34182866:	4b09      	ldr	r3, [pc, #36]	@ (3418288c <HAL_MPU_Disable+0x3c>)
34182868:	685b      	ldr	r3, [r3, #4]
3418286a:	4a08      	ldr	r2, [pc, #32]	@ (3418288c <HAL_MPU_Disable+0x3c>)
3418286c:	f023 0301 	bic.w	r3, r3, #1
34182870:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
34182872:	f3bf 8f4f 	dsb	sy
}
34182876:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34182878:	f3bf 8f6f 	isb	sy
}
3418287c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
3418287e:	bf00      	nop
34182880:	46bd      	mov	sp, r7
34182882:	f85d 7b04 	ldr.w	r7, [sp], #4
34182886:	4770      	bx	lr
34182888:	e000ed00 	.word	0xe000ed00
3418288c:	e000ed90 	.word	0xe000ed90

34182890 <HAL_MPU_ConfigRegion>:
  * @param  pMPU_RegionInit Pointer to a MPU_Region_InitTypeDef structure that contains
  *                         the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
34182890:	b580      	push	{r7, lr}
34182892:	b082      	sub	sp, #8
34182894:	af00      	add	r7, sp, #0
34182896:	6078      	str	r0, [r7, #4]
  MPU_ConfigRegion(MPU, pMPU_RegionInit);
34182898:	6879      	ldr	r1, [r7, #4]
3418289a:	4803      	ldr	r0, [pc, #12]	@ (341828a8 <HAL_MPU_ConfigRegion+0x18>)
3418289c:	f000 f814 	bl	341828c8 <MPU_ConfigRegion>
}
341828a0:	bf00      	nop
341828a2:	3708      	adds	r7, #8
341828a4:	46bd      	mov	sp, r7
341828a6:	bd80      	pop	{r7, pc}
341828a8:	e000ed90 	.word	0xe000ed90

341828ac <HAL_MPU_ConfigMemoryAttributes>:
  * @param  pMPU_AttributesInit Pointer to a MPU_Attributes_InitTypeDef structure that contains
  *                             the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigMemoryAttributes(const MPU_Attributes_InitTypeDef *pMPU_AttributesInit)
{
341828ac:	b580      	push	{r7, lr}
341828ae:	b082      	sub	sp, #8
341828b0:	af00      	add	r7, sp, #0
341828b2:	6078      	str	r0, [r7, #4]
  MPU_ConfigMemoryAttributes(MPU, pMPU_AttributesInit);
341828b4:	6879      	ldr	r1, [r7, #4]
341828b6:	4803      	ldr	r0, [pc, #12]	@ (341828c4 <HAL_MPU_ConfigMemoryAttributes+0x18>)
341828b8:	f000 f83e 	bl	34182938 <MPU_ConfigMemoryAttributes>
}
341828bc:	bf00      	nop
341828be:	3708      	adds	r7, #8
341828c0:	46bd      	mov	sp, r7
341828c2:	bd80      	pop	{r7, pc}
341828c4:	e000ed90 	.word	0xe000ed90

341828c8 <MPU_ConfigRegion>:

/** @addtogroup CORTEX_Private_Functions
  * @{
  */
static void MPU_ConfigRegion(MPU_Type *MPUx, const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
341828c8:	b480      	push	{r7}
341828ca:	b083      	sub	sp, #12
341828cc:	af00      	add	r7, sp, #0
341828ce:	6078      	str	r0, [r7, #4]
341828d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPUx->RNR = pMPU_RegionInit->Number;
341828d2:	683b      	ldr	r3, [r7, #0]
341828d4:	785b      	ldrb	r3, [r3, #1]
341828d6:	461a      	mov	r2, r3
341828d8:	687b      	ldr	r3, [r7, #4]
341828da:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPUx->RLAR, MPU_RLAR_EN_Msk);
341828dc:	687b      	ldr	r3, [r7, #4]
341828de:	691b      	ldr	r3, [r3, #16]
341828e0:	f023 0201 	bic.w	r2, r3, #1
341828e4:	687b      	ldr	r3, [r7, #4]
341828e6:	611a      	str	r2, [r3, #16]
  assert_param(IS_MPU_PRIV_INSTRUCTION_ACCESS(pMPU_RegionInit->DisablePrivExec));
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(pMPU_RegionInit->AccessPermission));
  assert_param(IS_MPU_ACCESS_SHAREABLE(pMPU_RegionInit->IsShareable));
  assert_param(IS_MPU_ATTRIBUTES_NUMBER(pMPU_RegionInit->AttributesIndex));

  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress & 0xFFFFFFE0UL)  |
341828e8:	683b      	ldr	r3, [r7, #0]
341828ea:	685b      	ldr	r3, [r3, #4]
341828ec:	f023 021f 	bic.w	r2, r3, #31
                ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RBAR_SH_Pos)  |
341828f0:	683b      	ldr	r3, [r7, #0]
341828f2:	7bdb      	ldrb	r3, [r3, #15]
341828f4:	00db      	lsls	r3, r3, #3
  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress & 0xFFFFFFE0UL)  |
341828f6:	431a      	orrs	r2, r3
                ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RBAR_AP_Pos)  |
341828f8:	683b      	ldr	r3, [r7, #0]
341828fa:	7b1b      	ldrb	r3, [r3, #12]
341828fc:	005b      	lsls	r3, r3, #1
                ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RBAR_SH_Pos)  |
341828fe:	4313      	orrs	r3, r2
                ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RBAR_XN_Pos));
34182900:	683a      	ldr	r2, [r7, #0]
34182902:	7b52      	ldrb	r2, [r2, #13]
                ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RBAR_AP_Pos)  |
34182904:	431a      	orrs	r2, r3
  MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress & 0xFFFFFFE0UL)  |
34182906:	687b      	ldr	r3, [r7, #4]
34182908:	60da      	str	r2, [r3, #12]

  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress & 0xFFFFFFE0UL) |
3418290a:	683b      	ldr	r3, [r7, #0]
3418290c:	689b      	ldr	r3, [r3, #8]
3418290e:	f023 021f 	bic.w	r2, r3, #31
                ((uint32_t)pMPU_RegionInit->DisablePrivExec << MPU_RLAR_PXN_Pos) |
34182912:	683b      	ldr	r3, [r7, #0]
34182914:	7b9b      	ldrb	r3, [r3, #14]
34182916:	011b      	lsls	r3, r3, #4
  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress & 0xFFFFFFE0UL) |
34182918:	431a      	orrs	r2, r3
                ((uint32_t)pMPU_RegionInit->AttributesIndex  << MPU_RLAR_AttrIndx_Pos) |
3418291a:	683b      	ldr	r3, [r7, #0]
3418291c:	789b      	ldrb	r3, [r3, #2]
3418291e:	005b      	lsls	r3, r3, #1
                ((uint32_t)pMPU_RegionInit->DisablePrivExec << MPU_RLAR_PXN_Pos) |
34182920:	4313      	orrs	r3, r2
                ((uint32_t)pMPU_RegionInit->Enable           << MPU_RLAR_EN_Pos));
34182922:	683a      	ldr	r2, [r7, #0]
34182924:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)pMPU_RegionInit->AttributesIndex  << MPU_RLAR_AttrIndx_Pos) |
34182926:	431a      	orrs	r2, r3
  MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress & 0xFFFFFFE0UL) |
34182928:	687b      	ldr	r3, [r7, #4]
3418292a:	611a      	str	r2, [r3, #16]
}
3418292c:	bf00      	nop
3418292e:	370c      	adds	r7, #12
34182930:	46bd      	mov	sp, r7
34182932:	f85d 7b04 	ldr.w	r7, [sp], #4
34182936:	4770      	bx	lr

34182938 <MPU_ConfigMemoryAttributes>:

static void MPU_ConfigMemoryAttributes(MPU_Type *MPUx, const MPU_Attributes_InitTypeDef *pMPU_AttributesInit)
{
34182938:	b480      	push	{r7}
3418293a:	b087      	sub	sp, #28
3418293c:	af00      	add	r7, sp, #0
3418293e:	6078      	str	r0, [r7, #4]
34182940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_MPU_ATTRIBUTES_NUMBER(pMPU_AttributesInit->Number));
  /* No need to check Attributes value as all 0x0..0xFF possible */

  if (pMPU_AttributesInit->Number < MPU_ATTRIBUTES_NUMBER4)
34182942:	683b      	ldr	r3, [r7, #0]
34182944:	781b      	ldrb	r3, [r3, #0]
34182946:	2b03      	cmp	r3, #3
34182948:	d806      	bhi.n	34182958 <MPU_ConfigMemoryAttributes+0x20>
  {
    /* Program MPU_MAIR0 */
    p_mair = &(MPUx->MAIR0);
3418294a:	687b      	ldr	r3, [r7, #4]
3418294c:	3330      	adds	r3, #48	@ 0x30
3418294e:	617b      	str	r3, [r7, #20]
    attr_number = pMPU_AttributesInit->Number;
34182950:	683b      	ldr	r3, [r7, #0]
34182952:	781b      	ldrb	r3, [r3, #0]
34182954:	613b      	str	r3, [r7, #16]
34182956:	e006      	b.n	34182966 <MPU_ConfigMemoryAttributes+0x2e>
  }
  else
  {
    /* Program MPU_MAIR1 */
    p_mair = &(MPUx->MAIR1);
34182958:	687b      	ldr	r3, [r7, #4]
3418295a:	3334      	adds	r3, #52	@ 0x34
3418295c:	617b      	str	r3, [r7, #20]
    attr_number = (uint32_t)pMPU_AttributesInit->Number - 4U;
3418295e:	683b      	ldr	r3, [r7, #0]
34182960:	781b      	ldrb	r3, [r3, #0]
34182962:	3b04      	subs	r3, #4
34182964:	613b      	str	r3, [r7, #16]
  }

  attr_values = *(p_mair);
34182966:	697b      	ldr	r3, [r7, #20]
34182968:	681b      	ldr	r3, [r3, #0]
3418296a:	60fb      	str	r3, [r7, #12]
  attr_values &=  ~(0xFFU << (attr_number * 8U));
3418296c:	693b      	ldr	r3, [r7, #16]
3418296e:	00db      	lsls	r3, r3, #3
34182970:	22ff      	movs	r2, #255	@ 0xff
34182972:	fa02 f303 	lsl.w	r3, r2, r3
34182976:	43db      	mvns	r3, r3
34182978:	68fa      	ldr	r2, [r7, #12]
3418297a:	4013      	ands	r3, r2
3418297c:	60fb      	str	r3, [r7, #12]
  *(p_mair) = attr_values | ((uint32_t)pMPU_AttributesInit->Attributes << (attr_number * 8U));
3418297e:	683b      	ldr	r3, [r7, #0]
34182980:	785b      	ldrb	r3, [r3, #1]
34182982:	461a      	mov	r2, r3
34182984:	693b      	ldr	r3, [r7, #16]
34182986:	00db      	lsls	r3, r3, #3
34182988:	409a      	lsls	r2, r3
3418298a:	68fb      	ldr	r3, [r7, #12]
3418298c:	431a      	orrs	r2, r3
3418298e:	697b      	ldr	r3, [r7, #20]
34182990:	601a      	str	r2, [r3, #0]
}
34182992:	bf00      	nop
34182994:	371c      	adds	r7, #28
34182996:	46bd      	mov	sp, r7
34182998:	f85d 7b04 	ldr.w	r7, [sp], #4
3418299c:	4770      	bx	lr

3418299e <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
3418299e:	b580      	push	{r7, lr}
341829a0:	b084      	sub	sp, #16
341829a2:	af00      	add	r7, sp, #0
341829a4:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
341829a6:	f7ff fd1f 	bl	341823e8 <HAL_GetTick>
341829aa:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
341829ac:	687b      	ldr	r3, [r7, #4]
341829ae:	2b00      	cmp	r3, #0
341829b0:	d101      	bne.n	341829b6 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
341829b2:	2301      	movs	r3, #1
341829b4:	e06b      	b.n	34182a8e <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
341829b6:	687b      	ldr	r3, [r7, #4]
341829b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
341829bc:	b2db      	uxtb	r3, r3
341829be:	2b02      	cmp	r3, #2
341829c0:	d008      	beq.n	341829d4 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
341829c2:	687b      	ldr	r3, [r7, #4]
341829c4:	2220      	movs	r2, #32
341829c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
341829c8:	687b      	ldr	r3, [r7, #4]
341829ca:	2200      	movs	r2, #0
341829cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
341829d0:	2301      	movs	r3, #1
341829d2:	e05c      	b.n	34182a8e <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
341829d4:	687b      	ldr	r3, [r7, #4]
341829d6:	681b      	ldr	r3, [r3, #0]
341829d8:	695a      	ldr	r2, [r3, #20]
341829da:	687b      	ldr	r3, [r7, #4]
341829dc:	681b      	ldr	r3, [r3, #0]
341829de:	f042 0204 	orr.w	r2, r2, #4
341829e2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
341829e4:	687b      	ldr	r3, [r7, #4]
341829e6:	2205      	movs	r2, #5
341829e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
341829ec:	e020      	b.n	34182a30 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
341829ee:	f7ff fcfb 	bl	341823e8 <HAL_GetTick>
341829f2:	4602      	mov	r2, r0
341829f4:	68fb      	ldr	r3, [r7, #12]
341829f6:	1ad3      	subs	r3, r2, r3
341829f8:	2b05      	cmp	r3, #5
341829fa:	d919      	bls.n	34182a30 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
341829fc:	687b      	ldr	r3, [r7, #4]
341829fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34182a00:	f043 0210 	orr.w	r2, r3, #16
34182a04:	687b      	ldr	r3, [r7, #4]
34182a06:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
34182a08:	687b      	ldr	r3, [r7, #4]
34182a0a:	2203      	movs	r2, #3
34182a0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34182a10:	687b      	ldr	r3, [r7, #4]
34182a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34182a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34182a18:	2b00      	cmp	r3, #0
34182a1a:	d003      	beq.n	34182a24 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34182a1c:	687b      	ldr	r3, [r7, #4]
34182a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34182a20:	2201      	movs	r2, #1
34182a22:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
34182a24:	687b      	ldr	r3, [r7, #4]
34182a26:	2200      	movs	r2, #0
34182a28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
34182a2c:	2301      	movs	r3, #1
34182a2e:	e02e      	b.n	34182a8e <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
34182a30:	687b      	ldr	r3, [r7, #4]
34182a32:	681b      	ldr	r3, [r3, #0]
34182a34:	691b      	ldr	r3, [r3, #16]
34182a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34182a3a:	2b00      	cmp	r3, #0
34182a3c:	d0d7      	beq.n	341829ee <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
34182a3e:	687b      	ldr	r3, [r7, #4]
34182a40:	681b      	ldr	r3, [r3, #0]
34182a42:	695a      	ldr	r2, [r3, #20]
34182a44:	687b      	ldr	r3, [r7, #4]
34182a46:	681b      	ldr	r3, [r3, #0]
34182a48:	f042 0202 	orr.w	r2, r2, #2
34182a4c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
34182a4e:	687b      	ldr	r3, [r7, #4]
34182a50:	2204      	movs	r2, #4
34182a52:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
34182a56:	687b      	ldr	r3, [r7, #4]
34182a58:	681b      	ldr	r3, [r3, #0]
34182a5a:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
34182a5e:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
34182a60:	687b      	ldr	r3, [r7, #4]
34182a62:	2201      	movs	r2, #1
34182a64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34182a68:	687b      	ldr	r3, [r7, #4]
34182a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34182a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34182a70:	2b00      	cmp	r3, #0
34182a72:	d007      	beq.n	34182a84 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34182a74:	687b      	ldr	r3, [r7, #4]
34182a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34182a78:	2201      	movs	r2, #1
34182a7a:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
34182a7c:	687b      	ldr	r3, [r7, #4]
34182a7e:	681b      	ldr	r3, [r3, #0]
34182a80:	2200      	movs	r2, #0
34182a82:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
34182a84:	687b      	ldr	r3, [r7, #4]
34182a86:	2200      	movs	r2, #0
34182a88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
34182a8c:	2300      	movs	r3, #0
}
34182a8e:	4618      	mov	r0, r3
34182a90:	3710      	adds	r7, #16
34182a92:	46bd      	mov	sp, r7
34182a94:	bd80      	pop	{r7, pc}

34182a96 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
34182a96:	b480      	push	{r7}
34182a98:	b083      	sub	sp, #12
34182a9a:	af00      	add	r7, sp, #0
34182a9c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
34182a9e:	687b      	ldr	r3, [r7, #4]
34182aa0:	2b00      	cmp	r3, #0
34182aa2:	d101      	bne.n	34182aa8 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
34182aa4:	2301      	movs	r3, #1
34182aa6:	e019      	b.n	34182adc <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
34182aa8:	687b      	ldr	r3, [r7, #4]
34182aaa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34182aae:	b2db      	uxtb	r3, r3
34182ab0:	2b02      	cmp	r3, #2
34182ab2:	d004      	beq.n	34182abe <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
34182ab4:	687b      	ldr	r3, [r7, #4]
34182ab6:	2220      	movs	r2, #32
34182ab8:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
34182aba:	2301      	movs	r3, #1
34182abc:	e00e      	b.n	34182adc <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
34182abe:	687b      	ldr	r3, [r7, #4]
34182ac0:	2204      	movs	r2, #4
34182ac2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
34182ac6:	687b      	ldr	r3, [r7, #4]
34182ac8:	681b      	ldr	r3, [r3, #0]
34182aca:	695b      	ldr	r3, [r3, #20]
34182acc:	687a      	ldr	r2, [r7, #4]
34182ace:	6812      	ldr	r2, [r2, #0]
34182ad0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34182ad4:	f043 0304 	orr.w	r3, r3, #4
34182ad8:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
34182ada:	2300      	movs	r3, #0
}
34182adc:	4618      	mov	r0, r3
34182ade:	370c      	adds	r7, #12
34182ae0:	46bd      	mov	sp, r7
34182ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
34182ae6:	4770      	bx	lr

34182ae8 <HAL_EXTI_ConfigLineAttributes>:
  *            @arg @ref EXTI_LINE_SEC          Secure-only access
  *            @arg @ref EXTI_LINE_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_EXTI_ConfigLineAttributes(uint32_t ExtiLine, uint32_t LineAttributes)
{
34182ae8:	b480      	push	{r7}
34182aea:	b089      	sub	sp, #36	@ 0x24
34182aec:	af00      	add	r7, sp, #0
34182aee:	6078      	str	r0, [r7, #4]
34182af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
  assert_param(IS_EXTI_LINE_ATTRIBUTES(LineAttributes));

  /* compute line register offset and line mask */
  offset = ((ExtiLine & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
34182af2:	687b      	ldr	r3, [r7, #4]
34182af4:	0c1b      	lsrs	r3, r3, #16
34182af6:	f003 0303 	and.w	r3, r3, #3
34182afa:	61bb      	str	r3, [r7, #24]
  linepos = (ExtiLine & EXTI_PIN_MASK);
34182afc:	687b      	ldr	r3, [r7, #4]
34182afe:	f003 031f 	and.w	r3, r3, #31
34182b02:	617b      	str	r3, [r7, #20]
  maskline = (1UL << linepos);
34182b04:	2201      	movs	r2, #1
34182b06:	697b      	ldr	r3, [r7, #20]
34182b08:	fa02 f303 	lsl.w	r3, r2, r3
34182b0c:	613b      	str	r3, [r7, #16]

  /* Configure privilege or non-privilege attributes */
  regaddr = (__IO uint32_t *)(&EXTI->PRIVCFGR1 + (EXTI_PRIVCFGR_OFFSET * offset));
34182b0e:	69bb      	ldr	r3, [r7, #24]
34182b10:	015a      	lsls	r2, r3, #5
34182b12:	4b24      	ldr	r3, [pc, #144]	@ (34182ba4 <HAL_EXTI_ConfigLineAttributes+0xbc>)
34182b14:	4413      	add	r3, r2
34182b16:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
34182b18:	68fb      	ldr	r3, [r7, #12]
34182b1a:	681b      	ldr	r3, [r3, #0]
34182b1c:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((LineAttributes & EXTI_LINE_PRIV) == EXTI_LINE_PRIV)
34182b1e:	683a      	ldr	r2, [r7, #0]
34182b20:	f240 2302 	movw	r3, #514	@ 0x202
34182b24:	4013      	ands	r3, r2
34182b26:	f240 2202 	movw	r2, #514	@ 0x202
34182b2a:	4293      	cmp	r3, r2
34182b2c:	d104      	bne.n	34182b38 <HAL_EXTI_ConfigLineAttributes+0x50>
  {
    regval |= maskline;
34182b2e:	69fa      	ldr	r2, [r7, #28]
34182b30:	693b      	ldr	r3, [r7, #16]
34182b32:	4313      	orrs	r3, r2
34182b34:	61fb      	str	r3, [r7, #28]
34182b36:	e009      	b.n	34182b4c <HAL_EXTI_ConfigLineAttributes+0x64>
  }
  else if ((LineAttributes & EXTI_LINE_NPRIV) == EXTI_LINE_NPRIV)
34182b38:	683b      	ldr	r3, [r7, #0]
34182b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34182b3e:	2b00      	cmp	r3, #0
34182b40:	d004      	beq.n	34182b4c <HAL_EXTI_ConfigLineAttributes+0x64>
  {
    regval &= ~maskline;
34182b42:	693b      	ldr	r3, [r7, #16]
34182b44:	43db      	mvns	r3, r3
34182b46:	69fa      	ldr	r2, [r7, #28]
34182b48:	4013      	ands	r3, r2
34182b4a:	61fb      	str	r3, [r7, #28]
  {
    /* do nothing */
  }

  /* Store privilege or non-privilege attribute */
  *regaddr = regval;
34182b4c:	68fb      	ldr	r3, [r7, #12]
34182b4e:	69fa      	ldr	r2, [r7, #28]
34182b50:	601a      	str	r2, [r3, #0]

#if defined CPU_IN_SECURE_STATE
  /* Configure secure or non-secure attributes */
  regaddr = (__IO uint32_t *)(&EXTI->SECCFGR1 + (EXTI_SECCFGR_OFFSET * offset));
34182b52:	69bb      	ldr	r3, [r7, #24]
34182b54:	015a      	lsls	r2, r3, #5
34182b56:	4b14      	ldr	r3, [pc, #80]	@ (34182ba8 <HAL_EXTI_ConfigLineAttributes+0xc0>)
34182b58:	4413      	add	r3, r2
34182b5a:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
34182b5c:	68fb      	ldr	r3, [r7, #12]
34182b5e:	681b      	ldr	r3, [r3, #0]
34182b60:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((LineAttributes & EXTI_LINE_SEC) == EXTI_LINE_SEC)
34182b62:	683a      	ldr	r2, [r7, #0]
34182b64:	f240 1301 	movw	r3, #257	@ 0x101
34182b68:	4013      	ands	r3, r2
34182b6a:	f240 1201 	movw	r2, #257	@ 0x101
34182b6e:	4293      	cmp	r3, r2
34182b70:	d104      	bne.n	34182b7c <HAL_EXTI_ConfigLineAttributes+0x94>
  {
    regval |= maskline;
34182b72:	69fa      	ldr	r2, [r7, #28]
34182b74:	693b      	ldr	r3, [r7, #16]
34182b76:	4313      	orrs	r3, r2
34182b78:	61fb      	str	r3, [r7, #28]
34182b7a:	e009      	b.n	34182b90 <HAL_EXTI_ConfigLineAttributes+0xa8>
  }
  else if ((LineAttributes & EXTI_LINE_NSEC) == EXTI_LINE_NSEC)
34182b7c:	683b      	ldr	r3, [r7, #0]
34182b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34182b82:	2b00      	cmp	r3, #0
34182b84:	d004      	beq.n	34182b90 <HAL_EXTI_ConfigLineAttributes+0xa8>
  {
    regval &= ~maskline;
34182b86:	693b      	ldr	r3, [r7, #16]
34182b88:	43db      	mvns	r3, r3
34182b8a:	69fa      	ldr	r2, [r7, #28]
34182b8c:	4013      	ands	r3, r2
34182b8e:	61fb      	str	r3, [r7, #28]
  {
    /* do nothing */
  }

  /* Store secure or non-secure attribute */
  *regaddr = regval;
34182b90:	68fb      	ldr	r3, [r7, #12]
34182b92:	69fa      	ldr	r2, [r7, #28]
34182b94:	601a      	str	r2, [r3, #0]
#endif /* CPU_IN_SECURE_STATE */

}
34182b96:	bf00      	nop
34182b98:	3724      	adds	r7, #36	@ 0x24
34182b9a:	46bd      	mov	sp, r7
34182b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182ba0:	4770      	bx	lr
34182ba2:	bf00      	nop
34182ba4:	56025018 	.word	0x56025018
34182ba8:	56025014 	.word	0x56025014

34182bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34182bac:	b480      	push	{r7}
34182bae:	b087      	sub	sp, #28
34182bb0:	af00      	add	r7, sp, #0
34182bb2:	6078      	str	r0, [r7, #4]
34182bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34182bb6:	2300      	movs	r3, #0
34182bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34182bba:	e180      	b.n	34182ebe <HAL_GPIO_Init+0x312>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34182bbc:	683b      	ldr	r3, [r7, #0]
34182bbe:	681a      	ldr	r2, [r3, #0]
34182bc0:	2101      	movs	r1, #1
34182bc2:	697b      	ldr	r3, [r7, #20]
34182bc4:	fa01 f303 	lsl.w	r3, r1, r3
34182bc8:	4013      	ands	r3, r2
34182bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34182bcc:	68fb      	ldr	r3, [r7, #12]
34182bce:	2b00      	cmp	r3, #0
34182bd0:	f000 8172 	beq.w	34182eb8 <HAL_GPIO_Init+0x30c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34182bd4:	683b      	ldr	r3, [r7, #0]
34182bd6:	685b      	ldr	r3, [r3, #4]
34182bd8:	f003 0303 	and.w	r3, r3, #3
34182bdc:	2b01      	cmp	r3, #1
34182bde:	d005      	beq.n	34182bec <HAL_GPIO_Init+0x40>
34182be0:	683b      	ldr	r3, [r7, #0]
34182be2:	685b      	ldr	r3, [r3, #4]
34182be4:	f003 0303 	and.w	r3, r3, #3
34182be8:	2b02      	cmp	r3, #2
34182bea:	d130      	bne.n	34182c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34182bec:	687b      	ldr	r3, [r7, #4]
34182bee:	689b      	ldr	r3, [r3, #8]
34182bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34182bf2:	697b      	ldr	r3, [r7, #20]
34182bf4:	005b      	lsls	r3, r3, #1
34182bf6:	2203      	movs	r2, #3
34182bf8:	fa02 f303 	lsl.w	r3, r2, r3
34182bfc:	43db      	mvns	r3, r3
34182bfe:	693a      	ldr	r2, [r7, #16]
34182c00:	4013      	ands	r3, r2
34182c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34182c04:	683b      	ldr	r3, [r7, #0]
34182c06:	68da      	ldr	r2, [r3, #12]
34182c08:	697b      	ldr	r3, [r7, #20]
34182c0a:	005b      	lsls	r3, r3, #1
34182c0c:	fa02 f303 	lsl.w	r3, r2, r3
34182c10:	693a      	ldr	r2, [r7, #16]
34182c12:	4313      	orrs	r3, r2
34182c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
34182c16:	687b      	ldr	r3, [r7, #4]
34182c18:	693a      	ldr	r2, [r7, #16]
34182c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34182c1c:	687b      	ldr	r3, [r7, #4]
34182c1e:	685b      	ldr	r3, [r3, #4]
34182c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34182c22:	2201      	movs	r2, #1
34182c24:	697b      	ldr	r3, [r7, #20]
34182c26:	fa02 f303 	lsl.w	r3, r2, r3
34182c2a:	43db      	mvns	r3, r3
34182c2c:	693a      	ldr	r2, [r7, #16]
34182c2e:	4013      	ands	r3, r2
34182c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34182c32:	683b      	ldr	r3, [r7, #0]
34182c34:	685b      	ldr	r3, [r3, #4]
34182c36:	091b      	lsrs	r3, r3, #4
34182c38:	f003 0201 	and.w	r2, r3, #1
34182c3c:	697b      	ldr	r3, [r7, #20]
34182c3e:	fa02 f303 	lsl.w	r3, r2, r3
34182c42:	693a      	ldr	r2, [r7, #16]
34182c44:	4313      	orrs	r3, r2
34182c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
34182c48:	687b      	ldr	r3, [r7, #4]
34182c4a:	693a      	ldr	r2, [r7, #16]
34182c4c:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34182c4e:	683b      	ldr	r3, [r7, #0]
34182c50:	685b      	ldr	r3, [r3, #4]
34182c52:	f003 0303 	and.w	r3, r3, #3
34182c56:	2b03      	cmp	r3, #3
34182c58:	d109      	bne.n	34182c6e <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34182c5a:	683b      	ldr	r3, [r7, #0]
34182c5c:	685b      	ldr	r3, [r3, #4]
34182c5e:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34182c62:	2b03      	cmp	r3, #3
34182c64:	d11b      	bne.n	34182c9e <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34182c66:	683b      	ldr	r3, [r7, #0]
34182c68:	689b      	ldr	r3, [r3, #8]
34182c6a:	2b01      	cmp	r3, #1
34182c6c:	d017      	beq.n	34182c9e <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
34182c6e:	687b      	ldr	r3, [r7, #4]
34182c70:	68db      	ldr	r3, [r3, #12]
34182c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34182c74:	697b      	ldr	r3, [r7, #20]
34182c76:	005b      	lsls	r3, r3, #1
34182c78:	2203      	movs	r2, #3
34182c7a:	fa02 f303 	lsl.w	r3, r2, r3
34182c7e:	43db      	mvns	r3, r3
34182c80:	693a      	ldr	r2, [r7, #16]
34182c82:	4013      	ands	r3, r2
34182c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34182c86:	683b      	ldr	r3, [r7, #0]
34182c88:	689a      	ldr	r2, [r3, #8]
34182c8a:	697b      	ldr	r3, [r7, #20]
34182c8c:	005b      	lsls	r3, r3, #1
34182c8e:	fa02 f303 	lsl.w	r3, r2, r3
34182c92:	693a      	ldr	r2, [r7, #16]
34182c94:	4313      	orrs	r3, r2
34182c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
34182c98:	687b      	ldr	r3, [r7, #4]
34182c9a:	693a      	ldr	r2, [r7, #16]
34182c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34182c9e:	683b      	ldr	r3, [r7, #0]
34182ca0:	685b      	ldr	r3, [r3, #4]
34182ca2:	f003 0303 	and.w	r3, r3, #3
34182ca6:	2b02      	cmp	r3, #2
34182ca8:	d123      	bne.n	34182cf2 <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
34182caa:	697b      	ldr	r3, [r7, #20]
34182cac:	08da      	lsrs	r2, r3, #3
34182cae:	687b      	ldr	r3, [r7, #4]
34182cb0:	3208      	adds	r2, #8
34182cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34182cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34182cb8:	697b      	ldr	r3, [r7, #20]
34182cba:	f003 0307 	and.w	r3, r3, #7
34182cbe:	009b      	lsls	r3, r3, #2
34182cc0:	220f      	movs	r2, #15
34182cc2:	fa02 f303 	lsl.w	r3, r2, r3
34182cc6:	43db      	mvns	r3, r3
34182cc8:	693a      	ldr	r2, [r7, #16]
34182cca:	4013      	ands	r3, r2
34182ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34182cce:	683b      	ldr	r3, [r7, #0]
34182cd0:	691a      	ldr	r2, [r3, #16]
34182cd2:	697b      	ldr	r3, [r7, #20]
34182cd4:	f003 0307 	and.w	r3, r3, #7
34182cd8:	009b      	lsls	r3, r3, #2
34182cda:	fa02 f303 	lsl.w	r3, r2, r3
34182cde:	693a      	ldr	r2, [r7, #16]
34182ce0:	4313      	orrs	r3, r2
34182ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34182ce4:	697b      	ldr	r3, [r7, #20]
34182ce6:	08da      	lsrs	r2, r3, #3
34182ce8:	687b      	ldr	r3, [r7, #4]
34182cea:	3208      	adds	r2, #8
34182cec:	6939      	ldr	r1, [r7, #16]
34182cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
34182cf2:	687b      	ldr	r3, [r7, #4]
34182cf4:	681b      	ldr	r3, [r3, #0]
34182cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34182cf8:	697b      	ldr	r3, [r7, #20]
34182cfa:	005b      	lsls	r3, r3, #1
34182cfc:	2203      	movs	r2, #3
34182cfe:	fa02 f303 	lsl.w	r3, r2, r3
34182d02:	43db      	mvns	r3, r3
34182d04:	693a      	ldr	r2, [r7, #16]
34182d06:	4013      	ands	r3, r2
34182d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34182d0a:	683b      	ldr	r3, [r7, #0]
34182d0c:	685b      	ldr	r3, [r3, #4]
34182d0e:	f003 0203 	and.w	r2, r3, #3
34182d12:	697b      	ldr	r3, [r7, #20]
34182d14:	005b      	lsls	r3, r3, #1
34182d16:	fa02 f303 	lsl.w	r3, r2, r3
34182d1a:	693a      	ldr	r2, [r7, #16]
34182d1c:	4313      	orrs	r3, r2
34182d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
34182d20:	687b      	ldr	r3, [r7, #4]
34182d22:	693a      	ldr	r2, [r7, #16]
34182d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34182d26:	683b      	ldr	r3, [r7, #0]
34182d28:	685b      	ldr	r3, [r3, #4]
34182d2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
34182d2e:	2b00      	cmp	r3, #0
34182d30:	f000 80c2 	beq.w	34182eb8 <HAL_GPIO_Init+0x30c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34182d34:	4a69      	ldr	r2, [pc, #420]	@ (34182edc <HAL_GPIO_Init+0x330>)
34182d36:	697b      	ldr	r3, [r7, #20]
34182d38:	089b      	lsrs	r3, r3, #2
34182d3a:	3318      	adds	r3, #24
34182d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34182d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34182d42:	697b      	ldr	r3, [r7, #20]
34182d44:	f003 0303 	and.w	r3, r3, #3
34182d48:	00db      	lsls	r3, r3, #3
34182d4a:	220f      	movs	r2, #15
34182d4c:	fa02 f303 	lsl.w	r3, r2, r3
34182d50:	43db      	mvns	r3, r3
34182d52:	693a      	ldr	r2, [r7, #16]
34182d54:	4013      	ands	r3, r2
34182d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34182d58:	687b      	ldr	r3, [r7, #4]
34182d5a:	4a61      	ldr	r2, [pc, #388]	@ (34182ee0 <HAL_GPIO_Init+0x334>)
34182d5c:	4293      	cmp	r3, r2
34182d5e:	d043      	beq.n	34182de8 <HAL_GPIO_Init+0x23c>
34182d60:	687b      	ldr	r3, [r7, #4]
34182d62:	4a60      	ldr	r2, [pc, #384]	@ (34182ee4 <HAL_GPIO_Init+0x338>)
34182d64:	4293      	cmp	r3, r2
34182d66:	d03d      	beq.n	34182de4 <HAL_GPIO_Init+0x238>
34182d68:	687b      	ldr	r3, [r7, #4]
34182d6a:	4a5f      	ldr	r2, [pc, #380]	@ (34182ee8 <HAL_GPIO_Init+0x33c>)
34182d6c:	4293      	cmp	r3, r2
34182d6e:	d037      	beq.n	34182de0 <HAL_GPIO_Init+0x234>
34182d70:	687b      	ldr	r3, [r7, #4]
34182d72:	4a5e      	ldr	r2, [pc, #376]	@ (34182eec <HAL_GPIO_Init+0x340>)
34182d74:	4293      	cmp	r3, r2
34182d76:	d031      	beq.n	34182ddc <HAL_GPIO_Init+0x230>
34182d78:	687b      	ldr	r3, [r7, #4]
34182d7a:	4a5d      	ldr	r2, [pc, #372]	@ (34182ef0 <HAL_GPIO_Init+0x344>)
34182d7c:	4293      	cmp	r3, r2
34182d7e:	d02b      	beq.n	34182dd8 <HAL_GPIO_Init+0x22c>
34182d80:	687b      	ldr	r3, [r7, #4]
34182d82:	4a5c      	ldr	r2, [pc, #368]	@ (34182ef4 <HAL_GPIO_Init+0x348>)
34182d84:	4293      	cmp	r3, r2
34182d86:	d025      	beq.n	34182dd4 <HAL_GPIO_Init+0x228>
34182d88:	687b      	ldr	r3, [r7, #4]
34182d8a:	4a5b      	ldr	r2, [pc, #364]	@ (34182ef8 <HAL_GPIO_Init+0x34c>)
34182d8c:	4293      	cmp	r3, r2
34182d8e:	d01f      	beq.n	34182dd0 <HAL_GPIO_Init+0x224>
34182d90:	687b      	ldr	r3, [r7, #4]
34182d92:	4a5a      	ldr	r2, [pc, #360]	@ (34182efc <HAL_GPIO_Init+0x350>)
34182d94:	4293      	cmp	r3, r2
34182d96:	d019      	beq.n	34182dcc <HAL_GPIO_Init+0x220>
34182d98:	687b      	ldr	r3, [r7, #4]
34182d9a:	4a59      	ldr	r2, [pc, #356]	@ (34182f00 <HAL_GPIO_Init+0x354>)
34182d9c:	4293      	cmp	r3, r2
34182d9e:	d013      	beq.n	34182dc8 <HAL_GPIO_Init+0x21c>
34182da0:	687b      	ldr	r3, [r7, #4]
34182da2:	4a58      	ldr	r2, [pc, #352]	@ (34182f04 <HAL_GPIO_Init+0x358>)
34182da4:	4293      	cmp	r3, r2
34182da6:	d00d      	beq.n	34182dc4 <HAL_GPIO_Init+0x218>
34182da8:	687b      	ldr	r3, [r7, #4]
34182daa:	4a57      	ldr	r2, [pc, #348]	@ (34182f08 <HAL_GPIO_Init+0x35c>)
34182dac:	4293      	cmp	r3, r2
34182dae:	d007      	beq.n	34182dc0 <HAL_GPIO_Init+0x214>
34182db0:	687b      	ldr	r3, [r7, #4]
34182db2:	4a56      	ldr	r2, [pc, #344]	@ (34182f0c <HAL_GPIO_Init+0x360>)
34182db4:	4293      	cmp	r3, r2
34182db6:	d101      	bne.n	34182dbc <HAL_GPIO_Init+0x210>
34182db8:	230b      	movs	r3, #11
34182dba:	e016      	b.n	34182dea <HAL_GPIO_Init+0x23e>
34182dbc:	2310      	movs	r3, #16
34182dbe:	e014      	b.n	34182dea <HAL_GPIO_Init+0x23e>
34182dc0:	230a      	movs	r3, #10
34182dc2:	e012      	b.n	34182dea <HAL_GPIO_Init+0x23e>
34182dc4:	2309      	movs	r3, #9
34182dc6:	e010      	b.n	34182dea <HAL_GPIO_Init+0x23e>
34182dc8:	2308      	movs	r3, #8
34182dca:	e00e      	b.n	34182dea <HAL_GPIO_Init+0x23e>
34182dcc:	2307      	movs	r3, #7
34182dce:	e00c      	b.n	34182dea <HAL_GPIO_Init+0x23e>
34182dd0:	2306      	movs	r3, #6
34182dd2:	e00a      	b.n	34182dea <HAL_GPIO_Init+0x23e>
34182dd4:	2305      	movs	r3, #5
34182dd6:	e008      	b.n	34182dea <HAL_GPIO_Init+0x23e>
34182dd8:	2304      	movs	r3, #4
34182dda:	e006      	b.n	34182dea <HAL_GPIO_Init+0x23e>
34182ddc:	2303      	movs	r3, #3
34182dde:	e004      	b.n	34182dea <HAL_GPIO_Init+0x23e>
34182de0:	2302      	movs	r3, #2
34182de2:	e002      	b.n	34182dea <HAL_GPIO_Init+0x23e>
34182de4:	2301      	movs	r3, #1
34182de6:	e000      	b.n	34182dea <HAL_GPIO_Init+0x23e>
34182de8:	2300      	movs	r3, #0
34182dea:	697a      	ldr	r2, [r7, #20]
34182dec:	f002 0203 	and.w	r2, r2, #3
34182df0:	00d2      	lsls	r2, r2, #3
34182df2:	4093      	lsls	r3, r2
34182df4:	693a      	ldr	r2, [r7, #16]
34182df6:	4313      	orrs	r3, r2
34182df8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
34182dfa:	4938      	ldr	r1, [pc, #224]	@ (34182edc <HAL_GPIO_Init+0x330>)
34182dfc:	697b      	ldr	r3, [r7, #20]
34182dfe:	089b      	lsrs	r3, r3, #2
34182e00:	3318      	adds	r3, #24
34182e02:	693a      	ldr	r2, [r7, #16]
34182e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34182e08:	4b34      	ldr	r3, [pc, #208]	@ (34182edc <HAL_GPIO_Init+0x330>)
34182e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34182e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34182e10:	68fb      	ldr	r3, [r7, #12]
34182e12:	43db      	mvns	r3, r3
34182e14:	693a      	ldr	r2, [r7, #16]
34182e16:	4013      	ands	r3, r2
34182e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
34182e1a:	683b      	ldr	r3, [r7, #0]
34182e1c:	685b      	ldr	r3, [r3, #4]
34182e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34182e22:	2b00      	cmp	r3, #0
34182e24:	d003      	beq.n	34182e2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
34182e26:	693a      	ldr	r2, [r7, #16]
34182e28:	68fb      	ldr	r3, [r7, #12]
34182e2a:	4313      	orrs	r3, r2
34182e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34182e2e:	4a2b      	ldr	r2, [pc, #172]	@ (34182edc <HAL_GPIO_Init+0x330>)
34182e30:	693b      	ldr	r3, [r7, #16]
34182e32:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
34182e36:	4b29      	ldr	r3, [pc, #164]	@ (34182edc <HAL_GPIO_Init+0x330>)
34182e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34182e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34182e3e:	68fb      	ldr	r3, [r7, #12]
34182e40:	43db      	mvns	r3, r3
34182e42:	693a      	ldr	r2, [r7, #16]
34182e44:	4013      	ands	r3, r2
34182e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34182e48:	683b      	ldr	r3, [r7, #0]
34182e4a:	685b      	ldr	r3, [r3, #4]
34182e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34182e50:	2b00      	cmp	r3, #0
34182e52:	d003      	beq.n	34182e5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
34182e54:	693a      	ldr	r2, [r7, #16]
34182e56:	68fb      	ldr	r3, [r7, #12]
34182e58:	4313      	orrs	r3, r2
34182e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34182e5c:	4a1f      	ldr	r2, [pc, #124]	@ (34182edc <HAL_GPIO_Init+0x330>)
34182e5e:	693b      	ldr	r3, [r7, #16]
34182e60:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34182e64:	4b1d      	ldr	r3, [pc, #116]	@ (34182edc <HAL_GPIO_Init+0x330>)
34182e66:	681b      	ldr	r3, [r3, #0]
34182e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34182e6a:	68fb      	ldr	r3, [r7, #12]
34182e6c:	43db      	mvns	r3, r3
34182e6e:	693a      	ldr	r2, [r7, #16]
34182e70:	4013      	ands	r3, r2
34182e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34182e74:	683b      	ldr	r3, [r7, #0]
34182e76:	685b      	ldr	r3, [r3, #4]
34182e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34182e7c:	2b00      	cmp	r3, #0
34182e7e:	d003      	beq.n	34182e88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
34182e80:	693a      	ldr	r2, [r7, #16]
34182e82:	68fb      	ldr	r3, [r7, #12]
34182e84:	4313      	orrs	r3, r2
34182e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34182e88:	4a14      	ldr	r2, [pc, #80]	@ (34182edc <HAL_GPIO_Init+0x330>)
34182e8a:	693b      	ldr	r3, [r7, #16]
34182e8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34182e8e:	4b13      	ldr	r3, [pc, #76]	@ (34182edc <HAL_GPIO_Init+0x330>)
34182e90:	685b      	ldr	r3, [r3, #4]
34182e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34182e94:	68fb      	ldr	r3, [r7, #12]
34182e96:	43db      	mvns	r3, r3
34182e98:	693a      	ldr	r2, [r7, #16]
34182e9a:	4013      	ands	r3, r2
34182e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
34182e9e:	683b      	ldr	r3, [r7, #0]
34182ea0:	685b      	ldr	r3, [r3, #4]
34182ea2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34182ea6:	2b00      	cmp	r3, #0
34182ea8:	d003      	beq.n	34182eb2 <HAL_GPIO_Init+0x306>
        {
          temp |= iocurrent;
34182eaa:	693a      	ldr	r2, [r7, #16]
34182eac:	68fb      	ldr	r3, [r7, #12]
34182eae:	4313      	orrs	r3, r2
34182eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
34182eb2:	4a0a      	ldr	r2, [pc, #40]	@ (34182edc <HAL_GPIO_Init+0x330>)
34182eb4:	693b      	ldr	r3, [r7, #16]
34182eb6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
34182eb8:	697b      	ldr	r3, [r7, #20]
34182eba:	3301      	adds	r3, #1
34182ebc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34182ebe:	683b      	ldr	r3, [r7, #0]
34182ec0:	681a      	ldr	r2, [r3, #0]
34182ec2:	697b      	ldr	r3, [r7, #20]
34182ec4:	fa22 f303 	lsr.w	r3, r2, r3
34182ec8:	2b00      	cmp	r3, #0
34182eca:	f47f ae77 	bne.w	34182bbc <HAL_GPIO_Init+0x10>
  }
}
34182ece:	bf00      	nop
34182ed0:	bf00      	nop
34182ed2:	371c      	adds	r7, #28
34182ed4:	46bd      	mov	sp, r7
34182ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
34182eda:	4770      	bx	lr
34182edc:	56025000 	.word	0x56025000
34182ee0:	56020000 	.word	0x56020000
34182ee4:	56020400 	.word	0x56020400
34182ee8:	56020800 	.word	0x56020800
34182eec:	56020c00 	.word	0x56020c00
34182ef0:	56021000 	.word	0x56021000
34182ef4:	56021400 	.word	0x56021400
34182ef8:	56021800 	.word	0x56021800
34182efc:	56021c00 	.word	0x56021c00
34182f00:	56023400 	.word	0x56023400
34182f04:	56023800 	.word	0x56023800
34182f08:	56023c00 	.word	0x56023c00
34182f0c:	56024000 	.word	0x56024000

34182f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34182f10:	b480      	push	{r7}
34182f12:	b083      	sub	sp, #12
34182f14:	af00      	add	r7, sp, #0
34182f16:	6078      	str	r0, [r7, #4]
34182f18:	460b      	mov	r3, r1
34182f1a:	807b      	strh	r3, [r7, #2]
34182f1c:	4613      	mov	r3, r2
34182f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
34182f20:	787b      	ldrb	r3, [r7, #1]
34182f22:	2b00      	cmp	r3, #0
34182f24:	d003      	beq.n	34182f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34182f26:	887a      	ldrh	r2, [r7, #2]
34182f28:	687b      	ldr	r3, [r7, #4]
34182f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34182f2c:	e002      	b.n	34182f34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34182f2e:	887a      	ldrh	r2, [r7, #2]
34182f30:	687b      	ldr	r3, [r7, #4]
34182f32:	629a      	str	r2, [r3, #40]	@ 0x28
}
34182f34:	bf00      	nop
34182f36:	370c      	adds	r7, #12
34182f38:	46bd      	mov	sp, r7
34182f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
34182f3e:	4770      	bx	lr

34182f40 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
34182f40:	b480      	push	{r7}
34182f42:	b085      	sub	sp, #20
34182f44:	af00      	add	r7, sp, #0
34182f46:	6078      	str	r0, [r7, #4]
34182f48:	460b      	mov	r3, r1
34182f4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
34182f4c:	687b      	ldr	r3, [r7, #4]
34182f4e:	695b      	ldr	r3, [r3, #20]
34182f50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
34182f52:	887a      	ldrh	r2, [r7, #2]
34182f54:	68fb      	ldr	r3, [r7, #12]
34182f56:	4013      	ands	r3, r2
34182f58:	041a      	lsls	r2, r3, #16
34182f5a:	68fb      	ldr	r3, [r7, #12]
34182f5c:	43d9      	mvns	r1, r3
34182f5e:	887b      	ldrh	r3, [r7, #2]
34182f60:	400b      	ands	r3, r1
34182f62:	431a      	orrs	r2, r3
34182f64:	687b      	ldr	r3, [r7, #4]
34182f66:	619a      	str	r2, [r3, #24]
}
34182f68:	bf00      	nop
34182f6a:	3714      	adds	r7, #20
34182f6c:	46bd      	mov	sp, r7
34182f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182f72:	4770      	bx	lr

34182f74 <HAL_PWREx_ConfigSupply>:
  * @note: The power supply configuration is not reset by wakeup from Standby mode and
  *        application reset, but only reset by VDD POR.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
34182f74:	b580      	push	{r7, lr}
34182f76:	b084      	sub	sp, #16
34182f78:	af00      	add	r7, sp, #0
34182f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR1, PWR_SUPPLY_CONFIG_MASK, SupplySource);
34182f7c:	4b10      	ldr	r3, [pc, #64]	@ (34182fc0 <HAL_PWREx_ConfigSupply+0x4c>)
34182f7e:	681b      	ldr	r3, [r3, #0]
34182f80:	f023 0204 	bic.w	r2, r3, #4
34182f84:	490e      	ldr	r1, [pc, #56]	@ (34182fc0 <HAL_PWREx_ConfigSupply+0x4c>)
34182f86:	687b      	ldr	r3, [r7, #4]
34182f88:	4313      	orrs	r3, r2
34182f8a:	600b      	str	r3, [r1, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
34182f8c:	f7ff fa2c 	bl	341823e8 <HAL_GetTick>
34182f90:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34182f92:	e009      	b.n	34182fa8 <HAL_PWREx_ConfigSupply+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
34182f94:	f7ff fa28 	bl	341823e8 <HAL_GetTick>
34182f98:	4602      	mov	r2, r0
34182f9a:	68fb      	ldr	r3, [r7, #12]
34182f9c:	1ad3      	subs	r3, r2, r3
34182f9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34182fa2:	d901      	bls.n	34182fa8 <HAL_PWREx_ConfigSupply+0x34>
    {
      return HAL_ERROR;
34182fa4:	2301      	movs	r3, #1
34182fa6:	e006      	b.n	34182fb6 <HAL_PWREx_ConfigSupply+0x42>
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34182fa8:	4b05      	ldr	r3, [pc, #20]	@ (34182fc0 <HAL_PWREx_ConfigSupply+0x4c>)
34182faa:	6a1b      	ldr	r3, [r3, #32]
34182fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34182fb0:	2b00      	cmp	r3, #0
34182fb2:	d0ef      	beq.n	34182f94 <HAL_PWREx_ConfigSupply+0x20>
    }
  }

  return HAL_OK;
34182fb4:	2300      	movs	r3, #0
}
34182fb6:	4618      	mov	r0, r3
34182fb8:	3710      	adds	r7, #16
34182fba:	46bd      	mov	sp, r7
34182fbc:	bd80      	pop	{r7, pc}
34182fbe:	bf00      	nop
34182fc0:	56024800 	.word	0x56024800

34182fc4 <HAL_PWREx_ConfigVddIORange>:
  * @note   Setting this configuration while VDDIOx is in 3v3 range
  *         damages the device.
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
34182fc4:	b480      	push	{r7}
34182fc6:	b083      	sub	sp, #12
34182fc8:	af00      	add	r7, sp, #0
34182fca:	6078      	str	r0, [r7, #4]
34182fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));

  switch (VddIOPort)
34182fce:	687b      	ldr	r3, [r7, #4]
34182fd0:	2b04      	cmp	r3, #4
34182fd2:	d83f      	bhi.n	34183054 <HAL_PWREx_ConfigVddIORange+0x90>
34182fd4:	a201      	add	r2, pc, #4	@ (adr r2, 34182fdc <HAL_PWREx_ConfigVddIORange+0x18>)
34182fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34182fda:	bf00      	nop
34182fdc:	34182ff1 	.word	0x34182ff1
34182fe0:	34183005 	.word	0x34183005
34182fe4:	34183019 	.word	0x34183019
34182fe8:	3418302d 	.word	0x3418302d
34182fec:	34183041 	.word	0x34183041
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
34182ff0:	4b1c      	ldr	r3, [pc, #112]	@ (34183064 <HAL_PWREx_ConfigVddIORange+0xa0>)
34182ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34182ff4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34182ff8:	683b      	ldr	r3, [r7, #0]
34182ffa:	061b      	lsls	r3, r3, #24
34182ffc:	4919      	ldr	r1, [pc, #100]	@ (34183064 <HAL_PWREx_ConfigVddIORange+0xa0>)
34182ffe:	4313      	orrs	r3, r2
34183000:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
34183002:	e028      	b.n	34183056 <HAL_PWREx_ConfigVddIORange+0x92>

    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
34183004:	4b17      	ldr	r3, [pc, #92]	@ (34183064 <HAL_PWREx_ConfigVddIORange+0xa0>)
34183006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34183008:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
3418300c:	683b      	ldr	r3, [r7, #0]
3418300e:	065b      	lsls	r3, r3, #25
34183010:	4914      	ldr	r1, [pc, #80]	@ (34183064 <HAL_PWREx_ConfigVddIORange+0xa0>)
34183012:	4313      	orrs	r3, r2
34183014:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
34183016:	e01e      	b.n	34183056 <HAL_PWREx_ConfigVddIORange+0x92>

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34183018:	4b12      	ldr	r3, [pc, #72]	@ (34183064 <HAL_PWREx_ConfigVddIORange+0xa0>)
3418301a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418301c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
34183020:	683b      	ldr	r3, [r7, #0]
34183022:	069b      	lsls	r3, r3, #26
34183024:	490f      	ldr	r1, [pc, #60]	@ (34183064 <HAL_PWREx_ConfigVddIORange+0xa0>)
34183026:	4313      	orrs	r3, r2
34183028:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
3418302a:	e014      	b.n	34183056 <HAL_PWREx_ConfigVddIORange+0x92>

    case PWR_VDDIO4:
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
3418302c:	4b0d      	ldr	r3, [pc, #52]	@ (34183064 <HAL_PWREx_ConfigVddIORange+0xa0>)
3418302e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34183030:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34183034:	683b      	ldr	r3, [r7, #0]
34183036:	061b      	lsls	r3, r3, #24
34183038:	490a      	ldr	r1, [pc, #40]	@ (34183064 <HAL_PWREx_ConfigVddIORange+0xa0>)
3418303a:	4313      	orrs	r3, r2
3418303c:	634b      	str	r3, [r1, #52]	@ 0x34
      break;
3418303e:	e00a      	b.n	34183056 <HAL_PWREx_ConfigVddIORange+0x92>

    case PWR_VDDIO5:
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34183040:	4b08      	ldr	r3, [pc, #32]	@ (34183064 <HAL_PWREx_ConfigVddIORange+0xa0>)
34183042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34183044:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34183048:	683b      	ldr	r3, [r7, #0]
3418304a:	061b      	lsls	r3, r3, #24
3418304c:	4905      	ldr	r1, [pc, #20]	@ (34183064 <HAL_PWREx_ConfigVddIORange+0xa0>)
3418304e:	4313      	orrs	r3, r2
34183050:	638b      	str	r3, [r1, #56]	@ 0x38
      break;
34183052:	e000      	b.n	34183056 <HAL_PWREx_ConfigVddIORange+0x92>

    default:
      break;
34183054:	bf00      	nop
  }
}
34183056:	bf00      	nop
34183058:	370c      	adds	r7, #12
3418305a:	46bd      	mov	sp, r7
3418305c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183060:	4770      	bx	lr
34183062:	bf00      	nop
34183064:	56024800 	.word	0x56024800

34183068 <HAL_PWREx_EnableVddIO2>:
  * @brief  Enable VDDIO2 supply valid.
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
34183068:	b480      	push	{r7}
3418306a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
3418306c:	4b05      	ldr	r3, [pc, #20]	@ (34183084 <HAL_PWREx_EnableVddIO2+0x1c>)
3418306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34183070:	4a04      	ldr	r2, [pc, #16]	@ (34183084 <HAL_PWREx_EnableVddIO2+0x1c>)
34183072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34183076:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34183078:	bf00      	nop
3418307a:	46bd      	mov	sp, r7
3418307c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183080:	4770      	bx	lr
34183082:	bf00      	nop
34183084:	56024800 	.word	0x56024800

34183088 <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
34183088:	b480      	push	{r7}
3418308a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
3418308c:	4b05      	ldr	r3, [pc, #20]	@ (341830a4 <HAL_PWREx_EnableVddIO3+0x1c>)
3418308e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34183090:	4a04      	ldr	r2, [pc, #16]	@ (341830a4 <HAL_PWREx_EnableVddIO3+0x1c>)
34183092:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34183096:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34183098:	bf00      	nop
3418309a:	46bd      	mov	sp, r7
3418309c:	f85d 7b04 	ldr.w	r7, [sp], #4
341830a0:	4770      	bx	lr
341830a2:	bf00      	nop
341830a4:	56024800 	.word	0x56024800

341830a8 <HAL_PWREx_EnableVddIO4>:
  * @brief  Enable VDDIO4 supply valid.
  * @note   Setting this bit is mandatory to use PB[9,8], PC[12:6], and PD[2] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO4(void)
{
341830a8:	b480      	push	{r7}
341830aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
341830ac:	4b05      	ldr	r3, [pc, #20]	@ (341830c4 <HAL_PWREx_EnableVddIO4+0x1c>)
341830ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
341830b0:	4a04      	ldr	r2, [pc, #16]	@ (341830c4 <HAL_PWREx_EnableVddIO4+0x1c>)
341830b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
341830b6:	6353      	str	r3, [r2, #52]	@ 0x34
}
341830b8:	bf00      	nop
341830ba:	46bd      	mov	sp, r7
341830bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341830c0:	4770      	bx	lr
341830c2:	bf00      	nop
341830c4:	56024800 	.word	0x56024800

341830c8 <HAL_PWREx_EnableVddIO5>:
  * @brief  Enable VDDIO5 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO5(void)
{
341830c8:	b480      	push	{r7}
341830ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR2, PWR_SVMCR2_VDDIO5SV);
341830cc:	4b05      	ldr	r3, [pc, #20]	@ (341830e4 <HAL_PWREx_EnableVddIO5+0x1c>)
341830ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
341830d0:	4a04      	ldr	r2, [pc, #16]	@ (341830e4 <HAL_PWREx_EnableVddIO5+0x1c>)
341830d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
341830d6:	6393      	str	r3, [r2, #56]	@ 0x38
}
341830d8:	bf00      	nop
341830da:	46bd      	mov	sp, r7
341830dc:	f85d 7b04 	ldr.w	r7, [sp], #4
341830e0:	4770      	bx	lr
341830e2:	bf00      	nop
341830e4:	56024800 	.word	0x56024800

341830e8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll SR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
341830e8:	b480      	push	{r7}
341830ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
341830ec:	4b06      	ldr	r3, [pc, #24]	@ (34183108 <LL_RCC_HSE_IsReady+0x20>)
341830ee:	685b      	ldr	r3, [r3, #4]
341830f0:	f003 0310 	and.w	r3, r3, #16
341830f4:	2b00      	cmp	r3, #0
341830f6:	d001      	beq.n	341830fc <LL_RCC_HSE_IsReady+0x14>
341830f8:	2301      	movs	r3, #1
341830fa:	e000      	b.n	341830fe <LL_RCC_HSE_IsReady+0x16>
341830fc:	2300      	movs	r3, #0
}
341830fe:	4618      	mov	r0, r3
34183100:	46bd      	mov	sp, r7
34183102:	f85d 7b04 	ldr.w	r7, [sp], #4
34183106:	4770      	bx	lr
34183108:	56028000 	.word	0x56028000

3418310c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CSR          HSIONS        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
3418310c:	b480      	push	{r7}
3418310e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34183110:	4b04      	ldr	r3, [pc, #16]	@ (34183124 <LL_RCC_HSI_Enable+0x18>)
34183112:	2208      	movs	r2, #8
34183114:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34183118:	bf00      	nop
3418311a:	46bd      	mov	sp, r7
3418311c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183120:	4770      	bx	lr
34183122:	bf00      	nop
34183124:	56028000 	.word	0x56028000

34183128 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CCR          HSIONC        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
34183128:	b480      	push	{r7}
3418312a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
3418312c:	4b05      	ldr	r3, [pc, #20]	@ (34183144 <LL_RCC_HSI_Disable+0x1c>)
3418312e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34183132:	461a      	mov	r2, r3
34183134:	2308      	movs	r3, #8
34183136:	6013      	str	r3, [r2, #0]
}
34183138:	bf00      	nop
3418313a:	46bd      	mov	sp, r7
3418313c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183140:	4770      	bx	lr
34183142:	bf00      	nop
34183144:	56028000 	.word	0x56028000

34183148 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
34183148:	b480      	push	{r7}
3418314a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
3418314c:	4b06      	ldr	r3, [pc, #24]	@ (34183168 <LL_RCC_HSI_IsReady+0x20>)
3418314e:	685b      	ldr	r3, [r3, #4]
34183150:	f003 0308 	and.w	r3, r3, #8
34183154:	2b00      	cmp	r3, #0
34183156:	d001      	beq.n	3418315c <LL_RCC_HSI_IsReady+0x14>
34183158:	2301      	movs	r3, #1
3418315a:	e000      	b.n	3418315e <LL_RCC_HSI_IsReady+0x16>
3418315c:	2300      	movs	r3, #0
}
3418315e:	4618      	mov	r0, r3
34183160:	46bd      	mov	sp, r7
34183162:	f85d 7b04 	ldr.w	r7, [sp], #4
34183166:	4770      	bx	lr
34183168:	56028000 	.word	0x56028000

3418316c <LL_RCC_HSI_SetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
3418316c:	b480      	push	{r7}
3418316e:	b083      	sub	sp, #12
34183170:	af00      	add	r7, sp, #0
34183172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34183174:	4b06      	ldr	r3, [pc, #24]	@ (34183190 <LL_RCC_HSI_SetDivider+0x24>)
34183176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34183178:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
3418317c:	4904      	ldr	r1, [pc, #16]	@ (34183190 <LL_RCC_HSI_SetDivider+0x24>)
3418317e:	687b      	ldr	r3, [r7, #4]
34183180:	4313      	orrs	r3, r2
34183182:	648b      	str	r3, [r1, #72]	@ 0x48
}
34183184:	bf00      	nop
34183186:	370c      	adds	r7, #12
34183188:	46bd      	mov	sp, r7
3418318a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418318e:	4770      	bx	lr
34183190:	56028000 	.word	0x56028000

34183194 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_2
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
34183194:	b480      	push	{r7}
34183196:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34183198:	4b04      	ldr	r3, [pc, #16]	@ (341831ac <LL_RCC_HSI_GetDivider+0x18>)
3418319a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418319c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
341831a0:	4618      	mov	r0, r3
341831a2:	46bd      	mov	sp, r7
341831a4:	f85d 7b04 	ldr.w	r7, [sp], #4
341831a8:	4770      	bx	lr
341831aa:	bf00      	nop
341831ac:	56028000 	.word	0x56028000

341831b0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll HSICFGR      HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value This parameter can be a value between 0 and 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
341831b0:	b480      	push	{r7}
341831b2:	b083      	sub	sp, #12
341831b4:	af00      	add	r7, sp, #0
341831b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
341831b8:	4b07      	ldr	r3, [pc, #28]	@ (341831d8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
341831ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341831bc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
341831c0:	687b      	ldr	r3, [r7, #4]
341831c2:	041b      	lsls	r3, r3, #16
341831c4:	4904      	ldr	r1, [pc, #16]	@ (341831d8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
341831c6:	4313      	orrs	r3, r2
341831c8:	648b      	str	r3, [r1, #72]	@ 0x48
}
341831ca:	bf00      	nop
341831cc:	370c      	adds	r7, #12
341831ce:	46bd      	mov	sp, r7
341831d0:	f85d 7b04 	ldr.w	r7, [sp], #4
341831d4:	4770      	bx	lr
341831d6:	bf00      	nop
341831d8:	56028000 	.word	0x56028000

341831dc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CSR          MSIONS        LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
341831dc:	b480      	push	{r7}
341831de:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
341831e0:	4b04      	ldr	r3, [pc, #16]	@ (341831f4 <LL_RCC_MSI_Enable+0x18>)
341831e2:	2204      	movs	r2, #4
341831e4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
341831e8:	bf00      	nop
341831ea:	46bd      	mov	sp, r7
341831ec:	f85d 7b04 	ldr.w	r7, [sp], #4
341831f0:	4770      	bx	lr
341831f2:	bf00      	nop
341831f4:	56028000 	.word	0x56028000

341831f8 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CCR          MSIONC        LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
341831f8:	b480      	push	{r7}
341831fa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
341831fc:	4b05      	ldr	r3, [pc, #20]	@ (34183214 <LL_RCC_MSI_Disable+0x1c>)
341831fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34183202:	461a      	mov	r2, r3
34183204:	2304      	movs	r3, #4
34183206:	6013      	str	r3, [r2, #0]
}
34183208:	bf00      	nop
3418320a:	46bd      	mov	sp, r7
3418320c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183210:	4770      	bx	lr
34183212:	bf00      	nop
34183214:	56028000 	.word	0x56028000

34183218 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI clock is ready
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
34183218:	b480      	push	{r7}
3418321a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
3418321c:	4b06      	ldr	r3, [pc, #24]	@ (34183238 <LL_RCC_MSI_IsReady+0x20>)
3418321e:	685b      	ldr	r3, [r3, #4]
34183220:	f003 0304 	and.w	r3, r3, #4
34183224:	2b00      	cmp	r3, #0
34183226:	d001      	beq.n	3418322c <LL_RCC_MSI_IsReady+0x14>
34183228:	2301      	movs	r3, #1
3418322a:	e000      	b.n	3418322e <LL_RCC_MSI_IsReady+0x16>
3418322c:	2300      	movs	r3, #0
}
3418322e:	4618      	mov	r0, r3
34183230:	46bd      	mov	sp, r7
34183232:	f85d 7b04 	ldr.w	r7, [sp], #4
34183236:	4770      	bx	lr
34183238:	56028000 	.word	0x56028000

3418323c <LL_RCC_MSI_SetFrequency>:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_MSI_SetFrequency(uint32_t Value)
{
3418323c:	b480      	push	{r7}
3418323e:	b083      	sub	sp, #12
34183240:	af00      	add	r7, sp, #0
34183242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34183244:	4b06      	ldr	r3, [pc, #24]	@ (34183260 <LL_RCC_MSI_SetFrequency+0x24>)
34183246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34183248:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3418324c:	4904      	ldr	r1, [pc, #16]	@ (34183260 <LL_RCC_MSI_SetFrequency+0x24>)
3418324e:	687b      	ldr	r3, [r7, #4]
34183250:	4313      	orrs	r3, r2
34183252:	644b      	str	r3, [r1, #68]	@ 0x44
}
34183254:	bf00      	nop
34183256:	370c      	adds	r7, #12
34183258:	46bd      	mov	sp, r7
3418325a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418325e:	4770      	bx	lr
34183260:	56028000 	.word	0x56028000

34183264 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll MSICFGR      MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value can be a value between 0 and 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
34183264:	b480      	push	{r7}
34183266:	b083      	sub	sp, #12
34183268:	af00      	add	r7, sp, #0
3418326a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
3418326c:	4b07      	ldr	r3, [pc, #28]	@ (3418328c <LL_RCC_MSI_SetCalibTrimming+0x28>)
3418326e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34183270:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
34183274:	687b      	ldr	r3, [r7, #4]
34183276:	041b      	lsls	r3, r3, #16
34183278:	4904      	ldr	r1, [pc, #16]	@ (3418328c <LL_RCC_MSI_SetCalibTrimming+0x28>)
3418327a:	4313      	orrs	r3, r2
3418327c:	644b      	str	r3, [r1, #68]	@ 0x44
}
3418327e:	bf00      	nop
34183280:	370c      	adds	r7, #12
34183282:	46bd      	mov	sp, r7
34183284:	f85d 7b04 	ldr.w	r7, [sp], #4
34183288:	4770      	bx	lr
3418328a:	bf00      	nop
3418328c:	56028000 	.word	0x56028000

34183290 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll SR           LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
34183290:	b480      	push	{r7}
34183292:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34183294:	4b06      	ldr	r3, [pc, #24]	@ (341832b0 <LL_RCC_LSE_IsReady+0x20>)
34183296:	685b      	ldr	r3, [r3, #4]
34183298:	f003 0302 	and.w	r3, r3, #2
3418329c:	2b00      	cmp	r3, #0
3418329e:	d001      	beq.n	341832a4 <LL_RCC_LSE_IsReady+0x14>
341832a0:	2301      	movs	r3, #1
341832a2:	e000      	b.n	341832a6 <LL_RCC_LSE_IsReady+0x16>
341832a4:	2300      	movs	r3, #0
}
341832a6:	4618      	mov	r0, r3
341832a8:	46bd      	mov	sp, r7
341832aa:	f85d 7b04 	ldr.w	r7, [sp], #4
341832ae:	4770      	bx	lr
341832b0:	56028000 	.word	0x56028000

341832b4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSIONS        LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
341832b4:	b480      	push	{r7}
341832b6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
341832b8:	4b04      	ldr	r3, [pc, #16]	@ (341832cc <LL_RCC_LSI_Enable+0x18>)
341832ba:	2201      	movs	r2, #1
341832bc:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
341832c0:	bf00      	nop
341832c2:	46bd      	mov	sp, r7
341832c4:	f85d 7b04 	ldr.w	r7, [sp], #4
341832c8:	4770      	bx	lr
341832ca:	bf00      	nop
341832cc:	56028000 	.word	0x56028000

341832d0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CCR          LSIONC        LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
341832d0:	b480      	push	{r7}
341832d2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
341832d4:	4b05      	ldr	r3, [pc, #20]	@ (341832ec <LL_RCC_LSI_Disable+0x1c>)
341832d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341832da:	461a      	mov	r2, r3
341832dc:	2301      	movs	r3, #1
341832de:	6013      	str	r3, [r2, #0]
}
341832e0:	bf00      	nop
341832e2:	46bd      	mov	sp, r7
341832e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341832e8:	4770      	bx	lr
341832ea:	bf00      	nop
341832ec:	56028000 	.word	0x56028000

341832f0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll SR           LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
341832f0:	b480      	push	{r7}
341832f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
341832f4:	4b04      	ldr	r3, [pc, #16]	@ (34183308 <LL_RCC_LSI_IsReady+0x18>)
341832f6:	685b      	ldr	r3, [r3, #4]
341832f8:	f003 0301 	and.w	r3, r3, #1
}
341832fc:	4618      	mov	r0, r3
341832fe:	46bd      	mov	sp, r7
34183300:	f85d 7b04 	ldr.w	r7, [sp], #4
34183304:	4770      	bx	lr
34183306:	bf00      	nop
34183308:	56028000 	.word	0x56028000

3418330c <LL_RCC_GetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_IC1
  */
__STATIC_INLINE uint32_t LL_RCC_GetCpuClkSource(void)
{
3418330c:	b480      	push	{r7}
3418330e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34183310:	4b04      	ldr	r3, [pc, #16]	@ (34183324 <LL_RCC_GetCpuClkSource+0x18>)
34183312:	6a1b      	ldr	r3, [r3, #32]
34183314:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34183318:	4618      	mov	r0, r3
3418331a:	46bd      	mov	sp, r7
3418331c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183320:	4770      	bx	lr
34183322:	bf00      	nop
34183324:	56028000 	.word	0x56028000

34183328 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
34183328:	b480      	push	{r7}
3418332a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
3418332c:	4b04      	ldr	r3, [pc, #16]	@ (34183340 <LL_RCC_GetSysClkSource+0x18>)
3418332e:	6a1b      	ldr	r3, [r3, #32]
34183330:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34183334:	4618      	mov	r0, r3
34183336:	46bd      	mov	sp, r7
34183338:	f85d 7b04 	ldr.w	r7, [sp], #4
3418333c:	4770      	bx	lr
3418333e:	bf00      	nop
34183340:	56028000 	.word	0x56028000

34183344 <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
34183344:	b480      	push	{r7}
34183346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34183348:	4b04      	ldr	r3, [pc, #16]	@ (3418335c <LL_RCC_PLL1_GetSource+0x18>)
3418334a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418334e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34183352:	4618      	mov	r0, r3
34183354:	46bd      	mov	sp, r7
34183356:	f85d 7b04 	ldr.w	r7, [sp], #4
3418335a:	4770      	bx	lr
3418335c:	56028000 	.word	0x56028000

34183360 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
34183360:	b480      	push	{r7}
34183362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34183364:	4b07      	ldr	r3, [pc, #28]	@ (34183384 <LL_RCC_PLL1_IsReady+0x24>)
34183366:	685b      	ldr	r3, [r3, #4]
34183368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418336c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34183370:	d101      	bne.n	34183376 <LL_RCC_PLL1_IsReady+0x16>
34183372:	2301      	movs	r3, #1
34183374:	e000      	b.n	34183378 <LL_RCC_PLL1_IsReady+0x18>
34183376:	2300      	movs	r3, #0
}
34183378:	4618      	mov	r0, r3
3418337a:	46bd      	mov	sp, r7
3418337c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183380:	4770      	bx	lr
34183382:	bf00      	nop
34183384:	56028000 	.word	0x56028000

34183388 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
34183388:	b480      	push	{r7}
3418338a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3418338c:	4b07      	ldr	r3, [pc, #28]	@ (341833ac <LL_RCC_PLL1_IsEnabledBypass+0x24>)
3418338e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34183392:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34183396:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418339a:	d101      	bne.n	341833a0 <LL_RCC_PLL1_IsEnabledBypass+0x18>
3418339c:	2301      	movs	r3, #1
3418339e:	e000      	b.n	341833a2 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
341833a0:	2300      	movs	r3, #0
}
341833a2:	4618      	mov	r0, r3
341833a4:	46bd      	mov	sp, r7
341833a6:	f85d 7b04 	ldr.w	r7, [sp], #4
341833aa:	4770      	bx	lr
341833ac:	56028000 	.word	0x56028000

341833b0 <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
341833b0:	b480      	push	{r7}
341833b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
341833b4:	4b04      	ldr	r3, [pc, #16]	@ (341833c8 <LL_RCC_PLL2_GetSource+0x18>)
341833b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341833ba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341833be:	4618      	mov	r0, r3
341833c0:	46bd      	mov	sp, r7
341833c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341833c6:	4770      	bx	lr
341833c8:	56028000 	.word	0x56028000

341833cc <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
341833cc:	b480      	push	{r7}
341833ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
341833d0:	4b07      	ldr	r3, [pc, #28]	@ (341833f0 <LL_RCC_PLL2_IsReady+0x24>)
341833d2:	685b      	ldr	r3, [r3, #4]
341833d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341833d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341833dc:	d101      	bne.n	341833e2 <LL_RCC_PLL2_IsReady+0x16>
341833de:	2301      	movs	r3, #1
341833e0:	e000      	b.n	341833e4 <LL_RCC_PLL2_IsReady+0x18>
341833e2:	2300      	movs	r3, #0
}
341833e4:	4618      	mov	r0, r3
341833e6:	46bd      	mov	sp, r7
341833e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341833ec:	4770      	bx	lr
341833ee:	bf00      	nop
341833f0:	56028000 	.word	0x56028000

341833f4 <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
341833f4:	b480      	push	{r7}
341833f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
341833f8:	4b07      	ldr	r3, [pc, #28]	@ (34183418 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
341833fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341833fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34183402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34183406:	d101      	bne.n	3418340c <LL_RCC_PLL2_IsEnabledBypass+0x18>
34183408:	2301      	movs	r3, #1
3418340a:	e000      	b.n	3418340e <LL_RCC_PLL2_IsEnabledBypass+0x1a>
3418340c:	2300      	movs	r3, #0
}
3418340e:	4618      	mov	r0, r3
34183410:	46bd      	mov	sp, r7
34183412:	f85d 7b04 	ldr.w	r7, [sp], #4
34183416:	4770      	bx	lr
34183418:	56028000 	.word	0x56028000

3418341c <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
3418341c:	b480      	push	{r7}
3418341e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34183420:	4b04      	ldr	r3, [pc, #16]	@ (34183434 <LL_RCC_PLL3_GetSource+0x18>)
34183422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34183426:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418342a:	4618      	mov	r0, r3
3418342c:	46bd      	mov	sp, r7
3418342e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183432:	4770      	bx	lr
34183434:	56028000 	.word	0x56028000

34183438 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
34183438:	b480      	push	{r7}
3418343a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418343c:	4b07      	ldr	r3, [pc, #28]	@ (3418345c <LL_RCC_PLL3_IsReady+0x24>)
3418343e:	685b      	ldr	r3, [r3, #4]
34183440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34183444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34183448:	d101      	bne.n	3418344e <LL_RCC_PLL3_IsReady+0x16>
3418344a:	2301      	movs	r3, #1
3418344c:	e000      	b.n	34183450 <LL_RCC_PLL3_IsReady+0x18>
3418344e:	2300      	movs	r3, #0
}
34183450:	4618      	mov	r0, r3
34183452:	46bd      	mov	sp, r7
34183454:	f85d 7b04 	ldr.w	r7, [sp], #4
34183458:	4770      	bx	lr
3418345a:	bf00      	nop
3418345c:	56028000 	.word	0x56028000

34183460 <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
34183460:	b480      	push	{r7}
34183462:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34183464:	4b07      	ldr	r3, [pc, #28]	@ (34183484 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34183466:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418346a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418346e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34183472:	d101      	bne.n	34183478 <LL_RCC_PLL3_IsEnabledBypass+0x18>
34183474:	2301      	movs	r3, #1
34183476:	e000      	b.n	3418347a <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34183478:	2300      	movs	r3, #0
}
3418347a:	4618      	mov	r0, r3
3418347c:	46bd      	mov	sp, r7
3418347e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183482:	4770      	bx	lr
34183484:	56028000 	.word	0x56028000

34183488 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
34183488:	b480      	push	{r7}
3418348a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3418348c:	4b04      	ldr	r3, [pc, #16]	@ (341834a0 <LL_RCC_PLL4_GetSource+0x18>)
3418348e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34183492:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34183496:	4618      	mov	r0, r3
34183498:	46bd      	mov	sp, r7
3418349a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418349e:	4770      	bx	lr
341834a0:	56028000 	.word	0x56028000

341834a4 <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
341834a4:	b480      	push	{r7}
341834a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
341834a8:	4b07      	ldr	r3, [pc, #28]	@ (341834c8 <LL_RCC_PLL4_IsReady+0x24>)
341834aa:	685b      	ldr	r3, [r3, #4]
341834ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341834b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
341834b4:	d101      	bne.n	341834ba <LL_RCC_PLL4_IsReady+0x16>
341834b6:	2301      	movs	r3, #1
341834b8:	e000      	b.n	341834bc <LL_RCC_PLL4_IsReady+0x18>
341834ba:	2300      	movs	r3, #0
}
341834bc:	4618      	mov	r0, r3
341834be:	46bd      	mov	sp, r7
341834c0:	f85d 7b04 	ldr.w	r7, [sp], #4
341834c4:	4770      	bx	lr
341834c6:	bf00      	nop
341834c8:	56028000 	.word	0x56028000

341834cc <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
341834cc:	b480      	push	{r7}
341834ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
341834d0:	4b07      	ldr	r3, [pc, #28]	@ (341834f0 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
341834d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341834d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341834da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341834de:	d101      	bne.n	341834e4 <LL_RCC_PLL4_IsEnabledBypass+0x18>
341834e0:	2301      	movs	r3, #1
341834e2:	e000      	b.n	341834e6 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
341834e4:	2300      	movs	r3, #0
}
341834e6:	4618      	mov	r0, r3
341834e8:	46bd      	mov	sp, r7
341834ea:	f85d 7b04 	ldr.w	r7, [sp], #4
341834ee:	4770      	bx	lr
341834f0:	56028000 	.word	0x56028000

341834f4 <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
341834f4:	b480      	push	{r7}
341834f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
341834f8:	4b04      	ldr	r3, [pc, #16]	@ (3418350c <LL_RCC_IC1_Enable+0x18>)
341834fa:	2201      	movs	r2, #1
341834fc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34183500:	bf00      	nop
34183502:	46bd      	mov	sp, r7
34183504:	f85d 7b04 	ldr.w	r7, [sp], #4
34183508:	4770      	bx	lr
3418350a:	bf00      	nop
3418350c:	56028000 	.word	0x56028000

34183510 <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
34183510:	b480      	push	{r7}
34183512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34183514:	4b04      	ldr	r3, [pc, #16]	@ (34183528 <LL_RCC_IC1_GetSource+0x18>)
34183516:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418351a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418351e:	4618      	mov	r0, r3
34183520:	46bd      	mov	sp, r7
34183522:	f85d 7b04 	ldr.w	r7, [sp], #4
34183526:	4770      	bx	lr
34183528:	56028000 	.word	0x56028000

3418352c <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
3418352c:	b480      	push	{r7}
3418352e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34183530:	4b05      	ldr	r3, [pc, #20]	@ (34183548 <LL_RCC_IC1_GetDivider+0x1c>)
34183532:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34183536:	0c1b      	lsrs	r3, r3, #16
34183538:	b2db      	uxtb	r3, r3
3418353a:	3301      	adds	r3, #1
}
3418353c:	4618      	mov	r0, r3
3418353e:	46bd      	mov	sp, r7
34183540:	f85d 7b04 	ldr.w	r7, [sp], #4
34183544:	4770      	bx	lr
34183546:	bf00      	nop
34183548:	56028000 	.word	0x56028000

3418354c <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
3418354c:	b480      	push	{r7}
3418354e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34183550:	4b04      	ldr	r3, [pc, #16]	@ (34183564 <LL_RCC_IC2_GetSource+0x18>)
34183552:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34183556:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418355a:	4618      	mov	r0, r3
3418355c:	46bd      	mov	sp, r7
3418355e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183562:	4770      	bx	lr
34183564:	56028000 	.word	0x56028000

34183568 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
34183568:	b480      	push	{r7}
3418356a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
3418356c:	4b05      	ldr	r3, [pc, #20]	@ (34183584 <LL_RCC_IC2_GetDivider+0x1c>)
3418356e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34183572:	0c1b      	lsrs	r3, r3, #16
34183574:	b2db      	uxtb	r3, r3
34183576:	3301      	adds	r3, #1
}
34183578:	4618      	mov	r0, r3
3418357a:	46bd      	mov	sp, r7
3418357c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183580:	4770      	bx	lr
34183582:	bf00      	nop
34183584:	56028000 	.word	0x56028000

34183588 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
34183588:	b480      	push	{r7}
3418358a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3418358c:	4b04      	ldr	r3, [pc, #16]	@ (341835a0 <LL_RCC_IC6_GetSource+0x18>)
3418358e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34183592:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34183596:	4618      	mov	r0, r3
34183598:	46bd      	mov	sp, r7
3418359a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418359e:	4770      	bx	lr
341835a0:	56028000 	.word	0x56028000

341835a4 <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
341835a4:	b480      	push	{r7}
341835a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
341835a8:	4b04      	ldr	r3, [pc, #16]	@ (341835bc <LL_RCC_IC11_GetSource+0x18>)
341835aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
341835ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341835b2:	4618      	mov	r0, r3
341835b4:	46bd      	mov	sp, r7
341835b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341835ba:	4770      	bx	lr
341835bc:	56028000 	.word	0x56028000

341835c0 <HAL_RCC_OscConfig>:
  * @note   This function activates HSE but does not wait for the startup time defined in the datasheet.
  *         This must be ensured by the application when the HSE is selected as PLL source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
341835c0:	b580      	push	{r7, lr}
341835c2:	b0a2      	sub	sp, #136	@ 0x88
341835c4:	af00      	add	r7, sp, #0
341835c6:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
341835c8:	687b      	ldr	r3, [r7, #4]
341835ca:	2b00      	cmp	r3, #0
341835cc:	d101      	bne.n	341835d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
341835ce:	2301      	movs	r3, #1
341835d0:	e3d1      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  cpuclksrc = LL_RCC_GetCpuClkSource();
341835d2:	f7ff fe9b 	bl	3418330c <LL_RCC_GetCpuClkSource>
341835d6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
341835da:	f7ff fea5 	bl	34183328 <LL_RCC_GetSysClkSource>
341835de:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
341835e2:	f7ff feaf 	bl	34183344 <LL_RCC_PLL1_GetSource>
341835e6:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
341835e8:	f7ff fee2 	bl	341833b0 <LL_RCC_PLL2_GetSource>
341835ec:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
341835ee:	f7ff ff15 	bl	3418341c <LL_RCC_PLL3_GetSource>
341835f2:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
341835f4:	f7ff ff48 	bl	34183488 <LL_RCC_PLL4_GetSource>
341835f8:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
341835fa:	4b91      	ldr	r3, [pc, #580]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
341835fc:	685b      	ldr	r3, [r3, #4]
341835fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34183600:	687b      	ldr	r3, [r7, #4]
34183602:	681b      	ldr	r3, [r3, #0]
34183604:	f003 0301 	and.w	r3, r3, #1
34183608:	2b00      	cmp	r3, #0
3418360a:	f000 80a8 	beq.w	3418375e <HAL_RCC_OscConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3418360e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34183612:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34183616:	d028      	beq.n	3418366a <HAL_RCC_OscConfig+0xaa>
34183618:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418361c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183620:	d023      	beq.n	3418366a <HAL_RCC_OscConfig+0xaa>
34183622:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34183624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183628:	d104      	bne.n	34183634 <HAL_RCC_OscConfig+0x74>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418362a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34183630:	2b00      	cmp	r3, #0
34183632:	d11a      	bne.n	3418366a <HAL_RCC_OscConfig+0xaa>
34183634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34183636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418363a:	d104      	bne.n	34183646 <HAL_RCC_OscConfig+0x86>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3418363c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418363e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34183642:	2b00      	cmp	r3, #0
34183644:	d111      	bne.n	3418366a <HAL_RCC_OscConfig+0xaa>
34183646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34183648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418364c:	d104      	bne.n	34183658 <HAL_RCC_OscConfig+0x98>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418364e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34183654:	2b00      	cmp	r3, #0
34183656:	d108      	bne.n	3418366a <HAL_RCC_OscConfig+0xaa>
34183658:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
3418365a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418365e:	d10a      	bne.n	34183676 <HAL_RCC_OscConfig+0xb6>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34183660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34183666:	2b00      	cmp	r3, #0
34183668:	d005      	beq.n	34183676 <HAL_RCC_OscConfig+0xb6>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
3418366a:	687b      	ldr	r3, [r7, #4]
3418366c:	685b      	ldr	r3, [r3, #4]
3418366e:	2b00      	cmp	r3, #0
34183670:	d175      	bne.n	3418375e <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
34183672:	2301      	movs	r3, #1
34183674:	e37f      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34183676:	687b      	ldr	r3, [r7, #4]
34183678:	685b      	ldr	r3, [r3, #4]
3418367a:	2b10      	cmp	r3, #16
3418367c:	d104      	bne.n	34183688 <HAL_RCC_OscConfig+0xc8>
3418367e:	4b70      	ldr	r3, [pc, #448]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
34183680:	2210      	movs	r2, #16
34183682:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34183686:	e043      	b.n	34183710 <HAL_RCC_OscConfig+0x150>
34183688:	687b      	ldr	r3, [r7, #4]
3418368a:	685b      	ldr	r3, [r3, #4]
3418368c:	2b00      	cmp	r3, #0
3418368e:	d10c      	bne.n	341836aa <HAL_RCC_OscConfig+0xea>
34183690:	4b6b      	ldr	r3, [pc, #428]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
34183692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34183696:	461a      	mov	r2, r3
34183698:	2310      	movs	r3, #16
3418369a:	6013      	str	r3, [r2, #0]
3418369c:	4b68      	ldr	r3, [pc, #416]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
3418369e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341836a0:	4a67      	ldr	r2, [pc, #412]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
341836a2:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
341836a6:	6553      	str	r3, [r2, #84]	@ 0x54
341836a8:	e032      	b.n	34183710 <HAL_RCC_OscConfig+0x150>
341836aa:	687b      	ldr	r3, [r7, #4]
341836ac:	685b      	ldr	r3, [r3, #4]
341836ae:	f248 0210 	movw	r2, #32784	@ 0x8010
341836b2:	4293      	cmp	r3, r2
341836b4:	d110      	bne.n	341836d8 <HAL_RCC_OscConfig+0x118>
341836b6:	4b62      	ldr	r3, [pc, #392]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
341836b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341836ba:	4a61      	ldr	r2, [pc, #388]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
341836bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341836c0:	6553      	str	r3, [r2, #84]	@ 0x54
341836c2:	4b5f      	ldr	r3, [pc, #380]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
341836c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341836c6:	4a5e      	ldr	r2, [pc, #376]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
341836c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341836cc:	6553      	str	r3, [r2, #84]	@ 0x54
341836ce:	4b5c      	ldr	r3, [pc, #368]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
341836d0:	2210      	movs	r2, #16
341836d2:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341836d6:	e01b      	b.n	34183710 <HAL_RCC_OscConfig+0x150>
341836d8:	687b      	ldr	r3, [r7, #4]
341836da:	685b      	ldr	r3, [r3, #4]
341836dc:	4a59      	ldr	r2, [pc, #356]	@ (34183844 <HAL_RCC_OscConfig+0x284>)
341836de:	4293      	cmp	r3, r2
341836e0:	d10a      	bne.n	341836f8 <HAL_RCC_OscConfig+0x138>
341836e2:	4b57      	ldr	r3, [pc, #348]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
341836e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341836e6:	4a56      	ldr	r2, [pc, #344]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
341836e8:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
341836ec:	6553      	str	r3, [r2, #84]	@ 0x54
341836ee:	4b54      	ldr	r3, [pc, #336]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
341836f0:	2210      	movs	r2, #16
341836f2:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341836f6:	e00b      	b.n	34183710 <HAL_RCC_OscConfig+0x150>
341836f8:	4b51      	ldr	r3, [pc, #324]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
341836fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341836fe:	461a      	mov	r2, r3
34183700:	2310      	movs	r3, #16
34183702:	6013      	str	r3, [r2, #0]
34183704:	4b4e      	ldr	r3, [pc, #312]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
34183706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34183708:	4a4d      	ldr	r2, [pc, #308]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
3418370a:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
3418370e:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34183710:	f7fe fe6a 	bl	341823e8 <HAL_GetTick>
34183714:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34183716:	687b      	ldr	r3, [r7, #4]
34183718:	685b      	ldr	r3, [r3, #4]
3418371a:	2b00      	cmp	r3, #0
3418371c:	d019      	beq.n	34183752 <HAL_RCC_OscConfig+0x192>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3418371e:	e008      	b.n	34183732 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34183720:	f7fe fe62 	bl	341823e8 <HAL_GetTick>
34183724:	4602      	mov	r2, r0
34183726:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34183728:	1ad3      	subs	r3, r2, r3
3418372a:	2b64      	cmp	r3, #100	@ 0x64
3418372c:	d901      	bls.n	34183732 <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
3418372e:	2303      	movs	r3, #3
34183730:	e321      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34183732:	4b43      	ldr	r3, [pc, #268]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
34183734:	685b      	ldr	r3, [r3, #4]
34183736:	f003 0310 	and.w	r3, r3, #16
3418373a:	2b00      	cmp	r3, #0
3418373c:	d0f0      	beq.n	34183720 <HAL_RCC_OscConfig+0x160>
3418373e:	e00e      	b.n	3418375e <HAL_RCC_OscConfig+0x19e>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34183740:	f7fe fe52 	bl	341823e8 <HAL_GetTick>
34183744:	4602      	mov	r2, r0
34183746:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34183748:	1ad3      	subs	r3, r2, r3
3418374a:	2b64      	cmp	r3, #100	@ 0x64
3418374c:	d901      	bls.n	34183752 <HAL_RCC_OscConfig+0x192>
          {
            return HAL_TIMEOUT;
3418374e:	2303      	movs	r3, #3
34183750:	e311      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
34183752:	4b3b      	ldr	r3, [pc, #236]	@ (34183840 <HAL_RCC_OscConfig+0x280>)
34183754:	685b      	ldr	r3, [r3, #4]
34183756:	f003 0310 	and.w	r3, r3, #16
3418375a:	2b00      	cmp	r3, #0
3418375c:	d1f0      	bne.n	34183740 <HAL_RCC_OscConfig+0x180>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
3418375e:	687b      	ldr	r3, [r7, #4]
34183760:	681b      	ldr	r3, [r3, #0]
34183762:	f003 0302 	and.w	r3, r3, #2
34183766:	2b00      	cmp	r3, #0
34183768:	d073      	beq.n	34183852 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
3418376a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418376e:	2b00      	cmp	r3, #0
34183770:	d023      	beq.n	341837ba <HAL_RCC_OscConfig+0x1fa>
34183772:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34183776:	2b00      	cmp	r3, #0
34183778:	d01f      	beq.n	341837ba <HAL_RCC_OscConfig+0x1fa>
3418377a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3418377c:	2b00      	cmp	r3, #0
3418377e:	d104      	bne.n	3418378a <HAL_RCC_OscConfig+0x1ca>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34183780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34183786:	2b00      	cmp	r3, #0
34183788:	d117      	bne.n	341837ba <HAL_RCC_OscConfig+0x1fa>
3418378a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3418378c:	2b00      	cmp	r3, #0
3418378e:	d104      	bne.n	3418379a <HAL_RCC_OscConfig+0x1da>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34183790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183792:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34183796:	2b00      	cmp	r3, #0
34183798:	d10f      	bne.n	341837ba <HAL_RCC_OscConfig+0x1fa>
3418379a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
3418379c:	2b00      	cmp	r3, #0
3418379e:	d104      	bne.n	341837aa <HAL_RCC_OscConfig+0x1ea>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
341837a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341837a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341837a6:	2b00      	cmp	r3, #0
341837a8:	d107      	bne.n	341837ba <HAL_RCC_OscConfig+0x1fa>
341837aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
341837ac:	2b00      	cmp	r3, #0
341837ae:	d115      	bne.n	341837dc <HAL_RCC_OscConfig+0x21c>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
341837b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341837b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341837b6:	2b00      	cmp	r3, #0
341837b8:	d010      	beq.n	341837dc <HAL_RCC_OscConfig+0x21c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
341837ba:	687b      	ldr	r3, [r7, #4]
341837bc:	68db      	ldr	r3, [r3, #12]
341837be:	2b00      	cmp	r3, #0
341837c0:	d101      	bne.n	341837c6 <HAL_RCC_OscConfig+0x206>
      {
        return HAL_ERROR;
341837c2:	2301      	movs	r3, #1
341837c4:	e2d7      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
341837c6:	687b      	ldr	r3, [r7, #4]
341837c8:	691b      	ldr	r3, [r3, #16]
341837ca:	4618      	mov	r0, r3
341837cc:	f7ff fcce 	bl	3418316c <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
341837d0:	687b      	ldr	r3, [r7, #4]
341837d2:	695b      	ldr	r3, [r3, #20]
341837d4:	4618      	mov	r0, r3
341837d6:	f7ff fceb 	bl	341831b0 <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
341837da:	e03a      	b.n	34183852 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
341837dc:	687b      	ldr	r3, [r7, #4]
341837de:	68db      	ldr	r3, [r3, #12]
341837e0:	2b00      	cmp	r3, #0
341837e2:	d01e      	beq.n	34183822 <HAL_RCC_OscConfig+0x262>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
341837e4:	f7ff fc92 	bl	3418310c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
341837e8:	f7fe fdfe 	bl	341823e8 <HAL_GetTick>
341837ec:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
341837ee:	e008      	b.n	34183802 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
341837f0:	f7fe fdfa 	bl	341823e8 <HAL_GetTick>
341837f4:	4602      	mov	r2, r0
341837f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341837f8:	1ad3      	subs	r3, r2, r3
341837fa:	2b01      	cmp	r3, #1
341837fc:	d901      	bls.n	34183802 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
341837fe:	2303      	movs	r3, #3
34183800:	e2b9      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_HSI_IsReady() == 0U)
34183802:	f7ff fca1 	bl	34183148 <LL_RCC_HSI_IsReady>
34183806:	4603      	mov	r3, r0
34183808:	2b00      	cmp	r3, #0
3418380a:	d0f1      	beq.n	341837f0 <HAL_RCC_OscConfig+0x230>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
3418380c:	687b      	ldr	r3, [r7, #4]
3418380e:	691b      	ldr	r3, [r3, #16]
34183810:	4618      	mov	r0, r3
34183812:	f7ff fcab 	bl	3418316c <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34183816:	687b      	ldr	r3, [r7, #4]
34183818:	695b      	ldr	r3, [r3, #20]
3418381a:	4618      	mov	r0, r3
3418381c:	f7ff fcc8 	bl	341831b0 <LL_RCC_HSI_SetCalibTrimming>
34183820:	e017      	b.n	34183852 <HAL_RCC_OscConfig+0x292>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
34183822:	f7ff fc81 	bl	34183128 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34183826:	f7fe fddf 	bl	341823e8 <HAL_GetTick>
3418382a:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
3418382c:	e00c      	b.n	34183848 <HAL_RCC_OscConfig+0x288>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3418382e:	f7fe fddb 	bl	341823e8 <HAL_GetTick>
34183832:	4602      	mov	r2, r0
34183834:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34183836:	1ad3      	subs	r3, r2, r3
34183838:	2b01      	cmp	r3, #1
3418383a:	d905      	bls.n	34183848 <HAL_RCC_OscConfig+0x288>
          {
            return HAL_TIMEOUT;
3418383c:	2303      	movs	r3, #3
3418383e:	e29a      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
34183840:	56028000 	.word	0x56028000
34183844:	00018010 	.word	0x00018010
        while (LL_RCC_HSI_IsReady() != 0U)
34183848:	f7ff fc7e 	bl	34183148 <LL_RCC_HSI_IsReady>
3418384c:	4603      	mov	r3, r0
3418384e:	2b00      	cmp	r3, #0
34183850:	d1ed      	bne.n	3418382e <HAL_RCC_OscConfig+0x26e>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34183852:	687b      	ldr	r3, [r7, #4]
34183854:	681b      	ldr	r3, [r3, #0]
34183856:	f003 0310 	and.w	r3, r3, #16
3418385a:	2b00      	cmp	r3, #0
3418385c:	d070      	beq.n	34183940 <HAL_RCC_OscConfig+0x380>
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3418385e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34183862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34183866:	d028      	beq.n	341838ba <HAL_RCC_OscConfig+0x2fa>
34183868:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418386c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183870:	d023      	beq.n	341838ba <HAL_RCC_OscConfig+0x2fa>
34183872:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34183874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183878:	d104      	bne.n	34183884 <HAL_RCC_OscConfig+0x2c4>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3418387a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34183880:	2b00      	cmp	r3, #0
34183882:	d11a      	bne.n	341838ba <HAL_RCC_OscConfig+0x2fa>
34183884:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34183886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418388a:	d104      	bne.n	34183896 <HAL_RCC_OscConfig+0x2d6>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3418388c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418388e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34183892:	2b00      	cmp	r3, #0
34183894:	d111      	bne.n	341838ba <HAL_RCC_OscConfig+0x2fa>
34183896:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34183898:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418389c:	d104      	bne.n	341838a8 <HAL_RCC_OscConfig+0x2e8>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418389e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341838a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341838a4:	2b00      	cmp	r3, #0
341838a6:	d108      	bne.n	341838ba <HAL_RCC_OscConfig+0x2fa>
341838a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
341838aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341838ae:	d110      	bne.n	341838d2 <HAL_RCC_OscConfig+0x312>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
341838b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341838b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341838b6:	2b00      	cmp	r3, #0
341838b8:	d00b      	beq.n	341838d2 <HAL_RCC_OscConfig+0x312>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
341838ba:	687b      	ldr	r3, [r7, #4]
341838bc:	69db      	ldr	r3, [r3, #28]
341838be:	2b00      	cmp	r3, #0
341838c0:	d101      	bne.n	341838c6 <HAL_RCC_OscConfig+0x306>
      {
        return HAL_ERROR;
341838c2:	2301      	movs	r3, #1
341838c4:	e257      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
341838c6:	687b      	ldr	r3, [r7, #4]
341838c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341838ca:	4618      	mov	r0, r3
341838cc:	f7ff fcca 	bl	34183264 <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
341838d0:	e036      	b.n	34183940 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
341838d2:	687b      	ldr	r3, [r7, #4]
341838d4:	69db      	ldr	r3, [r3, #28]
341838d6:	2b00      	cmp	r3, #0
341838d8:	d01e      	beq.n	34183918 <HAL_RCC_OscConfig+0x358>
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
341838da:	687b      	ldr	r3, [r7, #4]
341838dc:	6a1b      	ldr	r3, [r3, #32]
341838de:	4618      	mov	r0, r3
341838e0:	f7ff fcac 	bl	3418323c <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
341838e4:	f7ff fc7a 	bl	341831dc <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
341838e8:	f7fe fd7e 	bl	341823e8 <HAL_GetTick>
341838ec:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
341838ee:	e008      	b.n	34183902 <HAL_RCC_OscConfig+0x342>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
341838f0:	f7fe fd7a 	bl	341823e8 <HAL_GetTick>
341838f4:	4602      	mov	r2, r0
341838f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341838f8:	1ad3      	subs	r3, r2, r3
341838fa:	2b01      	cmp	r3, #1
341838fc:	d901      	bls.n	34183902 <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
341838fe:	2303      	movs	r3, #3
34183900:	e239      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() == 0U)
34183902:	f7ff fc89 	bl	34183218 <LL_RCC_MSI_IsReady>
34183906:	4603      	mov	r3, r0
34183908:	2b00      	cmp	r3, #0
3418390a:	d0f1      	beq.n	341838f0 <HAL_RCC_OscConfig+0x330>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
3418390c:	687b      	ldr	r3, [r7, #4]
3418390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183910:	4618      	mov	r0, r3
34183912:	f7ff fca7 	bl	34183264 <LL_RCC_MSI_SetCalibTrimming>
34183916:	e013      	b.n	34183940 <HAL_RCC_OscConfig+0x380>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
34183918:	f7ff fc6e 	bl	341831f8 <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3418391c:	f7fe fd64 	bl	341823e8 <HAL_GetTick>
34183920:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
34183922:	e008      	b.n	34183936 <HAL_RCC_OscConfig+0x376>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34183924:	f7fe fd60 	bl	341823e8 <HAL_GetTick>
34183928:	4602      	mov	r2, r0
3418392a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418392c:	1ad3      	subs	r3, r2, r3
3418392e:	2b01      	cmp	r3, #1
34183930:	d901      	bls.n	34183936 <HAL_RCC_OscConfig+0x376>
          {
            return HAL_TIMEOUT;
34183932:	2303      	movs	r3, #3
34183934:	e21f      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() != 0U)
34183936:	f7ff fc6f 	bl	34183218 <LL_RCC_MSI_IsReady>
3418393a:	4603      	mov	r3, r0
3418393c:	2b00      	cmp	r3, #0
3418393e:	d1f1      	bne.n	34183924 <HAL_RCC_OscConfig+0x364>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
34183940:	687b      	ldr	r3, [r7, #4]
34183942:	681b      	ldr	r3, [r3, #0]
34183944:	f003 0308 	and.w	r3, r3, #8
34183948:	2b00      	cmp	r3, #0
3418394a:	d02c      	beq.n	341839a6 <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
3418394c:	687b      	ldr	r3, [r7, #4]
3418394e:	699b      	ldr	r3, [r3, #24]
34183950:	2b00      	cmp	r3, #0
34183952:	d014      	beq.n	3418397e <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
34183954:	f7ff fcae 	bl	341832b4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34183958:	f7fe fd46 	bl	341823e8 <HAL_GetTick>
3418395c:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
3418395e:	e008      	b.n	34183972 <HAL_RCC_OscConfig+0x3b2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34183960:	f7fe fd42 	bl	341823e8 <HAL_GetTick>
34183964:	4602      	mov	r2, r0
34183966:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34183968:	1ad3      	subs	r3, r2, r3
3418396a:	2b01      	cmp	r3, #1
3418396c:	d901      	bls.n	34183972 <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
3418396e:	2303      	movs	r3, #3
34183970:	e201      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() == 0U)
34183972:	f7ff fcbd 	bl	341832f0 <LL_RCC_LSI_IsReady>
34183976:	4603      	mov	r3, r0
34183978:	2b00      	cmp	r3, #0
3418397a:	d0f1      	beq.n	34183960 <HAL_RCC_OscConfig+0x3a0>
3418397c:	e013      	b.n	341839a6 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
3418397e:	f7ff fca7 	bl	341832d0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34183982:	f7fe fd31 	bl	341823e8 <HAL_GetTick>
34183986:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
34183988:	e008      	b.n	3418399c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
3418398a:	f7fe fd2d 	bl	341823e8 <HAL_GetTick>
3418398e:	4602      	mov	r2, r0
34183990:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34183992:	1ad3      	subs	r3, r2, r3
34183994:	2b01      	cmp	r3, #1
34183996:	d901      	bls.n	3418399c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
34183998:	2303      	movs	r3, #3
3418399a:	e1ec      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() != 0U)
3418399c:	f7ff fca8 	bl	341832f0 <LL_RCC_LSI_IsReady>
341839a0:	4603      	mov	r3, r0
341839a2:	2b00      	cmp	r3, #0
341839a4:	d1f1      	bne.n	3418398a <HAL_RCC_OscConfig+0x3ca>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
341839a6:	687b      	ldr	r3, [r7, #4]
341839a8:	681b      	ldr	r3, [r3, #0]
341839aa:	f003 0304 	and.w	r3, r3, #4
341839ae:	2b00      	cmp	r3, #0
341839b0:	f000 808c 	beq.w	34183acc <HAL_RCC_OscConfig+0x50c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
341839b4:	687b      	ldr	r3, [r7, #4]
341839b6:	689b      	ldr	r3, [r3, #8]
341839b8:	2b02      	cmp	r3, #2
341839ba:	d104      	bne.n	341839c6 <HAL_RCC_OscConfig+0x406>
341839bc:	4b96      	ldr	r3, [pc, #600]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
341839be:	2202      	movs	r2, #2
341839c0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341839c4:	e055      	b.n	34183a72 <HAL_RCC_OscConfig+0x4b2>
341839c6:	687b      	ldr	r3, [r7, #4]
341839c8:	689b      	ldr	r3, [r3, #8]
341839ca:	2b00      	cmp	r3, #0
341839cc:	d112      	bne.n	341839f4 <HAL_RCC_OscConfig+0x434>
341839ce:	4b92      	ldr	r3, [pc, #584]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
341839d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341839d4:	461a      	mov	r2, r3
341839d6:	2302      	movs	r3, #2
341839d8:	6013      	str	r3, [r2, #0]
341839da:	4b8f      	ldr	r3, [pc, #572]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
341839dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341839de:	4a8e      	ldr	r2, [pc, #568]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
341839e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341839e4:	6413      	str	r3, [r2, #64]	@ 0x40
341839e6:	4b8c      	ldr	r3, [pc, #560]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
341839e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341839ea:	4a8b      	ldr	r2, [pc, #556]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
341839ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
341839f0:	6413      	str	r3, [r2, #64]	@ 0x40
341839f2:	e03e      	b.n	34183a72 <HAL_RCC_OscConfig+0x4b2>
341839f4:	687b      	ldr	r3, [r7, #4]
341839f6:	689b      	ldr	r3, [r3, #8]
341839f8:	f248 0202 	movw	r2, #32770	@ 0x8002
341839fc:	4293      	cmp	r3, r2
341839fe:	d110      	bne.n	34183a22 <HAL_RCC_OscConfig+0x462>
34183a00:	4b85      	ldr	r3, [pc, #532]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34183a04:	4a84      	ldr	r2, [pc, #528]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34183a0a:	6413      	str	r3, [r2, #64]	@ 0x40
34183a0c:	4b82      	ldr	r3, [pc, #520]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34183a10:	4a81      	ldr	r2, [pc, #516]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183a16:	6413      	str	r3, [r2, #64]	@ 0x40
34183a18:	4b7f      	ldr	r3, [pc, #508]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a1a:	2202      	movs	r2, #2
34183a1c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34183a20:	e027      	b.n	34183a72 <HAL_RCC_OscConfig+0x4b2>
34183a22:	687b      	ldr	r3, [r7, #4]
34183a24:	689b      	ldr	r3, [r3, #8]
34183a26:	4a7d      	ldr	r2, [pc, #500]	@ (34183c1c <HAL_RCC_OscConfig+0x65c>)
34183a28:	4293      	cmp	r3, r2
34183a2a:	d110      	bne.n	34183a4e <HAL_RCC_OscConfig+0x48e>
34183a2c:	4b7a      	ldr	r3, [pc, #488]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34183a30:	4a79      	ldr	r2, [pc, #484]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34183a36:	6413      	str	r3, [r2, #64]	@ 0x40
34183a38:	4b77      	ldr	r3, [pc, #476]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34183a3c:	4a76      	ldr	r2, [pc, #472]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34183a42:	6413      	str	r3, [r2, #64]	@ 0x40
34183a44:	4b74      	ldr	r3, [pc, #464]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a46:	2202      	movs	r2, #2
34183a48:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34183a4c:	e011      	b.n	34183a72 <HAL_RCC_OscConfig+0x4b2>
34183a4e:	4b72      	ldr	r3, [pc, #456]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34183a54:	461a      	mov	r2, r3
34183a56:	2302      	movs	r3, #2
34183a58:	6013      	str	r3, [r2, #0]
34183a5a:	4b6f      	ldr	r3, [pc, #444]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34183a5e:	4a6e      	ldr	r2, [pc, #440]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34183a64:	6413      	str	r3, [r2, #64]	@ 0x40
34183a66:	4b6c      	ldr	r3, [pc, #432]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34183a6a:	4a6b      	ldr	r2, [pc, #428]	@ (34183c18 <HAL_RCC_OscConfig+0x658>)
34183a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183a70:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34183a72:	687b      	ldr	r3, [r7, #4]
34183a74:	689b      	ldr	r3, [r3, #8]
34183a76:	2b00      	cmp	r3, #0
34183a78:	d014      	beq.n	34183aa4 <HAL_RCC_OscConfig+0x4e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34183a7a:	f7fe fcb5 	bl	341823e8 <HAL_GetTick>
34183a7e:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
34183a80:	e00a      	b.n	34183a98 <HAL_RCC_OscConfig+0x4d8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34183a82:	f7fe fcb1 	bl	341823e8 <HAL_GetTick>
34183a86:	4602      	mov	r2, r0
34183a88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34183a8a:	1ad3      	subs	r3, r2, r3
34183a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
34183a90:	4293      	cmp	r3, r2
34183a92:	d901      	bls.n	34183a98 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
34183a94:	2303      	movs	r3, #3
34183a96:	e16e      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() == 0U)
34183a98:	f7ff fbfa 	bl	34183290 <LL_RCC_LSE_IsReady>
34183a9c:	4603      	mov	r3, r0
34183a9e:	2b00      	cmp	r3, #0
34183aa0:	d0ef      	beq.n	34183a82 <HAL_RCC_OscConfig+0x4c2>
34183aa2:	e013      	b.n	34183acc <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34183aa4:	f7fe fca0 	bl	341823e8 <HAL_GetTick>
34183aa8:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
34183aaa:	e00a      	b.n	34183ac2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34183aac:	f7fe fc9c 	bl	341823e8 <HAL_GetTick>
34183ab0:	4602      	mov	r2, r0
34183ab2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34183ab4:	1ad3      	subs	r3, r2, r3
34183ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
34183aba:	4293      	cmp	r3, r2
34183abc:	d901      	bls.n	34183ac2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
34183abe:	2303      	movs	r3, #3
34183ac0:	e159      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() != 0U)
34183ac2:	f7ff fbe5 	bl	34183290 <LL_RCC_LSE_IsReady>
34183ac6:	4603      	mov	r3, r0
34183ac8:	2b00      	cmp	r3, #0
34183aca:	d1ef      	bne.n	34183aac <HAL_RCC_OscConfig+0x4ec>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34183acc:	687b      	ldr	r3, [r7, #4]
34183ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34183ad0:	2b00      	cmp	r3, #0
34183ad2:	d04c      	beq.n	34183b6e <HAL_RCC_OscConfig+0x5ae>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34183ad4:	687b      	ldr	r3, [r7, #4]
34183ad6:	3328      	adds	r3, #40	@ 0x28
34183ad8:	4619      	mov	r1, r3
34183ada:	2000      	movs	r0, #0
34183adc:	f000 fe38 	bl	34184750 <RCC_PLL_IsNewConfig>
34183ae0:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
34183ae2:	f7ff fc3d 	bl	34183360 <LL_RCC_PLL1_IsReady>
34183ae6:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
34183ae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
34183aea:	2b01      	cmp	r3, #1
34183aec:	d130      	bne.n	34183b50 <HAL_RCC_OscConfig+0x590>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34183aee:	f7ff fd0f 	bl	34183510 <LL_RCC_IC1_GetSource>
34183af2:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34183af4:	f7ff fd2a 	bl	3418354c <LL_RCC_IC2_GetSource>
34183af8:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34183afa:	f7ff fd45 	bl	34183588 <LL_RCC_IC6_GetSource>
34183afe:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34183b00:	f7ff fd50 	bl	341835a4 <LL_RCC_IC11_GetSource>
34183b04:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
34183b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34183b0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34183b0e:	d104      	bne.n	34183b1a <HAL_RCC_OscConfig+0x55a>
34183b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
34183b12:	2b00      	cmp	r3, #0
34183b14:	d101      	bne.n	34183b1a <HAL_RCC_OscConfig+0x55a>
      {
        return HAL_ERROR;
34183b16:	2301      	movs	r3, #1
34183b18:	e12d      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34183b1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34183b1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183b22:	d10a      	bne.n	34183b3a <HAL_RCC_OscConfig+0x57a>
34183b24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
34183b26:	2b00      	cmp	r3, #0
34183b28:	d005      	beq.n	34183b36 <HAL_RCC_OscConfig+0x576>
34183b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34183b2c:	2b00      	cmp	r3, #0
34183b2e:	d002      	beq.n	34183b36 <HAL_RCC_OscConfig+0x576>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34183b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34183b32:	2b00      	cmp	r3, #0
34183b34:	d101      	bne.n	34183b3a <HAL_RCC_OscConfig+0x57a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
34183b36:	2301      	movs	r3, #1
34183b38:	e11d      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34183b3a:	687b      	ldr	r3, [r7, #4]
34183b3c:	3328      	adds	r3, #40	@ 0x28
34183b3e:	4619      	mov	r1, r3
34183b40:	2000      	movs	r0, #0
34183b42:	f000 fca9 	bl	34184498 <RCC_PLL_Config>
34183b46:	4603      	mov	r3, r0
34183b48:	2b00      	cmp	r3, #0
34183b4a:	d010      	beq.n	34183b6e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
34183b4c:	2301      	movs	r3, #1
34183b4e:	e112      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34183b50:	687b      	ldr	r3, [r7, #4]
34183b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34183b54:	2b02      	cmp	r3, #2
34183b56:	d10a      	bne.n	34183b6e <HAL_RCC_OscConfig+0x5ae>
34183b58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
34183b5a:	2b00      	cmp	r3, #0
34183b5c:	d107      	bne.n	34183b6e <HAL_RCC_OscConfig+0x5ae>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34183b5e:	2000      	movs	r0, #0
34183b60:	f000 fdca 	bl	341846f8 <RCC_PLL_Enable>
34183b64:	4603      	mov	r3, r0
34183b66:	2b00      	cmp	r3, #0
34183b68:	d001      	beq.n	34183b6e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
34183b6a:	2301      	movs	r3, #1
34183b6c:	e103      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34183b6e:	687b      	ldr	r3, [r7, #4]
34183b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34183b72:	2b00      	cmp	r3, #0
34183b74:	d054      	beq.n	34183c20 <HAL_RCC_OscConfig+0x660>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34183b76:	687b      	ldr	r3, [r7, #4]
34183b78:	3344      	adds	r3, #68	@ 0x44
34183b7a:	4619      	mov	r1, r3
34183b7c:	2001      	movs	r0, #1
34183b7e:	f000 fde7 	bl	34184750 <RCC_PLL_IsNewConfig>
34183b82:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
34183b84:	f7ff fc22 	bl	341833cc <LL_RCC_PLL2_IsReady>
34183b88:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
34183b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34183b8c:	2b01      	cmp	r3, #1
34183b8e:	d134      	bne.n	34183bfa <HAL_RCC_OscConfig+0x63a>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34183b90:	f7ff fcbe 	bl	34183510 <LL_RCC_IC1_GetSource>
34183b94:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34183b96:	f7ff fcd9 	bl	3418354c <LL_RCC_IC2_GetSource>
34183b9a:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34183b9c:	f7ff fcf4 	bl	34183588 <LL_RCC_IC6_GetSource>
34183ba0:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34183ba2:	f7ff fcff 	bl	341835a4 <LL_RCC_IC11_GetSource>
34183ba6:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34183ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34183bac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34183bb0:	d105      	bne.n	34183bbe <HAL_RCC_OscConfig+0x5fe>
34183bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34183bb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183bb8:	d101      	bne.n	34183bbe <HAL_RCC_OscConfig+0x5fe>
      {
        return HAL_ERROR;
34183bba:	2301      	movs	r3, #1
34183bbc:	e0db      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34183bbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34183bc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183bc6:	d10d      	bne.n	34183be4 <HAL_RCC_OscConfig+0x624>
34183bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34183bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183bce:	d007      	beq.n	34183be0 <HAL_RCC_OscConfig+0x620>
34183bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34183bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183bd6:	d003      	beq.n	34183be0 <HAL_RCC_OscConfig+0x620>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34183bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34183bda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183bde:	d101      	bne.n	34183be4 <HAL_RCC_OscConfig+0x624>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
34183be0:	2301      	movs	r3, #1
34183be2:	e0c8      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34183be4:	687b      	ldr	r3, [r7, #4]
34183be6:	3344      	adds	r3, #68	@ 0x44
34183be8:	4619      	mov	r1, r3
34183bea:	2001      	movs	r0, #1
34183bec:	f000 fc54 	bl	34184498 <RCC_PLL_Config>
34183bf0:	4603      	mov	r3, r0
34183bf2:	2b00      	cmp	r3, #0
34183bf4:	d014      	beq.n	34183c20 <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
34183bf6:	2301      	movs	r3, #1
34183bf8:	e0bd      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34183bfa:	687b      	ldr	r3, [r7, #4]
34183bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34183bfe:	2b02      	cmp	r3, #2
34183c00:	d10e      	bne.n	34183c20 <HAL_RCC_OscConfig+0x660>
34183c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34183c04:	2b00      	cmp	r3, #0
34183c06:	d10b      	bne.n	34183c20 <HAL_RCC_OscConfig+0x660>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34183c08:	2001      	movs	r0, #1
34183c0a:	f000 fd75 	bl	341846f8 <RCC_PLL_Enable>
34183c0e:	4603      	mov	r3, r0
34183c10:	2b00      	cmp	r3, #0
34183c12:	d005      	beq.n	34183c20 <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
34183c14:	2301      	movs	r3, #1
34183c16:	e0ae      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
34183c18:	56028000 	.word	0x56028000
34183c1c:	00018002 	.word	0x00018002

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
34183c20:	687b      	ldr	r3, [r7, #4]
34183c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34183c24:	2b00      	cmp	r3, #0
34183c26:	d050      	beq.n	34183cca <HAL_RCC_OscConfig+0x70a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34183c28:	687b      	ldr	r3, [r7, #4]
34183c2a:	3360      	adds	r3, #96	@ 0x60
34183c2c:	4619      	mov	r1, r3
34183c2e:	2002      	movs	r0, #2
34183c30:	f000 fd8e 	bl	34184750 <RCC_PLL_IsNewConfig>
34183c34:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34183c36:	f7ff fb93 	bl	34183360 <LL_RCC_PLL1_IsReady>
34183c3a:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
34183c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34183c3e:	2b01      	cmp	r3, #1
34183c40:	d134      	bne.n	34183cac <HAL_RCC_OscConfig+0x6ec>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34183c42:	f7ff fc65 	bl	34183510 <LL_RCC_IC1_GetSource>
34183c46:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34183c48:	f7ff fc80 	bl	3418354c <LL_RCC_IC2_GetSource>
34183c4c:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34183c4e:	f7ff fc9b 	bl	34183588 <LL_RCC_IC6_GetSource>
34183c52:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34183c54:	f7ff fca6 	bl	341835a4 <LL_RCC_IC11_GetSource>
34183c58:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34183c5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34183c5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34183c62:	d105      	bne.n	34183c70 <HAL_RCC_OscConfig+0x6b0>
34183c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34183c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183c6a:	d101      	bne.n	34183c70 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
34183c6c:	2301      	movs	r3, #1
34183c6e:	e082      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34183c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34183c74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183c78:	d10d      	bne.n	34183c96 <HAL_RCC_OscConfig+0x6d6>
34183c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34183c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183c80:	d007      	beq.n	34183c92 <HAL_RCC_OscConfig+0x6d2>
34183c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34183c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183c88:	d003      	beq.n	34183c92 <HAL_RCC_OscConfig+0x6d2>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
34183c8a:	6a3b      	ldr	r3, [r7, #32]
34183c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183c90:	d101      	bne.n	34183c96 <HAL_RCC_OscConfig+0x6d6>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
34183c92:	2301      	movs	r3, #1
34183c94:	e06f      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34183c96:	687b      	ldr	r3, [r7, #4]
34183c98:	3360      	adds	r3, #96	@ 0x60
34183c9a:	4619      	mov	r1, r3
34183c9c:	2002      	movs	r0, #2
34183c9e:	f000 fbfb 	bl	34184498 <RCC_PLL_Config>
34183ca2:	4603      	mov	r3, r0
34183ca4:	2b00      	cmp	r3, #0
34183ca6:	d010      	beq.n	34183cca <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
34183ca8:	2301      	movs	r3, #1
34183caa:	e064      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34183cac:	687b      	ldr	r3, [r7, #4]
34183cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34183cb0:	2b02      	cmp	r3, #2
34183cb2:	d10a      	bne.n	34183cca <HAL_RCC_OscConfig+0x70a>
34183cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34183cb6:	2b00      	cmp	r3, #0
34183cb8:	d107      	bne.n	34183cca <HAL_RCC_OscConfig+0x70a>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34183cba:	2002      	movs	r0, #2
34183cbc:	f000 fd1c 	bl	341846f8 <RCC_PLL_Enable>
34183cc0:	4603      	mov	r3, r0
34183cc2:	2b00      	cmp	r3, #0
34183cc4:	d001      	beq.n	34183cca <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
34183cc6:	2301      	movs	r3, #1
34183cc8:	e055      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34183cca:	687b      	ldr	r3, [r7, #4]
34183ccc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34183cce:	2b00      	cmp	r3, #0
34183cd0:	d050      	beq.n	34183d74 <HAL_RCC_OscConfig+0x7b4>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34183cd2:	687b      	ldr	r3, [r7, #4]
34183cd4:	337c      	adds	r3, #124	@ 0x7c
34183cd6:	4619      	mov	r1, r3
34183cd8:	2003      	movs	r0, #3
34183cda:	f000 fd39 	bl	34184750 <RCC_PLL_IsNewConfig>
34183cde:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
34183ce0:	f7ff fbe0 	bl	341834a4 <LL_RCC_PLL4_IsReady>
34183ce4:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
34183ce6:	69fb      	ldr	r3, [r7, #28]
34183ce8:	2b01      	cmp	r3, #1
34183cea:	d134      	bne.n	34183d56 <HAL_RCC_OscConfig+0x796>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34183cec:	f7ff fc10 	bl	34183510 <LL_RCC_IC1_GetSource>
34183cf0:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34183cf2:	f7ff fc2b 	bl	3418354c <LL_RCC_IC2_GetSource>
34183cf6:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34183cf8:	f7ff fc46 	bl	34183588 <LL_RCC_IC6_GetSource>
34183cfc:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34183cfe:	f7ff fc51 	bl	341835a4 <LL_RCC_IC11_GetSource>
34183d02:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34183d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34183d08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34183d0c:	d105      	bne.n	34183d1a <HAL_RCC_OscConfig+0x75a>
34183d0e:	697b      	ldr	r3, [r7, #20]
34183d10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183d14:	d101      	bne.n	34183d1a <HAL_RCC_OscConfig+0x75a>
      {
        return HAL_ERROR;
34183d16:	2301      	movs	r3, #1
34183d18:	e02d      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34183d1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34183d1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183d22:	d10d      	bne.n	34183d40 <HAL_RCC_OscConfig+0x780>
34183d24:	693b      	ldr	r3, [r7, #16]
34183d26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183d2a:	d007      	beq.n	34183d3c <HAL_RCC_OscConfig+0x77c>
34183d2c:	68fb      	ldr	r3, [r7, #12]
34183d2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183d32:	d003      	beq.n	34183d3c <HAL_RCC_OscConfig+0x77c>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34183d34:	68bb      	ldr	r3, [r7, #8]
34183d36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183d3a:	d101      	bne.n	34183d40 <HAL_RCC_OscConfig+0x780>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
34183d3c:	2301      	movs	r3, #1
34183d3e:	e01a      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34183d40:	687b      	ldr	r3, [r7, #4]
34183d42:	337c      	adds	r3, #124	@ 0x7c
34183d44:	4619      	mov	r1, r3
34183d46:	2003      	movs	r0, #3
34183d48:	f000 fba6 	bl	34184498 <RCC_PLL_Config>
34183d4c:	4603      	mov	r3, r0
34183d4e:	2b00      	cmp	r3, #0
34183d50:	d010      	beq.n	34183d74 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34183d52:	2301      	movs	r3, #1
34183d54:	e00f      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34183d56:	687b      	ldr	r3, [r7, #4]
34183d58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34183d5a:	2b02      	cmp	r3, #2
34183d5c:	d10a      	bne.n	34183d74 <HAL_RCC_OscConfig+0x7b4>
34183d5e:	69bb      	ldr	r3, [r7, #24]
34183d60:	2b00      	cmp	r3, #0
34183d62:	d107      	bne.n	34183d74 <HAL_RCC_OscConfig+0x7b4>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34183d64:	2003      	movs	r0, #3
34183d66:	f000 fcc7 	bl	341846f8 <RCC_PLL_Enable>
34183d6a:	4603      	mov	r3, r0
34183d6c:	2b00      	cmp	r3, #0
34183d6e:	d001      	beq.n	34183d74 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34183d70:	2301      	movs	r3, #1
34183d72:	e000      	b.n	34183d76 <HAL_RCC_OscConfig+0x7b6>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
34183d74:	2300      	movs	r3, #0
}
34183d76:	4618      	mov	r0, r3
34183d78:	3788      	adds	r7, #136	@ 0x88
34183d7a:	46bd      	mov	sp, r7
34183d7c:	bd80      	pop	{r7, pc}
34183d7e:	bf00      	nop

34183d80 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34183d80:	b580      	push	{r7, lr}
34183d82:	b084      	sub	sp, #16
34183d84:	af00      	add	r7, sp, #0
34183d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
34183d88:	687b      	ldr	r3, [r7, #4]
34183d8a:	2b00      	cmp	r3, #0
34183d8c:	d101      	bne.n	34183d92 <HAL_RCC_ClockConfig+0x12>
  {
    return HAL_ERROR;
34183d8e:	2301      	movs	r3, #1
34183d90:	e1f2      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34183d92:	687b      	ldr	r3, [r7, #4]
34183d94:	681b      	ldr	r3, [r3, #0]
34183d96:	f003 0308 	and.w	r3, r3, #8
34183d9a:	2b00      	cmp	r3, #0
34183d9c:	d010      	beq.n	34183dc0 <HAL_RCC_ClockConfig+0x40>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34183d9e:	687b      	ldr	r3, [r7, #4]
34183da0:	691a      	ldr	r2, [r3, #16]
34183da2:	4ba3      	ldr	r3, [pc, #652]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183da6:	f003 0307 	and.w	r3, r3, #7
34183daa:	429a      	cmp	r2, r3
34183dac:	d908      	bls.n	34183dc0 <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34183dae:	4ba0      	ldr	r3, [pc, #640]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183db2:	f023 0207 	bic.w	r2, r3, #7
34183db6:	687b      	ldr	r3, [r7, #4]
34183db8:	691b      	ldr	r3, [r3, #16]
34183dba:	499d      	ldr	r1, [pc, #628]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183dbc:	4313      	orrs	r3, r2
34183dbe:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34183dc0:	687b      	ldr	r3, [r7, #4]
34183dc2:	681b      	ldr	r3, [r3, #0]
34183dc4:	f003 0310 	and.w	r3, r3, #16
34183dc8:	2b00      	cmp	r3, #0
34183dca:	d010      	beq.n	34183dee <HAL_RCC_ClockConfig+0x6e>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34183dcc:	687b      	ldr	r3, [r7, #4]
34183dce:	695a      	ldr	r2, [r3, #20]
34183dd0:	4b97      	ldr	r3, [pc, #604]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183dd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34183dd8:	429a      	cmp	r2, r3
34183dda:	d908      	bls.n	34183dee <HAL_RCC_ClockConfig+0x6e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34183ddc:	4b94      	ldr	r3, [pc, #592]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183de0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34183de4:	687b      	ldr	r3, [r7, #4]
34183de6:	695b      	ldr	r3, [r3, #20]
34183de8:	4991      	ldr	r1, [pc, #580]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183dea:	4313      	orrs	r3, r2
34183dec:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34183dee:	687b      	ldr	r3, [r7, #4]
34183df0:	681b      	ldr	r3, [r3, #0]
34183df2:	f003 0320 	and.w	r3, r3, #32
34183df6:	2b00      	cmp	r3, #0
34183df8:	d010      	beq.n	34183e1c <HAL_RCC_ClockConfig+0x9c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34183dfa:	687b      	ldr	r3, [r7, #4]
34183dfc:	699a      	ldr	r2, [r3, #24]
34183dfe:	4b8c      	ldr	r3, [pc, #560]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183e02:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34183e06:	429a      	cmp	r2, r3
34183e08:	d908      	bls.n	34183e1c <HAL_RCC_ClockConfig+0x9c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34183e0a:	4b89      	ldr	r3, [pc, #548]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183e0e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34183e12:	687b      	ldr	r3, [r7, #4]
34183e14:	699b      	ldr	r3, [r3, #24]
34183e16:	4986      	ldr	r1, [pc, #536]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183e18:	4313      	orrs	r3, r2
34183e1a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34183e1c:	687b      	ldr	r3, [r7, #4]
34183e1e:	681b      	ldr	r3, [r3, #0]
34183e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34183e24:	2b00      	cmp	r3, #0
34183e26:	d010      	beq.n	34183e4a <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34183e28:	687b      	ldr	r3, [r7, #4]
34183e2a:	69da      	ldr	r2, [r3, #28]
34183e2c:	4b80      	ldr	r3, [pc, #512]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183e30:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34183e34:	429a      	cmp	r2, r3
34183e36:	d908      	bls.n	34183e4a <HAL_RCC_ClockConfig+0xca>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34183e38:	4b7d      	ldr	r3, [pc, #500]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183e3c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34183e40:	687b      	ldr	r3, [r7, #4]
34183e42:	69db      	ldr	r3, [r3, #28]
34183e44:	497a      	ldr	r1, [pc, #488]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183e46:	4313      	orrs	r3, r2
34183e48:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34183e4a:	687b      	ldr	r3, [r7, #4]
34183e4c:	681b      	ldr	r3, [r3, #0]
34183e4e:	f003 0304 	and.w	r3, r3, #4
34183e52:	2b00      	cmp	r3, #0
34183e54:	d010      	beq.n	34183e78 <HAL_RCC_ClockConfig+0xf8>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34183e56:	687b      	ldr	r3, [r7, #4]
34183e58:	68da      	ldr	r2, [r3, #12]
34183e5a:	4b75      	ldr	r3, [pc, #468]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183e5e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34183e62:	429a      	cmp	r2, r3
34183e64:	d908      	bls.n	34183e78 <HAL_RCC_ClockConfig+0xf8>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34183e66:	4b72      	ldr	r3, [pc, #456]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183e6a:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34183e6e:	687b      	ldr	r3, [r7, #4]
34183e70:	68db      	ldr	r3, [r3, #12]
34183e72:	496f      	ldr	r1, [pc, #444]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183e74:	4313      	orrs	r3, r2
34183e76:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34183e78:	687b      	ldr	r3, [r7, #4]
34183e7a:	681b      	ldr	r3, [r3, #0]
34183e7c:	f003 0301 	and.w	r3, r3, #1
34183e80:	2b00      	cmp	r3, #0
34183e82:	d063      	beq.n	34183f4c <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34183e84:	687b      	ldr	r3, [r7, #4]
34183e86:	685b      	ldr	r3, [r3, #4]
34183e88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34183e8c:	d106      	bne.n	34183e9c <HAL_RCC_ClockConfig+0x11c>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34183e8e:	f7ff f92b 	bl	341830e8 <LL_RCC_HSE_IsReady>
34183e92:	4603      	mov	r3, r0
34183e94:	2b00      	cmp	r3, #0
34183e96:	d134      	bne.n	34183f02 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34183e98:	2301      	movs	r3, #1
34183e9a:	e16d      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34183e9c:	687b      	ldr	r3, [r7, #4]
34183e9e:	685b      	ldr	r3, [r3, #4]
34183ea0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34183ea4:	d11a      	bne.n	34183edc <HAL_RCC_ClockConfig+0x15c>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34183ea6:	f7ff fb33 	bl	34183510 <LL_RCC_IC1_GetSource>
34183eaa:	4602      	mov	r2, r0
34183eac:	687b      	ldr	r3, [r7, #4]
34183eae:	6a1b      	ldr	r3, [r3, #32]
34183eb0:	4619      	mov	r1, r3
34183eb2:	4610      	mov	r0, r2
34183eb4:	f000 fd00 	bl	341848b8 <RCC_IC_CheckPLLSources>
34183eb8:	4603      	mov	r3, r0
34183eba:	2b01      	cmp	r3, #1
34183ebc:	d001      	beq.n	34183ec2 <HAL_RCC_ClockConfig+0x142>
      {
        return HAL_ERROR;
34183ebe:	2301      	movs	r3, #1
34183ec0:	e15a      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34183ec2:	687b      	ldr	r3, [r7, #4]
34183ec4:	6a1a      	ldr	r2, [r3, #32]
34183ec6:	687b      	ldr	r3, [r7, #4]
34183ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183eca:	3b01      	subs	r3, #1
34183ecc:	041b      	lsls	r3, r3, #16
34183ece:	4958      	ldr	r1, [pc, #352]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183ed0:	4313      	orrs	r3, r2
34183ed2:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
34183ed6:	f7ff fb0d 	bl	341834f4 <LL_RCC_IC1_Enable>
34183eda:	e012      	b.n	34183f02 <HAL_RCC_ClockConfig+0x182>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34183edc:	687b      	ldr	r3, [r7, #4]
34183ede:	685b      	ldr	r3, [r3, #4]
34183ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34183ee4:	d106      	bne.n	34183ef4 <HAL_RCC_ClockConfig+0x174>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34183ee6:	f7ff f997 	bl	34183218 <LL_RCC_MSI_IsReady>
34183eea:	4603      	mov	r3, r0
34183eec:	2b00      	cmp	r3, #0
34183eee:	d108      	bne.n	34183f02 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34183ef0:	2301      	movs	r3, #1
34183ef2:	e141      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34183ef4:	f7ff f928 	bl	34183148 <LL_RCC_HSI_IsReady>
34183ef8:	4603      	mov	r3, r0
34183efa:	2b00      	cmp	r3, #0
34183efc:	d101      	bne.n	34183f02 <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34183efe:	2301      	movs	r3, #1
34183f00:	e13a      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34183f02:	4b4b      	ldr	r3, [pc, #300]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183f04:	6a1b      	ldr	r3, [r3, #32]
34183f06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
34183f0a:	687b      	ldr	r3, [r7, #4]
34183f0c:	685b      	ldr	r3, [r3, #4]
34183f0e:	4948      	ldr	r1, [pc, #288]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183f10:	4313      	orrs	r3, r2
34183f12:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34183f14:	f7fe fa68 	bl	341823e8 <HAL_GetTick>
34183f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34183f1a:	e00a      	b.n	34183f32 <HAL_RCC_ClockConfig+0x1b2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34183f1c:	f7fe fa64 	bl	341823e8 <HAL_GetTick>
34183f20:	4602      	mov	r2, r0
34183f22:	68fb      	ldr	r3, [r7, #12]
34183f24:	1ad3      	subs	r3, r2, r3
34183f26:	f241 3288 	movw	r2, #5000	@ 0x1388
34183f2a:	4293      	cmp	r3, r2
34183f2c:	d901      	bls.n	34183f32 <HAL_RCC_ClockConfig+0x1b2>
      {
        return HAL_TIMEOUT;
34183f2e:	2303      	movs	r3, #3
34183f30:	e122      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34183f32:	f7ff f9eb 	bl	3418330c <LL_RCC_GetCpuClkSource>
34183f36:	4602      	mov	r2, r0
34183f38:	687b      	ldr	r3, [r7, #4]
34183f3a:	685b      	ldr	r3, [r3, #4]
34183f3c:	011b      	lsls	r3, r3, #4
34183f3e:	429a      	cmp	r2, r3
34183f40:	d1ec      	bne.n	34183f1c <HAL_RCC_ClockConfig+0x19c>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34183f42:	f000 f921 	bl	34184188 <HAL_RCC_GetCpuClockFreq>
34183f46:	4603      	mov	r3, r0
34183f48:	4a3a      	ldr	r2, [pc, #232]	@ (34184034 <HAL_RCC_ClockConfig+0x2b4>)
34183f4a:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34183f4c:	687b      	ldr	r3, [r7, #4]
34183f4e:	681b      	ldr	r3, [r3, #0]
34183f50:	f003 0302 	and.w	r3, r3, #2
34183f54:	2b00      	cmp	r3, #0
34183f56:	f000 8096 	beq.w	34184086 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34183f5a:	687b      	ldr	r3, [r7, #4]
34183f5c:	689b      	ldr	r3, [r3, #8]
34183f5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34183f62:	d106      	bne.n	34183f72 <HAL_RCC_ClockConfig+0x1f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34183f64:	f7ff f8c0 	bl	341830e8 <LL_RCC_HSE_IsReady>
34183f68:	4603      	mov	r3, r0
34183f6a:	2b00      	cmp	r3, #0
34183f6c:	d16b      	bne.n	34184046 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34183f6e:	2301      	movs	r3, #1
34183f70:	e102      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34183f72:	687b      	ldr	r3, [r7, #4]
34183f74:	689b      	ldr	r3, [r3, #8]
34183f76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34183f7a:	d14d      	bne.n	34184018 <HAL_RCC_ClockConfig+0x298>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34183f7c:	f7ff fae6 	bl	3418354c <LL_RCC_IC2_GetSource>
34183f80:	4602      	mov	r2, r0
34183f82:	687b      	ldr	r3, [r7, #4]
34183f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34183f86:	4619      	mov	r1, r3
34183f88:	4610      	mov	r0, r2
34183f8a:	f000 fc95 	bl	341848b8 <RCC_IC_CheckPLLSources>
34183f8e:	4603      	mov	r3, r0
34183f90:	2b01      	cmp	r3, #1
34183f92:	d001      	beq.n	34183f98 <HAL_RCC_ClockConfig+0x218>
      {
        return HAL_ERROR;
34183f94:	2301      	movs	r3, #1
34183f96:	e0ef      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34183f98:	f7ff faf6 	bl	34183588 <LL_RCC_IC6_GetSource>
34183f9c:	4602      	mov	r2, r0
34183f9e:	687b      	ldr	r3, [r7, #4]
34183fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34183fa2:	4619      	mov	r1, r3
34183fa4:	4610      	mov	r0, r2
34183fa6:	f000 fc87 	bl	341848b8 <RCC_IC_CheckPLLSources>
34183faa:	4603      	mov	r3, r0
34183fac:	2b01      	cmp	r3, #1
34183fae:	d001      	beq.n	34183fb4 <HAL_RCC_ClockConfig+0x234>
      {
        return HAL_ERROR;
34183fb0:	2301      	movs	r3, #1
34183fb2:	e0e1      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34183fb4:	f7ff faf6 	bl	341835a4 <LL_RCC_IC11_GetSource>
34183fb8:	4602      	mov	r2, r0
34183fba:	687b      	ldr	r3, [r7, #4]
34183fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34183fbe:	4619      	mov	r1, r3
34183fc0:	4610      	mov	r0, r2
34183fc2:	f000 fc79 	bl	341848b8 <RCC_IC_CheckPLLSources>
34183fc6:	4603      	mov	r3, r0
34183fc8:	2b01      	cmp	r3, #1
34183fca:	d001      	beq.n	34183fd0 <HAL_RCC_ClockConfig+0x250>
      {
        return HAL_ERROR;
34183fcc:	2301      	movs	r3, #1
34183fce:	e0d3      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34183fd0:	687b      	ldr	r3, [r7, #4]
34183fd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34183fd4:	687b      	ldr	r3, [r7, #4]
34183fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34183fd8:	3b01      	subs	r3, #1
34183fda:	041b      	lsls	r3, r3, #16
34183fdc:	4914      	ldr	r1, [pc, #80]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183fde:	4313      	orrs	r3, r2
34183fe0:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34183fe4:	687b      	ldr	r3, [r7, #4]
34183fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
34183fe8:	687b      	ldr	r3, [r7, #4]
34183fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34183fec:	3b01      	subs	r3, #1
34183fee:	041b      	lsls	r3, r3, #16
34183ff0:	490f      	ldr	r1, [pc, #60]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34183ff2:	4313      	orrs	r3, r2
34183ff4:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34183ff8:	687b      	ldr	r3, [r7, #4]
34183ffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34183ffc:	687b      	ldr	r3, [r7, #4]
34183ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34184000:	3b01      	subs	r3, #1
34184002:	041b      	lsls	r3, r3, #16
34184004:	490a      	ldr	r1, [pc, #40]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
34184006:	4313      	orrs	r3, r2
34184008:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
3418400c:	4b08      	ldr	r3, [pc, #32]	@ (34184030 <HAL_RCC_ClockConfig+0x2b0>)
3418400e:	f240 4222 	movw	r2, #1058	@ 0x422
34184012:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
34184016:	e016      	b.n	34184046 <HAL_RCC_ClockConfig+0x2c6>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34184018:	687b      	ldr	r3, [r7, #4]
3418401a:	689b      	ldr	r3, [r3, #8]
3418401c:	2b00      	cmp	r3, #0
3418401e:	d10b      	bne.n	34184038 <HAL_RCC_ClockConfig+0x2b8>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34184020:	f7ff f892 	bl	34183148 <LL_RCC_HSI_IsReady>
34184024:	4603      	mov	r3, r0
34184026:	2b00      	cmp	r3, #0
34184028:	d10d      	bne.n	34184046 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
3418402a:	2301      	movs	r3, #1
3418402c:	e0a4      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
3418402e:	bf00      	nop
34184030:	56028000 	.word	0x56028000
34184034:	341c0000 	.word	0x341c0000
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34184038:	f7ff f8ee 	bl	34183218 <LL_RCC_MSI_IsReady>
3418403c:	4603      	mov	r3, r0
3418403e:	2b00      	cmp	r3, #0
34184040:	d101      	bne.n	34184046 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34184042:	2301      	movs	r3, #1
34184044:	e098      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34184046:	4b4e      	ldr	r3, [pc, #312]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
34184048:	6a1b      	ldr	r3, [r3, #32]
3418404a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3418404e:	687b      	ldr	r3, [r7, #4]
34184050:	689b      	ldr	r3, [r3, #8]
34184052:	494b      	ldr	r1, [pc, #300]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
34184054:	4313      	orrs	r3, r2
34184056:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34184058:	f7fe f9c6 	bl	341823e8 <HAL_GetTick>
3418405c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
3418405e:	e00a      	b.n	34184076 <HAL_RCC_ClockConfig+0x2f6>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34184060:	f7fe f9c2 	bl	341823e8 <HAL_GetTick>
34184064:	4602      	mov	r2, r0
34184066:	68fb      	ldr	r3, [r7, #12]
34184068:	1ad3      	subs	r3, r2, r3
3418406a:	f241 3288 	movw	r2, #5000	@ 0x1388
3418406e:	4293      	cmp	r3, r2
34184070:	d901      	bls.n	34184076 <HAL_RCC_ClockConfig+0x2f6>
      {
        return HAL_TIMEOUT;
34184072:	2303      	movs	r3, #3
34184074:	e080      	b.n	34184178 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34184076:	f7ff f957 	bl	34183328 <LL_RCC_GetSysClkSource>
3418407a:	4602      	mov	r2, r0
3418407c:	687b      	ldr	r3, [r7, #4]
3418407e:	689b      	ldr	r3, [r3, #8]
34184080:	011b      	lsls	r3, r3, #4
34184082:	429a      	cmp	r2, r3
34184084:	d1ec      	bne.n	34184060 <HAL_RCC_ClockConfig+0x2e0>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34184086:	687b      	ldr	r3, [r7, #4]
34184088:	681b      	ldr	r3, [r3, #0]
3418408a:	f003 0304 	and.w	r3, r3, #4
3418408e:	2b00      	cmp	r3, #0
34184090:	d010      	beq.n	341840b4 <HAL_RCC_ClockConfig+0x334>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34184092:	687b      	ldr	r3, [r7, #4]
34184094:	68da      	ldr	r2, [r3, #12]
34184096:	4b3a      	ldr	r3, [pc, #232]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
34184098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418409a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
3418409e:	429a      	cmp	r2, r3
341840a0:	d208      	bcs.n	341840b4 <HAL_RCC_ClockConfig+0x334>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
341840a2:	4b37      	ldr	r3, [pc, #220]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
341840a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341840a6:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
341840aa:	687b      	ldr	r3, [r7, #4]
341840ac:	68db      	ldr	r3, [r3, #12]
341840ae:	4934      	ldr	r1, [pc, #208]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
341840b0:	4313      	orrs	r3, r2
341840b2:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
341840b4:	687b      	ldr	r3, [r7, #4]
341840b6:	681b      	ldr	r3, [r3, #0]
341840b8:	f003 0308 	and.w	r3, r3, #8
341840bc:	2b00      	cmp	r3, #0
341840be:	d010      	beq.n	341840e2 <HAL_RCC_ClockConfig+0x362>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
341840c0:	687b      	ldr	r3, [r7, #4]
341840c2:	691a      	ldr	r2, [r3, #16]
341840c4:	4b2e      	ldr	r3, [pc, #184]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
341840c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341840c8:	f003 0307 	and.w	r3, r3, #7
341840cc:	429a      	cmp	r2, r3
341840ce:	d208      	bcs.n	341840e2 <HAL_RCC_ClockConfig+0x362>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
341840d0:	4b2b      	ldr	r3, [pc, #172]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
341840d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341840d4:	f023 0207 	bic.w	r2, r3, #7
341840d8:	687b      	ldr	r3, [r7, #4]
341840da:	691b      	ldr	r3, [r3, #16]
341840dc:	4928      	ldr	r1, [pc, #160]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
341840de:	4313      	orrs	r3, r2
341840e0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
341840e2:	687b      	ldr	r3, [r7, #4]
341840e4:	681b      	ldr	r3, [r3, #0]
341840e6:	f003 0310 	and.w	r3, r3, #16
341840ea:	2b00      	cmp	r3, #0
341840ec:	d010      	beq.n	34184110 <HAL_RCC_ClockConfig+0x390>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
341840ee:	687b      	ldr	r3, [r7, #4]
341840f0:	695a      	ldr	r2, [r3, #20]
341840f2:	4b23      	ldr	r3, [pc, #140]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
341840f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341840f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
341840fa:	429a      	cmp	r2, r3
341840fc:	d208      	bcs.n	34184110 <HAL_RCC_ClockConfig+0x390>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
341840fe:	4b20      	ldr	r3, [pc, #128]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
34184100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184102:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34184106:	687b      	ldr	r3, [r7, #4]
34184108:	695b      	ldr	r3, [r3, #20]
3418410a:	491d      	ldr	r1, [pc, #116]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
3418410c:	4313      	orrs	r3, r2
3418410e:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34184110:	687b      	ldr	r3, [r7, #4]
34184112:	681b      	ldr	r3, [r3, #0]
34184114:	f003 0320 	and.w	r3, r3, #32
34184118:	2b00      	cmp	r3, #0
3418411a:	d010      	beq.n	3418413e <HAL_RCC_ClockConfig+0x3be>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
3418411c:	687b      	ldr	r3, [r7, #4]
3418411e:	699a      	ldr	r2, [r3, #24]
34184120:	4b17      	ldr	r3, [pc, #92]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
34184122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184124:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34184128:	429a      	cmp	r2, r3
3418412a:	d208      	bcs.n	3418413e <HAL_RCC_ClockConfig+0x3be>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
3418412c:	4b14      	ldr	r3, [pc, #80]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
3418412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184130:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34184134:	687b      	ldr	r3, [r7, #4]
34184136:	699b      	ldr	r3, [r3, #24]
34184138:	4911      	ldr	r1, [pc, #68]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
3418413a:	4313      	orrs	r3, r2
3418413c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
3418413e:	687b      	ldr	r3, [r7, #4]
34184140:	681b      	ldr	r3, [r3, #0]
34184142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34184146:	2b00      	cmp	r3, #0
34184148:	d010      	beq.n	3418416c <HAL_RCC_ClockConfig+0x3ec>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
3418414a:	687b      	ldr	r3, [r7, #4]
3418414c:	69da      	ldr	r2, [r3, #28]
3418414e:	4b0c      	ldr	r3, [pc, #48]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
34184150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184152:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34184156:	429a      	cmp	r2, r3
34184158:	d208      	bcs.n	3418416c <HAL_RCC_ClockConfig+0x3ec>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
3418415a:	4b09      	ldr	r3, [pc, #36]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
3418415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418415e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34184162:	687b      	ldr	r3, [r7, #4]
34184164:	69db      	ldr	r3, [r3, #28]
34184166:	4906      	ldr	r1, [pc, #24]	@ (34184180 <HAL_RCC_ClockConfig+0x400>)
34184168:	4313      	orrs	r3, r2
3418416a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
3418416c:	4b05      	ldr	r3, [pc, #20]	@ (34184184 <HAL_RCC_ClockConfig+0x404>)
3418416e:	681b      	ldr	r3, [r3, #0]
34184170:	4618      	mov	r0, r3
34184172:	f7fe f8ef 	bl	34182354 <HAL_InitTick>
34184176:	4603      	mov	r3, r0
}
34184178:	4618      	mov	r0, r3
3418417a:	3710      	adds	r7, #16
3418417c:	46bd      	mov	sp, r7
3418417e:	bd80      	pop	{r7, pc}
34184180:	56028000 	.word	0x56028000
34184184:	341c0004 	.word	0x341c0004

34184188 <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
34184188:	b580      	push	{r7, lr}
3418418a:	b082      	sub	sp, #8
3418418c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
3418418e:	2300      	movs	r3, #0
34184190:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
34184192:	f7ff f8bb 	bl	3418330c <LL_RCC_GetCpuClkSource>
34184196:	4603      	mov	r3, r0
34184198:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418419c:	d026      	beq.n	341841ec <HAL_RCC_GetCpuClockFreq+0x64>
3418419e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341841a2:	d861      	bhi.n	34184268 <HAL_RCC_GetCpuClockFreq+0xe0>
341841a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341841a8:	d01d      	beq.n	341841e6 <HAL_RCC_GetCpuClockFreq+0x5e>
341841aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341841ae:	d85b      	bhi.n	34184268 <HAL_RCC_GetCpuClockFreq+0xe0>
341841b0:	2b00      	cmp	r3, #0
341841b2:	d003      	beq.n	341841bc <HAL_RCC_GetCpuClockFreq+0x34>
341841b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341841b8:	d009      	beq.n	341841ce <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
341841ba:	e055      	b.n	34184268 <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341841bc:	f7fe ffea 	bl	34183194 <LL_RCC_HSI_GetDivider>
341841c0:	4603      	mov	r3, r0
341841c2:	09db      	lsrs	r3, r3, #7
341841c4:	4a2b      	ldr	r2, [pc, #172]	@ (34184274 <HAL_RCC_GetCpuClockFreq+0xec>)
341841c6:	fa22 f303 	lsr.w	r3, r2, r3
341841ca:	607b      	str	r3, [r7, #4]
      break;
341841cc:	e04d      	b.n	3418426a <HAL_RCC_GetCpuClockFreq+0xe2>
      frequency = RCC_GET_MSI_FREQUENCY();
341841ce:	4b2a      	ldr	r3, [pc, #168]	@ (34184278 <HAL_RCC_GetCpuClockFreq+0xf0>)
341841d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341841d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341841d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341841da:	d101      	bne.n	341841e0 <HAL_RCC_GetCpuClockFreq+0x58>
341841dc:	4b27      	ldr	r3, [pc, #156]	@ (3418427c <HAL_RCC_GetCpuClockFreq+0xf4>)
341841de:	e000      	b.n	341841e2 <HAL_RCC_GetCpuClockFreq+0x5a>
341841e0:	4b27      	ldr	r3, [pc, #156]	@ (34184280 <HAL_RCC_GetCpuClockFreq+0xf8>)
341841e2:	607b      	str	r3, [r7, #4]
      break;
341841e4:	e041      	b.n	3418426a <HAL_RCC_GetCpuClockFreq+0xe2>
      frequency = HSE_VALUE;
341841e6:	4b27      	ldr	r3, [pc, #156]	@ (34184284 <HAL_RCC_GetCpuClockFreq+0xfc>)
341841e8:	607b      	str	r3, [r7, #4]
      break;
341841ea:	e03e      	b.n	3418426a <HAL_RCC_GetCpuClockFreq+0xe2>
      ic_divider = LL_RCC_IC1_GetDivider();
341841ec:	f7ff f99e 	bl	3418352c <LL_RCC_IC1_GetDivider>
341841f0:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
341841f2:	f7ff f98d 	bl	34183510 <LL_RCC_IC1_GetSource>
341841f6:	4603      	mov	r3, r0
341841f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341841fc:	d029      	beq.n	34184252 <HAL_RCC_GetCpuClockFreq+0xca>
341841fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34184202:	d82f      	bhi.n	34184264 <HAL_RCC_GetCpuClockFreq+0xdc>
34184204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34184208:	d01a      	beq.n	34184240 <HAL_RCC_GetCpuClockFreq+0xb8>
3418420a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418420e:	d829      	bhi.n	34184264 <HAL_RCC_GetCpuClockFreq+0xdc>
34184210:	2b00      	cmp	r3, #0
34184212:	d003      	beq.n	3418421c <HAL_RCC_GetCpuClockFreq+0x94>
34184214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34184218:	d009      	beq.n	3418422e <HAL_RCC_GetCpuClockFreq+0xa6>
          break;
3418421a:	e023      	b.n	34184264 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418421c:	f004 fec0 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
34184220:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34184222:	687a      	ldr	r2, [r7, #4]
34184224:	683b      	ldr	r3, [r7, #0]
34184226:	fbb2 f3f3 	udiv	r3, r2, r3
3418422a:	607b      	str	r3, [r7, #4]
          break;
3418422c:	e01b      	b.n	34184266 <HAL_RCC_GetCpuClockFreq+0xde>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418422e:	f004 fefd 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34184232:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34184234:	687a      	ldr	r2, [r7, #4]
34184236:	683b      	ldr	r3, [r7, #0]
34184238:	fbb2 f3f3 	udiv	r3, r2, r3
3418423c:	607b      	str	r3, [r7, #4]
          break;
3418423e:	e012      	b.n	34184266 <HAL_RCC_GetCpuClockFreq+0xde>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34184240:	f004 ff3a 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
34184244:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34184246:	687a      	ldr	r2, [r7, #4]
34184248:	683b      	ldr	r3, [r7, #0]
3418424a:	fbb2 f3f3 	udiv	r3, r2, r3
3418424e:	607b      	str	r3, [r7, #4]
          break;
34184250:	e009      	b.n	34184266 <HAL_RCC_GetCpuClockFreq+0xde>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34184252:	f004 ff77 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
34184256:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34184258:	687a      	ldr	r2, [r7, #4]
3418425a:	683b      	ldr	r3, [r7, #0]
3418425c:	fbb2 f3f3 	udiv	r3, r2, r3
34184260:	607b      	str	r3, [r7, #4]
          break;
34184262:	e000      	b.n	34184266 <HAL_RCC_GetCpuClockFreq+0xde>
          break;
34184264:	bf00      	nop
      break;
34184266:	e000      	b.n	3418426a <HAL_RCC_GetCpuClockFreq+0xe2>
      break;
34184268:	bf00      	nop
  }

  return frequency;
3418426a:	687b      	ldr	r3, [r7, #4]
}
3418426c:	4618      	mov	r0, r3
3418426e:	3708      	adds	r7, #8
34184270:	46bd      	mov	sp, r7
34184272:	bd80      	pop	{r7, pc}
34184274:	03d09000 	.word	0x03d09000
34184278:	56028000 	.word	0x56028000
3418427c:	00f42400 	.word	0x00f42400
34184280:	003d0900 	.word	0x003d0900
34184284:	02dc6c00 	.word	0x02dc6c00

34184288 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
34184288:	b598      	push	{r3, r4, r7, lr}
3418428a:	af00      	add	r7, sp, #0
  return RCC_GetSysClockFreq(LL_RCC_IC2_GetSource(), LL_RCC_IC2_GetDivider());
3418428c:	f7ff f95e 	bl	3418354c <LL_RCC_IC2_GetSource>
34184290:	4604      	mov	r4, r0
34184292:	f7ff f969 	bl	34183568 <LL_RCC_IC2_GetDivider>
34184296:	4603      	mov	r3, r0
34184298:	4619      	mov	r1, r3
3418429a:	4620      	mov	r0, r4
3418429c:	f000 f87a 	bl	34184394 <RCC_GetSysClockFreq>
341842a0:	4603      	mov	r3, r0
}
341842a2:	4618      	mov	r0, r3
341842a4:	bd98      	pop	{r3, r4, r7, pc}
	...

341842a8 <HAL_RCC_GetClockConfig>:
  * @param  pRCC_ClkInitStruct  Pointer to an RCC_ClkInitTypeDef structure that
  *         will return the configuration.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
341842a8:	b480      	push	{r7}
341842aa:	b085      	sub	sp, #20
341842ac:	af00      	add	r7, sp, #0
341842ae:	6078      	str	r0, [r7, #4]
  uint32_t cfgr_value;

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK | \
341842b0:	687b      	ldr	r3, [r7, #4]
341842b2:	227f      	movs	r2, #127	@ 0x7f
341842b4:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK   | \
                                  RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                  RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the configuration register 1 value */
  cfgr_value = RCC->CFGR1;
341842b6:	4b36      	ldr	r3, [pc, #216]	@ (34184390 <HAL_RCC_GetClockConfig+0xe8>)
341842b8:	6a1b      	ldr	r3, [r3, #32]
341842ba:	60fb      	str	r3, [r7, #12]

  /* Get the active CPU source -----------------------------------------------*/
  pRCC_ClkInitStruct->CPUCLKSource = (cfgr_value & RCC_CFGR1_CPUSWS) >> 4U;
341842bc:	68fb      	ldr	r3, [r7, #12]
341842be:	091b      	lsrs	r3, r3, #4
341842c0:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
341842c4:	687b      	ldr	r3, [r7, #4]
341842c6:	605a      	str	r2, [r3, #4]

  /* Get the active SYSCLK bus source ----------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (cfgr_value & RCC_CFGR1_SYSSWS) >> 4U;
341842c8:	68fb      	ldr	r3, [r7, #12]
341842ca:	091b      	lsrs	r3, r3, #4
341842cc:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
341842d0:	687b      	ldr	r3, [r7, #4]
341842d2:	609a      	str	r2, [r3, #8]

  /* Get the configuration register 2 value */
  cfgr_value = RCC->CFGR2;
341842d4:	4b2e      	ldr	r3, [pc, #184]	@ (34184390 <HAL_RCC_GetClockConfig+0xe8>)
341842d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341842d8:	60fb      	str	r3, [r7, #12]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (cfgr_value & RCC_CFGR2_HPRE);
341842da:	68fb      	ldr	r3, [r7, #12]
341842dc:	f403 02e0 	and.w	r2, r3, #7340032	@ 0x700000
341842e0:	687b      	ldr	r3, [r7, #4]
341842e2:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (cfgr_value & RCC_CFGR2_PPRE1);
341842e4:	68fb      	ldr	r3, [r7, #12]
341842e6:	f003 0207 	and.w	r2, r3, #7
341842ea:	687b      	ldr	r3, [r7, #4]
341842ec:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (cfgr_value & RCC_CFGR2_PPRE2);
341842ee:	68fb      	ldr	r3, [r7, #12]
341842f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
341842f4:	687b      	ldr	r3, [r7, #4]
341842f6:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB4CLKDivider = (cfgr_value & RCC_CFGR2_PPRE4);
341842f8:	68fb      	ldr	r3, [r7, #12]
341842fa:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
341842fe:	687b      	ldr	r3, [r7, #4]
34184300:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB5CLKDivider = (cfgr_value & RCC_CFGR2_PPRE5);
34184302:	68fb      	ldr	r3, [r7, #12]
34184304:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
34184308:	687b      	ldr	r3, [r7, #4]
3418430a:	61da      	str	r2, [r3, #28]

  /* Get the IC1 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC1CFGR;
3418430c:	4b20      	ldr	r3, [pc, #128]	@ (34184390 <HAL_RCC_GetClockConfig+0xe8>)
3418430e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34184312:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC1Selection.ClockSelection = cfgr_value & RCC_IC1CFGR_IC1SEL;
34184314:	68fb      	ldr	r3, [r7, #12]
34184316:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418431a:	687b      	ldr	r3, [r7, #4]
3418431c:	621a      	str	r2, [r3, #32]
  pRCC_ClkInitStruct->IC1Selection.ClockDivider = ((cfgr_value & RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1U;
3418431e:	68fb      	ldr	r3, [r7, #12]
34184320:	0c1b      	lsrs	r3, r3, #16
34184322:	b2db      	uxtb	r3, r3
34184324:	1c5a      	adds	r2, r3, #1
34184326:	687b      	ldr	r3, [r7, #4]
34184328:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the IC2 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC2CFGR;
3418432a:	4b19      	ldr	r3, [pc, #100]	@ (34184390 <HAL_RCC_GetClockConfig+0xe8>)
3418432c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34184330:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC2Selection.ClockSelection = cfgr_value & RCC_IC2CFGR_IC2SEL;
34184332:	68fb      	ldr	r3, [r7, #12]
34184334:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34184338:	687b      	ldr	r3, [r7, #4]
3418433a:	629a      	str	r2, [r3, #40]	@ 0x28
  pRCC_ClkInitStruct->IC2Selection.ClockDivider = ((cfgr_value & RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1U;
3418433c:	68fb      	ldr	r3, [r7, #12]
3418433e:	0c1b      	lsrs	r3, r3, #16
34184340:	b2db      	uxtb	r3, r3
34184342:	1c5a      	adds	r2, r3, #1
34184344:	687b      	ldr	r3, [r7, #4]
34184346:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the IC6 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC6CFGR;
34184348:	4b11      	ldr	r3, [pc, #68]	@ (34184390 <HAL_RCC_GetClockConfig+0xe8>)
3418434a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3418434e:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC6Selection.ClockSelection = cfgr_value & RCC_IC6CFGR_IC6SEL;
34184350:	68fb      	ldr	r3, [r7, #12]
34184352:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34184356:	687b      	ldr	r3, [r7, #4]
34184358:	631a      	str	r2, [r3, #48]	@ 0x30
  pRCC_ClkInitStruct->IC6Selection.ClockDivider = ((cfgr_value & RCC_IC6CFGR_IC6INT) >> RCC_IC6CFGR_IC6INT_Pos) + 1U;
3418435a:	68fb      	ldr	r3, [r7, #12]
3418435c:	0c1b      	lsrs	r3, r3, #16
3418435e:	b2db      	uxtb	r3, r3
34184360:	1c5a      	adds	r2, r3, #1
34184362:	687b      	ldr	r3, [r7, #4]
34184364:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the IC11 configuration ----------------------------------------------*/
  cfgr_value = RCC->IC11CFGR;
34184366:	4b0a      	ldr	r3, [pc, #40]	@ (34184390 <HAL_RCC_GetClockConfig+0xe8>)
34184368:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3418436c:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC11Selection.ClockSelection = cfgr_value & RCC_IC11CFGR_IC11SEL;
3418436e:	68fb      	ldr	r3, [r7, #12]
34184370:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34184374:	687b      	ldr	r3, [r7, #4]
34184376:	639a      	str	r2, [r3, #56]	@ 0x38
  pRCC_ClkInitStruct->IC11Selection.ClockDivider = ((cfgr_value & RCC_IC11CFGR_IC11INT) >> RCC_IC11CFGR_IC11INT_Pos) + 1U;
34184378:	68fb      	ldr	r3, [r7, #12]
3418437a:	0c1b      	lsrs	r3, r3, #16
3418437c:	b2db      	uxtb	r3, r3
3418437e:	1c5a      	adds	r2, r3, #1
34184380:	687b      	ldr	r3, [r7, #4]
34184382:	63da      	str	r2, [r3, #60]	@ 0x3c
}
34184384:	bf00      	nop
34184386:	3714      	adds	r7, #20
34184388:	46bd      	mov	sp, r7
3418438a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418438e:	4770      	bx	lr
34184390:	56028000 	.word	0x56028000

34184394 <RCC_GetSysClockFreq>:
  * @param  icx_divider The intermediate clock divider
  *
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreq(uint32_t icx_source, uint32_t icx_divider)
{
34184394:	b580      	push	{r7, lr}
34184396:	b084      	sub	sp, #16
34184398:	af00      	add	r7, sp, #0
3418439a:	6078      	str	r0, [r7, #4]
3418439c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
3418439e:	2300      	movs	r3, #0
341843a0:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
341843a2:	f7fe ffc1 	bl	34183328 <LL_RCC_GetSysClkSource>
341843a6:	4603      	mov	r3, r0
341843a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341843ac:	d026      	beq.n	341843fc <RCC_GetSysClockFreq+0x68>
341843ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341843b2:	d861      	bhi.n	34184478 <RCC_GetSysClockFreq+0xe4>
341843b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341843b8:	d01d      	beq.n	341843f6 <RCC_GetSysClockFreq+0x62>
341843ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341843be:	d85b      	bhi.n	34184478 <RCC_GetSysClockFreq+0xe4>
341843c0:	2b00      	cmp	r3, #0
341843c2:	d003      	beq.n	341843cc <RCC_GetSysClockFreq+0x38>
341843c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341843c8:	d009      	beq.n	341843de <RCC_GetSysClockFreq+0x4a>
      }
      break;

    default:
      /* Unexpected case */
      break;
341843ca:	e055      	b.n	34184478 <RCC_GetSysClockFreq+0xe4>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341843cc:	f7fe fee2 	bl	34183194 <LL_RCC_HSI_GetDivider>
341843d0:	4603      	mov	r3, r0
341843d2:	09db      	lsrs	r3, r3, #7
341843d4:	4a2b      	ldr	r2, [pc, #172]	@ (34184484 <RCC_GetSysClockFreq+0xf0>)
341843d6:	fa22 f303 	lsr.w	r3, r2, r3
341843da:	60fb      	str	r3, [r7, #12]
      break;
341843dc:	e04d      	b.n	3418447a <RCC_GetSysClockFreq+0xe6>
      frequency = RCC_GET_MSI_FREQUENCY();
341843de:	4b2a      	ldr	r3, [pc, #168]	@ (34184488 <RCC_GetSysClockFreq+0xf4>)
341843e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341843e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341843e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341843ea:	d101      	bne.n	341843f0 <RCC_GetSysClockFreq+0x5c>
341843ec:	4b27      	ldr	r3, [pc, #156]	@ (3418448c <RCC_GetSysClockFreq+0xf8>)
341843ee:	e000      	b.n	341843f2 <RCC_GetSysClockFreq+0x5e>
341843f0:	4b27      	ldr	r3, [pc, #156]	@ (34184490 <RCC_GetSysClockFreq+0xfc>)
341843f2:	60fb      	str	r3, [r7, #12]
      break;
341843f4:	e041      	b.n	3418447a <RCC_GetSysClockFreq+0xe6>
      frequency = HSE_VALUE;
341843f6:	4b27      	ldr	r3, [pc, #156]	@ (34184494 <RCC_GetSysClockFreq+0x100>)
341843f8:	60fb      	str	r3, [r7, #12]
      break;
341843fa:	e03e      	b.n	3418447a <RCC_GetSysClockFreq+0xe6>
      switch (icx_source)
341843fc:	687b      	ldr	r3, [r7, #4]
341843fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34184402:	d02e      	beq.n	34184462 <RCC_GetSysClockFreq+0xce>
34184404:	687b      	ldr	r3, [r7, #4]
34184406:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418440a:	d833      	bhi.n	34184474 <RCC_GetSysClockFreq+0xe0>
3418440c:	687b      	ldr	r3, [r7, #4]
3418440e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34184412:	d01d      	beq.n	34184450 <RCC_GetSysClockFreq+0xbc>
34184414:	687b      	ldr	r3, [r7, #4]
34184416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418441a:	d82b      	bhi.n	34184474 <RCC_GetSysClockFreq+0xe0>
3418441c:	687b      	ldr	r3, [r7, #4]
3418441e:	2b00      	cmp	r3, #0
34184420:	d004      	beq.n	3418442c <RCC_GetSysClockFreq+0x98>
34184422:	687b      	ldr	r3, [r7, #4]
34184424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34184428:	d009      	beq.n	3418443e <RCC_GetSysClockFreq+0xaa>
          break;
3418442a:	e023      	b.n	34184474 <RCC_GetSysClockFreq+0xe0>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418442c:	f004 fdb8 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
34184430:	60f8      	str	r0, [r7, #12]
          frequency = frequency / icx_divider;
34184432:	68fa      	ldr	r2, [r7, #12]
34184434:	683b      	ldr	r3, [r7, #0]
34184436:	fbb2 f3f3 	udiv	r3, r2, r3
3418443a:	60fb      	str	r3, [r7, #12]
          break;
3418443c:	e01b      	b.n	34184476 <RCC_GetSysClockFreq+0xe2>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418443e:	f004 fdf5 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34184442:	60f8      	str	r0, [r7, #12]
          frequency = frequency / icx_divider;
34184444:	68fa      	ldr	r2, [r7, #12]
34184446:	683b      	ldr	r3, [r7, #0]
34184448:	fbb2 f3f3 	udiv	r3, r2, r3
3418444c:	60fb      	str	r3, [r7, #12]
          break;
3418444e:	e012      	b.n	34184476 <RCC_GetSysClockFreq+0xe2>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34184450:	f004 fe32 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
34184454:	60f8      	str	r0, [r7, #12]
          frequency = frequency / icx_divider;
34184456:	68fa      	ldr	r2, [r7, #12]
34184458:	683b      	ldr	r3, [r7, #0]
3418445a:	fbb2 f3f3 	udiv	r3, r2, r3
3418445e:	60fb      	str	r3, [r7, #12]
          break;
34184460:	e009      	b.n	34184476 <RCC_GetSysClockFreq+0xe2>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34184462:	f004 fe6f 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
34184466:	60f8      	str	r0, [r7, #12]
          frequency = frequency / icx_divider;
34184468:	68fa      	ldr	r2, [r7, #12]
3418446a:	683b      	ldr	r3, [r7, #0]
3418446c:	fbb2 f3f3 	udiv	r3, r2, r3
34184470:	60fb      	str	r3, [r7, #12]
          break;
34184472:	e000      	b.n	34184476 <RCC_GetSysClockFreq+0xe2>
          break;
34184474:	bf00      	nop
      break;
34184476:	e000      	b.n	3418447a <RCC_GetSysClockFreq+0xe6>
      break;
34184478:	bf00      	nop
  }

  return frequency;
3418447a:	68fb      	ldr	r3, [r7, #12]
}
3418447c:	4618      	mov	r0, r3
3418447e:	3710      	adds	r7, #16
34184480:	46bd      	mov	sp, r7
34184482:	bd80      	pop	{r7, pc}
34184484:	03d09000 	.word	0x03d09000
34184488:	56028000 	.word	0x56028000
3418448c:	00f42400 	.word	0x00f42400
34184490:	003d0900 	.word	0x003d0900
34184494:	02dc6c00 	.word	0x02dc6c00

34184498 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34184498:	b580      	push	{r7, lr}
3418449a:	b088      	sub	sp, #32
3418449c:	af00      	add	r7, sp, #0
3418449e:	6078      	str	r0, [r7, #4]
341844a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
341844a2:	2300      	movs	r3, #0
341844a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
341844a6:	687b      	ldr	r3, [r7, #4]
341844a8:	011a      	lsls	r2, r3, #4
341844aa:	4b8e      	ldr	r3, [pc, #568]	@ (341846e4 <RCC_PLL_Config+0x24c>)
341844ac:	4413      	add	r3, r2
341844ae:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
341844b0:	687b      	ldr	r3, [r7, #4]
341844b2:	011a      	lsls	r2, r3, #4
341844b4:	4b8c      	ldr	r3, [pc, #560]	@ (341846e8 <RCC_PLL_Config+0x250>)
341844b6:	4413      	add	r3, r2
341844b8:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
341844ba:	687b      	ldr	r3, [r7, #4]
341844bc:	011a      	lsls	r2, r3, #4
341844be:	4b8b      	ldr	r3, [pc, #556]	@ (341846ec <RCC_PLL_Config+0x254>)
341844c0:	4413      	add	r3, r2
341844c2:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
341844c4:	683b      	ldr	r3, [r7, #0]
341844c6:	681b      	ldr	r3, [r3, #0]
341844c8:	2b02      	cmp	r3, #2
341844ca:	f040 8091 	bne.w	341845f0 <RCC_PLL_Config+0x158>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
341844ce:	4a88      	ldr	r2, [pc, #544]	@ (341846f0 <RCC_PLL_Config+0x258>)
341844d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
341844d4:	687b      	ldr	r3, [r7, #4]
341844d6:	fa01 f303 	lsl.w	r3, r1, r3
341844da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341844de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341844e0:	f7fd ff82 	bl	341823e8 <HAL_GetTick>
341844e4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341844e6:	e008      	b.n	341844fa <RCC_PLL_Config+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
341844e8:	f7fd ff7e 	bl	341823e8 <HAL_GetTick>
341844ec:	4602      	mov	r2, r0
341844ee:	68fb      	ldr	r3, [r7, #12]
341844f0:	1ad3      	subs	r3, r2, r3
341844f2:	2b01      	cmp	r3, #1
341844f4:	d901      	bls.n	341844fa <RCC_PLL_Config+0x62>
      {
        return HAL_TIMEOUT;
341844f6:	2303      	movs	r3, #3
341844f8:	e0f0      	b.n	341846dc <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341844fa:	4b7d      	ldr	r3, [pc, #500]	@ (341846f0 <RCC_PLL_Config+0x258>)
341844fc:	685a      	ldr	r2, [r3, #4]
341844fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
34184502:	687b      	ldr	r3, [r7, #4]
34184504:	fa01 f303 	lsl.w	r3, r1, r3
34184508:	401a      	ands	r2, r3
3418450a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418450e:	687b      	ldr	r3, [r7, #4]
34184510:	fa01 f303 	lsl.w	r3, r1, r3
34184514:	429a      	cmp	r2, r3
34184516:	d0e7      	beq.n	341844e8 <RCC_PLL_Config+0x50>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34184518:	693b      	ldr	r3, [r7, #16]
3418451a:	681b      	ldr	r3, [r3, #0]
3418451c:	f043 0204 	orr.w	r2, r3, #4
34184520:	693b      	ldr	r3, [r7, #16]
34184522:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34184524:	69bb      	ldr	r3, [r7, #24]
34184526:	681b      	ldr	r3, [r3, #0]
34184528:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3418452c:	69bb      	ldr	r3, [r7, #24]
3418452e:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34184530:	69bb      	ldr	r3, [r7, #24]
34184532:	681a      	ldr	r2, [r3, #0]
34184534:	4b6f      	ldr	r3, [pc, #444]	@ (341846f4 <RCC_PLL_Config+0x25c>)
34184536:	4013      	ands	r3, r2
34184538:	683a      	ldr	r2, [r7, #0]
3418453a:	6851      	ldr	r1, [r2, #4]
3418453c:	683a      	ldr	r2, [r7, #0]
3418453e:	6892      	ldr	r2, [r2, #8]
34184540:	0512      	lsls	r2, r2, #20
34184542:	4311      	orrs	r1, r2
34184544:	683a      	ldr	r2, [r7, #0]
34184546:	6912      	ldr	r2, [r2, #16]
34184548:	0212      	lsls	r2, r2, #8
3418454a:	430a      	orrs	r2, r1
3418454c:	431a      	orrs	r2, r3
3418454e:	69bb      	ldr	r3, [r7, #24]
34184550:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34184552:	693b      	ldr	r3, [r7, #16]
34184554:	681b      	ldr	r3, [r3, #0]
34184556:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
3418455a:	683b      	ldr	r3, [r7, #0]
3418455c:	695b      	ldr	r3, [r3, #20]
3418455e:	06d9      	lsls	r1, r3, #27
34184560:	683b      	ldr	r3, [r7, #0]
34184562:	699b      	ldr	r3, [r3, #24]
34184564:	061b      	lsls	r3, r3, #24
34184566:	430b      	orrs	r3, r1
34184568:	431a      	orrs	r2, r3
3418456a:	693b      	ldr	r3, [r7, #16]
3418456c:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
3418456e:	697b      	ldr	r3, [r7, #20]
34184570:	681b      	ldr	r3, [r3, #0]
34184572:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
34184576:	683b      	ldr	r3, [r7, #0]
34184578:	68db      	ldr	r3, [r3, #12]
3418457a:	431a      	orrs	r2, r3
3418457c:	697b      	ldr	r3, [r7, #20]
3418457e:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34184580:	693b      	ldr	r3, [r7, #16]
34184582:	681b      	ldr	r3, [r3, #0]
34184584:	f023 0208 	bic.w	r2, r3, #8
34184588:	693b      	ldr	r3, [r7, #16]
3418458a:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
3418458c:	683b      	ldr	r3, [r7, #0]
3418458e:	68db      	ldr	r3, [r3, #12]
34184590:	2b00      	cmp	r3, #0
34184592:	d005      	beq.n	341845a0 <RCC_PLL_Config+0x108>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34184594:	693b      	ldr	r3, [r7, #16]
34184596:	681b      	ldr	r3, [r3, #0]
34184598:	f043 020a 	orr.w	r2, r3, #10
3418459c:	693b      	ldr	r3, [r7, #16]
3418459e:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
341845a0:	693b      	ldr	r3, [r7, #16]
341845a2:	681b      	ldr	r3, [r3, #0]
341845a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
341845a8:	f043 0301 	orr.w	r3, r3, #1
341845ac:	693a      	ldr	r2, [r7, #16]
341845ae:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
341845b0:	4a4f      	ldr	r2, [pc, #316]	@ (341846f0 <RCC_PLL_Config+0x258>)
341845b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
341845b6:	687b      	ldr	r3, [r7, #4]
341845b8:	fa01 f303 	lsl.w	r3, r1, r3
341845bc:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341845c0:	f7fd ff12 	bl	341823e8 <HAL_GetTick>
341845c4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
341845c6:	e008      	b.n	341845da <RCC_PLL_Config+0x142>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
341845c8:	f7fd ff0e 	bl	341823e8 <HAL_GetTick>
341845cc:	4602      	mov	r2, r0
341845ce:	68fb      	ldr	r3, [r7, #12]
341845d0:	1ad3      	subs	r3, r2, r3
341845d2:	2b01      	cmp	r3, #1
341845d4:	d901      	bls.n	341845da <RCC_PLL_Config+0x142>
      {
        return HAL_TIMEOUT;
341845d6:	2303      	movs	r3, #3
341845d8:	e080      	b.n	341846dc <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
341845da:	4b45      	ldr	r3, [pc, #276]	@ (341846f0 <RCC_PLL_Config+0x258>)
341845dc:	685a      	ldr	r2, [r3, #4]
341845de:	f44f 7180 	mov.w	r1, #256	@ 0x100
341845e2:	687b      	ldr	r3, [r7, #4]
341845e4:	fa01 f303 	lsl.w	r3, r1, r3
341845e8:	4013      	ands	r3, r2
341845ea:	2b00      	cmp	r3, #0
341845ec:	d0ec      	beq.n	341845c8 <RCC_PLL_Config+0x130>
341845ee:	e074      	b.n	341846da <RCC_PLL_Config+0x242>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
341845f0:	683b      	ldr	r3, [r7, #0]
341845f2:	681b      	ldr	r3, [r3, #0]
341845f4:	2b03      	cmp	r3, #3
341845f6:	d13b      	bne.n	34184670 <RCC_PLL_Config+0x1d8>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
341845f8:	683b      	ldr	r3, [r7, #0]
341845fa:	685b      	ldr	r3, [r3, #4]
341845fc:	4618      	mov	r0, r3
341845fe:	f000 f921 	bl	34184844 <RCC_PLL_Source_IsReady>
34184602:	4603      	mov	r3, r0
34184604:	2b01      	cmp	r3, #1
34184606:	d130      	bne.n	3418466a <RCC_PLL_Config+0x1d2>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34184608:	4a39      	ldr	r2, [pc, #228]	@ (341846f0 <RCC_PLL_Config+0x258>)
3418460a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418460e:	687b      	ldr	r3, [r7, #4]
34184610:	fa01 f303 	lsl.w	r3, r1, r3
34184614:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34184618:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418461a:	f7fd fee5 	bl	341823e8 <HAL_GetTick>
3418461e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34184620:	e008      	b.n	34184634 <RCC_PLL_Config+0x19c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34184622:	f7fd fee1 	bl	341823e8 <HAL_GetTick>
34184626:	4602      	mov	r2, r0
34184628:	68fb      	ldr	r3, [r7, #12]
3418462a:	1ad3      	subs	r3, r2, r3
3418462c:	2b01      	cmp	r3, #1
3418462e:	d901      	bls.n	34184634 <RCC_PLL_Config+0x19c>
        {
          return HAL_TIMEOUT;
34184630:	2303      	movs	r3, #3
34184632:	e053      	b.n	341846dc <RCC_PLL_Config+0x244>
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34184634:	4b2e      	ldr	r3, [pc, #184]	@ (341846f0 <RCC_PLL_Config+0x258>)
34184636:	685a      	ldr	r2, [r3, #4]
34184638:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418463c:	687b      	ldr	r3, [r7, #4]
3418463e:	fa01 f303 	lsl.w	r3, r1, r3
34184642:	401a      	ands	r2, r3
34184644:	f44f 7180 	mov.w	r1, #256	@ 0x100
34184648:	687b      	ldr	r3, [r7, #4]
3418464a:	fa01 f303 	lsl.w	r3, r1, r3
3418464e:	429a      	cmp	r2, r3
34184650:	d0e7      	beq.n	34184622 <RCC_PLL_Config+0x18a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34184652:	69bb      	ldr	r3, [r7, #24]
34184654:	681b      	ldr	r3, [r3, #0]
34184656:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
3418465a:	683b      	ldr	r3, [r7, #0]
3418465c:	685b      	ldr	r3, [r3, #4]
3418465e:	4313      	orrs	r3, r2
34184660:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34184664:	69bb      	ldr	r3, [r7, #24]
34184666:	601a      	str	r2, [r3, #0]
34184668:	e037      	b.n	341846da <RCC_PLL_Config+0x242>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
3418466a:	2301      	movs	r3, #1
3418466c:	77fb      	strb	r3, [r7, #31]
3418466e:	e034      	b.n	341846da <RCC_PLL_Config+0x242>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34184670:	683b      	ldr	r3, [r7, #0]
34184672:	681b      	ldr	r3, [r3, #0]
34184674:	2b01      	cmp	r3, #1
34184676:	d130      	bne.n	341846da <RCC_PLL_Config+0x242>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34184678:	693b      	ldr	r3, [r7, #16]
3418467a:	681b      	ldr	r3, [r3, #0]
3418467c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34184680:	693b      	ldr	r3, [r7, #16]
34184682:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34184684:	4a1a      	ldr	r2, [pc, #104]	@ (341846f0 <RCC_PLL_Config+0x258>)
34184686:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418468a:	687b      	ldr	r3, [r7, #4]
3418468c:	fa01 f303 	lsl.w	r3, r1, r3
34184690:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34184694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34184696:	f7fd fea7 	bl	341823e8 <HAL_GetTick>
3418469a:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418469c:	e008      	b.n	341846b0 <RCC_PLL_Config+0x218>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418469e:	f7fd fea3 	bl	341823e8 <HAL_GetTick>
341846a2:	4602      	mov	r2, r0
341846a4:	68fb      	ldr	r3, [r7, #12]
341846a6:	1ad3      	subs	r3, r2, r3
341846a8:	2b01      	cmp	r3, #1
341846aa:	d901      	bls.n	341846b0 <RCC_PLL_Config+0x218>
      {
        return HAL_TIMEOUT;
341846ac:	2303      	movs	r3, #3
341846ae:	e015      	b.n	341846dc <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341846b0:	4b0f      	ldr	r3, [pc, #60]	@ (341846f0 <RCC_PLL_Config+0x258>)
341846b2:	685a      	ldr	r2, [r3, #4]
341846b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
341846b8:	687b      	ldr	r3, [r7, #4]
341846ba:	fa01 f303 	lsl.w	r3, r1, r3
341846be:	401a      	ands	r2, r3
341846c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
341846c4:	687b      	ldr	r3, [r7, #4]
341846c6:	fa01 f303 	lsl.w	r3, r1, r3
341846ca:	429a      	cmp	r2, r3
341846cc:	d0e7      	beq.n	3418469e <RCC_PLL_Config+0x206>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
341846ce:	69bb      	ldr	r3, [r7, #24]
341846d0:	681b      	ldr	r3, [r3, #0]
341846d2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
341846d6:	69bb      	ldr	r3, [r7, #24]
341846d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
341846da:	7ffb      	ldrb	r3, [r7, #31]
}
341846dc:	4618      	mov	r0, r3
341846de:	3720      	adds	r7, #32
341846e0:	46bd      	mov	sp, r7
341846e2:	bd80      	pop	{r7, pc}
341846e4:	56028080 	.word	0x56028080
341846e8:	56028084 	.word	0x56028084
341846ec:	56028088 	.word	0x56028088
341846f0:	56028000 	.word	0x56028000
341846f4:	8c0000ff 	.word	0x8c0000ff

341846f8 <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
341846f8:	b580      	push	{r7, lr}
341846fa:	b084      	sub	sp, #16
341846fc:	af00      	add	r7, sp, #0
341846fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
34184700:	2300      	movs	r3, #0
34184702:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34184704:	4a11      	ldr	r2, [pc, #68]	@ (3418474c <RCC_PLL_Enable+0x54>)
34184706:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418470a:	687b      	ldr	r3, [r7, #4]
3418470c:	fa01 f303 	lsl.w	r3, r1, r3
34184710:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
34184714:	f7fd fe68 	bl	341823e8 <HAL_GetTick>
34184718:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418471a:	e008      	b.n	3418472e <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418471c:	f7fd fe64 	bl	341823e8 <HAL_GetTick>
34184720:	4602      	mov	r2, r0
34184722:	68bb      	ldr	r3, [r7, #8]
34184724:	1ad3      	subs	r3, r2, r3
34184726:	2b01      	cmp	r3, #1
34184728:	d901      	bls.n	3418472e <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
3418472a:	2303      	movs	r3, #3
3418472c:	e00a      	b.n	34184744 <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418472e:	4b07      	ldr	r3, [pc, #28]	@ (3418474c <RCC_PLL_Enable+0x54>)
34184730:	685a      	ldr	r2, [r3, #4]
34184732:	f44f 7180 	mov.w	r1, #256	@ 0x100
34184736:	687b      	ldr	r3, [r7, #4]
34184738:	fa01 f303 	lsl.w	r3, r1, r3
3418473c:	4013      	ands	r3, r2
3418473e:	2b00      	cmp	r3, #0
34184740:	d0ec      	beq.n	3418471c <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
34184742:	7bfb      	ldrb	r3, [r7, #15]
}
34184744:	4618      	mov	r0, r3
34184746:	3710      	adds	r7, #16
34184748:	46bd      	mov	sp, r7
3418474a:	bd80      	pop	{r7, pc}
3418474c:	56028000 	.word	0x56028000

34184750 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34184750:	b480      	push	{r7}
34184752:	b089      	sub	sp, #36	@ 0x24
34184754:	af00      	add	r7, sp, #0
34184756:	6078      	str	r0, [r7, #4]
34184758:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
3418475a:	2300      	movs	r3, #0
3418475c:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
3418475e:	687b      	ldr	r3, [r7, #4]
34184760:	011a      	lsls	r2, r3, #4
34184762:	4b34      	ldr	r3, [pc, #208]	@ (34184834 <RCC_PLL_IsNewConfig+0xe4>)
34184764:	4413      	add	r3, r2
34184766:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34184768:	687b      	ldr	r3, [r7, #4]
3418476a:	011a      	lsls	r2, r3, #4
3418476c:	4b32      	ldr	r3, [pc, #200]	@ (34184838 <RCC_PLL_IsNewConfig+0xe8>)
3418476e:	4413      	add	r3, r2
34184770:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34184772:	687b      	ldr	r3, [r7, #4]
34184774:	011a      	lsls	r2, r3, #4
34184776:	4b31      	ldr	r3, [pc, #196]	@ (3418483c <RCC_PLL_IsNewConfig+0xec>)
34184778:	4413      	add	r3, r2
3418477a:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3418477c:	697b      	ldr	r3, [r7, #20]
3418477e:	681b      	ldr	r3, [r3, #0]
34184780:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
34184784:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34184788:	683a      	ldr	r2, [r7, #0]
3418478a:	6851      	ldr	r1, [r2, #4]
3418478c:	683a      	ldr	r2, [r7, #0]
3418478e:	6892      	ldr	r2, [r2, #8]
34184790:	0512      	lsls	r2, r2, #20
34184792:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34184794:	683a      	ldr	r2, [r7, #0]
34184796:	6912      	ldr	r2, [r2, #16]
34184798:	0212      	lsls	r2, r2, #8
3418479a:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3418479c:	4293      	cmp	r3, r2
3418479e:	d002      	beq.n	341847a6 <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
341847a0:	2301      	movs	r3, #1
341847a2:	61fb      	str	r3, [r7, #28]
341847a4:	e03e      	b.n	34184824 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
341847a6:	693b      	ldr	r3, [r7, #16]
341847a8:	681b      	ldr	r3, [r3, #0]
341847aa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
341847ae:	683b      	ldr	r3, [r7, #0]
341847b0:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
341847b2:	429a      	cmp	r2, r3
341847b4:	d002      	beq.n	341847bc <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
341847b6:	2301      	movs	r3, #1
341847b8:	61fb      	str	r3, [r7, #28]
341847ba:	e033      	b.n	34184824 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
341847bc:	68fb      	ldr	r3, [r7, #12]
341847be:	681b      	ldr	r3, [r3, #0]
341847c0:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
341847c4:	683b      	ldr	r3, [r7, #0]
341847c6:	695b      	ldr	r3, [r3, #20]
341847c8:	06d9      	lsls	r1, r3, #27
341847ca:	683b      	ldr	r3, [r7, #0]
341847cc:	699b      	ldr	r3, [r3, #24]
341847ce:	061b      	lsls	r3, r3, #24
341847d0:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
341847d2:	429a      	cmp	r2, r3
341847d4:	d002      	beq.n	341847dc <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
341847d6:	2301      	movs	r3, #1
341847d8:	61fb      	str	r3, [r7, #28]
341847da:	e023      	b.n	34184824 <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341847dc:	4b18      	ldr	r3, [pc, #96]	@ (34184840 <RCC_PLL_IsNewConfig+0xf0>)
341847de:	685a      	ldr	r2, [r3, #4]
341847e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
341847e4:	687b      	ldr	r3, [r7, #4]
341847e6:	fa01 f303 	lsl.w	r3, r1, r3
341847ea:	401a      	ands	r2, r3
341847ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
341847f0:	687b      	ldr	r3, [r7, #4]
341847f2:	fa01 f303 	lsl.w	r3, r1, r3
341847f6:	429a      	cmp	r2, r3
341847f8:	d102      	bne.n	34184800 <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
341847fa:	2302      	movs	r3, #2
341847fc:	61bb      	str	r3, [r7, #24]
341847fe:	e00a      	b.n	34184816 <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34184800:	697b      	ldr	r3, [r7, #20]
34184802:	681b      	ldr	r3, [r3, #0]
34184804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34184808:	2b00      	cmp	r3, #0
3418480a:	d002      	beq.n	34184812 <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
3418480c:	2303      	movs	r3, #3
3418480e:	61bb      	str	r3, [r7, #24]
34184810:	e001      	b.n	34184816 <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
34184812:	2301      	movs	r3, #1
34184814:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
34184816:	683b      	ldr	r3, [r7, #0]
34184818:	681b      	ldr	r3, [r3, #0]
3418481a:	69ba      	ldr	r2, [r7, #24]
3418481c:	429a      	cmp	r2, r3
3418481e:	d001      	beq.n	34184824 <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
34184820:	2301      	movs	r3, #1
34184822:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
34184824:	69fb      	ldr	r3, [r7, #28]
}
34184826:	4618      	mov	r0, r3
34184828:	3724      	adds	r7, #36	@ 0x24
3418482a:	46bd      	mov	sp, r7
3418482c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184830:	4770      	bx	lr
34184832:	bf00      	nop
34184834:	56028080 	.word	0x56028080
34184838:	56028084 	.word	0x56028084
3418483c:	56028088 	.word	0x56028088
34184840:	56028000 	.word	0x56028000

34184844 <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
34184844:	b580      	push	{r7, lr}
34184846:	b084      	sub	sp, #16
34184848:	af00      	add	r7, sp, #0
3418484a:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
3418484c:	2301      	movs	r3, #1
3418484e:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
34184850:	687b      	ldr	r3, [r7, #4]
34184852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34184856:	d01b      	beq.n	34184890 <RCC_PLL_Source_IsReady+0x4c>
34184858:	687b      	ldr	r3, [r7, #4]
3418485a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418485e:	d81f      	bhi.n	341848a0 <RCC_PLL_Source_IsReady+0x5c>
34184860:	687b      	ldr	r3, [r7, #4]
34184862:	2b00      	cmp	r3, #0
34184864:	d004      	beq.n	34184870 <RCC_PLL_Source_IsReady+0x2c>
34184866:	687b      	ldr	r3, [r7, #4]
34184868:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418486c:	d008      	beq.n	34184880 <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
3418486e:	e017      	b.n	341848a0 <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
34184870:	f7fe fc6a 	bl	34183148 <LL_RCC_HSI_IsReady>
34184874:	4603      	mov	r3, r0
34184876:	2b00      	cmp	r3, #0
34184878:	d114      	bne.n	341848a4 <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
3418487a:	2300      	movs	r3, #0
3418487c:	60fb      	str	r3, [r7, #12]
      break;
3418487e:	e011      	b.n	341848a4 <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
34184880:	f7fe fcca 	bl	34183218 <LL_RCC_MSI_IsReady>
34184884:	4603      	mov	r3, r0
34184886:	2b00      	cmp	r3, #0
34184888:	d10e      	bne.n	341848a8 <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
3418488a:	2300      	movs	r3, #0
3418488c:	60fb      	str	r3, [r7, #12]
      break;
3418488e:	e00b      	b.n	341848a8 <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
34184890:	f7fe fc2a 	bl	341830e8 <LL_RCC_HSE_IsReady>
34184894:	4603      	mov	r3, r0
34184896:	2b00      	cmp	r3, #0
34184898:	d108      	bne.n	341848ac <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
3418489a:	2300      	movs	r3, #0
3418489c:	60fb      	str	r3, [r7, #12]
      break;
3418489e:	e005      	b.n	341848ac <RCC_PLL_Source_IsReady+0x68>
      break;
341848a0:	bf00      	nop
341848a2:	e004      	b.n	341848ae <RCC_PLL_Source_IsReady+0x6a>
      break;
341848a4:	bf00      	nop
341848a6:	e002      	b.n	341848ae <RCC_PLL_Source_IsReady+0x6a>
      break;
341848a8:	bf00      	nop
341848aa:	e000      	b.n	341848ae <RCC_PLL_Source_IsReady+0x6a>
      break;
341848ac:	bf00      	nop
  }

  return ret;
341848ae:	68fb      	ldr	r3, [r7, #12]
}
341848b0:	4618      	mov	r0, r3
341848b2:	3710      	adds	r7, #16
341848b4:	46bd      	mov	sp, r7
341848b6:	bd80      	pop	{r7, pc}

341848b8 <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
341848b8:	b580      	push	{r7, lr}
341848ba:	b084      	sub	sp, #16
341848bc:	af00      	add	r7, sp, #0
341848be:	6078      	str	r0, [r7, #4]
341848c0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
341848c2:	2301      	movs	r3, #1
341848c4:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
341848c6:	687b      	ldr	r3, [r7, #4]
341848c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341848cc:	d03a      	beq.n	34184944 <RCC_IC_CheckPLLSources+0x8c>
341848ce:	687b      	ldr	r3, [r7, #4]
341848d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341848d4:	d843      	bhi.n	3418495e <RCC_IC_CheckPLLSources+0xa6>
341848d6:	687b      	ldr	r3, [r7, #4]
341848d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341848dc:	d025      	beq.n	3418492a <RCC_IC_CheckPLLSources+0x72>
341848de:	687b      	ldr	r3, [r7, #4]
341848e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341848e4:	d83b      	bhi.n	3418495e <RCC_IC_CheckPLLSources+0xa6>
341848e6:	687b      	ldr	r3, [r7, #4]
341848e8:	2b00      	cmp	r3, #0
341848ea:	d004      	beq.n	341848f6 <RCC_IC_CheckPLLSources+0x3e>
341848ec:	687b      	ldr	r3, [r7, #4]
341848ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341848f2:	d00d      	beq.n	34184910 <RCC_IC_CheckPLLSources+0x58>
341848f4:	e033      	b.n	3418495e <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
341848f6:	f7fe fd33 	bl	34183360 <LL_RCC_PLL1_IsReady>
341848fa:	4603      	mov	r3, r0
341848fc:	2b00      	cmp	r3, #0
341848fe:	d131      	bne.n	34184964 <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34184900:	f7fe fd42 	bl	34183388 <LL_RCC_PLL1_IsEnabledBypass>
34184904:	4603      	mov	r3, r0
34184906:	2b00      	cmp	r3, #0
34184908:	d12c      	bne.n	34184964 <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
3418490a:	2300      	movs	r3, #0
3418490c:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418490e:	e029      	b.n	34184964 <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34184910:	f7fe fd5c 	bl	341833cc <LL_RCC_PLL2_IsReady>
34184914:	4603      	mov	r3, r0
34184916:	2b00      	cmp	r3, #0
34184918:	d126      	bne.n	34184968 <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3418491a:	f7fe fd6b 	bl	341833f4 <LL_RCC_PLL2_IsEnabledBypass>
3418491e:	4603      	mov	r3, r0
34184920:	2b00      	cmp	r3, #0
34184922:	d121      	bne.n	34184968 <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
34184924:	2300      	movs	r3, #0
34184926:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34184928:	e01e      	b.n	34184968 <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3418492a:	f7fe fd85 	bl	34183438 <LL_RCC_PLL3_IsReady>
3418492e:	4603      	mov	r3, r0
34184930:	2b00      	cmp	r3, #0
34184932:	d11b      	bne.n	3418496c <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34184934:	f7fe fd94 	bl	34183460 <LL_RCC_PLL3_IsEnabledBypass>
34184938:	4603      	mov	r3, r0
3418493a:	2b00      	cmp	r3, #0
3418493c:	d116      	bne.n	3418496c <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
3418493e:	2300      	movs	r3, #0
34184940:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34184942:	e013      	b.n	3418496c <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34184944:	f7fe fdae 	bl	341834a4 <LL_RCC_PLL4_IsReady>
34184948:	4603      	mov	r3, r0
3418494a:	2b00      	cmp	r3, #0
3418494c:	d110      	bne.n	34184970 <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3418494e:	f7fe fdbd 	bl	341834cc <LL_RCC_PLL4_IsEnabledBypass>
34184952:	4603      	mov	r3, r0
34184954:	2b00      	cmp	r3, #0
34184956:	d10b      	bne.n	34184970 <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
34184958:	2300      	movs	r3, #0
3418495a:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418495c:	e008      	b.n	34184970 <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
3418495e:	2300      	movs	r3, #0
34184960:	60fb      	str	r3, [r7, #12]
      break;
34184962:	e006      	b.n	34184972 <RCC_IC_CheckPLLSources+0xba>
      break;
34184964:	bf00      	nop
34184966:	e004      	b.n	34184972 <RCC_IC_CheckPLLSources+0xba>
      break;
34184968:	bf00      	nop
3418496a:	e002      	b.n	34184972 <RCC_IC_CheckPLLSources+0xba>
      break;
3418496c:	bf00      	nop
3418496e:	e000      	b.n	34184972 <RCC_IC_CheckPLLSources+0xba>
      break;
34184970:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
34184972:	683b      	ldr	r3, [r7, #0]
34184974:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34184978:	d03a      	beq.n	341849f0 <RCC_IC_CheckPLLSources+0x138>
3418497a:	683b      	ldr	r3, [r7, #0]
3418497c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34184980:	d843      	bhi.n	34184a0a <RCC_IC_CheckPLLSources+0x152>
34184982:	683b      	ldr	r3, [r7, #0]
34184984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34184988:	d025      	beq.n	341849d6 <RCC_IC_CheckPLLSources+0x11e>
3418498a:	683b      	ldr	r3, [r7, #0]
3418498c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34184990:	d83b      	bhi.n	34184a0a <RCC_IC_CheckPLLSources+0x152>
34184992:	683b      	ldr	r3, [r7, #0]
34184994:	2b00      	cmp	r3, #0
34184996:	d004      	beq.n	341849a2 <RCC_IC_CheckPLLSources+0xea>
34184998:	683b      	ldr	r3, [r7, #0]
3418499a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418499e:	d00d      	beq.n	341849bc <RCC_IC_CheckPLLSources+0x104>
341849a0:	e033      	b.n	34184a0a <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
341849a2:	f7fe fcdd 	bl	34183360 <LL_RCC_PLL1_IsReady>
341849a6:	4603      	mov	r3, r0
341849a8:	2b00      	cmp	r3, #0
341849aa:	d131      	bne.n	34184a10 <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
341849ac:	f7fe fcec 	bl	34183388 <LL_RCC_PLL1_IsEnabledBypass>
341849b0:	4603      	mov	r3, r0
341849b2:	2b00      	cmp	r3, #0
341849b4:	d12c      	bne.n	34184a10 <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
341849b6:	2300      	movs	r3, #0
341849b8:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341849ba:	e029      	b.n	34184a10 <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
341849bc:	f7fe fd06 	bl	341833cc <LL_RCC_PLL2_IsReady>
341849c0:	4603      	mov	r3, r0
341849c2:	2b00      	cmp	r3, #0
341849c4:	d126      	bne.n	34184a14 <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
341849c6:	f7fe fd15 	bl	341833f4 <LL_RCC_PLL2_IsEnabledBypass>
341849ca:	4603      	mov	r3, r0
341849cc:	2b00      	cmp	r3, #0
341849ce:	d121      	bne.n	34184a14 <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
341849d0:	2300      	movs	r3, #0
341849d2:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341849d4:	e01e      	b.n	34184a14 <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
341849d6:	f7fe fd2f 	bl	34183438 <LL_RCC_PLL3_IsReady>
341849da:	4603      	mov	r3, r0
341849dc:	2b00      	cmp	r3, #0
341849de:	d11b      	bne.n	34184a18 <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
341849e0:	f7fe fd3e 	bl	34183460 <LL_RCC_PLL3_IsEnabledBypass>
341849e4:	4603      	mov	r3, r0
341849e6:	2b00      	cmp	r3, #0
341849e8:	d116      	bne.n	34184a18 <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
341849ea:	2300      	movs	r3, #0
341849ec:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341849ee:	e013      	b.n	34184a18 <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
341849f0:	f7fe fd58 	bl	341834a4 <LL_RCC_PLL4_IsReady>
341849f4:	4603      	mov	r3, r0
341849f6:	2b00      	cmp	r3, #0
341849f8:	d110      	bne.n	34184a1c <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
341849fa:	f7fe fd67 	bl	341834cc <LL_RCC_PLL4_IsEnabledBypass>
341849fe:	4603      	mov	r3, r0
34184a00:	2b00      	cmp	r3, #0
34184a02:	d10b      	bne.n	34184a1c <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
34184a04:	2300      	movs	r3, #0
34184a06:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34184a08:	e008      	b.n	34184a1c <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
34184a0a:	2300      	movs	r3, #0
34184a0c:	60fb      	str	r3, [r7, #12]
      break;
34184a0e:	e006      	b.n	34184a1e <RCC_IC_CheckPLLSources+0x166>
      break;
34184a10:	bf00      	nop
34184a12:	e004      	b.n	34184a1e <RCC_IC_CheckPLLSources+0x166>
      break;
34184a14:	bf00      	nop
34184a16:	e002      	b.n	34184a1e <RCC_IC_CheckPLLSources+0x166>
      break;
34184a18:	bf00      	nop
34184a1a:	e000      	b.n	34184a1e <RCC_IC_CheckPLLSources+0x166>
      break;
34184a1c:	bf00      	nop
  }

  return ret;
34184a1e:	68fb      	ldr	r3, [r7, #12]
}
34184a20:	4618      	mov	r0, r3
34184a22:	3710      	adds	r7, #16
34184a24:	46bd      	mov	sp, r7
34184a26:	bd80      	pop	{r7, pc}

34184a28 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
34184a28:	b480      	push	{r7}
34184a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34184a2c:	4b05      	ldr	r3, [pc, #20]	@ (34184a44 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34184a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34184a30:	4a04      	ldr	r2, [pc, #16]	@ (34184a44 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34184a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34184a36:	6553      	str	r3, [r2, #84]	@ 0x54
}
34184a38:	bf00      	nop
34184a3a:	46bd      	mov	sp, r7
34184a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a40:	4770      	bx	lr
34184a42:	bf00      	nop
34184a44:	56028000 	.word	0x56028000

34184a48 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
34184a48:	b480      	push	{r7}
34184a4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34184a4c:	4b05      	ldr	r3, [pc, #20]	@ (34184a64 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
34184a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34184a50:	4a04      	ldr	r2, [pc, #16]	@ (34184a64 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
34184a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34184a56:	6553      	str	r3, [r2, #84]	@ 0x54
}
34184a58:	bf00      	nop
34184a5a:	46bd      	mov	sp, r7
34184a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a60:	4770      	bx	lr
34184a62:	bf00      	nop
34184a64:	56028000 	.word	0x56028000

34184a68 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
34184a68:	b480      	push	{r7}
34184a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
34184a6c:	4b06      	ldr	r3, [pc, #24]	@ (34184a88 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
34184a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34184a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34184a74:	2b40      	cmp	r3, #64	@ 0x40
34184a76:	d101      	bne.n	34184a7c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
34184a78:	2301      	movs	r3, #1
34184a7a:	e000      	b.n	34184a7e <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
34184a7c:	2300      	movs	r3, #0
}
34184a7e:	4618      	mov	r0, r3
34184a80:	46bd      	mov	sp, r7
34184a82:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a86:	4770      	bx	lr
34184a88:	56028000 	.word	0x56028000

34184a8c <LL_RCC_HSE_IsReady>:
{
34184a8c:	b480      	push	{r7}
34184a8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34184a90:	4b06      	ldr	r3, [pc, #24]	@ (34184aac <LL_RCC_HSE_IsReady+0x20>)
34184a92:	685b      	ldr	r3, [r3, #4]
34184a94:	f003 0310 	and.w	r3, r3, #16
34184a98:	2b00      	cmp	r3, #0
34184a9a:	d001      	beq.n	34184aa0 <LL_RCC_HSE_IsReady+0x14>
34184a9c:	2301      	movs	r3, #1
34184a9e:	e000      	b.n	34184aa2 <LL_RCC_HSE_IsReady+0x16>
34184aa0:	2300      	movs	r3, #0
}
34184aa2:	4618      	mov	r0, r3
34184aa4:	46bd      	mov	sp, r7
34184aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184aaa:	4770      	bx	lr
34184aac:	56028000 	.word	0x56028000

34184ab0 <LL_RCC_HSI_IsReady>:
{
34184ab0:	b480      	push	{r7}
34184ab2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34184ab4:	4b06      	ldr	r3, [pc, #24]	@ (34184ad0 <LL_RCC_HSI_IsReady+0x20>)
34184ab6:	685b      	ldr	r3, [r3, #4]
34184ab8:	f003 0308 	and.w	r3, r3, #8
34184abc:	2b00      	cmp	r3, #0
34184abe:	d001      	beq.n	34184ac4 <LL_RCC_HSI_IsReady+0x14>
34184ac0:	2301      	movs	r3, #1
34184ac2:	e000      	b.n	34184ac6 <LL_RCC_HSI_IsReady+0x16>
34184ac4:	2300      	movs	r3, #0
}
34184ac6:	4618      	mov	r0, r3
34184ac8:	46bd      	mov	sp, r7
34184aca:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ace:	4770      	bx	lr
34184ad0:	56028000 	.word	0x56028000

34184ad4 <LL_RCC_HSI_GetDivider>:
{
34184ad4:	b480      	push	{r7}
34184ad6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34184ad8:	4b04      	ldr	r3, [pc, #16]	@ (34184aec <LL_RCC_HSI_GetDivider+0x18>)
34184ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34184adc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34184ae0:	4618      	mov	r0, r3
34184ae2:	46bd      	mov	sp, r7
34184ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ae8:	4770      	bx	lr
34184aea:	bf00      	nop
34184aec:	56028000 	.word	0x56028000

34184af0 <LL_RCC_MSI_IsReady>:
{
34184af0:	b480      	push	{r7}
34184af2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34184af4:	4b06      	ldr	r3, [pc, #24]	@ (34184b10 <LL_RCC_MSI_IsReady+0x20>)
34184af6:	685b      	ldr	r3, [r3, #4]
34184af8:	f003 0304 	and.w	r3, r3, #4
34184afc:	2b00      	cmp	r3, #0
34184afe:	d001      	beq.n	34184b04 <LL_RCC_MSI_IsReady+0x14>
34184b00:	2301      	movs	r3, #1
34184b02:	e000      	b.n	34184b06 <LL_RCC_MSI_IsReady+0x16>
34184b04:	2300      	movs	r3, #0
}
34184b06:	4618      	mov	r0, r3
34184b08:	46bd      	mov	sp, r7
34184b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b0e:	4770      	bx	lr
34184b10:	56028000 	.word	0x56028000

34184b14 <LL_RCC_MSI_GetFrequency>:
{
34184b14:	b480      	push	{r7}
34184b16:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34184b18:	4b04      	ldr	r3, [pc, #16]	@ (34184b2c <LL_RCC_MSI_GetFrequency+0x18>)
34184b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34184b1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34184b20:	4618      	mov	r0, r3
34184b22:	46bd      	mov	sp, r7
34184b24:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b28:	4770      	bx	lr
34184b2a:	bf00      	nop
34184b2c:	56028000 	.word	0x56028000

34184b30 <LL_RCC_LSE_IsReady>:
{
34184b30:	b480      	push	{r7}
34184b32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34184b34:	4b06      	ldr	r3, [pc, #24]	@ (34184b50 <LL_RCC_LSE_IsReady+0x20>)
34184b36:	685b      	ldr	r3, [r3, #4]
34184b38:	f003 0302 	and.w	r3, r3, #2
34184b3c:	2b00      	cmp	r3, #0
34184b3e:	d001      	beq.n	34184b44 <LL_RCC_LSE_IsReady+0x14>
34184b40:	2301      	movs	r3, #1
34184b42:	e000      	b.n	34184b46 <LL_RCC_LSE_IsReady+0x16>
34184b44:	2300      	movs	r3, #0
}
34184b46:	4618      	mov	r0, r3
34184b48:	46bd      	mov	sp, r7
34184b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b4e:	4770      	bx	lr
34184b50:	56028000 	.word	0x56028000

34184b54 <LL_RCC_LSI_IsReady>:
{
34184b54:	b480      	push	{r7}
34184b56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34184b58:	4b04      	ldr	r3, [pc, #16]	@ (34184b6c <LL_RCC_LSI_IsReady+0x18>)
34184b5a:	685b      	ldr	r3, [r3, #4]
34184b5c:	f003 0301 	and.w	r3, r3, #1
}
34184b60:	4618      	mov	r0, r3
34184b62:	46bd      	mov	sp, r7
34184b64:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b68:	4770      	bx	lr
34184b6a:	bf00      	nop
34184b6c:	56028000 	.word	0x56028000

34184b70 <LL_RCC_GetAHBPrescaler>:
{
34184b70:	b480      	push	{r7}
34184b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34184b74:	4b04      	ldr	r3, [pc, #16]	@ (34184b88 <LL_RCC_GetAHBPrescaler+0x18>)
34184b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184b78:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
34184b7c:	4618      	mov	r0, r3
34184b7e:	46bd      	mov	sp, r7
34184b80:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b84:	4770      	bx	lr
34184b86:	bf00      	nop
34184b88:	56028000 	.word	0x56028000

34184b8c <LL_RCC_GetAPB1Prescaler>:
{
34184b8c:	b480      	push	{r7}
34184b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34184b90:	4b04      	ldr	r3, [pc, #16]	@ (34184ba4 <LL_RCC_GetAPB1Prescaler+0x18>)
34184b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184b94:	f003 0307 	and.w	r3, r3, #7
}
34184b98:	4618      	mov	r0, r3
34184b9a:	46bd      	mov	sp, r7
34184b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ba0:	4770      	bx	lr
34184ba2:	bf00      	nop
34184ba4:	56028000 	.word	0x56028000

34184ba8 <LL_RCC_GetAPB2Prescaler>:
{
34184ba8:	b480      	push	{r7}
34184baa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34184bac:	4b04      	ldr	r3, [pc, #16]	@ (34184bc0 <LL_RCC_GetAPB2Prescaler+0x18>)
34184bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184bb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34184bb4:	4618      	mov	r0, r3
34184bb6:	46bd      	mov	sp, r7
34184bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
34184bbc:	4770      	bx	lr
34184bbe:	bf00      	nop
34184bc0:	56028000 	.word	0x56028000

34184bc4 <LL_RCC_GetAPB4Prescaler>:
{
34184bc4:	b480      	push	{r7}
34184bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34184bc8:	4b04      	ldr	r3, [pc, #16]	@ (34184bdc <LL_RCC_GetAPB4Prescaler+0x18>)
34184bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184bcc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
34184bd0:	4618      	mov	r0, r3
34184bd2:	46bd      	mov	sp, r7
34184bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184bd8:	4770      	bx	lr
34184bda:	bf00      	nop
34184bdc:	56028000 	.word	0x56028000

34184be0 <LL_RCC_GetAPB5Prescaler>:
{
34184be0:	b480      	push	{r7}
34184be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34184be4:	4b04      	ldr	r3, [pc, #16]	@ (34184bf8 <LL_RCC_GetAPB5Prescaler+0x18>)
34184be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34184be8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34184bec:	4618      	mov	r0, r3
34184bee:	46bd      	mov	sp, r7
34184bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184bf4:	4770      	bx	lr
34184bf6:	bf00      	nop
34184bf8:	56028000 	.word	0x56028000

34184bfc <LL_RCC_SetClockSource>:
{
34184bfc:	b480      	push	{r7}
34184bfe:	b085      	sub	sp, #20
34184c00:	af00      	add	r7, sp, #0
34184c02:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34184c04:	687b      	ldr	r3, [r7, #4]
34184c06:	b2da      	uxtb	r2, r3
34184c08:	4b10      	ldr	r3, [pc, #64]	@ (34184c4c <LL_RCC_SetClockSource+0x50>)
34184c0a:	4413      	add	r3, r2
34184c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34184c0e:	68fb      	ldr	r3, [r7, #12]
34184c10:	681a      	ldr	r2, [r3, #0]
34184c12:	687b      	ldr	r3, [r7, #4]
34184c14:	0e19      	lsrs	r1, r3, #24
34184c16:	687b      	ldr	r3, [r7, #4]
34184c18:	0a1b      	lsrs	r3, r3, #8
34184c1a:	f003 031f 	and.w	r3, r3, #31
34184c1e:	fa01 f303 	lsl.w	r3, r1, r3
34184c22:	43db      	mvns	r3, r3
34184c24:	401a      	ands	r2, r3
34184c26:	687b      	ldr	r3, [r7, #4]
34184c28:	0c1b      	lsrs	r3, r3, #16
34184c2a:	b2d9      	uxtb	r1, r3
34184c2c:	687b      	ldr	r3, [r7, #4]
34184c2e:	0a1b      	lsrs	r3, r3, #8
34184c30:	f003 031f 	and.w	r3, r3, #31
34184c34:	fa01 f303 	lsl.w	r3, r1, r3
34184c38:	431a      	orrs	r2, r3
34184c3a:	68fb      	ldr	r3, [r7, #12]
34184c3c:	601a      	str	r2, [r3, #0]
}
34184c3e:	bf00      	nop
34184c40:	3714      	adds	r7, #20
34184c42:	46bd      	mov	sp, r7
34184c44:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c48:	4770      	bx	lr
34184c4a:	bf00      	nop
34184c4c:	56028144 	.word	0x56028144

34184c50 <LL_RCC_GetADCPrescaler>:
{
34184c50:	b480      	push	{r7}
34184c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
34184c54:	4b04      	ldr	r3, [pc, #16]	@ (34184c68 <LL_RCC_GetADCPrescaler+0x18>)
34184c56:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34184c5a:	0a1b      	lsrs	r3, r3, #8
34184c5c:	b2db      	uxtb	r3, r3
}
34184c5e:	4618      	mov	r0, r3
34184c60:	46bd      	mov	sp, r7
34184c62:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c66:	4770      	bx	lr
34184c68:	56028000 	.word	0x56028000

34184c6c <LL_RCC_SetADFClockSource>:
{
34184c6c:	b480      	push	{r7}
34184c6e:	b083      	sub	sp, #12
34184c70:	af00      	add	r7, sp, #0
34184c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34184c74:	4b07      	ldr	r3, [pc, #28]	@ (34184c94 <LL_RCC_SetADFClockSource+0x28>)
34184c76:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34184c7a:	f023 0207 	bic.w	r2, r3, #7
34184c7e:	4905      	ldr	r1, [pc, #20]	@ (34184c94 <LL_RCC_SetADFClockSource+0x28>)
34184c80:	687b      	ldr	r3, [r7, #4]
34184c82:	4313      	orrs	r3, r2
34184c84:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34184c88:	bf00      	nop
34184c8a:	370c      	adds	r7, #12
34184c8c:	46bd      	mov	sp, r7
34184c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c92:	4770      	bx	lr
34184c94:	56028000 	.word	0x56028000

34184c98 <LL_RCC_SetCLKPClockSource>:
{
34184c98:	b480      	push	{r7}
34184c9a:	b083      	sub	sp, #12
34184c9c:	af00      	add	r7, sp, #0
34184c9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
34184ca0:	4b07      	ldr	r3, [pc, #28]	@ (34184cc0 <LL_RCC_SetCLKPClockSource+0x28>)
34184ca2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34184ca6:	f023 0207 	bic.w	r2, r3, #7
34184caa:	4905      	ldr	r1, [pc, #20]	@ (34184cc0 <LL_RCC_SetCLKPClockSource+0x28>)
34184cac:	687b      	ldr	r3, [r7, #4]
34184cae:	4313      	orrs	r3, r2
34184cb0:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34184cb4:	bf00      	nop
34184cb6:	370c      	adds	r7, #12
34184cb8:	46bd      	mov	sp, r7
34184cba:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cbe:	4770      	bx	lr
34184cc0:	56028000 	.word	0x56028000

34184cc4 <LL_RCC_SetDCMIPPClockSource>:
{
34184cc4:	b480      	push	{r7}
34184cc6:	b083      	sub	sp, #12
34184cc8:	af00      	add	r7, sp, #0
34184cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34184ccc:	4b07      	ldr	r3, [pc, #28]	@ (34184cec <LL_RCC_SetDCMIPPClockSource+0x28>)
34184cce:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34184cd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
34184cd6:	4905      	ldr	r1, [pc, #20]	@ (34184cec <LL_RCC_SetDCMIPPClockSource+0x28>)
34184cd8:	687b      	ldr	r3, [r7, #4]
34184cda:	4313      	orrs	r3, r2
34184cdc:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34184ce0:	bf00      	nop
34184ce2:	370c      	adds	r7, #12
34184ce4:	46bd      	mov	sp, r7
34184ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cea:	4770      	bx	lr
34184cec:	56028000 	.word	0x56028000

34184cf0 <LL_RCC_SetETHClockSource>:
{
34184cf0:	b480      	push	{r7}
34184cf2:	b083      	sub	sp, #12
34184cf4:	af00      	add	r7, sp, #0
34184cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34184cf8:	4b07      	ldr	r3, [pc, #28]	@ (34184d18 <LL_RCC_SetETHClockSource+0x28>)
34184cfa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34184cfe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34184d02:	4905      	ldr	r1, [pc, #20]	@ (34184d18 <LL_RCC_SetETHClockSource+0x28>)
34184d04:	687b      	ldr	r3, [r7, #4]
34184d06:	4313      	orrs	r3, r2
34184d08:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34184d0c:	bf00      	nop
34184d0e:	370c      	adds	r7, #12
34184d10:	46bd      	mov	sp, r7
34184d12:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d16:	4770      	bx	lr
34184d18:	56028000 	.word	0x56028000

34184d1c <LL_RCC_SetETHPHYInterface>:
{
34184d1c:	b480      	push	{r7}
34184d1e:	b083      	sub	sp, #12
34184d20:	af00      	add	r7, sp, #0
34184d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34184d24:	4b07      	ldr	r3, [pc, #28]	@ (34184d44 <LL_RCC_SetETHPHYInterface+0x28>)
34184d26:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34184d2a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34184d2e:	4905      	ldr	r1, [pc, #20]	@ (34184d44 <LL_RCC_SetETHPHYInterface+0x28>)
34184d30:	687b      	ldr	r3, [r7, #4]
34184d32:	4313      	orrs	r3, r2
34184d34:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34184d38:	bf00      	nop
34184d3a:	370c      	adds	r7, #12
34184d3c:	46bd      	mov	sp, r7
34184d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d42:	4770      	bx	lr
34184d44:	56028000 	.word	0x56028000

34184d48 <LL_RCC_GetETH1PTPDivider>:
{
34184d48:	b480      	push	{r7}
34184d4a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34184d4c:	4b04      	ldr	r3, [pc, #16]	@ (34184d60 <LL_RCC_GetETH1PTPDivider+0x18>)
34184d4e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34184d52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
34184d56:	4618      	mov	r0, r3
34184d58:	46bd      	mov	sp, r7
34184d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d5e:	4770      	bx	lr
34184d60:	56028000 	.word	0x56028000

34184d64 <LL_RCC_SetETHREFRXClockSource>:
{
34184d64:	b480      	push	{r7}
34184d66:	b083      	sub	sp, #12
34184d68:	af00      	add	r7, sp, #0
34184d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34184d6c:	4b07      	ldr	r3, [pc, #28]	@ (34184d8c <LL_RCC_SetETHREFRXClockSource+0x28>)
34184d6e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34184d72:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
34184d76:	4905      	ldr	r1, [pc, #20]	@ (34184d8c <LL_RCC_SetETHREFRXClockSource+0x28>)
34184d78:	687b      	ldr	r3, [r7, #4]
34184d7a:	4313      	orrs	r3, r2
34184d7c:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34184d80:	bf00      	nop
34184d82:	370c      	adds	r7, #12
34184d84:	46bd      	mov	sp, r7
34184d86:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d8a:	4770      	bx	lr
34184d8c:	56028000 	.word	0x56028000

34184d90 <LL_RCC_SetETHREFTXClockSource>:
{
34184d90:	b480      	push	{r7}
34184d92:	b083      	sub	sp, #12
34184d94:	af00      	add	r7, sp, #0
34184d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34184d98:	4b07      	ldr	r3, [pc, #28]	@ (34184db8 <LL_RCC_SetETHREFTXClockSource+0x28>)
34184d9a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34184d9e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34184da2:	4905      	ldr	r1, [pc, #20]	@ (34184db8 <LL_RCC_SetETHREFTXClockSource+0x28>)
34184da4:	687b      	ldr	r3, [r7, #4]
34184da6:	4313      	orrs	r3, r2
34184da8:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34184dac:	bf00      	nop
34184dae:	370c      	adds	r7, #12
34184db0:	46bd      	mov	sp, r7
34184db2:	f85d 7b04 	ldr.w	r7, [sp], #4
34184db6:	4770      	bx	lr
34184db8:	56028000 	.word	0x56028000

34184dbc <LL_RCC_SetFDCANClockSource>:
{
34184dbc:	b480      	push	{r7}
34184dbe:	b083      	sub	sp, #12
34184dc0:	af00      	add	r7, sp, #0
34184dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34184dc4:	4b07      	ldr	r3, [pc, #28]	@ (34184de4 <LL_RCC_SetFDCANClockSource+0x28>)
34184dc6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34184dca:	f023 0203 	bic.w	r2, r3, #3
34184dce:	4905      	ldr	r1, [pc, #20]	@ (34184de4 <LL_RCC_SetFDCANClockSource+0x28>)
34184dd0:	687b      	ldr	r3, [r7, #4]
34184dd2:	4313      	orrs	r3, r2
34184dd4:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34184dd8:	bf00      	nop
34184dda:	370c      	adds	r7, #12
34184ddc:	46bd      	mov	sp, r7
34184dde:	f85d 7b04 	ldr.w	r7, [sp], #4
34184de2:	4770      	bx	lr
34184de4:	56028000 	.word	0x56028000

34184de8 <LL_RCC_SetFMCClockSource>:
{
34184de8:	b480      	push	{r7}
34184dea:	b083      	sub	sp, #12
34184dec:	af00      	add	r7, sp, #0
34184dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34184df0:	4b07      	ldr	r3, [pc, #28]	@ (34184e10 <LL_RCC_SetFMCClockSource+0x28>)
34184df2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34184df6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34184dfa:	4905      	ldr	r1, [pc, #20]	@ (34184e10 <LL_RCC_SetFMCClockSource+0x28>)
34184dfc:	687b      	ldr	r3, [r7, #4]
34184dfe:	4313      	orrs	r3, r2
34184e00:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34184e04:	bf00      	nop
34184e06:	370c      	adds	r7, #12
34184e08:	46bd      	mov	sp, r7
34184e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e0e:	4770      	bx	lr
34184e10:	56028000 	.word	0x56028000

34184e14 <LL_RCC_SetI2CClockSource>:
{
34184e14:	b580      	push	{r7, lr}
34184e16:	b082      	sub	sp, #8
34184e18:	af00      	add	r7, sp, #0
34184e1a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184e1c:	6878      	ldr	r0, [r7, #4]
34184e1e:	f7ff feed 	bl	34184bfc <LL_RCC_SetClockSource>
}
34184e22:	bf00      	nop
34184e24:	3708      	adds	r7, #8
34184e26:	46bd      	mov	sp, r7
34184e28:	bd80      	pop	{r7, pc}

34184e2a <LL_RCC_SetI3CClockSource>:
{
34184e2a:	b580      	push	{r7, lr}
34184e2c:	b082      	sub	sp, #8
34184e2e:	af00      	add	r7, sp, #0
34184e30:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184e32:	6878      	ldr	r0, [r7, #4]
34184e34:	f7ff fee2 	bl	34184bfc <LL_RCC_SetClockSource>
}
34184e38:	bf00      	nop
34184e3a:	3708      	adds	r7, #8
34184e3c:	46bd      	mov	sp, r7
34184e3e:	bd80      	pop	{r7, pc}

34184e40 <LL_RCC_SetLPTIMClockSource>:
{
34184e40:	b580      	push	{r7, lr}
34184e42:	b082      	sub	sp, #8
34184e44:	af00      	add	r7, sp, #0
34184e46:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184e48:	6878      	ldr	r0, [r7, #4]
34184e4a:	f7ff fed7 	bl	34184bfc <LL_RCC_SetClockSource>
}
34184e4e:	bf00      	nop
34184e50:	3708      	adds	r7, #8
34184e52:	46bd      	mov	sp, r7
34184e54:	bd80      	pop	{r7, pc}
	...

34184e58 <LL_RCC_SetLPUARTClockSource>:
{
34184e58:	b480      	push	{r7}
34184e5a:	b083      	sub	sp, #12
34184e5c:	af00      	add	r7, sp, #0
34184e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34184e60:	4b07      	ldr	r3, [pc, #28]	@ (34184e80 <LL_RCC_SetLPUARTClockSource+0x28>)
34184e62:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34184e66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
34184e6a:	4905      	ldr	r1, [pc, #20]	@ (34184e80 <LL_RCC_SetLPUARTClockSource+0x28>)
34184e6c:	687b      	ldr	r3, [r7, #4]
34184e6e:	4313      	orrs	r3, r2
34184e70:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
34184e74:	bf00      	nop
34184e76:	370c      	adds	r7, #12
34184e78:	46bd      	mov	sp, r7
34184e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e7e:	4770      	bx	lr
34184e80:	56028000 	.word	0x56028000

34184e84 <LL_RCC_SetLTDCClockSource>:
{
34184e84:	b480      	push	{r7}
34184e86:	b083      	sub	sp, #12
34184e88:	af00      	add	r7, sp, #0
34184e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
34184e8c:	4b07      	ldr	r3, [pc, #28]	@ (34184eac <LL_RCC_SetLTDCClockSource+0x28>)
34184e8e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34184e92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34184e96:	4905      	ldr	r1, [pc, #20]	@ (34184eac <LL_RCC_SetLTDCClockSource+0x28>)
34184e98:	687b      	ldr	r3, [r7, #4]
34184e9a:	4313      	orrs	r3, r2
34184e9c:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
34184ea0:	bf00      	nop
34184ea2:	370c      	adds	r7, #12
34184ea4:	46bd      	mov	sp, r7
34184ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184eaa:	4770      	bx	lr
34184eac:	56028000 	.word	0x56028000

34184eb0 <LL_RCC_SetMDFClockSource>:
{
34184eb0:	b480      	push	{r7}
34184eb2:	b083      	sub	sp, #12
34184eb4:	af00      	add	r7, sp, #0
34184eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34184eb8:	4b07      	ldr	r3, [pc, #28]	@ (34184ed8 <LL_RCC_SetMDFClockSource+0x28>)
34184eba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34184ebe:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34184ec2:	4905      	ldr	r1, [pc, #20]	@ (34184ed8 <LL_RCC_SetMDFClockSource+0x28>)
34184ec4:	687b      	ldr	r3, [r7, #4]
34184ec6:	4313      	orrs	r3, r2
34184ec8:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
34184ecc:	bf00      	nop
34184ece:	370c      	adds	r7, #12
34184ed0:	46bd      	mov	sp, r7
34184ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ed6:	4770      	bx	lr
34184ed8:	56028000 	.word	0x56028000

34184edc <LL_RCC_SetOTGPHYClockSource>:
{
34184edc:	b580      	push	{r7, lr}
34184ede:	b082      	sub	sp, #8
34184ee0:	af00      	add	r7, sp, #0
34184ee2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184ee4:	6878      	ldr	r0, [r7, #4]
34184ee6:	f7ff fe89 	bl	34184bfc <LL_RCC_SetClockSource>
}
34184eea:	bf00      	nop
34184eec:	3708      	adds	r7, #8
34184eee:	46bd      	mov	sp, r7
34184ef0:	bd80      	pop	{r7, pc}

34184ef2 <LL_RCC_SetOTGPHYCKREFClockSource>:
{
34184ef2:	b580      	push	{r7, lr}
34184ef4:	b082      	sub	sp, #8
34184ef6:	af00      	add	r7, sp, #0
34184ef8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184efa:	6878      	ldr	r0, [r7, #4]
34184efc:	f7ff fe7e 	bl	34184bfc <LL_RCC_SetClockSource>
}
34184f00:	bf00      	nop
34184f02:	3708      	adds	r7, #8
34184f04:	46bd      	mov	sp, r7
34184f06:	bd80      	pop	{r7, pc}

34184f08 <LL_RCC_SetPSSIClockSource>:
{
34184f08:	b480      	push	{r7}
34184f0a:	b083      	sub	sp, #12
34184f0c:	af00      	add	r7, sp, #0
34184f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34184f10:	4b07      	ldr	r3, [pc, #28]	@ (34184f30 <LL_RCC_SetPSSIClockSource+0x28>)
34184f12:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34184f16:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34184f1a:	4905      	ldr	r1, [pc, #20]	@ (34184f30 <LL_RCC_SetPSSIClockSource+0x28>)
34184f1c:	687b      	ldr	r3, [r7, #4]
34184f1e:	4313      	orrs	r3, r2
34184f20:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34184f24:	bf00      	nop
34184f26:	370c      	adds	r7, #12
34184f28:	46bd      	mov	sp, r7
34184f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f2e:	4770      	bx	lr
34184f30:	56028000 	.word	0x56028000

34184f34 <LL_RCC_SetSAIClockSource>:
{
34184f34:	b580      	push	{r7, lr}
34184f36:	b082      	sub	sp, #8
34184f38:	af00      	add	r7, sp, #0
34184f3a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184f3c:	6878      	ldr	r0, [r7, #4]
34184f3e:	f7ff fe5d 	bl	34184bfc <LL_RCC_SetClockSource>
}
34184f42:	bf00      	nop
34184f44:	3708      	adds	r7, #8
34184f46:	46bd      	mov	sp, r7
34184f48:	bd80      	pop	{r7, pc}

34184f4a <LL_RCC_SetSDMMCClockSource>:
{
34184f4a:	b580      	push	{r7, lr}
34184f4c:	b082      	sub	sp, #8
34184f4e:	af00      	add	r7, sp, #0
34184f50:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184f52:	6878      	ldr	r0, [r7, #4]
34184f54:	f7ff fe52 	bl	34184bfc <LL_RCC_SetClockSource>
}
34184f58:	bf00      	nop
34184f5a:	3708      	adds	r7, #8
34184f5c:	46bd      	mov	sp, r7
34184f5e:	bd80      	pop	{r7, pc}

34184f60 <LL_RCC_SetSPDIFRXClockSource>:
{
34184f60:	b480      	push	{r7}
34184f62:	b083      	sub	sp, #12
34184f64:	af00      	add	r7, sp, #0
34184f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34184f68:	4b07      	ldr	r3, [pc, #28]	@ (34184f88 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34184f6a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34184f6e:	f023 0207 	bic.w	r2, r3, #7
34184f72:	4905      	ldr	r1, [pc, #20]	@ (34184f88 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34184f74:	687b      	ldr	r3, [r7, #4]
34184f76:	4313      	orrs	r3, r2
34184f78:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
34184f7c:	bf00      	nop
34184f7e:	370c      	adds	r7, #12
34184f80:	46bd      	mov	sp, r7
34184f82:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f86:	4770      	bx	lr
34184f88:	56028000 	.word	0x56028000

34184f8c <LL_RCC_SetSPIClockSource>:
{
34184f8c:	b580      	push	{r7, lr}
34184f8e:	b082      	sub	sp, #8
34184f90:	af00      	add	r7, sp, #0
34184f92:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184f94:	6878      	ldr	r0, [r7, #4]
34184f96:	f7ff fe31 	bl	34184bfc <LL_RCC_SetClockSource>
}
34184f9a:	bf00      	nop
34184f9c:	3708      	adds	r7, #8
34184f9e:	46bd      	mov	sp, r7
34184fa0:	bd80      	pop	{r7, pc}

34184fa2 <LL_RCC_SetUSARTClockSource>:
{
34184fa2:	b580      	push	{r7, lr}
34184fa4:	b082      	sub	sp, #8
34184fa6:	af00      	add	r7, sp, #0
34184fa8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184faa:	6878      	ldr	r0, [r7, #4]
34184fac:	f7ff fe26 	bl	34184bfc <LL_RCC_SetClockSource>
}
34184fb0:	bf00      	nop
34184fb2:	3708      	adds	r7, #8
34184fb4:	46bd      	mov	sp, r7
34184fb6:	bd80      	pop	{r7, pc}

34184fb8 <LL_RCC_SetXSPIClockSource>:
{
34184fb8:	b580      	push	{r7, lr}
34184fba:	b082      	sub	sp, #8
34184fbc:	af00      	add	r7, sp, #0
34184fbe:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34184fc0:	6878      	ldr	r0, [r7, #4]
34184fc2:	f7ff fe1b 	bl	34184bfc <LL_RCC_SetClockSource>
}
34184fc6:	bf00      	nop
34184fc8:	3708      	adds	r7, #8
34184fca:	46bd      	mov	sp, r7
34184fcc:	bd80      	pop	{r7, pc}
	...

34184fd0 <LL_RCC_GetClockSource>:
{
34184fd0:	b480      	push	{r7}
34184fd2:	b085      	sub	sp, #20
34184fd4:	af00      	add	r7, sp, #0
34184fd6:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34184fd8:	687b      	ldr	r3, [r7, #4]
34184fda:	b2da      	uxtb	r2, r3
34184fdc:	4b0e      	ldr	r3, [pc, #56]	@ (34185018 <LL_RCC_GetClockSource+0x48>)
34184fde:	4413      	add	r3, r2
34184fe0:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34184fe2:	68fb      	ldr	r3, [r7, #12]
34184fe4:	681a      	ldr	r2, [r3, #0]
34184fe6:	687b      	ldr	r3, [r7, #4]
34184fe8:	0e19      	lsrs	r1, r3, #24
34184fea:	687b      	ldr	r3, [r7, #4]
34184fec:	0a1b      	lsrs	r3, r3, #8
34184fee:	f003 031f 	and.w	r3, r3, #31
34184ff2:	fa01 f303 	lsl.w	r3, r1, r3
34184ff6:	401a      	ands	r2, r3
34184ff8:	687b      	ldr	r3, [r7, #4]
34184ffa:	0a1b      	lsrs	r3, r3, #8
34184ffc:	f003 031f 	and.w	r3, r3, #31
34185000:	fa22 f303 	lsr.w	r3, r2, r3
34185004:	041a      	lsls	r2, r3, #16
34185006:	687b      	ldr	r3, [r7, #4]
34185008:	4313      	orrs	r3, r2
}
3418500a:	4618      	mov	r0, r3
3418500c:	3714      	adds	r7, #20
3418500e:	46bd      	mov	sp, r7
34185010:	f85d 7b04 	ldr.w	r7, [sp], #4
34185014:	4770      	bx	lr
34185016:	bf00      	nop
34185018:	56028144 	.word	0x56028144

3418501c <LL_RCC_GetADCClockSource>:
{
3418501c:	b480      	push	{r7}
3418501e:	b083      	sub	sp, #12
34185020:	af00      	add	r7, sp, #0
34185022:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34185024:	4b05      	ldr	r3, [pc, #20]	@ (3418503c <LL_RCC_GetADCClockSource+0x20>)
34185026:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418502a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
3418502e:	4618      	mov	r0, r3
34185030:	370c      	adds	r7, #12
34185032:	46bd      	mov	sp, r7
34185034:	f85d 7b04 	ldr.w	r7, [sp], #4
34185038:	4770      	bx	lr
3418503a:	bf00      	nop
3418503c:	56028000 	.word	0x56028000

34185040 <LL_RCC_GetADFClockSource>:
{
34185040:	b480      	push	{r7}
34185042:	b083      	sub	sp, #12
34185044:	af00      	add	r7, sp, #0
34185046:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34185048:	4b05      	ldr	r3, [pc, #20]	@ (34185060 <LL_RCC_GetADFClockSource+0x20>)
3418504a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418504e:	f003 0307 	and.w	r3, r3, #7
}
34185052:	4618      	mov	r0, r3
34185054:	370c      	adds	r7, #12
34185056:	46bd      	mov	sp, r7
34185058:	f85d 7b04 	ldr.w	r7, [sp], #4
3418505c:	4770      	bx	lr
3418505e:	bf00      	nop
34185060:	56028000 	.word	0x56028000

34185064 <LL_RCC_GetCLKPClockSource>:
{
34185064:	b480      	push	{r7}
34185066:	b083      	sub	sp, #12
34185068:	af00      	add	r7, sp, #0
3418506a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
3418506c:	4b05      	ldr	r3, [pc, #20]	@ (34185084 <LL_RCC_GetCLKPClockSource+0x20>)
3418506e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34185072:	f003 0307 	and.w	r3, r3, #7
}
34185076:	4618      	mov	r0, r3
34185078:	370c      	adds	r7, #12
3418507a:	46bd      	mov	sp, r7
3418507c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185080:	4770      	bx	lr
34185082:	bf00      	nop
34185084:	56028000 	.word	0x56028000

34185088 <LL_RCC_GetDCMIPPClockSource>:
{
34185088:	b480      	push	{r7}
3418508a:	b083      	sub	sp, #12
3418508c:	af00      	add	r7, sp, #0
3418508e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34185090:	4b05      	ldr	r3, [pc, #20]	@ (341850a8 <LL_RCC_GetDCMIPPClockSource+0x20>)
34185092:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34185096:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
3418509a:	4618      	mov	r0, r3
3418509c:	370c      	adds	r7, #12
3418509e:	46bd      	mov	sp, r7
341850a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341850a4:	4770      	bx	lr
341850a6:	bf00      	nop
341850a8:	56028000 	.word	0x56028000

341850ac <LL_RCC_GetETHClockSource>:
{
341850ac:	b480      	push	{r7}
341850ae:	b083      	sub	sp, #12
341850b0:	af00      	add	r7, sp, #0
341850b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
341850b4:	4b05      	ldr	r3, [pc, #20]	@ (341850cc <LL_RCC_GetETHClockSource+0x20>)
341850b6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341850ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
341850be:	4618      	mov	r0, r3
341850c0:	370c      	adds	r7, #12
341850c2:	46bd      	mov	sp, r7
341850c4:	f85d 7b04 	ldr.w	r7, [sp], #4
341850c8:	4770      	bx	lr
341850ca:	bf00      	nop
341850cc:	56028000 	.word	0x56028000

341850d0 <LL_RCC_GetETHPTPClockSource>:
{
341850d0:	b480      	push	{r7}
341850d2:	b083      	sub	sp, #12
341850d4:	af00      	add	r7, sp, #0
341850d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
341850d8:	4b05      	ldr	r3, [pc, #20]	@ (341850f0 <LL_RCC_GetETHPTPClockSource+0x20>)
341850da:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341850de:	f003 0303 	and.w	r3, r3, #3
}
341850e2:	4618      	mov	r0, r3
341850e4:	370c      	adds	r7, #12
341850e6:	46bd      	mov	sp, r7
341850e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341850ec:	4770      	bx	lr
341850ee:	bf00      	nop
341850f0:	56028000 	.word	0x56028000

341850f4 <LL_RCC_GetFDCANClockSource>:
{
341850f4:	b480      	push	{r7}
341850f6:	b083      	sub	sp, #12
341850f8:	af00      	add	r7, sp, #0
341850fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
341850fc:	4b05      	ldr	r3, [pc, #20]	@ (34185114 <LL_RCC_GetFDCANClockSource+0x20>)
341850fe:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34185102:	f003 0303 	and.w	r3, r3, #3
}
34185106:	4618      	mov	r0, r3
34185108:	370c      	adds	r7, #12
3418510a:	46bd      	mov	sp, r7
3418510c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185110:	4770      	bx	lr
34185112:	bf00      	nop
34185114:	56028000 	.word	0x56028000

34185118 <LL_RCC_GetFMCClockSource>:
{
34185118:	b480      	push	{r7}
3418511a:	b083      	sub	sp, #12
3418511c:	af00      	add	r7, sp, #0
3418511e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34185120:	4b05      	ldr	r3, [pc, #20]	@ (34185138 <LL_RCC_GetFMCClockSource+0x20>)
34185122:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34185126:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
3418512a:	4618      	mov	r0, r3
3418512c:	370c      	adds	r7, #12
3418512e:	46bd      	mov	sp, r7
34185130:	f85d 7b04 	ldr.w	r7, [sp], #4
34185134:	4770      	bx	lr
34185136:	bf00      	nop
34185138:	56028000 	.word	0x56028000

3418513c <LL_RCC_GetI2CClockSource>:
{
3418513c:	b580      	push	{r7, lr}
3418513e:	b082      	sub	sp, #8
34185140:	af00      	add	r7, sp, #0
34185142:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34185144:	6878      	ldr	r0, [r7, #4]
34185146:	f7ff ff43 	bl	34184fd0 <LL_RCC_GetClockSource>
3418514a:	4603      	mov	r3, r0
}
3418514c:	4618      	mov	r0, r3
3418514e:	3708      	adds	r7, #8
34185150:	46bd      	mov	sp, r7
34185152:	bd80      	pop	{r7, pc}

34185154 <LL_RCC_GetI3CClockSource>:
{
34185154:	b580      	push	{r7, lr}
34185156:	b082      	sub	sp, #8
34185158:	af00      	add	r7, sp, #0
3418515a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418515c:	6878      	ldr	r0, [r7, #4]
3418515e:	f7ff ff37 	bl	34184fd0 <LL_RCC_GetClockSource>
34185162:	4603      	mov	r3, r0
}
34185164:	4618      	mov	r0, r3
34185166:	3708      	adds	r7, #8
34185168:	46bd      	mov	sp, r7
3418516a:	bd80      	pop	{r7, pc}

3418516c <LL_RCC_GetLPTIMClockSource>:
{
3418516c:	b580      	push	{r7, lr}
3418516e:	b082      	sub	sp, #8
34185170:	af00      	add	r7, sp, #0
34185172:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34185174:	6878      	ldr	r0, [r7, #4]
34185176:	f7ff ff2b 	bl	34184fd0 <LL_RCC_GetClockSource>
3418517a:	4603      	mov	r3, r0
}
3418517c:	4618      	mov	r0, r3
3418517e:	3708      	adds	r7, #8
34185180:	46bd      	mov	sp, r7
34185182:	bd80      	pop	{r7, pc}

34185184 <LL_RCC_GetLPUARTClockSource>:
{
34185184:	b480      	push	{r7}
34185186:	b083      	sub	sp, #12
34185188:	af00      	add	r7, sp, #0
3418518a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
3418518c:	4b05      	ldr	r3, [pc, #20]	@ (341851a4 <LL_RCC_GetLPUARTClockSource+0x20>)
3418518e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34185192:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
34185196:	4618      	mov	r0, r3
34185198:	370c      	adds	r7, #12
3418519a:	46bd      	mov	sp, r7
3418519c:	f85d 7b04 	ldr.w	r7, [sp], #4
341851a0:	4770      	bx	lr
341851a2:	bf00      	nop
341851a4:	56028000 	.word	0x56028000

341851a8 <LL_RCC_GetLTDCClockSource>:
{
341851a8:	b480      	push	{r7}
341851aa:	b083      	sub	sp, #12
341851ac:	af00      	add	r7, sp, #0
341851ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
341851b0:	4b05      	ldr	r3, [pc, #20]	@ (341851c8 <LL_RCC_GetLTDCClockSource+0x20>)
341851b2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
341851b6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
341851ba:	4618      	mov	r0, r3
341851bc:	370c      	adds	r7, #12
341851be:	46bd      	mov	sp, r7
341851c0:	f85d 7b04 	ldr.w	r7, [sp], #4
341851c4:	4770      	bx	lr
341851c6:	bf00      	nop
341851c8:	56028000 	.word	0x56028000

341851cc <LL_RCC_GetMDFClockSource>:
{
341851cc:	b480      	push	{r7}
341851ce:	b083      	sub	sp, #12
341851d0:	af00      	add	r7, sp, #0
341851d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
341851d4:	4b05      	ldr	r3, [pc, #20]	@ (341851ec <LL_RCC_GetMDFClockSource+0x20>)
341851d6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
341851da:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
341851de:	4618      	mov	r0, r3
341851e0:	370c      	adds	r7, #12
341851e2:	46bd      	mov	sp, r7
341851e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341851e8:	4770      	bx	lr
341851ea:	bf00      	nop
341851ec:	56028000 	.word	0x56028000

341851f0 <LL_RCC_GetPSSIClockSource>:
{
341851f0:	b480      	push	{r7}
341851f2:	b083      	sub	sp, #12
341851f4:	af00      	add	r7, sp, #0
341851f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
341851f8:	4b05      	ldr	r3, [pc, #20]	@ (34185210 <LL_RCC_GetPSSIClockSource+0x20>)
341851fa:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
341851fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34185202:	4618      	mov	r0, r3
34185204:	370c      	adds	r7, #12
34185206:	46bd      	mov	sp, r7
34185208:	f85d 7b04 	ldr.w	r7, [sp], #4
3418520c:	4770      	bx	lr
3418520e:	bf00      	nop
34185210:	56028000 	.word	0x56028000

34185214 <LL_RCC_GetSAIClockSource>:
{
34185214:	b580      	push	{r7, lr}
34185216:	b082      	sub	sp, #8
34185218:	af00      	add	r7, sp, #0
3418521a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418521c:	6878      	ldr	r0, [r7, #4]
3418521e:	f7ff fed7 	bl	34184fd0 <LL_RCC_GetClockSource>
34185222:	4603      	mov	r3, r0
}
34185224:	4618      	mov	r0, r3
34185226:	3708      	adds	r7, #8
34185228:	46bd      	mov	sp, r7
3418522a:	bd80      	pop	{r7, pc}

3418522c <LL_RCC_GetSDMMCClockSource>:
{
3418522c:	b580      	push	{r7, lr}
3418522e:	b082      	sub	sp, #8
34185230:	af00      	add	r7, sp, #0
34185232:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34185234:	6878      	ldr	r0, [r7, #4]
34185236:	f7ff fecb 	bl	34184fd0 <LL_RCC_GetClockSource>
3418523a:	4603      	mov	r3, r0
}
3418523c:	4618      	mov	r0, r3
3418523e:	3708      	adds	r7, #8
34185240:	46bd      	mov	sp, r7
34185242:	bd80      	pop	{r7, pc}

34185244 <LL_RCC_GetSPDIFRXClockSource>:
{
34185244:	b480      	push	{r7}
34185246:	b083      	sub	sp, #12
34185248:	af00      	add	r7, sp, #0
3418524a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
3418524c:	4b05      	ldr	r3, [pc, #20]	@ (34185264 <LL_RCC_GetSPDIFRXClockSource+0x20>)
3418524e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34185252:	f003 0307 	and.w	r3, r3, #7
}
34185256:	4618      	mov	r0, r3
34185258:	370c      	adds	r7, #12
3418525a:	46bd      	mov	sp, r7
3418525c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185260:	4770      	bx	lr
34185262:	bf00      	nop
34185264:	56028000 	.word	0x56028000

34185268 <LL_RCC_GetSPIClockSource>:
{
34185268:	b580      	push	{r7, lr}
3418526a:	b082      	sub	sp, #8
3418526c:	af00      	add	r7, sp, #0
3418526e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34185270:	6878      	ldr	r0, [r7, #4]
34185272:	f7ff fead 	bl	34184fd0 <LL_RCC_GetClockSource>
34185276:	4603      	mov	r3, r0
}
34185278:	4618      	mov	r0, r3
3418527a:	3708      	adds	r7, #8
3418527c:	46bd      	mov	sp, r7
3418527e:	bd80      	pop	{r7, pc}

34185280 <LL_RCC_GetUSARTClockSource>:
{
34185280:	b580      	push	{r7, lr}
34185282:	b082      	sub	sp, #8
34185284:	af00      	add	r7, sp, #0
34185286:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34185288:	6878      	ldr	r0, [r7, #4]
3418528a:	f7ff fea1 	bl	34184fd0 <LL_RCC_GetClockSource>
3418528e:	4603      	mov	r3, r0
}
34185290:	4618      	mov	r0, r3
34185292:	3708      	adds	r7, #8
34185294:	46bd      	mov	sp, r7
34185296:	bd80      	pop	{r7, pc}

34185298 <LL_RCC_GetUARTClockSource>:
{
34185298:	b580      	push	{r7, lr}
3418529a:	b082      	sub	sp, #8
3418529c:	af00      	add	r7, sp, #0
3418529e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341852a0:	6878      	ldr	r0, [r7, #4]
341852a2:	f7ff fe95 	bl	34184fd0 <LL_RCC_GetClockSource>
341852a6:	4603      	mov	r3, r0
}
341852a8:	4618      	mov	r0, r3
341852aa:	3708      	adds	r7, #8
341852ac:	46bd      	mov	sp, r7
341852ae:	bd80      	pop	{r7, pc}

341852b0 <LL_RCC_GetUSBClockSource>:
{
341852b0:	b580      	push	{r7, lr}
341852b2:	b082      	sub	sp, #8
341852b4:	af00      	add	r7, sp, #0
341852b6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341852b8:	6878      	ldr	r0, [r7, #4]
341852ba:	f7ff fe89 	bl	34184fd0 <LL_RCC_GetClockSource>
341852be:	4603      	mov	r3, r0
}
341852c0:	4618      	mov	r0, r3
341852c2:	3708      	adds	r7, #8
341852c4:	46bd      	mov	sp, r7
341852c6:	bd80      	pop	{r7, pc}

341852c8 <LL_RCC_GetXSPIClockSource>:
{
341852c8:	b580      	push	{r7, lr}
341852ca:	b082      	sub	sp, #8
341852cc:	af00      	add	r7, sp, #0
341852ce:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341852d0:	6878      	ldr	r0, [r7, #4]
341852d2:	f7ff fe7d 	bl	34184fd0 <LL_RCC_GetClockSource>
341852d6:	4603      	mov	r3, r0
}
341852d8:	4618      	mov	r0, r3
341852da:	3708      	adds	r7, #8
341852dc:	46bd      	mov	sp, r7
341852de:	bd80      	pop	{r7, pc}

341852e0 <LL_RCC_SetRTCClockSource>:
{
341852e0:	b480      	push	{r7}
341852e2:	b083      	sub	sp, #12
341852e4:	af00      	add	r7, sp, #0
341852e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
341852e8:	4b07      	ldr	r3, [pc, #28]	@ (34185308 <LL_RCC_SetRTCClockSource+0x28>)
341852ea:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
341852ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
341852f2:	4905      	ldr	r1, [pc, #20]	@ (34185308 <LL_RCC_SetRTCClockSource+0x28>)
341852f4:	687b      	ldr	r3, [r7, #4]
341852f6:	4313      	orrs	r3, r2
341852f8:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
341852fc:	bf00      	nop
341852fe:	370c      	adds	r7, #12
34185300:	46bd      	mov	sp, r7
34185302:	f85d 7b04 	ldr.w	r7, [sp], #4
34185306:	4770      	bx	lr
34185308:	56028000 	.word	0x56028000

3418530c <LL_RCC_GetRTCClockSource>:
{
3418530c:	b480      	push	{r7}
3418530e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34185310:	4b04      	ldr	r3, [pc, #16]	@ (34185324 <LL_RCC_GetRTCClockSource+0x18>)
34185312:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34185316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
3418531a:	4618      	mov	r0, r3
3418531c:	46bd      	mov	sp, r7
3418531e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185322:	4770      	bx	lr
34185324:	56028000 	.word	0x56028000

34185328 <LL_RCC_SetRTC_HSEPrescaler>:
{
34185328:	b480      	push	{r7}
3418532a:	b083      	sub	sp, #12
3418532c:	af00      	add	r7, sp, #0
3418532e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34185330:	4b07      	ldr	r3, [pc, #28]	@ (34185350 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34185332:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34185336:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
3418533a:	4905      	ldr	r1, [pc, #20]	@ (34185350 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
3418533c:	687b      	ldr	r3, [r7, #4]
3418533e:	4313      	orrs	r3, r2
34185340:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34185344:	bf00      	nop
34185346:	370c      	adds	r7, #12
34185348:	46bd      	mov	sp, r7
3418534a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418534e:	4770      	bx	lr
34185350:	56028000 	.word	0x56028000

34185354 <LL_RCC_SetTIMPrescaler>:
{
34185354:	b480      	push	{r7}
34185356:	b083      	sub	sp, #12
34185358:	af00      	add	r7, sp, #0
3418535a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
3418535c:	4b07      	ldr	r3, [pc, #28]	@ (3418537c <LL_RCC_SetTIMPrescaler+0x28>)
3418535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185360:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34185364:	687b      	ldr	r3, [r7, #4]
34185366:	061b      	lsls	r3, r3, #24
34185368:	4904      	ldr	r1, [pc, #16]	@ (3418537c <LL_RCC_SetTIMPrescaler+0x28>)
3418536a:	4313      	orrs	r3, r2
3418536c:	624b      	str	r3, [r1, #36]	@ 0x24
}
3418536e:	bf00      	nop
34185370:	370c      	adds	r7, #12
34185372:	46bd      	mov	sp, r7
34185374:	f85d 7b04 	ldr.w	r7, [sp], #4
34185378:	4770      	bx	lr
3418537a:	bf00      	nop
3418537c:	56028000 	.word	0x56028000

34185380 <LL_RCC_GetTIMPrescaler>:
{
34185380:	b480      	push	{r7}
34185382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34185384:	4b04      	ldr	r3, [pc, #16]	@ (34185398 <LL_RCC_GetTIMPrescaler+0x18>)
34185386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185388:	0e1b      	lsrs	r3, r3, #24
3418538a:	f003 0303 	and.w	r3, r3, #3
}
3418538e:	4618      	mov	r0, r3
34185390:	46bd      	mov	sp, r7
34185392:	f85d 7b04 	ldr.w	r7, [sp], #4
34185396:	4770      	bx	lr
34185398:	56028000 	.word	0x56028000

3418539c <LL_RCC_PLL1_GetSource>:
{
3418539c:	b480      	push	{r7}
3418539e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
341853a0:	4b04      	ldr	r3, [pc, #16]	@ (341853b4 <LL_RCC_PLL1_GetSource+0x18>)
341853a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341853a6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341853aa:	4618      	mov	r0, r3
341853ac:	46bd      	mov	sp, r7
341853ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341853b2:	4770      	bx	lr
341853b4:	56028000 	.word	0x56028000

341853b8 <LL_RCC_PLL1_IsReady>:
{
341853b8:	b480      	push	{r7}
341853ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
341853bc:	4b07      	ldr	r3, [pc, #28]	@ (341853dc <LL_RCC_PLL1_IsReady+0x24>)
341853be:	685b      	ldr	r3, [r3, #4]
341853c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341853c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341853c8:	d101      	bne.n	341853ce <LL_RCC_PLL1_IsReady+0x16>
341853ca:	2301      	movs	r3, #1
341853cc:	e000      	b.n	341853d0 <LL_RCC_PLL1_IsReady+0x18>
341853ce:	2300      	movs	r3, #0
}
341853d0:	4618      	mov	r0, r3
341853d2:	46bd      	mov	sp, r7
341853d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341853d8:	4770      	bx	lr
341853da:	bf00      	nop
341853dc:	56028000 	.word	0x56028000

341853e0 <LL_RCC_PLL1_IsEnabledBypass>:
{
341853e0:	b480      	push	{r7}
341853e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
341853e4:	4b07      	ldr	r3, [pc, #28]	@ (34185404 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
341853e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341853ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341853ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341853f2:	d101      	bne.n	341853f8 <LL_RCC_PLL1_IsEnabledBypass+0x18>
341853f4:	2301      	movs	r3, #1
341853f6:	e000      	b.n	341853fa <LL_RCC_PLL1_IsEnabledBypass+0x1a>
341853f8:	2300      	movs	r3, #0
}
341853fa:	4618      	mov	r0, r3
341853fc:	46bd      	mov	sp, r7
341853fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34185402:	4770      	bx	lr
34185404:	56028000 	.word	0x56028000

34185408 <LL_RCC_PLL1_GetN>:
{
34185408:	b480      	push	{r7}
3418540a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
3418540c:	4b05      	ldr	r3, [pc, #20]	@ (34185424 <LL_RCC_PLL1_GetN+0x1c>)
3418540e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185412:	0a1b      	lsrs	r3, r3, #8
34185414:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34185418:	4618      	mov	r0, r3
3418541a:	46bd      	mov	sp, r7
3418541c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185420:	4770      	bx	lr
34185422:	bf00      	nop
34185424:	56028000 	.word	0x56028000

34185428 <LL_RCC_PLL1_GetM>:
{
34185428:	b480      	push	{r7}
3418542a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
3418542c:	4b05      	ldr	r3, [pc, #20]	@ (34185444 <LL_RCC_PLL1_GetM+0x1c>)
3418542e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34185432:	0d1b      	lsrs	r3, r3, #20
34185434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34185438:	4618      	mov	r0, r3
3418543a:	46bd      	mov	sp, r7
3418543c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185440:	4770      	bx	lr
34185442:	bf00      	nop
34185444:	56028000 	.word	0x56028000

34185448 <LL_RCC_PLL1_GetP1>:
{
34185448:	b480      	push	{r7}
3418544a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
3418544c:	4b05      	ldr	r3, [pc, #20]	@ (34185464 <LL_RCC_PLL1_GetP1+0x1c>)
3418544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34185452:	0edb      	lsrs	r3, r3, #27
34185454:	f003 0307 	and.w	r3, r3, #7
}
34185458:	4618      	mov	r0, r3
3418545a:	46bd      	mov	sp, r7
3418545c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185460:	4770      	bx	lr
34185462:	bf00      	nop
34185464:	56028000 	.word	0x56028000

34185468 <LL_RCC_PLL1_GetP2>:
{
34185468:	b480      	push	{r7}
3418546a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
3418546c:	4b05      	ldr	r3, [pc, #20]	@ (34185484 <LL_RCC_PLL1_GetP2+0x1c>)
3418546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34185472:	0e1b      	lsrs	r3, r3, #24
34185474:	f003 0307 	and.w	r3, r3, #7
}
34185478:	4618      	mov	r0, r3
3418547a:	46bd      	mov	sp, r7
3418547c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185480:	4770      	bx	lr
34185482:	bf00      	nop
34185484:	56028000 	.word	0x56028000

34185488 <LL_RCC_PLL1P_IsEnabled>:
{
34185488:	b480      	push	{r7}
3418548a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
3418548c:	4b07      	ldr	r3, [pc, #28]	@ (341854ac <LL_RCC_PLL1P_IsEnabled+0x24>)
3418548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34185492:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34185496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418549a:	d101      	bne.n	341854a0 <LL_RCC_PLL1P_IsEnabled+0x18>
3418549c:	2301      	movs	r3, #1
3418549e:	e000      	b.n	341854a2 <LL_RCC_PLL1P_IsEnabled+0x1a>
341854a0:	2300      	movs	r3, #0
}
341854a2:	4618      	mov	r0, r3
341854a4:	46bd      	mov	sp, r7
341854a6:	f85d 7b04 	ldr.w	r7, [sp], #4
341854aa:	4770      	bx	lr
341854ac:	56028000 	.word	0x56028000

341854b0 <LL_RCC_PLL1_GetFRACN>:
{
341854b0:	b480      	push	{r7}
341854b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
341854b4:	4b04      	ldr	r3, [pc, #16]	@ (341854c8 <LL_RCC_PLL1_GetFRACN+0x18>)
341854b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
341854ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
341854be:	4618      	mov	r0, r3
341854c0:	46bd      	mov	sp, r7
341854c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341854c6:	4770      	bx	lr
341854c8:	56028000 	.word	0x56028000

341854cc <LL_RCC_PLL2_GetSource>:
{
341854cc:	b480      	push	{r7}
341854ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
341854d0:	4b04      	ldr	r3, [pc, #16]	@ (341854e4 <LL_RCC_PLL2_GetSource+0x18>)
341854d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341854d6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341854da:	4618      	mov	r0, r3
341854dc:	46bd      	mov	sp, r7
341854de:	f85d 7b04 	ldr.w	r7, [sp], #4
341854e2:	4770      	bx	lr
341854e4:	56028000 	.word	0x56028000

341854e8 <LL_RCC_PLL2_IsReady>:
{
341854e8:	b480      	push	{r7}
341854ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
341854ec:	4b07      	ldr	r3, [pc, #28]	@ (3418550c <LL_RCC_PLL2_IsReady+0x24>)
341854ee:	685b      	ldr	r3, [r3, #4]
341854f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341854f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341854f8:	d101      	bne.n	341854fe <LL_RCC_PLL2_IsReady+0x16>
341854fa:	2301      	movs	r3, #1
341854fc:	e000      	b.n	34185500 <LL_RCC_PLL2_IsReady+0x18>
341854fe:	2300      	movs	r3, #0
}
34185500:	4618      	mov	r0, r3
34185502:	46bd      	mov	sp, r7
34185504:	f85d 7b04 	ldr.w	r7, [sp], #4
34185508:	4770      	bx	lr
3418550a:	bf00      	nop
3418550c:	56028000 	.word	0x56028000

34185510 <LL_RCC_PLL2_IsEnabledBypass>:
{
34185510:	b480      	push	{r7}
34185512:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34185514:	4b07      	ldr	r3, [pc, #28]	@ (34185534 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34185516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418551a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418551e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34185522:	d101      	bne.n	34185528 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34185524:	2301      	movs	r3, #1
34185526:	e000      	b.n	3418552a <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34185528:	2300      	movs	r3, #0
}
3418552a:	4618      	mov	r0, r3
3418552c:	46bd      	mov	sp, r7
3418552e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185532:	4770      	bx	lr
34185534:	56028000 	.word	0x56028000

34185538 <LL_RCC_PLL2_GetN>:
{
34185538:	b480      	push	{r7}
3418553a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
3418553c:	4b05      	ldr	r3, [pc, #20]	@ (34185554 <LL_RCC_PLL2_GetN+0x1c>)
3418553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34185542:	0a1b      	lsrs	r3, r3, #8
34185544:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34185548:	4618      	mov	r0, r3
3418554a:	46bd      	mov	sp, r7
3418554c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185550:	4770      	bx	lr
34185552:	bf00      	nop
34185554:	56028000 	.word	0x56028000

34185558 <LL_RCC_PLL2_GetM>:
{
34185558:	b480      	push	{r7}
3418555a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
3418555c:	4b05      	ldr	r3, [pc, #20]	@ (34185574 <LL_RCC_PLL2_GetM+0x1c>)
3418555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34185562:	0d1b      	lsrs	r3, r3, #20
34185564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34185568:	4618      	mov	r0, r3
3418556a:	46bd      	mov	sp, r7
3418556c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185570:	4770      	bx	lr
34185572:	bf00      	nop
34185574:	56028000 	.word	0x56028000

34185578 <LL_RCC_PLL2_GetP1>:
{
34185578:	b480      	push	{r7}
3418557a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
3418557c:	4b05      	ldr	r3, [pc, #20]	@ (34185594 <LL_RCC_PLL2_GetP1+0x1c>)
3418557e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34185582:	0edb      	lsrs	r3, r3, #27
34185584:	f003 0307 	and.w	r3, r3, #7
}
34185588:	4618      	mov	r0, r3
3418558a:	46bd      	mov	sp, r7
3418558c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185590:	4770      	bx	lr
34185592:	bf00      	nop
34185594:	56028000 	.word	0x56028000

34185598 <LL_RCC_PLL2_GetP2>:
{
34185598:	b480      	push	{r7}
3418559a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
3418559c:	4b05      	ldr	r3, [pc, #20]	@ (341855b4 <LL_RCC_PLL2_GetP2+0x1c>)
3418559e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
341855a2:	0e1b      	lsrs	r3, r3, #24
341855a4:	f003 0307 	and.w	r3, r3, #7
}
341855a8:	4618      	mov	r0, r3
341855aa:	46bd      	mov	sp, r7
341855ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341855b0:	4770      	bx	lr
341855b2:	bf00      	nop
341855b4:	56028000 	.word	0x56028000

341855b8 <LL_RCC_PLL2P_IsEnabled>:
{
341855b8:	b480      	push	{r7}
341855ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
341855bc:	4b07      	ldr	r3, [pc, #28]	@ (341855dc <LL_RCC_PLL2P_IsEnabled+0x24>)
341855be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
341855c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
341855c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
341855ca:	d101      	bne.n	341855d0 <LL_RCC_PLL2P_IsEnabled+0x18>
341855cc:	2301      	movs	r3, #1
341855ce:	e000      	b.n	341855d2 <LL_RCC_PLL2P_IsEnabled+0x1a>
341855d0:	2300      	movs	r3, #0
}
341855d2:	4618      	mov	r0, r3
341855d4:	46bd      	mov	sp, r7
341855d6:	f85d 7b04 	ldr.w	r7, [sp], #4
341855da:	4770      	bx	lr
341855dc:	56028000 	.word	0x56028000

341855e0 <LL_RCC_PLL2_GetFRACN>:
{
341855e0:	b480      	push	{r7}
341855e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
341855e4:	4b04      	ldr	r3, [pc, #16]	@ (341855f8 <LL_RCC_PLL2_GetFRACN+0x18>)
341855e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341855ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
341855ee:	4618      	mov	r0, r3
341855f0:	46bd      	mov	sp, r7
341855f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341855f6:	4770      	bx	lr
341855f8:	56028000 	.word	0x56028000

341855fc <LL_RCC_PLL3_GetSource>:
{
341855fc:	b480      	push	{r7}
341855fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34185600:	4b04      	ldr	r3, [pc, #16]	@ (34185614 <LL_RCC_PLL3_GetSource+0x18>)
34185602:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34185606:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418560a:	4618      	mov	r0, r3
3418560c:	46bd      	mov	sp, r7
3418560e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185612:	4770      	bx	lr
34185614:	56028000 	.word	0x56028000

34185618 <LL_RCC_PLL3_IsReady>:
{
34185618:	b480      	push	{r7}
3418561a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418561c:	4b07      	ldr	r3, [pc, #28]	@ (3418563c <LL_RCC_PLL3_IsReady+0x24>)
3418561e:	685b      	ldr	r3, [r3, #4]
34185620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34185624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34185628:	d101      	bne.n	3418562e <LL_RCC_PLL3_IsReady+0x16>
3418562a:	2301      	movs	r3, #1
3418562c:	e000      	b.n	34185630 <LL_RCC_PLL3_IsReady+0x18>
3418562e:	2300      	movs	r3, #0
}
34185630:	4618      	mov	r0, r3
34185632:	46bd      	mov	sp, r7
34185634:	f85d 7b04 	ldr.w	r7, [sp], #4
34185638:	4770      	bx	lr
3418563a:	bf00      	nop
3418563c:	56028000 	.word	0x56028000

34185640 <LL_RCC_PLL3_IsEnabledBypass>:
{
34185640:	b480      	push	{r7}
34185642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34185644:	4b07      	ldr	r3, [pc, #28]	@ (34185664 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34185646:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418564a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418564e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34185652:	d101      	bne.n	34185658 <LL_RCC_PLL3_IsEnabledBypass+0x18>
34185654:	2301      	movs	r3, #1
34185656:	e000      	b.n	3418565a <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34185658:	2300      	movs	r3, #0
}
3418565a:	4618      	mov	r0, r3
3418565c:	46bd      	mov	sp, r7
3418565e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185662:	4770      	bx	lr
34185664:	56028000 	.word	0x56028000

34185668 <LL_RCC_PLL3_GetN>:
{
34185668:	b480      	push	{r7}
3418566a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
3418566c:	4b05      	ldr	r3, [pc, #20]	@ (34185684 <LL_RCC_PLL3_GetN+0x1c>)
3418566e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34185672:	0a1b      	lsrs	r3, r3, #8
34185674:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34185678:	4618      	mov	r0, r3
3418567a:	46bd      	mov	sp, r7
3418567c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185680:	4770      	bx	lr
34185682:	bf00      	nop
34185684:	56028000 	.word	0x56028000

34185688 <LL_RCC_PLL3_GetM>:
{
34185688:	b480      	push	{r7}
3418568a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
3418568c:	4b05      	ldr	r3, [pc, #20]	@ (341856a4 <LL_RCC_PLL3_GetM+0x1c>)
3418568e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34185692:	0d1b      	lsrs	r3, r3, #20
34185694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34185698:	4618      	mov	r0, r3
3418569a:	46bd      	mov	sp, r7
3418569c:	f85d 7b04 	ldr.w	r7, [sp], #4
341856a0:	4770      	bx	lr
341856a2:	bf00      	nop
341856a4:	56028000 	.word	0x56028000

341856a8 <LL_RCC_PLL3_GetP1>:
{
341856a8:	b480      	push	{r7}
341856aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
341856ac:	4b05      	ldr	r3, [pc, #20]	@ (341856c4 <LL_RCC_PLL3_GetP1+0x1c>)
341856ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341856b2:	0edb      	lsrs	r3, r3, #27
341856b4:	f003 0307 	and.w	r3, r3, #7
}
341856b8:	4618      	mov	r0, r3
341856ba:	46bd      	mov	sp, r7
341856bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341856c0:	4770      	bx	lr
341856c2:	bf00      	nop
341856c4:	56028000 	.word	0x56028000

341856c8 <LL_RCC_PLL3_GetP2>:
{
341856c8:	b480      	push	{r7}
341856ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
341856cc:	4b05      	ldr	r3, [pc, #20]	@ (341856e4 <LL_RCC_PLL3_GetP2+0x1c>)
341856ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341856d2:	0e1b      	lsrs	r3, r3, #24
341856d4:	f003 0307 	and.w	r3, r3, #7
}
341856d8:	4618      	mov	r0, r3
341856da:	46bd      	mov	sp, r7
341856dc:	f85d 7b04 	ldr.w	r7, [sp], #4
341856e0:	4770      	bx	lr
341856e2:	bf00      	nop
341856e4:	56028000 	.word	0x56028000

341856e8 <LL_RCC_PLL3P_IsEnabled>:
{
341856e8:	b480      	push	{r7}
341856ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
341856ec:	4b07      	ldr	r3, [pc, #28]	@ (3418570c <LL_RCC_PLL3P_IsEnabled+0x24>)
341856ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341856f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
341856f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
341856fa:	d101      	bne.n	34185700 <LL_RCC_PLL3P_IsEnabled+0x18>
341856fc:	2301      	movs	r3, #1
341856fe:	e000      	b.n	34185702 <LL_RCC_PLL3P_IsEnabled+0x1a>
34185700:	2300      	movs	r3, #0
}
34185702:	4618      	mov	r0, r3
34185704:	46bd      	mov	sp, r7
34185706:	f85d 7b04 	ldr.w	r7, [sp], #4
3418570a:	4770      	bx	lr
3418570c:	56028000 	.word	0x56028000

34185710 <LL_RCC_PLL3_GetFRACN>:
{
34185710:	b480      	push	{r7}
34185712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34185714:	4b04      	ldr	r3, [pc, #16]	@ (34185728 <LL_RCC_PLL3_GetFRACN+0x18>)
34185716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418571a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418571e:	4618      	mov	r0, r3
34185720:	46bd      	mov	sp, r7
34185722:	f85d 7b04 	ldr.w	r7, [sp], #4
34185726:	4770      	bx	lr
34185728:	56028000 	.word	0x56028000

3418572c <LL_RCC_PLL4_GetSource>:
{
3418572c:	b480      	push	{r7}
3418572e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34185730:	4b04      	ldr	r3, [pc, #16]	@ (34185744 <LL_RCC_PLL4_GetSource+0x18>)
34185732:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34185736:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418573a:	4618      	mov	r0, r3
3418573c:	46bd      	mov	sp, r7
3418573e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185742:	4770      	bx	lr
34185744:	56028000 	.word	0x56028000

34185748 <LL_RCC_PLL4_IsReady>:
{
34185748:	b480      	push	{r7}
3418574a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3418574c:	4b07      	ldr	r3, [pc, #28]	@ (3418576c <LL_RCC_PLL4_IsReady+0x24>)
3418574e:	685b      	ldr	r3, [r3, #4]
34185750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34185754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34185758:	d101      	bne.n	3418575e <LL_RCC_PLL4_IsReady+0x16>
3418575a:	2301      	movs	r3, #1
3418575c:	e000      	b.n	34185760 <LL_RCC_PLL4_IsReady+0x18>
3418575e:	2300      	movs	r3, #0
}
34185760:	4618      	mov	r0, r3
34185762:	46bd      	mov	sp, r7
34185764:	f85d 7b04 	ldr.w	r7, [sp], #4
34185768:	4770      	bx	lr
3418576a:	bf00      	nop
3418576c:	56028000 	.word	0x56028000

34185770 <LL_RCC_PLL4_IsEnabledBypass>:
{
34185770:	b480      	push	{r7}
34185772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34185774:	4b07      	ldr	r3, [pc, #28]	@ (34185794 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
34185776:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418577a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418577e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34185782:	d101      	bne.n	34185788 <LL_RCC_PLL4_IsEnabledBypass+0x18>
34185784:	2301      	movs	r3, #1
34185786:	e000      	b.n	3418578a <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34185788:	2300      	movs	r3, #0
}
3418578a:	4618      	mov	r0, r3
3418578c:	46bd      	mov	sp, r7
3418578e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185792:	4770      	bx	lr
34185794:	56028000 	.word	0x56028000

34185798 <LL_RCC_PLL4_GetN>:
{
34185798:	b480      	push	{r7}
3418579a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
3418579c:	4b05      	ldr	r3, [pc, #20]	@ (341857b4 <LL_RCC_PLL4_GetN+0x1c>)
3418579e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341857a2:	0a1b      	lsrs	r3, r3, #8
341857a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
341857a8:	4618      	mov	r0, r3
341857aa:	46bd      	mov	sp, r7
341857ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341857b0:	4770      	bx	lr
341857b2:	bf00      	nop
341857b4:	56028000 	.word	0x56028000

341857b8 <LL_RCC_PLL4_GetM>:
{
341857b8:	b480      	push	{r7}
341857ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
341857bc:	4b05      	ldr	r3, [pc, #20]	@ (341857d4 <LL_RCC_PLL4_GetM+0x1c>)
341857be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341857c2:	0d1b      	lsrs	r3, r3, #20
341857c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
341857c8:	4618      	mov	r0, r3
341857ca:	46bd      	mov	sp, r7
341857cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341857d0:	4770      	bx	lr
341857d2:	bf00      	nop
341857d4:	56028000 	.word	0x56028000

341857d8 <LL_RCC_PLL4_GetP1>:
{
341857d8:	b480      	push	{r7}
341857da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
341857dc:	4b05      	ldr	r3, [pc, #20]	@ (341857f4 <LL_RCC_PLL4_GetP1+0x1c>)
341857de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341857e2:	0edb      	lsrs	r3, r3, #27
341857e4:	f003 0307 	and.w	r3, r3, #7
}
341857e8:	4618      	mov	r0, r3
341857ea:	46bd      	mov	sp, r7
341857ec:	f85d 7b04 	ldr.w	r7, [sp], #4
341857f0:	4770      	bx	lr
341857f2:	bf00      	nop
341857f4:	56028000 	.word	0x56028000

341857f8 <LL_RCC_PLL4_GetP2>:
{
341857f8:	b480      	push	{r7}
341857fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
341857fc:	4b05      	ldr	r3, [pc, #20]	@ (34185814 <LL_RCC_PLL4_GetP2+0x1c>)
341857fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34185802:	0e1b      	lsrs	r3, r3, #24
34185804:	f003 0307 	and.w	r3, r3, #7
}
34185808:	4618      	mov	r0, r3
3418580a:	46bd      	mov	sp, r7
3418580c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185810:	4770      	bx	lr
34185812:	bf00      	nop
34185814:	56028000 	.word	0x56028000

34185818 <LL_RCC_PLL4P_IsEnabled>:
{
34185818:	b480      	push	{r7}
3418581a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
3418581c:	4b07      	ldr	r3, [pc, #28]	@ (3418583c <LL_RCC_PLL4P_IsEnabled+0x24>)
3418581e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34185822:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34185826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418582a:	d101      	bne.n	34185830 <LL_RCC_PLL4P_IsEnabled+0x18>
3418582c:	2301      	movs	r3, #1
3418582e:	e000      	b.n	34185832 <LL_RCC_PLL4P_IsEnabled+0x1a>
34185830:	2300      	movs	r3, #0
}
34185832:	4618      	mov	r0, r3
34185834:	46bd      	mov	sp, r7
34185836:	f85d 7b04 	ldr.w	r7, [sp], #4
3418583a:	4770      	bx	lr
3418583c:	56028000 	.word	0x56028000

34185840 <LL_RCC_PLL4_GetFRACN>:
{
34185840:	b480      	push	{r7}
34185842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
34185844:	4b04      	ldr	r3, [pc, #16]	@ (34185858 <LL_RCC_PLL4_GetFRACN+0x18>)
34185846:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3418584a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418584e:	4618      	mov	r0, r3
34185850:	46bd      	mov	sp, r7
34185852:	f85d 7b04 	ldr.w	r7, [sp], #4
34185856:	4770      	bx	lr
34185858:	56028000 	.word	0x56028000

3418585c <LL_RCC_IC3_Enable>:
{
3418585c:	b480      	push	{r7}
3418585e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34185860:	4b04      	ldr	r3, [pc, #16]	@ (34185874 <LL_RCC_IC3_Enable+0x18>)
34185862:	2204      	movs	r2, #4
34185864:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185868:	bf00      	nop
3418586a:	46bd      	mov	sp, r7
3418586c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185870:	4770      	bx	lr
34185872:	bf00      	nop
34185874:	56028000 	.word	0x56028000

34185878 <LL_RCC_IC3_IsEnabled>:
{
34185878:	b480      	push	{r7}
3418587a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
3418587c:	4b07      	ldr	r3, [pc, #28]	@ (3418589c <LL_RCC_IC3_IsEnabled+0x24>)
3418587e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185882:	f003 0304 	and.w	r3, r3, #4
34185886:	2b04      	cmp	r3, #4
34185888:	d101      	bne.n	3418588e <LL_RCC_IC3_IsEnabled+0x16>
3418588a:	2301      	movs	r3, #1
3418588c:	e000      	b.n	34185890 <LL_RCC_IC3_IsEnabled+0x18>
3418588e:	2300      	movs	r3, #0
}
34185890:	4618      	mov	r0, r3
34185892:	46bd      	mov	sp, r7
34185894:	f85d 7b04 	ldr.w	r7, [sp], #4
34185898:	4770      	bx	lr
3418589a:	bf00      	nop
3418589c:	56028000 	.word	0x56028000

341858a0 <LL_RCC_IC3_GetSource>:
{
341858a0:	b480      	push	{r7}
341858a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
341858a4:	4b04      	ldr	r3, [pc, #16]	@ (341858b8 <LL_RCC_IC3_GetSource+0x18>)
341858a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341858aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341858ae:	4618      	mov	r0, r3
341858b0:	46bd      	mov	sp, r7
341858b2:	f85d 7b04 	ldr.w	r7, [sp], #4
341858b6:	4770      	bx	lr
341858b8:	56028000 	.word	0x56028000

341858bc <LL_RCC_IC3_GetDivider>:
{
341858bc:	b480      	push	{r7}
341858be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
341858c0:	4b05      	ldr	r3, [pc, #20]	@ (341858d8 <LL_RCC_IC3_GetDivider+0x1c>)
341858c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341858c6:	0c1b      	lsrs	r3, r3, #16
341858c8:	b2db      	uxtb	r3, r3
341858ca:	3301      	adds	r3, #1
}
341858cc:	4618      	mov	r0, r3
341858ce:	46bd      	mov	sp, r7
341858d0:	f85d 7b04 	ldr.w	r7, [sp], #4
341858d4:	4770      	bx	lr
341858d6:	bf00      	nop
341858d8:	56028000 	.word	0x56028000

341858dc <LL_RCC_IC4_Enable>:
{
341858dc:	b480      	push	{r7}
341858de:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
341858e0:	4b04      	ldr	r3, [pc, #16]	@ (341858f4 <LL_RCC_IC4_Enable+0x18>)
341858e2:	2208      	movs	r2, #8
341858e4:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341858e8:	bf00      	nop
341858ea:	46bd      	mov	sp, r7
341858ec:	f85d 7b04 	ldr.w	r7, [sp], #4
341858f0:	4770      	bx	lr
341858f2:	bf00      	nop
341858f4:	56028000 	.word	0x56028000

341858f8 <LL_RCC_IC4_IsEnabled>:
{
341858f8:	b480      	push	{r7}
341858fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
341858fc:	4b07      	ldr	r3, [pc, #28]	@ (3418591c <LL_RCC_IC4_IsEnabled+0x24>)
341858fe:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185902:	f003 0308 	and.w	r3, r3, #8
34185906:	2b08      	cmp	r3, #8
34185908:	d101      	bne.n	3418590e <LL_RCC_IC4_IsEnabled+0x16>
3418590a:	2301      	movs	r3, #1
3418590c:	e000      	b.n	34185910 <LL_RCC_IC4_IsEnabled+0x18>
3418590e:	2300      	movs	r3, #0
}
34185910:	4618      	mov	r0, r3
34185912:	46bd      	mov	sp, r7
34185914:	f85d 7b04 	ldr.w	r7, [sp], #4
34185918:	4770      	bx	lr
3418591a:	bf00      	nop
3418591c:	56028000 	.word	0x56028000

34185920 <LL_RCC_IC4_GetSource>:
{
34185920:	b480      	push	{r7}
34185922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34185924:	4b04      	ldr	r3, [pc, #16]	@ (34185938 <LL_RCC_IC4_GetSource+0x18>)
34185926:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418592a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418592e:	4618      	mov	r0, r3
34185930:	46bd      	mov	sp, r7
34185932:	f85d 7b04 	ldr.w	r7, [sp], #4
34185936:	4770      	bx	lr
34185938:	56028000 	.word	0x56028000

3418593c <LL_RCC_IC4_GetDivider>:
{
3418593c:	b480      	push	{r7}
3418593e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34185940:	4b05      	ldr	r3, [pc, #20]	@ (34185958 <LL_RCC_IC4_GetDivider+0x1c>)
34185942:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185946:	0c1b      	lsrs	r3, r3, #16
34185948:	b2db      	uxtb	r3, r3
3418594a:	3301      	adds	r3, #1
}
3418594c:	4618      	mov	r0, r3
3418594e:	46bd      	mov	sp, r7
34185950:	f85d 7b04 	ldr.w	r7, [sp], #4
34185954:	4770      	bx	lr
34185956:	bf00      	nop
34185958:	56028000 	.word	0x56028000

3418595c <LL_RCC_IC5_Enable>:
{
3418595c:	b480      	push	{r7}
3418595e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34185960:	4b04      	ldr	r3, [pc, #16]	@ (34185974 <LL_RCC_IC5_Enable+0x18>)
34185962:	2210      	movs	r2, #16
34185964:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185968:	bf00      	nop
3418596a:	46bd      	mov	sp, r7
3418596c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185970:	4770      	bx	lr
34185972:	bf00      	nop
34185974:	56028000 	.word	0x56028000

34185978 <LL_RCC_IC5_IsEnabled>:
{
34185978:	b480      	push	{r7}
3418597a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
3418597c:	4b07      	ldr	r3, [pc, #28]	@ (3418599c <LL_RCC_IC5_IsEnabled+0x24>)
3418597e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185982:	f003 0310 	and.w	r3, r3, #16
34185986:	2b10      	cmp	r3, #16
34185988:	d101      	bne.n	3418598e <LL_RCC_IC5_IsEnabled+0x16>
3418598a:	2301      	movs	r3, #1
3418598c:	e000      	b.n	34185990 <LL_RCC_IC5_IsEnabled+0x18>
3418598e:	2300      	movs	r3, #0
}
34185990:	4618      	mov	r0, r3
34185992:	46bd      	mov	sp, r7
34185994:	f85d 7b04 	ldr.w	r7, [sp], #4
34185998:	4770      	bx	lr
3418599a:	bf00      	nop
3418599c:	56028000 	.word	0x56028000

341859a0 <LL_RCC_IC5_GetSource>:
{
341859a0:	b480      	push	{r7}
341859a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
341859a4:	4b04      	ldr	r3, [pc, #16]	@ (341859b8 <LL_RCC_IC5_GetSource+0x18>)
341859a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341859aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341859ae:	4618      	mov	r0, r3
341859b0:	46bd      	mov	sp, r7
341859b2:	f85d 7b04 	ldr.w	r7, [sp], #4
341859b6:	4770      	bx	lr
341859b8:	56028000 	.word	0x56028000

341859bc <LL_RCC_IC5_GetDivider>:
{
341859bc:	b480      	push	{r7}
341859be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
341859c0:	4b05      	ldr	r3, [pc, #20]	@ (341859d8 <LL_RCC_IC5_GetDivider+0x1c>)
341859c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341859c6:	0c1b      	lsrs	r3, r3, #16
341859c8:	b2db      	uxtb	r3, r3
341859ca:	3301      	adds	r3, #1
}
341859cc:	4618      	mov	r0, r3
341859ce:	46bd      	mov	sp, r7
341859d0:	f85d 7b04 	ldr.w	r7, [sp], #4
341859d4:	4770      	bx	lr
341859d6:	bf00      	nop
341859d8:	56028000 	.word	0x56028000

341859dc <LL_RCC_IC7_Enable>:
{
341859dc:	b480      	push	{r7}
341859de:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
341859e0:	4b04      	ldr	r3, [pc, #16]	@ (341859f4 <LL_RCC_IC7_Enable+0x18>)
341859e2:	2240      	movs	r2, #64	@ 0x40
341859e4:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341859e8:	bf00      	nop
341859ea:	46bd      	mov	sp, r7
341859ec:	f85d 7b04 	ldr.w	r7, [sp], #4
341859f0:	4770      	bx	lr
341859f2:	bf00      	nop
341859f4:	56028000 	.word	0x56028000

341859f8 <LL_RCC_IC7_IsEnabled>:
{
341859f8:	b480      	push	{r7}
341859fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
341859fc:	4b07      	ldr	r3, [pc, #28]	@ (34185a1c <LL_RCC_IC7_IsEnabled+0x24>)
341859fe:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34185a06:	2b40      	cmp	r3, #64	@ 0x40
34185a08:	d101      	bne.n	34185a0e <LL_RCC_IC7_IsEnabled+0x16>
34185a0a:	2301      	movs	r3, #1
34185a0c:	e000      	b.n	34185a10 <LL_RCC_IC7_IsEnabled+0x18>
34185a0e:	2300      	movs	r3, #0
}
34185a10:	4618      	mov	r0, r3
34185a12:	46bd      	mov	sp, r7
34185a14:	f85d 7b04 	ldr.w	r7, [sp], #4
34185a18:	4770      	bx	lr
34185a1a:	bf00      	nop
34185a1c:	56028000 	.word	0x56028000

34185a20 <LL_RCC_IC7_GetSource>:
{
34185a20:	b480      	push	{r7}
34185a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34185a24:	4b04      	ldr	r3, [pc, #16]	@ (34185a38 <LL_RCC_IC7_GetSource+0x18>)
34185a26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34185a2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185a2e:	4618      	mov	r0, r3
34185a30:	46bd      	mov	sp, r7
34185a32:	f85d 7b04 	ldr.w	r7, [sp], #4
34185a36:	4770      	bx	lr
34185a38:	56028000 	.word	0x56028000

34185a3c <LL_RCC_IC7_GetDivider>:
{
34185a3c:	b480      	push	{r7}
34185a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34185a40:	4b05      	ldr	r3, [pc, #20]	@ (34185a58 <LL_RCC_IC7_GetDivider+0x1c>)
34185a42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34185a46:	0c1b      	lsrs	r3, r3, #16
34185a48:	b2db      	uxtb	r3, r3
34185a4a:	3301      	adds	r3, #1
}
34185a4c:	4618      	mov	r0, r3
34185a4e:	46bd      	mov	sp, r7
34185a50:	f85d 7b04 	ldr.w	r7, [sp], #4
34185a54:	4770      	bx	lr
34185a56:	bf00      	nop
34185a58:	56028000 	.word	0x56028000

34185a5c <LL_RCC_IC8_Enable>:
{
34185a5c:	b480      	push	{r7}
34185a5e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34185a60:	4b04      	ldr	r3, [pc, #16]	@ (34185a74 <LL_RCC_IC8_Enable+0x18>)
34185a62:	2280      	movs	r2, #128	@ 0x80
34185a64:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185a68:	bf00      	nop
34185a6a:	46bd      	mov	sp, r7
34185a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185a70:	4770      	bx	lr
34185a72:	bf00      	nop
34185a74:	56028000 	.word	0x56028000

34185a78 <LL_RCC_IC8_IsEnabled>:
{
34185a78:	b480      	push	{r7}
34185a7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
34185a7c:	4b07      	ldr	r3, [pc, #28]	@ (34185a9c <LL_RCC_IC8_IsEnabled+0x24>)
34185a7e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34185a86:	2b80      	cmp	r3, #128	@ 0x80
34185a88:	d101      	bne.n	34185a8e <LL_RCC_IC8_IsEnabled+0x16>
34185a8a:	2301      	movs	r3, #1
34185a8c:	e000      	b.n	34185a90 <LL_RCC_IC8_IsEnabled+0x18>
34185a8e:	2300      	movs	r3, #0
}
34185a90:	4618      	mov	r0, r3
34185a92:	46bd      	mov	sp, r7
34185a94:	f85d 7b04 	ldr.w	r7, [sp], #4
34185a98:	4770      	bx	lr
34185a9a:	bf00      	nop
34185a9c:	56028000 	.word	0x56028000

34185aa0 <LL_RCC_IC8_GetSource>:
{
34185aa0:	b480      	push	{r7}
34185aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34185aa4:	4b04      	ldr	r3, [pc, #16]	@ (34185ab8 <LL_RCC_IC8_GetSource+0x18>)
34185aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34185aaa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185aae:	4618      	mov	r0, r3
34185ab0:	46bd      	mov	sp, r7
34185ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
34185ab6:	4770      	bx	lr
34185ab8:	56028000 	.word	0x56028000

34185abc <LL_RCC_IC8_GetDivider>:
{
34185abc:	b480      	push	{r7}
34185abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34185ac0:	4b05      	ldr	r3, [pc, #20]	@ (34185ad8 <LL_RCC_IC8_GetDivider+0x1c>)
34185ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34185ac6:	0c1b      	lsrs	r3, r3, #16
34185ac8:	b2db      	uxtb	r3, r3
34185aca:	3301      	adds	r3, #1
}
34185acc:	4618      	mov	r0, r3
34185ace:	46bd      	mov	sp, r7
34185ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
34185ad4:	4770      	bx	lr
34185ad6:	bf00      	nop
34185ad8:	56028000 	.word	0x56028000

34185adc <LL_RCC_IC9_Enable>:
{
34185adc:	b480      	push	{r7}
34185ade:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34185ae0:	4b04      	ldr	r3, [pc, #16]	@ (34185af4 <LL_RCC_IC9_Enable+0x18>)
34185ae2:	f44f 7280 	mov.w	r2, #256	@ 0x100
34185ae6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185aea:	bf00      	nop
34185aec:	46bd      	mov	sp, r7
34185aee:	f85d 7b04 	ldr.w	r7, [sp], #4
34185af2:	4770      	bx	lr
34185af4:	56028000 	.word	0x56028000

34185af8 <LL_RCC_IC9_IsEnabled>:
{
34185af8:	b480      	push	{r7}
34185afa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34185afc:	4b07      	ldr	r3, [pc, #28]	@ (34185b1c <LL_RCC_IC9_IsEnabled+0x24>)
34185afe:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34185b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34185b0a:	d101      	bne.n	34185b10 <LL_RCC_IC9_IsEnabled+0x18>
34185b0c:	2301      	movs	r3, #1
34185b0e:	e000      	b.n	34185b12 <LL_RCC_IC9_IsEnabled+0x1a>
34185b10:	2300      	movs	r3, #0
}
34185b12:	4618      	mov	r0, r3
34185b14:	46bd      	mov	sp, r7
34185b16:	f85d 7b04 	ldr.w	r7, [sp], #4
34185b1a:	4770      	bx	lr
34185b1c:	56028000 	.word	0x56028000

34185b20 <LL_RCC_IC9_GetSource>:
{
34185b20:	b480      	push	{r7}
34185b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34185b24:	4b04      	ldr	r3, [pc, #16]	@ (34185b38 <LL_RCC_IC9_GetSource+0x18>)
34185b26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34185b2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185b2e:	4618      	mov	r0, r3
34185b30:	46bd      	mov	sp, r7
34185b32:	f85d 7b04 	ldr.w	r7, [sp], #4
34185b36:	4770      	bx	lr
34185b38:	56028000 	.word	0x56028000

34185b3c <LL_RCC_IC9_GetDivider>:
{
34185b3c:	b480      	push	{r7}
34185b3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34185b40:	4b05      	ldr	r3, [pc, #20]	@ (34185b58 <LL_RCC_IC9_GetDivider+0x1c>)
34185b42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34185b46:	0c1b      	lsrs	r3, r3, #16
34185b48:	b2db      	uxtb	r3, r3
34185b4a:	3301      	adds	r3, #1
}
34185b4c:	4618      	mov	r0, r3
34185b4e:	46bd      	mov	sp, r7
34185b50:	f85d 7b04 	ldr.w	r7, [sp], #4
34185b54:	4770      	bx	lr
34185b56:	bf00      	nop
34185b58:	56028000 	.word	0x56028000

34185b5c <LL_RCC_IC10_Enable>:
{
34185b5c:	b480      	push	{r7}
34185b5e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34185b60:	4b04      	ldr	r3, [pc, #16]	@ (34185b74 <LL_RCC_IC10_Enable+0x18>)
34185b62:	f44f 7200 	mov.w	r2, #512	@ 0x200
34185b66:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185b6a:	bf00      	nop
34185b6c:	46bd      	mov	sp, r7
34185b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185b72:	4770      	bx	lr
34185b74:	56028000 	.word	0x56028000

34185b78 <LL_RCC_IC10_IsEnabled>:
{
34185b78:	b480      	push	{r7}
34185b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34185b7c:	4b07      	ldr	r3, [pc, #28]	@ (34185b9c <LL_RCC_IC10_IsEnabled+0x24>)
34185b7e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185b82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34185b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34185b8a:	d101      	bne.n	34185b90 <LL_RCC_IC10_IsEnabled+0x18>
34185b8c:	2301      	movs	r3, #1
34185b8e:	e000      	b.n	34185b92 <LL_RCC_IC10_IsEnabled+0x1a>
34185b90:	2300      	movs	r3, #0
}
34185b92:	4618      	mov	r0, r3
34185b94:	46bd      	mov	sp, r7
34185b96:	f85d 7b04 	ldr.w	r7, [sp], #4
34185b9a:	4770      	bx	lr
34185b9c:	56028000 	.word	0x56028000

34185ba0 <LL_RCC_IC10_GetSource>:
{
34185ba0:	b480      	push	{r7}
34185ba2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34185ba4:	4b04      	ldr	r3, [pc, #16]	@ (34185bb8 <LL_RCC_IC10_GetSource+0x18>)
34185ba6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185baa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185bae:	4618      	mov	r0, r3
34185bb0:	46bd      	mov	sp, r7
34185bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
34185bb6:	4770      	bx	lr
34185bb8:	56028000 	.word	0x56028000

34185bbc <LL_RCC_IC10_GetDivider>:
{
34185bbc:	b480      	push	{r7}
34185bbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34185bc0:	4b05      	ldr	r3, [pc, #20]	@ (34185bd8 <LL_RCC_IC10_GetDivider+0x1c>)
34185bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185bc6:	0c1b      	lsrs	r3, r3, #16
34185bc8:	b2db      	uxtb	r3, r3
34185bca:	3301      	adds	r3, #1
}
34185bcc:	4618      	mov	r0, r3
34185bce:	46bd      	mov	sp, r7
34185bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34185bd4:	4770      	bx	lr
34185bd6:	bf00      	nop
34185bd8:	56028000 	.word	0x56028000

34185bdc <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
34185bdc:	b480      	push	{r7}
34185bde:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34185be0:	4b04      	ldr	r3, [pc, #16]	@ (34185bf4 <LL_RCC_IC12_Enable+0x18>)
34185be2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34185be6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185bea:	bf00      	nop
34185bec:	46bd      	mov	sp, r7
34185bee:	f85d 7b04 	ldr.w	r7, [sp], #4
34185bf2:	4770      	bx	lr
34185bf4:	56028000 	.word	0x56028000

34185bf8 <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
34185bf8:	b480      	push	{r7}
34185bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34185bfc:	4b07      	ldr	r3, [pc, #28]	@ (34185c1c <LL_RCC_IC12_IsEnabled+0x24>)
34185bfe:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185c02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34185c06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34185c0a:	d101      	bne.n	34185c10 <LL_RCC_IC12_IsEnabled+0x18>
34185c0c:	2301      	movs	r3, #1
34185c0e:	e000      	b.n	34185c12 <LL_RCC_IC12_IsEnabled+0x1a>
34185c10:	2300      	movs	r3, #0
}
34185c12:	4618      	mov	r0, r3
34185c14:	46bd      	mov	sp, r7
34185c16:	f85d 7b04 	ldr.w	r7, [sp], #4
34185c1a:	4770      	bx	lr
34185c1c:	56028000 	.word	0x56028000

34185c20 <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
34185c20:	b480      	push	{r7}
34185c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34185c24:	4b04      	ldr	r3, [pc, #16]	@ (34185c38 <LL_RCC_IC12_GetSource+0x18>)
34185c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34185c2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185c2e:	4618      	mov	r0, r3
34185c30:	46bd      	mov	sp, r7
34185c32:	f85d 7b04 	ldr.w	r7, [sp], #4
34185c36:	4770      	bx	lr
34185c38:	56028000 	.word	0x56028000

34185c3c <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
34185c3c:	b480      	push	{r7}
34185c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34185c40:	4b05      	ldr	r3, [pc, #20]	@ (34185c58 <LL_RCC_IC12_GetDivider+0x1c>)
34185c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34185c46:	0c1b      	lsrs	r3, r3, #16
34185c48:	b2db      	uxtb	r3, r3
34185c4a:	3301      	adds	r3, #1
}
34185c4c:	4618      	mov	r0, r3
34185c4e:	46bd      	mov	sp, r7
34185c50:	f85d 7b04 	ldr.w	r7, [sp], #4
34185c54:	4770      	bx	lr
34185c56:	bf00      	nop
34185c58:	56028000 	.word	0x56028000

34185c5c <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
34185c5c:	b480      	push	{r7}
34185c5e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34185c60:	4b04      	ldr	r3, [pc, #16]	@ (34185c74 <LL_RCC_IC13_Enable+0x18>)
34185c62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34185c66:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185c6a:	bf00      	nop
34185c6c:	46bd      	mov	sp, r7
34185c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185c72:	4770      	bx	lr
34185c74:	56028000 	.word	0x56028000

34185c78 <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
34185c78:	b480      	push	{r7}
34185c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34185c7c:	4b07      	ldr	r3, [pc, #28]	@ (34185c9c <LL_RCC_IC13_IsEnabled+0x24>)
34185c7e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185c82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34185c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34185c8a:	d101      	bne.n	34185c90 <LL_RCC_IC13_IsEnabled+0x18>
34185c8c:	2301      	movs	r3, #1
34185c8e:	e000      	b.n	34185c92 <LL_RCC_IC13_IsEnabled+0x1a>
34185c90:	2300      	movs	r3, #0
}
34185c92:	4618      	mov	r0, r3
34185c94:	46bd      	mov	sp, r7
34185c96:	f85d 7b04 	ldr.w	r7, [sp], #4
34185c9a:	4770      	bx	lr
34185c9c:	56028000 	.word	0x56028000

34185ca0 <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
34185ca0:	b480      	push	{r7}
34185ca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34185ca4:	4b04      	ldr	r3, [pc, #16]	@ (34185cb8 <LL_RCC_IC13_GetSource+0x18>)
34185ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34185caa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185cae:	4618      	mov	r0, r3
34185cb0:	46bd      	mov	sp, r7
34185cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
34185cb6:	4770      	bx	lr
34185cb8:	56028000 	.word	0x56028000

34185cbc <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
34185cbc:	b480      	push	{r7}
34185cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34185cc0:	4b05      	ldr	r3, [pc, #20]	@ (34185cd8 <LL_RCC_IC13_GetDivider+0x1c>)
34185cc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34185cc6:	0c1b      	lsrs	r3, r3, #16
34185cc8:	b2db      	uxtb	r3, r3
34185cca:	3301      	adds	r3, #1
}
34185ccc:	4618      	mov	r0, r3
34185cce:	46bd      	mov	sp, r7
34185cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34185cd4:	4770      	bx	lr
34185cd6:	bf00      	nop
34185cd8:	56028000 	.word	0x56028000

34185cdc <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
34185cdc:	b480      	push	{r7}
34185cde:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185ce0:	4b04      	ldr	r3, [pc, #16]	@ (34185cf4 <LL_RCC_IC14_Enable+0x18>)
34185ce2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34185ce6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185cea:	bf00      	nop
34185cec:	46bd      	mov	sp, r7
34185cee:	f85d 7b04 	ldr.w	r7, [sp], #4
34185cf2:	4770      	bx	lr
34185cf4:	56028000 	.word	0x56028000

34185cf8 <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
34185cf8:	b480      	push	{r7}
34185cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34185cfc:	4b07      	ldr	r3, [pc, #28]	@ (34185d1c <LL_RCC_IC14_IsEnabled+0x24>)
34185cfe:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185d02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34185d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34185d0a:	d101      	bne.n	34185d10 <LL_RCC_IC14_IsEnabled+0x18>
34185d0c:	2301      	movs	r3, #1
34185d0e:	e000      	b.n	34185d12 <LL_RCC_IC14_IsEnabled+0x1a>
34185d10:	2300      	movs	r3, #0
}
34185d12:	4618      	mov	r0, r3
34185d14:	46bd      	mov	sp, r7
34185d16:	f85d 7b04 	ldr.w	r7, [sp], #4
34185d1a:	4770      	bx	lr
34185d1c:	56028000 	.word	0x56028000

34185d20 <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
34185d20:	b480      	push	{r7}
34185d22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34185d24:	4b04      	ldr	r3, [pc, #16]	@ (34185d38 <LL_RCC_IC14_GetSource+0x18>)
34185d26:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34185d2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185d2e:	4618      	mov	r0, r3
34185d30:	46bd      	mov	sp, r7
34185d32:	f85d 7b04 	ldr.w	r7, [sp], #4
34185d36:	4770      	bx	lr
34185d38:	56028000 	.word	0x56028000

34185d3c <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
34185d3c:	b480      	push	{r7}
34185d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34185d40:	4b05      	ldr	r3, [pc, #20]	@ (34185d58 <LL_RCC_IC14_GetDivider+0x1c>)
34185d42:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34185d46:	0c1b      	lsrs	r3, r3, #16
34185d48:	b2db      	uxtb	r3, r3
34185d4a:	3301      	adds	r3, #1
}
34185d4c:	4618      	mov	r0, r3
34185d4e:	46bd      	mov	sp, r7
34185d50:	f85d 7b04 	ldr.w	r7, [sp], #4
34185d54:	4770      	bx	lr
34185d56:	bf00      	nop
34185d58:	56028000 	.word	0x56028000

34185d5c <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
34185d5c:	b480      	push	{r7}
34185d5e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34185d60:	4b04      	ldr	r3, [pc, #16]	@ (34185d74 <LL_RCC_IC15_Enable+0x18>)
34185d62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34185d66:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185d6a:	bf00      	nop
34185d6c:	46bd      	mov	sp, r7
34185d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185d72:	4770      	bx	lr
34185d74:	56028000 	.word	0x56028000

34185d78 <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
34185d78:	b480      	push	{r7}
34185d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34185d7c:	4b07      	ldr	r3, [pc, #28]	@ (34185d9c <LL_RCC_IC15_IsEnabled+0x24>)
34185d7e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34185d86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34185d8a:	d101      	bne.n	34185d90 <LL_RCC_IC15_IsEnabled+0x18>
34185d8c:	2301      	movs	r3, #1
34185d8e:	e000      	b.n	34185d92 <LL_RCC_IC15_IsEnabled+0x1a>
34185d90:	2300      	movs	r3, #0
}
34185d92:	4618      	mov	r0, r3
34185d94:	46bd      	mov	sp, r7
34185d96:	f85d 7b04 	ldr.w	r7, [sp], #4
34185d9a:	4770      	bx	lr
34185d9c:	56028000 	.word	0x56028000

34185da0 <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
34185da0:	b480      	push	{r7}
34185da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34185da4:	4b04      	ldr	r3, [pc, #16]	@ (34185db8 <LL_RCC_IC15_GetSource+0x18>)
34185da6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185daa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185dae:	4618      	mov	r0, r3
34185db0:	46bd      	mov	sp, r7
34185db2:	f85d 7b04 	ldr.w	r7, [sp], #4
34185db6:	4770      	bx	lr
34185db8:	56028000 	.word	0x56028000

34185dbc <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
34185dbc:	b480      	push	{r7}
34185dbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34185dc0:	4b05      	ldr	r3, [pc, #20]	@ (34185dd8 <LL_RCC_IC15_GetDivider+0x1c>)
34185dc2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185dc6:	0c1b      	lsrs	r3, r3, #16
34185dc8:	b2db      	uxtb	r3, r3
34185dca:	3301      	adds	r3, #1
}
34185dcc:	4618      	mov	r0, r3
34185dce:	46bd      	mov	sp, r7
34185dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34185dd4:	4770      	bx	lr
34185dd6:	bf00      	nop
34185dd8:	56028000 	.word	0x56028000

34185ddc <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
34185ddc:	b480      	push	{r7}
34185dde:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34185de0:	4b04      	ldr	r3, [pc, #16]	@ (34185df4 <LL_RCC_IC16_Enable+0x18>)
34185de2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34185de6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185dea:	bf00      	nop
34185dec:	46bd      	mov	sp, r7
34185dee:	f85d 7b04 	ldr.w	r7, [sp], #4
34185df2:	4770      	bx	lr
34185df4:	56028000 	.word	0x56028000

34185df8 <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
34185df8:	b480      	push	{r7}
34185dfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34185dfc:	4b07      	ldr	r3, [pc, #28]	@ (34185e1c <LL_RCC_IC16_IsEnabled+0x24>)
34185dfe:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34185e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34185e0a:	d101      	bne.n	34185e10 <LL_RCC_IC16_IsEnabled+0x18>
34185e0c:	2301      	movs	r3, #1
34185e0e:	e000      	b.n	34185e12 <LL_RCC_IC16_IsEnabled+0x1a>
34185e10:	2300      	movs	r3, #0
}
34185e12:	4618      	mov	r0, r3
34185e14:	46bd      	mov	sp, r7
34185e16:	f85d 7b04 	ldr.w	r7, [sp], #4
34185e1a:	4770      	bx	lr
34185e1c:	56028000 	.word	0x56028000

34185e20 <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
34185e20:	b480      	push	{r7}
34185e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34185e24:	4b04      	ldr	r3, [pc, #16]	@ (34185e38 <LL_RCC_IC16_GetSource+0x18>)
34185e26:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34185e2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185e2e:	4618      	mov	r0, r3
34185e30:	46bd      	mov	sp, r7
34185e32:	f85d 7b04 	ldr.w	r7, [sp], #4
34185e36:	4770      	bx	lr
34185e38:	56028000 	.word	0x56028000

34185e3c <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
34185e3c:	b480      	push	{r7}
34185e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34185e40:	4b05      	ldr	r3, [pc, #20]	@ (34185e58 <LL_RCC_IC16_GetDivider+0x1c>)
34185e42:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34185e46:	0c1b      	lsrs	r3, r3, #16
34185e48:	b2db      	uxtb	r3, r3
34185e4a:	3301      	adds	r3, #1
}
34185e4c:	4618      	mov	r0, r3
34185e4e:	46bd      	mov	sp, r7
34185e50:	f85d 7b04 	ldr.w	r7, [sp], #4
34185e54:	4770      	bx	lr
34185e56:	bf00      	nop
34185e58:	56028000 	.word	0x56028000

34185e5c <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
34185e5c:	b480      	push	{r7}
34185e5e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
34185e60:	4b04      	ldr	r3, [pc, #16]	@ (34185e74 <LL_RCC_IC17_Enable+0x18>)
34185e62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34185e66:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185e6a:	bf00      	nop
34185e6c:	46bd      	mov	sp, r7
34185e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185e72:	4770      	bx	lr
34185e74:	56028000 	.word	0x56028000

34185e78 <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
34185e78:	b480      	push	{r7}
34185e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34185e7c:	4b07      	ldr	r3, [pc, #28]	@ (34185e9c <LL_RCC_IC17_IsEnabled+0x24>)
34185e7e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34185e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34185e8a:	d101      	bne.n	34185e90 <LL_RCC_IC17_IsEnabled+0x18>
34185e8c:	2301      	movs	r3, #1
34185e8e:	e000      	b.n	34185e92 <LL_RCC_IC17_IsEnabled+0x1a>
34185e90:	2300      	movs	r3, #0
}
34185e92:	4618      	mov	r0, r3
34185e94:	46bd      	mov	sp, r7
34185e96:	f85d 7b04 	ldr.w	r7, [sp], #4
34185e9a:	4770      	bx	lr
34185e9c:	56028000 	.word	0x56028000

34185ea0 <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
34185ea0:	b480      	push	{r7}
34185ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34185ea4:	4b04      	ldr	r3, [pc, #16]	@ (34185eb8 <LL_RCC_IC17_GetSource+0x18>)
34185ea6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34185eaa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185eae:	4618      	mov	r0, r3
34185eb0:	46bd      	mov	sp, r7
34185eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
34185eb6:	4770      	bx	lr
34185eb8:	56028000 	.word	0x56028000

34185ebc <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
34185ebc:	b480      	push	{r7}
34185ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34185ec0:	4b05      	ldr	r3, [pc, #20]	@ (34185ed8 <LL_RCC_IC17_GetDivider+0x1c>)
34185ec2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34185ec6:	0c1b      	lsrs	r3, r3, #16
34185ec8:	b2db      	uxtb	r3, r3
34185eca:	3301      	adds	r3, #1
}
34185ecc:	4618      	mov	r0, r3
34185ece:	46bd      	mov	sp, r7
34185ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
34185ed4:	4770      	bx	lr
34185ed6:	bf00      	nop
34185ed8:	56028000 	.word	0x56028000

34185edc <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
34185edc:	b480      	push	{r7}
34185ede:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34185ee0:	4b04      	ldr	r3, [pc, #16]	@ (34185ef4 <LL_RCC_IC18_Enable+0x18>)
34185ee2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
34185ee6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185eea:	bf00      	nop
34185eec:	46bd      	mov	sp, r7
34185eee:	f85d 7b04 	ldr.w	r7, [sp], #4
34185ef2:	4770      	bx	lr
34185ef4:	56028000 	.word	0x56028000

34185ef8 <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
34185ef8:	b480      	push	{r7}
34185efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34185efc:	4b07      	ldr	r3, [pc, #28]	@ (34185f1c <LL_RCC_IC18_IsEnabled+0x24>)
34185efe:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34185f06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34185f0a:	d101      	bne.n	34185f10 <LL_RCC_IC18_IsEnabled+0x18>
34185f0c:	2301      	movs	r3, #1
34185f0e:	e000      	b.n	34185f12 <LL_RCC_IC18_IsEnabled+0x1a>
34185f10:	2300      	movs	r3, #0
}
34185f12:	4618      	mov	r0, r3
34185f14:	46bd      	mov	sp, r7
34185f16:	f85d 7b04 	ldr.w	r7, [sp], #4
34185f1a:	4770      	bx	lr
34185f1c:	56028000 	.word	0x56028000

34185f20 <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
34185f20:	b480      	push	{r7}
34185f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34185f24:	4b04      	ldr	r3, [pc, #16]	@ (34185f38 <LL_RCC_IC18_GetSource+0x18>)
34185f26:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34185f2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185f2e:	4618      	mov	r0, r3
34185f30:	46bd      	mov	sp, r7
34185f32:	f85d 7b04 	ldr.w	r7, [sp], #4
34185f36:	4770      	bx	lr
34185f38:	56028000 	.word	0x56028000

34185f3c <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
34185f3c:	b480      	push	{r7}
34185f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34185f40:	4b05      	ldr	r3, [pc, #20]	@ (34185f58 <LL_RCC_IC18_GetDivider+0x1c>)
34185f42:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34185f46:	0c1b      	lsrs	r3, r3, #16
34185f48:	b2db      	uxtb	r3, r3
34185f4a:	3301      	adds	r3, #1
}
34185f4c:	4618      	mov	r0, r3
34185f4e:	46bd      	mov	sp, r7
34185f50:	f85d 7b04 	ldr.w	r7, [sp], #4
34185f54:	4770      	bx	lr
34185f56:	bf00      	nop
34185f58:	56028000 	.word	0x56028000

34185f5c <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
34185f5c:	b480      	push	{r7}
34185f5e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34185f60:	4b04      	ldr	r3, [pc, #16]	@ (34185f74 <LL_RCC_IC19_Enable+0x18>)
34185f62:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34185f66:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185f6a:	bf00      	nop
34185f6c:	46bd      	mov	sp, r7
34185f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185f72:	4770      	bx	lr
34185f74:	56028000 	.word	0x56028000

34185f78 <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
34185f78:	b480      	push	{r7}
34185f7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34185f7c:	4b07      	ldr	r3, [pc, #28]	@ (34185f9c <LL_RCC_IC19_IsEnabled+0x24>)
34185f7e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34185f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34185f86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34185f8a:	d101      	bne.n	34185f90 <LL_RCC_IC19_IsEnabled+0x18>
34185f8c:	2301      	movs	r3, #1
34185f8e:	e000      	b.n	34185f92 <LL_RCC_IC19_IsEnabled+0x1a>
34185f90:	2300      	movs	r3, #0
}
34185f92:	4618      	mov	r0, r3
34185f94:	46bd      	mov	sp, r7
34185f96:	f85d 7b04 	ldr.w	r7, [sp], #4
34185f9a:	4770      	bx	lr
34185f9c:	56028000 	.word	0x56028000

34185fa0 <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
34185fa0:	b480      	push	{r7}
34185fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34185fa4:	4b04      	ldr	r3, [pc, #16]	@ (34185fb8 <LL_RCC_IC19_GetSource+0x18>)
34185fa6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34185faa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185fae:	4618      	mov	r0, r3
34185fb0:	46bd      	mov	sp, r7
34185fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
34185fb6:	4770      	bx	lr
34185fb8:	56028000 	.word	0x56028000

34185fbc <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
34185fbc:	b480      	push	{r7}
34185fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34185fc0:	4b05      	ldr	r3, [pc, #20]	@ (34185fd8 <LL_RCC_IC19_GetDivider+0x1c>)
34185fc2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34185fc6:	0c1b      	lsrs	r3, r3, #16
34185fc8:	b2db      	uxtb	r3, r3
34185fca:	3301      	adds	r3, #1
}
34185fcc:	4618      	mov	r0, r3
34185fce:	46bd      	mov	sp, r7
34185fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34185fd4:	4770      	bx	lr
34185fd6:	bf00      	nop
34185fd8:	56028000 	.word	0x56028000

34185fdc <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
34185fdc:	b480      	push	{r7}
34185fde:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34185fe0:	4b04      	ldr	r3, [pc, #16]	@ (34185ff4 <LL_RCC_IC20_Enable+0x18>)
34185fe2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
34185fe6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34185fea:	bf00      	nop
34185fec:	46bd      	mov	sp, r7
34185fee:	f85d 7b04 	ldr.w	r7, [sp], #4
34185ff2:	4770      	bx	lr
34185ff4:	56028000 	.word	0x56028000

34185ff8 <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
34185ff8:	b480      	push	{r7}
34185ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34185ffc:	4b07      	ldr	r3, [pc, #28]	@ (3418601c <LL_RCC_IC20_IsEnabled+0x24>)
34185ffe:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34186002:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34186006:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
3418600a:	d101      	bne.n	34186010 <LL_RCC_IC20_IsEnabled+0x18>
3418600c:	2301      	movs	r3, #1
3418600e:	e000      	b.n	34186012 <LL_RCC_IC20_IsEnabled+0x1a>
34186010:	2300      	movs	r3, #0
}
34186012:	4618      	mov	r0, r3
34186014:	46bd      	mov	sp, r7
34186016:	f85d 7b04 	ldr.w	r7, [sp], #4
3418601a:	4770      	bx	lr
3418601c:	56028000 	.word	0x56028000

34186020 <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
34186020:	b480      	push	{r7}
34186022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34186024:	4b04      	ldr	r3, [pc, #16]	@ (34186038 <LL_RCC_IC20_GetSource+0x18>)
34186026:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418602a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418602e:	4618      	mov	r0, r3
34186030:	46bd      	mov	sp, r7
34186032:	f85d 7b04 	ldr.w	r7, [sp], #4
34186036:	4770      	bx	lr
34186038:	56028000 	.word	0x56028000

3418603c <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
3418603c:	b480      	push	{r7}
3418603e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34186040:	4b05      	ldr	r3, [pc, #20]	@ (34186058 <LL_RCC_IC20_GetDivider+0x1c>)
34186042:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34186046:	0c1b      	lsrs	r3, r3, #16
34186048:	b2db      	uxtb	r3, r3
3418604a:	3301      	adds	r3, #1
}
3418604c:	4618      	mov	r0, r3
3418604e:	46bd      	mov	sp, r7
34186050:	f85d 7b04 	ldr.w	r7, [sp], #4
34186054:	4770      	bx	lr
34186056:	bf00      	nop
34186058:	56028000 	.word	0x56028000

3418605c <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
3418605c:	b480      	push	{r7}
3418605e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34186060:	4b04      	ldr	r3, [pc, #16]	@ (34186074 <LL_RCC_CLKP_Enable+0x18>)
34186062:	2240      	movs	r2, #64	@ 0x40
34186064:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
34186068:	bf00      	nop
3418606a:	46bd      	mov	sp, r7
3418606c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186070:	4770      	bx	lr
34186072:	bf00      	nop
34186074:	56028000 	.word	0x56028000

34186078 <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
34186078:	b480      	push	{r7}
3418607a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
3418607c:	4b07      	ldr	r3, [pc, #28]	@ (3418609c <LL_RCC_CLKP_IsEnabled+0x24>)
3418607e:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
34186082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34186086:	2b40      	cmp	r3, #64	@ 0x40
34186088:	d101      	bne.n	3418608e <LL_RCC_CLKP_IsEnabled+0x16>
3418608a:	2301      	movs	r3, #1
3418608c:	e000      	b.n	34186090 <LL_RCC_CLKP_IsEnabled+0x18>
3418608e:	2300      	movs	r3, #0
}
34186090:	4618      	mov	r0, r3
34186092:	46bd      	mov	sp, r7
34186094:	f85d 7b04 	ldr.w	r7, [sp], #4
34186098:	4770      	bx	lr
3418609a:	bf00      	nop
3418609c:	56028000 	.word	0x56028000

341860a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
341860a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
341860a4:	b0f2      	sub	sp, #456	@ 0x1c8
341860a6:	af00      	add	r7, sp, #0
341860a8:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
341860ac:	2300      	movs	r3, #0
341860ae:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
341860b2:	2300      	movs	r3, #0
341860b4:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
341860b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860bc:	e9d3 2300 	ldrd	r2, r3, [r3]
341860c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
341860c4:	2500      	movs	r5, #0
341860c6:	ea54 0305 	orrs.w	r3, r4, r5
341860ca:	d06c      	beq.n	341861a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
341860cc:	f7ff f91e 	bl	3418530c <LL_RCC_GetRTCClockSource>
341860d0:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
341860d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
341860d8:	2b00      	cmp	r3, #0
341860da:	d018      	beq.n	3418610e <HAL_RCCEx_PeriphCLKConfig+0x6e>
341860dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860e0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
341860e4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
341860e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
341860ec:	4293      	cmp	r3, r2
341860ee:	d00e      	beq.n	3418610e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
341860f0:	4bc3      	ldr	r3, [pc, #780]	@ (34186400 <HAL_RCCEx_PeriphCLKConfig+0x360>)
341860f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341860f4:	4ac2      	ldr	r2, [pc, #776]	@ (34186400 <HAL_RCCEx_PeriphCLKConfig+0x360>)
341860f6:	f043 0301 	orr.w	r3, r3, #1
341860fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
341860fc:	4bc0      	ldr	r3, [pc, #768]	@ (34186400 <HAL_RCCEx_PeriphCLKConfig+0x360>)
341860fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34186100:	f003 0301 	and.w	r3, r3, #1
34186104:	2b00      	cmp	r3, #0
34186106:	d102      	bne.n	3418610e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        ret = HAL_ERROR;
34186108:	2301      	movs	r3, #1
3418610a:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
3418610e:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34186112:	2b00      	cmp	r3, #0
34186114:	d143      	bne.n	3418619e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
34186116:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418611a:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3418611e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34186122:	d117      	bne.n	34186154 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34186124:	f7fc f960 	bl	341823e8 <HAL_GetTick>
34186128:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
3418612c:	e00d      	b.n	3418614a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3418612e:	f7fc f95b 	bl	341823e8 <HAL_GetTick>
34186132:	4602      	mov	r2, r0
34186134:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
34186138:	1ad2      	subs	r2, r2, r3
3418613a:	f241 3388 	movw	r3, #5000	@ 0x1388
3418613e:	429a      	cmp	r2, r3
34186140:	d903      	bls.n	3418614a <HAL_RCCEx_PeriphCLKConfig+0xaa>
          {
            ret = HAL_TIMEOUT;
34186142:	2303      	movs	r3, #3
34186144:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
            break;
34186148:	e004      	b.n	34186154 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        while (LL_RCC_LSE_IsReady() == 0U)
3418614a:	f7fe fcf1 	bl	34184b30 <LL_RCC_LSE_IsReady>
3418614e:	4603      	mov	r3, r0
34186150:	2b00      	cmp	r3, #0
34186152:	d0ec      	beq.n	3418612e <HAL_RCCEx_PeriphCLKConfig+0x8e>
          }
        }
      }

      if (ret == HAL_OK)
34186154:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34186158:	2b00      	cmp	r3, #0
3418615a:	d11b      	bne.n	34186194 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
3418615c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186160:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34186164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34186168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418616c:	d108      	bne.n	34186180 <HAL_RCCEx_PeriphCLKConfig+0xe0>
3418616e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186172:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34186176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3418617a:	4618      	mov	r0, r3
3418617c:	f7ff f8d4 	bl	34185328 <LL_RCC_SetRTC_HSEPrescaler>
34186180:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186184:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34186188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3418618c:	4618      	mov	r0, r3
3418618e:	f7ff f8a7 	bl	341852e0 <LL_RCC_SetRTCClockSource>
34186192:	e008      	b.n	341861a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
      else
      {
        /* set overall return value */
        status = ret;
34186194:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34186198:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
3418619c:	e003      	b.n	341861a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
3418619e:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
341861a2:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
341861a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861aa:	e9d3 2300 	ldrd	r2, r3, [r3]
341861ae:	f002 0804 	and.w	r8, r2, #4
341861b2:	f04f 0900 	mov.w	r9, #0
341861b6:	ea58 0309 	orrs.w	r3, r8, r9
341861ba:	f000 809b 	beq.w	341862f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
341861be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341861c6:	2b04      	cmp	r3, #4
341861c8:	d116      	bne.n	341861f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
341861ca:	4b8e      	ldr	r3, [pc, #568]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
341861cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341861d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341861d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341861d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
341861de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341861e4:	3b01      	subs	r3, #1
341861e6:	041b      	lsls	r3, r3, #16
341861e8:	4313      	orrs	r3, r2
341861ea:	4a86      	ldr	r2, [pc, #536]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
341861ec:	430b      	orrs	r3, r1
341861ee:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
341861f2:	f7ff fbb3 	bl	3418595c <LL_RCC_IC5_Enable>
341861f6:	e076      	b.n	341862e6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
341861f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34186200:	2b05      	cmp	r3, #5
34186202:	d116      	bne.n	34186232 <HAL_RCCEx_PeriphCLKConfig+0x192>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34186204:	4b7f      	ldr	r3, [pc, #508]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34186206:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418620a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418620e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186212:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186216:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34186218:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418621c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418621e:	3b01      	subs	r3, #1
34186220:	041b      	lsls	r3, r3, #16
34186222:	4313      	orrs	r3, r2
34186224:	4a77      	ldr	r2, [pc, #476]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34186226:	430b      	orrs	r3, r1
34186228:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418622c:	f7ff fc96 	bl	34185b5c <LL_RCC_IC10_Enable>
34186230:	e059      	b.n	341862e6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
34186232:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186236:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418623a:	2b06      	cmp	r3, #6
3418623c:	d116      	bne.n	3418626c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418623e:	4b71      	ldr	r3, [pc, #452]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34186240:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186244:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186248:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418624c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186250:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186252:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186258:	3b01      	subs	r3, #1
3418625a:	041b      	lsls	r3, r3, #16
3418625c:	4313      	orrs	r3, r2
3418625e:	4a69      	ldr	r2, [pc, #420]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34186260:	430b      	orrs	r3, r1
34186262:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186266:	f7ff fd79 	bl	34185d5c <LL_RCC_IC15_Enable>
3418626a:	e03c      	b.n	341862e6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
3418626c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186270:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34186274:	2b03      	cmp	r3, #3
34186276:	d118      	bne.n	341862aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34186278:	4b62      	ldr	r3, [pc, #392]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418627a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3418627e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186282:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186286:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418628a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3418628e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186292:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
34186296:	3b01      	subs	r3, #1
34186298:	041b      	lsls	r3, r3, #16
3418629a:	4313      	orrs	r3, r2
3418629c:	4a59      	ldr	r2, [pc, #356]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418629e:	430b      	orrs	r3, r1
341862a0:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
341862a4:	f7ff fe5a 	bl	34185f5c <LL_RCC_IC19_Enable>
341862a8:	e01d      	b.n	341862e6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
341862aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341862b2:	2b07      	cmp	r3, #7
341862b4:	d117      	bne.n	341862e6 <HAL_RCCEx_PeriphCLKConfig+0x246>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
341862b6:	4b53      	ldr	r3, [pc, #332]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
341862b8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
341862bc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341862c0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341862c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
341862cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
341862d4:	3b01      	subs	r3, #1
341862d6:	041b      	lsls	r3, r3, #16
341862d8:	4313      	orrs	r3, r2
341862da:	4a4a      	ldr	r2, [pc, #296]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
341862dc:	430b      	orrs	r3, r1
341862de:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
341862e2:	f7ff fe7b 	bl	34185fdc <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
341862e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341862ee:	4618      	mov	r0, r3
341862f0:	f7fe fcd2 	bl	34184c98 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
341862f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862f8:	e9d3 2300 	ldrd	r2, r3, [r3]
341862fc:	f04f 0a00 	mov.w	sl, #0
34186300:	f403 0b80 	and.w	fp, r3, #4194304	@ 0x400000
34186304:	ea5a 030b 	orrs.w	r3, sl, fp
34186308:	d04b      	beq.n	341863a2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3418630a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418630e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34186312:	4b3d      	ldr	r3, [pc, #244]	@ (34186408 <HAL_RCCEx_PeriphCLKConfig+0x368>)
34186314:	429a      	cmp	r2, r3
34186316:	d116      	bne.n	34186346 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34186318:	4b3a      	ldr	r3, [pc, #232]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418631a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418631e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186322:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186326:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418632a:	699a      	ldr	r2, [r3, #24]
3418632c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186330:	69db      	ldr	r3, [r3, #28]
34186332:	3b01      	subs	r3, #1
34186334:	041b      	lsls	r3, r3, #16
34186336:	4313      	orrs	r3, r2
34186338:	4a32      	ldr	r2, [pc, #200]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418633a:	430b      	orrs	r3, r1
3418633c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34186340:	f7ff fa8c 	bl	3418585c <LL_RCC_IC3_Enable>
34186344:	e026      	b.n	34186394 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34186346:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418634a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3418634e:	4b2f      	ldr	r3, [pc, #188]	@ (3418640c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
34186350:	429a      	cmp	r2, r3
34186352:	d116      	bne.n	34186382 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34186354:	4b2b      	ldr	r3, [pc, #172]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34186356:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418635a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418635e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186362:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186366:	6a1a      	ldr	r2, [r3, #32]
34186368:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418636c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418636e:	3b01      	subs	r3, #1
34186370:	041b      	lsls	r3, r3, #16
34186372:	4313      	orrs	r3, r2
34186374:	4a23      	ldr	r2, [pc, #140]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34186376:	430b      	orrs	r3, r1
34186378:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418637c:	f7ff faae 	bl	341858dc <LL_RCC_IC4_Enable>
34186380:	e008      	b.n	34186394 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
34186382:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186386:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3418638a:	4b21      	ldr	r3, [pc, #132]	@ (34186410 <HAL_RCCEx_PeriphCLKConfig+0x370>)
3418638c:	429a      	cmp	r2, r3
3418638e:	d101      	bne.n	34186394 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      LL_RCC_CLKP_Enable();
34186390:	f7ff fe64 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
34186394:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186398:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
3418639c:	4618      	mov	r0, r3
3418639e:	f7fe fe0b 	bl	34184fb8 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
341863a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863a6:	e9d3 2300 	ldrd	r2, r3, [r3]
341863aa:	2100      	movs	r1, #0
341863ac:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
341863b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
341863b4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
341863b8:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
341863bc:	4603      	mov	r3, r0
341863be:	460a      	mov	r2, r1
341863c0:	4313      	orrs	r3, r2
341863c2:	d057      	beq.n	34186474 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
341863c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863c8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
341863cc:	4b11      	ldr	r3, [pc, #68]	@ (34186414 <HAL_RCCEx_PeriphCLKConfig+0x374>)
341863ce:	429a      	cmp	r2, r3
341863d0:	d122      	bne.n	34186418 <HAL_RCCEx_PeriphCLKConfig+0x378>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
341863d2:	4b0c      	ldr	r3, [pc, #48]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
341863d4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341863d8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341863dc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341863e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863e4:	699a      	ldr	r2, [r3, #24]
341863e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863ea:	69db      	ldr	r3, [r3, #28]
341863ec:	3b01      	subs	r3, #1
341863ee:	041b      	lsls	r3, r3, #16
341863f0:	4313      	orrs	r3, r2
341863f2:	4a04      	ldr	r2, [pc, #16]	@ (34186404 <HAL_RCCEx_PeriphCLKConfig+0x364>)
341863f4:	430b      	orrs	r3, r1
341863f6:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
341863fa:	f7ff fa2f 	bl	3418585c <LL_RCC_IC3_Enable>
341863fe:	e032      	b.n	34186466 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
34186400:	56024800 	.word	0x56024800
34186404:	56028000 	.word	0x56028000
34186408:	03020014 	.word	0x03020014
3418640c:	03030014 	.word	0x03030014
34186410:	03010014 	.word	0x03010014
34186414:	03020414 	.word	0x03020414
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
34186418:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418641c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34186420:	4bc5      	ldr	r3, [pc, #788]	@ (34186738 <HAL_RCCEx_PeriphCLKConfig+0x698>)
34186422:	429a      	cmp	r2, r3
34186424:	d116      	bne.n	34186454 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34186426:	4bc5      	ldr	r3, [pc, #788]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34186428:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418642c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186430:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186434:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186438:	6a1a      	ldr	r2, [r3, #32]
3418643a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34186440:	3b01      	subs	r3, #1
34186442:	041b      	lsls	r3, r3, #16
34186444:	4313      	orrs	r3, r2
34186446:	4abd      	ldr	r2, [pc, #756]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34186448:	430b      	orrs	r3, r1
3418644a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418644e:	f7ff fa45 	bl	341858dc <LL_RCC_IC4_Enable>
34186452:	e008      	b.n	34186466 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
34186454:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186458:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3418645c:	4bb8      	ldr	r3, [pc, #736]	@ (34186740 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
3418645e:	429a      	cmp	r2, r3
34186460:	d101      	bne.n	34186466 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    {
      LL_RCC_CLKP_Enable();
34186462:	f7ff fdfb 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
34186466:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418646a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418646e:	4618      	mov	r0, r3
34186470:	f7fe fda2 	bl	34184fb8 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
34186474:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186478:	e9d3 2300 	ldrd	r2, r3, [r3]
3418647c:	2100      	movs	r1, #0
3418647e:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
34186482:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34186486:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
3418648a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
3418648e:	4603      	mov	r3, r0
34186490:	460a      	mov	r2, r1
34186492:	4313      	orrs	r3, r2
34186494:	d04b      	beq.n	3418652e <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
34186496:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418649a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3418649e:	4ba9      	ldr	r3, [pc, #676]	@ (34186744 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
341864a0:	429a      	cmp	r2, r3
341864a2:	d116      	bne.n	341864d2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
341864a4:	4ba5      	ldr	r3, [pc, #660]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341864a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341864aa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341864ae:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341864b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864b6:	699a      	ldr	r2, [r3, #24]
341864b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864bc:	69db      	ldr	r3, [r3, #28]
341864be:	3b01      	subs	r3, #1
341864c0:	041b      	lsls	r3, r3, #16
341864c2:	4313      	orrs	r3, r2
341864c4:	4a9d      	ldr	r2, [pc, #628]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341864c6:	430b      	orrs	r3, r1
341864c8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
341864cc:	f7ff f9c6 	bl	3418585c <LL_RCC_IC3_Enable>
341864d0:	e026      	b.n	34186520 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
341864d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864d6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
341864da:	4b9b      	ldr	r3, [pc, #620]	@ (34186748 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
341864dc:	429a      	cmp	r2, r3
341864de:	d116      	bne.n	3418650e <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341864e0:	4b96      	ldr	r3, [pc, #600]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341864e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341864e6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341864ea:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341864ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864f2:	6a1a      	ldr	r2, [r3, #32]
341864f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341864fa:	3b01      	subs	r3, #1
341864fc:	041b      	lsls	r3, r3, #16
341864fe:	4313      	orrs	r3, r2
34186500:	4a8e      	ldr	r2, [pc, #568]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34186502:	430b      	orrs	r3, r1
34186504:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34186508:	f7ff f9e8 	bl	341858dc <LL_RCC_IC4_Enable>
3418650c:	e008      	b.n	34186520 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
3418650e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186512:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34186516:	4b8d      	ldr	r3, [pc, #564]	@ (3418674c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
34186518:	429a      	cmp	r2, r3
3418651a:	d101      	bne.n	34186520 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      LL_RCC_CLKP_Enable();
3418651c:	f7ff fd9e 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
34186520:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186524:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34186528:	4618      	mov	r0, r3
3418652a:	f7fe fd45 	bl	34184fb8 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3418652e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186532:	e9d3 2300 	ldrd	r2, r3, [r3]
34186536:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
3418653a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
3418653e:	2300      	movs	r3, #0
34186540:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
34186544:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
34186548:	4603      	mov	r3, r0
3418654a:	460a      	mov	r2, r1
3418654c:	4313      	orrs	r3, r2
3418654e:	d048      	beq.n	341865e2 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34186550:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186554:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34186558:	2b20      	cmp	r3, #32
3418655a:	d116      	bne.n	3418658a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3418655c:	4b77      	ldr	r3, [pc, #476]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418655e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34186562:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186566:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418656a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418656e:	699a      	ldr	r2, [r3, #24]
34186570:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186574:	69db      	ldr	r3, [r3, #28]
34186576:	3b01      	subs	r3, #1
34186578:	041b      	lsls	r3, r3, #16
3418657a:	4313      	orrs	r3, r2
3418657c:	4a6f      	ldr	r2, [pc, #444]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418657e:	430b      	orrs	r3, r1
34186580:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34186584:	f7ff f96a 	bl	3418585c <LL_RCC_IC3_Enable>
34186588:	e024      	b.n	341865d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
3418658a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418658e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34186592:	2b30      	cmp	r3, #48	@ 0x30
34186594:	d116      	bne.n	341865c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34186596:	4b69      	ldr	r3, [pc, #420]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34186598:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418659c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341865a0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341865a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865a8:	6a1a      	ldr	r2, [r3, #32]
341865aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341865b0:	3b01      	subs	r3, #1
341865b2:	041b      	lsls	r3, r3, #16
341865b4:	4313      	orrs	r3, r2
341865b6:	4a61      	ldr	r2, [pc, #388]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341865b8:	430b      	orrs	r3, r1
341865ba:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
341865be:	f7ff f98d 	bl	341858dc <LL_RCC_IC4_Enable>
341865c2:	e007      	b.n	341865d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
341865c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341865cc:	2b10      	cmp	r3, #16
341865ce:	d101      	bne.n	341865d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      LL_RCC_CLKP_Enable();
341865d0:	f7ff fd44 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
341865d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341865dc:	4618      	mov	r0, r3
341865de:	f7fe fc03 	bl	34184de8 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
341865e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865e6:	e9d3 2300 	ldrd	r2, r3, [r3]
341865ea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
341865ee:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
341865f2:	2300      	movs	r3, #0
341865f4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
341865f8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
341865fc:	4603      	mov	r3, r0
341865fe:	460a      	mov	r2, r1
34186600:	4313      	orrs	r3, r2
34186602:	d04b      	beq.n	3418669c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34186604:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186608:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3418660c:	4b50      	ldr	r3, [pc, #320]	@ (34186750 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
3418660e:	429a      	cmp	r2, r3
34186610:	d116      	bne.n	34186640 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34186612:	4b4a      	ldr	r3, [pc, #296]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34186614:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34186618:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418661c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186620:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186624:	6a1a      	ldr	r2, [r3, #32]
34186626:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418662a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418662c:	3b01      	subs	r3, #1
3418662e:	041b      	lsls	r3, r3, #16
34186630:	4313      	orrs	r3, r2
34186632:	4a42      	ldr	r2, [pc, #264]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34186634:	430b      	orrs	r3, r1
34186636:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418663a:	f7ff f94f 	bl	341858dc <LL_RCC_IC4_Enable>
3418663e:	e026      	b.n	3418668e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34186640:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186644:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34186648:	4b42      	ldr	r3, [pc, #264]	@ (34186754 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
3418664a:	429a      	cmp	r2, r3
3418664c:	d116      	bne.n	3418667c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3418664e:	4b3b      	ldr	r3, [pc, #236]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34186650:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34186654:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186658:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418665c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186660:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34186662:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34186668:	3b01      	subs	r3, #1
3418666a:	041b      	lsls	r3, r3, #16
3418666c:	4313      	orrs	r3, r2
3418666e:	4a33      	ldr	r2, [pc, #204]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34186670:	430b      	orrs	r3, r1
34186672:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34186676:	f7ff f971 	bl	3418595c <LL_RCC_IC5_Enable>
3418667a:	e008      	b.n	3418668e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3418667c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186680:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34186684:	4b34      	ldr	r3, [pc, #208]	@ (34186758 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
34186686:	429a      	cmp	r2, r3
34186688:	d101      	bne.n	3418668e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      LL_RCC_CLKP_Enable();
3418668a:	f7ff fce7 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
3418668e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186692:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
34186696:	4618      	mov	r0, r3
34186698:	f7fe fc57 	bl	34184f4a <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
3418669c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866a0:	e9d3 2300 	ldrd	r2, r3, [r3]
341866a4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
341866a8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
341866ac:	2300      	movs	r3, #0
341866ae:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
341866b2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
341866b6:	4603      	mov	r3, r0
341866b8:	460a      	mov	r2, r1
341866ba:	4313      	orrs	r3, r2
341866bc:	d062      	beq.n	34186784 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
341866be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866c2:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
341866c6:	4b25      	ldr	r3, [pc, #148]	@ (3418675c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
341866c8:	429a      	cmp	r2, r3
341866ca:	d116      	bne.n	341866fa <HAL_RCCEx_PeriphCLKConfig+0x65a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341866cc:	4b1b      	ldr	r3, [pc, #108]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341866ce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341866d2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341866d6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341866da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866de:	6a1a      	ldr	r2, [r3, #32]
341866e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341866e6:	3b01      	subs	r3, #1
341866e8:	041b      	lsls	r3, r3, #16
341866ea:	4313      	orrs	r3, r2
341866ec:	4a13      	ldr	r2, [pc, #76]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341866ee:	430b      	orrs	r3, r1
341866f0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
341866f4:	f7ff f8f2 	bl	341858dc <LL_RCC_IC4_Enable>
341866f8:	e03d      	b.n	34186776 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
341866fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866fe:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34186702:	4b17      	ldr	r3, [pc, #92]	@ (34186760 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
34186704:	429a      	cmp	r2, r3
34186706:	d12d      	bne.n	34186764 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34186708:	4b0c      	ldr	r3, [pc, #48]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418670a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418670e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186712:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186716:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418671a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418671c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34186722:	3b01      	subs	r3, #1
34186724:	041b      	lsls	r3, r3, #16
34186726:	4313      	orrs	r3, r2
34186728:	4a04      	ldr	r2, [pc, #16]	@ (3418673c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418672a:	430b      	orrs	r3, r1
3418672c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34186730:	f7ff f914 	bl	3418595c <LL_RCC_IC5_Enable>
34186734:	e01f      	b.n	34186776 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
34186736:	bf00      	nop
34186738:	03030414 	.word	0x03030414
3418673c:	56028000 	.word	0x56028000
34186740:	03010414 	.word	0x03010414
34186744:	03020814 	.word	0x03020814
34186748:	03030814 	.word	0x03030814
3418674c:	03010814 	.word	0x03010814
34186750:	0302001c 	.word	0x0302001c
34186754:	0303001c 	.word	0x0303001c
34186758:	0301001c 	.word	0x0301001c
3418675c:	0302041c 	.word	0x0302041c
34186760:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
34186764:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186768:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3418676c:	4bb3      	ldr	r3, [pc, #716]	@ (34186a3c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
3418676e:	429a      	cmp	r2, r3
34186770:	d101      	bne.n	34186776 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      LL_RCC_CLKP_Enable();
34186772:	f7ff fc73 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
34186776:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418677a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
3418677e:	4618      	mov	r0, r3
34186780:	f7fe fbe3 	bl	34184f4a <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
34186784:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186788:	e9d3 2300 	ldrd	r2, r3, [r3]
3418678c:	f002 0301 	and.w	r3, r2, #1
34186790:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
34186794:	2300      	movs	r3, #0
34186796:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
3418679a:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
3418679e:	4603      	mov	r3, r0
341867a0:	460a      	mov	r2, r1
341867a2:	4313      	orrs	r3, r2
341867a4:	d057      	beq.n	34186856 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
341867a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341867ae:	2b20      	cmp	r3, #32
341867b0:	d116      	bne.n	341867e0 <HAL_RCCEx_PeriphCLKConfig+0x740>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341867b2:	4ba3      	ldr	r3, [pc, #652]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341867b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341867b8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341867bc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341867c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341867c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341867cc:	3b01      	subs	r3, #1
341867ce:	041b      	lsls	r3, r3, #16
341867d0:	4313      	orrs	r3, r2
341867d2:	4a9b      	ldr	r2, [pc, #620]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341867d4:	430b      	orrs	r3, r1
341867d6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341867da:	f7ff f8ff 	bl	341859dc <LL_RCC_IC7_Enable>
341867de:	e024      	b.n	3418682a <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
341867e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341867e8:	2b30      	cmp	r3, #48	@ 0x30
341867ea:	d116      	bne.n	3418681a <HAL_RCCEx_PeriphCLKConfig+0x77a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341867ec:	4b94      	ldr	r3, [pc, #592]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341867ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341867f2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341867f6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341867fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186800:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186806:	3b01      	subs	r3, #1
34186808:	041b      	lsls	r3, r3, #16
3418680a:	4313      	orrs	r3, r2
3418680c:	4a8c      	ldr	r2, [pc, #560]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418680e:	430b      	orrs	r3, r1
34186810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186814:	f7ff f922 	bl	34185a5c <LL_RCC_IC8_Enable>
34186818:	e007      	b.n	3418682a <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
3418681a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418681e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34186822:	2b10      	cmp	r3, #16
34186824:	d101      	bne.n	3418682a <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      LL_RCC_CLKP_Enable();
34186826:	f7ff fc19 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3418682a:	4b85      	ldr	r3, [pc, #532]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418682c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34186830:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
34186834:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
34186838:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418683c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
34186840:	3b01      	subs	r3, #1
34186842:	021a      	lsls	r2, r3, #8
34186844:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186848:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418684c:	4313      	orrs	r3, r2
3418684e:	4a7c      	ldr	r2, [pc, #496]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34186850:	430b      	orrs	r3, r1
34186852:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
34186856:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418685a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418685e:	f002 0302 	and.w	r3, r2, #2
34186862:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
34186866:	2300      	movs	r3, #0
34186868:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
3418686c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
34186870:	4603      	mov	r3, r0
34186872:	460a      	mov	r2, r1
34186874:	4313      	orrs	r3, r2
34186876:	d048      	beq.n	3418690a <HAL_RCCEx_PeriphCLKConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
34186878:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418687c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34186880:	2b02      	cmp	r3, #2
34186882:	d116      	bne.n	341868b2 <HAL_RCCEx_PeriphCLKConfig+0x812>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34186884:	4b6e      	ldr	r3, [pc, #440]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34186886:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418688a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418688e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186892:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186896:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34186898:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418689c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418689e:	3b01      	subs	r3, #1
341868a0:	041b      	lsls	r3, r3, #16
341868a2:	4313      	orrs	r3, r2
341868a4:	4a66      	ldr	r2, [pc, #408]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341868a6:	430b      	orrs	r3, r1
341868a8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341868ac:	f7ff f896 	bl	341859dc <LL_RCC_IC7_Enable>
341868b0:	e024      	b.n	341868fc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
341868b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341868ba:	2b03      	cmp	r3, #3
341868bc:	d116      	bne.n	341868ec <HAL_RCCEx_PeriphCLKConfig+0x84c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341868be:	4b60      	ldr	r3, [pc, #384]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341868c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341868c4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341868c8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341868cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341868d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341868d8:	3b01      	subs	r3, #1
341868da:	041b      	lsls	r3, r3, #16
341868dc:	4313      	orrs	r3, r2
341868de:	4a58      	ldr	r2, [pc, #352]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341868e0:	430b      	orrs	r3, r1
341868e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341868e6:	f7ff f8b9 	bl	34185a5c <LL_RCC_IC8_Enable>
341868ea:	e007      	b.n	341868fc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
341868ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868f0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341868f4:	2b01      	cmp	r3, #1
341868f6:	d101      	bne.n	341868fc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      LL_RCC_CLKP_Enable();
341868f8:	f7ff fbb0 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
341868fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186900:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34186904:	4618      	mov	r0, r3
34186906:	f7fe f9b1 	bl	34184c6c <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3418690a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418690e:	e9d3 2300 	ldrd	r2, r3, [r3]
34186912:	f002 0308 	and.w	r3, r2, #8
34186916:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
3418691a:	2300      	movs	r3, #0
3418691c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
34186920:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
34186924:	4603      	mov	r3, r0
34186926:	460a      	mov	r2, r1
34186928:	4313      	orrs	r3, r2
3418692a:	d017      	beq.n	3418695c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
3418692c:	4b44      	ldr	r3, [pc, #272]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418692e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34186932:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186936:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418693a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418693e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
34186942:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186946:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418694a:	3b01      	subs	r3, #1
3418694c:	041b      	lsls	r3, r3, #16
3418694e:	4313      	orrs	r3, r2
34186950:	4a3b      	ldr	r2, [pc, #236]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34186952:	430b      	orrs	r3, r1
34186954:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
34186958:	f7ff fac0 	bl	34185edc <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
3418695c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186960:	e9d3 2300 	ldrd	r2, r3, [r3]
34186964:	f002 0310 	and.w	r3, r2, #16
34186968:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
3418696c:	2300      	movs	r3, #0
3418696e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
34186972:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
34186976:	4603      	mov	r3, r0
34186978:	460a      	mov	r2, r1
3418697a:	4313      	orrs	r3, r2
3418697c:	d02f      	beq.n	341869de <HAL_RCCEx_PeriphCLKConfig+0x93e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
3418697e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186982:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34186986:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418698a:	d118      	bne.n	341869be <HAL_RCCEx_PeriphCLKConfig+0x91e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
3418698c:	4b2c      	ldr	r3, [pc, #176]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418698e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34186992:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186996:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418699a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418699e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
341869a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
341869aa:	3b01      	subs	r3, #1
341869ac:	041b      	lsls	r3, r3, #16
341869ae:	4313      	orrs	r3, r2
341869b0:	4a23      	ldr	r2, [pc, #140]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341869b2:	430b      	orrs	r3, r1
341869b4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
341869b8:	f7ff fa50 	bl	34185e5c <LL_RCC_IC17_Enable>
341869bc:	e008      	b.n	341869d0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
341869be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341869c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341869ca:	d101      	bne.n	341869d0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      LL_RCC_CLKP_Enable();
341869cc:	f7ff fb46 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
341869d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869d4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341869d8:	4618      	mov	r0, r3
341869da:	f7fe f973 	bl	34184cc4 <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
341869de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869e2:	e9d3 2300 	ldrd	r2, r3, [r3]
341869e6:	f002 0320 	and.w	r3, r2, #32
341869ea:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
341869ee:	2300      	movs	r3, #0
341869f0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
341869f4:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
341869f8:	4603      	mov	r3, r0
341869fa:	460a      	mov	r2, r1
341869fc:	4313      	orrs	r3, r2
341869fe:	d031      	beq.n	34186a64 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34186a00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a04:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34186a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34186a0c:	d11a      	bne.n	34186a44 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34186a0e:	4b0c      	ldr	r3, [pc, #48]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34186a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34186a14:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186a18:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186a1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
34186a22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34186a28:	3b01      	subs	r3, #1
34186a2a:	041b      	lsls	r3, r3, #16
34186a2c:	4313      	orrs	r3, r2
34186a2e:	4a04      	ldr	r2, [pc, #16]	@ (34186a40 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34186a30:	430b      	orrs	r3, r1
34186a32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
34186a36:	f7ff f8d1 	bl	34185bdc <LL_RCC_IC12_Enable>
34186a3a:	e00c      	b.n	34186a56 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
34186a3c:	0301041c 	.word	0x0301041c
34186a40:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
34186a44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a48:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34186a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34186a50:	d101      	bne.n	34186a56 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      LL_RCC_CLKP_Enable();
34186a52:	f7ff fb03 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
34186a56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a5a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34186a5e:	4618      	mov	r0, r3
34186a60:	f7fe f946 	bl	34184cf0 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
34186a64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a68:	e9d3 2300 	ldrd	r2, r3, [r3]
34186a6c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
34186a70:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
34186a74:	2300      	movs	r3, #0
34186a76:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
34186a7a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
34186a7e:	4603      	mov	r3, r0
34186a80:	460a      	mov	r2, r1
34186a82:	4313      	orrs	r3, r2
34186a84:	d006      	beq.n	34186a94 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
34186a86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a8a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34186a8e:	4618      	mov	r0, r3
34186a90:	f7fe f944 	bl	34184d1c <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
34186a94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a98:	e9d3 2300 	ldrd	r2, r3, [r3]
34186a9c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
34186aa0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
34186aa4:	2300      	movs	r3, #0
34186aa6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
34186aaa:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
34186aae:	4603      	mov	r3, r0
34186ab0:	460a      	mov	r2, r1
34186ab2:	4313      	orrs	r3, r2
34186ab4:	d006      	beq.n	34186ac4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
34186ab6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186aba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34186abe:	4618      	mov	r0, r3
34186ac0:	f7fe f950 	bl	34184d64 <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
34186ac4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
34186acc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
34186ad0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
34186ad4:	2300      	movs	r3, #0
34186ad6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
34186ada:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
34186ade:	4603      	mov	r3, r0
34186ae0:	460a      	mov	r2, r1
34186ae2:	4313      	orrs	r3, r2
34186ae4:	d006      	beq.n	34186af4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
34186ae6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186aea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34186aee:	4618      	mov	r0, r3
34186af0:	f7fe f94e 	bl	34184d90 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34186af4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186af8:	e9d3 2300 	ldrd	r2, r3, [r3]
34186afc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
34186b00:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
34186b04:	2300      	movs	r3, #0
34186b06:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
34186b0a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
34186b0e:	4603      	mov	r3, r0
34186b10:	460a      	mov	r2, r1
34186b12:	4313      	orrs	r3, r2
34186b14:	d038      	beq.n	34186b88 <HAL_RCCEx_PeriphCLKConfig+0xae8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34186b16:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b1a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34186b1e:	2b02      	cmp	r3, #2
34186b20:	d116      	bne.n	34186b50 <HAL_RCCEx_PeriphCLKConfig+0xab0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
34186b22:	4bbc      	ldr	r3, [pc, #752]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34186b28:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186b2c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186b30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b34:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
34186b36:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34186b3c:	3b01      	subs	r3, #1
34186b3e:	041b      	lsls	r3, r3, #16
34186b40:	4313      	orrs	r3, r2
34186b42:	4ab4      	ldr	r2, [pc, #720]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186b44:	430b      	orrs	r3, r1
34186b46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
34186b4a:	f7ff f887 	bl	34185c5c <LL_RCC_IC13_Enable>
34186b4e:	e007      	b.n	34186b60 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
34186b50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34186b58:	2b01      	cmp	r3, #1
34186b5a:	d101      	bne.n	34186b60 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    {
      LL_RCC_CLKP_Enable();
34186b5c:	f7ff fa7e 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34186b60:	4bac      	ldr	r3, [pc, #688]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186b62:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186b66:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
34186b6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186b72:	3b01      	subs	r3, #1
34186b74:	011a      	lsls	r2, r3, #4
34186b76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34186b7e:	4313      	orrs	r3, r2
34186b80:	4aa4      	ldr	r2, [pc, #656]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186b82:	430b      	orrs	r3, r1
34186b84:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34186b88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
34186b90:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
34186b94:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
34186b98:	2300      	movs	r3, #0
34186b9a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
34186b9e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
34186ba2:	4603      	mov	r3, r0
34186ba4:	460a      	mov	r2, r1
34186ba6:	4313      	orrs	r3, r2
34186ba8:	d02d      	beq.n	34186c06 <HAL_RCCEx_PeriphCLKConfig+0xb66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
34186baa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186bb2:	2b02      	cmp	r3, #2
34186bb4:	d118      	bne.n	34186be8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34186bb6:	4b97      	ldr	r3, [pc, #604]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186bb8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34186bbc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186bc0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186bc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bc8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
34186bcc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
34186bd4:	3b01      	subs	r3, #1
34186bd6:	041b      	lsls	r3, r3, #16
34186bd8:	4313      	orrs	r3, r2
34186bda:	4a8e      	ldr	r2, [pc, #568]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186bdc:	430b      	orrs	r3, r1
34186bde:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
34186be2:	f7ff f9bb 	bl	34185f5c <LL_RCC_IC19_Enable>
34186be6:	e007      	b.n	34186bf8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
34186be8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186bf0:	2b01      	cmp	r3, #1
34186bf2:	d101      	bne.n	34186bf8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
      LL_RCC_CLKP_Enable();
34186bf4:	f7ff fa32 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
34186bf8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186c00:	4618      	mov	r0, r3
34186c02:	f7fe f8db 	bl	34184dbc <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34186c06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
34186c0e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
34186c12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
34186c16:	2300      	movs	r3, #0
34186c18:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
34186c1c:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
34186c20:	4603      	mov	r3, r0
34186c22:	460a      	mov	r2, r1
34186c24:	4313      	orrs	r3, r2
34186c26:	d04b      	beq.n	34186cc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34186c28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c2c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34186c30:	4b79      	ldr	r3, [pc, #484]	@ (34186e18 <HAL_RCCEx_PeriphCLKConfig+0xd78>)
34186c32:	429a      	cmp	r2, r3
34186c34:	d116      	bne.n	34186c64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34186c36:	4b77      	ldr	r3, [pc, #476]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34186c3c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186c40:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186c44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34186c4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34186c50:	3b01      	subs	r3, #1
34186c52:	041b      	lsls	r3, r3, #16
34186c54:	4313      	orrs	r3, r2
34186c56:	4a6f      	ldr	r2, [pc, #444]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186c58:	430b      	orrs	r3, r1
34186c5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34186c5e:	f7fe ff7d 	bl	34185b5c <LL_RCC_IC10_Enable>
34186c62:	e026      	b.n	34186cb2 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34186c64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c68:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34186c6c:	4b6b      	ldr	r3, [pc, #428]	@ (34186e1c <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
34186c6e:	429a      	cmp	r2, r3
34186c70:	d116      	bne.n	34186ca0 <HAL_RCCEx_PeriphCLKConfig+0xc00>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186c72:	4b68      	ldr	r3, [pc, #416]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186c74:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186c78:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186c7c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186c80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c84:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186c86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186c8c:	3b01      	subs	r3, #1
34186c8e:	041b      	lsls	r3, r3, #16
34186c90:	4313      	orrs	r3, r2
34186c92:	4a60      	ldr	r2, [pc, #384]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186c94:	430b      	orrs	r3, r1
34186c96:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186c9a:	f7ff f85f 	bl	34185d5c <LL_RCC_IC15_Enable>
34186c9e:	e008      	b.n	34186cb2 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34186ca0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ca4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34186ca8:	4b5d      	ldr	r3, [pc, #372]	@ (34186e20 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
34186caa:	429a      	cmp	r2, r3
34186cac:	d101      	bne.n	34186cb2 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      LL_RCC_CLKP_Enable();
34186cae:	f7ff f9d5 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
34186cb2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34186cba:	4618      	mov	r0, r3
34186cbc:	f7fe f8aa 	bl	34184e14 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34186cc0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
34186cc8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
34186ccc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
34186cd0:	2300      	movs	r3, #0
34186cd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
34186cd6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
34186cda:	4603      	mov	r3, r0
34186cdc:	460a      	mov	r2, r1
34186cde:	4313      	orrs	r3, r2
34186ce0:	d04b      	beq.n	34186d7a <HAL_RCCEx_PeriphCLKConfig+0xcda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34186ce2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ce6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34186cea:	4b4e      	ldr	r3, [pc, #312]	@ (34186e24 <HAL_RCCEx_PeriphCLKConfig+0xd84>)
34186cec:	429a      	cmp	r2, r3
34186cee:	d116      	bne.n	34186d1e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34186cf0:	4b48      	ldr	r3, [pc, #288]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34186cf6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186cfa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186cfe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34186d04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34186d0a:	3b01      	subs	r3, #1
34186d0c:	041b      	lsls	r3, r3, #16
34186d0e:	4313      	orrs	r3, r2
34186d10:	4a40      	ldr	r2, [pc, #256]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186d12:	430b      	orrs	r3, r1
34186d14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34186d18:	f7fe ff20 	bl	34185b5c <LL_RCC_IC10_Enable>
34186d1c:	e026      	b.n	34186d6c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
34186d1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d22:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34186d26:	4b40      	ldr	r3, [pc, #256]	@ (34186e28 <HAL_RCCEx_PeriphCLKConfig+0xd88>)
34186d28:	429a      	cmp	r2, r3
34186d2a:	d116      	bne.n	34186d5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186d2c:	4b39      	ldr	r3, [pc, #228]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186d2e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186d32:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186d36:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186d3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d3e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186d40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186d46:	3b01      	subs	r3, #1
34186d48:	041b      	lsls	r3, r3, #16
34186d4a:	4313      	orrs	r3, r2
34186d4c:	4a31      	ldr	r2, [pc, #196]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186d4e:	430b      	orrs	r3, r1
34186d50:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186d54:	f7ff f802 	bl	34185d5c <LL_RCC_IC15_Enable>
34186d58:	e008      	b.n	34186d6c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
34186d5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d5e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34186d62:	4b32      	ldr	r3, [pc, #200]	@ (34186e2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>)
34186d64:	429a      	cmp	r2, r3
34186d66:	d101      	bne.n	34186d6c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      LL_RCC_CLKP_Enable();
34186d68:	f7ff f978 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
34186d6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d70:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34186d74:	4618      	mov	r0, r3
34186d76:	f7fe f84d 	bl	34184e14 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34186d7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
34186d82:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
34186d86:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
34186d8a:	2300      	movs	r3, #0
34186d8c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
34186d90:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
34186d94:	4603      	mov	r3, r0
34186d96:	460a      	mov	r2, r1
34186d98:	4313      	orrs	r3, r2
34186d9a:	d05d      	beq.n	34186e58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34186d9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186da0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34186da4:	4b22      	ldr	r3, [pc, #136]	@ (34186e30 <HAL_RCCEx_PeriphCLKConfig+0xd90>)
34186da6:	429a      	cmp	r2, r3
34186da8:	d116      	bne.n	34186dd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34186daa:	4b1a      	ldr	r3, [pc, #104]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34186db0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186db4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186db8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34186dbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34186dc4:	3b01      	subs	r3, #1
34186dc6:	041b      	lsls	r3, r3, #16
34186dc8:	4313      	orrs	r3, r2
34186dca:	4a12      	ldr	r2, [pc, #72]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186dcc:	430b      	orrs	r3, r1
34186dce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34186dd2:	f7fe fec3 	bl	34185b5c <LL_RCC_IC10_Enable>
34186dd6:	e038      	b.n	34186e4a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34186dd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ddc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34186de0:	4b14      	ldr	r3, [pc, #80]	@ (34186e34 <HAL_RCCEx_PeriphCLKConfig+0xd94>)
34186de2:	429a      	cmp	r2, r3
34186de4:	d128      	bne.n	34186e38 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186de6:	4b0b      	ldr	r3, [pc, #44]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186de8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186dec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186df0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186df4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186df8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186dfa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186e00:	3b01      	subs	r3, #1
34186e02:	041b      	lsls	r3, r3, #16
34186e04:	4313      	orrs	r3, r2
34186e06:	4a03      	ldr	r2, [pc, #12]	@ (34186e14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34186e08:	430b      	orrs	r3, r1
34186e0a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186e0e:	f7fe ffa5 	bl	34185d5c <LL_RCC_IC15_Enable>
34186e12:	e01a      	b.n	34186e4a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
34186e14:	56028000 	.word	0x56028000
34186e18:	0702000c 	.word	0x0702000c
34186e1c:	0703000c 	.word	0x0703000c
34186e20:	0701000c 	.word	0x0701000c
34186e24:	0702040c 	.word	0x0702040c
34186e28:	0703040c 	.word	0x0703040c
34186e2c:	0701040c 	.word	0x0701040c
34186e30:	0702080c 	.word	0x0702080c
34186e34:	0703080c 	.word	0x0703080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34186e38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e3c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34186e40:	4bc8      	ldr	r3, [pc, #800]	@ (34187164 <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
34186e42:	429a      	cmp	r2, r3
34186e44:	d101      	bne.n	34186e4a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      LL_RCC_CLKP_Enable();
34186e46:	f7ff f909 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
34186e4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34186e52:	4618      	mov	r0, r3
34186e54:	f7fd ffde 	bl	34184e14 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34186e58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
34186e60:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
34186e64:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
34186e68:	2300      	movs	r3, #0
34186e6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
34186e6e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
34186e72:	4603      	mov	r3, r0
34186e74:	460a      	mov	r2, r1
34186e76:	4313      	orrs	r3, r2
34186e78:	d04b      	beq.n	34186f12 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34186e7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e7e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34186e82:	4bb9      	ldr	r3, [pc, #740]	@ (34187168 <HAL_RCCEx_PeriphCLKConfig+0x10c8>)
34186e84:	429a      	cmp	r2, r3
34186e86:	d116      	bne.n	34186eb6 <HAL_RCCEx_PeriphCLKConfig+0xe16>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34186e88:	4bb8      	ldr	r3, [pc, #736]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34186e8e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186e92:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186e96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34186e9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34186ea2:	3b01      	subs	r3, #1
34186ea4:	041b      	lsls	r3, r3, #16
34186ea6:	4313      	orrs	r3, r2
34186ea8:	4ab0      	ldr	r2, [pc, #704]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186eaa:	430b      	orrs	r3, r1
34186eac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34186eb0:	f7fe fe54 	bl	34185b5c <LL_RCC_IC10_Enable>
34186eb4:	e026      	b.n	34186f04 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
34186eb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186eba:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34186ebe:	4bac      	ldr	r3, [pc, #688]	@ (34187170 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
34186ec0:	429a      	cmp	r2, r3
34186ec2:	d116      	bne.n	34186ef2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186ec4:	4ba9      	ldr	r3, [pc, #676]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186ec6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186eca:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186ece:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186ed2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ed6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186ed8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186edc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186ede:	3b01      	subs	r3, #1
34186ee0:	041b      	lsls	r3, r3, #16
34186ee2:	4313      	orrs	r3, r2
34186ee4:	4aa1      	ldr	r2, [pc, #644]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186ee6:	430b      	orrs	r3, r1
34186ee8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186eec:	f7fe ff36 	bl	34185d5c <LL_RCC_IC15_Enable>
34186ef0:	e008      	b.n	34186f04 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
34186ef2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ef6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34186efa:	4b9e      	ldr	r3, [pc, #632]	@ (34187174 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
34186efc:	429a      	cmp	r2, r3
34186efe:	d101      	bne.n	34186f04 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      LL_RCC_CLKP_Enable();
34186f00:	f7ff f8ac 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
34186f04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34186f0c:	4618      	mov	r0, r3
34186f0e:	f7fd ff81 	bl	34184e14 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34186f12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f16:	e9d3 2300 	ldrd	r2, r3, [r3]
34186f1a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
34186f1e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
34186f22:	2300      	movs	r3, #0
34186f24:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
34186f28:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
34186f2c:	4603      	mov	r3, r0
34186f2e:	460a      	mov	r2, r1
34186f30:	4313      	orrs	r3, r2
34186f32:	d04b      	beq.n	34186fcc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34186f34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f38:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34186f3c:	4b8e      	ldr	r3, [pc, #568]	@ (34187178 <HAL_RCCEx_PeriphCLKConfig+0x10d8>)
34186f3e:	429a      	cmp	r2, r3
34186f40:	d116      	bne.n	34186f70 <HAL_RCCEx_PeriphCLKConfig+0xed0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34186f42:	4b8a      	ldr	r3, [pc, #552]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34186f48:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186f4c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186f50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34186f56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34186f5c:	3b01      	subs	r3, #1
34186f5e:	041b      	lsls	r3, r3, #16
34186f60:	4313      	orrs	r3, r2
34186f62:	4a82      	ldr	r2, [pc, #520]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186f64:	430b      	orrs	r3, r1
34186f66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34186f6a:	f7fe fdf7 	bl	34185b5c <LL_RCC_IC10_Enable>
34186f6e:	e026      	b.n	34186fbe <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34186f70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f74:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34186f78:	4b80      	ldr	r3, [pc, #512]	@ (3418717c <HAL_RCCEx_PeriphCLKConfig+0x10dc>)
34186f7a:	429a      	cmp	r2, r3
34186f7c:	d116      	bne.n	34186fac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186f7e:	4b7b      	ldr	r3, [pc, #492]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186f80:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186f84:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186f88:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186f8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f90:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186f92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186f98:	3b01      	subs	r3, #1
34186f9a:	041b      	lsls	r3, r3, #16
34186f9c:	4313      	orrs	r3, r2
34186f9e:	4a73      	ldr	r2, [pc, #460]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186fa0:	430b      	orrs	r3, r1
34186fa2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186fa6:	f7fe fed9 	bl	34185d5c <LL_RCC_IC15_Enable>
34186faa:	e008      	b.n	34186fbe <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
34186fac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fb0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34186fb4:	4b72      	ldr	r3, [pc, #456]	@ (34187180 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
34186fb6:	429a      	cmp	r2, r3
34186fb8:	d101      	bne.n	34186fbe <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    {
      LL_RCC_CLKP_Enable();
34186fba:	f7ff f84f 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
34186fbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fc2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186fc6:	4618      	mov	r0, r3
34186fc8:	f7fd ff2f 	bl	34184e2a <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34186fcc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
34186fd4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
34186fd8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
34186fdc:	2300      	movs	r3, #0
34186fde:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
34186fe2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
34186fe6:	4603      	mov	r3, r0
34186fe8:	460a      	mov	r2, r1
34186fea:	4313      	orrs	r3, r2
34186fec:	d04b      	beq.n	34187086 <HAL_RCCEx_PeriphCLKConfig+0xfe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34186fee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ff2:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34186ff6:	4b63      	ldr	r3, [pc, #396]	@ (34187184 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
34186ff8:	429a      	cmp	r2, r3
34186ffa:	d116      	bne.n	3418702a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34186ffc:	4b5b      	ldr	r3, [pc, #364]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34186ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34187002:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187006:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418700a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418700e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34187010:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34187016:	3b01      	subs	r3, #1
34187018:	041b      	lsls	r3, r3, #16
3418701a:	4313      	orrs	r3, r2
3418701c:	4a53      	ldr	r2, [pc, #332]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418701e:	430b      	orrs	r3, r1
34187020:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34187024:	f7fe fd9a 	bl	34185b5c <LL_RCC_IC10_Enable>
34187028:	e026      	b.n	34187078 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
3418702a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418702e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34187032:	4b55      	ldr	r3, [pc, #340]	@ (34187188 <HAL_RCCEx_PeriphCLKConfig+0x10e8>)
34187034:	429a      	cmp	r2, r3
34187036:	d116      	bne.n	34187066 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34187038:	4b4c      	ldr	r3, [pc, #304]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418703a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418703e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187042:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187046:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418704a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418704c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187050:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34187052:	3b01      	subs	r3, #1
34187054:	041b      	lsls	r3, r3, #16
34187056:	4313      	orrs	r3, r2
34187058:	4a44      	ldr	r2, [pc, #272]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3418705a:	430b      	orrs	r3, r1
3418705c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34187060:	f7fe fe7c 	bl	34185d5c <LL_RCC_IC15_Enable>
34187064:	e008      	b.n	34187078 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34187066:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418706a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3418706e:	4b47      	ldr	r3, [pc, #284]	@ (3418718c <HAL_RCCEx_PeriphCLKConfig+0x10ec>)
34187070:	429a      	cmp	r2, r3
34187072:	d101      	bne.n	34187078 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    {
      LL_RCC_CLKP_Enable();
34187074:	f7fe fff2 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
34187078:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418707c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34187080:	4618      	mov	r0, r3
34187082:	f7fd fed2 	bl	34184e2a <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34187086:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418708a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418708e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
34187092:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
34187096:	2300      	movs	r3, #0
34187098:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
3418709c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
341870a0:	4603      	mov	r3, r0
341870a2:	460a      	mov	r2, r1
341870a4:	4313      	orrs	r3, r2
341870a6:	d02d      	beq.n	34187104 <HAL_RCCEx_PeriphCLKConfig+0x1064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
341870a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870ac:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
341870b0:	4b37      	ldr	r3, [pc, #220]	@ (34187190 <HAL_RCCEx_PeriphCLKConfig+0x10f0>)
341870b2:	429a      	cmp	r2, r3
341870b4:	d116      	bne.n	341870e4 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341870b6:	4b2d      	ldr	r3, [pc, #180]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341870b8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341870bc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341870c0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341870c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870c8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341870ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341870d0:	3b01      	subs	r3, #1
341870d2:	041b      	lsls	r3, r3, #16
341870d4:	4313      	orrs	r3, r2
341870d6:	4a25      	ldr	r2, [pc, #148]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
341870d8:	430b      	orrs	r3, r1
341870da:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341870de:	f7fe fe3d 	bl	34185d5c <LL_RCC_IC15_Enable>
341870e2:	e008      	b.n	341870f6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
341870e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870e8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
341870ec:	4b29      	ldr	r3, [pc, #164]	@ (34187194 <HAL_RCCEx_PeriphCLKConfig+0x10f4>)
341870ee:	429a      	cmp	r2, r3
341870f0:	d101      	bne.n	341870f6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
    {
      LL_RCC_CLKP_Enable();
341870f2:	f7fe ffb3 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
341870f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
341870fe:	4618      	mov	r0, r3
34187100:	f7fd fe9e 	bl	34184e40 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34187104:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187108:	e9d3 2300 	ldrd	r2, r3, [r3]
3418710c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
34187110:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
34187114:	2300      	movs	r3, #0
34187116:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
3418711a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
3418711e:	4603      	mov	r3, r0
34187120:	460a      	mov	r2, r1
34187122:	4313      	orrs	r3, r2
34187124:	d04a      	beq.n	341871bc <HAL_RCCEx_PeriphCLKConfig+0x111c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34187126:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418712a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3418712e:	4b1a      	ldr	r3, [pc, #104]	@ (34187198 <HAL_RCCEx_PeriphCLKConfig+0x10f8>)
34187130:	429a      	cmp	r2, r3
34187132:	d133      	bne.n	3418719c <HAL_RCCEx_PeriphCLKConfig+0x10fc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34187134:	4b0d      	ldr	r3, [pc, #52]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34187136:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418713a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418713e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187142:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187146:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34187148:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418714c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418714e:	3b01      	subs	r3, #1
34187150:	041b      	lsls	r3, r3, #16
34187152:	4313      	orrs	r3, r2
34187154:	4a05      	ldr	r2, [pc, #20]	@ (3418716c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34187156:	430b      	orrs	r3, r1
34187158:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418715c:	f7fe fdfe 	bl	34185d5c <LL_RCC_IC15_Enable>
34187160:	e025      	b.n	341871ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
34187162:	bf00      	nop
34187164:	0701080c 	.word	0x0701080c
34187168:	07020c0c 	.word	0x07020c0c
3418716c:	56028000 	.word	0x56028000
34187170:	07030c0c 	.word	0x07030c0c
34187174:	07010c0c 	.word	0x07010c0c
34187178:	0702100c 	.word	0x0702100c
3418717c:	0703100c 	.word	0x0703100c
34187180:	0701100c 	.word	0x0701100c
34187184:	0702140c 	.word	0x0702140c
34187188:	0703140c 	.word	0x0703140c
3418718c:	0701140c 	.word	0x0701140c
34187190:	0702082c 	.word	0x0702082c
34187194:	0701082c 	.word	0x0701082c
34187198:	07020c2c 	.word	0x07020c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
3418719c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871a0:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
341871a4:	4bca      	ldr	r3, [pc, #808]	@ (341874d0 <HAL_RCCEx_PeriphCLKConfig+0x1430>)
341871a6:	429a      	cmp	r2, r3
341871a8:	d101      	bne.n	341871ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      LL_RCC_CLKP_Enable();
341871aa:	f7fe ff57 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
341871ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
341871b6:	4618      	mov	r0, r3
341871b8:	f7fd fe42 	bl	34184e40 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
341871bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871c0:	e9d3 2300 	ldrd	r2, r3, [r3]
341871c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
341871c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
341871cc:	2300      	movs	r3, #0
341871ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
341871d2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
341871d6:	4603      	mov	r3, r0
341871d8:	460a      	mov	r2, r1
341871da:	4313      	orrs	r3, r2
341871dc:	d02d      	beq.n	3418723a <HAL_RCCEx_PeriphCLKConfig+0x119a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
341871de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
341871e6:	4bbb      	ldr	r3, [pc, #748]	@ (341874d4 <HAL_RCCEx_PeriphCLKConfig+0x1434>)
341871e8:	429a      	cmp	r2, r3
341871ea:	d116      	bne.n	3418721a <HAL_RCCEx_PeriphCLKConfig+0x117a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341871ec:	4bba      	ldr	r3, [pc, #744]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341871ee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341871f2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341871f6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341871fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871fe:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34187200:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187204:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34187206:	3b01      	subs	r3, #1
34187208:	041b      	lsls	r3, r3, #16
3418720a:	4313      	orrs	r3, r2
3418720c:	4ab2      	ldr	r2, [pc, #712]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418720e:	430b      	orrs	r3, r1
34187210:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34187214:	f7fe fda2 	bl	34185d5c <LL_RCC_IC15_Enable>
34187218:	e008      	b.n	3418722c <HAL_RCCEx_PeriphCLKConfig+0x118c>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
3418721a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418721e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34187222:	4bae      	ldr	r3, [pc, #696]	@ (341874dc <HAL_RCCEx_PeriphCLKConfig+0x143c>)
34187224:	429a      	cmp	r2, r3
34187226:	d101      	bne.n	3418722c <HAL_RCCEx_PeriphCLKConfig+0x118c>
    {
      LL_RCC_CLKP_Enable();
34187228:	f7fe ff18 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
3418722c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187230:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34187234:	4618      	mov	r0, r3
34187236:	f7fd fe03 	bl	34184e40 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
3418723a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418723e:	e9d3 2300 	ldrd	r2, r3, [r3]
34187242:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
34187246:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
3418724a:	2300      	movs	r3, #0
3418724c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
34187250:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
34187254:	4603      	mov	r3, r0
34187256:	460a      	mov	r2, r1
34187258:	4313      	orrs	r3, r2
3418725a:	d02d      	beq.n	341872b8 <HAL_RCCEx_PeriphCLKConfig+0x1218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
3418725c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187260:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34187264:	4b9e      	ldr	r3, [pc, #632]	@ (341874e0 <HAL_RCCEx_PeriphCLKConfig+0x1440>)
34187266:	429a      	cmp	r2, r3
34187268:	d116      	bne.n	34187298 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418726a:	4b9b      	ldr	r3, [pc, #620]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418726c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34187270:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187274:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187278:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418727c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418727e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187282:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34187284:	3b01      	subs	r3, #1
34187286:	041b      	lsls	r3, r3, #16
34187288:	4313      	orrs	r3, r2
3418728a:	4a93      	ldr	r2, [pc, #588]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418728c:	430b      	orrs	r3, r1
3418728e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34187292:	f7fe fd63 	bl	34185d5c <LL_RCC_IC15_Enable>
34187296:	e008      	b.n	341872aa <HAL_RCCEx_PeriphCLKConfig+0x120a>
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34187298:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418729c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
341872a0:	4b90      	ldr	r3, [pc, #576]	@ (341874e4 <HAL_RCCEx_PeriphCLKConfig+0x1444>)
341872a2:	429a      	cmp	r2, r3
341872a4:	d101      	bne.n	341872aa <HAL_RCCEx_PeriphCLKConfig+0x120a>
    {
      LL_RCC_CLKP_Enable();
341872a6:	f7fe fed9 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
341872aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872ae:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
341872b2:	4618      	mov	r0, r3
341872b4:	f7fd fdc4 	bl	34184e40 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
341872b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872bc:	e9d3 2300 	ldrd	r2, r3, [r3]
341872c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
341872c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
341872c8:	2300      	movs	r3, #0
341872ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
341872ce:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
341872d2:	4603      	mov	r3, r0
341872d4:	460a      	mov	r2, r1
341872d6:	4313      	orrs	r3, r2
341872d8:	d02d      	beq.n	34187336 <HAL_RCCEx_PeriphCLKConfig+0x1296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
341872da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872de:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
341872e2:	4b81      	ldr	r3, [pc, #516]	@ (341874e8 <HAL_RCCEx_PeriphCLKConfig+0x1448>)
341872e4:	429a      	cmp	r2, r3
341872e6:	d116      	bne.n	34187316 <HAL_RCCEx_PeriphCLKConfig+0x1276>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341872e8:	4b7b      	ldr	r3, [pc, #492]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341872ea:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341872ee:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341872f2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341872f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872fa:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341872fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34187302:	3b01      	subs	r3, #1
34187304:	041b      	lsls	r3, r3, #16
34187306:	4313      	orrs	r3, r2
34187308:	4a73      	ldr	r2, [pc, #460]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418730a:	430b      	orrs	r3, r1
3418730c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34187310:	f7fe fd24 	bl	34185d5c <LL_RCC_IC15_Enable>
34187314:	e008      	b.n	34187328 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34187316:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418731a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3418731e:	4b73      	ldr	r3, [pc, #460]	@ (341874ec <HAL_RCCEx_PeriphCLKConfig+0x144c>)
34187320:	429a      	cmp	r2, r3
34187322:	d101      	bne.n	34187328 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    {
      LL_RCC_CLKP_Enable();
34187324:	f7fe fe9a 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
34187328:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418732c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34187330:	4618      	mov	r0, r3
34187332:	f7fd fd85 	bl	34184e40 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34187336:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418733a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418733e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
34187342:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
34187346:	2300      	movs	r3, #0
34187348:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3418734c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
34187350:	4603      	mov	r3, r0
34187352:	460a      	mov	r2, r1
34187354:	4313      	orrs	r3, r2
34187356:	d04b      	beq.n	341873f0 <HAL_RCCEx_PeriphCLKConfig+0x1350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
34187358:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418735c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34187360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34187364:	d116      	bne.n	34187394 <HAL_RCCEx_PeriphCLKConfig+0x12f4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187366:	4b5c      	ldr	r3, [pc, #368]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34187368:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418736c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187370:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187374:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187378:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418737a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418737e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187380:	3b01      	subs	r3, #1
34187382:	041b      	lsls	r3, r3, #16
34187384:	4313      	orrs	r3, r2
34187386:	4a54      	ldr	r2, [pc, #336]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34187388:	430b      	orrs	r3, r1
3418738a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418738e:	f7fe fba5 	bl	34185adc <LL_RCC_IC9_Enable>
34187392:	e026      	b.n	341873e2 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
34187394:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187398:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3418739c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
341873a0:	d116      	bne.n	341873d0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341873a2:	4b4d      	ldr	r3, [pc, #308]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341873a4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341873a8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341873ac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341873b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341873b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341873bc:	3b01      	subs	r3, #1
341873be:	041b      	lsls	r3, r3, #16
341873c0:	4313      	orrs	r3, r2
341873c2:	4a45      	ldr	r2, [pc, #276]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341873c4:	430b      	orrs	r3, r1
341873c6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341873ca:	f7fe fc87 	bl	34185cdc <LL_RCC_IC14_Enable>
341873ce:	e008      	b.n	341873e2 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
341873d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
341873d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341873dc:	d101      	bne.n	341873e2 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    {
      LL_RCC_CLKP_Enable();
341873de:	f7fe fe3d 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
341873e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
341873ea:	4618      	mov	r0, r3
341873ec:	f7fd fd34 	bl	34184e58 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
341873f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873f4:	e9d3 2300 	ldrd	r2, r3, [r3]
341873f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
341873fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
34187400:	2300      	movs	r3, #0
34187402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
34187406:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3418740a:	4603      	mov	r3, r0
3418740c:	460a      	mov	r2, r1
3418740e:	4313      	orrs	r3, r2
34187410:	d02f      	beq.n	34187472 <HAL_RCCEx_PeriphCLKConfig+0x13d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
34187412:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187416:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418741a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418741e:	d118      	bne.n	34187452 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
34187420:	4b2d      	ldr	r3, [pc, #180]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34187422:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34187426:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418742a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418742e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187432:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34187436:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418743a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3418743e:	3b01      	subs	r3, #1
34187440:	041b      	lsls	r3, r3, #16
34187442:	4313      	orrs	r3, r2
34187444:	4a24      	ldr	r2, [pc, #144]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34187446:	430b      	orrs	r3, r1
34187448:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
3418744c:	f7fe fcc6 	bl	34185ddc <LL_RCC_IC16_Enable>
34187450:	e008      	b.n	34187464 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34187452:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187456:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418745a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418745e:	d101      	bne.n	34187464 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    {
      LL_RCC_CLKP_Enable();
34187460:	f7fe fdfc 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
34187464:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187468:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418746c:	4618      	mov	r0, r3
3418746e:	f7fd fd09 	bl	34184e84 <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
34187472:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187476:	e9d3 2300 	ldrd	r2, r3, [r3]
3418747a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
3418747e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
34187482:	2300      	movs	r3, #0
34187484:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
34187488:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
3418748c:	4603      	mov	r3, r0
3418748e:	460a      	mov	r2, r1
34187490:	4313      	orrs	r3, r2
34187492:	d05b      	beq.n	3418754c <HAL_RCCEx_PeriphCLKConfig+0x14ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
34187494:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187498:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3418749c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
341874a0:	d126      	bne.n	341874f0 <HAL_RCCEx_PeriphCLKConfig+0x1450>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341874a2:	4b0d      	ldr	r3, [pc, #52]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341874a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341874a8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341874ac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341874b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341874b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341874b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341874ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341874bc:	3b01      	subs	r3, #1
341874be:	041b      	lsls	r3, r3, #16
341874c0:	4313      	orrs	r3, r2
341874c2:	4a05      	ldr	r2, [pc, #20]	@ (341874d8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341874c4:	430b      	orrs	r3, r1
341874c6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341874ca:	f7fe fa87 	bl	341859dc <LL_RCC_IC7_Enable>
341874ce:	e036      	b.n	3418753e <HAL_RCCEx_PeriphCLKConfig+0x149e>
341874d0:	07010c2c 	.word	0x07010c2c
341874d4:	0702102c 	.word	0x0702102c
341874d8:	56028000 	.word	0x56028000
341874dc:	0701102c 	.word	0x0701102c
341874e0:	0702142c 	.word	0x0702142c
341874e4:	0701142c 	.word	0x0701142c
341874e8:	0702182c 	.word	0x0702182c
341874ec:	0701182c 	.word	0x0701182c
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
341874f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341874f4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
341874f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
341874fc:	d116      	bne.n	3418752c <HAL_RCCEx_PeriphCLKConfig+0x148c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341874fe:	4bb5      	ldr	r3, [pc, #724]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34187500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34187504:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187508:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418750c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34187512:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34187518:	3b01      	subs	r3, #1
3418751a:	041b      	lsls	r3, r3, #16
3418751c:	4313      	orrs	r3, r2
3418751e:	4aad      	ldr	r2, [pc, #692]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34187520:	430b      	orrs	r3, r1
34187522:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34187526:	f7fe fa99 	bl	34185a5c <LL_RCC_IC8_Enable>
3418752a:	e008      	b.n	3418753e <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
3418752c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187530:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34187534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34187538:	d101      	bne.n	3418753e <HAL_RCCEx_PeriphCLKConfig+0x149e>
    {
      LL_RCC_CLKP_Enable();
3418753a:	f7fe fd8f 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
3418753e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187542:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34187546:	4618      	mov	r0, r3
34187548:	f7fd fcb2 	bl	34184eb0 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
3418754c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187550:	e9d3 2300 	ldrd	r2, r3, [r3]
34187554:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
34187558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3418755c:	2300      	movs	r3, #0
3418755e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
34187562:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
34187566:	4603      	mov	r3, r0
34187568:	460a      	mov	r2, r1
3418756a:	4313      	orrs	r3, r2
3418756c:	d02d      	beq.n	341875ca <HAL_RCCEx_PeriphCLKConfig+0x152a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3418756e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187572:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34187576:	2b20      	cmp	r3, #32
34187578:	d118      	bne.n	341875ac <HAL_RCCEx_PeriphCLKConfig+0x150c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3418757a:	4b96      	ldr	r3, [pc, #600]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418757c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34187580:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187584:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187588:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418758c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34187590:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187594:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34187598:	3b01      	subs	r3, #1
3418759a:	041b      	lsls	r3, r3, #16
3418759c:	4313      	orrs	r3, r2
3418759e:	4a8d      	ldr	r2, [pc, #564]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341875a0:	430b      	orrs	r3, r1
341875a2:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
341875a6:	f7fe fd19 	bl	34185fdc <LL_RCC_IC20_Enable>
341875aa:	e007      	b.n	341875bc <HAL_RCCEx_PeriphCLKConfig+0x151c>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
341875ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341875b0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
341875b4:	2b10      	cmp	r3, #16
341875b6:	d101      	bne.n	341875bc <HAL_RCCEx_PeriphCLKConfig+0x151c>
    {
      LL_RCC_CLKP_Enable();
341875b8:	f7fe fd50 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
341875bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341875c0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
341875c4:	4618      	mov	r0, r3
341875c6:	f7fd fc9f 	bl	34184f08 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
341875ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341875ce:	e9d3 2300 	ldrd	r2, r3, [r3]
341875d2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
341875d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
341875da:	2300      	movs	r3, #0
341875dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
341875e0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
341875e4:	4603      	mov	r3, r0
341875e6:	460a      	mov	r2, r1
341875e8:	4313      	orrs	r3, r2
341875ea:	d04b      	beq.n	34187684 <HAL_RCCEx_PeriphCLKConfig+0x15e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
341875ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341875f0:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
341875f4:	4b78      	ldr	r3, [pc, #480]	@ (341877d8 <HAL_RCCEx_PeriphCLKConfig+0x1738>)
341875f6:	429a      	cmp	r2, r3
341875f8:	d116      	bne.n	34187628 <HAL_RCCEx_PeriphCLKConfig+0x1588>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341875fa:	4b76      	ldr	r3, [pc, #472]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341875fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34187600:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187604:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187608:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418760c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418760e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34187614:	3b01      	subs	r3, #1
34187616:	041b      	lsls	r3, r3, #16
34187618:	4313      	orrs	r3, r2
3418761a:	4a6e      	ldr	r2, [pc, #440]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418761c:	430b      	orrs	r3, r1
3418761e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34187622:	f7fe f9db 	bl	341859dc <LL_RCC_IC7_Enable>
34187626:	e026      	b.n	34187676 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34187628:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418762c:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34187630:	4b6a      	ldr	r3, [pc, #424]	@ (341877dc <HAL_RCCEx_PeriphCLKConfig+0x173c>)
34187632:	429a      	cmp	r2, r3
34187634:	d116      	bne.n	34187664 <HAL_RCCEx_PeriphCLKConfig+0x15c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34187636:	4b67      	ldr	r3, [pc, #412]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34187638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418763c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187640:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187644:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187648:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418764a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418764e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34187650:	3b01      	subs	r3, #1
34187652:	041b      	lsls	r3, r3, #16
34187654:	4313      	orrs	r3, r2
34187656:	4a5f      	ldr	r2, [pc, #380]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34187658:	430b      	orrs	r3, r1
3418765a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418765e:	f7fe f9fd 	bl	34185a5c <LL_RCC_IC8_Enable>
34187662:	e008      	b.n	34187676 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34187664:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187668:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3418766c:	4b5c      	ldr	r3, [pc, #368]	@ (341877e0 <HAL_RCCEx_PeriphCLKConfig+0x1740>)
3418766e:	429a      	cmp	r2, r3
34187670:	d101      	bne.n	34187676 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    {
      LL_RCC_CLKP_Enable();
34187672:	f7fe fcf3 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
34187676:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418767a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
3418767e:	4618      	mov	r0, r3
34187680:	f7fd fc58 	bl	34184f34 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
34187684:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187688:	e9d3 2300 	ldrd	r2, r3, [r3]
3418768c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
34187690:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
34187694:	2300      	movs	r3, #0
34187696:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
3418769a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
3418769e:	4603      	mov	r3, r0
341876a0:	460a      	mov	r2, r1
341876a2:	4313      	orrs	r3, r2
341876a4:	d04b      	beq.n	3418773e <HAL_RCCEx_PeriphCLKConfig+0x169e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
341876a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341876aa:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341876ae:	4b4d      	ldr	r3, [pc, #308]	@ (341877e4 <HAL_RCCEx_PeriphCLKConfig+0x1744>)
341876b0:	429a      	cmp	r2, r3
341876b2:	d116      	bne.n	341876e2 <HAL_RCCEx_PeriphCLKConfig+0x1642>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341876b4:	4b47      	ldr	r3, [pc, #284]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341876b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341876ba:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341876be:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341876c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341876c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341876c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341876cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341876ce:	3b01      	subs	r3, #1
341876d0:	041b      	lsls	r3, r3, #16
341876d2:	4313      	orrs	r3, r2
341876d4:	4a3f      	ldr	r2, [pc, #252]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341876d6:	430b      	orrs	r3, r1
341876d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341876dc:	f7fe f97e 	bl	341859dc <LL_RCC_IC7_Enable>
341876e0:	e026      	b.n	34187730 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
341876e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341876e6:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341876ea:	4b3f      	ldr	r3, [pc, #252]	@ (341877e8 <HAL_RCCEx_PeriphCLKConfig+0x1748>)
341876ec:	429a      	cmp	r2, r3
341876ee:	d116      	bne.n	3418771e <HAL_RCCEx_PeriphCLKConfig+0x167e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341876f0:	4b38      	ldr	r3, [pc, #224]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341876f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341876f6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341876fa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341876fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187702:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34187704:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418770a:	3b01      	subs	r3, #1
3418770c:	041b      	lsls	r3, r3, #16
3418770e:	4313      	orrs	r3, r2
34187710:	4a30      	ldr	r2, [pc, #192]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34187712:	430b      	orrs	r3, r1
34187714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34187718:	f7fe f9a0 	bl	34185a5c <LL_RCC_IC8_Enable>
3418771c:	e008      	b.n	34187730 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
3418771e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187722:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34187726:	4b31      	ldr	r3, [pc, #196]	@ (341877ec <HAL_RCCEx_PeriphCLKConfig+0x174c>)
34187728:	429a      	cmp	r2, r3
3418772a:	d101      	bne.n	34187730 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    {
      LL_RCC_CLKP_Enable();
3418772c:	f7fe fc96 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
34187730:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187734:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
34187738:	4618      	mov	r0, r3
3418773a:	f7fd fbfb 	bl	34184f34 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
3418773e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187742:	e9d3 2300 	ldrd	r2, r3, [r3]
34187746:	2100      	movs	r1, #0
34187748:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
3418774c:	f003 0301 	and.w	r3, r3, #1
34187750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
34187754:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
34187758:	4603      	mov	r3, r0
3418775a:	460a      	mov	r2, r1
3418775c:	4313      	orrs	r3, r2
3418775e:	d056      	beq.n	3418780e <HAL_RCCEx_PeriphCLKConfig+0x176e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
34187760:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187764:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34187768:	2b02      	cmp	r3, #2
3418776a:	d116      	bne.n	3418779a <HAL_RCCEx_PeriphCLKConfig+0x16fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418776c:	4b19      	ldr	r3, [pc, #100]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418776e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34187772:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187776:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418777a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418777e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34187780:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34187786:	3b01      	subs	r3, #1
34187788:	041b      	lsls	r3, r3, #16
3418778a:	4313      	orrs	r3, r2
3418778c:	4a11      	ldr	r2, [pc, #68]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418778e:	430b      	orrs	r3, r1
34187790:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34187794:	f7fe f922 	bl	341859dc <LL_RCC_IC7_Enable>
34187798:	e032      	b.n	34187800 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
3418779a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418779e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341877a2:	2b03      	cmp	r3, #3
341877a4:	d124      	bne.n	341877f0 <HAL_RCCEx_PeriphCLKConfig+0x1750>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341877a6:	4b0b      	ldr	r3, [pc, #44]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341877a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341877ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341877b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341877b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341877b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341877ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341877be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341877c0:	3b01      	subs	r3, #1
341877c2:	041b      	lsls	r3, r3, #16
341877c4:	4313      	orrs	r3, r2
341877c6:	4a03      	ldr	r2, [pc, #12]	@ (341877d4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341877c8:	430b      	orrs	r3, r1
341877ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341877ce:	f7fe f945 	bl	34185a5c <LL_RCC_IC8_Enable>
341877d2:	e015      	b.n	34187800 <HAL_RCCEx_PeriphCLKConfig+0x1760>
341877d4:	56028000 	.word	0x56028000
341877d8:	07021418 	.word	0x07021418
341877dc:	07031418 	.word	0x07031418
341877e0:	07011418 	.word	0x07011418
341877e4:	07021818 	.word	0x07021818
341877e8:	07031818 	.word	0x07031818
341877ec:	07011818 	.word	0x07011818
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
341877f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341877f4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341877f8:	2b01      	cmp	r3, #1
341877fa:	d101      	bne.n	34187800 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    {
      LL_RCC_CLKP_Enable();
341877fc:	f7fe fc2e 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
34187800:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187804:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34187808:	4618      	mov	r0, r3
3418780a:	f7fd fba9 	bl	34184f60 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3418780e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187812:	e9d3 2300 	ldrd	r2, r3, [r3]
34187816:	2100      	movs	r1, #0
34187818:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
3418781c:	f003 0302 	and.w	r3, r3, #2
34187820:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
34187824:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
34187828:	4603      	mov	r3, r0
3418782a:	460a      	mov	r2, r1
3418782c:	4313      	orrs	r3, r2
3418782e:	d04b      	beq.n	341878c8 <HAL_RCCEx_PeriphCLKConfig+0x1828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
34187830:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187834:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34187838:	4bc6      	ldr	r3, [pc, #792]	@ (34187b54 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>)
3418783a:	429a      	cmp	r2, r3
3418783c:	d116      	bne.n	3418786c <HAL_RCCEx_PeriphCLKConfig+0x17cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418783e:	4bc6      	ldr	r3, [pc, #792]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34187844:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187848:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418784c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187850:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34187852:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34187858:	3b01      	subs	r3, #1
3418785a:	041b      	lsls	r3, r3, #16
3418785c:	4313      	orrs	r3, r2
3418785e:	4abe      	ldr	r2, [pc, #760]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187860:	430b      	orrs	r3, r1
34187862:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34187866:	f7fe f8f9 	bl	34185a5c <LL_RCC_IC8_Enable>
3418786a:	e026      	b.n	341878ba <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
3418786c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187870:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34187874:	4bb9      	ldr	r3, [pc, #740]	@ (34187b5c <HAL_RCCEx_PeriphCLKConfig+0x1abc>)
34187876:	429a      	cmp	r2, r3
34187878:	d116      	bne.n	341878a8 <HAL_RCCEx_PeriphCLKConfig+0x1808>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418787a:	4bb7      	ldr	r3, [pc, #732]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418787c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187880:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187884:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187888:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418788c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418788e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187894:	3b01      	subs	r3, #1
34187896:	041b      	lsls	r3, r3, #16
34187898:	4313      	orrs	r3, r2
3418789a:	4aaf      	ldr	r2, [pc, #700]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418789c:	430b      	orrs	r3, r1
3418789e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341878a2:	f7fe f91b 	bl	34185adc <LL_RCC_IC9_Enable>
341878a6:	e008      	b.n	341878ba <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
341878a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341878ac:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341878b0:	4bab      	ldr	r3, [pc, #684]	@ (34187b60 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>)
341878b2:	429a      	cmp	r2, r3
341878b4:	d101      	bne.n	341878ba <HAL_RCCEx_PeriphCLKConfig+0x181a>
    {
      LL_RCC_CLKP_Enable();
341878b6:	f7fe fbd1 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
341878ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341878be:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
341878c2:	4618      	mov	r0, r3
341878c4:	f7fd fb62 	bl	34184f8c <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
341878c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341878cc:	e9d3 2300 	ldrd	r2, r3, [r3]
341878d0:	2100      	movs	r1, #0
341878d2:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
341878d6:	f003 0304 	and.w	r3, r3, #4
341878da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
341878de:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
341878e2:	4603      	mov	r3, r0
341878e4:	460a      	mov	r2, r1
341878e6:	4313      	orrs	r3, r2
341878e8:	d04b      	beq.n	34187982 <HAL_RCCEx_PeriphCLKConfig+0x18e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
341878ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341878ee:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341878f2:	4b9c      	ldr	r3, [pc, #624]	@ (34187b64 <HAL_RCCEx_PeriphCLKConfig+0x1ac4>)
341878f4:	429a      	cmp	r2, r3
341878f6:	d116      	bne.n	34187926 <HAL_RCCEx_PeriphCLKConfig+0x1886>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341878f8:	4b97      	ldr	r3, [pc, #604]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341878fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341878fe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187902:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187906:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418790a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418790c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34187912:	3b01      	subs	r3, #1
34187914:	041b      	lsls	r3, r3, #16
34187916:	4313      	orrs	r3, r2
34187918:	4a8f      	ldr	r2, [pc, #572]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418791a:	430b      	orrs	r3, r1
3418791c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34187920:	f7fe f89c 	bl	34185a5c <LL_RCC_IC8_Enable>
34187924:	e026      	b.n	34187974 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34187926:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418792a:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418792e:	4b8e      	ldr	r3, [pc, #568]	@ (34187b68 <HAL_RCCEx_PeriphCLKConfig+0x1ac8>)
34187930:	429a      	cmp	r2, r3
34187932:	d116      	bne.n	34187962 <HAL_RCCEx_PeriphCLKConfig+0x18c2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187934:	4b88      	ldr	r3, [pc, #544]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187936:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418793a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418793e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187942:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187946:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187948:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418794c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418794e:	3b01      	subs	r3, #1
34187950:	041b      	lsls	r3, r3, #16
34187952:	4313      	orrs	r3, r2
34187954:	4a80      	ldr	r2, [pc, #512]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187956:	430b      	orrs	r3, r1
34187958:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418795c:	f7fe f8be 	bl	34185adc <LL_RCC_IC9_Enable>
34187960:	e008      	b.n	34187974 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
34187962:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187966:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418796a:	4b80      	ldr	r3, [pc, #512]	@ (34187b6c <HAL_RCCEx_PeriphCLKConfig+0x1acc>)
3418796c:	429a      	cmp	r2, r3
3418796e:	d101      	bne.n	34187974 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    {
      LL_RCC_CLKP_Enable();
34187970:	f7fe fb74 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
34187974:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187978:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
3418797c:	4618      	mov	r0, r3
3418797e:	f7fd fb05 	bl	34184f8c <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
34187982:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187986:	e9d3 2300 	ldrd	r2, r3, [r3]
3418798a:	2100      	movs	r1, #0
3418798c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
34187990:	f003 0308 	and.w	r3, r3, #8
34187994:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
34187998:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
3418799c:	4603      	mov	r3, r0
3418799e:	460a      	mov	r2, r1
341879a0:	4313      	orrs	r3, r2
341879a2:	d04b      	beq.n	34187a3c <HAL_RCCEx_PeriphCLKConfig+0x199c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
341879a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341879a8:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
341879ac:	4b70      	ldr	r3, [pc, #448]	@ (34187b70 <HAL_RCCEx_PeriphCLKConfig+0x1ad0>)
341879ae:	429a      	cmp	r2, r3
341879b0:	d116      	bne.n	341879e0 <HAL_RCCEx_PeriphCLKConfig+0x1940>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341879b2:	4b69      	ldr	r3, [pc, #420]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341879b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341879b8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341879bc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341879c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341879c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341879c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341879ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341879cc:	3b01      	subs	r3, #1
341879ce:	041b      	lsls	r3, r3, #16
341879d0:	4313      	orrs	r3, r2
341879d2:	4a61      	ldr	r2, [pc, #388]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341879d4:	430b      	orrs	r3, r1
341879d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341879da:	f7fe f83f 	bl	34185a5c <LL_RCC_IC8_Enable>
341879de:	e026      	b.n	34187a2e <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
341879e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341879e4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
341879e8:	4b62      	ldr	r3, [pc, #392]	@ (34187b74 <HAL_RCCEx_PeriphCLKConfig+0x1ad4>)
341879ea:	429a      	cmp	r2, r3
341879ec:	d116      	bne.n	34187a1c <HAL_RCCEx_PeriphCLKConfig+0x197c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341879ee:	4b5a      	ldr	r3, [pc, #360]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341879f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341879f4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341879f8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341879fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187a02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187a08:	3b01      	subs	r3, #1
34187a0a:	041b      	lsls	r3, r3, #16
34187a0c:	4313      	orrs	r3, r2
34187a0e:	4a52      	ldr	r2, [pc, #328]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187a10:	430b      	orrs	r3, r1
34187a12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187a16:	f7fe f861 	bl	34185adc <LL_RCC_IC9_Enable>
34187a1a:	e008      	b.n	34187a2e <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34187a1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a20:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34187a24:	4b54      	ldr	r3, [pc, #336]	@ (34187b78 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>)
34187a26:	429a      	cmp	r2, r3
34187a28:	d101      	bne.n	34187a2e <HAL_RCCEx_PeriphCLKConfig+0x198e>
    {
      LL_RCC_CLKP_Enable();
34187a2a:	f7fe fb17 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
34187a2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a32:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
34187a36:	4618      	mov	r0, r3
34187a38:	f7fd faa8 	bl	34184f8c <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
34187a3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a40:	e9d3 2300 	ldrd	r2, r3, [r3]
34187a44:	2100      	movs	r1, #0
34187a46:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
34187a4a:	f003 0310 	and.w	r3, r3, #16
34187a4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
34187a52:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
34187a56:	4603      	mov	r3, r0
34187a58:	460a      	mov	r2, r1
34187a5a:	4313      	orrs	r3, r2
34187a5c:	d04b      	beq.n	34187af6 <HAL_RCCEx_PeriphCLKConfig+0x1a56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
34187a5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a62:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34187a66:	4b45      	ldr	r3, [pc, #276]	@ (34187b7c <HAL_RCCEx_PeriphCLKConfig+0x1adc>)
34187a68:	429a      	cmp	r2, r3
34187a6a:	d116      	bne.n	34187a9a <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187a6c:	4b3a      	ldr	r3, [pc, #232]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187a6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187a72:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187a76:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187a7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187a80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187a86:	3b01      	subs	r3, #1
34187a88:	041b      	lsls	r3, r3, #16
34187a8a:	4313      	orrs	r3, r2
34187a8c:	4a32      	ldr	r2, [pc, #200]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187a8e:	430b      	orrs	r3, r1
34187a90:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187a94:	f7fe f822 	bl	34185adc <LL_RCC_IC9_Enable>
34187a98:	e026      	b.n	34187ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34187a9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187a9e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34187aa2:	4b37      	ldr	r3, [pc, #220]	@ (34187b80 <HAL_RCCEx_PeriphCLKConfig+0x1ae0>)
34187aa4:	429a      	cmp	r2, r3
34187aa6:	d116      	bne.n	34187ad6 <HAL_RCCEx_PeriphCLKConfig+0x1a36>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187aa8:	4b2b      	ldr	r3, [pc, #172]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187aaa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187aae:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187ab2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187ab6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187aba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187abc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34187ac2:	3b01      	subs	r3, #1
34187ac4:	041b      	lsls	r3, r3, #16
34187ac6:	4313      	orrs	r3, r2
34187ac8:	4a23      	ldr	r2, [pc, #140]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187aca:	430b      	orrs	r3, r1
34187acc:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187ad0:	f7fe f904 	bl	34185cdc <LL_RCC_IC14_Enable>
34187ad4:	e008      	b.n	34187ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34187ad6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ada:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34187ade:	4b29      	ldr	r3, [pc, #164]	@ (34187b84 <HAL_RCCEx_PeriphCLKConfig+0x1ae4>)
34187ae0:	429a      	cmp	r2, r3
34187ae2:	d101      	bne.n	34187ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    {
      LL_RCC_CLKP_Enable();
34187ae4:	f7fe faba 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
34187ae8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
34187af0:	4618      	mov	r0, r3
34187af2:	f7fd fa4b 	bl	34184f8c <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
34187af6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187afa:	e9d3 2300 	ldrd	r2, r3, [r3]
34187afe:	2100      	movs	r1, #0
34187b00:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
34187b04:	f003 0320 	and.w	r3, r3, #32
34187b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
34187b0c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
34187b10:	4603      	mov	r3, r0
34187b12:	460a      	mov	r2, r1
34187b14:	4313      	orrs	r3, r2
34187b16:	d067      	beq.n	34187be8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34187b18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b1c:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34187b20:	4b19      	ldr	r3, [pc, #100]	@ (34187b88 <HAL_RCCEx_PeriphCLKConfig+0x1ae8>)
34187b22:	429a      	cmp	r2, r3
34187b24:	d132      	bne.n	34187b8c <HAL_RCCEx_PeriphCLKConfig+0x1aec>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187b26:	4b0c      	ldr	r3, [pc, #48]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187b28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187b2c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187b30:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187b34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187b3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187b40:	3b01      	subs	r3, #1
34187b42:	041b      	lsls	r3, r3, #16
34187b44:	4313      	orrs	r3, r2
34187b46:	4a04      	ldr	r2, [pc, #16]	@ (34187b58 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34187b48:	430b      	orrs	r3, r1
34187b4a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187b4e:	f7fd ffc5 	bl	34185adc <LL_RCC_IC9_Enable>
34187b52:	e042      	b.n	34187bda <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
34187b54:	07020420 	.word	0x07020420
34187b58:	56028000 	.word	0x56028000
34187b5c:	07030420 	.word	0x07030420
34187b60:	07010420 	.word	0x07010420
34187b64:	07020820 	.word	0x07020820
34187b68:	07030820 	.word	0x07030820
34187b6c:	07010820 	.word	0x07010820
34187b70:	07020c20 	.word	0x07020c20
34187b74:	07030c20 	.word	0x07030c20
34187b78:	07010c20 	.word	0x07010c20
34187b7c:	07021020 	.word	0x07021020
34187b80:	07031020 	.word	0x07031020
34187b84:	07011020 	.word	0x07011020
34187b88:	07021420 	.word	0x07021420
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34187b8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187b90:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34187b94:	4bc2      	ldr	r3, [pc, #776]	@ (34187ea0 <HAL_RCCEx_PeriphCLKConfig+0x1e00>)
34187b96:	429a      	cmp	r2, r3
34187b98:	d116      	bne.n	34187bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187b9a:	4bc2      	ldr	r3, [pc, #776]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187b9c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187ba0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187ba4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187ba8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187bae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34187bb4:	3b01      	subs	r3, #1
34187bb6:	041b      	lsls	r3, r3, #16
34187bb8:	4313      	orrs	r3, r2
34187bba:	4aba      	ldr	r2, [pc, #744]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187bbc:	430b      	orrs	r3, r1
34187bbe:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187bc2:	f7fe f88b 	bl	34185cdc <LL_RCC_IC14_Enable>
34187bc6:	e008      	b.n	34187bda <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34187bc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bcc:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34187bd0:	4bb5      	ldr	r3, [pc, #724]	@ (34187ea8 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
34187bd2:	429a      	cmp	r2, r3
34187bd4:	d101      	bne.n	34187bda <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    {
      LL_RCC_CLKP_Enable();
34187bd6:	f7fe fa41 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
34187bda:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bde:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34187be2:	4618      	mov	r0, r3
34187be4:	f7fd f9d2 	bl	34184f8c <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34187be8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187bec:	e9d3 2300 	ldrd	r2, r3, [r3]
34187bf0:	2100      	movs	r1, #0
34187bf2:	67b9      	str	r1, [r7, #120]	@ 0x78
34187bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34187bf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
34187bfa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
34187bfe:	4603      	mov	r3, r0
34187c00:	460a      	mov	r2, r1
34187c02:	4313      	orrs	r3, r2
34187c04:	d04b      	beq.n	34187c9e <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34187c06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c0a:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34187c0e:	4ba7      	ldr	r3, [pc, #668]	@ (34187eac <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
34187c10:	429a      	cmp	r2, r3
34187c12:	d116      	bne.n	34187c42 <HAL_RCCEx_PeriphCLKConfig+0x1ba2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34187c14:	4ba3      	ldr	r3, [pc, #652]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34187c1a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187c1e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187c22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34187c28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34187c2e:	3b01      	subs	r3, #1
34187c30:	041b      	lsls	r3, r3, #16
34187c32:	4313      	orrs	r3, r2
34187c34:	4a9b      	ldr	r2, [pc, #620]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187c36:	430b      	orrs	r3, r1
34187c38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34187c3c:	f7fd ff0e 	bl	34185a5c <LL_RCC_IC8_Enable>
34187c40:	e026      	b.n	34187c90 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34187c42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c46:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34187c4a:	4b99      	ldr	r3, [pc, #612]	@ (34187eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e10>)
34187c4c:	429a      	cmp	r2, r3
34187c4e:	d116      	bne.n	34187c7e <HAL_RCCEx_PeriphCLKConfig+0x1bde>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187c50:	4b94      	ldr	r3, [pc, #592]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187c52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187c56:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187c5a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187c5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187c64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187c6a:	3b01      	subs	r3, #1
34187c6c:	041b      	lsls	r3, r3, #16
34187c6e:	4313      	orrs	r3, r2
34187c70:	4a8c      	ldr	r2, [pc, #560]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187c72:	430b      	orrs	r3, r1
34187c74:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187c78:	f7fd ff30 	bl	34185adc <LL_RCC_IC9_Enable>
34187c7c:	e008      	b.n	34187c90 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34187c7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c82:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34187c86:	4b8b      	ldr	r3, [pc, #556]	@ (34187eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e14>)
34187c88:	429a      	cmp	r2, r3
34187c8a:	d101      	bne.n	34187c90 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    {
      LL_RCC_CLKP_Enable();
34187c8c:	f7fe f9e6 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
34187c90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187c94:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34187c98:	4618      	mov	r0, r3
34187c9a:	f7fd f977 	bl	34184f8c <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
34187c9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
34187ca6:	2100      	movs	r1, #0
34187ca8:	6739      	str	r1, [r7, #112]	@ 0x70
34187caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34187cae:	677b      	str	r3, [r7, #116]	@ 0x74
34187cb0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
34187cb4:	4603      	mov	r3, r0
34187cb6:	460a      	mov	r2, r1
34187cb8:	4313      	orrs	r3, r2
34187cba:	d04b      	beq.n	34187d54 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34187cbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187cc0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34187cc4:	4b7c      	ldr	r3, [pc, #496]	@ (34187eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e18>)
34187cc6:	429a      	cmp	r2, r3
34187cc8:	d116      	bne.n	34187cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c58>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187cca:	4b76      	ldr	r3, [pc, #472]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187ccc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187cd0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187cd4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187cd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187cdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187cde:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187ce4:	3b01      	subs	r3, #1
34187ce6:	041b      	lsls	r3, r3, #16
34187ce8:	4313      	orrs	r3, r2
34187cea:	4a6e      	ldr	r2, [pc, #440]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187cec:	430b      	orrs	r3, r1
34187cee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187cf2:	f7fd fef3 	bl	34185adc <LL_RCC_IC9_Enable>
34187cf6:	e026      	b.n	34187d46 <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34187cf8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187cfc:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34187d00:	4b6e      	ldr	r3, [pc, #440]	@ (34187ebc <HAL_RCCEx_PeriphCLKConfig+0x1e1c>)
34187d02:	429a      	cmp	r2, r3
34187d04:	d116      	bne.n	34187d34 <HAL_RCCEx_PeriphCLKConfig+0x1c94>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187d06:	4b67      	ldr	r3, [pc, #412]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187d08:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187d0c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187d10:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187d14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187d1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34187d20:	3b01      	subs	r3, #1
34187d22:	041b      	lsls	r3, r3, #16
34187d24:	4313      	orrs	r3, r2
34187d26:	4a5f      	ldr	r2, [pc, #380]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187d28:	430b      	orrs	r3, r1
34187d2a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187d2e:	f7fd ffd5 	bl	34185cdc <LL_RCC_IC14_Enable>
34187d32:	e008      	b.n	34187d46 <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34187d34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d38:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34187d3c:	4b60      	ldr	r3, [pc, #384]	@ (34187ec0 <HAL_RCCEx_PeriphCLKConfig+0x1e20>)
34187d3e:	429a      	cmp	r2, r3
34187d40:	d101      	bne.n	34187d46 <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    {
      LL_RCC_CLKP_Enable();
34187d42:	f7fe f98b 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
34187d46:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d4a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34187d4e:	4618      	mov	r0, r3
34187d50:	f7fd f927 	bl	34184fa2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34187d54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d58:	e9d3 2300 	ldrd	r2, r3, [r3]
34187d5c:	2100      	movs	r1, #0
34187d5e:	66b9      	str	r1, [r7, #104]	@ 0x68
34187d60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34187d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
34187d66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
34187d6a:	4603      	mov	r3, r0
34187d6c:	460a      	mov	r2, r1
34187d6e:	4313      	orrs	r3, r2
34187d70:	d04b      	beq.n	34187e0a <HAL_RCCEx_PeriphCLKConfig+0x1d6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34187d72:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d76:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34187d7a:	4b52      	ldr	r3, [pc, #328]	@ (34187ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e24>)
34187d7c:	429a      	cmp	r2, r3
34187d7e:	d116      	bne.n	34187dae <HAL_RCCEx_PeriphCLKConfig+0x1d0e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187d80:	4b48      	ldr	r3, [pc, #288]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187d82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187d86:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187d8a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187d8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187d94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187d9a:	3b01      	subs	r3, #1
34187d9c:	041b      	lsls	r3, r3, #16
34187d9e:	4313      	orrs	r3, r2
34187da0:	4a40      	ldr	r2, [pc, #256]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187da2:	430b      	orrs	r3, r1
34187da4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187da8:	f7fd fe98 	bl	34185adc <LL_RCC_IC9_Enable>
34187dac:	e026      	b.n	34187dfc <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34187dae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187db2:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34187db6:	4b44      	ldr	r3, [pc, #272]	@ (34187ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e28>)
34187db8:	429a      	cmp	r2, r3
34187dba:	d116      	bne.n	34187dea <HAL_RCCEx_PeriphCLKConfig+0x1d4a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187dbc:	4b39      	ldr	r3, [pc, #228]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187dbe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187dc2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187dc6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187dca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187dce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187dd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34187dd6:	3b01      	subs	r3, #1
34187dd8:	041b      	lsls	r3, r3, #16
34187dda:	4313      	orrs	r3, r2
34187ddc:	4a31      	ldr	r2, [pc, #196]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187dde:	430b      	orrs	r3, r1
34187de0:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187de4:	f7fd ff7a 	bl	34185cdc <LL_RCC_IC14_Enable>
34187de8:	e008      	b.n	34187dfc <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34187dea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187dee:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34187df2:	4b36      	ldr	r3, [pc, #216]	@ (34187ecc <HAL_RCCEx_PeriphCLKConfig+0x1e2c>)
34187df4:	429a      	cmp	r2, r3
34187df6:	d101      	bne.n	34187dfc <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    {
      LL_RCC_CLKP_Enable();
34187df8:	f7fe f930 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
34187dfc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e00:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34187e04:	4618      	mov	r0, r3
34187e06:	f7fd f8cc 	bl	34184fa2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34187e0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
34187e12:	2100      	movs	r1, #0
34187e14:	6639      	str	r1, [r7, #96]	@ 0x60
34187e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34187e1a:	667b      	str	r3, [r7, #100]	@ 0x64
34187e1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
34187e20:	4603      	mov	r3, r0
34187e22:	460a      	mov	r2, r1
34187e24:	4313      	orrs	r3, r2
34187e26:	d067      	beq.n	34187ef8 <HAL_RCCEx_PeriphCLKConfig+0x1e58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34187e28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e2c:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34187e30:	4b27      	ldr	r3, [pc, #156]	@ (34187ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e30>)
34187e32:	429a      	cmp	r2, r3
34187e34:	d116      	bne.n	34187e64 <HAL_RCCEx_PeriphCLKConfig+0x1dc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187e36:	4b1b      	ldr	r3, [pc, #108]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187e38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187e3c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187e40:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187e44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187e4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187e50:	3b01      	subs	r3, #1
34187e52:	041b      	lsls	r3, r3, #16
34187e54:	4313      	orrs	r3, r2
34187e56:	4a13      	ldr	r2, [pc, #76]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187e58:	430b      	orrs	r3, r1
34187e5a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187e5e:	f7fd fe3d 	bl	34185adc <LL_RCC_IC9_Enable>
34187e62:	e042      	b.n	34187eea <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34187e64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e68:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34187e6c:	4b19      	ldr	r3, [pc, #100]	@ (34187ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e34>)
34187e6e:	429a      	cmp	r2, r3
34187e70:	d132      	bne.n	34187ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187e72:	4b0c      	ldr	r3, [pc, #48]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187e74:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187e78:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187e7c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187e80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187e86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34187e8c:	3b01      	subs	r3, #1
34187e8e:	041b      	lsls	r3, r3, #16
34187e90:	4313      	orrs	r3, r2
34187e92:	4a04      	ldr	r2, [pc, #16]	@ (34187ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34187e94:	430b      	orrs	r3, r1
34187e96:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187e9a:	f7fd ff1f 	bl	34185cdc <LL_RCC_IC14_Enable>
34187e9e:	e024      	b.n	34187eea <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
34187ea0:	07031420 	.word	0x07031420
34187ea4:	56028000 	.word	0x56028000
34187ea8:	07011420 	.word	0x07011420
34187eac:	07021820 	.word	0x07021820
34187eb0:	07031820 	.word	0x07031820
34187eb4:	07011820 	.word	0x07011820
34187eb8:	07020030 	.word	0x07020030
34187ebc:	07030030 	.word	0x07030030
34187ec0:	07010030 	.word	0x07010030
34187ec4:	07020430 	.word	0x07020430
34187ec8:	07030430 	.word	0x07030430
34187ecc:	07010430 	.word	0x07010430
34187ed0:	07020830 	.word	0x07020830
34187ed4:	07030830 	.word	0x07030830
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34187ed8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187edc:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34187ee0:	4bb3      	ldr	r3, [pc, #716]	@ (341881b0 <HAL_RCCEx_PeriphCLKConfig+0x2110>)
34187ee2:	429a      	cmp	r2, r3
34187ee4:	d101      	bne.n	34187eea <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    {
      LL_RCC_CLKP_Enable();
34187ee6:	f7fe f8b9 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
34187eea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187eee:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
34187ef2:	4618      	mov	r0, r3
34187ef4:	f7fd f855 	bl	34184fa2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34187ef8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187efc:	e9d3 2300 	ldrd	r2, r3, [r3]
34187f00:	2100      	movs	r1, #0
34187f02:	65b9      	str	r1, [r7, #88]	@ 0x58
34187f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34187f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
34187f0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
34187f0e:	4603      	mov	r3, r0
34187f10:	460a      	mov	r2, r1
34187f12:	4313      	orrs	r3, r2
34187f14:	d04b      	beq.n	34187fae <HAL_RCCEx_PeriphCLKConfig+0x1f0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34187f16:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f1a:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34187f1e:	4ba5      	ldr	r3, [pc, #660]	@ (341881b4 <HAL_RCCEx_PeriphCLKConfig+0x2114>)
34187f20:	429a      	cmp	r2, r3
34187f22:	d116      	bne.n	34187f52 <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187f24:	4ba4      	ldr	r3, [pc, #656]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187f26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187f2a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187f2e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187f32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187f38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187f3e:	3b01      	subs	r3, #1
34187f40:	041b      	lsls	r3, r3, #16
34187f42:	4313      	orrs	r3, r2
34187f44:	4a9c      	ldr	r2, [pc, #624]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187f46:	430b      	orrs	r3, r1
34187f48:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187f4c:	f7fd fdc6 	bl	34185adc <LL_RCC_IC9_Enable>
34187f50:	e026      	b.n	34187fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34187f52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f56:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34187f5a:	4b98      	ldr	r3, [pc, #608]	@ (341881bc <HAL_RCCEx_PeriphCLKConfig+0x211c>)
34187f5c:	429a      	cmp	r2, r3
34187f5e:	d116      	bne.n	34187f8e <HAL_RCCEx_PeriphCLKConfig+0x1eee>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187f60:	4b95      	ldr	r3, [pc, #596]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187f62:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187f66:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187f6a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187f6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187f74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34187f7a:	3b01      	subs	r3, #1
34187f7c:	041b      	lsls	r3, r3, #16
34187f7e:	4313      	orrs	r3, r2
34187f80:	4a8d      	ldr	r2, [pc, #564]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187f82:	430b      	orrs	r3, r1
34187f84:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187f88:	f7fd fea8 	bl	34185cdc <LL_RCC_IC14_Enable>
34187f8c:	e008      	b.n	34187fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34187f8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f92:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34187f96:	4b8a      	ldr	r3, [pc, #552]	@ (341881c0 <HAL_RCCEx_PeriphCLKConfig+0x2120>)
34187f98:	429a      	cmp	r2, r3
34187f9a:	d101      	bne.n	34187fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    {
      LL_RCC_CLKP_Enable();
34187f9c:	f7fe f85e 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
34187fa0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187fa4:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34187fa8:	4618      	mov	r0, r3
34187faa:	f7fc fffa 	bl	34184fa2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34187fae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
34187fb6:	2100      	movs	r1, #0
34187fb8:	6539      	str	r1, [r7, #80]	@ 0x50
34187fba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34187fbe:	657b      	str	r3, [r7, #84]	@ 0x54
34187fc0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
34187fc4:	4603      	mov	r3, r0
34187fc6:	460a      	mov	r2, r1
34187fc8:	4313      	orrs	r3, r2
34187fca:	d04b      	beq.n	34188064 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34187fcc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187fd0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34187fd4:	4b7b      	ldr	r3, [pc, #492]	@ (341881c4 <HAL_RCCEx_PeriphCLKConfig+0x2124>)
34187fd6:	429a      	cmp	r2, r3
34187fd8:	d116      	bne.n	34188008 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187fda:	4b77      	ldr	r3, [pc, #476]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187fdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187fe0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187fe4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187fe8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187fec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187fee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187ff4:	3b01      	subs	r3, #1
34187ff6:	041b      	lsls	r3, r3, #16
34187ff8:	4313      	orrs	r3, r2
34187ffa:	4a6f      	ldr	r2, [pc, #444]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34187ffc:	430b      	orrs	r3, r1
34187ffe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34188002:	f7fd fd6b 	bl	34185adc <LL_RCC_IC9_Enable>
34188006:	e026      	b.n	34188056 <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34188008:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418800c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34188010:	4b6d      	ldr	r3, [pc, #436]	@ (341881c8 <HAL_RCCEx_PeriphCLKConfig+0x2128>)
34188012:	429a      	cmp	r2, r3
34188014:	d116      	bne.n	34188044 <HAL_RCCEx_PeriphCLKConfig+0x1fa4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34188016:	4b68      	ldr	r3, [pc, #416]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34188018:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418801c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188020:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188024:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188028:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418802a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418802e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34188030:	3b01      	subs	r3, #1
34188032:	041b      	lsls	r3, r3, #16
34188034:	4313      	orrs	r3, r2
34188036:	4a60      	ldr	r2, [pc, #384]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34188038:	430b      	orrs	r3, r1
3418803a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418803e:	f7fd fe4d 	bl	34185cdc <LL_RCC_IC14_Enable>
34188042:	e008      	b.n	34188056 <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34188044:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188048:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3418804c:	4b5f      	ldr	r3, [pc, #380]	@ (341881cc <HAL_RCCEx_PeriphCLKConfig+0x212c>)
3418804e:	429a      	cmp	r2, r3
34188050:	d101      	bne.n	34188056 <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    {
      LL_RCC_CLKP_Enable();
34188052:	f7fe f803 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
34188056:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418805a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
3418805e:	4618      	mov	r0, r3
34188060:	f7fc ff9f 	bl	34184fa2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34188064:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188068:	e9d3 2300 	ldrd	r2, r3, [r3]
3418806c:	2100      	movs	r1, #0
3418806e:	64b9      	str	r1, [r7, #72]	@ 0x48
34188070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34188074:	64fb      	str	r3, [r7, #76]	@ 0x4c
34188076:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
3418807a:	4603      	mov	r3, r0
3418807c:	460a      	mov	r2, r1
3418807e:	4313      	orrs	r3, r2
34188080:	d04b      	beq.n	3418811a <HAL_RCCEx_PeriphCLKConfig+0x207a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34188082:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188086:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3418808a:	4b51      	ldr	r3, [pc, #324]	@ (341881d0 <HAL_RCCEx_PeriphCLKConfig+0x2130>)
3418808c:	429a      	cmp	r2, r3
3418808e:	d116      	bne.n	341880be <HAL_RCCEx_PeriphCLKConfig+0x201e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34188090:	4b49      	ldr	r3, [pc, #292]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34188092:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34188096:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418809a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418809e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341880a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341880aa:	3b01      	subs	r3, #1
341880ac:	041b      	lsls	r3, r3, #16
341880ae:	4313      	orrs	r3, r2
341880b0:	4a41      	ldr	r2, [pc, #260]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341880b2:	430b      	orrs	r3, r1
341880b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341880b8:	f7fd fd10 	bl	34185adc <LL_RCC_IC9_Enable>
341880bc:	e026      	b.n	3418810c <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
341880be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880c2:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
341880c6:	4b43      	ldr	r3, [pc, #268]	@ (341881d4 <HAL_RCCEx_PeriphCLKConfig+0x2134>)
341880c8:	429a      	cmp	r2, r3
341880ca:	d116      	bne.n	341880fa <HAL_RCCEx_PeriphCLKConfig+0x205a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341880cc:	4b3a      	ldr	r3, [pc, #232]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341880ce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341880d2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341880d6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341880da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341880e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341880e6:	3b01      	subs	r3, #1
341880e8:	041b      	lsls	r3, r3, #16
341880ea:	4313      	orrs	r3, r2
341880ec:	4a32      	ldr	r2, [pc, #200]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341880ee:	430b      	orrs	r3, r1
341880f0:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341880f4:	f7fd fdf2 	bl	34185cdc <LL_RCC_IC14_Enable>
341880f8:	e008      	b.n	3418810c <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
341880fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880fe:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34188102:	4b35      	ldr	r3, [pc, #212]	@ (341881d8 <HAL_RCCEx_PeriphCLKConfig+0x2138>)
34188104:	429a      	cmp	r2, r3
34188106:	d101      	bne.n	3418810c <HAL_RCCEx_PeriphCLKConfig+0x206c>
    {
      LL_RCC_CLKP_Enable();
34188108:	f7fd ffa8 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
3418810c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188110:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34188114:	4618      	mov	r0, r3
34188116:	f7fc ff44 	bl	34184fa2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
3418811a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418811e:	e9d3 2300 	ldrd	r2, r3, [r3]
34188122:	2100      	movs	r1, #0
34188124:	6439      	str	r1, [r7, #64]	@ 0x40
34188126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3418812a:	647b      	str	r3, [r7, #68]	@ 0x44
3418812c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
34188130:	4603      	mov	r3, r0
34188132:	460a      	mov	r2, r1
34188134:	4313      	orrs	r3, r2
34188136:	d065      	beq.n	34188204 <HAL_RCCEx_PeriphCLKConfig+0x2164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34188138:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418813c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34188140:	4b26      	ldr	r3, [pc, #152]	@ (341881dc <HAL_RCCEx_PeriphCLKConfig+0x213c>)
34188142:	429a      	cmp	r2, r3
34188144:	d116      	bne.n	34188174 <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34188146:	4b1c      	ldr	r3, [pc, #112]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34188148:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418814c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188150:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188154:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188158:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418815a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418815e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34188160:	3b01      	subs	r3, #1
34188162:	041b      	lsls	r3, r3, #16
34188164:	4313      	orrs	r3, r2
34188166:	4a14      	ldr	r2, [pc, #80]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34188168:	430b      	orrs	r3, r1
3418816a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418816e:	f7fd fcb5 	bl	34185adc <LL_RCC_IC9_Enable>
34188172:	e040      	b.n	341881f6 <HAL_RCCEx_PeriphCLKConfig+0x2156>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34188174:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188178:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3418817c:	4b18      	ldr	r3, [pc, #96]	@ (341881e0 <HAL_RCCEx_PeriphCLKConfig+0x2140>)
3418817e:	429a      	cmp	r2, r3
34188180:	d130      	bne.n	341881e4 <HAL_RCCEx_PeriphCLKConfig+0x2144>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34188182:	4b0d      	ldr	r3, [pc, #52]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34188184:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34188188:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418818c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188190:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188194:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34188196:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418819a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418819c:	3b01      	subs	r3, #1
3418819e:	041b      	lsls	r3, r3, #16
341881a0:	4313      	orrs	r3, r2
341881a2:	4a05      	ldr	r2, [pc, #20]	@ (341881b8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
341881a4:	430b      	orrs	r3, r1
341881a6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341881aa:	f7fd fd97 	bl	34185cdc <LL_RCC_IC14_Enable>
341881ae:	e022      	b.n	341881f6 <HAL_RCCEx_PeriphCLKConfig+0x2156>
341881b0:	07010830 	.word	0x07010830
341881b4:	07020c30 	.word	0x07020c30
341881b8:	56028000 	.word	0x56028000
341881bc:	07030c30 	.word	0x07030c30
341881c0:	07010c30 	.word	0x07010c30
341881c4:	07021030 	.word	0x07021030
341881c8:	07031030 	.word	0x07031030
341881cc:	07011030 	.word	0x07011030
341881d0:	07021430 	.word	0x07021430
341881d4:	07031430 	.word	0x07031430
341881d8:	07011430 	.word	0x07011430
341881dc:	07021830 	.word	0x07021830
341881e0:	07031830 	.word	0x07031830
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
341881e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341881e8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
341881ec:	4bc8      	ldr	r3, [pc, #800]	@ (34188510 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
341881ee:	429a      	cmp	r2, r3
341881f0:	d101      	bne.n	341881f6 <HAL_RCCEx_PeriphCLKConfig+0x2156>
    {
      LL_RCC_CLKP_Enable();
341881f2:	f7fd ff33 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
341881f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341881fa:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
341881fe:	4618      	mov	r0, r3
34188200:	f7fc fecf 	bl	34184fa2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34188204:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188208:	e9d3 2300 	ldrd	r2, r3, [r3]
3418820c:	2100      	movs	r1, #0
3418820e:	63b9      	str	r1, [r7, #56]	@ 0x38
34188210:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34188214:	63fb      	str	r3, [r7, #60]	@ 0x3c
34188216:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
3418821a:	4603      	mov	r3, r0
3418821c:	460a      	mov	r2, r1
3418821e:	4313      	orrs	r3, r2
34188220:	d04b      	beq.n	341882ba <HAL_RCCEx_PeriphCLKConfig+0x221a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34188222:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188226:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3418822a:	4bba      	ldr	r3, [pc, #744]	@ (34188514 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3418822c:	429a      	cmp	r2, r3
3418822e:	d116      	bne.n	3418825e <HAL_RCCEx_PeriphCLKConfig+0x21be>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34188230:	4bb9      	ldr	r3, [pc, #740]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34188232:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34188236:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418823a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418823e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188242:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34188244:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418824a:	3b01      	subs	r3, #1
3418824c:	041b      	lsls	r3, r3, #16
3418824e:	4313      	orrs	r3, r2
34188250:	4ab1      	ldr	r2, [pc, #708]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34188252:	430b      	orrs	r3, r1
34188254:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34188258:	f7fd fc40 	bl	34185adc <LL_RCC_IC9_Enable>
3418825c:	e026      	b.n	341882ac <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
3418825e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188262:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34188266:	4bad      	ldr	r3, [pc, #692]	@ (3418851c <HAL_RCCEx_PeriphCLKConfig+0x247c>)
34188268:	429a      	cmp	r2, r3
3418826a:	d116      	bne.n	3418829a <HAL_RCCEx_PeriphCLKConfig+0x21fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418826c:	4baa      	ldr	r3, [pc, #680]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418826e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34188272:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188276:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418827a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418827e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34188280:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34188286:	3b01      	subs	r3, #1
34188288:	041b      	lsls	r3, r3, #16
3418828a:	4313      	orrs	r3, r2
3418828c:	4aa2      	ldr	r2, [pc, #648]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418828e:	430b      	orrs	r3, r1
34188290:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34188294:	f7fd fd22 	bl	34185cdc <LL_RCC_IC14_Enable>
34188298:	e008      	b.n	341882ac <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
3418829a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418829e:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
341882a2:	4b9f      	ldr	r3, [pc, #636]	@ (34188520 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
341882a4:	429a      	cmp	r2, r3
341882a6:	d101      	bne.n	341882ac <HAL_RCCEx_PeriphCLKConfig+0x220c>
    {
      LL_RCC_CLKP_Enable();
341882a8:	f7fd fed8 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
341882ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882b0:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
341882b4:	4618      	mov	r0, r3
341882b6:	f7fc fe74 	bl	34184fa2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
341882ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882be:	e9d3 2300 	ldrd	r2, r3, [r3]
341882c2:	2100      	movs	r1, #0
341882c4:	6339      	str	r1, [r7, #48]	@ 0x30
341882c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
341882ca:	637b      	str	r3, [r7, #52]	@ 0x34
341882cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
341882d0:	4603      	mov	r3, r0
341882d2:	460a      	mov	r2, r1
341882d4:	4313      	orrs	r3, r2
341882d6:	d04b      	beq.n	34188370 <HAL_RCCEx_PeriphCLKConfig+0x22d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
341882d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882dc:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
341882e0:	4a90      	ldr	r2, [pc, #576]	@ (34188524 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
341882e2:	4293      	cmp	r3, r2
341882e4:	d116      	bne.n	34188314 <HAL_RCCEx_PeriphCLKConfig+0x2274>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341882e6:	4b8c      	ldr	r3, [pc, #560]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341882e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341882ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341882f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341882f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341882fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34188300:	3b01      	subs	r3, #1
34188302:	041b      	lsls	r3, r3, #16
34188304:	4313      	orrs	r3, r2
34188306:	4a84      	ldr	r2, [pc, #528]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34188308:	430b      	orrs	r3, r1
3418830a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418830e:	f7fd fbe5 	bl	34185adc <LL_RCC_IC9_Enable>
34188312:	e026      	b.n	34188362 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34188314:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188318:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418831c:	4a82      	ldr	r2, [pc, #520]	@ (34188528 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
3418831e:	4293      	cmp	r3, r2
34188320:	d116      	bne.n	34188350 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34188322:	4b7d      	ldr	r3, [pc, #500]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34188324:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34188328:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418832c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188330:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188334:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34188336:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418833a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418833c:	3b01      	subs	r3, #1
3418833e:	041b      	lsls	r3, r3, #16
34188340:	4313      	orrs	r3, r2
34188342:	4a75      	ldr	r2, [pc, #468]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34188344:	430b      	orrs	r3, r1
34188346:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418834a:	f7fd fcc7 	bl	34185cdc <LL_RCC_IC14_Enable>
3418834e:	e008      	b.n	34188362 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34188350:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188354:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34188358:	4a74      	ldr	r2, [pc, #464]	@ (3418852c <HAL_RCCEx_PeriphCLKConfig+0x248c>)
3418835a:	4293      	cmp	r3, r2
3418835c:	d101      	bne.n	34188362 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    {
      LL_RCC_CLKP_Enable();
3418835e:	f7fd fe7d 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
34188362:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188366:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418836a:	4618      	mov	r0, r3
3418836c:	f7fc fe19 	bl	34184fa2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34188370:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188374:	e9d3 2300 	ldrd	r2, r3, [r3]
34188378:	2100      	movs	r1, #0
3418837a:	62b9      	str	r1, [r7, #40]	@ 0x28
3418837c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34188380:	62fb      	str	r3, [r7, #44]	@ 0x2c
34188382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
34188386:	4603      	mov	r3, r0
34188388:	460a      	mov	r2, r1
3418838a:	4313      	orrs	r3, r2
3418838c:	d04b      	beq.n	34188426 <HAL_RCCEx_PeriphCLKConfig+0x2386>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
3418838e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188392:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34188396:	4a66      	ldr	r2, [pc, #408]	@ (34188530 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
34188398:	4293      	cmp	r3, r2
3418839a:	d116      	bne.n	341883ca <HAL_RCCEx_PeriphCLKConfig+0x232a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418839c:	4b5e      	ldr	r3, [pc, #376]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418839e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341883a2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341883a6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341883aa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341883ae:	6c91      	ldr	r1, [r2, #72]	@ 0x48
341883b0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341883b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
341883b6:	3a01      	subs	r2, #1
341883b8:	0412      	lsls	r2, r2, #16
341883ba:	430a      	orrs	r2, r1
341883bc:	4956      	ldr	r1, [pc, #344]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341883be:	4313      	orrs	r3, r2
341883c0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341883c4:	f7fd fb8a 	bl	34185adc <LL_RCC_IC9_Enable>
341883c8:	e026      	b.n	34188418 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
341883ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341883ce:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
341883d2:	4a58      	ldr	r2, [pc, #352]	@ (34188534 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
341883d4:	4293      	cmp	r3, r2
341883d6:	d116      	bne.n	34188406 <HAL_RCCEx_PeriphCLKConfig+0x2366>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341883d8:	4b4f      	ldr	r3, [pc, #316]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341883da:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341883de:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341883e2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341883e6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341883ea:	6f11      	ldr	r1, [r2, #112]	@ 0x70
341883ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341883f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
341883f2:	3a01      	subs	r2, #1
341883f4:	0412      	lsls	r2, r2, #16
341883f6:	430a      	orrs	r2, r1
341883f8:	4947      	ldr	r1, [pc, #284]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341883fa:	4313      	orrs	r3, r2
341883fc:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34188400:	f7fd fc6c 	bl	34185cdc <LL_RCC_IC14_Enable>
34188404:	e008      	b.n	34188418 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34188406:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418840a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418840e:	4a4a      	ldr	r2, [pc, #296]	@ (34188538 <HAL_RCCEx_PeriphCLKConfig+0x2498>)
34188410:	4293      	cmp	r3, r2
34188412:	d101      	bne.n	34188418 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    {
      LL_RCC_CLKP_Enable();
34188414:	f7fd fe22 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
34188418:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418841c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34188420:	4618      	mov	r0, r3
34188422:	f7fc fdbe 	bl	34184fa2 <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34188426:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418842a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418842e:	2100      	movs	r1, #0
34188430:	6239      	str	r1, [r7, #32]
34188432:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34188436:	627b      	str	r3, [r7, #36]	@ 0x24
34188438:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
3418843c:	4603      	mov	r3, r0
3418843e:	460a      	mov	r2, r1
34188440:	4313      	orrs	r3, r2
34188442:	d014      	beq.n	3418846e <HAL_RCCEx_PeriphCLKConfig+0x23ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34188444:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188448:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418844c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34188450:	4618      	mov	r0, r3
34188452:	f7fc fd4e 	bl	34184ef2 <LL_RCC_SetOTGPHYCKREFClockSource>
34188456:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418845a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418845e:	0fdb      	lsrs	r3, r3, #31
34188460:	2b01      	cmp	r3, #1
34188462:	d102      	bne.n	3418846a <HAL_RCCEx_PeriphCLKConfig+0x23ca>
34188464:	f7fc faf0 	bl	34184a48 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34188468:	e001      	b.n	3418846e <HAL_RCCEx_PeriphCLKConfig+0x23ce>
3418846a:	f7fc fadd 	bl	34184a28 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
3418846e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188472:	e9d3 2300 	ldrd	r2, r3, [r3]
34188476:	2100      	movs	r1, #0
34188478:	61b9      	str	r1, [r7, #24]
3418847a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3418847e:	61fb      	str	r3, [r7, #28]
34188480:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
34188484:	4603      	mov	r3, r0
34188486:	460a      	mov	r2, r1
34188488:	4313      	orrs	r3, r2
3418848a:	d014      	beq.n	341884b6 <HAL_RCCEx_PeriphCLKConfig+0x2416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3418848c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188490:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
34188494:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34188498:	4618      	mov	r0, r3
3418849a:	f7fc fd2a 	bl	34184ef2 <LL_RCC_SetOTGPHYCKREFClockSource>
3418849e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341884a2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
341884a6:	0fdb      	lsrs	r3, r3, #31
341884a8:	2b01      	cmp	r3, #1
341884aa:	d102      	bne.n	341884b2 <HAL_RCCEx_PeriphCLKConfig+0x2412>
341884ac:	f7fc facc 	bl	34184a48 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
341884b0:	e001      	b.n	341884b6 <HAL_RCCEx_PeriphCLKConfig+0x2416>
341884b2:	f7fc fab9 	bl	34184a28 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
341884b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341884ba:	e9d3 2300 	ldrd	r2, r3, [r3]
341884be:	2100      	movs	r1, #0
341884c0:	6139      	str	r1, [r7, #16]
341884c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
341884c6:	617b      	str	r3, [r7, #20]
341884c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
341884cc:	4603      	mov	r3, r0
341884ce:	460a      	mov	r2, r1
341884d0:	4313      	orrs	r3, r2
341884d2:	d053      	beq.n	3418857c <HAL_RCCEx_PeriphCLKConfig+0x24dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
341884d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341884d8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
341884dc:	4a17      	ldr	r2, [pc, #92]	@ (3418853c <HAL_RCCEx_PeriphCLKConfig+0x249c>)
341884de:	4293      	cmp	r3, r2
341884e0:	d12e      	bne.n	34188540 <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341884e2:	4b0d      	ldr	r3, [pc, #52]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341884e4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341884e8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341884ec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341884f0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341884f4:	6f91      	ldr	r1, [r2, #120]	@ 0x78
341884f6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341884fa:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
341884fc:	3a01      	subs	r2, #1
341884fe:	0412      	lsls	r2, r2, #16
34188500:	430a      	orrs	r2, r1
34188502:	4905      	ldr	r1, [pc, #20]	@ (34188518 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34188504:	4313      	orrs	r3, r2
34188506:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418850a:	f7fd fc27 	bl	34185d5c <LL_RCC_IC15_Enable>
3418850e:	e020      	b.n	34188552 <HAL_RCCEx_PeriphCLKConfig+0x24b2>
34188510:	07011830 	.word	0x07011830
34188514:	07021c30 	.word	0x07021c30
34188518:	56028000 	.word	0x56028000
3418851c:	07031c30 	.word	0x07031c30
34188520:	07011c30 	.word	0x07011c30
34188524:	07020034 	.word	0x07020034
34188528:	07030034 	.word	0x07030034
3418852c:	07010034 	.word	0x07010034
34188530:	07020434 	.word	0x07020434
34188534:	07030434 	.word	0x07030434
34188538:	07010434 	.word	0x07010434
3418853c:	03020c14 	.word	0x03020c14
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34188540:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188544:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34188548:	4a43      	ldr	r2, [pc, #268]	@ (34188658 <HAL_RCCEx_PeriphCLKConfig+0x25b8>)
3418854a:	4293      	cmp	r3, r2
3418854c:	d101      	bne.n	34188552 <HAL_RCCEx_PeriphCLKConfig+0x24b2>
    {
      LL_RCC_CLKP_Enable();
3418854e:	f7fd fd85 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34188552:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188556:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418855a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418855e:	4618      	mov	r0, r3
34188560:	f7fc fcbc 	bl	34184edc <LL_RCC_SetOTGPHYClockSource>
34188564:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188568:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418856c:	0fdb      	lsrs	r3, r3, #31
3418856e:	2b01      	cmp	r3, #1
34188570:	d102      	bne.n	34188578 <HAL_RCCEx_PeriphCLKConfig+0x24d8>
34188572:	f7fc fa69 	bl	34184a48 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34188576:	e001      	b.n	3418857c <HAL_RCCEx_PeriphCLKConfig+0x24dc>
34188578:	f7fc fa56 	bl	34184a28 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
3418857c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188580:	e9d3 2300 	ldrd	r2, r3, [r3]
34188584:	2100      	movs	r1, #0
34188586:	60b9      	str	r1, [r7, #8]
34188588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3418858c:	60fb      	str	r3, [r7, #12]
3418858e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
34188592:	4603      	mov	r3, r0
34188594:	460a      	mov	r2, r1
34188596:	4313      	orrs	r3, r2
34188598:	d03b      	beq.n	34188612 <HAL_RCCEx_PeriphCLKConfig+0x2572>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
3418859a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418859e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
341885a2:	4a2e      	ldr	r2, [pc, #184]	@ (3418865c <HAL_RCCEx_PeriphCLKConfig+0x25bc>)
341885a4:	4293      	cmp	r3, r2
341885a6:	d116      	bne.n	341885d6 <HAL_RCCEx_PeriphCLKConfig+0x2536>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341885a8:	4b2d      	ldr	r3, [pc, #180]	@ (34188660 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
341885aa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341885ae:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341885b2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341885b6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341885ba:	6f91      	ldr	r1, [r2, #120]	@ 0x78
341885bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341885c0:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
341885c2:	3a01      	subs	r2, #1
341885c4:	0412      	lsls	r2, r2, #16
341885c6:	430a      	orrs	r2, r1
341885c8:	4925      	ldr	r1, [pc, #148]	@ (34188660 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
341885ca:	4313      	orrs	r3, r2
341885cc:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341885d0:	f7fd fbc4 	bl	34185d5c <LL_RCC_IC15_Enable>
341885d4:	e008      	b.n	341885e8 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
341885d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885da:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
341885de:	4a21      	ldr	r2, [pc, #132]	@ (34188664 <HAL_RCCEx_PeriphCLKConfig+0x25c4>)
341885e0:	4293      	cmp	r3, r2
341885e2:	d101      	bne.n	341885e8 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    {
      LL_RCC_CLKP_Enable();
341885e4:	f7fd fd3a 	bl	3418605c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
341885e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885ec:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
341885f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
341885f4:	4618      	mov	r0, r3
341885f6:	f7fc fc71 	bl	34184edc <LL_RCC_SetOTGPHYClockSource>
341885fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885fe:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34188602:	0fdb      	lsrs	r3, r3, #31
34188604:	2b01      	cmp	r3, #1
34188606:	d102      	bne.n	3418860e <HAL_RCCEx_PeriphCLKConfig+0x256e>
34188608:	f7fc fa1e 	bl	34184a48 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418860c:	e001      	b.n	34188612 <HAL_RCCEx_PeriphCLKConfig+0x2572>
3418860e:	f7fc fa0b 	bl	34184a28 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
34188612:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188616:	e9d3 2300 	ldrd	r2, r3, [r3]
3418861a:	2100      	movs	r1, #0
3418861c:	6039      	str	r1, [r7, #0]
3418861e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34188622:	607b      	str	r3, [r7, #4]
34188624:	e9d7 0100 	ldrd	r0, r1, [r7]
34188628:	4603      	mov	r3, r0
3418862a:	460a      	mov	r2, r1
3418862c:	4313      	orrs	r3, r2
3418862e:	d006      	beq.n	3418863e <HAL_RCCEx_PeriphCLKConfig+0x259e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
34188630:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188634:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34188638:	4618      	mov	r0, r3
3418863a:	f7fc fe8b 	bl	34185354 <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
3418863e:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
34188642:	2b00      	cmp	r3, #0
34188644:	d101      	bne.n	3418864a <HAL_RCCEx_PeriphCLKConfig+0x25aa>
  {
    return HAL_OK;
34188646:	2300      	movs	r3, #0
34188648:	e000      	b.n	3418864c <HAL_RCCEx_PeriphCLKConfig+0x25ac>
  }
  return HAL_ERROR;
3418864a:	2301      	movs	r3, #1
}
3418864c:	4618      	mov	r0, r3
3418864e:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
34188652:	46bd      	mov	sp, r7
34188654:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
34188658:	03010c14 	.word	0x03010c14
3418865c:	03021414 	.word	0x03021414
34188660:	56028000 	.word	0x56028000
34188664:	03011414 	.word	0x03011414

34188668 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
34188668:	b590      	push	{r4, r7, lr}
3418866a:	b085      	sub	sp, #20
3418866c:	af00      	add	r7, sp, #0
3418866e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
34188672:	2100      	movs	r1, #0
34188674:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
34188676:	e9d7 0100 	ldrd	r0, r1, [r7]
3418867a:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
3418867e:	ea50 0104 	orrs.w	r1, r0, r4
34188682:	f000 8436 	beq.w	34188ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
34188686:	e9d7 0100 	ldrd	r0, r1, [r7]
3418868a:	2801      	cmp	r0, #1
3418868c:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
34188690:	f080 8434 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188694:	e9d7 0100 	ldrd	r0, r1, [r7]
34188698:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
3418869c:	ea50 0104 	orrs.w	r1, r0, r4
341886a0:	f000 8422 	beq.w	34188ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
341886a4:	e9d7 0100 	ldrd	r0, r1, [r7]
341886a8:	2801      	cmp	r0, #1
341886aa:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
341886ae:	f080 8425 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341886b2:	e9d7 0100 	ldrd	r0, r1, [r7]
341886b6:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
341886ba:	ea50 0104 	orrs.w	r1, r0, r4
341886be:	f000 840e 	beq.w	34188ede <HAL_RCCEx_GetPeriphCLKFreq+0x876>
341886c2:	e9d7 0100 	ldrd	r0, r1, [r7]
341886c6:	2801      	cmp	r0, #1
341886c8:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
341886cc:	f080 8416 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341886d0:	e9d7 0100 	ldrd	r0, r1, [r7]
341886d4:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
341886d8:	ea50 0104 	orrs.w	r1, r0, r4
341886dc:	f000 83fa 	beq.w	34188ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
341886e0:	e9d7 0100 	ldrd	r0, r1, [r7]
341886e4:	2801      	cmp	r0, #1
341886e6:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
341886ea:	f080 8407 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341886ee:	e9d7 0100 	ldrd	r0, r1, [r7]
341886f2:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
341886f6:	ea50 0104 	orrs.w	r1, r0, r4
341886fa:	f000 83e6 	beq.w	34188eca <HAL_RCCEx_GetPeriphCLKFreq+0x862>
341886fe:	e9d7 0100 	ldrd	r0, r1, [r7]
34188702:	2801      	cmp	r0, #1
34188704:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
34188708:	f080 83f8 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418870c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188710:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
34188714:	ea50 0104 	orrs.w	r1, r0, r4
34188718:	f000 83d2 	beq.w	34188ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
3418871c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188720:	2801      	cmp	r0, #1
34188722:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
34188726:	f080 83e9 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418872a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418872e:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
34188732:	ea50 0104 	orrs.w	r1, r0, r4
34188736:	f000 83be 	beq.w	34188eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
3418873a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418873e:	2801      	cmp	r0, #1
34188740:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
34188744:	f080 83da 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188748:	e9d7 0100 	ldrd	r0, r1, [r7]
3418874c:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
34188750:	ea50 0104 	orrs.w	r1, r0, r4
34188754:	f000 83aa 	beq.w	34188eac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34188758:	e9d7 0100 	ldrd	r0, r1, [r7]
3418875c:	2801      	cmp	r0, #1
3418875e:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
34188762:	f080 83cb 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188766:	e9d7 0100 	ldrd	r0, r1, [r7]
3418876a:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
3418876e:	ea50 0104 	orrs.w	r1, r0, r4
34188772:	f000 8396 	beq.w	34188ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
34188776:	e9d7 0100 	ldrd	r0, r1, [r7]
3418877a:	2801      	cmp	r0, #1
3418877c:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
34188780:	f080 83bc 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188784:	e9d7 0100 	ldrd	r0, r1, [r7]
34188788:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
3418878c:	ea50 0104 	orrs.w	r1, r0, r4
34188790:	f000 8382 	beq.w	34188e98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
34188794:	e9d7 0100 	ldrd	r0, r1, [r7]
34188798:	2801      	cmp	r0, #1
3418879a:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
3418879e:	f080 83ad 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341887a2:	e9d7 0100 	ldrd	r0, r1, [r7]
341887a6:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
341887aa:	ea50 0104 	orrs.w	r1, r0, r4
341887ae:	f000 836e 	beq.w	34188e8e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
341887b2:	e9d7 0100 	ldrd	r0, r1, [r7]
341887b6:	2801      	cmp	r0, #1
341887b8:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
341887bc:	f080 839e 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341887c0:	e9d7 0100 	ldrd	r0, r1, [r7]
341887c4:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
341887c8:	ea50 0104 	orrs.w	r1, r0, r4
341887cc:	f000 835a 	beq.w	34188e84 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
341887d0:	e9d7 0100 	ldrd	r0, r1, [r7]
341887d4:	2801      	cmp	r0, #1
341887d6:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
341887da:	f080 838f 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341887de:	e9d7 0100 	ldrd	r0, r1, [r7]
341887e2:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
341887e6:	ea50 0104 	orrs.w	r1, r0, r4
341887ea:	f000 8346 	beq.w	34188e7a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
341887ee:	e9d7 0100 	ldrd	r0, r1, [r7]
341887f2:	2801      	cmp	r0, #1
341887f4:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
341887f8:	f080 8380 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341887fc:	e9d7 0100 	ldrd	r0, r1, [r7]
34188800:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
34188804:	ea50 0104 	orrs.w	r1, r0, r4
34188808:	f000 8332 	beq.w	34188e70 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
3418880c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188810:	2801      	cmp	r0, #1
34188812:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
34188816:	f080 8371 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418881a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418881e:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
34188822:	ea50 0104 	orrs.w	r1, r0, r4
34188826:	f000 831e 	beq.w	34188e66 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
3418882a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418882e:	2801      	cmp	r0, #1
34188830:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
34188834:	f080 8362 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188838:	e9d7 0100 	ldrd	r0, r1, [r7]
3418883c:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
34188840:	ea50 0104 	orrs.w	r1, r0, r4
34188844:	f000 830a 	beq.w	34188e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
34188848:	e9d7 0100 	ldrd	r0, r1, [r7]
3418884c:	2801      	cmp	r0, #1
3418884e:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
34188852:	f080 8353 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188856:	e9d7 0100 	ldrd	r0, r1, [r7]
3418885a:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
3418885e:	ea50 0104 	orrs.w	r1, r0, r4
34188862:	f000 82f6 	beq.w	34188e52 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
34188866:	e9d7 0100 	ldrd	r0, r1, [r7]
3418886a:	2801      	cmp	r0, #1
3418886c:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
34188870:	f080 8344 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188874:	e9d7 0100 	ldrd	r0, r1, [r7]
34188878:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
3418887c:	ea50 0104 	orrs.w	r1, r0, r4
34188880:	f000 82e2 	beq.w	34188e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
34188884:	e9d7 0100 	ldrd	r0, r1, [r7]
34188888:	2801      	cmp	r0, #1
3418888a:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
3418888e:	f080 8335 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188892:	e9d7 0100 	ldrd	r0, r1, [r7]
34188896:	f1a1 0420 	sub.w	r4, r1, #32
3418889a:	ea50 0104 	orrs.w	r1, r0, r4
3418889e:	f000 82ce 	beq.w	34188e3e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
341888a2:	e9d7 0100 	ldrd	r0, r1, [r7]
341888a6:	2801      	cmp	r0, #1
341888a8:	f171 0120 	sbcs.w	r1, r1, #32
341888ac:	f080 8326 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341888b0:	e9d7 0100 	ldrd	r0, r1, [r7]
341888b4:	f1a1 0410 	sub.w	r4, r1, #16
341888b8:	ea50 0104 	orrs.w	r1, r0, r4
341888bc:	f000 82ba 	beq.w	34188e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
341888c0:	e9d7 0100 	ldrd	r0, r1, [r7]
341888c4:	2801      	cmp	r0, #1
341888c6:	f171 0110 	sbcs.w	r1, r1, #16
341888ca:	f080 8317 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341888ce:	e9d7 0100 	ldrd	r0, r1, [r7]
341888d2:	f1a1 0408 	sub.w	r4, r1, #8
341888d6:	ea50 0104 	orrs.w	r1, r0, r4
341888da:	f000 82a6 	beq.w	34188e2a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
341888de:	e9d7 0100 	ldrd	r0, r1, [r7]
341888e2:	2801      	cmp	r0, #1
341888e4:	f171 0108 	sbcs.w	r1, r1, #8
341888e8:	f080 8308 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341888ec:	e9d7 0100 	ldrd	r0, r1, [r7]
341888f0:	1f0c      	subs	r4, r1, #4
341888f2:	ea50 0104 	orrs.w	r1, r0, r4
341888f6:	f000 8293 	beq.w	34188e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
341888fa:	e9d7 0100 	ldrd	r0, r1, [r7]
341888fe:	2801      	cmp	r0, #1
34188900:	f171 0104 	sbcs.w	r1, r1, #4
34188904:	f080 82fa 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188908:	e9d7 0100 	ldrd	r0, r1, [r7]
3418890c:	1e8c      	subs	r4, r1, #2
3418890e:	ea50 0104 	orrs.w	r1, r0, r4
34188912:	f000 8280 	beq.w	34188e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
34188916:	e9d7 0100 	ldrd	r0, r1, [r7]
3418891a:	2801      	cmp	r0, #1
3418891c:	f171 0102 	sbcs.w	r1, r1, #2
34188920:	f080 82ec 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188924:	e9d7 0100 	ldrd	r0, r1, [r7]
34188928:	1e4c      	subs	r4, r1, #1
3418892a:	ea50 0104 	orrs.w	r1, r0, r4
3418892e:	f000 826d 	beq.w	34188e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
34188932:	e9d7 0100 	ldrd	r0, r1, [r7]
34188936:	2801      	cmp	r0, #1
34188938:	f171 0101 	sbcs.w	r1, r1, #1
3418893c:	f080 82de 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188940:	e9d7 0100 	ldrd	r0, r1, [r7]
34188944:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
34188948:	4321      	orrs	r1, r4
3418894a:	f000 825a 	beq.w	34188e02 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
3418894e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188952:	4cda      	ldr	r4, [pc, #872]	@ (34188cbc <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
34188954:	42a0      	cmp	r0, r4
34188956:	f171 0100 	sbcs.w	r1, r1, #0
3418895a:	f080 82cf 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418895e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188962:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
34188966:	4321      	orrs	r1, r4
34188968:	f000 8246 	beq.w	34188df8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
3418896c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188970:	4cd3      	ldr	r4, [pc, #844]	@ (34188cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
34188972:	42a0      	cmp	r0, r4
34188974:	f171 0100 	sbcs.w	r1, r1, #0
34188978:	f080 82c0 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418897c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188980:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
34188984:	4321      	orrs	r1, r4
34188986:	f000 8232 	beq.w	34188dee <HAL_RCCEx_GetPeriphCLKFreq+0x786>
3418898a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418898e:	4ccd      	ldr	r4, [pc, #820]	@ (34188cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
34188990:	42a0      	cmp	r0, r4
34188992:	f171 0100 	sbcs.w	r1, r1, #0
34188996:	f080 82b1 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418899a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418899e:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
341889a2:	4321      	orrs	r1, r4
341889a4:	f000 821e 	beq.w	34188de4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
341889a8:	e9d7 0100 	ldrd	r0, r1, [r7]
341889ac:	4cc6      	ldr	r4, [pc, #792]	@ (34188cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
341889ae:	42a0      	cmp	r0, r4
341889b0:	f171 0100 	sbcs.w	r1, r1, #0
341889b4:	f080 82a2 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341889b8:	e9d7 0100 	ldrd	r0, r1, [r7]
341889bc:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
341889c0:	4321      	orrs	r1, r4
341889c2:	f000 820b 	beq.w	34188ddc <HAL_RCCEx_GetPeriphCLKFreq+0x774>
341889c6:	e9d7 0100 	ldrd	r0, r1, [r7]
341889ca:	4cc0      	ldr	r4, [pc, #768]	@ (34188ccc <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
341889cc:	42a0      	cmp	r0, r4
341889ce:	f171 0100 	sbcs.w	r1, r1, #0
341889d2:	f080 8293 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341889d6:	e9d7 0100 	ldrd	r0, r1, [r7]
341889da:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
341889de:	4321      	orrs	r1, r4
341889e0:	f000 81f7 	beq.w	34188dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
341889e4:	e9d7 0100 	ldrd	r0, r1, [r7]
341889e8:	4cb9      	ldr	r4, [pc, #740]	@ (34188cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
341889ea:	42a0      	cmp	r0, r4
341889ec:	f171 0100 	sbcs.w	r1, r1, #0
341889f0:	f080 8284 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341889f4:	e9d7 0100 	ldrd	r0, r1, [r7]
341889f8:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
341889fc:	4321      	orrs	r1, r4
341889fe:	f000 81e2 	beq.w	34188dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
34188a02:	e9d7 0100 	ldrd	r0, r1, [r7]
34188a06:	4cb3      	ldr	r4, [pc, #716]	@ (34188cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
34188a08:	42a0      	cmp	r0, r4
34188a0a:	f171 0100 	sbcs.w	r1, r1, #0
34188a0e:	f080 8275 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188a12:	e9d7 0100 	ldrd	r0, r1, [r7]
34188a16:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
34188a1a:	4321      	orrs	r1, r4
34188a1c:	f000 81cd 	beq.w	34188dba <HAL_RCCEx_GetPeriphCLKFreq+0x752>
34188a20:	e9d7 0100 	ldrd	r0, r1, [r7]
34188a24:	4cac      	ldr	r4, [pc, #688]	@ (34188cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
34188a26:	42a0      	cmp	r0, r4
34188a28:	f171 0100 	sbcs.w	r1, r1, #0
34188a2c:	f080 8266 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188a30:	e9d7 0100 	ldrd	r0, r1, [r7]
34188a34:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
34188a38:	4321      	orrs	r1, r4
34188a3a:	f000 81b8 	beq.w	34188dae <HAL_RCCEx_GetPeriphCLKFreq+0x746>
34188a3e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188a42:	4ca6      	ldr	r4, [pc, #664]	@ (34188cdc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
34188a44:	42a0      	cmp	r0, r4
34188a46:	f171 0100 	sbcs.w	r1, r1, #0
34188a4a:	f080 8257 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188a52:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
34188a56:	4321      	orrs	r1, r4
34188a58:	f000 81a4 	beq.w	34188da4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
34188a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188a60:	4c9f      	ldr	r4, [pc, #636]	@ (34188ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
34188a62:	42a0      	cmp	r0, r4
34188a64:	f171 0100 	sbcs.w	r1, r1, #0
34188a68:	f080 8248 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188a6c:	e9d7 0100 	ldrd	r0, r1, [r7]
34188a70:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
34188a74:	4321      	orrs	r1, r4
34188a76:	f000 8190 	beq.w	34188d9a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
34188a7a:	e9d7 0100 	ldrd	r0, r1, [r7]
34188a7e:	4c99      	ldr	r4, [pc, #612]	@ (34188ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
34188a80:	42a0      	cmp	r0, r4
34188a82:	f171 0100 	sbcs.w	r1, r1, #0
34188a86:	f080 8239 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188a8a:	e9d7 0100 	ldrd	r0, r1, [r7]
34188a8e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
34188a92:	4321      	orrs	r1, r4
34188a94:	f000 817c 	beq.w	34188d90 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
34188a98:	e9d7 0100 	ldrd	r0, r1, [r7]
34188a9c:	4c92      	ldr	r4, [pc, #584]	@ (34188ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
34188a9e:	42a0      	cmp	r0, r4
34188aa0:	f171 0100 	sbcs.w	r1, r1, #0
34188aa4:	f080 822a 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188aa8:	e9d7 0100 	ldrd	r0, r1, [r7]
34188aac:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
34188ab0:	4321      	orrs	r1, r4
34188ab2:	f000 8168 	beq.w	34188d86 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
34188ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
34188aba:	4c8c      	ldr	r4, [pc, #560]	@ (34188cec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
34188abc:	42a0      	cmp	r0, r4
34188abe:	f171 0100 	sbcs.w	r1, r1, #0
34188ac2:	f080 821b 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188ac6:	e9d7 0100 	ldrd	r0, r1, [r7]
34188aca:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
34188ace:	4321      	orrs	r1, r4
34188ad0:	f000 8154 	beq.w	34188d7c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
34188ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
34188ad8:	4c85      	ldr	r4, [pc, #532]	@ (34188cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
34188ada:	42a0      	cmp	r0, r4
34188adc:	f171 0100 	sbcs.w	r1, r1, #0
34188ae0:	f080 820c 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
34188ae8:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
34188aec:	4321      	orrs	r1, r4
34188aee:	f000 8140 	beq.w	34188d72 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
34188af2:	e9d7 0100 	ldrd	r0, r1, [r7]
34188af6:	4c7f      	ldr	r4, [pc, #508]	@ (34188cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
34188af8:	42a0      	cmp	r0, r4
34188afa:	f171 0100 	sbcs.w	r1, r1, #0
34188afe:	f080 81fd 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188b02:	e9d7 0100 	ldrd	r0, r1, [r7]
34188b06:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
34188b0a:	4321      	orrs	r1, r4
34188b0c:	f000 812c 	beq.w	34188d68 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
34188b10:	e9d7 0100 	ldrd	r0, r1, [r7]
34188b14:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34188b18:	f171 0100 	sbcs.w	r1, r1, #0
34188b1c:	f080 81ee 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188b20:	e9d7 0100 	ldrd	r0, r1, [r7]
34188b24:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
34188b28:	4321      	orrs	r1, r4
34188b2a:	f000 8118 	beq.w	34188d5e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
34188b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188b32:	f248 0401 	movw	r4, #32769	@ 0x8001
34188b36:	42a0      	cmp	r0, r4
34188b38:	f171 0100 	sbcs.w	r1, r1, #0
34188b3c:	f080 81de 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188b40:	e9d7 0100 	ldrd	r0, r1, [r7]
34188b44:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
34188b48:	4321      	orrs	r1, r4
34188b4a:	f000 8103 	beq.w	34188d54 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
34188b4e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188b52:	f244 0401 	movw	r4, #16385	@ 0x4001
34188b56:	42a0      	cmp	r0, r4
34188b58:	f171 0100 	sbcs.w	r1, r1, #0
34188b5c:	f080 81ce 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188b60:	e9d7 0100 	ldrd	r0, r1, [r7]
34188b64:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
34188b68:	4321      	orrs	r1, r4
34188b6a:	f000 80ee 	beq.w	34188d4a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
34188b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188b72:	f242 0401 	movw	r4, #8193	@ 0x2001
34188b76:	42a0      	cmp	r0, r4
34188b78:	f171 0100 	sbcs.w	r1, r1, #0
34188b7c:	f080 81be 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188b80:	e9d7 0100 	ldrd	r0, r1, [r7]
34188b84:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
34188b88:	4321      	orrs	r1, r4
34188b8a:	f000 80d9 	beq.w	34188d40 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
34188b8e:	e9d7 0100 	ldrd	r0, r1, [r7]
34188b92:	f241 0401 	movw	r4, #4097	@ 0x1001
34188b96:	42a0      	cmp	r0, r4
34188b98:	f171 0100 	sbcs.w	r1, r1, #0
34188b9c:	f080 81ae 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188ba0:	e9d7 0100 	ldrd	r0, r1, [r7]
34188ba4:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
34188ba8:	4321      	orrs	r1, r4
34188baa:	f000 80c4 	beq.w	34188d36 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
34188bae:	e9d7 0100 	ldrd	r0, r1, [r7]
34188bb2:	f640 0401 	movw	r4, #2049	@ 0x801
34188bb6:	42a0      	cmp	r0, r4
34188bb8:	f171 0100 	sbcs.w	r1, r1, #0
34188bbc:	f080 819e 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188bc0:	e9d7 0100 	ldrd	r0, r1, [r7]
34188bc4:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
34188bc8:	4321      	orrs	r1, r4
34188bca:	f000 80af 	beq.w	34188d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
34188bce:	e9d7 0100 	ldrd	r0, r1, [r7]
34188bd2:	f240 4401 	movw	r4, #1025	@ 0x401
34188bd6:	42a0      	cmp	r0, r4
34188bd8:	f171 0100 	sbcs.w	r1, r1, #0
34188bdc:	f080 818e 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188be0:	e9d7 0100 	ldrd	r0, r1, [r7]
34188be4:	2821      	cmp	r0, #33	@ 0x21
34188be6:	f171 0100 	sbcs.w	r1, r1, #0
34188bea:	d255      	bcs.n	34188c98 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
34188bec:	e9d7 0100 	ldrd	r0, r1, [r7]
34188bf0:	4301      	orrs	r1, r0
34188bf2:	f000 8183 	beq.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
34188bfa:	1e42      	subs	r2, r0, #1
34188bfc:	f141 33ff 	adc.w	r3, r1, #4294967295
34188c00:	2a20      	cmp	r2, #32
34188c02:	f173 0100 	sbcs.w	r1, r3, #0
34188c06:	f080 8179 	bcs.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188c0a:	2a1f      	cmp	r2, #31
34188c0c:	f200 8176 	bhi.w	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34188c10:	a101      	add	r1, pc, #4	@ (adr r1, 34188c18 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
34188c12:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
34188c16:	bf00      	nop
34188c18:	34188ca7 	.word	0x34188ca7
34188c1c:	34188cb1 	.word	0x34188cb1
34188c20:	34188efd 	.word	0x34188efd
34188c24:	34188d01 	.word	0x34188d01
34188c28:	34188efd 	.word	0x34188efd
34188c2c:	34188efd 	.word	0x34188efd
34188c30:	34188efd 	.word	0x34188efd
34188c34:	34188cf9 	.word	0x34188cf9
34188c38:	34188efd 	.word	0x34188efd
34188c3c:	34188efd 	.word	0x34188efd
34188c40:	34188efd 	.word	0x34188efd
34188c44:	34188efd 	.word	0x34188efd
34188c48:	34188efd 	.word	0x34188efd
34188c4c:	34188efd 	.word	0x34188efd
34188c50:	34188efd 	.word	0x34188efd
34188c54:	34188d0b 	.word	0x34188d0b
34188c58:	34188efd 	.word	0x34188efd
34188c5c:	34188efd 	.word	0x34188efd
34188c60:	34188efd 	.word	0x34188efd
34188c64:	34188efd 	.word	0x34188efd
34188c68:	34188efd 	.word	0x34188efd
34188c6c:	34188efd 	.word	0x34188efd
34188c70:	34188efd 	.word	0x34188efd
34188c74:	34188efd 	.word	0x34188efd
34188c78:	34188efd 	.word	0x34188efd
34188c7c:	34188efd 	.word	0x34188efd
34188c80:	34188efd 	.word	0x34188efd
34188c84:	34188efd 	.word	0x34188efd
34188c88:	34188efd 	.word	0x34188efd
34188c8c:	34188efd 	.word	0x34188efd
34188c90:	34188efd 	.word	0x34188efd
34188c94:	34188d17 	.word	0x34188d17
34188c98:	e9d7 2300 	ldrd	r2, r3, [r7]
34188c9c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
34188ca0:	430b      	orrs	r3, r1
34188ca2:	d03e      	beq.n	34188d22 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
34188ca4:	e12a      	b.n	34188efc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
34188ca6:	2070      	movs	r0, #112	@ 0x70
34188ca8:	f000 fb90 	bl	341893cc <RCCEx_GetADCCLKFreq>
34188cac:	60f8      	str	r0, [r7, #12]
      break;
34188cae:	e126      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
34188cb0:	2007      	movs	r0, #7
34188cb2:	f000 fc8d 	bl	341895d0 <RCCEx_GetADFCLKFreq>
34188cb6:	60f8      	str	r0, [r7, #12]
      break;
34188cb8:	e121      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
34188cba:	bf00      	nop
34188cbc:	80000001 	.word	0x80000001
34188cc0:	40000001 	.word	0x40000001
34188cc4:	20000001 	.word	0x20000001
34188cc8:	10000001 	.word	0x10000001
34188ccc:	08000001 	.word	0x08000001
34188cd0:	04000001 	.word	0x04000001
34188cd4:	02000001 	.word	0x02000001
34188cd8:	01000001 	.word	0x01000001
34188cdc:	00800001 	.word	0x00800001
34188ce0:	00400001 	.word	0x00400001
34188ce4:	00200001 	.word	0x00200001
34188ce8:	00100001 	.word	0x00100001
34188cec:	00080001 	.word	0x00080001
34188cf0:	00040001 	.word	0x00040001
34188cf4:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
34188cf8:	f000 ff0c 	bl	34189b14 <RCCEx_GetCSICLKFreq>
34188cfc:	60f8      	str	r0, [r7, #12]
      break;
34188cfe:	e0fe      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188d00:	2007      	movs	r0, #7
34188d02:	f000 fd51 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
34188d06:	60f8      	str	r0, [r7, #12]
      break;
34188d08:	e0f9      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
34188d0a:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
34188d0e:	f000 ff4d 	bl	34189bac <RCCEx_GetDCMIPPCLKFreq>
34188d12:	60f8      	str	r0, [r7, #12]
      break;
34188d14:	e0f3      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
34188d16:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
34188d1a:	f000 ffd1 	bl	34189cc0 <RCCEx_GetETH1CLKFreq>
34188d1e:	60f8      	str	r0, [r7, #12]
      break;
34188d20:	e0ed      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
34188d22:	2003      	movs	r0, #3
34188d24:	f001 f84c 	bl	34189dc0 <RCCEx_GetETH1PTPCLKFreq>
34188d28:	60f8      	str	r0, [r7, #12]
      break;
34188d2a:	e0e8      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
34188d2c:	2003      	movs	r0, #3
34188d2e:	f001 f8cb 	bl	34189ec8 <RCCEx_GetFDCANCLKFreq>
34188d32:	60f8      	str	r0, [r7, #12]
      break;
34188d34:	e0e3      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
34188d36:	2030      	movs	r0, #48	@ 0x30
34188d38:	f001 f946 	bl	34189fc8 <RCCEx_GetFMCCLKFreq>
34188d3c:	60f8      	str	r0, [r7, #12]
      break;
34188d3e:	e0de      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34188d40:	4871      	ldr	r0, [pc, #452]	@ (34188f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
34188d42:	f001 f9f9 	bl	3418a138 <RCCEx_GetI2CCLKFreq>
34188d46:	60f8      	str	r0, [r7, #12]
      break;
34188d48:	e0d9      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34188d4a:	4870      	ldr	r0, [pc, #448]	@ (34188f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
34188d4c:	f001 f9f4 	bl	3418a138 <RCCEx_GetI2CCLKFreq>
34188d50:	60f8      	str	r0, [r7, #12]
      break;
34188d52:	e0d4      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34188d54:	486e      	ldr	r0, [pc, #440]	@ (34188f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
34188d56:	f001 f9ef 	bl	3418a138 <RCCEx_GetI2CCLKFreq>
34188d5a:	60f8      	str	r0, [r7, #12]
      break;
34188d5c:	e0cf      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
34188d5e:	486d      	ldr	r0, [pc, #436]	@ (34188f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
34188d60:	f001 f9ea 	bl	3418a138 <RCCEx_GetI2CCLKFreq>
34188d64:	60f8      	str	r0, [r7, #12]
      break;
34188d66:	e0ca      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34188d68:	486b      	ldr	r0, [pc, #428]	@ (34188f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
34188d6a:	f001 fb8d 	bl	3418a488 <RCCEx_GetI3CCLKFreq>
34188d6e:	60f8      	str	r0, [r7, #12]
      break;
34188d70:	e0c5      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34188d72:	486a      	ldr	r0, [pc, #424]	@ (34188f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
34188d74:	f001 fb88 	bl	3418a488 <RCCEx_GetI3CCLKFreq>
34188d78:	60f8      	str	r0, [r7, #12]
      break;
34188d7a:	e0c0      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34188d7c:	4868      	ldr	r0, [pc, #416]	@ (34188f20 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
34188d7e:	f001 fcb7 	bl	3418a6f0 <RCCEx_GetLPTIMCLKFreq>
34188d82:	60f8      	str	r0, [r7, #12]
      break;
34188d84:	e0bb      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
34188d86:	4867      	ldr	r0, [pc, #412]	@ (34188f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
34188d88:	f001 fcb2 	bl	3418a6f0 <RCCEx_GetLPTIMCLKFreq>
34188d8c:	60f8      	str	r0, [r7, #12]
      break;
34188d8e:	e0b6      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34188d90:	4865      	ldr	r0, [pc, #404]	@ (34188f28 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
34188d92:	f001 fcad 	bl	3418a6f0 <RCCEx_GetLPTIMCLKFreq>
34188d96:	60f8      	str	r0, [r7, #12]
      break;
34188d98:	e0b1      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
34188d9a:	4864      	ldr	r0, [pc, #400]	@ (34188f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
34188d9c:	f001 fca8 	bl	3418a6f0 <RCCEx_GetLPTIMCLKFreq>
34188da0:	60f8      	str	r0, [r7, #12]
      break;
34188da2:	e0ac      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
34188da4:	4862      	ldr	r0, [pc, #392]	@ (34188f30 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
34188da6:	f001 fca3 	bl	3418a6f0 <RCCEx_GetLPTIMCLKFreq>
34188daa:	60f8      	str	r0, [r7, #12]
      break;
34188dac:	e0a7      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
34188dae:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
34188db2:	f001 fe47 	bl	3418aa44 <RCCEx_GetLPUARTCLKFreq>
34188db6:	60f8      	str	r0, [r7, #12]
      break;
34188db8:	e0a1      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
34188dba:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
34188dbe:	f001 ff43 	bl	3418ac48 <RCCEx_GetLTDCCLKFreq>
34188dc2:	60f8      	str	r0, [r7, #12]
      break;
34188dc4:	e09b      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
34188dc6:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
34188dca:	f001 ffc7 	bl	3418ad5c <RCCEx_GetMDFCLKFreq>
34188dce:	60f8      	str	r0, [r7, #12]
      break;
34188dd0:	e095      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
34188dd2:	2030      	movs	r0, #48	@ 0x30
34188dd4:	f002 f8cc 	bl	3418af70 <RCCEx_GetPSSICLKFreq>
34188dd8:	60f8      	str	r0, [r7, #12]
      break;
34188dda:	e090      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
34188ddc:	f002 f94a 	bl	3418b074 <RCCEx_GetRTCCLKFreq>
34188de0:	60f8      	str	r0, [r7, #12]
      break;
34188de2:	e08c      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34188de4:	4853      	ldr	r0, [pc, #332]	@ (34188f34 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
34188de6:	f002 f997 	bl	3418b118 <RCCEx_GetSAICLKFreq>
34188dea:	60f8      	str	r0, [r7, #12]
      break;
34188dec:	e087      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34188dee:	4852      	ldr	r0, [pc, #328]	@ (34188f38 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
34188df0:	f002 f992 	bl	3418b118 <RCCEx_GetSAICLKFreq>
34188df4:	60f8      	str	r0, [r7, #12]
      break;
34188df6:	e082      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34188df8:	4850      	ldr	r0, [pc, #320]	@ (34188f3c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
34188dfa:	f002 faf3 	bl	3418b3e4 <RCCEx_GetSDMMCCLKFreq>
34188dfe:	60f8      	str	r0, [r7, #12]
      break;
34188e00:	e07d      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34188e02:	484f      	ldr	r0, [pc, #316]	@ (34188f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
34188e04:	f002 faee 	bl	3418b3e4 <RCCEx_GetSDMMCCLKFreq>
34188e08:	60f8      	str	r0, [r7, #12]
      break;
34188e0a:	e078      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34188e0c:	2007      	movs	r0, #7
34188e0e:	f002 fbd3 	bl	3418b5b8 <RCCEx_GetSPDIFRXCLKFreq>
34188e12:	60f8      	str	r0, [r7, #12]
      break;
34188e14:	e073      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34188e16:	484b      	ldr	r0, [pc, #300]	@ (34188f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
34188e18:	f002 fcb2 	bl	3418b780 <RCCEx_GetSPICLKFreq>
34188e1c:	60f8      	str	r0, [r7, #12]
      break;
34188e1e:	e06e      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34188e20:	4849      	ldr	r0, [pc, #292]	@ (34188f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
34188e22:	f002 fcad 	bl	3418b780 <RCCEx_GetSPICLKFreq>
34188e26:	60f8      	str	r0, [r7, #12]
      break;
34188e28:	e069      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34188e2a:	4848      	ldr	r0, [pc, #288]	@ (34188f4c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
34188e2c:	f002 fca8 	bl	3418b780 <RCCEx_GetSPICLKFreq>
34188e30:	60f8      	str	r0, [r7, #12]
      break;
34188e32:	e064      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34188e34:	4846      	ldr	r0, [pc, #280]	@ (34188f50 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
34188e36:	f002 fca3 	bl	3418b780 <RCCEx_GetSPICLKFreq>
34188e3a:	60f8      	str	r0, [r7, #12]
      break;
34188e3c:	e05f      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
34188e3e:	4845      	ldr	r0, [pc, #276]	@ (34188f54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
34188e40:	f002 fc9e 	bl	3418b780 <RCCEx_GetSPICLKFreq>
34188e44:	60f8      	str	r0, [r7, #12]
      break;
34188e46:	e05a      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34188e48:	4843      	ldr	r0, [pc, #268]	@ (34188f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
34188e4a:	f002 fc99 	bl	3418b780 <RCCEx_GetSPICLKFreq>
34188e4e:	60f8      	str	r0, [r7, #12]
      break;
34188e50:	e055      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34188e52:	4842      	ldr	r0, [pc, #264]	@ (34188f5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
34188e54:	f003 f990 	bl	3418c178 <RCCEx_GetUSARTCLKFreq>
34188e58:	60f8      	str	r0, [r7, #12]
      break;
34188e5a:	e050      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34188e5c:	4840      	ldr	r0, [pc, #256]	@ (34188f60 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
34188e5e:	f003 f98b 	bl	3418c178 <RCCEx_GetUSARTCLKFreq>
34188e62:	60f8      	str	r0, [r7, #12]
      break;
34188e64:	e04b      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34188e66:	483f      	ldr	r0, [pc, #252]	@ (34188f64 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
34188e68:	f003 f986 	bl	3418c178 <RCCEx_GetUSARTCLKFreq>
34188e6c:	60f8      	str	r0, [r7, #12]
      break;
34188e6e:	e046      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34188e70:	483d      	ldr	r0, [pc, #244]	@ (34188f68 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
34188e72:	f002 ff57 	bl	3418bd24 <RCCEx_GetUARTCLKFreq>
34188e76:	60f8      	str	r0, [r7, #12]
      break;
34188e78:	e041      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34188e7a:	483c      	ldr	r0, [pc, #240]	@ (34188f6c <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
34188e7c:	f002 ff52 	bl	3418bd24 <RCCEx_GetUARTCLKFreq>
34188e80:	60f8      	str	r0, [r7, #12]
      break;
34188e82:	e03c      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34188e84:	483a      	ldr	r0, [pc, #232]	@ (34188f70 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34188e86:	f003 f977 	bl	3418c178 <RCCEx_GetUSARTCLKFreq>
34188e8a:	60f8      	str	r0, [r7, #12]
      break;
34188e8c:	e037      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34188e8e:	4839      	ldr	r0, [pc, #228]	@ (34188f74 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
34188e90:	f002 ff48 	bl	3418bd24 <RCCEx_GetUARTCLKFreq>
34188e94:	60f8      	str	r0, [r7, #12]
      break;
34188e96:	e032      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34188e98:	4837      	ldr	r0, [pc, #220]	@ (34188f78 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
34188e9a:	f002 ff43 	bl	3418bd24 <RCCEx_GetUARTCLKFreq>
34188e9e:	60f8      	str	r0, [r7, #12]
      break;
34188ea0:	e02d      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34188ea2:	4836      	ldr	r0, [pc, #216]	@ (34188f7c <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
34188ea4:	f002 ff3e 	bl	3418bd24 <RCCEx_GetUARTCLKFreq>
34188ea8:	60f8      	str	r0, [r7, #12]
      break;
34188eaa:	e028      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34188eac:	4834      	ldr	r0, [pc, #208]	@ (34188f80 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
34188eae:	f003 f963 	bl	3418c178 <RCCEx_GetUSARTCLKFreq>
34188eb2:	60f8      	str	r0, [r7, #12]
      break;
34188eb4:	e023      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
34188eb6:	4833      	ldr	r0, [pc, #204]	@ (34188f84 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
34188eb8:	f003 fc3e 	bl	3418c738 <RCCEx_GetOTGPHYCKREFCLKFreq>
34188ebc:	60f8      	str	r0, [r7, #12]
      break;
34188ebe:	e01e      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34188ec0:	4831      	ldr	r0, [pc, #196]	@ (34188f88 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34188ec2:	f003 fb83 	bl	3418c5cc <RCCEx_GetOTGPHYCLKFreq>
34188ec6:	60f8      	str	r0, [r7, #12]
      break;
34188ec8:	e019      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34188eca:	4830      	ldr	r0, [pc, #192]	@ (34188f8c <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34188ecc:	f003 fc34 	bl	3418c738 <RCCEx_GetOTGPHYCKREFCLKFreq>
34188ed0:	60f8      	str	r0, [r7, #12]
      break;
34188ed2:	e014      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34188ed4:	482e      	ldr	r0, [pc, #184]	@ (34188f90 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34188ed6:	f003 fb79 	bl	3418c5cc <RCCEx_GetOTGPHYCLKFreq>
34188eda:	60f8      	str	r0, [r7, #12]
      break;
34188edc:	e00f      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34188ede:	482d      	ldr	r0, [pc, #180]	@ (34188f94 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34188ee0:	f003 fc7a 	bl	3418c7d8 <RCCEx_GetXSPICLKFreq>
34188ee4:	60f8      	str	r0, [r7, #12]
      break;
34188ee6:	e00a      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34188ee8:	482b      	ldr	r0, [pc, #172]	@ (34188f98 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
34188eea:	f003 fc75 	bl	3418c7d8 <RCCEx_GetXSPICLKFreq>
34188eee:	60f8      	str	r0, [r7, #12]
      break;
34188ef0:	e005      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34188ef2:	482a      	ldr	r0, [pc, #168]	@ (34188f9c <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34188ef4:	f003 fc70 	bl	3418c7d8 <RCCEx_GetXSPICLKFreq>
34188ef8:	60f8      	str	r0, [r7, #12]
      break;
34188efa:	e000      	b.n	34188efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
34188efc:	bf00      	nop
  }

  return frequency;
34188efe:	68fb      	ldr	r3, [r7, #12]
}
34188f00:	4618      	mov	r0, r3
34188f02:	3714      	adds	r7, #20
34188f04:	46bd      	mov	sp, r7
34188f06:	bd90      	pop	{r4, r7, pc}
34188f08:	0700000c 	.word	0x0700000c
34188f0c:	0700040c 	.word	0x0700040c
34188f10:	0700080c 	.word	0x0700080c
34188f14:	07000c0c 	.word	0x07000c0c
34188f18:	0700100c 	.word	0x0700100c
34188f1c:	0700140c 	.word	0x0700140c
34188f20:	0700082c 	.word	0x0700082c
34188f24:	07000c2c 	.word	0x07000c2c
34188f28:	0700102c 	.word	0x0700102c
34188f2c:	0700142c 	.word	0x0700142c
34188f30:	0700182c 	.word	0x0700182c
34188f34:	07001418 	.word	0x07001418
34188f38:	07001818 	.word	0x07001818
34188f3c:	0300001c 	.word	0x0300001c
34188f40:	0300041c 	.word	0x0300041c
34188f44:	07000420 	.word	0x07000420
34188f48:	07000820 	.word	0x07000820
34188f4c:	07000c20 	.word	0x07000c20
34188f50:	07001020 	.word	0x07001020
34188f54:	07001420 	.word	0x07001420
34188f58:	07001820 	.word	0x07001820
34188f5c:	07000030 	.word	0x07000030
34188f60:	07000430 	.word	0x07000430
34188f64:	07000830 	.word	0x07000830
34188f68:	07000c30 	.word	0x07000c30
34188f6c:	07001030 	.word	0x07001030
34188f70:	07001430 	.word	0x07001430
34188f74:	07001830 	.word	0x07001830
34188f78:	07001c30 	.word	0x07001c30
34188f7c:	07000034 	.word	0x07000034
34188f80:	07000434 	.word	0x07000434
34188f84:	01001014 	.word	0x01001014
34188f88:	03000c14 	.word	0x03000c14
34188f8c:	01001814 	.word	0x01001814
34188f90:	03001414 	.word	0x03001414
34188f94:	03000014 	.word	0x03000014
34188f98:	03000414 	.word	0x03000414
34188f9c:	03000814 	.word	0x03000814

34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
34188fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
34188fa2:	b087      	sub	sp, #28
34188fa4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34188fa6:	2300      	movs	r3, #0
34188fa8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
34188faa:	f7fc fa05 	bl	341853b8 <LL_RCC_PLL1_IsReady>
34188fae:	4603      	mov	r3, r0
34188fb0:	2b00      	cmp	r3, #0
34188fb2:	d02a      	beq.n	3418900a <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
34188fb4:	f7fc fa68 	bl	34185488 <LL_RCC_PLL1P_IsEnabled>
34188fb8:	4603      	mov	r3, r0
34188fba:	2b00      	cmp	r3, #0
34188fbc:	d031      	beq.n	34189022 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34188fbe:	f7fc f9ed 	bl	3418539c <LL_RCC_PLL1_GetSource>
34188fc2:	4603      	mov	r3, r0
34188fc4:	4618      	mov	r0, r3
34188fc6:	f000 f957 	bl	34189278 <RCCEx_GetPLLSourceFreq>
34188fca:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34188fcc:	68bb      	ldr	r3, [r7, #8]
34188fce:	2b00      	cmp	r3, #0
34188fd0:	d027      	beq.n	34189022 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
      {
        divm = LL_RCC_PLL1_GetM();
34188fd2:	f7fc fa29 	bl	34185428 <LL_RCC_PLL1_GetM>
34188fd6:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34188fd8:	687b      	ldr	r3, [r7, #4]
34188fda:	2b00      	cmp	r3, #0
34188fdc:	d021      	beq.n	34189022 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34188fde:	f7fc fa13 	bl	34185408 <LL_RCC_PLL1_GetN>
34188fe2:	4605      	mov	r5, r0
34188fe4:	f7fc fa64 	bl	341854b0 <LL_RCC_PLL1_GetFRACN>
34188fe8:	4606      	mov	r6, r0
34188fea:	f7fc fa2d 	bl	34185448 <LL_RCC_PLL1_GetP1>
34188fee:	4604      	mov	r4, r0
34188ff0:	f7fc fa3a 	bl	34185468 <LL_RCC_PLL1_GetP2>
34188ff4:	4603      	mov	r3, r0
34188ff6:	9301      	str	r3, [sp, #4]
34188ff8:	9400      	str	r4, [sp, #0]
34188ffa:	4633      	mov	r3, r6
34188ffc:	462a      	mov	r2, r5
34188ffe:	6879      	ldr	r1, [r7, #4]
34189000:	68b8      	ldr	r0, [r7, #8]
34189002:	f000 f997 	bl	34189334 <RCCEx_CalcPLLFreq>
34189006:	60f8      	str	r0, [r7, #12]
34189008:	e00b      	b.n	34189022 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
3418900a:	f7fc f9e9 	bl	341853e0 <LL_RCC_PLL1_IsEnabledBypass>
3418900e:	4603      	mov	r3, r0
34189010:	2b00      	cmp	r3, #0
34189012:	d006      	beq.n	34189022 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34189014:	f7fc f9c2 	bl	3418539c <LL_RCC_PLL1_GetSource>
34189018:	4603      	mov	r3, r0
3418901a:	4618      	mov	r0, r3
3418901c:	f000 f92c 	bl	34189278 <RCCEx_GetPLLSourceFreq>
34189020:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34189022:	68fb      	ldr	r3, [r7, #12]
}
34189024:	4618      	mov	r0, r3
34189026:	3714      	adds	r7, #20
34189028:	46bd      	mov	sp, r7
3418902a:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418902c <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
3418902c:	b5f0      	push	{r4, r5, r6, r7, lr}
3418902e:	b087      	sub	sp, #28
34189030:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34189032:	2300      	movs	r3, #0
34189034:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
34189036:	f7fc fa57 	bl	341854e8 <LL_RCC_PLL2_IsReady>
3418903a:	4603      	mov	r3, r0
3418903c:	2b00      	cmp	r3, #0
3418903e:	d02a      	beq.n	34189096 <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
34189040:	f7fc faba 	bl	341855b8 <LL_RCC_PLL2P_IsEnabled>
34189044:	4603      	mov	r3, r0
34189046:	2b00      	cmp	r3, #0
34189048:	d031      	beq.n	341890ae <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3418904a:	f7fc fa3f 	bl	341854cc <LL_RCC_PLL2_GetSource>
3418904e:	4603      	mov	r3, r0
34189050:	4618      	mov	r0, r3
34189052:	f000 f911 	bl	34189278 <RCCEx_GetPLLSourceFreq>
34189056:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34189058:	68bb      	ldr	r3, [r7, #8]
3418905a:	2b00      	cmp	r3, #0
3418905c:	d027      	beq.n	341890ae <HAL_RCCEx_GetPLL2CLKFreq+0x82>
      {

        divm = LL_RCC_PLL2_GetM();
3418905e:	f7fc fa7b 	bl	34185558 <LL_RCC_PLL2_GetM>
34189062:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34189064:	687b      	ldr	r3, [r7, #4]
34189066:	2b00      	cmp	r3, #0
34189068:	d021      	beq.n	341890ae <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
3418906a:	f7fc fa65 	bl	34185538 <LL_RCC_PLL2_GetN>
3418906e:	4605      	mov	r5, r0
34189070:	f7fc fab6 	bl	341855e0 <LL_RCC_PLL2_GetFRACN>
34189074:	4606      	mov	r6, r0
34189076:	f7fc fa7f 	bl	34185578 <LL_RCC_PLL2_GetP1>
3418907a:	4604      	mov	r4, r0
3418907c:	f7fc fa8c 	bl	34185598 <LL_RCC_PLL2_GetP2>
34189080:	4603      	mov	r3, r0
34189082:	9301      	str	r3, [sp, #4]
34189084:	9400      	str	r4, [sp, #0]
34189086:	4633      	mov	r3, r6
34189088:	462a      	mov	r2, r5
3418908a:	6879      	ldr	r1, [r7, #4]
3418908c:	68b8      	ldr	r0, [r7, #8]
3418908e:	f000 f951 	bl	34189334 <RCCEx_CalcPLLFreq>
34189092:	60f8      	str	r0, [r7, #12]
34189094:	e00b      	b.n	341890ae <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
34189096:	f7fc fa3b 	bl	34185510 <LL_RCC_PLL2_IsEnabledBypass>
3418909a:	4603      	mov	r3, r0
3418909c:	2b00      	cmp	r3, #0
3418909e:	d006      	beq.n	341890ae <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
341890a0:	f7fc fa14 	bl	341854cc <LL_RCC_PLL2_GetSource>
341890a4:	4603      	mov	r3, r0
341890a6:	4618      	mov	r0, r3
341890a8:	f000 f8e6 	bl	34189278 <RCCEx_GetPLLSourceFreq>
341890ac:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
341890ae:	68fb      	ldr	r3, [r7, #12]
}
341890b0:	4618      	mov	r0, r3
341890b2:	3714      	adds	r7, #20
341890b4:	46bd      	mov	sp, r7
341890b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

341890b8 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
341890b8:	b5f0      	push	{r4, r5, r6, r7, lr}
341890ba:	b087      	sub	sp, #28
341890bc:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
341890be:	2300      	movs	r3, #0
341890c0:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
341890c2:	f7fc faa9 	bl	34185618 <LL_RCC_PLL3_IsReady>
341890c6:	4603      	mov	r3, r0
341890c8:	2b00      	cmp	r3, #0
341890ca:	d02a      	beq.n	34189122 <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
341890cc:	f7fc fb0c 	bl	341856e8 <LL_RCC_PLL3P_IsEnabled>
341890d0:	4603      	mov	r3, r0
341890d2:	2b00      	cmp	r3, #0
341890d4:	d031      	beq.n	3418913a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
341890d6:	f7fc fa91 	bl	341855fc <LL_RCC_PLL3_GetSource>
341890da:	4603      	mov	r3, r0
341890dc:	4618      	mov	r0, r3
341890de:	f000 f8cb 	bl	34189278 <RCCEx_GetPLLSourceFreq>
341890e2:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
341890e4:	68bb      	ldr	r3, [r7, #8]
341890e6:	2b00      	cmp	r3, #0
341890e8:	d027      	beq.n	3418913a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
      {
        divm = LL_RCC_PLL3_GetM();
341890ea:	f7fc facd 	bl	34185688 <LL_RCC_PLL3_GetM>
341890ee:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
341890f0:	687b      	ldr	r3, [r7, #4]
341890f2:	2b00      	cmp	r3, #0
341890f4:	d021      	beq.n	3418913a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
341890f6:	f7fc fab7 	bl	34185668 <LL_RCC_PLL3_GetN>
341890fa:	4605      	mov	r5, r0
341890fc:	f7fc fb08 	bl	34185710 <LL_RCC_PLL3_GetFRACN>
34189100:	4606      	mov	r6, r0
34189102:	f7fc fad1 	bl	341856a8 <LL_RCC_PLL3_GetP1>
34189106:	4604      	mov	r4, r0
34189108:	f7fc fade 	bl	341856c8 <LL_RCC_PLL3_GetP2>
3418910c:	4603      	mov	r3, r0
3418910e:	9301      	str	r3, [sp, #4]
34189110:	9400      	str	r4, [sp, #0]
34189112:	4633      	mov	r3, r6
34189114:	462a      	mov	r2, r5
34189116:	6879      	ldr	r1, [r7, #4]
34189118:	68b8      	ldr	r0, [r7, #8]
3418911a:	f000 f90b 	bl	34189334 <RCCEx_CalcPLLFreq>
3418911e:	60f8      	str	r0, [r7, #12]
34189120:	e00b      	b.n	3418913a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
34189122:	f7fc fa8d 	bl	34185640 <LL_RCC_PLL3_IsEnabledBypass>
34189126:	4603      	mov	r3, r0
34189128:	2b00      	cmp	r3, #0
3418912a:	d006      	beq.n	3418913a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418912c:	f7fc fa66 	bl	341855fc <LL_RCC_PLL3_GetSource>
34189130:	4603      	mov	r3, r0
34189132:	4618      	mov	r0, r3
34189134:	f000 f8a0 	bl	34189278 <RCCEx_GetPLLSourceFreq>
34189138:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418913a:	68fb      	ldr	r3, [r7, #12]
}
3418913c:	4618      	mov	r0, r3
3418913e:	3714      	adds	r7, #20
34189140:	46bd      	mov	sp, r7
34189142:	bdf0      	pop	{r4, r5, r6, r7, pc}

34189144 <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
34189144:	b5f0      	push	{r4, r5, r6, r7, lr}
34189146:	b087      	sub	sp, #28
34189148:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418914a:	2300      	movs	r3, #0
3418914c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
3418914e:	f7fc fafb 	bl	34185748 <LL_RCC_PLL4_IsReady>
34189152:	4603      	mov	r3, r0
34189154:	2b00      	cmp	r3, #0
34189156:	d02a      	beq.n	341891ae <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
34189158:	f7fc fb5e 	bl	34185818 <LL_RCC_PLL4P_IsEnabled>
3418915c:	4603      	mov	r3, r0
3418915e:	2b00      	cmp	r3, #0
34189160:	d031      	beq.n	341891c6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34189162:	f7fc fae3 	bl	3418572c <LL_RCC_PLL4_GetSource>
34189166:	4603      	mov	r3, r0
34189168:	4618      	mov	r0, r3
3418916a:	f000 f885 	bl	34189278 <RCCEx_GetPLLSourceFreq>
3418916e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34189170:	68bb      	ldr	r3, [r7, #8]
34189172:	2b00      	cmp	r3, #0
34189174:	d027      	beq.n	341891c6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
      {

        divm = LL_RCC_PLL4_GetM();
34189176:	f7fc fb1f 	bl	341857b8 <LL_RCC_PLL4_GetM>
3418917a:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418917c:	687b      	ldr	r3, [r7, #4]
3418917e:	2b00      	cmp	r3, #0
34189180:	d021      	beq.n	341891c6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
34189182:	f7fc fb09 	bl	34185798 <LL_RCC_PLL4_GetN>
34189186:	4605      	mov	r5, r0
34189188:	f7fc fb5a 	bl	34185840 <LL_RCC_PLL4_GetFRACN>
3418918c:	4606      	mov	r6, r0
3418918e:	f7fc fb23 	bl	341857d8 <LL_RCC_PLL4_GetP1>
34189192:	4604      	mov	r4, r0
34189194:	f7fc fb30 	bl	341857f8 <LL_RCC_PLL4_GetP2>
34189198:	4603      	mov	r3, r0
3418919a:	9301      	str	r3, [sp, #4]
3418919c:	9400      	str	r4, [sp, #0]
3418919e:	4633      	mov	r3, r6
341891a0:	462a      	mov	r2, r5
341891a2:	6879      	ldr	r1, [r7, #4]
341891a4:	68b8      	ldr	r0, [r7, #8]
341891a6:	f000 f8c5 	bl	34189334 <RCCEx_CalcPLLFreq>
341891aa:	60f8      	str	r0, [r7, #12]
341891ac:	e00b      	b.n	341891c6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
341891ae:	f7fc fadf 	bl	34185770 <LL_RCC_PLL4_IsEnabledBypass>
341891b2:	4603      	mov	r3, r0
341891b4:	2b00      	cmp	r3, #0
341891b6:	d006      	beq.n	341891c6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
341891b8:	f7fc fab8 	bl	3418572c <LL_RCC_PLL4_GetSource>
341891bc:	4603      	mov	r3, r0
341891be:	4618      	mov	r0, r3
341891c0:	f000 f85a 	bl	34189278 <RCCEx_GetPLLSourceFreq>
341891c4:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
341891c6:	68fb      	ldr	r3, [r7, #12]
}
341891c8:	4618      	mov	r0, r3
341891ca:	3714      	adds	r7, #20
341891cc:	46bd      	mov	sp, r7
341891ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

341891d0 <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
341891d0:	b580      	push	{r7, lr}
341891d2:	b082      	sub	sp, #8
341891d4:	af00      	add	r7, sp, #0
341891d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
341891d8:	f7fb fcca 	bl	34184b70 <LL_RCC_GetAHBPrescaler>
341891dc:	4603      	mov	r3, r0
341891de:	0d1b      	lsrs	r3, r3, #20
341891e0:	f003 0307 	and.w	r3, r3, #7
341891e4:	687a      	ldr	r2, [r7, #4]
341891e6:	fa22 f303 	lsr.w	r3, r2, r3
}
341891ea:	4618      	mov	r0, r3
341891ec:	3708      	adds	r7, #8
341891ee:	46bd      	mov	sp, r7
341891f0:	bd80      	pop	{r7, pc}

341891f2 <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
341891f2:	b580      	push	{r7, lr}
341891f4:	b082      	sub	sp, #8
341891f6:	af00      	add	r7, sp, #0
341891f8:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
341891fa:	f7fb fcc7 	bl	34184b8c <LL_RCC_GetAPB1Prescaler>
341891fe:	4603      	mov	r3, r0
34189200:	f003 0307 	and.w	r3, r3, #7
34189204:	687a      	ldr	r2, [r7, #4]
34189206:	fa22 f303 	lsr.w	r3, r2, r3
}
3418920a:	4618      	mov	r0, r3
3418920c:	3708      	adds	r7, #8
3418920e:	46bd      	mov	sp, r7
34189210:	bd80      	pop	{r7, pc}

34189212 <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
34189212:	b580      	push	{r7, lr}
34189214:	b082      	sub	sp, #8
34189216:	af00      	add	r7, sp, #0
34189218:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3418921a:	f7fb fcc5 	bl	34184ba8 <LL_RCC_GetAPB2Prescaler>
3418921e:	4603      	mov	r3, r0
34189220:	091b      	lsrs	r3, r3, #4
34189222:	f003 0307 	and.w	r3, r3, #7
34189226:	687a      	ldr	r2, [r7, #4]
34189228:	fa22 f303 	lsr.w	r3, r2, r3
}
3418922c:	4618      	mov	r0, r3
3418922e:	3708      	adds	r7, #8
34189230:	46bd      	mov	sp, r7
34189232:	bd80      	pop	{r7, pc}

34189234 <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
34189234:	b580      	push	{r7, lr}
34189236:	b082      	sub	sp, #8
34189238:	af00      	add	r7, sp, #0
3418923a:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3418923c:	f7fb fcc2 	bl	34184bc4 <LL_RCC_GetAPB4Prescaler>
34189240:	4603      	mov	r3, r0
34189242:	0b1b      	lsrs	r3, r3, #12
34189244:	f003 0307 	and.w	r3, r3, #7
34189248:	687a      	ldr	r2, [r7, #4]
3418924a:	fa22 f303 	lsr.w	r3, r2, r3
}
3418924e:	4618      	mov	r0, r3
34189250:	3708      	adds	r7, #8
34189252:	46bd      	mov	sp, r7
34189254:	bd80      	pop	{r7, pc}

34189256 <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
34189256:	b580      	push	{r7, lr}
34189258:	b082      	sub	sp, #8
3418925a:	af00      	add	r7, sp, #0
3418925c:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
3418925e:	f7fb fcbf 	bl	34184be0 <LL_RCC_GetAPB5Prescaler>
34189262:	4603      	mov	r3, r0
34189264:	0c1b      	lsrs	r3, r3, #16
34189266:	f003 0307 	and.w	r3, r3, #7
3418926a:	687a      	ldr	r2, [r7, #4]
3418926c:	fa22 f303 	lsr.w	r3, r2, r3
}
34189270:	4618      	mov	r0, r3
34189272:	3708      	adds	r7, #8
34189274:	46bd      	mov	sp, r7
34189276:	bd80      	pop	{r7, pc}

34189278 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
34189278:	b580      	push	{r7, lr}
3418927a:	b084      	sub	sp, #16
3418927c:	af00      	add	r7, sp, #0
3418927e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34189280:	2300      	movs	r3, #0
34189282:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
34189284:	687b      	ldr	r3, [r7, #4]
34189286:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418928a:	d039      	beq.n	34189300 <RCCEx_GetPLLSourceFreq+0x88>
3418928c:	687b      	ldr	r3, [r7, #4]
3418928e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189292:	d838      	bhi.n	34189306 <RCCEx_GetPLLSourceFreq+0x8e>
34189294:	687b      	ldr	r3, [r7, #4]
34189296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418929a:	d029      	beq.n	341892f0 <RCCEx_GetPLLSourceFreq+0x78>
3418929c:	687b      	ldr	r3, [r7, #4]
3418929e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341892a2:	d830      	bhi.n	34189306 <RCCEx_GetPLLSourceFreq+0x8e>
341892a4:	687b      	ldr	r3, [r7, #4]
341892a6:	2b00      	cmp	r3, #0
341892a8:	d004      	beq.n	341892b4 <RCCEx_GetPLLSourceFreq+0x3c>
341892aa:	687b      	ldr	r3, [r7, #4]
341892ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341892b0:	d00e      	beq.n	341892d0 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
341892b2:	e028      	b.n	34189306 <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
341892b4:	f7fb fbfc 	bl	34184ab0 <LL_RCC_HSI_IsReady>
341892b8:	4603      	mov	r3, r0
341892ba:	2b00      	cmp	r3, #0
341892bc:	d025      	beq.n	3418930a <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341892be:	f7fb fc09 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
341892c2:	4603      	mov	r3, r0
341892c4:	09db      	lsrs	r3, r3, #7
341892c6:	4a16      	ldr	r2, [pc, #88]	@ (34189320 <RCCEx_GetPLLSourceFreq+0xa8>)
341892c8:	fa22 f303 	lsr.w	r3, r2, r3
341892cc:	60fb      	str	r3, [r7, #12]
      break;
341892ce:	e01c      	b.n	3418930a <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
341892d0:	f7fb fc0e 	bl	34184af0 <LL_RCC_MSI_IsReady>
341892d4:	4603      	mov	r3, r0
341892d6:	2b00      	cmp	r3, #0
341892d8:	d019      	beq.n	3418930e <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
341892da:	f7fb fc1b 	bl	34184b14 <LL_RCC_MSI_GetFrequency>
341892de:	4603      	mov	r3, r0
341892e0:	2b00      	cmp	r3, #0
341892e2:	d102      	bne.n	341892ea <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
341892e4:	4b0f      	ldr	r3, [pc, #60]	@ (34189324 <RCCEx_GetPLLSourceFreq+0xac>)
341892e6:	60fb      	str	r3, [r7, #12]
      break;
341892e8:	e011      	b.n	3418930e <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
341892ea:	4b0f      	ldr	r3, [pc, #60]	@ (34189328 <RCCEx_GetPLLSourceFreq+0xb0>)
341892ec:	60fb      	str	r3, [r7, #12]
      break;
341892ee:	e00e      	b.n	3418930e <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
341892f0:	f7fb fbcc 	bl	34184a8c <LL_RCC_HSE_IsReady>
341892f4:	4603      	mov	r3, r0
341892f6:	2b00      	cmp	r3, #0
341892f8:	d00b      	beq.n	34189312 <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
341892fa:	4b0c      	ldr	r3, [pc, #48]	@ (3418932c <RCCEx_GetPLLSourceFreq+0xb4>)
341892fc:	60fb      	str	r3, [r7, #12]
      break;
341892fe:	e008      	b.n	34189312 <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34189300:	4b0b      	ldr	r3, [pc, #44]	@ (34189330 <RCCEx_GetPLLSourceFreq+0xb8>)
34189302:	60fb      	str	r3, [r7, #12]
      break;
34189304:	e006      	b.n	34189314 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34189306:	bf00      	nop
34189308:	e004      	b.n	34189314 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418930a:	bf00      	nop
3418930c:	e002      	b.n	34189314 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418930e:	bf00      	nop
34189310:	e000      	b.n	34189314 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34189312:	bf00      	nop
  }

  return pllinputfreq;
34189314:	68fb      	ldr	r3, [r7, #12]
}
34189316:	4618      	mov	r0, r3
34189318:	3710      	adds	r7, #16
3418931a:	46bd      	mov	sp, r7
3418931c:	bd80      	pop	{r7, pc}
3418931e:	bf00      	nop
34189320:	03d09000 	.word	0x03d09000
34189324:	003d0900 	.word	0x003d0900
34189328:	00f42400 	.word	0x00f42400
3418932c:	02dc6c00 	.word	0x02dc6c00
34189330:	00bb8000 	.word	0x00bb8000

34189334 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34189334:	b480      	push	{r7}
34189336:	b087      	sub	sp, #28
34189338:	af00      	add	r7, sp, #0
3418933a:	60f8      	str	r0, [r7, #12]
3418933c:	60b9      	str	r1, [r7, #8]
3418933e:	607a      	str	r2, [r7, #4]
34189340:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34189342:	68fb      	ldr	r3, [r7, #12]
34189344:	ee07 3a90 	vmov	s15, r3
34189348:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418934c:	687b      	ldr	r3, [r7, #4]
3418934e:	ee07 3a90 	vmov	s15, r3
34189352:	eef8 6a67 	vcvt.f32.u32	s13, s15
34189356:	683b      	ldr	r3, [r7, #0]
34189358:	ee07 3a90 	vmov	s15, r3
3418935c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34189360:	eddf 5a19 	vldr	s11, [pc, #100]	@ 341893c8 <RCCEx_CalcPLLFreq+0x94>
34189364:	eec6 7a25 	vdiv.f32	s15, s12, s11
34189368:	ee76 7aa7 	vadd.f32	s15, s13, s15
3418936c:	ee67 6a27 	vmul.f32	s13, s14, s15
34189370:	68bb      	ldr	r3, [r7, #8]
34189372:	ee07 3a90 	vmov	s15, r3
34189376:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418937a:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418937e:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
34189382:	6a3b      	ldr	r3, [r7, #32]
34189384:	ee07 3a90 	vmov	s15, r3
34189388:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418938c:	edd7 6a05 	vldr	s13, [r7, #20]
34189390:	eec6 7a87 	vdiv.f32	s15, s13, s14
34189394:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
34189398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418939a:	ee07 3a90 	vmov	s15, r3
3418939e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341893a2:	edd7 6a05 	vldr	s13, [r7, #20]
341893a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
341893aa:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
341893ae:	edd7 7a05 	vldr	s15, [r7, #20]
341893b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
341893b6:	ee17 3a90 	vmov	r3, s15
}
341893ba:	4618      	mov	r0, r3
341893bc:	371c      	adds	r7, #28
341893be:	46bd      	mov	sp, r7
341893c0:	f85d 7b04 	ldr.w	r7, [sp], #4
341893c4:	4770      	bx	lr
341893c6:	bf00      	nop
341893c8:	4b800000 	.word	0x4b800000

341893cc <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
341893cc:	b590      	push	{r4, r7, lr}
341893ce:	b085      	sub	sp, #20
341893d0:	af00      	add	r7, sp, #0
341893d2:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
341893d4:	2300      	movs	r3, #0
341893d6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
341893d8:	6878      	ldr	r0, [r7, #4]
341893da:	f7fb fe1f 	bl	3418501c <LL_RCC_GetADCClockSource>
341893de:	4603      	mov	r3, r0
341893e0:	2b70      	cmp	r3, #112	@ 0x70
341893e2:	f000 80d1 	beq.w	34189588 <RCCEx_GetADCCLKFreq+0x1bc>
341893e6:	2b70      	cmp	r3, #112	@ 0x70
341893e8:	f200 80d8 	bhi.w	3418959c <RCCEx_GetADCCLKFreq+0x1d0>
341893ec:	2b60      	cmp	r3, #96	@ 0x60
341893ee:	f000 80c8 	beq.w	34189582 <RCCEx_GetADCCLKFreq+0x1b6>
341893f2:	2b60      	cmp	r3, #96	@ 0x60
341893f4:	f200 80d2 	bhi.w	3418959c <RCCEx_GetADCCLKFreq+0x1d0>
341893f8:	2b50      	cmp	r3, #80	@ 0x50
341893fa:	f000 80ac 	beq.w	34189556 <RCCEx_GetADCCLKFreq+0x18a>
341893fe:	2b50      	cmp	r3, #80	@ 0x50
34189400:	f200 80cc 	bhi.w	3418959c <RCCEx_GetADCCLKFreq+0x1d0>
34189404:	2b40      	cmp	r3, #64	@ 0x40
34189406:	f000 80b4 	beq.w	34189572 <RCCEx_GetADCCLKFreq+0x1a6>
3418940a:	2b40      	cmp	r3, #64	@ 0x40
3418940c:	f200 80c6 	bhi.w	3418959c <RCCEx_GetADCCLKFreq+0x1d0>
34189410:	2b30      	cmp	r3, #48	@ 0x30
34189412:	d05d      	beq.n	341894d0 <RCCEx_GetADCCLKFreq+0x104>
34189414:	2b30      	cmp	r3, #48	@ 0x30
34189416:	f200 80c1 	bhi.w	3418959c <RCCEx_GetADCCLKFreq+0x1d0>
3418941a:	2b20      	cmp	r3, #32
3418941c:	d014      	beq.n	34189448 <RCCEx_GetADCCLKFreq+0x7c>
3418941e:	2b20      	cmp	r3, #32
34189420:	f200 80bc 	bhi.w	3418959c <RCCEx_GetADCCLKFreq+0x1d0>
34189424:	2b00      	cmp	r3, #0
34189426:	d002      	beq.n	3418942e <RCCEx_GetADCCLKFreq+0x62>
34189428:	2b10      	cmp	r3, #16
3418942a:	d008      	beq.n	3418943e <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418942c:	e0b6      	b.n	3418959c <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418942e:	f7fa ff2b 	bl	34184288 <HAL_RCC_GetSysClockFreq>
34189432:	4603      	mov	r3, r0
34189434:	4618      	mov	r0, r3
34189436:	f7ff fecb 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418943a:	60f8      	str	r0, [r7, #12]
      break;
3418943c:	e0b7      	b.n	341895ae <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418943e:	2007      	movs	r0, #7
34189440:	f000 f9b2 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
34189444:	60f8      	str	r0, [r7, #12]
      break;
34189446:	e0b2      	b.n	341895ae <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34189448:	f7fc fad6 	bl	341859f8 <LL_RCC_IC7_IsEnabled>
3418944c:	4603      	mov	r3, r0
3418944e:	2b00      	cmp	r3, #0
34189450:	f000 80a6 	beq.w	341895a0 <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
34189454:	f7fc faf2 	bl	34185a3c <LL_RCC_IC7_GetDivider>
34189458:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418945a:	f7fc fae1 	bl	34185a20 <LL_RCC_IC7_GetSource>
3418945e:	4603      	mov	r3, r0
34189460:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189464:	d029      	beq.n	341894ba <RCCEx_GetADCCLKFreq+0xee>
34189466:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418946a:	d82f      	bhi.n	341894cc <RCCEx_GetADCCLKFreq+0x100>
3418946c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189470:	d01a      	beq.n	341894a8 <RCCEx_GetADCCLKFreq+0xdc>
34189472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189476:	d829      	bhi.n	341894cc <RCCEx_GetADCCLKFreq+0x100>
34189478:	2b00      	cmp	r3, #0
3418947a:	d003      	beq.n	34189484 <RCCEx_GetADCCLKFreq+0xb8>
3418947c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189480:	d009      	beq.n	34189496 <RCCEx_GetADCCLKFreq+0xca>
            break;
34189482:	e023      	b.n	341894cc <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189484:	f7ff fd8c 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
34189488:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418948a:	68fa      	ldr	r2, [r7, #12]
3418948c:	68bb      	ldr	r3, [r7, #8]
3418948e:	fbb2 f3f3 	udiv	r3, r2, r3
34189492:	60fb      	str	r3, [r7, #12]
            break;
34189494:	e01b      	b.n	341894ce <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189496:	f7ff fdc9 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418949a:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418949c:	68fa      	ldr	r2, [r7, #12]
3418949e:	68bb      	ldr	r3, [r7, #8]
341894a0:	fbb2 f3f3 	udiv	r3, r2, r3
341894a4:	60fb      	str	r3, [r7, #12]
            break;
341894a6:	e012      	b.n	341894ce <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341894a8:	f7ff fe06 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
341894ac:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
341894ae:	68fa      	ldr	r2, [r7, #12]
341894b0:	68bb      	ldr	r3, [r7, #8]
341894b2:	fbb2 f3f3 	udiv	r3, r2, r3
341894b6:	60fb      	str	r3, [r7, #12]
            break;
341894b8:	e009      	b.n	341894ce <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341894ba:	f7ff fe43 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
341894be:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
341894c0:	68fa      	ldr	r2, [r7, #12]
341894c2:	68bb      	ldr	r3, [r7, #8]
341894c4:	fbb2 f3f3 	udiv	r3, r2, r3
341894c8:	60fb      	str	r3, [r7, #12]
            break;
341894ca:	e000      	b.n	341894ce <RCCEx_GetADCCLKFreq+0x102>
            break;
341894cc:	bf00      	nop
      break;
341894ce:	e067      	b.n	341895a0 <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
341894d0:	f7fc fad2 	bl	34185a78 <LL_RCC_IC8_IsEnabled>
341894d4:	4603      	mov	r3, r0
341894d6:	2b00      	cmp	r3, #0
341894d8:	d064      	beq.n	341895a4 <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
341894da:	f7fc faef 	bl	34185abc <LL_RCC_IC8_GetDivider>
341894de:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
341894e0:	f7fc fade 	bl	34185aa0 <LL_RCC_IC8_GetSource>
341894e4:	4603      	mov	r3, r0
341894e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341894ea:	d029      	beq.n	34189540 <RCCEx_GetADCCLKFreq+0x174>
341894ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341894f0:	d82f      	bhi.n	34189552 <RCCEx_GetADCCLKFreq+0x186>
341894f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341894f6:	d01a      	beq.n	3418952e <RCCEx_GetADCCLKFreq+0x162>
341894f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341894fc:	d829      	bhi.n	34189552 <RCCEx_GetADCCLKFreq+0x186>
341894fe:	2b00      	cmp	r3, #0
34189500:	d003      	beq.n	3418950a <RCCEx_GetADCCLKFreq+0x13e>
34189502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189506:	d009      	beq.n	3418951c <RCCEx_GetADCCLKFreq+0x150>
            break;
34189508:	e023      	b.n	34189552 <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418950a:	f7ff fd49 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418950e:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34189510:	68fa      	ldr	r2, [r7, #12]
34189512:	68bb      	ldr	r3, [r7, #8]
34189514:	fbb2 f3f3 	udiv	r3, r2, r3
34189518:	60fb      	str	r3, [r7, #12]
            break;
3418951a:	e01b      	b.n	34189554 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418951c:	f7ff fd86 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34189520:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34189522:	68fa      	ldr	r2, [r7, #12]
34189524:	68bb      	ldr	r3, [r7, #8]
34189526:	fbb2 f3f3 	udiv	r3, r2, r3
3418952a:	60fb      	str	r3, [r7, #12]
            break;
3418952c:	e012      	b.n	34189554 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418952e:	f7ff fdc3 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
34189532:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34189534:	68fa      	ldr	r2, [r7, #12]
34189536:	68bb      	ldr	r3, [r7, #8]
34189538:	fbb2 f3f3 	udiv	r3, r2, r3
3418953c:	60fb      	str	r3, [r7, #12]
            break;
3418953e:	e009      	b.n	34189554 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189540:	f7ff fe00 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
34189544:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34189546:	68fa      	ldr	r2, [r7, #12]
34189548:	68bb      	ldr	r3, [r7, #8]
3418954a:	fbb2 f3f3 	udiv	r3, r2, r3
3418954e:	60fb      	str	r3, [r7, #12]
            break;
34189550:	e000      	b.n	34189554 <RCCEx_GetADCCLKFreq+0x188>
            break;
34189552:	bf00      	nop
      break;
34189554:	e026      	b.n	341895a4 <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34189556:	f7fb faab 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418955a:	4603      	mov	r3, r0
3418955c:	2b00      	cmp	r3, #0
3418955e:	d023      	beq.n	341895a8 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189560:	f7fb fab8 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
34189564:	4603      	mov	r3, r0
34189566:	09db      	lsrs	r3, r3, #7
34189568:	4a16      	ldr	r2, [pc, #88]	@ (341895c4 <RCCEx_GetADCCLKFreq+0x1f8>)
3418956a:	fa22 f303 	lsr.w	r3, r2, r3
3418956e:	60fb      	str	r3, [r7, #12]
      break;
34189570:	e01a      	b.n	341895a8 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
34189572:	f7fb fabd 	bl	34184af0 <LL_RCC_MSI_IsReady>
34189576:	4603      	mov	r3, r0
34189578:	2b00      	cmp	r3, #0
3418957a:	d017      	beq.n	341895ac <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
3418957c:	4b12      	ldr	r3, [pc, #72]	@ (341895c8 <RCCEx_GetADCCLKFreq+0x1fc>)
3418957e:	60fb      	str	r3, [r7, #12]
      break;
34189580:	e014      	b.n	341895ac <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
34189582:	4b12      	ldr	r3, [pc, #72]	@ (341895cc <RCCEx_GetADCCLKFreq+0x200>)
34189584:	60fb      	str	r3, [r7, #12]
      break;
34189586:	e012      	b.n	341895ae <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
34189588:	f7fa fe7e 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418958c:	4604      	mov	r4, r0
3418958e:	f7fb fef7 	bl	34185380 <LL_RCC_GetTIMPrescaler>
34189592:	4603      	mov	r3, r0
34189594:	fa24 f303 	lsr.w	r3, r4, r3
34189598:	60fb      	str	r3, [r7, #12]
      break;
3418959a:	e008      	b.n	341895ae <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3418959c:	bf00      	nop
3418959e:	e006      	b.n	341895ae <RCCEx_GetADCCLKFreq+0x1e2>
      break;
341895a0:	bf00      	nop
341895a2:	e004      	b.n	341895ae <RCCEx_GetADCCLKFreq+0x1e2>
      break;
341895a4:	bf00      	nop
341895a6:	e002      	b.n	341895ae <RCCEx_GetADCCLKFreq+0x1e2>
      break;
341895a8:	bf00      	nop
341895aa:	e000      	b.n	341895ae <RCCEx_GetADCCLKFreq+0x1e2>
      break;
341895ac:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
341895ae:	f7fb fb4f 	bl	34184c50 <LL_RCC_GetADCPrescaler>
341895b2:	4603      	mov	r3, r0
341895b4:	3301      	adds	r3, #1
341895b6:	68fa      	ldr	r2, [r7, #12]
341895b8:	fbb2 f3f3 	udiv	r3, r2, r3
}
341895bc:	4618      	mov	r0, r3
341895be:	3714      	adds	r7, #20
341895c0:	46bd      	mov	sp, r7
341895c2:	bd90      	pop	{r4, r7, pc}
341895c4:	03d09000 	.word	0x03d09000
341895c8:	003d0900 	.word	0x003d0900
341895cc:	00bb8000 	.word	0x00bb8000

341895d0 <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
341895d0:	b590      	push	{r4, r7, lr}
341895d2:	b085      	sub	sp, #20
341895d4:	af00      	add	r7, sp, #0
341895d6:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
341895d8:	2300      	movs	r3, #0
341895da:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
341895dc:	6878      	ldr	r0, [r7, #4]
341895de:	f7fb fd2f 	bl	34185040 <LL_RCC_GetADFClockSource>
341895e2:	4603      	mov	r3, r0
341895e4:	2b07      	cmp	r3, #7
341895e6:	f200 80ca 	bhi.w	3418977e <RCCEx_GetADFCLKFreq+0x1ae>
341895ea:	a201      	add	r2, pc, #4	@ (adr r2, 341895f0 <RCCEx_GetADFCLKFreq+0x20>)
341895ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
341895f0:	34189611 	.word	0x34189611
341895f4:	34189621 	.word	0x34189621
341895f8:	3418962b 	.word	0x3418962b
341895fc:	341896b3 	.word	0x341896b3
34189600:	34189755 	.word	0x34189755
34189604:	34189739 	.word	0x34189739
34189608:	34189765 	.word	0x34189765
3418960c:	3418976b 	.word	0x3418976b
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189610:	f7fa fe3a 	bl	34184288 <HAL_RCC_GetSysClockFreq>
34189614:	4603      	mov	r3, r0
34189616:	4618      	mov	r0, r3
34189618:	f7ff fdda 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418961c:	60f8      	str	r0, [r7, #12]
      break;
3418961e:	e0b7      	b.n	34189790 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189620:	2007      	movs	r0, #7
34189622:	f000 f8c1 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
34189626:	60f8      	str	r0, [r7, #12]
      break;
34189628:	e0b2      	b.n	34189790 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418962a:	f7fc f9e5 	bl	341859f8 <LL_RCC_IC7_IsEnabled>
3418962e:	4603      	mov	r3, r0
34189630:	2b00      	cmp	r3, #0
34189632:	f000 80a6 	beq.w	34189782 <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34189636:	f7fc fa01 	bl	34185a3c <LL_RCC_IC7_GetDivider>
3418963a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418963c:	f7fc f9f0 	bl	34185a20 <LL_RCC_IC7_GetSource>
34189640:	4603      	mov	r3, r0
34189642:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189646:	d029      	beq.n	3418969c <RCCEx_GetADFCLKFreq+0xcc>
34189648:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418964c:	d82f      	bhi.n	341896ae <RCCEx_GetADFCLKFreq+0xde>
3418964e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189652:	d01a      	beq.n	3418968a <RCCEx_GetADFCLKFreq+0xba>
34189654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189658:	d829      	bhi.n	341896ae <RCCEx_GetADFCLKFreq+0xde>
3418965a:	2b00      	cmp	r3, #0
3418965c:	d003      	beq.n	34189666 <RCCEx_GetADFCLKFreq+0x96>
3418965e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189662:	d009      	beq.n	34189678 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189664:	e023      	b.n	341896ae <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189666:	f7ff fc9b 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418966a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418966c:	68fa      	ldr	r2, [r7, #12]
3418966e:	68bb      	ldr	r3, [r7, #8]
34189670:	fbb2 f3f3 	udiv	r3, r2, r3
34189674:	60fb      	str	r3, [r7, #12]
            break;
34189676:	e01b      	b.n	341896b0 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189678:	f7ff fcd8 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418967c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418967e:	68fa      	ldr	r2, [r7, #12]
34189680:	68bb      	ldr	r3, [r7, #8]
34189682:	fbb2 f3f3 	udiv	r3, r2, r3
34189686:	60fb      	str	r3, [r7, #12]
            break;
34189688:	e012      	b.n	341896b0 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418968a:	f7ff fd15 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418968e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189690:	68fa      	ldr	r2, [r7, #12]
34189692:	68bb      	ldr	r3, [r7, #8]
34189694:	fbb2 f3f3 	udiv	r3, r2, r3
34189698:	60fb      	str	r3, [r7, #12]
            break;
3418969a:	e009      	b.n	341896b0 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418969c:	f7ff fd52 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
341896a0:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341896a2:	68fa      	ldr	r2, [r7, #12]
341896a4:	68bb      	ldr	r3, [r7, #8]
341896a6:	fbb2 f3f3 	udiv	r3, r2, r3
341896aa:	60fb      	str	r3, [r7, #12]
            break;
341896ac:	e000      	b.n	341896b0 <RCCEx_GetADFCLKFreq+0xe0>
            break;
341896ae:	bf00      	nop
        }
      }
      break;
341896b0:	e067      	b.n	34189782 <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
341896b2:	f7fc f9e1 	bl	34185a78 <LL_RCC_IC8_IsEnabled>
341896b6:	4603      	mov	r3, r0
341896b8:	2b00      	cmp	r3, #0
341896ba:	d064      	beq.n	34189786 <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
341896bc:	f7fc f9fe 	bl	34185abc <LL_RCC_IC8_GetDivider>
341896c0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
341896c2:	f7fc f9ed 	bl	34185aa0 <LL_RCC_IC8_GetSource>
341896c6:	4603      	mov	r3, r0
341896c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341896cc:	d029      	beq.n	34189722 <RCCEx_GetADFCLKFreq+0x152>
341896ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341896d2:	d82f      	bhi.n	34189734 <RCCEx_GetADFCLKFreq+0x164>
341896d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341896d8:	d01a      	beq.n	34189710 <RCCEx_GetADFCLKFreq+0x140>
341896da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341896de:	d829      	bhi.n	34189734 <RCCEx_GetADFCLKFreq+0x164>
341896e0:	2b00      	cmp	r3, #0
341896e2:	d003      	beq.n	341896ec <RCCEx_GetADFCLKFreq+0x11c>
341896e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341896e8:	d009      	beq.n	341896fe <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341896ea:	e023      	b.n	34189734 <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341896ec:	f7ff fc58 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
341896f0:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341896f2:	68fa      	ldr	r2, [r7, #12]
341896f4:	68bb      	ldr	r3, [r7, #8]
341896f6:	fbb2 f3f3 	udiv	r3, r2, r3
341896fa:	60fb      	str	r3, [r7, #12]
            break;
341896fc:	e01b      	b.n	34189736 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341896fe:	f7ff fc95 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34189702:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189704:	68fa      	ldr	r2, [r7, #12]
34189706:	68bb      	ldr	r3, [r7, #8]
34189708:	fbb2 f3f3 	udiv	r3, r2, r3
3418970c:	60fb      	str	r3, [r7, #12]
            break;
3418970e:	e012      	b.n	34189736 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189710:	f7ff fcd2 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
34189714:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189716:	68fa      	ldr	r2, [r7, #12]
34189718:	68bb      	ldr	r3, [r7, #8]
3418971a:	fbb2 f3f3 	udiv	r3, r2, r3
3418971e:	60fb      	str	r3, [r7, #12]
            break;
34189720:	e009      	b.n	34189736 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189722:	f7ff fd0f 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
34189726:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189728:	68fa      	ldr	r2, [r7, #12]
3418972a:	68bb      	ldr	r3, [r7, #8]
3418972c:	fbb2 f3f3 	udiv	r3, r2, r3
34189730:	60fb      	str	r3, [r7, #12]
            break;
34189732:	e000      	b.n	34189736 <RCCEx_GetADFCLKFreq+0x166>
            break;
34189734:	bf00      	nop
        }
      }
      break;
34189736:	e026      	b.n	34189786 <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34189738:	f7fb f9ba 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418973c:	4603      	mov	r3, r0
3418973e:	2b00      	cmp	r3, #0
34189740:	d023      	beq.n	3418978a <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189742:	f7fb f9c7 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
34189746:	4603      	mov	r3, r0
34189748:	09db      	lsrs	r3, r3, #7
3418974a:	4a14      	ldr	r2, [pc, #80]	@ (3418979c <RCCEx_GetADFCLKFreq+0x1cc>)
3418974c:	fa22 f303 	lsr.w	r3, r2, r3
34189750:	60fb      	str	r3, [r7, #12]
      }
      break;
34189752:	e01a      	b.n	3418978a <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34189754:	f7fb f9cc 	bl	34184af0 <LL_RCC_MSI_IsReady>
34189758:	4603      	mov	r3, r0
3418975a:	2b00      	cmp	r3, #0
3418975c:	d017      	beq.n	3418978e <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
3418975e:	4b10      	ldr	r3, [pc, #64]	@ (341897a0 <RCCEx_GetADFCLKFreq+0x1d0>)
34189760:	60fb      	str	r3, [r7, #12]
      }
      break;
34189762:	e014      	b.n	3418978e <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34189764:	4b0f      	ldr	r3, [pc, #60]	@ (341897a4 <RCCEx_GetADFCLKFreq+0x1d4>)
34189766:	60fb      	str	r3, [r7, #12]
      break;
34189768:	e012      	b.n	34189790 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
3418976a:	f7fa fd8d 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418976e:	4604      	mov	r4, r0
34189770:	f7fb fe06 	bl	34185380 <LL_RCC_GetTIMPrescaler>
34189774:	4603      	mov	r3, r0
34189776:	fa24 f303 	lsr.w	r3, r4, r3
3418977a:	60fb      	str	r3, [r7, #12]
      break;
3418977c:	e008      	b.n	34189790 <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
3418977e:	bf00      	nop
34189780:	e006      	b.n	34189790 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34189782:	bf00      	nop
34189784:	e004      	b.n	34189790 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34189786:	bf00      	nop
34189788:	e002      	b.n	34189790 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418978a:	bf00      	nop
3418978c:	e000      	b.n	34189790 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418978e:	bf00      	nop
  }

  return adf_frequency;
34189790:	68fb      	ldr	r3, [r7, #12]
}
34189792:	4618      	mov	r0, r3
34189794:	3714      	adds	r7, #20
34189796:	46bd      	mov	sp, r7
34189798:	bd90      	pop	{r4, r7, pc}
3418979a:	bf00      	nop
3418979c:	03d09000 	.word	0x03d09000
341897a0:	003d0900 	.word	0x003d0900
341897a4:	00bb8000 	.word	0x00bb8000

341897a8 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
341897a8:	b580      	push	{r7, lr}
341897aa:	b084      	sub	sp, #16
341897ac:	af00      	add	r7, sp, #0
341897ae:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
341897b0:	2300      	movs	r3, #0
341897b2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
341897b4:	f7fc fc60 	bl	34186078 <LL_RCC_CLKP_IsEnabled>
341897b8:	4603      	mov	r3, r0
341897ba:	2b01      	cmp	r3, #1
341897bc:	f040 81a5 	bne.w	34189b0a <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
341897c0:	6878      	ldr	r0, [r7, #4]
341897c2:	f7fb fc4f 	bl	34185064 <LL_RCC_GetCLKPClockSource>
341897c6:	4603      	mov	r3, r0
341897c8:	2b07      	cmp	r3, #7
341897ca:	f200 818d 	bhi.w	34189ae8 <RCCEx_GetCLKPCLKFreq+0x340>
341897ce:	a201      	add	r2, pc, #4	@ (adr r2, 341897d4 <RCCEx_GetCLKPCLKFreq+0x2c>)
341897d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
341897d4:	341897f5 	.word	0x341897f5
341897d8:	34189813 	.word	0x34189813
341897dc:	34189825 	.word	0x34189825
341897e0:	341899cf 	.word	0x341899cf
341897e4:	34189837 	.word	0x34189837
341897e8:	341898bf 	.word	0x341898bf
341897ec:	34189947 	.word	0x34189947
341897f0:	34189a57 	.word	0x34189a57
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
341897f4:	f7fb f95c 	bl	34184ab0 <LL_RCC_HSI_IsReady>
341897f8:	4603      	mov	r3, r0
341897fa:	2b00      	cmp	r3, #0
341897fc:	f000 8176 	beq.w	34189aec <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189800:	f7fb f968 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
34189804:	4603      	mov	r3, r0
34189806:	09db      	lsrs	r3, r3, #7
34189808:	4aa1      	ldr	r2, [pc, #644]	@ (34189a90 <RCCEx_GetCLKPCLKFreq+0x2e8>)
3418980a:	fa22 f303 	lsr.w	r3, r2, r3
3418980e:	60fb      	str	r3, [r7, #12]
        }
        break;
34189810:	e16c      	b.n	34189aec <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34189812:	f7fb f96d 	bl	34184af0 <LL_RCC_MSI_IsReady>
34189816:	4603      	mov	r3, r0
34189818:	2b00      	cmp	r3, #0
3418981a:	f000 8169 	beq.w	34189af0 <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
3418981e:	4b9d      	ldr	r3, [pc, #628]	@ (34189a94 <RCCEx_GetCLKPCLKFreq+0x2ec>)
34189820:	60fb      	str	r3, [r7, #12]
        }
        break;
34189822:	e165      	b.n	34189af0 <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34189824:	f7fb f932 	bl	34184a8c <LL_RCC_HSE_IsReady>
34189828:	4603      	mov	r3, r0
3418982a:	2b00      	cmp	r3, #0
3418982c:	f000 8162 	beq.w	34189af4 <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
34189830:	4b99      	ldr	r3, [pc, #612]	@ (34189a98 <RCCEx_GetCLKPCLKFreq+0x2f0>)
34189832:	60fb      	str	r3, [r7, #12]
        }
        break;
34189834:	e15e      	b.n	34189af4 <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
34189836:	f7fc f89f 	bl	34185978 <LL_RCC_IC5_IsEnabled>
3418983a:	4603      	mov	r3, r0
3418983c:	2b00      	cmp	r3, #0
3418983e:	f000 815b 	beq.w	34189af8 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
34189842:	f7fc f8bb 	bl	341859bc <LL_RCC_IC5_GetDivider>
34189846:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
34189848:	f7fc f8aa 	bl	341859a0 <LL_RCC_IC5_GetSource>
3418984c:	4603      	mov	r3, r0
3418984e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189852:	d029      	beq.n	341898a8 <RCCEx_GetCLKPCLKFreq+0x100>
34189854:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189858:	d82f      	bhi.n	341898ba <RCCEx_GetCLKPCLKFreq+0x112>
3418985a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418985e:	d01a      	beq.n	34189896 <RCCEx_GetCLKPCLKFreq+0xee>
34189860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189864:	d829      	bhi.n	341898ba <RCCEx_GetCLKPCLKFreq+0x112>
34189866:	2b00      	cmp	r3, #0
34189868:	d003      	beq.n	34189872 <RCCEx_GetCLKPCLKFreq+0xca>
3418986a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418986e:	d009      	beq.n	34189884 <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34189870:	e023      	b.n	341898ba <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189872:	f7ff fb95 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
34189876:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189878:	68fa      	ldr	r2, [r7, #12]
3418987a:	68bb      	ldr	r3, [r7, #8]
3418987c:	fbb2 f3f3 	udiv	r3, r2, r3
34189880:	60fb      	str	r3, [r7, #12]
              break;
34189882:	e01b      	b.n	341898bc <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189884:	f7ff fbd2 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34189888:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418988a:	68fa      	ldr	r2, [r7, #12]
3418988c:	68bb      	ldr	r3, [r7, #8]
3418988e:	fbb2 f3f3 	udiv	r3, r2, r3
34189892:	60fb      	str	r3, [r7, #12]
              break;
34189894:	e012      	b.n	341898bc <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189896:	f7ff fc0f 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418989a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418989c:	68fa      	ldr	r2, [r7, #12]
3418989e:	68bb      	ldr	r3, [r7, #8]
341898a0:	fbb2 f3f3 	udiv	r3, r2, r3
341898a4:	60fb      	str	r3, [r7, #12]
              break;
341898a6:	e009      	b.n	341898bc <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341898a8:	f7ff fc4c 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
341898ac:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341898ae:	68fa      	ldr	r2, [r7, #12]
341898b0:	68bb      	ldr	r3, [r7, #8]
341898b2:	fbb2 f3f3 	udiv	r3, r2, r3
341898b6:	60fb      	str	r3, [r7, #12]
              break;
341898b8:	e000      	b.n	341898bc <RCCEx_GetCLKPCLKFreq+0x114>
              break;
341898ba:	bf00      	nop
          }
        }
        break;
341898bc:	e11c      	b.n	34189af8 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
341898be:	f7fc f95b 	bl	34185b78 <LL_RCC_IC10_IsEnabled>
341898c2:	4603      	mov	r3, r0
341898c4:	2b00      	cmp	r3, #0
341898c6:	f000 8119 	beq.w	34189afc <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
341898ca:	f7fc f977 	bl	34185bbc <LL_RCC_IC10_GetDivider>
341898ce:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
341898d0:	f7fc f966 	bl	34185ba0 <LL_RCC_IC10_GetSource>
341898d4:	4603      	mov	r3, r0
341898d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341898da:	d029      	beq.n	34189930 <RCCEx_GetCLKPCLKFreq+0x188>
341898dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341898e0:	d82f      	bhi.n	34189942 <RCCEx_GetCLKPCLKFreq+0x19a>
341898e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341898e6:	d01a      	beq.n	3418991e <RCCEx_GetCLKPCLKFreq+0x176>
341898e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341898ec:	d829      	bhi.n	34189942 <RCCEx_GetCLKPCLKFreq+0x19a>
341898ee:	2b00      	cmp	r3, #0
341898f0:	d003      	beq.n	341898fa <RCCEx_GetCLKPCLKFreq+0x152>
341898f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341898f6:	d009      	beq.n	3418990c <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
341898f8:	e023      	b.n	34189942 <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341898fa:	f7ff fb51 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
341898fe:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189900:	68fa      	ldr	r2, [r7, #12]
34189902:	68bb      	ldr	r3, [r7, #8]
34189904:	fbb2 f3f3 	udiv	r3, r2, r3
34189908:	60fb      	str	r3, [r7, #12]
              break;
3418990a:	e01b      	b.n	34189944 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418990c:	f7ff fb8e 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34189910:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189912:	68fa      	ldr	r2, [r7, #12]
34189914:	68bb      	ldr	r3, [r7, #8]
34189916:	fbb2 f3f3 	udiv	r3, r2, r3
3418991a:	60fb      	str	r3, [r7, #12]
              break;
3418991c:	e012      	b.n	34189944 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418991e:	f7ff fbcb 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
34189922:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189924:	68fa      	ldr	r2, [r7, #12]
34189926:	68bb      	ldr	r3, [r7, #8]
34189928:	fbb2 f3f3 	udiv	r3, r2, r3
3418992c:	60fb      	str	r3, [r7, #12]
              break;
3418992e:	e009      	b.n	34189944 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189930:	f7ff fc08 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
34189934:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189936:	68fa      	ldr	r2, [r7, #12]
34189938:	68bb      	ldr	r3, [r7, #8]
3418993a:	fbb2 f3f3 	udiv	r3, r2, r3
3418993e:	60fb      	str	r3, [r7, #12]
              break;
34189940:	e000      	b.n	34189944 <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
34189942:	bf00      	nop
          }
        }
        break;
34189944:	e0da      	b.n	34189afc <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
34189946:	f7fc fa17 	bl	34185d78 <LL_RCC_IC15_IsEnabled>
3418994a:	4603      	mov	r3, r0
3418994c:	2b00      	cmp	r3, #0
3418994e:	f000 80d7 	beq.w	34189b00 <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
34189952:	f7fc fa33 	bl	34185dbc <LL_RCC_IC15_GetDivider>
34189956:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
34189958:	f7fc fa22 	bl	34185da0 <LL_RCC_IC15_GetSource>
3418995c:	4603      	mov	r3, r0
3418995e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189962:	d029      	beq.n	341899b8 <RCCEx_GetCLKPCLKFreq+0x210>
34189964:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189968:	d82f      	bhi.n	341899ca <RCCEx_GetCLKPCLKFreq+0x222>
3418996a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418996e:	d01a      	beq.n	341899a6 <RCCEx_GetCLKPCLKFreq+0x1fe>
34189970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189974:	d829      	bhi.n	341899ca <RCCEx_GetCLKPCLKFreq+0x222>
34189976:	2b00      	cmp	r3, #0
34189978:	d003      	beq.n	34189982 <RCCEx_GetCLKPCLKFreq+0x1da>
3418997a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418997e:	d009      	beq.n	34189994 <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34189980:	e023      	b.n	341899ca <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189982:	f7ff fb0d 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
34189986:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189988:	68fa      	ldr	r2, [r7, #12]
3418998a:	68bb      	ldr	r3, [r7, #8]
3418998c:	fbb2 f3f3 	udiv	r3, r2, r3
34189990:	60fb      	str	r3, [r7, #12]
              break;
34189992:	e01b      	b.n	341899cc <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189994:	f7ff fb4a 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34189998:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418999a:	68fa      	ldr	r2, [r7, #12]
3418999c:	68bb      	ldr	r3, [r7, #8]
3418999e:	fbb2 f3f3 	udiv	r3, r2, r3
341899a2:	60fb      	str	r3, [r7, #12]
              break;
341899a4:	e012      	b.n	341899cc <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341899a6:	f7ff fb87 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
341899aa:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341899ac:	68fa      	ldr	r2, [r7, #12]
341899ae:	68bb      	ldr	r3, [r7, #8]
341899b0:	fbb2 f3f3 	udiv	r3, r2, r3
341899b4:	60fb      	str	r3, [r7, #12]
              break;
341899b6:	e009      	b.n	341899cc <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341899b8:	f7ff fbc4 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
341899bc:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341899be:	68fa      	ldr	r2, [r7, #12]
341899c0:	68bb      	ldr	r3, [r7, #8]
341899c2:	fbb2 f3f3 	udiv	r3, r2, r3
341899c6:	60fb      	str	r3, [r7, #12]
              break;
341899c8:	e000      	b.n	341899cc <RCCEx_GetCLKPCLKFreq+0x224>
              break;
341899ca:	bf00      	nop
          }
        }
        break;
341899cc:	e098      	b.n	34189b00 <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
341899ce:	f7fc fad3 	bl	34185f78 <LL_RCC_IC19_IsEnabled>
341899d2:	4603      	mov	r3, r0
341899d4:	2b00      	cmp	r3, #0
341899d6:	f000 8095 	beq.w	34189b04 <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
341899da:	f7fc faef 	bl	34185fbc <LL_RCC_IC19_GetDivider>
341899de:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
341899e0:	f7fc fade 	bl	34185fa0 <LL_RCC_IC19_GetSource>
341899e4:	4603      	mov	r3, r0
341899e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341899ea:	d029      	beq.n	34189a40 <RCCEx_GetCLKPCLKFreq+0x298>
341899ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341899f0:	d82f      	bhi.n	34189a52 <RCCEx_GetCLKPCLKFreq+0x2aa>
341899f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341899f6:	d01a      	beq.n	34189a2e <RCCEx_GetCLKPCLKFreq+0x286>
341899f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341899fc:	d829      	bhi.n	34189a52 <RCCEx_GetCLKPCLKFreq+0x2aa>
341899fe:	2b00      	cmp	r3, #0
34189a00:	d003      	beq.n	34189a0a <RCCEx_GetCLKPCLKFreq+0x262>
34189a02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189a06:	d009      	beq.n	34189a1c <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34189a08:	e023      	b.n	34189a52 <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189a0a:	f7ff fac9 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
34189a0e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189a10:	68fa      	ldr	r2, [r7, #12]
34189a12:	68bb      	ldr	r3, [r7, #8]
34189a14:	fbb2 f3f3 	udiv	r3, r2, r3
34189a18:	60fb      	str	r3, [r7, #12]
              break;
34189a1a:	e01b      	b.n	34189a54 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189a1c:	f7ff fb06 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34189a20:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189a22:	68fa      	ldr	r2, [r7, #12]
34189a24:	68bb      	ldr	r3, [r7, #8]
34189a26:	fbb2 f3f3 	udiv	r3, r2, r3
34189a2a:	60fb      	str	r3, [r7, #12]
              break;
34189a2c:	e012      	b.n	34189a54 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189a2e:	f7ff fb43 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
34189a32:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189a34:	68fa      	ldr	r2, [r7, #12]
34189a36:	68bb      	ldr	r3, [r7, #8]
34189a38:	fbb2 f3f3 	udiv	r3, r2, r3
34189a3c:	60fb      	str	r3, [r7, #12]
              break;
34189a3e:	e009      	b.n	34189a54 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189a40:	f7ff fb80 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
34189a44:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189a46:	68fa      	ldr	r2, [r7, #12]
34189a48:	68bb      	ldr	r3, [r7, #8]
34189a4a:	fbb2 f3f3 	udiv	r3, r2, r3
34189a4e:	60fb      	str	r3, [r7, #12]
              break;
34189a50:	e000      	b.n	34189a54 <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
34189a52:	bf00      	nop
          }
        }
        break;
34189a54:	e056      	b.n	34189b04 <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
34189a56:	f7fc facf 	bl	34185ff8 <LL_RCC_IC20_IsEnabled>
34189a5a:	4603      	mov	r3, r0
34189a5c:	2b00      	cmp	r3, #0
34189a5e:	d053      	beq.n	34189b08 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
34189a60:	f7fc faec 	bl	3418603c <LL_RCC_IC20_GetDivider>
34189a64:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
34189a66:	f7fc fadb 	bl	34186020 <LL_RCC_IC20_GetSource>
34189a6a:	4603      	mov	r3, r0
34189a6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189a70:	d02f      	beq.n	34189ad2 <RCCEx_GetCLKPCLKFreq+0x32a>
34189a72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189a76:	d835      	bhi.n	34189ae4 <RCCEx_GetCLKPCLKFreq+0x33c>
34189a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189a7c:	d020      	beq.n	34189ac0 <RCCEx_GetCLKPCLKFreq+0x318>
34189a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189a82:	d82f      	bhi.n	34189ae4 <RCCEx_GetCLKPCLKFreq+0x33c>
34189a84:	2b00      	cmp	r3, #0
34189a86:	d009      	beq.n	34189a9c <RCCEx_GetCLKPCLKFreq+0x2f4>
34189a88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189a8c:	d00f      	beq.n	34189aae <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34189a8e:	e029      	b.n	34189ae4 <RCCEx_GetCLKPCLKFreq+0x33c>
34189a90:	03d09000 	.word	0x03d09000
34189a94:	003d0900 	.word	0x003d0900
34189a98:	02dc6c00 	.word	0x02dc6c00
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189a9c:	f7ff fa80 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
34189aa0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189aa2:	68fa      	ldr	r2, [r7, #12]
34189aa4:	68bb      	ldr	r3, [r7, #8]
34189aa6:	fbb2 f3f3 	udiv	r3, r2, r3
34189aaa:	60fb      	str	r3, [r7, #12]
              break;
34189aac:	e01b      	b.n	34189ae6 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189aae:	f7ff fabd 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34189ab2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189ab4:	68fa      	ldr	r2, [r7, #12]
34189ab6:	68bb      	ldr	r3, [r7, #8]
34189ab8:	fbb2 f3f3 	udiv	r3, r2, r3
34189abc:	60fb      	str	r3, [r7, #12]
              break;
34189abe:	e012      	b.n	34189ae6 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189ac0:	f7ff fafa 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
34189ac4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189ac6:	68fa      	ldr	r2, [r7, #12]
34189ac8:	68bb      	ldr	r3, [r7, #8]
34189aca:	fbb2 f3f3 	udiv	r3, r2, r3
34189ace:	60fb      	str	r3, [r7, #12]
              break;
34189ad0:	e009      	b.n	34189ae6 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189ad2:	f7ff fb37 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
34189ad6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34189ad8:	68fa      	ldr	r2, [r7, #12]
34189ada:	68bb      	ldr	r3, [r7, #8]
34189adc:	fbb2 f3f3 	udiv	r3, r2, r3
34189ae0:	60fb      	str	r3, [r7, #12]
              break;
34189ae2:	e000      	b.n	34189ae6 <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
34189ae4:	bf00      	nop
          }
        }
        break;
34189ae6:	e00f      	b.n	34189b08 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
34189ae8:	bf00      	nop
34189aea:	e00e      	b.n	34189b0a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189aec:	bf00      	nop
34189aee:	e00c      	b.n	34189b0a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189af0:	bf00      	nop
34189af2:	e00a      	b.n	34189b0a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189af4:	bf00      	nop
34189af6:	e008      	b.n	34189b0a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189af8:	bf00      	nop
34189afa:	e006      	b.n	34189b0a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189afc:	bf00      	nop
34189afe:	e004      	b.n	34189b0a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189b00:	bf00      	nop
34189b02:	e002      	b.n	34189b0a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189b04:	bf00      	nop
34189b06:	e000      	b.n	34189b0a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34189b08:	bf00      	nop
    }
  }

  return clkp_frequency;
34189b0a:	68fb      	ldr	r3, [r7, #12]
}
34189b0c:	4618      	mov	r0, r3
34189b0e:	3710      	adds	r7, #16
34189b10:	46bd      	mov	sp, r7
34189b12:	bd80      	pop	{r7, pc}

34189b14 <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
34189b14:	b580      	push	{r7, lr}
34189b16:	b082      	sub	sp, #8
34189b18:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34189b1a:	2300      	movs	r3, #0
34189b1c:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
34189b1e:	f7fc f9eb 	bl	34185ef8 <LL_RCC_IC18_IsEnabled>
34189b22:	4603      	mov	r3, r0
34189b24:	2b00      	cmp	r3, #0
34189b26:	d03c      	beq.n	34189ba2 <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
34189b28:	f7fc fa08 	bl	34185f3c <LL_RCC_IC18_GetDivider>
34189b2c:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
34189b2e:	f7fc f9f7 	bl	34185f20 <LL_RCC_IC18_GetSource>
34189b32:	4603      	mov	r3, r0
34189b34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189b38:	d029      	beq.n	34189b8e <RCCEx_GetCSICLKFreq+0x7a>
34189b3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189b3e:	d82f      	bhi.n	34189ba0 <RCCEx_GetCSICLKFreq+0x8c>
34189b40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189b44:	d01a      	beq.n	34189b7c <RCCEx_GetCSICLKFreq+0x68>
34189b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189b4a:	d829      	bhi.n	34189ba0 <RCCEx_GetCSICLKFreq+0x8c>
34189b4c:	2b00      	cmp	r3, #0
34189b4e:	d003      	beq.n	34189b58 <RCCEx_GetCSICLKFreq+0x44>
34189b50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189b54:	d009      	beq.n	34189b6a <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
34189b56:	e023      	b.n	34189ba0 <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189b58:	f7ff fa22 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
34189b5c:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34189b5e:	687a      	ldr	r2, [r7, #4]
34189b60:	683b      	ldr	r3, [r7, #0]
34189b62:	fbb2 f3f3 	udiv	r3, r2, r3
34189b66:	607b      	str	r3, [r7, #4]
        break;
34189b68:	e01b      	b.n	34189ba2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189b6a:	f7ff fa5f 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34189b6e:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34189b70:	687a      	ldr	r2, [r7, #4]
34189b72:	683b      	ldr	r3, [r7, #0]
34189b74:	fbb2 f3f3 	udiv	r3, r2, r3
34189b78:	607b      	str	r3, [r7, #4]
        break;
34189b7a:	e012      	b.n	34189ba2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189b7c:	f7ff fa9c 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
34189b80:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34189b82:	687a      	ldr	r2, [r7, #4]
34189b84:	683b      	ldr	r3, [r7, #0]
34189b86:	fbb2 f3f3 	udiv	r3, r2, r3
34189b8a:	607b      	str	r3, [r7, #4]
        break;
34189b8c:	e009      	b.n	34189ba2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189b8e:	f7ff fad9 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
34189b92:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34189b94:	687a      	ldr	r2, [r7, #4]
34189b96:	683b      	ldr	r3, [r7, #0]
34189b98:	fbb2 f3f3 	udiv	r3, r2, r3
34189b9c:	607b      	str	r3, [r7, #4]
        break;
34189b9e:	e000      	b.n	34189ba2 <RCCEx_GetCSICLKFreq+0x8e>
        break;
34189ba0:	bf00      	nop
    }
  }

  return clkp_frequency;
34189ba2:	687b      	ldr	r3, [r7, #4]
}
34189ba4:	4618      	mov	r0, r3
34189ba6:	3708      	adds	r7, #8
34189ba8:	46bd      	mov	sp, r7
34189baa:	bd80      	pop	{r7, pc}

34189bac <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
34189bac:	b580      	push	{r7, lr}
34189bae:	b084      	sub	sp, #16
34189bb0:	af00      	add	r7, sp, #0
34189bb2:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
34189bb4:	2300      	movs	r3, #0
34189bb6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34189bb8:	6878      	ldr	r0, [r7, #4]
34189bba:	f7fb fa65 	bl	34185088 <LL_RCC_GetDCMIPPClockSource>
34189bbe:	4603      	mov	r3, r0
34189bc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34189bc4:	d062      	beq.n	34189c8c <RCCEx_GetDCMIPPCLKFreq+0xe0>
34189bc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34189bca:	d86d      	bhi.n	34189ca8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
34189bcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34189bd0:	d019      	beq.n	34189c06 <RCCEx_GetDCMIPPCLKFreq+0x5a>
34189bd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34189bd6:	d867      	bhi.n	34189ca8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
34189bd8:	2b00      	cmp	r3, #0
34189bda:	d003      	beq.n	34189be4 <RCCEx_GetDCMIPPCLKFreq+0x38>
34189bdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34189be0:	d00c      	beq.n	34189bfc <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189be2:	e061      	b.n	34189ca8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189be4:	f7fa fb50 	bl	34184288 <HAL_RCC_GetSysClockFreq>
34189be8:	4603      	mov	r3, r0
34189bea:	4618      	mov	r0, r3
34189bec:	f7ff faf0 	bl	341891d0 <RCCEx_GetHCLKFreq>
34189bf0:	4603      	mov	r3, r0
34189bf2:	4618      	mov	r0, r3
34189bf4:	f7ff fb2f 	bl	34189256 <RCCEx_GetPCLK5Freq>
34189bf8:	60f8      	str	r0, [r7, #12]
      break;
34189bfa:	e05a      	b.n	34189cb2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189bfc:	2007      	movs	r0, #7
34189bfe:	f7ff fdd3 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
34189c02:	60f8      	str	r0, [r7, #12]
      break;
34189c04:	e055      	b.n	34189cb2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
34189c06:	f7fc f937 	bl	34185e78 <LL_RCC_IC17_IsEnabled>
34189c0a:	4603      	mov	r3, r0
34189c0c:	2b00      	cmp	r3, #0
34189c0e:	d04d      	beq.n	34189cac <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
34189c10:	f7fc f954 	bl	34185ebc <LL_RCC_IC17_GetDivider>
34189c14:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
34189c16:	f7fc f943 	bl	34185ea0 <LL_RCC_IC17_GetSource>
34189c1a:	4603      	mov	r3, r0
34189c1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189c20:	d029      	beq.n	34189c76 <RCCEx_GetDCMIPPCLKFreq+0xca>
34189c22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189c26:	d82f      	bhi.n	34189c88 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34189c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189c2c:	d01a      	beq.n	34189c64 <RCCEx_GetDCMIPPCLKFreq+0xb8>
34189c2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189c32:	d829      	bhi.n	34189c88 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34189c34:	2b00      	cmp	r3, #0
34189c36:	d003      	beq.n	34189c40 <RCCEx_GetDCMIPPCLKFreq+0x94>
34189c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189c3c:	d009      	beq.n	34189c52 <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
34189c3e:	e023      	b.n	34189c88 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189c40:	f7ff f9ae 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
34189c44:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34189c46:	68fa      	ldr	r2, [r7, #12]
34189c48:	68bb      	ldr	r3, [r7, #8]
34189c4a:	fbb2 f3f3 	udiv	r3, r2, r3
34189c4e:	60fb      	str	r3, [r7, #12]
            break;
34189c50:	e01b      	b.n	34189c8a <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189c52:	f7ff f9eb 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34189c56:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34189c58:	68fa      	ldr	r2, [r7, #12]
34189c5a:	68bb      	ldr	r3, [r7, #8]
34189c5c:	fbb2 f3f3 	udiv	r3, r2, r3
34189c60:	60fb      	str	r3, [r7, #12]
            break;
34189c62:	e012      	b.n	34189c8a <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189c64:	f7ff fa28 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
34189c68:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34189c6a:	68fa      	ldr	r2, [r7, #12]
34189c6c:	68bb      	ldr	r3, [r7, #8]
34189c6e:	fbb2 f3f3 	udiv	r3, r2, r3
34189c72:	60fb      	str	r3, [r7, #12]
            break;
34189c74:	e009      	b.n	34189c8a <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189c76:	f7ff fa65 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
34189c7a:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34189c7c:	68fa      	ldr	r2, [r7, #12]
34189c7e:	68bb      	ldr	r3, [r7, #8]
34189c80:	fbb2 f3f3 	udiv	r3, r2, r3
34189c84:	60fb      	str	r3, [r7, #12]
            break;
34189c86:	e000      	b.n	34189c8a <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
34189c88:	bf00      	nop
      break;
34189c8a:	e00f      	b.n	34189cac <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34189c8c:	f7fa ff10 	bl	34184ab0 <LL_RCC_HSI_IsReady>
34189c90:	4603      	mov	r3, r0
34189c92:	2b00      	cmp	r3, #0
34189c94:	d00c      	beq.n	34189cb0 <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189c96:	f7fa ff1d 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
34189c9a:	4603      	mov	r3, r0
34189c9c:	09db      	lsrs	r3, r3, #7
34189c9e:	4a07      	ldr	r2, [pc, #28]	@ (34189cbc <RCCEx_GetDCMIPPCLKFreq+0x110>)
34189ca0:	fa22 f303 	lsr.w	r3, r2, r3
34189ca4:	60fb      	str	r3, [r7, #12]
      break;
34189ca6:	e003      	b.n	34189cb0 <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
34189ca8:	bf00      	nop
34189caa:	e002      	b.n	34189cb2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
34189cac:	bf00      	nop
34189cae:	e000      	b.n	34189cb2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
34189cb0:	bf00      	nop
  }

  return dcmipp_frequency;
34189cb2:	68fb      	ldr	r3, [r7, #12]
}
34189cb4:	4618      	mov	r0, r3
34189cb6:	3710      	adds	r7, #16
34189cb8:	46bd      	mov	sp, r7
34189cba:	bd80      	pop	{r7, pc}
34189cbc:	03d09000 	.word	0x03d09000

34189cc0 <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
34189cc0:	b580      	push	{r7, lr}
34189cc2:	b084      	sub	sp, #16
34189cc4:	af00      	add	r7, sp, #0
34189cc6:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
34189cc8:	2300      	movs	r3, #0
34189cca:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34189ccc:	6878      	ldr	r0, [r7, #4]
34189cce:	f7fb f9ed 	bl	341850ac <LL_RCC_GetETHClockSource>
34189cd2:	4603      	mov	r3, r0
34189cd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34189cd8:	d05e      	beq.n	34189d98 <RCCEx_GetETH1CLKFreq+0xd8>
34189cda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34189cde:	d863      	bhi.n	34189da8 <RCCEx_GetETH1CLKFreq+0xe8>
34189ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34189ce4:	d015      	beq.n	34189d12 <RCCEx_GetETH1CLKFreq+0x52>
34189ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34189cea:	d85d      	bhi.n	34189da8 <RCCEx_GetETH1CLKFreq+0xe8>
34189cec:	2b00      	cmp	r3, #0
34189cee:	d003      	beq.n	34189cf8 <RCCEx_GetETH1CLKFreq+0x38>
34189cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34189cf4:	d008      	beq.n	34189d08 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189cf6:	e057      	b.n	34189da8 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189cf8:	f7fa fac6 	bl	34184288 <HAL_RCC_GetSysClockFreq>
34189cfc:	4603      	mov	r3, r0
34189cfe:	4618      	mov	r0, r3
34189d00:	f7ff fa66 	bl	341891d0 <RCCEx_GetHCLKFreq>
34189d04:	60f8      	str	r0, [r7, #12]
      break;
34189d06:	e054      	b.n	34189db2 <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189d08:	2007      	movs	r0, #7
34189d0a:	f7ff fd4d 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
34189d0e:	60f8      	str	r0, [r7, #12]
      break;
34189d10:	e04f      	b.n	34189db2 <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
34189d12:	f7fb ff71 	bl	34185bf8 <LL_RCC_IC12_IsEnabled>
34189d16:	4603      	mov	r3, r0
34189d18:	2b00      	cmp	r3, #0
34189d1a:	d047      	beq.n	34189dac <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
34189d1c:	f7fb ff8e 	bl	34185c3c <LL_RCC_IC12_GetDivider>
34189d20:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
34189d22:	f7fb ff7d 	bl	34185c20 <LL_RCC_IC12_GetSource>
34189d26:	4603      	mov	r3, r0
34189d28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189d2c:	d029      	beq.n	34189d82 <RCCEx_GetETH1CLKFreq+0xc2>
34189d2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189d32:	d82f      	bhi.n	34189d94 <RCCEx_GetETH1CLKFreq+0xd4>
34189d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189d38:	d01a      	beq.n	34189d70 <RCCEx_GetETH1CLKFreq+0xb0>
34189d3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189d3e:	d829      	bhi.n	34189d94 <RCCEx_GetETH1CLKFreq+0xd4>
34189d40:	2b00      	cmp	r3, #0
34189d42:	d003      	beq.n	34189d4c <RCCEx_GetETH1CLKFreq+0x8c>
34189d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189d48:	d009      	beq.n	34189d5e <RCCEx_GetETH1CLKFreq+0x9e>
            break;
34189d4a:	e023      	b.n	34189d94 <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189d4c:	f7ff f928 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
34189d50:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34189d52:	68fa      	ldr	r2, [r7, #12]
34189d54:	68bb      	ldr	r3, [r7, #8]
34189d56:	fbb2 f3f3 	udiv	r3, r2, r3
34189d5a:	60fb      	str	r3, [r7, #12]
            break;
34189d5c:	e01b      	b.n	34189d96 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189d5e:	f7ff f965 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34189d62:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34189d64:	68fa      	ldr	r2, [r7, #12]
34189d66:	68bb      	ldr	r3, [r7, #8]
34189d68:	fbb2 f3f3 	udiv	r3, r2, r3
34189d6c:	60fb      	str	r3, [r7, #12]
            break;
34189d6e:	e012      	b.n	34189d96 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189d70:	f7ff f9a2 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
34189d74:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34189d76:	68fa      	ldr	r2, [r7, #12]
34189d78:	68bb      	ldr	r3, [r7, #8]
34189d7a:	fbb2 f3f3 	udiv	r3, r2, r3
34189d7e:	60fb      	str	r3, [r7, #12]
            break;
34189d80:	e009      	b.n	34189d96 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189d82:	f7ff f9df 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
34189d86:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34189d88:	68fa      	ldr	r2, [r7, #12]
34189d8a:	68bb      	ldr	r3, [r7, #8]
34189d8c:	fbb2 f3f3 	udiv	r3, r2, r3
34189d90:	60fb      	str	r3, [r7, #12]
            break;
34189d92:	e000      	b.n	34189d96 <RCCEx_GetETH1CLKFreq+0xd6>
            break;
34189d94:	bf00      	nop
      break;
34189d96:	e009      	b.n	34189dac <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
34189d98:	f7fa fe78 	bl	34184a8c <LL_RCC_HSE_IsReady>
34189d9c:	4603      	mov	r3, r0
34189d9e:	2b00      	cmp	r3, #0
34189da0:	d006      	beq.n	34189db0 <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
34189da2:	4b06      	ldr	r3, [pc, #24]	@ (34189dbc <RCCEx_GetETH1CLKFreq+0xfc>)
34189da4:	60fb      	str	r3, [r7, #12]
      break;
34189da6:	e003      	b.n	34189db0 <RCCEx_GetETH1CLKFreq+0xf0>
      break;
34189da8:	bf00      	nop
34189daa:	e002      	b.n	34189db2 <RCCEx_GetETH1CLKFreq+0xf2>
      break;
34189dac:	bf00      	nop
34189dae:	e000      	b.n	34189db2 <RCCEx_GetETH1CLKFreq+0xf2>
      break;
34189db0:	bf00      	nop
  }

  return eth1_frequency;
34189db2:	68fb      	ldr	r3, [r7, #12]
}
34189db4:	4618      	mov	r0, r3
34189db6:	3710      	adds	r7, #16
34189db8:	46bd      	mov	sp, r7
34189dba:	bd80      	pop	{r7, pc}
34189dbc:	02dc6c00 	.word	0x02dc6c00

34189dc0 <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
34189dc0:	b580      	push	{r7, lr}
34189dc2:	b084      	sub	sp, #16
34189dc4:	af00      	add	r7, sp, #0
34189dc6:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
34189dc8:	2300      	movs	r3, #0
34189dca:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34189dcc:	6878      	ldr	r0, [r7, #4]
34189dce:	f7fb f97f 	bl	341850d0 <LL_RCC_GetETHPTPClockSource>
34189dd2:	4603      	mov	r3, r0
34189dd4:	2b03      	cmp	r3, #3
34189dd6:	d863      	bhi.n	34189ea0 <RCCEx_GetETH1PTPCLKFreq+0xe0>
34189dd8:	a201      	add	r2, pc, #4	@ (adr r2, 34189de0 <RCCEx_GetETH1PTPCLKFreq+0x20>)
34189dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34189dde:	bf00      	nop
34189de0:	34189df1 	.word	0x34189df1
34189de4:	34189e01 	.word	0x34189e01
34189de8:	34189e0b 	.word	0x34189e0b
34189dec:	34189e91 	.word	0x34189e91
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189df0:	f7fa fa4a 	bl	34184288 <HAL_RCC_GetSysClockFreq>
34189df4:	4603      	mov	r3, r0
34189df6:	4618      	mov	r0, r3
34189df8:	f7ff f9ea 	bl	341891d0 <RCCEx_GetHCLKFreq>
34189dfc:	60f8      	str	r0, [r7, #12]
      break;
34189dfe:	e054      	b.n	34189eaa <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189e00:	2007      	movs	r0, #7
34189e02:	f7ff fcd1 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
34189e06:	60f8      	str	r0, [r7, #12]
      break;
34189e08:	e04f      	b.n	34189eaa <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
34189e0a:	f7fb ff35 	bl	34185c78 <LL_RCC_IC13_IsEnabled>
34189e0e:	4603      	mov	r3, r0
34189e10:	2b00      	cmp	r3, #0
34189e12:	d047      	beq.n	34189ea4 <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
34189e14:	f7fb ff52 	bl	34185cbc <LL_RCC_IC13_GetDivider>
34189e18:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
34189e1a:	f7fb ff41 	bl	34185ca0 <LL_RCC_IC13_GetSource>
34189e1e:	4603      	mov	r3, r0
34189e20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189e24:	d029      	beq.n	34189e7a <RCCEx_GetETH1PTPCLKFreq+0xba>
34189e26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189e2a:	d82f      	bhi.n	34189e8c <RCCEx_GetETH1PTPCLKFreq+0xcc>
34189e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189e30:	d01a      	beq.n	34189e68 <RCCEx_GetETH1PTPCLKFreq+0xa8>
34189e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189e36:	d829      	bhi.n	34189e8c <RCCEx_GetETH1PTPCLKFreq+0xcc>
34189e38:	2b00      	cmp	r3, #0
34189e3a:	d003      	beq.n	34189e44 <RCCEx_GetETH1PTPCLKFreq+0x84>
34189e3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189e40:	d009      	beq.n	34189e56 <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189e42:	e023      	b.n	34189e8c <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189e44:	f7ff f8ac 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
34189e48:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34189e4a:	68fa      	ldr	r2, [r7, #12]
34189e4c:	68bb      	ldr	r3, [r7, #8]
34189e4e:	fbb2 f3f3 	udiv	r3, r2, r3
34189e52:	60fb      	str	r3, [r7, #12]
            break;
34189e54:	e01b      	b.n	34189e8e <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189e56:	f7ff f8e9 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34189e5a:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34189e5c:	68fa      	ldr	r2, [r7, #12]
34189e5e:	68bb      	ldr	r3, [r7, #8]
34189e60:	fbb2 f3f3 	udiv	r3, r2, r3
34189e64:	60fb      	str	r3, [r7, #12]
            break;
34189e66:	e012      	b.n	34189e8e <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189e68:	f7ff f926 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
34189e6c:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34189e6e:	68fa      	ldr	r2, [r7, #12]
34189e70:	68bb      	ldr	r3, [r7, #8]
34189e72:	fbb2 f3f3 	udiv	r3, r2, r3
34189e76:	60fb      	str	r3, [r7, #12]
            break;
34189e78:	e009      	b.n	34189e8e <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189e7a:	f7ff f963 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
34189e7e:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34189e80:	68fa      	ldr	r2, [r7, #12]
34189e82:	68bb      	ldr	r3, [r7, #8]
34189e84:	fbb2 f3f3 	udiv	r3, r2, r3
34189e88:	60fb      	str	r3, [r7, #12]
            break;
34189e8a:	e000      	b.n	34189e8e <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
34189e8c:	bf00      	nop
        }
      }
      break;
34189e8e:	e009      	b.n	34189ea4 <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34189e90:	f7fa fdfc 	bl	34184a8c <LL_RCC_HSE_IsReady>
34189e94:	4603      	mov	r3, r0
34189e96:	2b00      	cmp	r3, #0
34189e98:	d006      	beq.n	34189ea8 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
34189e9a:	4b0a      	ldr	r3, [pc, #40]	@ (34189ec4 <RCCEx_GetETH1PTPCLKFreq+0x104>)
34189e9c:	60fb      	str	r3, [r7, #12]
      }
      break;
34189e9e:	e003      	b.n	34189ea8 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
34189ea0:	bf00      	nop
34189ea2:	e002      	b.n	34189eaa <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34189ea4:	bf00      	nop
34189ea6:	e000      	b.n	34189eaa <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34189ea8:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34189eaa:	f7fa ff4d 	bl	34184d48 <LL_RCC_GetETH1PTPDivider>
34189eae:	4603      	mov	r3, r0
34189eb0:	091b      	lsrs	r3, r3, #4
34189eb2:	3301      	adds	r3, #1
34189eb4:	68fa      	ldr	r2, [r7, #12]
34189eb6:	fbb2 f3f3 	udiv	r3, r2, r3
}
34189eba:	4618      	mov	r0, r3
34189ebc:	3710      	adds	r7, #16
34189ebe:	46bd      	mov	sp, r7
34189ec0:	bd80      	pop	{r7, pc}
34189ec2:	bf00      	nop
34189ec4:	02dc6c00 	.word	0x02dc6c00

34189ec8 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
34189ec8:	b580      	push	{r7, lr}
34189eca:	b084      	sub	sp, #16
34189ecc:	af00      	add	r7, sp, #0
34189ece:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
34189ed0:	2300      	movs	r3, #0
34189ed2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34189ed4:	6878      	ldr	r0, [r7, #4]
34189ed6:	f7fb f90d 	bl	341850f4 <LL_RCC_GetFDCANClockSource>
34189eda:	4603      	mov	r3, r0
34189edc:	2b03      	cmp	r3, #3
34189ede:	d867      	bhi.n	34189fb0 <RCCEx_GetFDCANCLKFreq+0xe8>
34189ee0:	a201      	add	r2, pc, #4	@ (adr r2, 34189ee8 <RCCEx_GetFDCANCLKFreq+0x20>)
34189ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34189ee6:	bf00      	nop
34189ee8:	34189ef9 	.word	0x34189ef9
34189eec:	34189f11 	.word	0x34189f11
34189ef0:	34189f1b 	.word	0x34189f1b
34189ef4:	34189fa1 	.word	0x34189fa1
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189ef8:	f7fa f9c6 	bl	34184288 <HAL_RCC_GetSysClockFreq>
34189efc:	4603      	mov	r3, r0
34189efe:	4618      	mov	r0, r3
34189f00:	f7ff f966 	bl	341891d0 <RCCEx_GetHCLKFreq>
34189f04:	4603      	mov	r3, r0
34189f06:	4618      	mov	r0, r3
34189f08:	f7ff f973 	bl	341891f2 <RCCEx_GetPCLK1Freq>
34189f0c:	60f8      	str	r0, [r7, #12]
      break;
34189f0e:	e054      	b.n	34189fba <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189f10:	2007      	movs	r0, #7
34189f12:	f7ff fc49 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
34189f16:	60f8      	str	r0, [r7, #12]
      break;
34189f18:	e04f      	b.n	34189fba <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
34189f1a:	f7fc f82d 	bl	34185f78 <LL_RCC_IC19_IsEnabled>
34189f1e:	4603      	mov	r3, r0
34189f20:	2b00      	cmp	r3, #0
34189f22:	d047      	beq.n	34189fb4 <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
34189f24:	f7fc f84a 	bl	34185fbc <LL_RCC_IC19_GetDivider>
34189f28:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
34189f2a:	f7fc f839 	bl	34185fa0 <LL_RCC_IC19_GetSource>
34189f2e:	4603      	mov	r3, r0
34189f30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189f34:	d029      	beq.n	34189f8a <RCCEx_GetFDCANCLKFreq+0xc2>
34189f36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189f3a:	d82f      	bhi.n	34189f9c <RCCEx_GetFDCANCLKFreq+0xd4>
34189f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189f40:	d01a      	beq.n	34189f78 <RCCEx_GetFDCANCLKFreq+0xb0>
34189f42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189f46:	d829      	bhi.n	34189f9c <RCCEx_GetFDCANCLKFreq+0xd4>
34189f48:	2b00      	cmp	r3, #0
34189f4a:	d003      	beq.n	34189f54 <RCCEx_GetFDCANCLKFreq+0x8c>
34189f4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189f50:	d009      	beq.n	34189f66 <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189f52:	e023      	b.n	34189f9c <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189f54:	f7ff f824 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
34189f58:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34189f5a:	68fa      	ldr	r2, [r7, #12]
34189f5c:	68bb      	ldr	r3, [r7, #8]
34189f5e:	fbb2 f3f3 	udiv	r3, r2, r3
34189f62:	60fb      	str	r3, [r7, #12]
            break;
34189f64:	e01b      	b.n	34189f9e <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189f66:	f7ff f861 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
34189f6a:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34189f6c:	68fa      	ldr	r2, [r7, #12]
34189f6e:	68bb      	ldr	r3, [r7, #8]
34189f70:	fbb2 f3f3 	udiv	r3, r2, r3
34189f74:	60fb      	str	r3, [r7, #12]
            break;
34189f76:	e012      	b.n	34189f9e <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189f78:	f7ff f89e 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
34189f7c:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34189f7e:	68fa      	ldr	r2, [r7, #12]
34189f80:	68bb      	ldr	r3, [r7, #8]
34189f82:	fbb2 f3f3 	udiv	r3, r2, r3
34189f86:	60fb      	str	r3, [r7, #12]
            break;
34189f88:	e009      	b.n	34189f9e <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189f8a:	f7ff f8db 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
34189f8e:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34189f90:	68fa      	ldr	r2, [r7, #12]
34189f92:	68bb      	ldr	r3, [r7, #8]
34189f94:	fbb2 f3f3 	udiv	r3, r2, r3
34189f98:	60fb      	str	r3, [r7, #12]
            break;
34189f9a:	e000      	b.n	34189f9e <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
34189f9c:	bf00      	nop
        }
      }
      break;
34189f9e:	e009      	b.n	34189fb4 <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34189fa0:	f7fa fd74 	bl	34184a8c <LL_RCC_HSE_IsReady>
34189fa4:	4603      	mov	r3, r0
34189fa6:	2b00      	cmp	r3, #0
34189fa8:	d006      	beq.n	34189fb8 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
34189faa:	4b06      	ldr	r3, [pc, #24]	@ (34189fc4 <RCCEx_GetFDCANCLKFreq+0xfc>)
34189fac:	60fb      	str	r3, [r7, #12]
      }
      break;
34189fae:	e003      	b.n	34189fb8 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
34189fb0:	bf00      	nop
34189fb2:	e002      	b.n	34189fba <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34189fb4:	bf00      	nop
34189fb6:	e000      	b.n	34189fba <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34189fb8:	bf00      	nop
  }

  return fdcan_frequency;
34189fba:	68fb      	ldr	r3, [r7, #12]
}
34189fbc:	4618      	mov	r0, r3
34189fbe:	3710      	adds	r7, #16
34189fc0:	46bd      	mov	sp, r7
34189fc2:	bd80      	pop	{r7, pc}
34189fc4:	02dc6c00 	.word	0x02dc6c00

34189fc8 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
34189fc8:	b580      	push	{r7, lr}
34189fca:	b084      	sub	sp, #16
34189fcc:	af00      	add	r7, sp, #0
34189fce:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34189fd0:	2300      	movs	r3, #0
34189fd2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34189fd4:	6878      	ldr	r0, [r7, #4]
34189fd6:	f7fb f89f 	bl	34185118 <LL_RCC_GetFMCClockSource>
34189fda:	4603      	mov	r3, r0
34189fdc:	2b30      	cmp	r3, #48	@ 0x30
34189fde:	d05d      	beq.n	3418a09c <RCCEx_GetFMCCLKFreq+0xd4>
34189fe0:	2b30      	cmp	r3, #48	@ 0x30
34189fe2:	f200 809e 	bhi.w	3418a122 <RCCEx_GetFMCCLKFreq+0x15a>
34189fe6:	2b20      	cmp	r3, #32
34189fe8:	d014      	beq.n	3418a014 <RCCEx_GetFMCCLKFreq+0x4c>
34189fea:	2b20      	cmp	r3, #32
34189fec:	f200 8099 	bhi.w	3418a122 <RCCEx_GetFMCCLKFreq+0x15a>
34189ff0:	2b00      	cmp	r3, #0
34189ff2:	d002      	beq.n	34189ffa <RCCEx_GetFMCCLKFreq+0x32>
34189ff4:	2b10      	cmp	r3, #16
34189ff6:	d008      	beq.n	3418a00a <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189ff8:	e093      	b.n	3418a122 <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189ffa:	f7fa f945 	bl	34184288 <HAL_RCC_GetSysClockFreq>
34189ffe:	4603      	mov	r3, r0
3418a000:	4618      	mov	r0, r3
3418a002:	f7ff f8e5 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418a006:	60f8      	str	r0, [r7, #12]
      break;
3418a008:	e090      	b.n	3418a12c <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a00a:	2007      	movs	r0, #7
3418a00c:	f7ff fbcc 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418a010:	60f8      	str	r0, [r7, #12]
      break;
3418a012:	e08b      	b.n	3418a12c <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
3418a014:	f7fb fc30 	bl	34185878 <LL_RCC_IC3_IsEnabled>
3418a018:	4603      	mov	r3, r0
3418a01a:	2b00      	cmp	r3, #0
3418a01c:	f000 8083 	beq.w	3418a126 <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
3418a020:	f7fb fc4c 	bl	341858bc <LL_RCC_IC3_GetDivider>
3418a024:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
3418a026:	f7fb fc3b 	bl	341858a0 <LL_RCC_IC3_GetSource>
3418a02a:	4603      	mov	r3, r0
3418a02c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a030:	d029      	beq.n	3418a086 <RCCEx_GetFMCCLKFreq+0xbe>
3418a032:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a036:	d82f      	bhi.n	3418a098 <RCCEx_GetFMCCLKFreq+0xd0>
3418a038:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a03c:	d01a      	beq.n	3418a074 <RCCEx_GetFMCCLKFreq+0xac>
3418a03e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a042:	d829      	bhi.n	3418a098 <RCCEx_GetFMCCLKFreq+0xd0>
3418a044:	2b00      	cmp	r3, #0
3418a046:	d003      	beq.n	3418a050 <RCCEx_GetFMCCLKFreq+0x88>
3418a048:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a04c:	d009      	beq.n	3418a062 <RCCEx_GetFMCCLKFreq+0x9a>
            break;
3418a04e:	e023      	b.n	3418a098 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a050:	f7fe ffa6 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a054:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418a056:	68fa      	ldr	r2, [r7, #12]
3418a058:	68bb      	ldr	r3, [r7, #8]
3418a05a:	fbb2 f3f3 	udiv	r3, r2, r3
3418a05e:	60fb      	str	r3, [r7, #12]
            break;
3418a060:	e01b      	b.n	3418a09a <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a062:	f7fe ffe3 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418a066:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418a068:	68fa      	ldr	r2, [r7, #12]
3418a06a:	68bb      	ldr	r3, [r7, #8]
3418a06c:	fbb2 f3f3 	udiv	r3, r2, r3
3418a070:	60fb      	str	r3, [r7, #12]
            break;
3418a072:	e012      	b.n	3418a09a <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a074:	f7ff f820 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418a078:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418a07a:	68fa      	ldr	r2, [r7, #12]
3418a07c:	68bb      	ldr	r3, [r7, #8]
3418a07e:	fbb2 f3f3 	udiv	r3, r2, r3
3418a082:	60fb      	str	r3, [r7, #12]
            break;
3418a084:	e009      	b.n	3418a09a <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a086:	f7ff f85d 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418a08a:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418a08c:	68fa      	ldr	r2, [r7, #12]
3418a08e:	68bb      	ldr	r3, [r7, #8]
3418a090:	fbb2 f3f3 	udiv	r3, r2, r3
3418a094:	60fb      	str	r3, [r7, #12]
            break;
3418a096:	e000      	b.n	3418a09a <RCCEx_GetFMCCLKFreq+0xd2>
            break;
3418a098:	bf00      	nop
      break;
3418a09a:	e044      	b.n	3418a126 <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418a09c:	f7fb fc2c 	bl	341858f8 <LL_RCC_IC4_IsEnabled>
3418a0a0:	4603      	mov	r3, r0
3418a0a2:	2b00      	cmp	r3, #0
3418a0a4:	d041      	beq.n	3418a12a <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
3418a0a6:	f7fb fc49 	bl	3418593c <LL_RCC_IC4_GetDivider>
3418a0aa:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418a0ac:	f7fb fc38 	bl	34185920 <LL_RCC_IC4_GetSource>
3418a0b0:	4603      	mov	r3, r0
3418a0b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a0b6:	d029      	beq.n	3418a10c <RCCEx_GetFMCCLKFreq+0x144>
3418a0b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a0bc:	d82f      	bhi.n	3418a11e <RCCEx_GetFMCCLKFreq+0x156>
3418a0be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a0c2:	d01a      	beq.n	3418a0fa <RCCEx_GetFMCCLKFreq+0x132>
3418a0c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a0c8:	d829      	bhi.n	3418a11e <RCCEx_GetFMCCLKFreq+0x156>
3418a0ca:	2b00      	cmp	r3, #0
3418a0cc:	d003      	beq.n	3418a0d6 <RCCEx_GetFMCCLKFreq+0x10e>
3418a0ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a0d2:	d009      	beq.n	3418a0e8 <RCCEx_GetFMCCLKFreq+0x120>
            break;
3418a0d4:	e023      	b.n	3418a11e <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a0d6:	f7fe ff63 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a0da:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418a0dc:	68fa      	ldr	r2, [r7, #12]
3418a0de:	68bb      	ldr	r3, [r7, #8]
3418a0e0:	fbb2 f3f3 	udiv	r3, r2, r3
3418a0e4:	60fb      	str	r3, [r7, #12]
            break;
3418a0e6:	e01b      	b.n	3418a120 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a0e8:	f7fe ffa0 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418a0ec:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418a0ee:	68fa      	ldr	r2, [r7, #12]
3418a0f0:	68bb      	ldr	r3, [r7, #8]
3418a0f2:	fbb2 f3f3 	udiv	r3, r2, r3
3418a0f6:	60fb      	str	r3, [r7, #12]
            break;
3418a0f8:	e012      	b.n	3418a120 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a0fa:	f7fe ffdd 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418a0fe:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418a100:	68fa      	ldr	r2, [r7, #12]
3418a102:	68bb      	ldr	r3, [r7, #8]
3418a104:	fbb2 f3f3 	udiv	r3, r2, r3
3418a108:	60fb      	str	r3, [r7, #12]
            break;
3418a10a:	e009      	b.n	3418a120 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a10c:	f7ff f81a 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418a110:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418a112:	68fa      	ldr	r2, [r7, #12]
3418a114:	68bb      	ldr	r3, [r7, #8]
3418a116:	fbb2 f3f3 	udiv	r3, r2, r3
3418a11a:	60fb      	str	r3, [r7, #12]
            break;
3418a11c:	e000      	b.n	3418a120 <RCCEx_GetFMCCLKFreq+0x158>
            break;
3418a11e:	bf00      	nop
      break;
3418a120:	e003      	b.n	3418a12a <RCCEx_GetFMCCLKFreq+0x162>
      break;
3418a122:	bf00      	nop
3418a124:	e002      	b.n	3418a12c <RCCEx_GetFMCCLKFreq+0x164>
      break;
3418a126:	bf00      	nop
3418a128:	e000      	b.n	3418a12c <RCCEx_GetFMCCLKFreq+0x164>
      break;
3418a12a:	bf00      	nop
  }

  return fmc_frequency;
3418a12c:	68fb      	ldr	r3, [r7, #12]
}
3418a12e:	4618      	mov	r0, r3
3418a130:	3710      	adds	r7, #16
3418a132:	46bd      	mov	sp, r7
3418a134:	bd80      	pop	{r7, pc}
	...

3418a138 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
3418a138:	b580      	push	{r7, lr}
3418a13a:	b084      	sub	sp, #16
3418a13c:	af00      	add	r7, sp, #0
3418a13e:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a140:	2300      	movs	r3, #0
3418a142:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3418a144:	6878      	ldr	r0, [r7, #4]
3418a146:	f7fa fff9 	bl	3418513c <LL_RCC_GetI2CClockSource>
3418a14a:	4603      	mov	r3, r0
3418a14c:	4aa2      	ldr	r2, [pc, #648]	@ (3418a3d8 <RCCEx_GetI2CCLKFreq+0x2a0>)
3418a14e:	4293      	cmp	r3, r2
3418a150:	f000 8172 	beq.w	3418a438 <RCCEx_GetI2CCLKFreq+0x300>
3418a154:	4aa0      	ldr	r2, [pc, #640]	@ (3418a3d8 <RCCEx_GetI2CCLKFreq+0x2a0>)
3418a156:	4293      	cmp	r3, r2
3418a158:	f200 8184 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a15c:	4a9f      	ldr	r2, [pc, #636]	@ (3418a3dc <RCCEx_GetI2CCLKFreq+0x2a4>)
3418a15e:	4293      	cmp	r3, r2
3418a160:	f000 816a 	beq.w	3418a438 <RCCEx_GetI2CCLKFreq+0x300>
3418a164:	4a9d      	ldr	r2, [pc, #628]	@ (3418a3dc <RCCEx_GetI2CCLKFreq+0x2a4>)
3418a166:	4293      	cmp	r3, r2
3418a168:	f200 817c 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a16c:	4a9c      	ldr	r2, [pc, #624]	@ (3418a3e0 <RCCEx_GetI2CCLKFreq+0x2a8>)
3418a16e:	4293      	cmp	r3, r2
3418a170:	f000 8162 	beq.w	3418a438 <RCCEx_GetI2CCLKFreq+0x300>
3418a174:	4a9a      	ldr	r2, [pc, #616]	@ (3418a3e0 <RCCEx_GetI2CCLKFreq+0x2a8>)
3418a176:	4293      	cmp	r3, r2
3418a178:	f200 8174 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a17c:	4a99      	ldr	r2, [pc, #612]	@ (3418a3e4 <RCCEx_GetI2CCLKFreq+0x2ac>)
3418a17e:	4293      	cmp	r3, r2
3418a180:	f000 815a 	beq.w	3418a438 <RCCEx_GetI2CCLKFreq+0x300>
3418a184:	4a97      	ldr	r2, [pc, #604]	@ (3418a3e4 <RCCEx_GetI2CCLKFreq+0x2ac>)
3418a186:	4293      	cmp	r3, r2
3418a188:	f200 816c 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a18c:	4a96      	ldr	r2, [pc, #600]	@ (3418a3e8 <RCCEx_GetI2CCLKFreq+0x2b0>)
3418a18e:	4293      	cmp	r3, r2
3418a190:	f000 8160 	beq.w	3418a454 <RCCEx_GetI2CCLKFreq+0x31c>
3418a194:	4a94      	ldr	r2, [pc, #592]	@ (3418a3e8 <RCCEx_GetI2CCLKFreq+0x2b0>)
3418a196:	4293      	cmp	r3, r2
3418a198:	f200 8164 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a19c:	4a93      	ldr	r2, [pc, #588]	@ (3418a3ec <RCCEx_GetI2CCLKFreq+0x2b4>)
3418a19e:	4293      	cmp	r3, r2
3418a1a0:	f000 8158 	beq.w	3418a454 <RCCEx_GetI2CCLKFreq+0x31c>
3418a1a4:	4a91      	ldr	r2, [pc, #580]	@ (3418a3ec <RCCEx_GetI2CCLKFreq+0x2b4>)
3418a1a6:	4293      	cmp	r3, r2
3418a1a8:	f200 815c 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a1ac:	4a90      	ldr	r2, [pc, #576]	@ (3418a3f0 <RCCEx_GetI2CCLKFreq+0x2b8>)
3418a1ae:	4293      	cmp	r3, r2
3418a1b0:	f000 8150 	beq.w	3418a454 <RCCEx_GetI2CCLKFreq+0x31c>
3418a1b4:	4a8e      	ldr	r2, [pc, #568]	@ (3418a3f0 <RCCEx_GetI2CCLKFreq+0x2b8>)
3418a1b6:	4293      	cmp	r3, r2
3418a1b8:	f200 8154 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a1bc:	4a8d      	ldr	r2, [pc, #564]	@ (3418a3f4 <RCCEx_GetI2CCLKFreq+0x2bc>)
3418a1be:	4293      	cmp	r3, r2
3418a1c0:	f000 8148 	beq.w	3418a454 <RCCEx_GetI2CCLKFreq+0x31c>
3418a1c4:	4a8b      	ldr	r2, [pc, #556]	@ (3418a3f4 <RCCEx_GetI2CCLKFreq+0x2bc>)
3418a1c6:	4293      	cmp	r3, r2
3418a1c8:	f200 814c 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a1cc:	4a8a      	ldr	r2, [pc, #552]	@ (3418a3f8 <RCCEx_GetI2CCLKFreq+0x2c0>)
3418a1ce:	4293      	cmp	r3, r2
3418a1d0:	f000 80be 	beq.w	3418a350 <RCCEx_GetI2CCLKFreq+0x218>
3418a1d4:	4a88      	ldr	r2, [pc, #544]	@ (3418a3f8 <RCCEx_GetI2CCLKFreq+0x2c0>)
3418a1d6:	4293      	cmp	r3, r2
3418a1d8:	f200 8144 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a1dc:	4a87      	ldr	r2, [pc, #540]	@ (3418a3fc <RCCEx_GetI2CCLKFreq+0x2c4>)
3418a1de:	4293      	cmp	r3, r2
3418a1e0:	f000 80b6 	beq.w	3418a350 <RCCEx_GetI2CCLKFreq+0x218>
3418a1e4:	4a85      	ldr	r2, [pc, #532]	@ (3418a3fc <RCCEx_GetI2CCLKFreq+0x2c4>)
3418a1e6:	4293      	cmp	r3, r2
3418a1e8:	f200 813c 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a1ec:	4a84      	ldr	r2, [pc, #528]	@ (3418a400 <RCCEx_GetI2CCLKFreq+0x2c8>)
3418a1ee:	4293      	cmp	r3, r2
3418a1f0:	f000 80ae 	beq.w	3418a350 <RCCEx_GetI2CCLKFreq+0x218>
3418a1f4:	4a82      	ldr	r2, [pc, #520]	@ (3418a400 <RCCEx_GetI2CCLKFreq+0x2c8>)
3418a1f6:	4293      	cmp	r3, r2
3418a1f8:	f200 8134 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a1fc:	4a81      	ldr	r2, [pc, #516]	@ (3418a404 <RCCEx_GetI2CCLKFreq+0x2cc>)
3418a1fe:	4293      	cmp	r3, r2
3418a200:	f000 80a6 	beq.w	3418a350 <RCCEx_GetI2CCLKFreq+0x218>
3418a204:	4a7f      	ldr	r2, [pc, #508]	@ (3418a404 <RCCEx_GetI2CCLKFreq+0x2cc>)
3418a206:	4293      	cmp	r3, r2
3418a208:	f200 812c 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a20c:	4a7e      	ldr	r2, [pc, #504]	@ (3418a408 <RCCEx_GetI2CCLKFreq+0x2d0>)
3418a20e:	4293      	cmp	r3, r2
3418a210:	d05a      	beq.n	3418a2c8 <RCCEx_GetI2CCLKFreq+0x190>
3418a212:	4a7d      	ldr	r2, [pc, #500]	@ (3418a408 <RCCEx_GetI2CCLKFreq+0x2d0>)
3418a214:	4293      	cmp	r3, r2
3418a216:	f200 8125 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a21a:	4a7c      	ldr	r2, [pc, #496]	@ (3418a40c <RCCEx_GetI2CCLKFreq+0x2d4>)
3418a21c:	4293      	cmp	r3, r2
3418a21e:	d053      	beq.n	3418a2c8 <RCCEx_GetI2CCLKFreq+0x190>
3418a220:	4a7a      	ldr	r2, [pc, #488]	@ (3418a40c <RCCEx_GetI2CCLKFreq+0x2d4>)
3418a222:	4293      	cmp	r3, r2
3418a224:	f200 811e 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a228:	4a79      	ldr	r2, [pc, #484]	@ (3418a410 <RCCEx_GetI2CCLKFreq+0x2d8>)
3418a22a:	4293      	cmp	r3, r2
3418a22c:	d04c      	beq.n	3418a2c8 <RCCEx_GetI2CCLKFreq+0x190>
3418a22e:	4a78      	ldr	r2, [pc, #480]	@ (3418a410 <RCCEx_GetI2CCLKFreq+0x2d8>)
3418a230:	4293      	cmp	r3, r2
3418a232:	f200 8117 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a236:	4a77      	ldr	r2, [pc, #476]	@ (3418a414 <RCCEx_GetI2CCLKFreq+0x2dc>)
3418a238:	4293      	cmp	r3, r2
3418a23a:	d045      	beq.n	3418a2c8 <RCCEx_GetI2CCLKFreq+0x190>
3418a23c:	4a75      	ldr	r2, [pc, #468]	@ (3418a414 <RCCEx_GetI2CCLKFreq+0x2dc>)
3418a23e:	4293      	cmp	r3, r2
3418a240:	f200 8110 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a244:	4a74      	ldr	r2, [pc, #464]	@ (3418a418 <RCCEx_GetI2CCLKFreq+0x2e0>)
3418a246:	4293      	cmp	r3, r2
3418a248:	d039      	beq.n	3418a2be <RCCEx_GetI2CCLKFreq+0x186>
3418a24a:	4a73      	ldr	r2, [pc, #460]	@ (3418a418 <RCCEx_GetI2CCLKFreq+0x2e0>)
3418a24c:	4293      	cmp	r3, r2
3418a24e:	f200 8109 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a252:	4a72      	ldr	r2, [pc, #456]	@ (3418a41c <RCCEx_GetI2CCLKFreq+0x2e4>)
3418a254:	4293      	cmp	r3, r2
3418a256:	d032      	beq.n	3418a2be <RCCEx_GetI2CCLKFreq+0x186>
3418a258:	4a70      	ldr	r2, [pc, #448]	@ (3418a41c <RCCEx_GetI2CCLKFreq+0x2e4>)
3418a25a:	4293      	cmp	r3, r2
3418a25c:	f200 8102 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a260:	4a6f      	ldr	r2, [pc, #444]	@ (3418a420 <RCCEx_GetI2CCLKFreq+0x2e8>)
3418a262:	4293      	cmp	r3, r2
3418a264:	d02b      	beq.n	3418a2be <RCCEx_GetI2CCLKFreq+0x186>
3418a266:	4a6e      	ldr	r2, [pc, #440]	@ (3418a420 <RCCEx_GetI2CCLKFreq+0x2e8>)
3418a268:	4293      	cmp	r3, r2
3418a26a:	f200 80fb 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a26e:	4a6d      	ldr	r2, [pc, #436]	@ (3418a424 <RCCEx_GetI2CCLKFreq+0x2ec>)
3418a270:	4293      	cmp	r3, r2
3418a272:	d024      	beq.n	3418a2be <RCCEx_GetI2CCLKFreq+0x186>
3418a274:	4a6b      	ldr	r2, [pc, #428]	@ (3418a424 <RCCEx_GetI2CCLKFreq+0x2ec>)
3418a276:	4293      	cmp	r3, r2
3418a278:	f200 80f4 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a27c:	4a6a      	ldr	r2, [pc, #424]	@ (3418a428 <RCCEx_GetI2CCLKFreq+0x2f0>)
3418a27e:	4293      	cmp	r3, r2
3418a280:	d011      	beq.n	3418a2a6 <RCCEx_GetI2CCLKFreq+0x16e>
3418a282:	4a69      	ldr	r2, [pc, #420]	@ (3418a428 <RCCEx_GetI2CCLKFreq+0x2f0>)
3418a284:	4293      	cmp	r3, r2
3418a286:	f200 80ed 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a28a:	4a68      	ldr	r2, [pc, #416]	@ (3418a42c <RCCEx_GetI2CCLKFreq+0x2f4>)
3418a28c:	4293      	cmp	r3, r2
3418a28e:	d00a      	beq.n	3418a2a6 <RCCEx_GetI2CCLKFreq+0x16e>
3418a290:	4a66      	ldr	r2, [pc, #408]	@ (3418a42c <RCCEx_GetI2CCLKFreq+0x2f4>)
3418a292:	4293      	cmp	r3, r2
3418a294:	f200 80e6 	bhi.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
3418a298:	4a65      	ldr	r2, [pc, #404]	@ (3418a430 <RCCEx_GetI2CCLKFreq+0x2f8>)
3418a29a:	4293      	cmp	r3, r2
3418a29c:	d003      	beq.n	3418a2a6 <RCCEx_GetI2CCLKFreq+0x16e>
3418a29e:	4a65      	ldr	r2, [pc, #404]	@ (3418a434 <RCCEx_GetI2CCLKFreq+0x2fc>)
3418a2a0:	4293      	cmp	r3, r2
3418a2a2:	f040 80df 	bne.w	3418a464 <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a2a6:	f7f9 ffef 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418a2aa:	4603      	mov	r3, r0
3418a2ac:	4618      	mov	r0, r3
3418a2ae:	f7fe ff8f 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418a2b2:	4603      	mov	r3, r0
3418a2b4:	4618      	mov	r0, r3
3418a2b6:	f7fe ff9c 	bl	341891f2 <RCCEx_GetPCLK1Freq>
3418a2ba:	60f8      	str	r0, [r7, #12]
      break;
3418a2bc:	e0db      	b.n	3418a476 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a2be:	2007      	movs	r0, #7
3418a2c0:	f7ff fa72 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418a2c4:	60f8      	str	r0, [r7, #12]
      break;
3418a2c6:	e0d6      	b.n	3418a476 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
3418a2c8:	f7fb fc56 	bl	34185b78 <LL_RCC_IC10_IsEnabled>
3418a2cc:	4603      	mov	r3, r0
3418a2ce:	2b00      	cmp	r3, #0
3418a2d0:	f000 80ca 	beq.w	3418a468 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
3418a2d4:	f7fb fc72 	bl	34185bbc <LL_RCC_IC10_GetDivider>
3418a2d8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
3418a2da:	f7fb fc61 	bl	34185ba0 <LL_RCC_IC10_GetSource>
3418a2de:	4603      	mov	r3, r0
3418a2e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a2e4:	d029      	beq.n	3418a33a <RCCEx_GetI2CCLKFreq+0x202>
3418a2e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a2ea:	d82f      	bhi.n	3418a34c <RCCEx_GetI2CCLKFreq+0x214>
3418a2ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a2f0:	d01a      	beq.n	3418a328 <RCCEx_GetI2CCLKFreq+0x1f0>
3418a2f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a2f6:	d829      	bhi.n	3418a34c <RCCEx_GetI2CCLKFreq+0x214>
3418a2f8:	2b00      	cmp	r3, #0
3418a2fa:	d003      	beq.n	3418a304 <RCCEx_GetI2CCLKFreq+0x1cc>
3418a2fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a300:	d009      	beq.n	3418a316 <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a302:	e023      	b.n	3418a34c <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a304:	f7fe fe4c 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a308:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418a30a:	68fa      	ldr	r2, [r7, #12]
3418a30c:	68bb      	ldr	r3, [r7, #8]
3418a30e:	fbb2 f3f3 	udiv	r3, r2, r3
3418a312:	60fb      	str	r3, [r7, #12]
            break;
3418a314:	e01b      	b.n	3418a34e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a316:	f7fe fe89 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418a31a:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418a31c:	68fa      	ldr	r2, [r7, #12]
3418a31e:	68bb      	ldr	r3, [r7, #8]
3418a320:	fbb2 f3f3 	udiv	r3, r2, r3
3418a324:	60fb      	str	r3, [r7, #12]
            break;
3418a326:	e012      	b.n	3418a34e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a328:	f7fe fec6 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418a32c:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418a32e:	68fa      	ldr	r2, [r7, #12]
3418a330:	68bb      	ldr	r3, [r7, #8]
3418a332:	fbb2 f3f3 	udiv	r3, r2, r3
3418a336:	60fb      	str	r3, [r7, #12]
            break;
3418a338:	e009      	b.n	3418a34e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a33a:	f7fe ff03 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418a33e:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418a340:	68fa      	ldr	r2, [r7, #12]
3418a342:	68bb      	ldr	r3, [r7, #8]
3418a344:	fbb2 f3f3 	udiv	r3, r2, r3
3418a348:	60fb      	str	r3, [r7, #12]
            break;
3418a34a:	e000      	b.n	3418a34e <RCCEx_GetI2CCLKFreq+0x216>
            break;
3418a34c:	bf00      	nop
        }
      }
      break;
3418a34e:	e08b      	b.n	3418a468 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418a350:	f7fb fd12 	bl	34185d78 <LL_RCC_IC15_IsEnabled>
3418a354:	4603      	mov	r3, r0
3418a356:	2b00      	cmp	r3, #0
3418a358:	f000 8088 	beq.w	3418a46c <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
3418a35c:	f7fb fd2e 	bl	34185dbc <LL_RCC_IC15_GetDivider>
3418a360:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418a362:	f7fb fd1d 	bl	34185da0 <LL_RCC_IC15_GetSource>
3418a366:	4603      	mov	r3, r0
3418a368:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a36c:	d029      	beq.n	3418a3c2 <RCCEx_GetI2CCLKFreq+0x28a>
3418a36e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a372:	d82f      	bhi.n	3418a3d4 <RCCEx_GetI2CCLKFreq+0x29c>
3418a374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a378:	d01a      	beq.n	3418a3b0 <RCCEx_GetI2CCLKFreq+0x278>
3418a37a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a37e:	d829      	bhi.n	3418a3d4 <RCCEx_GetI2CCLKFreq+0x29c>
3418a380:	2b00      	cmp	r3, #0
3418a382:	d003      	beq.n	3418a38c <RCCEx_GetI2CCLKFreq+0x254>
3418a384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a388:	d009      	beq.n	3418a39e <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a38a:	e023      	b.n	3418a3d4 <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a38c:	f7fe fe08 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a390:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418a392:	68fa      	ldr	r2, [r7, #12]
3418a394:	68bb      	ldr	r3, [r7, #8]
3418a396:	fbb2 f3f3 	udiv	r3, r2, r3
3418a39a:	60fb      	str	r3, [r7, #12]
            break;
3418a39c:	e01b      	b.n	3418a3d6 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a39e:	f7fe fe45 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418a3a2:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418a3a4:	68fa      	ldr	r2, [r7, #12]
3418a3a6:	68bb      	ldr	r3, [r7, #8]
3418a3a8:	fbb2 f3f3 	udiv	r3, r2, r3
3418a3ac:	60fb      	str	r3, [r7, #12]
            break;
3418a3ae:	e012      	b.n	3418a3d6 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a3b0:	f7fe fe82 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418a3b4:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418a3b6:	68fa      	ldr	r2, [r7, #12]
3418a3b8:	68bb      	ldr	r3, [r7, #8]
3418a3ba:	fbb2 f3f3 	udiv	r3, r2, r3
3418a3be:	60fb      	str	r3, [r7, #12]
            break;
3418a3c0:	e009      	b.n	3418a3d6 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a3c2:	f7fe febf 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418a3c6:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418a3c8:	68fa      	ldr	r2, [r7, #12]
3418a3ca:	68bb      	ldr	r3, [r7, #8]
3418a3cc:	fbb2 f3f3 	udiv	r3, r2, r3
3418a3d0:	60fb      	str	r3, [r7, #12]
            break;
3418a3d2:	e000      	b.n	3418a3d6 <RCCEx_GetI2CCLKFreq+0x29e>
            break;
3418a3d4:	bf00      	nop
        }
      }
      break;
3418a3d6:	e049      	b.n	3418a46c <RCCEx_GetI2CCLKFreq+0x334>
3418a3d8:	07050c0c 	.word	0x07050c0c
3418a3dc:	0705080c 	.word	0x0705080c
3418a3e0:	0705040c 	.word	0x0705040c
3418a3e4:	0705000c 	.word	0x0705000c
3418a3e8:	07040c0c 	.word	0x07040c0c
3418a3ec:	0704080c 	.word	0x0704080c
3418a3f0:	0704040c 	.word	0x0704040c
3418a3f4:	0704000c 	.word	0x0704000c
3418a3f8:	07030c0c 	.word	0x07030c0c
3418a3fc:	0703080c 	.word	0x0703080c
3418a400:	0703040c 	.word	0x0703040c
3418a404:	0703000c 	.word	0x0703000c
3418a408:	07020c0c 	.word	0x07020c0c
3418a40c:	0702080c 	.word	0x0702080c
3418a410:	0702040c 	.word	0x0702040c
3418a414:	0702000c 	.word	0x0702000c
3418a418:	07010c0c 	.word	0x07010c0c
3418a41c:	0701080c 	.word	0x0701080c
3418a420:	0701040c 	.word	0x0701040c
3418a424:	0701000c 	.word	0x0701000c
3418a428:	07000c0c 	.word	0x07000c0c
3418a42c:	0700080c 	.word	0x0700080c
3418a430:	0700000c 	.word	0x0700000c
3418a434:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418a438:	f7fa fb3a 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418a43c:	4603      	mov	r3, r0
3418a43e:	2b00      	cmp	r3, #0
3418a440:	d016      	beq.n	3418a470 <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418a442:	f7fa fb47 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
3418a446:	4603      	mov	r3, r0
3418a448:	09db      	lsrs	r3, r3, #7
3418a44a:	4a0d      	ldr	r2, [pc, #52]	@ (3418a480 <RCCEx_GetI2CCLKFreq+0x348>)
3418a44c:	fa22 f303 	lsr.w	r3, r2, r3
3418a450:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a452:	e00d      	b.n	3418a470 <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418a454:	f7fa fb4c 	bl	34184af0 <LL_RCC_MSI_IsReady>
3418a458:	4603      	mov	r3, r0
3418a45a:	2b00      	cmp	r3, #0
3418a45c:	d00a      	beq.n	3418a474 <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
3418a45e:	4b09      	ldr	r3, [pc, #36]	@ (3418a484 <RCCEx_GetI2CCLKFreq+0x34c>)
3418a460:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a462:	e007      	b.n	3418a474 <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
3418a464:	bf00      	nop
3418a466:	e006      	b.n	3418a476 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418a468:	bf00      	nop
3418a46a:	e004      	b.n	3418a476 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418a46c:	bf00      	nop
3418a46e:	e002      	b.n	3418a476 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418a470:	bf00      	nop
3418a472:	e000      	b.n	3418a476 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418a474:	bf00      	nop
  }

  return i2c_frequency;
3418a476:	68fb      	ldr	r3, [r7, #12]
}
3418a478:	4618      	mov	r0, r3
3418a47a:	3710      	adds	r7, #16
3418a47c:	46bd      	mov	sp, r7
3418a47e:	bd80      	pop	{r7, pc}
3418a480:	03d09000 	.word	0x03d09000
3418a484:	003d0900 	.word	0x003d0900

3418a488 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
3418a488:	b580      	push	{r7, lr}
3418a48a:	b084      	sub	sp, #16
3418a48c:	af00      	add	r7, sp, #0
3418a48e:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a490:	2300      	movs	r3, #0
3418a492:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3418a494:	6878      	ldr	r0, [r7, #4]
3418a496:	f7fa fe5d 	bl	34185154 <LL_RCC_GetI3CClockSource>
3418a49a:	4603      	mov	r3, r0
3418a49c:	4a86      	ldr	r2, [pc, #536]	@ (3418a6b8 <RCCEx_GetI3CCLKFreq+0x230>)
3418a49e:	4293      	cmp	r3, r2
3418a4a0:	f000 80e6 	beq.w	3418a670 <RCCEx_GetI3CCLKFreq+0x1e8>
3418a4a4:	4a84      	ldr	r2, [pc, #528]	@ (3418a6b8 <RCCEx_GetI3CCLKFreq+0x230>)
3418a4a6:	4293      	cmp	r3, r2
3418a4a8:	f200 80f8 	bhi.w	3418a69c <RCCEx_GetI3CCLKFreq+0x214>
3418a4ac:	4a83      	ldr	r2, [pc, #524]	@ (3418a6bc <RCCEx_GetI3CCLKFreq+0x234>)
3418a4ae:	4293      	cmp	r3, r2
3418a4b0:	f000 80de 	beq.w	3418a670 <RCCEx_GetI3CCLKFreq+0x1e8>
3418a4b4:	4a81      	ldr	r2, [pc, #516]	@ (3418a6bc <RCCEx_GetI3CCLKFreq+0x234>)
3418a4b6:	4293      	cmp	r3, r2
3418a4b8:	f200 80f0 	bhi.w	3418a69c <RCCEx_GetI3CCLKFreq+0x214>
3418a4bc:	4a80      	ldr	r2, [pc, #512]	@ (3418a6c0 <RCCEx_GetI3CCLKFreq+0x238>)
3418a4be:	4293      	cmp	r3, r2
3418a4c0:	f000 80e4 	beq.w	3418a68c <RCCEx_GetI3CCLKFreq+0x204>
3418a4c4:	4a7e      	ldr	r2, [pc, #504]	@ (3418a6c0 <RCCEx_GetI3CCLKFreq+0x238>)
3418a4c6:	4293      	cmp	r3, r2
3418a4c8:	f200 80e8 	bhi.w	3418a69c <RCCEx_GetI3CCLKFreq+0x214>
3418a4cc:	4a7d      	ldr	r2, [pc, #500]	@ (3418a6c4 <RCCEx_GetI3CCLKFreq+0x23c>)
3418a4ce:	4293      	cmp	r3, r2
3418a4d0:	f000 80dc 	beq.w	3418a68c <RCCEx_GetI3CCLKFreq+0x204>
3418a4d4:	4a7b      	ldr	r2, [pc, #492]	@ (3418a6c4 <RCCEx_GetI3CCLKFreq+0x23c>)
3418a4d6:	4293      	cmp	r3, r2
3418a4d8:	f200 80e0 	bhi.w	3418a69c <RCCEx_GetI3CCLKFreq+0x214>
3418a4dc:	4a7a      	ldr	r2, [pc, #488]	@ (3418a6c8 <RCCEx_GetI3CCLKFreq+0x240>)
3418a4de:	4293      	cmp	r3, r2
3418a4e0:	f000 8083 	beq.w	3418a5ea <RCCEx_GetI3CCLKFreq+0x162>
3418a4e4:	4a78      	ldr	r2, [pc, #480]	@ (3418a6c8 <RCCEx_GetI3CCLKFreq+0x240>)
3418a4e6:	4293      	cmp	r3, r2
3418a4e8:	f200 80d8 	bhi.w	3418a69c <RCCEx_GetI3CCLKFreq+0x214>
3418a4ec:	4a77      	ldr	r2, [pc, #476]	@ (3418a6cc <RCCEx_GetI3CCLKFreq+0x244>)
3418a4ee:	4293      	cmp	r3, r2
3418a4f0:	d07b      	beq.n	3418a5ea <RCCEx_GetI3CCLKFreq+0x162>
3418a4f2:	4a76      	ldr	r2, [pc, #472]	@ (3418a6cc <RCCEx_GetI3CCLKFreq+0x244>)
3418a4f4:	4293      	cmp	r3, r2
3418a4f6:	f200 80d1 	bhi.w	3418a69c <RCCEx_GetI3CCLKFreq+0x214>
3418a4fa:	4a75      	ldr	r2, [pc, #468]	@ (3418a6d0 <RCCEx_GetI3CCLKFreq+0x248>)
3418a4fc:	4293      	cmp	r3, r2
3418a4fe:	d030      	beq.n	3418a562 <RCCEx_GetI3CCLKFreq+0xda>
3418a500:	4a73      	ldr	r2, [pc, #460]	@ (3418a6d0 <RCCEx_GetI3CCLKFreq+0x248>)
3418a502:	4293      	cmp	r3, r2
3418a504:	f200 80ca 	bhi.w	3418a69c <RCCEx_GetI3CCLKFreq+0x214>
3418a508:	4a72      	ldr	r2, [pc, #456]	@ (3418a6d4 <RCCEx_GetI3CCLKFreq+0x24c>)
3418a50a:	4293      	cmp	r3, r2
3418a50c:	d029      	beq.n	3418a562 <RCCEx_GetI3CCLKFreq+0xda>
3418a50e:	4a71      	ldr	r2, [pc, #452]	@ (3418a6d4 <RCCEx_GetI3CCLKFreq+0x24c>)
3418a510:	4293      	cmp	r3, r2
3418a512:	f200 80c3 	bhi.w	3418a69c <RCCEx_GetI3CCLKFreq+0x214>
3418a516:	4a70      	ldr	r2, [pc, #448]	@ (3418a6d8 <RCCEx_GetI3CCLKFreq+0x250>)
3418a518:	4293      	cmp	r3, r2
3418a51a:	d01d      	beq.n	3418a558 <RCCEx_GetI3CCLKFreq+0xd0>
3418a51c:	4a6e      	ldr	r2, [pc, #440]	@ (3418a6d8 <RCCEx_GetI3CCLKFreq+0x250>)
3418a51e:	4293      	cmp	r3, r2
3418a520:	f200 80bc 	bhi.w	3418a69c <RCCEx_GetI3CCLKFreq+0x214>
3418a524:	4a6d      	ldr	r2, [pc, #436]	@ (3418a6dc <RCCEx_GetI3CCLKFreq+0x254>)
3418a526:	4293      	cmp	r3, r2
3418a528:	d016      	beq.n	3418a558 <RCCEx_GetI3CCLKFreq+0xd0>
3418a52a:	4a6c      	ldr	r2, [pc, #432]	@ (3418a6dc <RCCEx_GetI3CCLKFreq+0x254>)
3418a52c:	4293      	cmp	r3, r2
3418a52e:	f200 80b5 	bhi.w	3418a69c <RCCEx_GetI3CCLKFreq+0x214>
3418a532:	4a6b      	ldr	r2, [pc, #428]	@ (3418a6e0 <RCCEx_GetI3CCLKFreq+0x258>)
3418a534:	4293      	cmp	r3, r2
3418a536:	d003      	beq.n	3418a540 <RCCEx_GetI3CCLKFreq+0xb8>
3418a538:	4a6a      	ldr	r2, [pc, #424]	@ (3418a6e4 <RCCEx_GetI3CCLKFreq+0x25c>)
3418a53a:	4293      	cmp	r3, r2
3418a53c:	f040 80ae 	bne.w	3418a69c <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a540:	f7f9 fea2 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418a544:	4603      	mov	r3, r0
3418a546:	4618      	mov	r0, r3
3418a548:	f7fe fe42 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418a54c:	4603      	mov	r3, r0
3418a54e:	4618      	mov	r0, r3
3418a550:	f7fe fe4f 	bl	341891f2 <RCCEx_GetPCLK1Freq>
3418a554:	60f8      	str	r0, [r7, #12]
      break;
3418a556:	e0aa      	b.n	3418a6ae <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a558:	2007      	movs	r0, #7
3418a55a:	f7ff f925 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418a55e:	60f8      	str	r0, [r7, #12]
      break;
3418a560:	e0a5      	b.n	3418a6ae <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
3418a562:	f7fb fb09 	bl	34185b78 <LL_RCC_IC10_IsEnabled>
3418a566:	4603      	mov	r3, r0
3418a568:	2b00      	cmp	r3, #0
3418a56a:	f000 8099 	beq.w	3418a6a0 <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
3418a56e:	f7fb fb25 	bl	34185bbc <LL_RCC_IC10_GetDivider>
3418a572:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
3418a574:	f7fb fb14 	bl	34185ba0 <LL_RCC_IC10_GetSource>
3418a578:	4603      	mov	r3, r0
3418a57a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a57e:	d029      	beq.n	3418a5d4 <RCCEx_GetI3CCLKFreq+0x14c>
3418a580:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a584:	d82f      	bhi.n	3418a5e6 <RCCEx_GetI3CCLKFreq+0x15e>
3418a586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a58a:	d01a      	beq.n	3418a5c2 <RCCEx_GetI3CCLKFreq+0x13a>
3418a58c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a590:	d829      	bhi.n	3418a5e6 <RCCEx_GetI3CCLKFreq+0x15e>
3418a592:	2b00      	cmp	r3, #0
3418a594:	d003      	beq.n	3418a59e <RCCEx_GetI3CCLKFreq+0x116>
3418a596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a59a:	d009      	beq.n	3418a5b0 <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a59c:	e023      	b.n	3418a5e6 <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a59e:	f7fe fcff 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a5a2:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418a5a4:	68fa      	ldr	r2, [r7, #12]
3418a5a6:	68bb      	ldr	r3, [r7, #8]
3418a5a8:	fbb2 f3f3 	udiv	r3, r2, r3
3418a5ac:	60fb      	str	r3, [r7, #12]
            break;
3418a5ae:	e01b      	b.n	3418a5e8 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a5b0:	f7fe fd3c 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418a5b4:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418a5b6:	68fa      	ldr	r2, [r7, #12]
3418a5b8:	68bb      	ldr	r3, [r7, #8]
3418a5ba:	fbb2 f3f3 	udiv	r3, r2, r3
3418a5be:	60fb      	str	r3, [r7, #12]
            break;
3418a5c0:	e012      	b.n	3418a5e8 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a5c2:	f7fe fd79 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418a5c6:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418a5c8:	68fa      	ldr	r2, [r7, #12]
3418a5ca:	68bb      	ldr	r3, [r7, #8]
3418a5cc:	fbb2 f3f3 	udiv	r3, r2, r3
3418a5d0:	60fb      	str	r3, [r7, #12]
            break;
3418a5d2:	e009      	b.n	3418a5e8 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a5d4:	f7fe fdb6 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418a5d8:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418a5da:	68fa      	ldr	r2, [r7, #12]
3418a5dc:	68bb      	ldr	r3, [r7, #8]
3418a5de:	fbb2 f3f3 	udiv	r3, r2, r3
3418a5e2:	60fb      	str	r3, [r7, #12]
            break;
3418a5e4:	e000      	b.n	3418a5e8 <RCCEx_GetI3CCLKFreq+0x160>
            break;
3418a5e6:	bf00      	nop
        }
      }
      break;
3418a5e8:	e05a      	b.n	3418a6a0 <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418a5ea:	f7fb fbc5 	bl	34185d78 <LL_RCC_IC15_IsEnabled>
3418a5ee:	4603      	mov	r3, r0
3418a5f0:	2b00      	cmp	r3, #0
3418a5f2:	d057      	beq.n	3418a6a4 <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
3418a5f4:	f7fb fbe2 	bl	34185dbc <LL_RCC_IC15_GetDivider>
3418a5f8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418a5fa:	f7fb fbd1 	bl	34185da0 <LL_RCC_IC15_GetSource>
3418a5fe:	4603      	mov	r3, r0
3418a600:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a604:	d029      	beq.n	3418a65a <RCCEx_GetI3CCLKFreq+0x1d2>
3418a606:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a60a:	d82f      	bhi.n	3418a66c <RCCEx_GetI3CCLKFreq+0x1e4>
3418a60c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a610:	d01a      	beq.n	3418a648 <RCCEx_GetI3CCLKFreq+0x1c0>
3418a612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a616:	d829      	bhi.n	3418a66c <RCCEx_GetI3CCLKFreq+0x1e4>
3418a618:	2b00      	cmp	r3, #0
3418a61a:	d003      	beq.n	3418a624 <RCCEx_GetI3CCLKFreq+0x19c>
3418a61c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a620:	d009      	beq.n	3418a636 <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a622:	e023      	b.n	3418a66c <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a624:	f7fe fcbc 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a628:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418a62a:	68fa      	ldr	r2, [r7, #12]
3418a62c:	68bb      	ldr	r3, [r7, #8]
3418a62e:	fbb2 f3f3 	udiv	r3, r2, r3
3418a632:	60fb      	str	r3, [r7, #12]
            break;
3418a634:	e01b      	b.n	3418a66e <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a636:	f7fe fcf9 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418a63a:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418a63c:	68fa      	ldr	r2, [r7, #12]
3418a63e:	68bb      	ldr	r3, [r7, #8]
3418a640:	fbb2 f3f3 	udiv	r3, r2, r3
3418a644:	60fb      	str	r3, [r7, #12]
            break;
3418a646:	e012      	b.n	3418a66e <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a648:	f7fe fd36 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418a64c:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418a64e:	68fa      	ldr	r2, [r7, #12]
3418a650:	68bb      	ldr	r3, [r7, #8]
3418a652:	fbb2 f3f3 	udiv	r3, r2, r3
3418a656:	60fb      	str	r3, [r7, #12]
            break;
3418a658:	e009      	b.n	3418a66e <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a65a:	f7fe fd73 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418a65e:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418a660:	68fa      	ldr	r2, [r7, #12]
3418a662:	68bb      	ldr	r3, [r7, #8]
3418a664:	fbb2 f3f3 	udiv	r3, r2, r3
3418a668:	60fb      	str	r3, [r7, #12]
            break;
3418a66a:	e000      	b.n	3418a66e <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
3418a66c:	bf00      	nop
        }
      }
      break;
3418a66e:	e019      	b.n	3418a6a4 <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418a670:	f7fa fa1e 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418a674:	4603      	mov	r3, r0
3418a676:	2b00      	cmp	r3, #0
3418a678:	d016      	beq.n	3418a6a8 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418a67a:	f7fa fa2b 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
3418a67e:	4603      	mov	r3, r0
3418a680:	09db      	lsrs	r3, r3, #7
3418a682:	4a19      	ldr	r2, [pc, #100]	@ (3418a6e8 <RCCEx_GetI3CCLKFreq+0x260>)
3418a684:	fa22 f303 	lsr.w	r3, r2, r3
3418a688:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a68a:	e00d      	b.n	3418a6a8 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418a68c:	f7fa fa30 	bl	34184af0 <LL_RCC_MSI_IsReady>
3418a690:	4603      	mov	r3, r0
3418a692:	2b00      	cmp	r3, #0
3418a694:	d00a      	beq.n	3418a6ac <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
3418a696:	4b15      	ldr	r3, [pc, #84]	@ (3418a6ec <RCCEx_GetI3CCLKFreq+0x264>)
3418a698:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a69a:	e007      	b.n	3418a6ac <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
3418a69c:	bf00      	nop
3418a69e:	e006      	b.n	3418a6ae <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418a6a0:	bf00      	nop
3418a6a2:	e004      	b.n	3418a6ae <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418a6a4:	bf00      	nop
3418a6a6:	e002      	b.n	3418a6ae <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418a6a8:	bf00      	nop
3418a6aa:	e000      	b.n	3418a6ae <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418a6ac:	bf00      	nop
  }

  return i3c_frequency;
3418a6ae:	68fb      	ldr	r3, [r7, #12]
}
3418a6b0:	4618      	mov	r0, r3
3418a6b2:	3710      	adds	r7, #16
3418a6b4:	46bd      	mov	sp, r7
3418a6b6:	bd80      	pop	{r7, pc}
3418a6b8:	0705140c 	.word	0x0705140c
3418a6bc:	0705100c 	.word	0x0705100c
3418a6c0:	0704140c 	.word	0x0704140c
3418a6c4:	0704100c 	.word	0x0704100c
3418a6c8:	0703140c 	.word	0x0703140c
3418a6cc:	0703100c 	.word	0x0703100c
3418a6d0:	0702140c 	.word	0x0702140c
3418a6d4:	0702100c 	.word	0x0702100c
3418a6d8:	0701140c 	.word	0x0701140c
3418a6dc:	0701100c 	.word	0x0701100c
3418a6e0:	0700100c 	.word	0x0700100c
3418a6e4:	0700140c 	.word	0x0700140c
3418a6e8:	03d09000 	.word	0x03d09000
3418a6ec:	003d0900 	.word	0x003d0900

3418a6f0 <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
3418a6f0:	b590      	push	{r4, r7, lr}
3418a6f2:	b085      	sub	sp, #20
3418a6f4:	af00      	add	r7, sp, #0
3418a6f6:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a6f8:	2300      	movs	r3, #0
3418a6fa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3418a6fc:	6878      	ldr	r0, [r7, #4]
3418a6fe:	f7fa fd35 	bl	3418516c <LL_RCC_GetLPTIMClockSource>
3418a702:	4603      	mov	r3, r0
3418a704:	4aa1      	ldr	r2, [pc, #644]	@ (3418a98c <RCCEx_GetLPTIMCLKFreq+0x29c>)
3418a706:	4293      	cmp	r3, r2
3418a708:	f000 8185 	beq.w	3418aa16 <RCCEx_GetLPTIMCLKFreq+0x326>
3418a70c:	4a9f      	ldr	r2, [pc, #636]	@ (3418a98c <RCCEx_GetLPTIMCLKFreq+0x29c>)
3418a70e:	4293      	cmp	r3, r2
3418a710:	f200 818b 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a714:	4a9e      	ldr	r2, [pc, #632]	@ (3418a990 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
3418a716:	4293      	cmp	r3, r2
3418a718:	f000 817d 	beq.w	3418aa16 <RCCEx_GetLPTIMCLKFreq+0x326>
3418a71c:	4a9c      	ldr	r2, [pc, #624]	@ (3418a990 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
3418a71e:	4293      	cmp	r3, r2
3418a720:	f200 8183 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a724:	4a9b      	ldr	r2, [pc, #620]	@ (3418a994 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
3418a726:	4293      	cmp	r3, r2
3418a728:	f000 8175 	beq.w	3418aa16 <RCCEx_GetLPTIMCLKFreq+0x326>
3418a72c:	4a99      	ldr	r2, [pc, #612]	@ (3418a994 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
3418a72e:	4293      	cmp	r3, r2
3418a730:	f200 817b 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a734:	4a98      	ldr	r2, [pc, #608]	@ (3418a998 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
3418a736:	4293      	cmp	r3, r2
3418a738:	f000 816d 	beq.w	3418aa16 <RCCEx_GetLPTIMCLKFreq+0x326>
3418a73c:	4a96      	ldr	r2, [pc, #600]	@ (3418a998 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
3418a73e:	4293      	cmp	r3, r2
3418a740:	f200 8173 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a744:	4a95      	ldr	r2, [pc, #596]	@ (3418a99c <RCCEx_GetLPTIMCLKFreq+0x2ac>)
3418a746:	4293      	cmp	r3, r2
3418a748:	f000 8165 	beq.w	3418aa16 <RCCEx_GetLPTIMCLKFreq+0x326>
3418a74c:	4a93      	ldr	r2, [pc, #588]	@ (3418a99c <RCCEx_GetLPTIMCLKFreq+0x2ac>)
3418a74e:	4293      	cmp	r3, r2
3418a750:	f200 816b 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a754:	4a92      	ldr	r2, [pc, #584]	@ (3418a9a0 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
3418a756:	4293      	cmp	r3, r2
3418a758:	f000 8154 	beq.w	3418aa04 <RCCEx_GetLPTIMCLKFreq+0x314>
3418a75c:	4a90      	ldr	r2, [pc, #576]	@ (3418a9a0 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
3418a75e:	4293      	cmp	r3, r2
3418a760:	f200 8163 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a764:	4a8f      	ldr	r2, [pc, #572]	@ (3418a9a4 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
3418a766:	4293      	cmp	r3, r2
3418a768:	f000 814c 	beq.w	3418aa04 <RCCEx_GetLPTIMCLKFreq+0x314>
3418a76c:	4a8d      	ldr	r2, [pc, #564]	@ (3418a9a4 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
3418a76e:	4293      	cmp	r3, r2
3418a770:	f200 815b 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a774:	4a8c      	ldr	r2, [pc, #560]	@ (3418a9a8 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
3418a776:	4293      	cmp	r3, r2
3418a778:	f000 8144 	beq.w	3418aa04 <RCCEx_GetLPTIMCLKFreq+0x314>
3418a77c:	4a8a      	ldr	r2, [pc, #552]	@ (3418a9a8 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
3418a77e:	4293      	cmp	r3, r2
3418a780:	f200 8153 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a784:	4a89      	ldr	r2, [pc, #548]	@ (3418a9ac <RCCEx_GetLPTIMCLKFreq+0x2bc>)
3418a786:	4293      	cmp	r3, r2
3418a788:	f000 813c 	beq.w	3418aa04 <RCCEx_GetLPTIMCLKFreq+0x314>
3418a78c:	4a87      	ldr	r2, [pc, #540]	@ (3418a9ac <RCCEx_GetLPTIMCLKFreq+0x2bc>)
3418a78e:	4293      	cmp	r3, r2
3418a790:	f200 814b 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a794:	4a86      	ldr	r2, [pc, #536]	@ (3418a9b0 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
3418a796:	4293      	cmp	r3, r2
3418a798:	f000 8134 	beq.w	3418aa04 <RCCEx_GetLPTIMCLKFreq+0x314>
3418a79c:	4a84      	ldr	r2, [pc, #528]	@ (3418a9b0 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
3418a79e:	4293      	cmp	r3, r2
3418a7a0:	f200 8143 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a7a4:	4a83      	ldr	r2, [pc, #524]	@ (3418a9b4 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
3418a7a6:	4293      	cmp	r3, r2
3418a7a8:	f000 80e7 	beq.w	3418a97a <RCCEx_GetLPTIMCLKFreq+0x28a>
3418a7ac:	4a81      	ldr	r2, [pc, #516]	@ (3418a9b4 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
3418a7ae:	4293      	cmp	r3, r2
3418a7b0:	f200 813b 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a7b4:	4a80      	ldr	r2, [pc, #512]	@ (3418a9b8 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
3418a7b6:	4293      	cmp	r3, r2
3418a7b8:	f000 80df 	beq.w	3418a97a <RCCEx_GetLPTIMCLKFreq+0x28a>
3418a7bc:	4a7e      	ldr	r2, [pc, #504]	@ (3418a9b8 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
3418a7be:	4293      	cmp	r3, r2
3418a7c0:	f200 8133 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a7c4:	4a7d      	ldr	r2, [pc, #500]	@ (3418a9bc <RCCEx_GetLPTIMCLKFreq+0x2cc>)
3418a7c6:	4293      	cmp	r3, r2
3418a7c8:	f000 80d7 	beq.w	3418a97a <RCCEx_GetLPTIMCLKFreq+0x28a>
3418a7cc:	4a7b      	ldr	r2, [pc, #492]	@ (3418a9bc <RCCEx_GetLPTIMCLKFreq+0x2cc>)
3418a7ce:	4293      	cmp	r3, r2
3418a7d0:	f200 812b 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a7d4:	4a7a      	ldr	r2, [pc, #488]	@ (3418a9c0 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
3418a7d6:	4293      	cmp	r3, r2
3418a7d8:	f000 80cf 	beq.w	3418a97a <RCCEx_GetLPTIMCLKFreq+0x28a>
3418a7dc:	4a78      	ldr	r2, [pc, #480]	@ (3418a9c0 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
3418a7de:	4293      	cmp	r3, r2
3418a7e0:	f200 8123 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a7e4:	4a77      	ldr	r2, [pc, #476]	@ (3418a9c4 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3418a7e6:	4293      	cmp	r3, r2
3418a7e8:	f000 80c7 	beq.w	3418a97a <RCCEx_GetLPTIMCLKFreq+0x28a>
3418a7ec:	4a75      	ldr	r2, [pc, #468]	@ (3418a9c4 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3418a7ee:	4293      	cmp	r3, r2
3418a7f0:	f200 811b 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a7f4:	4a74      	ldr	r2, [pc, #464]	@ (3418a9c8 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
3418a7f6:	4293      	cmp	r3, r2
3418a7f8:	d07b      	beq.n	3418a8f2 <RCCEx_GetLPTIMCLKFreq+0x202>
3418a7fa:	4a73      	ldr	r2, [pc, #460]	@ (3418a9c8 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
3418a7fc:	4293      	cmp	r3, r2
3418a7fe:	f200 8114 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a802:	4a72      	ldr	r2, [pc, #456]	@ (3418a9cc <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3418a804:	4293      	cmp	r3, r2
3418a806:	d074      	beq.n	3418a8f2 <RCCEx_GetLPTIMCLKFreq+0x202>
3418a808:	4a70      	ldr	r2, [pc, #448]	@ (3418a9cc <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3418a80a:	4293      	cmp	r3, r2
3418a80c:	f200 810d 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a810:	4a6f      	ldr	r2, [pc, #444]	@ (3418a9d0 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3418a812:	4293      	cmp	r3, r2
3418a814:	d06d      	beq.n	3418a8f2 <RCCEx_GetLPTIMCLKFreq+0x202>
3418a816:	4a6e      	ldr	r2, [pc, #440]	@ (3418a9d0 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3418a818:	4293      	cmp	r3, r2
3418a81a:	f200 8106 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a81e:	4a6d      	ldr	r2, [pc, #436]	@ (3418a9d4 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
3418a820:	4293      	cmp	r3, r2
3418a822:	d066      	beq.n	3418a8f2 <RCCEx_GetLPTIMCLKFreq+0x202>
3418a824:	4a6b      	ldr	r2, [pc, #428]	@ (3418a9d4 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
3418a826:	4293      	cmp	r3, r2
3418a828:	f200 80ff 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a82c:	4a6a      	ldr	r2, [pc, #424]	@ (3418a9d8 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3418a82e:	4293      	cmp	r3, r2
3418a830:	d05f      	beq.n	3418a8f2 <RCCEx_GetLPTIMCLKFreq+0x202>
3418a832:	4a69      	ldr	r2, [pc, #420]	@ (3418a9d8 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3418a834:	4293      	cmp	r3, r2
3418a836:	f200 80f8 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a83a:	4a68      	ldr	r2, [pc, #416]	@ (3418a9dc <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3418a83c:	4293      	cmp	r3, r2
3418a83e:	d053      	beq.n	3418a8e8 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418a840:	4a66      	ldr	r2, [pc, #408]	@ (3418a9dc <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3418a842:	4293      	cmp	r3, r2
3418a844:	f200 80f1 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a848:	4a65      	ldr	r2, [pc, #404]	@ (3418a9e0 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
3418a84a:	4293      	cmp	r3, r2
3418a84c:	d04c      	beq.n	3418a8e8 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418a84e:	4a64      	ldr	r2, [pc, #400]	@ (3418a9e0 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
3418a850:	4293      	cmp	r3, r2
3418a852:	f200 80ea 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a856:	4a63      	ldr	r2, [pc, #396]	@ (3418a9e4 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
3418a858:	4293      	cmp	r3, r2
3418a85a:	d045      	beq.n	3418a8e8 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418a85c:	4a61      	ldr	r2, [pc, #388]	@ (3418a9e4 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
3418a85e:	4293      	cmp	r3, r2
3418a860:	f200 80e3 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a864:	4a60      	ldr	r2, [pc, #384]	@ (3418a9e8 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
3418a866:	4293      	cmp	r3, r2
3418a868:	d03e      	beq.n	3418a8e8 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418a86a:	4a5f      	ldr	r2, [pc, #380]	@ (3418a9e8 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
3418a86c:	4293      	cmp	r3, r2
3418a86e:	f200 80dc 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a872:	4a5e      	ldr	r2, [pc, #376]	@ (3418a9ec <RCCEx_GetLPTIMCLKFreq+0x2fc>)
3418a874:	4293      	cmp	r3, r2
3418a876:	d037      	beq.n	3418a8e8 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418a878:	4a5c      	ldr	r2, [pc, #368]	@ (3418a9ec <RCCEx_GetLPTIMCLKFreq+0x2fc>)
3418a87a:	4293      	cmp	r3, r2
3418a87c:	f200 80d5 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a880:	4a5b      	ldr	r2, [pc, #364]	@ (3418a9f0 <RCCEx_GetLPTIMCLKFreq+0x300>)
3418a882:	4293      	cmp	r3, r2
3418a884:	d024      	beq.n	3418a8d0 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418a886:	4a5a      	ldr	r2, [pc, #360]	@ (3418a9f0 <RCCEx_GetLPTIMCLKFreq+0x300>)
3418a888:	4293      	cmp	r3, r2
3418a88a:	f200 80ce 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a88e:	4a59      	ldr	r2, [pc, #356]	@ (3418a9f4 <RCCEx_GetLPTIMCLKFreq+0x304>)
3418a890:	4293      	cmp	r3, r2
3418a892:	d01d      	beq.n	3418a8d0 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418a894:	4a57      	ldr	r2, [pc, #348]	@ (3418a9f4 <RCCEx_GetLPTIMCLKFreq+0x304>)
3418a896:	4293      	cmp	r3, r2
3418a898:	f200 80c7 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a89c:	4a56      	ldr	r2, [pc, #344]	@ (3418a9f8 <RCCEx_GetLPTIMCLKFreq+0x308>)
3418a89e:	4293      	cmp	r3, r2
3418a8a0:	d016      	beq.n	3418a8d0 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418a8a2:	4a55      	ldr	r2, [pc, #340]	@ (3418a9f8 <RCCEx_GetLPTIMCLKFreq+0x308>)
3418a8a4:	4293      	cmp	r3, r2
3418a8a6:	f200 80c0 	bhi.w	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418a8aa:	4a54      	ldr	r2, [pc, #336]	@ (3418a9fc <RCCEx_GetLPTIMCLKFreq+0x30c>)
3418a8ac:	4293      	cmp	r3, r2
3418a8ae:	d003      	beq.n	3418a8b8 <RCCEx_GetLPTIMCLKFreq+0x1c8>
3418a8b0:	4a53      	ldr	r2, [pc, #332]	@ (3418aa00 <RCCEx_GetLPTIMCLKFreq+0x310>)
3418a8b2:	4293      	cmp	r3, r2
3418a8b4:	d00c      	beq.n	3418a8d0 <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418a8b6:	e0b8      	b.n	3418aa2a <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a8b8:	f7f9 fce6 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418a8bc:	4603      	mov	r3, r0
3418a8be:	4618      	mov	r0, r3
3418a8c0:	f7fe fc86 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418a8c4:	4603      	mov	r3, r0
3418a8c6:	4618      	mov	r0, r3
3418a8c8:	f7fe fc93 	bl	341891f2 <RCCEx_GetPCLK1Freq>
3418a8cc:	60f8      	str	r0, [r7, #12]
      break;
3418a8ce:	e0b3      	b.n	3418aa38 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a8d0:	f7f9 fcda 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418a8d4:	4603      	mov	r3, r0
3418a8d6:	4618      	mov	r0, r3
3418a8d8:	f7fe fc7a 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418a8dc:	4603      	mov	r3, r0
3418a8de:	4618      	mov	r0, r3
3418a8e0:	f7fe fca8 	bl	34189234 <RCCEx_GetPCLK4Freq>
3418a8e4:	60f8      	str	r0, [r7, #12]
      break;
3418a8e6:	e0a7      	b.n	3418aa38 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a8e8:	2007      	movs	r0, #7
3418a8ea:	f7fe ff5d 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418a8ee:	60f8      	str	r0, [r7, #12]
      break;
3418a8f0:	e0a2      	b.n	3418aa38 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418a8f2:	f7fb fa41 	bl	34185d78 <LL_RCC_IC15_IsEnabled>
3418a8f6:	4603      	mov	r3, r0
3418a8f8:	2b00      	cmp	r3, #0
3418a8fa:	f000 8098 	beq.w	3418aa2e <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
3418a8fe:	f7fb fa5d 	bl	34185dbc <LL_RCC_IC15_GetDivider>
3418a902:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418a904:	f7fb fa4c 	bl	34185da0 <LL_RCC_IC15_GetSource>
3418a908:	4603      	mov	r3, r0
3418a90a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a90e:	d029      	beq.n	3418a964 <RCCEx_GetLPTIMCLKFreq+0x274>
3418a910:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a914:	d82f      	bhi.n	3418a976 <RCCEx_GetLPTIMCLKFreq+0x286>
3418a916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a91a:	d01a      	beq.n	3418a952 <RCCEx_GetLPTIMCLKFreq+0x262>
3418a91c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a920:	d829      	bhi.n	3418a976 <RCCEx_GetLPTIMCLKFreq+0x286>
3418a922:	2b00      	cmp	r3, #0
3418a924:	d003      	beq.n	3418a92e <RCCEx_GetLPTIMCLKFreq+0x23e>
3418a926:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a92a:	d009      	beq.n	3418a940 <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
3418a92c:	e023      	b.n	3418a976 <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a92e:	f7fe fb37 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a932:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418a934:	68fa      	ldr	r2, [r7, #12]
3418a936:	68bb      	ldr	r3, [r7, #8]
3418a938:	fbb2 f3f3 	udiv	r3, r2, r3
3418a93c:	60fb      	str	r3, [r7, #12]
            break;
3418a93e:	e01b      	b.n	3418a978 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a940:	f7fe fb74 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418a944:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418a946:	68fa      	ldr	r2, [r7, #12]
3418a948:	68bb      	ldr	r3, [r7, #8]
3418a94a:	fbb2 f3f3 	udiv	r3, r2, r3
3418a94e:	60fb      	str	r3, [r7, #12]
            break;
3418a950:	e012      	b.n	3418a978 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a952:	f7fe fbb1 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418a956:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418a958:	68fa      	ldr	r2, [r7, #12]
3418a95a:	68bb      	ldr	r3, [r7, #8]
3418a95c:	fbb2 f3f3 	udiv	r3, r2, r3
3418a960:	60fb      	str	r3, [r7, #12]
            break;
3418a962:	e009      	b.n	3418a978 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a964:	f7fe fbee 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418a968:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418a96a:	68fa      	ldr	r2, [r7, #12]
3418a96c:	68bb      	ldr	r3, [r7, #8]
3418a96e:	fbb2 f3f3 	udiv	r3, r2, r3
3418a972:	60fb      	str	r3, [r7, #12]
            break;
3418a974:	e000      	b.n	3418a978 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
3418a976:	bf00      	nop
      break;
3418a978:	e059      	b.n	3418aa2e <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
3418a97a:	f7fa f8d9 	bl	34184b30 <LL_RCC_LSE_IsReady>
3418a97e:	4603      	mov	r3, r0
3418a980:	2b00      	cmp	r3, #0
3418a982:	d056      	beq.n	3418aa32 <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
3418a984:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418a988:	60fb      	str	r3, [r7, #12]
      break;
3418a98a:	e052      	b.n	3418aa32 <RCCEx_GetLPTIMCLKFreq+0x342>
3418a98c:	0705182c 	.word	0x0705182c
3418a990:	0705142c 	.word	0x0705142c
3418a994:	0705102c 	.word	0x0705102c
3418a998:	07050c2c 	.word	0x07050c2c
3418a99c:	0705082c 	.word	0x0705082c
3418a9a0:	0704182c 	.word	0x0704182c
3418a9a4:	0704142c 	.word	0x0704142c
3418a9a8:	0704102c 	.word	0x0704102c
3418a9ac:	07040c2c 	.word	0x07040c2c
3418a9b0:	0704082c 	.word	0x0704082c
3418a9b4:	0703182c 	.word	0x0703182c
3418a9b8:	0703142c 	.word	0x0703142c
3418a9bc:	0703102c 	.word	0x0703102c
3418a9c0:	07030c2c 	.word	0x07030c2c
3418a9c4:	0703082c 	.word	0x0703082c
3418a9c8:	0702182c 	.word	0x0702182c
3418a9cc:	0702142c 	.word	0x0702142c
3418a9d0:	0702102c 	.word	0x0702102c
3418a9d4:	07020c2c 	.word	0x07020c2c
3418a9d8:	0702082c 	.word	0x0702082c
3418a9dc:	0701182c 	.word	0x0701182c
3418a9e0:	0701142c 	.word	0x0701142c
3418a9e4:	0701102c 	.word	0x0701102c
3418a9e8:	07010c2c 	.word	0x07010c2c
3418a9ec:	0701082c 	.word	0x0701082c
3418a9f0:	0700182c 	.word	0x0700182c
3418a9f4:	0700142c 	.word	0x0700142c
3418a9f8:	0700102c 	.word	0x0700102c
3418a9fc:	0700082c 	.word	0x0700082c
3418aa00:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
3418aa04:	f7fa f8a6 	bl	34184b54 <LL_RCC_LSI_IsReady>
3418aa08:	4603      	mov	r3, r0
3418aa0a:	2b00      	cmp	r3, #0
3418aa0c:	d013      	beq.n	3418aa36 <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
3418aa0e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3418aa12:	60fb      	str	r3, [r7, #12]
      break;
3418aa14:	e00f      	b.n	3418aa36 <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
3418aa16:	f7f9 fc37 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418aa1a:	4604      	mov	r4, r0
3418aa1c:	f7fa fcb0 	bl	34185380 <LL_RCC_GetTIMPrescaler>
3418aa20:	4603      	mov	r3, r0
3418aa22:	fa24 f303 	lsr.w	r3, r4, r3
3418aa26:	60fb      	str	r3, [r7, #12]
      break;
3418aa28:	e006      	b.n	3418aa38 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418aa2a:	bf00      	nop
3418aa2c:	e004      	b.n	3418aa38 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418aa2e:	bf00      	nop
3418aa30:	e002      	b.n	3418aa38 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418aa32:	bf00      	nop
3418aa34:	e000      	b.n	3418aa38 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418aa36:	bf00      	nop
  }

  return lptim_frequency;
3418aa38:	68fb      	ldr	r3, [r7, #12]
}
3418aa3a:	4618      	mov	r0, r3
3418aa3c:	3714      	adds	r7, #20
3418aa3e:	46bd      	mov	sp, r7
3418aa40:	bd90      	pop	{r4, r7, pc}
3418aa42:	bf00      	nop

3418aa44 <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
3418aa44:	b580      	push	{r7, lr}
3418aa46:	b084      	sub	sp, #16
3418aa48:	af00      	add	r7, sp, #0
3418aa4a:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418aa4c:	2300      	movs	r3, #0
3418aa4e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
3418aa50:	6878      	ldr	r0, [r7, #4]
3418aa52:	f7fa fb97 	bl	34185184 <LL_RCC_GetLPUARTClockSource>
3418aa56:	4603      	mov	r3, r0
3418aa58:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3418aa5c:	f000 80c0 	beq.w	3418abe0 <RCCEx_GetLPUARTCLKFreq+0x19c>
3418aa60:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3418aa64:	f200 80db 	bhi.w	3418ac1e <RCCEx_GetLPUARTCLKFreq+0x1da>
3418aa68:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3418aa6c:	f000 80c6 	beq.w	3418abfc <RCCEx_GetLPUARTCLKFreq+0x1b8>
3418aa70:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3418aa74:	f200 80d3 	bhi.w	3418ac1e <RCCEx_GetLPUARTCLKFreq+0x1da>
3418aa78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418aa7c:	f000 80c6 	beq.w	3418ac0c <RCCEx_GetLPUARTCLKFreq+0x1c8>
3418aa80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418aa84:	f200 80cb 	bhi.w	3418ac1e <RCCEx_GetLPUARTCLKFreq+0x1da>
3418aa88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418aa8c:	d065      	beq.n	3418ab5a <RCCEx_GetLPUARTCLKFreq+0x116>
3418aa8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418aa92:	f200 80c4 	bhi.w	3418ac1e <RCCEx_GetLPUARTCLKFreq+0x1da>
3418aa96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418aa9a:	d01a      	beq.n	3418aad2 <RCCEx_GetLPUARTCLKFreq+0x8e>
3418aa9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418aaa0:	f200 80bd 	bhi.w	3418ac1e <RCCEx_GetLPUARTCLKFreq+0x1da>
3418aaa4:	2b00      	cmp	r3, #0
3418aaa6:	d003      	beq.n	3418aab0 <RCCEx_GetLPUARTCLKFreq+0x6c>
3418aaa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418aaac:	d00c      	beq.n	3418aac8 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418aaae:	e0b6      	b.n	3418ac1e <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418aab0:	f7f9 fbea 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418aab4:	4603      	mov	r3, r0
3418aab6:	4618      	mov	r0, r3
3418aab8:	f7fe fb8a 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418aabc:	4603      	mov	r3, r0
3418aabe:	4618      	mov	r0, r3
3418aac0:	f7fe fbb8 	bl	34189234 <RCCEx_GetPCLK4Freq>
3418aac4:	60f8      	str	r0, [r7, #12]
      break;
3418aac6:	e0b5      	b.n	3418ac34 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418aac8:	2007      	movs	r0, #7
3418aaca:	f7fe fe6d 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418aace:	60f8      	str	r0, [r7, #12]
      break;
3418aad0:	e0b0      	b.n	3418ac34 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418aad2:	f7fb f811 	bl	34185af8 <LL_RCC_IC9_IsEnabled>
3418aad6:	4603      	mov	r3, r0
3418aad8:	2b00      	cmp	r3, #0
3418aada:	f000 80a2 	beq.w	3418ac22 <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
3418aade:	f7fb f82d 	bl	34185b3c <LL_RCC_IC9_GetDivider>
3418aae2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418aae4:	f7fb f81c 	bl	34185b20 <LL_RCC_IC9_GetSource>
3418aae8:	4603      	mov	r3, r0
3418aaea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aaee:	d029      	beq.n	3418ab44 <RCCEx_GetLPUARTCLKFreq+0x100>
3418aaf0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aaf4:	d82f      	bhi.n	3418ab56 <RCCEx_GetLPUARTCLKFreq+0x112>
3418aaf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aafa:	d01a      	beq.n	3418ab32 <RCCEx_GetLPUARTCLKFreq+0xee>
3418aafc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ab00:	d829      	bhi.n	3418ab56 <RCCEx_GetLPUARTCLKFreq+0x112>
3418ab02:	2b00      	cmp	r3, #0
3418ab04:	d003      	beq.n	3418ab0e <RCCEx_GetLPUARTCLKFreq+0xca>
3418ab06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ab0a:	d009      	beq.n	3418ab20 <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
3418ab0c:	e023      	b.n	3418ab56 <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ab0e:	f7fe fa47 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418ab12:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418ab14:	68fa      	ldr	r2, [r7, #12]
3418ab16:	68bb      	ldr	r3, [r7, #8]
3418ab18:	fbb2 f3f3 	udiv	r3, r2, r3
3418ab1c:	60fb      	str	r3, [r7, #12]
            break;
3418ab1e:	e01b      	b.n	3418ab58 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418ab20:	f7fe fa84 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418ab24:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418ab26:	68fa      	ldr	r2, [r7, #12]
3418ab28:	68bb      	ldr	r3, [r7, #8]
3418ab2a:	fbb2 f3f3 	udiv	r3, r2, r3
3418ab2e:	60fb      	str	r3, [r7, #12]
            break;
3418ab30:	e012      	b.n	3418ab58 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ab32:	f7fe fac1 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418ab36:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418ab38:	68fa      	ldr	r2, [r7, #12]
3418ab3a:	68bb      	ldr	r3, [r7, #8]
3418ab3c:	fbb2 f3f3 	udiv	r3, r2, r3
3418ab40:	60fb      	str	r3, [r7, #12]
            break;
3418ab42:	e009      	b.n	3418ab58 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418ab44:	f7fe fafe 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418ab48:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418ab4a:	68fa      	ldr	r2, [r7, #12]
3418ab4c:	68bb      	ldr	r3, [r7, #8]
3418ab4e:	fbb2 f3f3 	udiv	r3, r2, r3
3418ab52:	60fb      	str	r3, [r7, #12]
            break;
3418ab54:	e000      	b.n	3418ab58 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
3418ab56:	bf00      	nop
      break;
3418ab58:	e063      	b.n	3418ac22 <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418ab5a:	f7fb f8cd 	bl	34185cf8 <LL_RCC_IC14_IsEnabled>
3418ab5e:	4603      	mov	r3, r0
3418ab60:	2b00      	cmp	r3, #0
3418ab62:	d060      	beq.n	3418ac26 <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
3418ab64:	f7fb f8ea 	bl	34185d3c <LL_RCC_IC14_GetDivider>
3418ab68:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418ab6a:	f7fb f8d9 	bl	34185d20 <LL_RCC_IC14_GetSource>
3418ab6e:	4603      	mov	r3, r0
3418ab70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ab74:	d029      	beq.n	3418abca <RCCEx_GetLPUARTCLKFreq+0x186>
3418ab76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ab7a:	d82f      	bhi.n	3418abdc <RCCEx_GetLPUARTCLKFreq+0x198>
3418ab7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ab80:	d01a      	beq.n	3418abb8 <RCCEx_GetLPUARTCLKFreq+0x174>
3418ab82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ab86:	d829      	bhi.n	3418abdc <RCCEx_GetLPUARTCLKFreq+0x198>
3418ab88:	2b00      	cmp	r3, #0
3418ab8a:	d003      	beq.n	3418ab94 <RCCEx_GetLPUARTCLKFreq+0x150>
3418ab8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ab90:	d009      	beq.n	3418aba6 <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
3418ab92:	e023      	b.n	3418abdc <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ab94:	f7fe fa04 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418ab98:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418ab9a:	68fa      	ldr	r2, [r7, #12]
3418ab9c:	68bb      	ldr	r3, [r7, #8]
3418ab9e:	fbb2 f3f3 	udiv	r3, r2, r3
3418aba2:	60fb      	str	r3, [r7, #12]
            break;
3418aba4:	e01b      	b.n	3418abde <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418aba6:	f7fe fa41 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418abaa:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418abac:	68fa      	ldr	r2, [r7, #12]
3418abae:	68bb      	ldr	r3, [r7, #8]
3418abb0:	fbb2 f3f3 	udiv	r3, r2, r3
3418abb4:	60fb      	str	r3, [r7, #12]
            break;
3418abb6:	e012      	b.n	3418abde <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418abb8:	f7fe fa7e 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418abbc:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418abbe:	68fa      	ldr	r2, [r7, #12]
3418abc0:	68bb      	ldr	r3, [r7, #8]
3418abc2:	fbb2 f3f3 	udiv	r3, r2, r3
3418abc6:	60fb      	str	r3, [r7, #12]
            break;
3418abc8:	e009      	b.n	3418abde <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418abca:	f7fe fabb 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418abce:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418abd0:	68fa      	ldr	r2, [r7, #12]
3418abd2:	68bb      	ldr	r3, [r7, #8]
3418abd4:	fbb2 f3f3 	udiv	r3, r2, r3
3418abd8:	60fb      	str	r3, [r7, #12]
            break;
3418abda:	e000      	b.n	3418abde <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
3418abdc:	bf00      	nop
      break;
3418abde:	e022      	b.n	3418ac26 <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
3418abe0:	f7f9 ff66 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418abe4:	4603      	mov	r3, r0
3418abe6:	2b00      	cmp	r3, #0
3418abe8:	d01f      	beq.n	3418ac2a <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418abea:	f7f9 ff73 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
3418abee:	4603      	mov	r3, r0
3418abf0:	09db      	lsrs	r3, r3, #7
3418abf2:	4a13      	ldr	r2, [pc, #76]	@ (3418ac40 <RCCEx_GetLPUARTCLKFreq+0x1fc>)
3418abf4:	fa22 f303 	lsr.w	r3, r2, r3
3418abf8:	60fb      	str	r3, [r7, #12]
      break;
3418abfa:	e016      	b.n	3418ac2a <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
3418abfc:	f7f9 ff78 	bl	34184af0 <LL_RCC_MSI_IsReady>
3418ac00:	4603      	mov	r3, r0
3418ac02:	2b00      	cmp	r3, #0
3418ac04:	d013      	beq.n	3418ac2e <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
3418ac06:	4b0f      	ldr	r3, [pc, #60]	@ (3418ac44 <RCCEx_GetLPUARTCLKFreq+0x200>)
3418ac08:	60fb      	str	r3, [r7, #12]
      break;
3418ac0a:	e010      	b.n	3418ac2e <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
3418ac0c:	f7f9 ff90 	bl	34184b30 <LL_RCC_LSE_IsReady>
3418ac10:	4603      	mov	r3, r0
3418ac12:	2b00      	cmp	r3, #0
3418ac14:	d00d      	beq.n	3418ac32 <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
3418ac16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418ac1a:	60fb      	str	r3, [r7, #12]
      break;
3418ac1c:	e009      	b.n	3418ac32 <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
3418ac1e:	bf00      	nop
3418ac20:	e008      	b.n	3418ac34 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418ac22:	bf00      	nop
3418ac24:	e006      	b.n	3418ac34 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418ac26:	bf00      	nop
3418ac28:	e004      	b.n	3418ac34 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418ac2a:	bf00      	nop
3418ac2c:	e002      	b.n	3418ac34 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418ac2e:	bf00      	nop
3418ac30:	e000      	b.n	3418ac34 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418ac32:	bf00      	nop
  }

  return lpuart_frequency;
3418ac34:	68fb      	ldr	r3, [r7, #12]
}
3418ac36:	4618      	mov	r0, r3
3418ac38:	3710      	adds	r7, #16
3418ac3a:	46bd      	mov	sp, r7
3418ac3c:	bd80      	pop	{r7, pc}
3418ac3e:	bf00      	nop
3418ac40:	03d09000 	.word	0x03d09000
3418ac44:	003d0900 	.word	0x003d0900

3418ac48 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
3418ac48:	b580      	push	{r7, lr}
3418ac4a:	b084      	sub	sp, #16
3418ac4c:	af00      	add	r7, sp, #0
3418ac4e:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418ac50:	2300      	movs	r3, #0
3418ac52:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
3418ac54:	6878      	ldr	r0, [r7, #4]
3418ac56:	f7fa faa7 	bl	341851a8 <LL_RCC_GetLTDCClockSource>
3418ac5a:	4603      	mov	r3, r0
3418ac5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3418ac60:	d062      	beq.n	3418ad28 <RCCEx_GetLTDCCLKFreq+0xe0>
3418ac62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3418ac66:	d86d      	bhi.n	3418ad44 <RCCEx_GetLTDCCLKFreq+0xfc>
3418ac68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418ac6c:	d019      	beq.n	3418aca2 <RCCEx_GetLTDCCLKFreq+0x5a>
3418ac6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418ac72:	d867      	bhi.n	3418ad44 <RCCEx_GetLTDCCLKFreq+0xfc>
3418ac74:	2b00      	cmp	r3, #0
3418ac76:	d003      	beq.n	3418ac80 <RCCEx_GetLTDCCLKFreq+0x38>
3418ac78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418ac7c:	d00c      	beq.n	3418ac98 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418ac7e:	e061      	b.n	3418ad44 <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418ac80:	f7f9 fb02 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418ac84:	4603      	mov	r3, r0
3418ac86:	4618      	mov	r0, r3
3418ac88:	f7fe faa2 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418ac8c:	4603      	mov	r3, r0
3418ac8e:	4618      	mov	r0, r3
3418ac90:	f7fe fae1 	bl	34189256 <RCCEx_GetPCLK5Freq>
3418ac94:	60f8      	str	r0, [r7, #12]
      break;
3418ac96:	e05a      	b.n	3418ad4e <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418ac98:	2007      	movs	r0, #7
3418ac9a:	f7fe fd85 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418ac9e:	60f8      	str	r0, [r7, #12]
      break;
3418aca0:	e055      	b.n	3418ad4e <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
3418aca2:	f7fb f8a9 	bl	34185df8 <LL_RCC_IC16_IsEnabled>
3418aca6:	4603      	mov	r3, r0
3418aca8:	2b00      	cmp	r3, #0
3418acaa:	d04d      	beq.n	3418ad48 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
3418acac:	f7fb f8c6 	bl	34185e3c <LL_RCC_IC16_GetDivider>
3418acb0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
3418acb2:	f7fb f8b5 	bl	34185e20 <LL_RCC_IC16_GetSource>
3418acb6:	4603      	mov	r3, r0
3418acb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418acbc:	d029      	beq.n	3418ad12 <RCCEx_GetLTDCCLKFreq+0xca>
3418acbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418acc2:	d82f      	bhi.n	3418ad24 <RCCEx_GetLTDCCLKFreq+0xdc>
3418acc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418acc8:	d01a      	beq.n	3418ad00 <RCCEx_GetLTDCCLKFreq+0xb8>
3418acca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418acce:	d829      	bhi.n	3418ad24 <RCCEx_GetLTDCCLKFreq+0xdc>
3418acd0:	2b00      	cmp	r3, #0
3418acd2:	d003      	beq.n	3418acdc <RCCEx_GetLTDCCLKFreq+0x94>
3418acd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418acd8:	d009      	beq.n	3418acee <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
3418acda:	e023      	b.n	3418ad24 <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418acdc:	f7fe f960 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418ace0:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418ace2:	68fa      	ldr	r2, [r7, #12]
3418ace4:	68bb      	ldr	r3, [r7, #8]
3418ace6:	fbb2 f3f3 	udiv	r3, r2, r3
3418acea:	60fb      	str	r3, [r7, #12]
            break;
3418acec:	e01b      	b.n	3418ad26 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418acee:	f7fe f99d 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418acf2:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418acf4:	68fa      	ldr	r2, [r7, #12]
3418acf6:	68bb      	ldr	r3, [r7, #8]
3418acf8:	fbb2 f3f3 	udiv	r3, r2, r3
3418acfc:	60fb      	str	r3, [r7, #12]
            break;
3418acfe:	e012      	b.n	3418ad26 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ad00:	f7fe f9da 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418ad04:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418ad06:	68fa      	ldr	r2, [r7, #12]
3418ad08:	68bb      	ldr	r3, [r7, #8]
3418ad0a:	fbb2 f3f3 	udiv	r3, r2, r3
3418ad0e:	60fb      	str	r3, [r7, #12]
            break;
3418ad10:	e009      	b.n	3418ad26 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418ad12:	f7fe fa17 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418ad16:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418ad18:	68fa      	ldr	r2, [r7, #12]
3418ad1a:	68bb      	ldr	r3, [r7, #8]
3418ad1c:	fbb2 f3f3 	udiv	r3, r2, r3
3418ad20:	60fb      	str	r3, [r7, #12]
            break;
3418ad22:	e000      	b.n	3418ad26 <RCCEx_GetLTDCCLKFreq+0xde>
            break;
3418ad24:	bf00      	nop
      break;
3418ad26:	e00f      	b.n	3418ad48 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
3418ad28:	f7f9 fec2 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418ad2c:	4603      	mov	r3, r0
3418ad2e:	2b00      	cmp	r3, #0
3418ad30:	d00c      	beq.n	3418ad4c <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418ad32:	f7f9 fecf 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
3418ad36:	4603      	mov	r3, r0
3418ad38:	09db      	lsrs	r3, r3, #7
3418ad3a:	4a07      	ldr	r2, [pc, #28]	@ (3418ad58 <RCCEx_GetLTDCCLKFreq+0x110>)
3418ad3c:	fa22 f303 	lsr.w	r3, r2, r3
3418ad40:	60fb      	str	r3, [r7, #12]
      break;
3418ad42:	e003      	b.n	3418ad4c <RCCEx_GetLTDCCLKFreq+0x104>
      break;
3418ad44:	bf00      	nop
3418ad46:	e002      	b.n	3418ad4e <RCCEx_GetLTDCCLKFreq+0x106>
      break;
3418ad48:	bf00      	nop
3418ad4a:	e000      	b.n	3418ad4e <RCCEx_GetLTDCCLKFreq+0x106>
      break;
3418ad4c:	bf00      	nop
  }

  return ltdc_frequency;
3418ad4e:	68fb      	ldr	r3, [r7, #12]
}
3418ad50:	4618      	mov	r0, r3
3418ad52:	3710      	adds	r7, #16
3418ad54:	46bd      	mov	sp, r7
3418ad56:	bd80      	pop	{r7, pc}
3418ad58:	03d09000 	.word	0x03d09000

3418ad5c <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
3418ad5c:	b590      	push	{r4, r7, lr}
3418ad5e:	b085      	sub	sp, #20
3418ad60:	af00      	add	r7, sp, #0
3418ad62:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
3418ad64:	2300      	movs	r3, #0
3418ad66:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3418ad68:	6878      	ldr	r0, [r7, #4]
3418ad6a:	f7fa fa2f 	bl	341851cc <LL_RCC_GetMDFClockSource>
3418ad6e:	4603      	mov	r3, r0
3418ad70:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3418ad74:	f000 80dd 	beq.w	3418af32 <RCCEx_GetMDFCLKFreq+0x1d6>
3418ad78:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3418ad7c:	f200 80e3 	bhi.w	3418af46 <RCCEx_GetMDFCLKFreq+0x1ea>
3418ad80:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3418ad84:	f000 80d2 	beq.w	3418af2c <RCCEx_GetMDFCLKFreq+0x1d0>
3418ad88:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3418ad8c:	f200 80db 	bhi.w	3418af46 <RCCEx_GetMDFCLKFreq+0x1ea>
3418ad90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3418ad94:	f000 80b4 	beq.w	3418af00 <RCCEx_GetMDFCLKFreq+0x1a4>
3418ad98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3418ad9c:	f200 80d3 	bhi.w	3418af46 <RCCEx_GetMDFCLKFreq+0x1ea>
3418ada0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418ada4:	f000 80ba 	beq.w	3418af1c <RCCEx_GetMDFCLKFreq+0x1c0>
3418ada8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418adac:	f200 80cb 	bhi.w	3418af46 <RCCEx_GetMDFCLKFreq+0x1ea>
3418adb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418adb4:	d061      	beq.n	3418ae7a <RCCEx_GetMDFCLKFreq+0x11e>
3418adb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418adba:	f200 80c4 	bhi.w	3418af46 <RCCEx_GetMDFCLKFreq+0x1ea>
3418adbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418adc2:	d016      	beq.n	3418adf2 <RCCEx_GetMDFCLKFreq+0x96>
3418adc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418adc8:	f200 80bd 	bhi.w	3418af46 <RCCEx_GetMDFCLKFreq+0x1ea>
3418adcc:	2b00      	cmp	r3, #0
3418adce:	d003      	beq.n	3418add8 <RCCEx_GetMDFCLKFreq+0x7c>
3418add0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418add4:	d008      	beq.n	3418ade8 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418add6:	e0b6      	b.n	3418af46 <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418add8:	f7f9 fa56 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418addc:	4603      	mov	r3, r0
3418adde:	4618      	mov	r0, r3
3418ade0:	f7fe f9f6 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418ade4:	60f8      	str	r0, [r7, #12]
      break;
3418ade6:	e0b7      	b.n	3418af58 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418ade8:	2007      	movs	r0, #7
3418adea:	f7fe fcdd 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418adee:	60f8      	str	r0, [r7, #12]
      break;
3418adf0:	e0b2      	b.n	3418af58 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418adf2:	f7fa fe01 	bl	341859f8 <LL_RCC_IC7_IsEnabled>
3418adf6:	4603      	mov	r3, r0
3418adf8:	2b00      	cmp	r3, #0
3418adfa:	f000 80a6 	beq.w	3418af4a <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
3418adfe:	f7fa fe1d 	bl	34185a3c <LL_RCC_IC7_GetDivider>
3418ae02:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418ae04:	f7fa fe0c 	bl	34185a20 <LL_RCC_IC7_GetSource>
3418ae08:	4603      	mov	r3, r0
3418ae0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ae0e:	d029      	beq.n	3418ae64 <RCCEx_GetMDFCLKFreq+0x108>
3418ae10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ae14:	d82f      	bhi.n	3418ae76 <RCCEx_GetMDFCLKFreq+0x11a>
3418ae16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ae1a:	d01a      	beq.n	3418ae52 <RCCEx_GetMDFCLKFreq+0xf6>
3418ae1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ae20:	d829      	bhi.n	3418ae76 <RCCEx_GetMDFCLKFreq+0x11a>
3418ae22:	2b00      	cmp	r3, #0
3418ae24:	d003      	beq.n	3418ae2e <RCCEx_GetMDFCLKFreq+0xd2>
3418ae26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ae2a:	d009      	beq.n	3418ae40 <RCCEx_GetMDFCLKFreq+0xe4>
            break;
3418ae2c:	e023      	b.n	3418ae76 <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ae2e:	f7fe f8b7 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418ae32:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418ae34:	68fa      	ldr	r2, [r7, #12]
3418ae36:	68bb      	ldr	r3, [r7, #8]
3418ae38:	fbb2 f3f3 	udiv	r3, r2, r3
3418ae3c:	60fb      	str	r3, [r7, #12]
            break;
3418ae3e:	e01b      	b.n	3418ae78 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418ae40:	f7fe f8f4 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418ae44:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418ae46:	68fa      	ldr	r2, [r7, #12]
3418ae48:	68bb      	ldr	r3, [r7, #8]
3418ae4a:	fbb2 f3f3 	udiv	r3, r2, r3
3418ae4e:	60fb      	str	r3, [r7, #12]
            break;
3418ae50:	e012      	b.n	3418ae78 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ae52:	f7fe f931 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418ae56:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418ae58:	68fa      	ldr	r2, [r7, #12]
3418ae5a:	68bb      	ldr	r3, [r7, #8]
3418ae5c:	fbb2 f3f3 	udiv	r3, r2, r3
3418ae60:	60fb      	str	r3, [r7, #12]
            break;
3418ae62:	e009      	b.n	3418ae78 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418ae64:	f7fe f96e 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418ae68:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418ae6a:	68fa      	ldr	r2, [r7, #12]
3418ae6c:	68bb      	ldr	r3, [r7, #8]
3418ae6e:	fbb2 f3f3 	udiv	r3, r2, r3
3418ae72:	60fb      	str	r3, [r7, #12]
            break;
3418ae74:	e000      	b.n	3418ae78 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
3418ae76:	bf00      	nop
      break;
3418ae78:	e067      	b.n	3418af4a <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418ae7a:	f7fa fdfd 	bl	34185a78 <LL_RCC_IC8_IsEnabled>
3418ae7e:	4603      	mov	r3, r0
3418ae80:	2b00      	cmp	r3, #0
3418ae82:	d064      	beq.n	3418af4e <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
3418ae84:	f7fa fe1a 	bl	34185abc <LL_RCC_IC8_GetDivider>
3418ae88:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418ae8a:	f7fa fe09 	bl	34185aa0 <LL_RCC_IC8_GetSource>
3418ae8e:	4603      	mov	r3, r0
3418ae90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ae94:	d029      	beq.n	3418aeea <RCCEx_GetMDFCLKFreq+0x18e>
3418ae96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ae9a:	d82f      	bhi.n	3418aefc <RCCEx_GetMDFCLKFreq+0x1a0>
3418ae9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aea0:	d01a      	beq.n	3418aed8 <RCCEx_GetMDFCLKFreq+0x17c>
3418aea2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aea6:	d829      	bhi.n	3418aefc <RCCEx_GetMDFCLKFreq+0x1a0>
3418aea8:	2b00      	cmp	r3, #0
3418aeaa:	d003      	beq.n	3418aeb4 <RCCEx_GetMDFCLKFreq+0x158>
3418aeac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418aeb0:	d009      	beq.n	3418aec6 <RCCEx_GetMDFCLKFreq+0x16a>
            break;
3418aeb2:	e023      	b.n	3418aefc <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418aeb4:	f7fe f874 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418aeb8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418aeba:	68fa      	ldr	r2, [r7, #12]
3418aebc:	68bb      	ldr	r3, [r7, #8]
3418aebe:	fbb2 f3f3 	udiv	r3, r2, r3
3418aec2:	60fb      	str	r3, [r7, #12]
            break;
3418aec4:	e01b      	b.n	3418aefe <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418aec6:	f7fe f8b1 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418aeca:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418aecc:	68fa      	ldr	r2, [r7, #12]
3418aece:	68bb      	ldr	r3, [r7, #8]
3418aed0:	fbb2 f3f3 	udiv	r3, r2, r3
3418aed4:	60fb      	str	r3, [r7, #12]
            break;
3418aed6:	e012      	b.n	3418aefe <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418aed8:	f7fe f8ee 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418aedc:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418aede:	68fa      	ldr	r2, [r7, #12]
3418aee0:	68bb      	ldr	r3, [r7, #8]
3418aee2:	fbb2 f3f3 	udiv	r3, r2, r3
3418aee6:	60fb      	str	r3, [r7, #12]
            break;
3418aee8:	e009      	b.n	3418aefe <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418aeea:	f7fe f92b 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418aeee:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418aef0:	68fa      	ldr	r2, [r7, #12]
3418aef2:	68bb      	ldr	r3, [r7, #8]
3418aef4:	fbb2 f3f3 	udiv	r3, r2, r3
3418aef8:	60fb      	str	r3, [r7, #12]
            break;
3418aefa:	e000      	b.n	3418aefe <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
3418aefc:	bf00      	nop
      break;
3418aefe:	e026      	b.n	3418af4e <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
3418af00:	f7f9 fdd6 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418af04:	4603      	mov	r3, r0
3418af06:	2b00      	cmp	r3, #0
3418af08:	d023      	beq.n	3418af52 <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418af0a:	f7f9 fde3 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
3418af0e:	4603      	mov	r3, r0
3418af10:	09db      	lsrs	r3, r3, #7
3418af12:	4a14      	ldr	r2, [pc, #80]	@ (3418af64 <RCCEx_GetMDFCLKFreq+0x208>)
3418af14:	fa22 f303 	lsr.w	r3, r2, r3
3418af18:	60fb      	str	r3, [r7, #12]
      break;
3418af1a:	e01a      	b.n	3418af52 <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
3418af1c:	f7f9 fde8 	bl	34184af0 <LL_RCC_MSI_IsReady>
3418af20:	4603      	mov	r3, r0
3418af22:	2b00      	cmp	r3, #0
3418af24:	d017      	beq.n	3418af56 <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
3418af26:	4b10      	ldr	r3, [pc, #64]	@ (3418af68 <RCCEx_GetMDFCLKFreq+0x20c>)
3418af28:	60fb      	str	r3, [r7, #12]
      break;
3418af2a:	e014      	b.n	3418af56 <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
3418af2c:	4b0f      	ldr	r3, [pc, #60]	@ (3418af6c <RCCEx_GetMDFCLKFreq+0x210>)
3418af2e:	60fb      	str	r3, [r7, #12]
      break;
3418af30:	e012      	b.n	3418af58 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
3418af32:	f7f9 f9a9 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418af36:	4604      	mov	r4, r0
3418af38:	f7fa fa22 	bl	34185380 <LL_RCC_GetTIMPrescaler>
3418af3c:	4603      	mov	r3, r0
3418af3e:	fa24 f303 	lsr.w	r3, r4, r3
3418af42:	60fb      	str	r3, [r7, #12]
      break;
3418af44:	e008      	b.n	3418af58 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418af46:	bf00      	nop
3418af48:	e006      	b.n	3418af58 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418af4a:	bf00      	nop
3418af4c:	e004      	b.n	3418af58 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418af4e:	bf00      	nop
3418af50:	e002      	b.n	3418af58 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418af52:	bf00      	nop
3418af54:	e000      	b.n	3418af58 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418af56:	bf00      	nop
  }

  return adf_frequency;
3418af58:	68fb      	ldr	r3, [r7, #12]
}
3418af5a:	4618      	mov	r0, r3
3418af5c:	3714      	adds	r7, #20
3418af5e:	46bd      	mov	sp, r7
3418af60:	bd90      	pop	{r4, r7, pc}
3418af62:	bf00      	nop
3418af64:	03d09000 	.word	0x03d09000
3418af68:	003d0900 	.word	0x003d0900
3418af6c:	00bb8000 	.word	0x00bb8000

3418af70 <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
3418af70:	b580      	push	{r7, lr}
3418af72:	b084      	sub	sp, #16
3418af74:	af00      	add	r7, sp, #0
3418af76:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418af78:	2300      	movs	r3, #0
3418af7a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
3418af7c:	6878      	ldr	r0, [r7, #4]
3418af7e:	f7fa f937 	bl	341851f0 <LL_RCC_GetPSSIClockSource>
3418af82:	4603      	mov	r3, r0
3418af84:	2b30      	cmp	r3, #48	@ 0x30
3418af86:	d05a      	beq.n	3418b03e <RCCEx_GetPSSICLKFreq+0xce>
3418af88:	2b30      	cmp	r3, #48	@ 0x30
3418af8a:	d866      	bhi.n	3418b05a <RCCEx_GetPSSICLKFreq+0xea>
3418af8c:	2b20      	cmp	r3, #32
3418af8e:	d013      	beq.n	3418afb8 <RCCEx_GetPSSICLKFreq+0x48>
3418af90:	2b20      	cmp	r3, #32
3418af92:	d862      	bhi.n	3418b05a <RCCEx_GetPSSICLKFreq+0xea>
3418af94:	2b00      	cmp	r3, #0
3418af96:	d002      	beq.n	3418af9e <RCCEx_GetPSSICLKFreq+0x2e>
3418af98:	2b10      	cmp	r3, #16
3418af9a:	d008      	beq.n	3418afae <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418af9c:	e05d      	b.n	3418b05a <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418af9e:	f7f9 f973 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418afa2:	4603      	mov	r3, r0
3418afa4:	4618      	mov	r0, r3
3418afa6:	f7fe f913 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418afaa:	60f8      	str	r0, [r7, #12]
      break;
3418afac:	e05a      	b.n	3418b064 <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418afae:	2007      	movs	r0, #7
3418afb0:	f7fe fbfa 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418afb4:	60f8      	str	r0, [r7, #12]
      break;
3418afb6:	e055      	b.n	3418b064 <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
3418afb8:	f7fb f81e 	bl	34185ff8 <LL_RCC_IC20_IsEnabled>
3418afbc:	4603      	mov	r3, r0
3418afbe:	2b00      	cmp	r3, #0
3418afc0:	d04d      	beq.n	3418b05e <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
3418afc2:	f7fb f83b 	bl	3418603c <LL_RCC_IC20_GetDivider>
3418afc6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
3418afc8:	f7fb f82a 	bl	34186020 <LL_RCC_IC20_GetSource>
3418afcc:	4603      	mov	r3, r0
3418afce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418afd2:	d029      	beq.n	3418b028 <RCCEx_GetPSSICLKFreq+0xb8>
3418afd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418afd8:	d82f      	bhi.n	3418b03a <RCCEx_GetPSSICLKFreq+0xca>
3418afda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418afde:	d01a      	beq.n	3418b016 <RCCEx_GetPSSICLKFreq+0xa6>
3418afe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418afe4:	d829      	bhi.n	3418b03a <RCCEx_GetPSSICLKFreq+0xca>
3418afe6:	2b00      	cmp	r3, #0
3418afe8:	d003      	beq.n	3418aff2 <RCCEx_GetPSSICLKFreq+0x82>
3418afea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418afee:	d009      	beq.n	3418b004 <RCCEx_GetPSSICLKFreq+0x94>
            break;
3418aff0:	e023      	b.n	3418b03a <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418aff2:	f7fd ffd5 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418aff6:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418aff8:	68fa      	ldr	r2, [r7, #12]
3418affa:	68bb      	ldr	r3, [r7, #8]
3418affc:	fbb2 f3f3 	udiv	r3, r2, r3
3418b000:	60fb      	str	r3, [r7, #12]
            break;
3418b002:	e01b      	b.n	3418b03c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b004:	f7fe f812 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418b008:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418b00a:	68fa      	ldr	r2, [r7, #12]
3418b00c:	68bb      	ldr	r3, [r7, #8]
3418b00e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b012:	60fb      	str	r3, [r7, #12]
            break;
3418b014:	e012      	b.n	3418b03c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b016:	f7fe f84f 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b01a:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418b01c:	68fa      	ldr	r2, [r7, #12]
3418b01e:	68bb      	ldr	r3, [r7, #8]
3418b020:	fbb2 f3f3 	udiv	r3, r2, r3
3418b024:	60fb      	str	r3, [r7, #12]
            break;
3418b026:	e009      	b.n	3418b03c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b028:	f7fe f88c 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418b02c:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418b02e:	68fa      	ldr	r2, [r7, #12]
3418b030:	68bb      	ldr	r3, [r7, #8]
3418b032:	fbb2 f3f3 	udiv	r3, r2, r3
3418b036:	60fb      	str	r3, [r7, #12]
            break;
3418b038:	e000      	b.n	3418b03c <RCCEx_GetPSSICLKFreq+0xcc>
            break;
3418b03a:	bf00      	nop
      break;
3418b03c:	e00f      	b.n	3418b05e <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
3418b03e:	f7f9 fd37 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418b042:	4603      	mov	r3, r0
3418b044:	2b00      	cmp	r3, #0
3418b046:	d00c      	beq.n	3418b062 <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b048:	f7f9 fd44 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
3418b04c:	4603      	mov	r3, r0
3418b04e:	09db      	lsrs	r3, r3, #7
3418b050:	4a07      	ldr	r2, [pc, #28]	@ (3418b070 <RCCEx_GetPSSICLKFreq+0x100>)
3418b052:	fa22 f303 	lsr.w	r3, r2, r3
3418b056:	60fb      	str	r3, [r7, #12]
      break;
3418b058:	e003      	b.n	3418b062 <RCCEx_GetPSSICLKFreq+0xf2>
      break;
3418b05a:	bf00      	nop
3418b05c:	e002      	b.n	3418b064 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3418b05e:	bf00      	nop
3418b060:	e000      	b.n	3418b064 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3418b062:	bf00      	nop
  }

  return pssi_frequency;
3418b064:	68fb      	ldr	r3, [r7, #12]
}
3418b066:	4618      	mov	r0, r3
3418b068:	3710      	adds	r7, #16
3418b06a:	46bd      	mov	sp, r7
3418b06c:	bd80      	pop	{r7, pc}
3418b06e:	bf00      	nop
3418b070:	03d09000 	.word	0x03d09000

3418b074 <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
3418b074:	b580      	push	{r7, lr}
3418b076:	b082      	sub	sp, #8
3418b078:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b07a:	2300      	movs	r3, #0
3418b07c:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
3418b07e:	f7fa f945 	bl	3418530c <LL_RCC_GetRTCClockSource>
3418b082:	4603      	mov	r3, r0
3418b084:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418b088:	d020      	beq.n	3418b0cc <RCCEx_GetRTCCLKFreq+0x58>
3418b08a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418b08e:	d830      	bhi.n	3418b0f2 <RCCEx_GetRTCCLKFreq+0x7e>
3418b090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418b094:	d011      	beq.n	3418b0ba <RCCEx_GetRTCCLKFreq+0x46>
3418b096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418b09a:	d82a      	bhi.n	3418b0f2 <RCCEx_GetRTCCLKFreq+0x7e>
3418b09c:	2b00      	cmp	r3, #0
3418b09e:	d02a      	beq.n	3418b0f6 <RCCEx_GetRTCCLKFreq+0x82>
3418b0a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418b0a4:	d000      	beq.n	3418b0a8 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418b0a6:	e024      	b.n	3418b0f2 <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
3418b0a8:	f7f9 fd42 	bl	34184b30 <LL_RCC_LSE_IsReady>
3418b0ac:	4603      	mov	r3, r0
3418b0ae:	2b00      	cmp	r3, #0
3418b0b0:	d023      	beq.n	3418b0fa <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
3418b0b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418b0b6:	607b      	str	r3, [r7, #4]
      break;
3418b0b8:	e01f      	b.n	3418b0fa <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
3418b0ba:	f7f9 fd4b 	bl	34184b54 <LL_RCC_LSI_IsReady>
3418b0be:	4603      	mov	r3, r0
3418b0c0:	2b00      	cmp	r3, #0
3418b0c2:	d01c      	beq.n	3418b0fe <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
3418b0c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3418b0c8:	607b      	str	r3, [r7, #4]
      break;
3418b0ca:	e018      	b.n	3418b0fe <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
3418b0cc:	f7f9 fcde 	bl	34184a8c <LL_RCC_HSE_IsReady>
3418b0d0:	4603      	mov	r3, r0
3418b0d2:	2b00      	cmp	r3, #0
3418b0d4:	d015      	beq.n	3418b102 <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
3418b0d6:	4b0e      	ldr	r3, [pc, #56]	@ (3418b110 <RCCEx_GetRTCCLKFreq+0x9c>)
3418b0d8:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418b0dc:	0b1b      	lsrs	r3, r3, #12
3418b0de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3418b0e2:	3301      	adds	r3, #1
3418b0e4:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
3418b0e6:	4a0b      	ldr	r2, [pc, #44]	@ (3418b114 <RCCEx_GetRTCCLKFreq+0xa0>)
3418b0e8:	683b      	ldr	r3, [r7, #0]
3418b0ea:	fbb2 f3f3 	udiv	r3, r2, r3
3418b0ee:	607b      	str	r3, [r7, #4]
      break;
3418b0f0:	e007      	b.n	3418b102 <RCCEx_GetRTCCLKFreq+0x8e>
      break;
3418b0f2:	bf00      	nop
3418b0f4:	e006      	b.n	3418b104 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418b0f6:	bf00      	nop
3418b0f8:	e004      	b.n	3418b104 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418b0fa:	bf00      	nop
3418b0fc:	e002      	b.n	3418b104 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418b0fe:	bf00      	nop
3418b100:	e000      	b.n	3418b104 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418b102:	bf00      	nop
  }

  return rtc_frequency;
3418b104:	687b      	ldr	r3, [r7, #4]
}
3418b106:	4618      	mov	r0, r3
3418b108:	3708      	adds	r7, #8
3418b10a:	46bd      	mov	sp, r7
3418b10c:	bd80      	pop	{r7, pc}
3418b10e:	bf00      	nop
3418b110:	56028000 	.word	0x56028000
3418b114:	02dc6c00 	.word	0x02dc6c00

3418b118 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
3418b118:	b580      	push	{r7, lr}
3418b11a:	b084      	sub	sp, #16
3418b11c:	af00      	add	r7, sp, #0
3418b11e:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b120:	2300      	movs	r3, #0
3418b122:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3418b124:	6878      	ldr	r0, [r7, #4]
3418b126:	f7fa f875 	bl	34185214 <LL_RCC_GetSAIClockSource>
3418b12a:	4603      	mov	r3, r0
3418b12c:	4a9a      	ldr	r2, [pc, #616]	@ (3418b398 <RCCEx_GetSAICLKFreq+0x280>)
3418b12e:	4293      	cmp	r3, r2
3418b130:	f000 811f 	beq.w	3418b372 <RCCEx_GetSAICLKFreq+0x25a>
3418b134:	4a98      	ldr	r2, [pc, #608]	@ (3418b398 <RCCEx_GetSAICLKFreq+0x280>)
3418b136:	4293      	cmp	r3, r2
3418b138:	f200 8120 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b13c:	4a97      	ldr	r2, [pc, #604]	@ (3418b39c <RCCEx_GetSAICLKFreq+0x284>)
3418b13e:	4293      	cmp	r3, r2
3418b140:	f000 8117 	beq.w	3418b372 <RCCEx_GetSAICLKFreq+0x25a>
3418b144:	4a95      	ldr	r2, [pc, #596]	@ (3418b39c <RCCEx_GetSAICLKFreq+0x284>)
3418b146:	4293      	cmp	r3, r2
3418b148:	f200 8118 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b14c:	4a94      	ldr	r2, [pc, #592]	@ (3418b3a0 <RCCEx_GetSAICLKFreq+0x288>)
3418b14e:	4293      	cmp	r3, r2
3418b150:	f000 810c 	beq.w	3418b36c <RCCEx_GetSAICLKFreq+0x254>
3418b154:	4a92      	ldr	r2, [pc, #584]	@ (3418b3a0 <RCCEx_GetSAICLKFreq+0x288>)
3418b156:	4293      	cmp	r3, r2
3418b158:	f200 8110 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b15c:	4a91      	ldr	r2, [pc, #580]	@ (3418b3a4 <RCCEx_GetSAICLKFreq+0x28c>)
3418b15e:	4293      	cmp	r3, r2
3418b160:	f000 8104 	beq.w	3418b36c <RCCEx_GetSAICLKFreq+0x254>
3418b164:	4a8f      	ldr	r2, [pc, #572]	@ (3418b3a4 <RCCEx_GetSAICLKFreq+0x28c>)
3418b166:	4293      	cmp	r3, r2
3418b168:	f200 8108 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b16c:	4a8e      	ldr	r2, [pc, #568]	@ (3418b3a8 <RCCEx_GetSAICLKFreq+0x290>)
3418b16e:	4293      	cmp	r3, r2
3418b170:	f000 80e6 	beq.w	3418b340 <RCCEx_GetSAICLKFreq+0x228>
3418b174:	4a8c      	ldr	r2, [pc, #560]	@ (3418b3a8 <RCCEx_GetSAICLKFreq+0x290>)
3418b176:	4293      	cmp	r3, r2
3418b178:	f200 8100 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b17c:	4a8b      	ldr	r2, [pc, #556]	@ (3418b3ac <RCCEx_GetSAICLKFreq+0x294>)
3418b17e:	4293      	cmp	r3, r2
3418b180:	f000 80de 	beq.w	3418b340 <RCCEx_GetSAICLKFreq+0x228>
3418b184:	4a89      	ldr	r2, [pc, #548]	@ (3418b3ac <RCCEx_GetSAICLKFreq+0x294>)
3418b186:	4293      	cmp	r3, r2
3418b188:	f200 80f8 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b18c:	4a88      	ldr	r2, [pc, #544]	@ (3418b3b0 <RCCEx_GetSAICLKFreq+0x298>)
3418b18e:	4293      	cmp	r3, r2
3418b190:	f000 80e4 	beq.w	3418b35c <RCCEx_GetSAICLKFreq+0x244>
3418b194:	4a86      	ldr	r2, [pc, #536]	@ (3418b3b0 <RCCEx_GetSAICLKFreq+0x298>)
3418b196:	4293      	cmp	r3, r2
3418b198:	f200 80f0 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b19c:	4a85      	ldr	r2, [pc, #532]	@ (3418b3b4 <RCCEx_GetSAICLKFreq+0x29c>)
3418b19e:	4293      	cmp	r3, r2
3418b1a0:	f000 80dc 	beq.w	3418b35c <RCCEx_GetSAICLKFreq+0x244>
3418b1a4:	4a83      	ldr	r2, [pc, #524]	@ (3418b3b4 <RCCEx_GetSAICLKFreq+0x29c>)
3418b1a6:	4293      	cmp	r3, r2
3418b1a8:	f200 80e8 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b1ac:	4a82      	ldr	r2, [pc, #520]	@ (3418b3b8 <RCCEx_GetSAICLKFreq+0x2a0>)
3418b1ae:	4293      	cmp	r3, r2
3418b1b0:	f000 8083 	beq.w	3418b2ba <RCCEx_GetSAICLKFreq+0x1a2>
3418b1b4:	4a80      	ldr	r2, [pc, #512]	@ (3418b3b8 <RCCEx_GetSAICLKFreq+0x2a0>)
3418b1b6:	4293      	cmp	r3, r2
3418b1b8:	f200 80e0 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b1bc:	4a7f      	ldr	r2, [pc, #508]	@ (3418b3bc <RCCEx_GetSAICLKFreq+0x2a4>)
3418b1be:	4293      	cmp	r3, r2
3418b1c0:	d07b      	beq.n	3418b2ba <RCCEx_GetSAICLKFreq+0x1a2>
3418b1c2:	4a7e      	ldr	r2, [pc, #504]	@ (3418b3bc <RCCEx_GetSAICLKFreq+0x2a4>)
3418b1c4:	4293      	cmp	r3, r2
3418b1c6:	f200 80d9 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b1ca:	4a7d      	ldr	r2, [pc, #500]	@ (3418b3c0 <RCCEx_GetSAICLKFreq+0x2a8>)
3418b1cc:	4293      	cmp	r3, r2
3418b1ce:	d030      	beq.n	3418b232 <RCCEx_GetSAICLKFreq+0x11a>
3418b1d0:	4a7b      	ldr	r2, [pc, #492]	@ (3418b3c0 <RCCEx_GetSAICLKFreq+0x2a8>)
3418b1d2:	4293      	cmp	r3, r2
3418b1d4:	f200 80d2 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b1d8:	4a7a      	ldr	r2, [pc, #488]	@ (3418b3c4 <RCCEx_GetSAICLKFreq+0x2ac>)
3418b1da:	4293      	cmp	r3, r2
3418b1dc:	d029      	beq.n	3418b232 <RCCEx_GetSAICLKFreq+0x11a>
3418b1de:	4a79      	ldr	r2, [pc, #484]	@ (3418b3c4 <RCCEx_GetSAICLKFreq+0x2ac>)
3418b1e0:	4293      	cmp	r3, r2
3418b1e2:	f200 80cb 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b1e6:	4a78      	ldr	r2, [pc, #480]	@ (3418b3c8 <RCCEx_GetSAICLKFreq+0x2b0>)
3418b1e8:	4293      	cmp	r3, r2
3418b1ea:	d01d      	beq.n	3418b228 <RCCEx_GetSAICLKFreq+0x110>
3418b1ec:	4a76      	ldr	r2, [pc, #472]	@ (3418b3c8 <RCCEx_GetSAICLKFreq+0x2b0>)
3418b1ee:	4293      	cmp	r3, r2
3418b1f0:	f200 80c4 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b1f4:	4a75      	ldr	r2, [pc, #468]	@ (3418b3cc <RCCEx_GetSAICLKFreq+0x2b4>)
3418b1f6:	4293      	cmp	r3, r2
3418b1f8:	d016      	beq.n	3418b228 <RCCEx_GetSAICLKFreq+0x110>
3418b1fa:	4a74      	ldr	r2, [pc, #464]	@ (3418b3cc <RCCEx_GetSAICLKFreq+0x2b4>)
3418b1fc:	4293      	cmp	r3, r2
3418b1fe:	f200 80bd 	bhi.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
3418b202:	4a73      	ldr	r2, [pc, #460]	@ (3418b3d0 <RCCEx_GetSAICLKFreq+0x2b8>)
3418b204:	4293      	cmp	r3, r2
3418b206:	d003      	beq.n	3418b210 <RCCEx_GetSAICLKFreq+0xf8>
3418b208:	4a72      	ldr	r2, [pc, #456]	@ (3418b3d4 <RCCEx_GetSAICLKFreq+0x2bc>)
3418b20a:	4293      	cmp	r3, r2
3418b20c:	f040 80b6 	bne.w	3418b37c <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b210:	f7f9 f83a 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418b214:	4603      	mov	r3, r0
3418b216:	4618      	mov	r0, r3
3418b218:	f7fd ffda 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418b21c:	4603      	mov	r3, r0
3418b21e:	4618      	mov	r0, r3
3418b220:	f7fd fff7 	bl	34189212 <RCCEx_GetPCLK2Freq>
3418b224:	60f8      	str	r0, [r7, #12]
      break;
3418b226:	e0b2      	b.n	3418b38e <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b228:	2007      	movs	r0, #7
3418b22a:	f7fe fabd 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418b22e:	60f8      	str	r0, [r7, #12]
      break;
3418b230:	e0ad      	b.n	3418b38e <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418b232:	f7fa fbe1 	bl	341859f8 <LL_RCC_IC7_IsEnabled>
3418b236:	4603      	mov	r3, r0
3418b238:	2b00      	cmp	r3, #0
3418b23a:	f000 80a1 	beq.w	3418b380 <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418b23e:	f7fa fbfd 	bl	34185a3c <LL_RCC_IC7_GetDivider>
3418b242:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418b244:	f7fa fbec 	bl	34185a20 <LL_RCC_IC7_GetSource>
3418b248:	4603      	mov	r3, r0
3418b24a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b24e:	d029      	beq.n	3418b2a4 <RCCEx_GetSAICLKFreq+0x18c>
3418b250:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b254:	d82f      	bhi.n	3418b2b6 <RCCEx_GetSAICLKFreq+0x19e>
3418b256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b25a:	d01a      	beq.n	3418b292 <RCCEx_GetSAICLKFreq+0x17a>
3418b25c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b260:	d829      	bhi.n	3418b2b6 <RCCEx_GetSAICLKFreq+0x19e>
3418b262:	2b00      	cmp	r3, #0
3418b264:	d003      	beq.n	3418b26e <RCCEx_GetSAICLKFreq+0x156>
3418b266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b26a:	d009      	beq.n	3418b280 <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b26c:	e023      	b.n	3418b2b6 <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b26e:	f7fd fe97 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b272:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418b274:	68fa      	ldr	r2, [r7, #12]
3418b276:	68bb      	ldr	r3, [r7, #8]
3418b278:	fbb2 f3f3 	udiv	r3, r2, r3
3418b27c:	60fb      	str	r3, [r7, #12]
            break;
3418b27e:	e01b      	b.n	3418b2b8 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b280:	f7fd fed4 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418b284:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418b286:	68fa      	ldr	r2, [r7, #12]
3418b288:	68bb      	ldr	r3, [r7, #8]
3418b28a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b28e:	60fb      	str	r3, [r7, #12]
            break;
3418b290:	e012      	b.n	3418b2b8 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b292:	f7fd ff11 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b296:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418b298:	68fa      	ldr	r2, [r7, #12]
3418b29a:	68bb      	ldr	r3, [r7, #8]
3418b29c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b2a0:	60fb      	str	r3, [r7, #12]
            break;
3418b2a2:	e009      	b.n	3418b2b8 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b2a4:	f7fd ff4e 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418b2a8:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418b2aa:	68fa      	ldr	r2, [r7, #12]
3418b2ac:	68bb      	ldr	r3, [r7, #8]
3418b2ae:	fbb2 f3f3 	udiv	r3, r2, r3
3418b2b2:	60fb      	str	r3, [r7, #12]
            break;
3418b2b4:	e000      	b.n	3418b2b8 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
3418b2b6:	bf00      	nop
        }
      }
      break;
3418b2b8:	e062      	b.n	3418b380 <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418b2ba:	f7fa fbdd 	bl	34185a78 <LL_RCC_IC8_IsEnabled>
3418b2be:	4603      	mov	r3, r0
3418b2c0:	2b00      	cmp	r3, #0
3418b2c2:	d05f      	beq.n	3418b384 <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418b2c4:	f7fa fbfa 	bl	34185abc <LL_RCC_IC8_GetDivider>
3418b2c8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418b2ca:	f7fa fbe9 	bl	34185aa0 <LL_RCC_IC8_GetSource>
3418b2ce:	4603      	mov	r3, r0
3418b2d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b2d4:	d029      	beq.n	3418b32a <RCCEx_GetSAICLKFreq+0x212>
3418b2d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b2da:	d82f      	bhi.n	3418b33c <RCCEx_GetSAICLKFreq+0x224>
3418b2dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b2e0:	d01a      	beq.n	3418b318 <RCCEx_GetSAICLKFreq+0x200>
3418b2e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b2e6:	d829      	bhi.n	3418b33c <RCCEx_GetSAICLKFreq+0x224>
3418b2e8:	2b00      	cmp	r3, #0
3418b2ea:	d003      	beq.n	3418b2f4 <RCCEx_GetSAICLKFreq+0x1dc>
3418b2ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b2f0:	d009      	beq.n	3418b306 <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b2f2:	e023      	b.n	3418b33c <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b2f4:	f7fd fe54 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b2f8:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418b2fa:	68fa      	ldr	r2, [r7, #12]
3418b2fc:	68bb      	ldr	r3, [r7, #8]
3418b2fe:	fbb2 f3f3 	udiv	r3, r2, r3
3418b302:	60fb      	str	r3, [r7, #12]
            break;
3418b304:	e01b      	b.n	3418b33e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b306:	f7fd fe91 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418b30a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418b30c:	68fa      	ldr	r2, [r7, #12]
3418b30e:	68bb      	ldr	r3, [r7, #8]
3418b310:	fbb2 f3f3 	udiv	r3, r2, r3
3418b314:	60fb      	str	r3, [r7, #12]
            break;
3418b316:	e012      	b.n	3418b33e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b318:	f7fd fece 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b31c:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418b31e:	68fa      	ldr	r2, [r7, #12]
3418b320:	68bb      	ldr	r3, [r7, #8]
3418b322:	fbb2 f3f3 	udiv	r3, r2, r3
3418b326:	60fb      	str	r3, [r7, #12]
            break;
3418b328:	e009      	b.n	3418b33e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b32a:	f7fd ff0b 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418b32e:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418b330:	68fa      	ldr	r2, [r7, #12]
3418b332:	68bb      	ldr	r3, [r7, #8]
3418b334:	fbb2 f3f3 	udiv	r3, r2, r3
3418b338:	60fb      	str	r3, [r7, #12]
            break;
3418b33a:	e000      	b.n	3418b33e <RCCEx_GetSAICLKFreq+0x226>
            break;
3418b33c:	bf00      	nop
        }
      }
      break;
3418b33e:	e021      	b.n	3418b384 <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418b340:	f7f9 fbb6 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418b344:	4603      	mov	r3, r0
3418b346:	2b00      	cmp	r3, #0
3418b348:	d01e      	beq.n	3418b388 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b34a:	f7f9 fbc3 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
3418b34e:	4603      	mov	r3, r0
3418b350:	09db      	lsrs	r3, r3, #7
3418b352:	4a21      	ldr	r2, [pc, #132]	@ (3418b3d8 <RCCEx_GetSAICLKFreq+0x2c0>)
3418b354:	fa22 f303 	lsr.w	r3, r2, r3
3418b358:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b35a:	e015      	b.n	3418b388 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418b35c:	f7f9 fbc8 	bl	34184af0 <LL_RCC_MSI_IsReady>
3418b360:	4603      	mov	r3, r0
3418b362:	2b00      	cmp	r3, #0
3418b364:	d012      	beq.n	3418b38c <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
3418b366:	4b1d      	ldr	r3, [pc, #116]	@ (3418b3dc <RCCEx_GetSAICLKFreq+0x2c4>)
3418b368:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b36a:	e00f      	b.n	3418b38c <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
3418b36c:	4b1c      	ldr	r3, [pc, #112]	@ (3418b3e0 <RCCEx_GetSAICLKFreq+0x2c8>)
3418b36e:	60fb      	str	r3, [r7, #12]
      break;
3418b370:	e00d      	b.n	3418b38e <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3418b372:	2007      	movs	r0, #7
3418b374:	f000 f920 	bl	3418b5b8 <RCCEx_GetSPDIFRXCLKFreq>
3418b378:	60f8      	str	r0, [r7, #12]
      break;
3418b37a:	e008      	b.n	3418b38e <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
3418b37c:	bf00      	nop
3418b37e:	e006      	b.n	3418b38e <RCCEx_GetSAICLKFreq+0x276>
      break;
3418b380:	bf00      	nop
3418b382:	e004      	b.n	3418b38e <RCCEx_GetSAICLKFreq+0x276>
      break;
3418b384:	bf00      	nop
3418b386:	e002      	b.n	3418b38e <RCCEx_GetSAICLKFreq+0x276>
      break;
3418b388:	bf00      	nop
3418b38a:	e000      	b.n	3418b38e <RCCEx_GetSAICLKFreq+0x276>
      break;
3418b38c:	bf00      	nop
  }

  return sai_frequency;
3418b38e:	68fb      	ldr	r3, [r7, #12]
}
3418b390:	4618      	mov	r0, r3
3418b392:	3710      	adds	r7, #16
3418b394:	46bd      	mov	sp, r7
3418b396:	bd80      	pop	{r7, pc}
3418b398:	07071818 	.word	0x07071818
3418b39c:	07071418 	.word	0x07071418
3418b3a0:	07061818 	.word	0x07061818
3418b3a4:	07061418 	.word	0x07061418
3418b3a8:	07051818 	.word	0x07051818
3418b3ac:	07051418 	.word	0x07051418
3418b3b0:	07041818 	.word	0x07041818
3418b3b4:	07041418 	.word	0x07041418
3418b3b8:	07031818 	.word	0x07031818
3418b3bc:	07031418 	.word	0x07031418
3418b3c0:	07021818 	.word	0x07021818
3418b3c4:	07021418 	.word	0x07021418
3418b3c8:	07011818 	.word	0x07011818
3418b3cc:	07011418 	.word	0x07011418
3418b3d0:	07001418 	.word	0x07001418
3418b3d4:	07001818 	.word	0x07001818
3418b3d8:	03d09000 	.word	0x03d09000
3418b3dc:	003d0900 	.word	0x003d0900
3418b3e0:	00bb8000 	.word	0x00bb8000

3418b3e4 <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
3418b3e4:	b580      	push	{r7, lr}
3418b3e6:	b084      	sub	sp, #16
3418b3e8:	af00      	add	r7, sp, #0
3418b3ea:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b3ec:	2300      	movs	r3, #0
3418b3ee:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3418b3f0:	6878      	ldr	r0, [r7, #4]
3418b3f2:	f7f9 ff1b 	bl	3418522c <LL_RCC_GetSDMMCClockSource>
3418b3f6:	4603      	mov	r3, r0
3418b3f8:	4a67      	ldr	r2, [pc, #412]	@ (3418b598 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3418b3fa:	4293      	cmp	r3, r2
3418b3fc:	d07e      	beq.n	3418b4fc <RCCEx_GetSDMMCCLKFreq+0x118>
3418b3fe:	4a66      	ldr	r2, [pc, #408]	@ (3418b598 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3418b400:	4293      	cmp	r3, r2
3418b402:	f200 80be 	bhi.w	3418b582 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418b406:	4a65      	ldr	r2, [pc, #404]	@ (3418b59c <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3418b408:	4293      	cmp	r3, r2
3418b40a:	d077      	beq.n	3418b4fc <RCCEx_GetSDMMCCLKFreq+0x118>
3418b40c:	4a63      	ldr	r2, [pc, #396]	@ (3418b59c <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3418b40e:	4293      	cmp	r3, r2
3418b410:	f200 80b7 	bhi.w	3418b582 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418b414:	4a62      	ldr	r2, [pc, #392]	@ (3418b5a0 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3418b416:	4293      	cmp	r3, r2
3418b418:	d02c      	beq.n	3418b474 <RCCEx_GetSDMMCCLKFreq+0x90>
3418b41a:	4a61      	ldr	r2, [pc, #388]	@ (3418b5a0 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3418b41c:	4293      	cmp	r3, r2
3418b41e:	f200 80b0 	bhi.w	3418b582 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418b422:	4a60      	ldr	r2, [pc, #384]	@ (3418b5a4 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3418b424:	4293      	cmp	r3, r2
3418b426:	d025      	beq.n	3418b474 <RCCEx_GetSDMMCCLKFreq+0x90>
3418b428:	4a5e      	ldr	r2, [pc, #376]	@ (3418b5a4 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3418b42a:	4293      	cmp	r3, r2
3418b42c:	f200 80a9 	bhi.w	3418b582 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418b430:	4a5d      	ldr	r2, [pc, #372]	@ (3418b5a8 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3418b432:	4293      	cmp	r3, r2
3418b434:	d019      	beq.n	3418b46a <RCCEx_GetSDMMCCLKFreq+0x86>
3418b436:	4a5c      	ldr	r2, [pc, #368]	@ (3418b5a8 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3418b438:	4293      	cmp	r3, r2
3418b43a:	f200 80a2 	bhi.w	3418b582 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418b43e:	4a5b      	ldr	r2, [pc, #364]	@ (3418b5ac <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3418b440:	4293      	cmp	r3, r2
3418b442:	d012      	beq.n	3418b46a <RCCEx_GetSDMMCCLKFreq+0x86>
3418b444:	4a59      	ldr	r2, [pc, #356]	@ (3418b5ac <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3418b446:	4293      	cmp	r3, r2
3418b448:	f200 809b 	bhi.w	3418b582 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418b44c:	4a58      	ldr	r2, [pc, #352]	@ (3418b5b0 <RCCEx_GetSDMMCCLKFreq+0x1cc>)
3418b44e:	4293      	cmp	r3, r2
3418b450:	d003      	beq.n	3418b45a <RCCEx_GetSDMMCCLKFreq+0x76>
3418b452:	4a58      	ldr	r2, [pc, #352]	@ (3418b5b4 <RCCEx_GetSDMMCCLKFreq+0x1d0>)
3418b454:	4293      	cmp	r3, r2
3418b456:	f040 8094 	bne.w	3418b582 <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418b45a:	f7f8 ff15 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418b45e:	4603      	mov	r3, r0
3418b460:	4618      	mov	r0, r3
3418b462:	f7fd feb5 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418b466:	60f8      	str	r0, [r7, #12]
      break;
3418b468:	e090      	b.n	3418b58c <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b46a:	2007      	movs	r0, #7
3418b46c:	f7fe f99c 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418b470:	60f8      	str	r0, [r7, #12]
      break;
3418b472:	e08b      	b.n	3418b58c <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418b474:	f7fa fa40 	bl	341858f8 <LL_RCC_IC4_IsEnabled>
3418b478:	4603      	mov	r3, r0
3418b47a:	2b00      	cmp	r3, #0
3418b47c:	f000 8083 	beq.w	3418b586 <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418b480:	f7fa fa5c 	bl	3418593c <LL_RCC_IC4_GetDivider>
3418b484:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418b486:	f7fa fa4b 	bl	34185920 <LL_RCC_IC4_GetSource>
3418b48a:	4603      	mov	r3, r0
3418b48c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b490:	d029      	beq.n	3418b4e6 <RCCEx_GetSDMMCCLKFreq+0x102>
3418b492:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b496:	d82f      	bhi.n	3418b4f8 <RCCEx_GetSDMMCCLKFreq+0x114>
3418b498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b49c:	d01a      	beq.n	3418b4d4 <RCCEx_GetSDMMCCLKFreq+0xf0>
3418b49e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b4a2:	d829      	bhi.n	3418b4f8 <RCCEx_GetSDMMCCLKFreq+0x114>
3418b4a4:	2b00      	cmp	r3, #0
3418b4a6:	d003      	beq.n	3418b4b0 <RCCEx_GetSDMMCCLKFreq+0xcc>
3418b4a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b4ac:	d009      	beq.n	3418b4c2 <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b4ae:	e023      	b.n	3418b4f8 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b4b0:	f7fd fd76 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b4b4:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418b4b6:	68fa      	ldr	r2, [r7, #12]
3418b4b8:	68bb      	ldr	r3, [r7, #8]
3418b4ba:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4be:	60fb      	str	r3, [r7, #12]
            break;
3418b4c0:	e01b      	b.n	3418b4fa <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b4c2:	f7fd fdb3 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418b4c6:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418b4c8:	68fa      	ldr	r2, [r7, #12]
3418b4ca:	68bb      	ldr	r3, [r7, #8]
3418b4cc:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4d0:	60fb      	str	r3, [r7, #12]
            break;
3418b4d2:	e012      	b.n	3418b4fa <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b4d4:	f7fd fdf0 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b4d8:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418b4da:	68fa      	ldr	r2, [r7, #12]
3418b4dc:	68bb      	ldr	r3, [r7, #8]
3418b4de:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4e2:	60fb      	str	r3, [r7, #12]
            break;
3418b4e4:	e009      	b.n	3418b4fa <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b4e6:	f7fd fe2d 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418b4ea:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418b4ec:	68fa      	ldr	r2, [r7, #12]
3418b4ee:	68bb      	ldr	r3, [r7, #8]
3418b4f0:	fbb2 f3f3 	udiv	r3, r2, r3
3418b4f4:	60fb      	str	r3, [r7, #12]
            break;
3418b4f6:	e000      	b.n	3418b4fa <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
3418b4f8:	bf00      	nop
        }
      }
      break;
3418b4fa:	e044      	b.n	3418b586 <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
3418b4fc:	f7fa fa3c 	bl	34185978 <LL_RCC_IC5_IsEnabled>
3418b500:	4603      	mov	r3, r0
3418b502:	2b00      	cmp	r3, #0
3418b504:	d041      	beq.n	3418b58a <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
3418b506:	f7fa fa59 	bl	341859bc <LL_RCC_IC5_GetDivider>
3418b50a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
3418b50c:	f7fa fa48 	bl	341859a0 <LL_RCC_IC5_GetSource>
3418b510:	4603      	mov	r3, r0
3418b512:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b516:	d029      	beq.n	3418b56c <RCCEx_GetSDMMCCLKFreq+0x188>
3418b518:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b51c:	d82f      	bhi.n	3418b57e <RCCEx_GetSDMMCCLKFreq+0x19a>
3418b51e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b522:	d01a      	beq.n	3418b55a <RCCEx_GetSDMMCCLKFreq+0x176>
3418b524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b528:	d829      	bhi.n	3418b57e <RCCEx_GetSDMMCCLKFreq+0x19a>
3418b52a:	2b00      	cmp	r3, #0
3418b52c:	d003      	beq.n	3418b536 <RCCEx_GetSDMMCCLKFreq+0x152>
3418b52e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b532:	d009      	beq.n	3418b548 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b534:	e023      	b.n	3418b57e <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b536:	f7fd fd33 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b53a:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418b53c:	68fa      	ldr	r2, [r7, #12]
3418b53e:	68bb      	ldr	r3, [r7, #8]
3418b540:	fbb2 f3f3 	udiv	r3, r2, r3
3418b544:	60fb      	str	r3, [r7, #12]
            break;
3418b546:	e01b      	b.n	3418b580 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b548:	f7fd fd70 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418b54c:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418b54e:	68fa      	ldr	r2, [r7, #12]
3418b550:	68bb      	ldr	r3, [r7, #8]
3418b552:	fbb2 f3f3 	udiv	r3, r2, r3
3418b556:	60fb      	str	r3, [r7, #12]
            break;
3418b558:	e012      	b.n	3418b580 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b55a:	f7fd fdad 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b55e:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418b560:	68fa      	ldr	r2, [r7, #12]
3418b562:	68bb      	ldr	r3, [r7, #8]
3418b564:	fbb2 f3f3 	udiv	r3, r2, r3
3418b568:	60fb      	str	r3, [r7, #12]
            break;
3418b56a:	e009      	b.n	3418b580 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b56c:	f7fd fdea 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418b570:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418b572:	68fa      	ldr	r2, [r7, #12]
3418b574:	68bb      	ldr	r3, [r7, #8]
3418b576:	fbb2 f3f3 	udiv	r3, r2, r3
3418b57a:	60fb      	str	r3, [r7, #12]
            break;
3418b57c:	e000      	b.n	3418b580 <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
3418b57e:	bf00      	nop
        }
      }
      break;
3418b580:	e003      	b.n	3418b58a <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
3418b582:	bf00      	nop
3418b584:	e002      	b.n	3418b58c <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
3418b586:	bf00      	nop
3418b588:	e000      	b.n	3418b58c <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
3418b58a:	bf00      	nop
  }

  return sdmmc_frequency;
3418b58c:	68fb      	ldr	r3, [r7, #12]
}
3418b58e:	4618      	mov	r0, r3
3418b590:	3710      	adds	r7, #16
3418b592:	46bd      	mov	sp, r7
3418b594:	bd80      	pop	{r7, pc}
3418b596:	bf00      	nop
3418b598:	0303041c 	.word	0x0303041c
3418b59c:	0303001c 	.word	0x0303001c
3418b5a0:	0302041c 	.word	0x0302041c
3418b5a4:	0302001c 	.word	0x0302001c
3418b5a8:	0301041c 	.word	0x0301041c
3418b5ac:	0301001c 	.word	0x0301001c
3418b5b0:	0300001c 	.word	0x0300001c
3418b5b4:	0300041c 	.word	0x0300041c

3418b5b8 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
3418b5b8:	b580      	push	{r7, lr}
3418b5ba:	b084      	sub	sp, #16
3418b5bc:	af00      	add	r7, sp, #0
3418b5be:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b5c0:	2300      	movs	r3, #0
3418b5c2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
3418b5c4:	6878      	ldr	r0, [r7, #4]
3418b5c6:	f7f9 fe3d 	bl	34185244 <LL_RCC_GetSPDIFRXClockSource>
3418b5ca:	4603      	mov	r3, r0
3418b5cc:	2b06      	cmp	r3, #6
3418b5ce:	f200 80c2 	bhi.w	3418b756 <RCCEx_GetSPDIFRXCLKFreq+0x19e>
3418b5d2:	a201      	add	r2, pc, #4	@ (adr r2, 3418b5d8 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
3418b5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418b5d8:	3418b5f5 	.word	0x3418b5f5
3418b5dc:	3418b60d 	.word	0x3418b60d
3418b5e0:	3418b617 	.word	0x3418b617
3418b5e4:	3418b69f 	.word	0x3418b69f
3418b5e8:	3418b741 	.word	0x3418b741
3418b5ec:	3418b725 	.word	0x3418b725
3418b5f0:	3418b751 	.word	0x3418b751
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b5f4:	f7f8 fe48 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418b5f8:	4603      	mov	r3, r0
3418b5fa:	4618      	mov	r0, r3
3418b5fc:	f7fd fde8 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418b600:	4603      	mov	r3, r0
3418b602:	4618      	mov	r0, r3
3418b604:	f7fd fdf5 	bl	341891f2 <RCCEx_GetPCLK1Freq>
3418b608:	60f8      	str	r0, [r7, #12]
      break;
3418b60a:	e0ad      	b.n	3418b768 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b60c:	2007      	movs	r0, #7
3418b60e:	f7fe f8cb 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418b612:	60f8      	str	r0, [r7, #12]
      break;
3418b614:	e0a8      	b.n	3418b768 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418b616:	f7fa f9ef 	bl	341859f8 <LL_RCC_IC7_IsEnabled>
3418b61a:	4603      	mov	r3, r0
3418b61c:	2b00      	cmp	r3, #0
3418b61e:	f000 809c 	beq.w	3418b75a <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418b622:	f7fa fa0b 	bl	34185a3c <LL_RCC_IC7_GetDivider>
3418b626:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418b628:	f7fa f9fa 	bl	34185a20 <LL_RCC_IC7_GetSource>
3418b62c:	4603      	mov	r3, r0
3418b62e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b632:	d029      	beq.n	3418b688 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
3418b634:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b638:	d82f      	bhi.n	3418b69a <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3418b63a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b63e:	d01a      	beq.n	3418b676 <RCCEx_GetSPDIFRXCLKFreq+0xbe>
3418b640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b644:	d829      	bhi.n	3418b69a <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3418b646:	2b00      	cmp	r3, #0
3418b648:	d003      	beq.n	3418b652 <RCCEx_GetSPDIFRXCLKFreq+0x9a>
3418b64a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b64e:	d009      	beq.n	3418b664 <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b650:	e023      	b.n	3418b69a <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b652:	f7fd fca5 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b656:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418b658:	68fa      	ldr	r2, [r7, #12]
3418b65a:	68bb      	ldr	r3, [r7, #8]
3418b65c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b660:	60fb      	str	r3, [r7, #12]
            break;
3418b662:	e01b      	b.n	3418b69c <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b664:	f7fd fce2 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418b668:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418b66a:	68fa      	ldr	r2, [r7, #12]
3418b66c:	68bb      	ldr	r3, [r7, #8]
3418b66e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b672:	60fb      	str	r3, [r7, #12]
            break;
3418b674:	e012      	b.n	3418b69c <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b676:	f7fd fd1f 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b67a:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418b67c:	68fa      	ldr	r2, [r7, #12]
3418b67e:	68bb      	ldr	r3, [r7, #8]
3418b680:	fbb2 f3f3 	udiv	r3, r2, r3
3418b684:	60fb      	str	r3, [r7, #12]
            break;
3418b686:	e009      	b.n	3418b69c <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b688:	f7fd fd5c 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418b68c:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418b68e:	68fa      	ldr	r2, [r7, #12]
3418b690:	68bb      	ldr	r3, [r7, #8]
3418b692:	fbb2 f3f3 	udiv	r3, r2, r3
3418b696:	60fb      	str	r3, [r7, #12]
            break;
3418b698:	e000      	b.n	3418b69c <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
3418b69a:	bf00      	nop
        }
      }
      break;
3418b69c:	e05d      	b.n	3418b75a <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418b69e:	f7fa f9eb 	bl	34185a78 <LL_RCC_IC8_IsEnabled>
3418b6a2:	4603      	mov	r3, r0
3418b6a4:	2b00      	cmp	r3, #0
3418b6a6:	d05a      	beq.n	3418b75e <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418b6a8:	f7fa fa08 	bl	34185abc <LL_RCC_IC8_GetDivider>
3418b6ac:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418b6ae:	f7fa f9f7 	bl	34185aa0 <LL_RCC_IC8_GetSource>
3418b6b2:	4603      	mov	r3, r0
3418b6b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b6b8:	d029      	beq.n	3418b70e <RCCEx_GetSPDIFRXCLKFreq+0x156>
3418b6ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b6be:	d82f      	bhi.n	3418b720 <RCCEx_GetSPDIFRXCLKFreq+0x168>
3418b6c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b6c4:	d01a      	beq.n	3418b6fc <RCCEx_GetSPDIFRXCLKFreq+0x144>
3418b6c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b6ca:	d829      	bhi.n	3418b720 <RCCEx_GetSPDIFRXCLKFreq+0x168>
3418b6cc:	2b00      	cmp	r3, #0
3418b6ce:	d003      	beq.n	3418b6d8 <RCCEx_GetSPDIFRXCLKFreq+0x120>
3418b6d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b6d4:	d009      	beq.n	3418b6ea <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b6d6:	e023      	b.n	3418b720 <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b6d8:	f7fd fc62 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b6dc:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418b6de:	68fa      	ldr	r2, [r7, #12]
3418b6e0:	68bb      	ldr	r3, [r7, #8]
3418b6e2:	fbb2 f3f3 	udiv	r3, r2, r3
3418b6e6:	60fb      	str	r3, [r7, #12]
            break;
3418b6e8:	e01b      	b.n	3418b722 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b6ea:	f7fd fc9f 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418b6ee:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418b6f0:	68fa      	ldr	r2, [r7, #12]
3418b6f2:	68bb      	ldr	r3, [r7, #8]
3418b6f4:	fbb2 f3f3 	udiv	r3, r2, r3
3418b6f8:	60fb      	str	r3, [r7, #12]
            break;
3418b6fa:	e012      	b.n	3418b722 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b6fc:	f7fd fcdc 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b700:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418b702:	68fa      	ldr	r2, [r7, #12]
3418b704:	68bb      	ldr	r3, [r7, #8]
3418b706:	fbb2 f3f3 	udiv	r3, r2, r3
3418b70a:	60fb      	str	r3, [r7, #12]
            break;
3418b70c:	e009      	b.n	3418b722 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b70e:	f7fd fd19 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418b712:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418b714:	68fa      	ldr	r2, [r7, #12]
3418b716:	68bb      	ldr	r3, [r7, #8]
3418b718:	fbb2 f3f3 	udiv	r3, r2, r3
3418b71c:	60fb      	str	r3, [r7, #12]
            break;
3418b71e:	e000      	b.n	3418b722 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
3418b720:	bf00      	nop
        }
      }
      break;
3418b722:	e01c      	b.n	3418b75e <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418b724:	f7f9 f9c4 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418b728:	4603      	mov	r3, r0
3418b72a:	2b00      	cmp	r3, #0
3418b72c:	d019      	beq.n	3418b762 <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b72e:	f7f9 f9d1 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
3418b732:	4603      	mov	r3, r0
3418b734:	09db      	lsrs	r3, r3, #7
3418b736:	4a0f      	ldr	r2, [pc, #60]	@ (3418b774 <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
3418b738:	fa22 f303 	lsr.w	r3, r2, r3
3418b73c:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b73e:	e010      	b.n	3418b762 <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418b740:	f7f9 f9d6 	bl	34184af0 <LL_RCC_MSI_IsReady>
3418b744:	4603      	mov	r3, r0
3418b746:	2b00      	cmp	r3, #0
3418b748:	d00d      	beq.n	3418b766 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
3418b74a:	4b0b      	ldr	r3, [pc, #44]	@ (3418b778 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
3418b74c:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b74e:	e00a      	b.n	3418b766 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
3418b750:	4b0a      	ldr	r3, [pc, #40]	@ (3418b77c <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
3418b752:	60fb      	str	r3, [r7, #12]
      break;
3418b754:	e008      	b.n	3418b768 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
3418b756:	bf00      	nop
3418b758:	e006      	b.n	3418b768 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418b75a:	bf00      	nop
3418b75c:	e004      	b.n	3418b768 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418b75e:	bf00      	nop
3418b760:	e002      	b.n	3418b768 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418b762:	bf00      	nop
3418b764:	e000      	b.n	3418b768 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418b766:	bf00      	nop
  }

  return spdifrx_frequency;
3418b768:	68fb      	ldr	r3, [r7, #12]
}
3418b76a:	4618      	mov	r0, r3
3418b76c:	3710      	adds	r7, #16
3418b76e:	46bd      	mov	sp, r7
3418b770:	bd80      	pop	{r7, pc}
3418b772:	bf00      	nop
3418b774:	03d09000 	.word	0x03d09000
3418b778:	003d0900 	.word	0x003d0900
3418b77c:	00bb8000 	.word	0x00bb8000

3418b780 <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
3418b780:	b580      	push	{r7, lr}
3418b782:	b084      	sub	sp, #16
3418b784:	af00      	add	r7, sp, #0
3418b786:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b788:	2300      	movs	r3, #0
3418b78a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3418b78c:	6878      	ldr	r0, [r7, #4]
3418b78e:	f7f9 fd6b 	bl	34185268 <LL_RCC_GetSPIClockSource>
3418b792:	4603      	mov	r3, r0
3418b794:	4aa7      	ldr	r2, [pc, #668]	@ (3418ba34 <RCCEx_GetSPICLKFreq+0x2b4>)
3418b796:	4293      	cmp	r3, r2
3418b798:	f000 829e 	beq.w	3418bcd8 <RCCEx_GetSPICLKFreq+0x558>
3418b79c:	4aa5      	ldr	r2, [pc, #660]	@ (3418ba34 <RCCEx_GetSPICLKFreq+0x2b4>)
3418b79e:	4293      	cmp	r3, r2
3418b7a0:	f200 82a5 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b7a4:	4aa4      	ldr	r2, [pc, #656]	@ (3418ba38 <RCCEx_GetSPICLKFreq+0x2b8>)
3418b7a6:	4293      	cmp	r3, r2
3418b7a8:	f000 8299 	beq.w	3418bcde <RCCEx_GetSPICLKFreq+0x55e>
3418b7ac:	4aa2      	ldr	r2, [pc, #648]	@ (3418ba38 <RCCEx_GetSPICLKFreq+0x2b8>)
3418b7ae:	4293      	cmp	r3, r2
3418b7b0:	f200 829d 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b7b4:	4aa1      	ldr	r2, [pc, #644]	@ (3418ba3c <RCCEx_GetSPICLKFreq+0x2bc>)
3418b7b6:	4293      	cmp	r3, r2
3418b7b8:	f000 8291 	beq.w	3418bcde <RCCEx_GetSPICLKFreq+0x55e>
3418b7bc:	4a9f      	ldr	r2, [pc, #636]	@ (3418ba3c <RCCEx_GetSPICLKFreq+0x2bc>)
3418b7be:	4293      	cmp	r3, r2
3418b7c0:	f200 8295 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b7c4:	4a9e      	ldr	r2, [pc, #632]	@ (3418ba40 <RCCEx_GetSPICLKFreq+0x2c0>)
3418b7c6:	4293      	cmp	r3, r2
3418b7c8:	f000 8286 	beq.w	3418bcd8 <RCCEx_GetSPICLKFreq+0x558>
3418b7cc:	4a9c      	ldr	r2, [pc, #624]	@ (3418ba40 <RCCEx_GetSPICLKFreq+0x2c0>)
3418b7ce:	4293      	cmp	r3, r2
3418b7d0:	f200 828d 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b7d4:	4a9b      	ldr	r2, [pc, #620]	@ (3418ba44 <RCCEx_GetSPICLKFreq+0x2c4>)
3418b7d6:	4293      	cmp	r3, r2
3418b7d8:	f000 827e 	beq.w	3418bcd8 <RCCEx_GetSPICLKFreq+0x558>
3418b7dc:	4a99      	ldr	r2, [pc, #612]	@ (3418ba44 <RCCEx_GetSPICLKFreq+0x2c4>)
3418b7de:	4293      	cmp	r3, r2
3418b7e0:	f200 8285 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b7e4:	4a98      	ldr	r2, [pc, #608]	@ (3418ba48 <RCCEx_GetSPICLKFreq+0x2c8>)
3418b7e6:	4293      	cmp	r3, r2
3418b7e8:	f000 8276 	beq.w	3418bcd8 <RCCEx_GetSPICLKFreq+0x558>
3418b7ec:	4a96      	ldr	r2, [pc, #600]	@ (3418ba48 <RCCEx_GetSPICLKFreq+0x2c8>)
3418b7ee:	4293      	cmp	r3, r2
3418b7f0:	f200 827d 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b7f4:	4a95      	ldr	r2, [pc, #596]	@ (3418ba4c <RCCEx_GetSPICLKFreq+0x2cc>)
3418b7f6:	4293      	cmp	r3, r2
3418b7f8:	f000 8258 	beq.w	3418bcac <RCCEx_GetSPICLKFreq+0x52c>
3418b7fc:	4a93      	ldr	r2, [pc, #588]	@ (3418ba4c <RCCEx_GetSPICLKFreq+0x2cc>)
3418b7fe:	4293      	cmp	r3, r2
3418b800:	f200 8275 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b804:	4a92      	ldr	r2, [pc, #584]	@ (3418ba50 <RCCEx_GetSPICLKFreq+0x2d0>)
3418b806:	4293      	cmp	r3, r2
3418b808:	f000 8250 	beq.w	3418bcac <RCCEx_GetSPICLKFreq+0x52c>
3418b80c:	4a90      	ldr	r2, [pc, #576]	@ (3418ba50 <RCCEx_GetSPICLKFreq+0x2d0>)
3418b80e:	4293      	cmp	r3, r2
3418b810:	f200 826d 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b814:	4a8f      	ldr	r2, [pc, #572]	@ (3418ba54 <RCCEx_GetSPICLKFreq+0x2d4>)
3418b816:	4293      	cmp	r3, r2
3418b818:	f000 8248 	beq.w	3418bcac <RCCEx_GetSPICLKFreq+0x52c>
3418b81c:	4a8d      	ldr	r2, [pc, #564]	@ (3418ba54 <RCCEx_GetSPICLKFreq+0x2d4>)
3418b81e:	4293      	cmp	r3, r2
3418b820:	f200 8265 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b824:	4a8c      	ldr	r2, [pc, #560]	@ (3418ba58 <RCCEx_GetSPICLKFreq+0x2d8>)
3418b826:	4293      	cmp	r3, r2
3418b828:	f000 8240 	beq.w	3418bcac <RCCEx_GetSPICLKFreq+0x52c>
3418b82c:	4a8a      	ldr	r2, [pc, #552]	@ (3418ba58 <RCCEx_GetSPICLKFreq+0x2d8>)
3418b82e:	4293      	cmp	r3, r2
3418b830:	f200 825d 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b834:	4a89      	ldr	r2, [pc, #548]	@ (3418ba5c <RCCEx_GetSPICLKFreq+0x2dc>)
3418b836:	4293      	cmp	r3, r2
3418b838:	f000 8238 	beq.w	3418bcac <RCCEx_GetSPICLKFreq+0x52c>
3418b83c:	4a87      	ldr	r2, [pc, #540]	@ (3418ba5c <RCCEx_GetSPICLKFreq+0x2dc>)
3418b83e:	4293      	cmp	r3, r2
3418b840:	f200 8255 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b844:	4a86      	ldr	r2, [pc, #536]	@ (3418ba60 <RCCEx_GetSPICLKFreq+0x2e0>)
3418b846:	4293      	cmp	r3, r2
3418b848:	f000 8230 	beq.w	3418bcac <RCCEx_GetSPICLKFreq+0x52c>
3418b84c:	4a84      	ldr	r2, [pc, #528]	@ (3418ba60 <RCCEx_GetSPICLKFreq+0x2e0>)
3418b84e:	4293      	cmp	r3, r2
3418b850:	f200 824d 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b854:	4a83      	ldr	r2, [pc, #524]	@ (3418ba64 <RCCEx_GetSPICLKFreq+0x2e4>)
3418b856:	4293      	cmp	r3, r2
3418b858:	f000 8236 	beq.w	3418bcc8 <RCCEx_GetSPICLKFreq+0x548>
3418b85c:	4a81      	ldr	r2, [pc, #516]	@ (3418ba64 <RCCEx_GetSPICLKFreq+0x2e4>)
3418b85e:	4293      	cmp	r3, r2
3418b860:	f200 8245 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b864:	4a80      	ldr	r2, [pc, #512]	@ (3418ba68 <RCCEx_GetSPICLKFreq+0x2e8>)
3418b866:	4293      	cmp	r3, r2
3418b868:	f000 822e 	beq.w	3418bcc8 <RCCEx_GetSPICLKFreq+0x548>
3418b86c:	4a7e      	ldr	r2, [pc, #504]	@ (3418ba68 <RCCEx_GetSPICLKFreq+0x2e8>)
3418b86e:	4293      	cmp	r3, r2
3418b870:	f200 823d 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b874:	4a7d      	ldr	r2, [pc, #500]	@ (3418ba6c <RCCEx_GetSPICLKFreq+0x2ec>)
3418b876:	4293      	cmp	r3, r2
3418b878:	f000 8226 	beq.w	3418bcc8 <RCCEx_GetSPICLKFreq+0x548>
3418b87c:	4a7b      	ldr	r2, [pc, #492]	@ (3418ba6c <RCCEx_GetSPICLKFreq+0x2ec>)
3418b87e:	4293      	cmp	r3, r2
3418b880:	f200 8235 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b884:	4a7a      	ldr	r2, [pc, #488]	@ (3418ba70 <RCCEx_GetSPICLKFreq+0x2f0>)
3418b886:	4293      	cmp	r3, r2
3418b888:	f000 821e 	beq.w	3418bcc8 <RCCEx_GetSPICLKFreq+0x548>
3418b88c:	4a78      	ldr	r2, [pc, #480]	@ (3418ba70 <RCCEx_GetSPICLKFreq+0x2f0>)
3418b88e:	4293      	cmp	r3, r2
3418b890:	f200 822d 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b894:	4a77      	ldr	r2, [pc, #476]	@ (3418ba74 <RCCEx_GetSPICLKFreq+0x2f4>)
3418b896:	4293      	cmp	r3, r2
3418b898:	f000 8216 	beq.w	3418bcc8 <RCCEx_GetSPICLKFreq+0x548>
3418b89c:	4a75      	ldr	r2, [pc, #468]	@ (3418ba74 <RCCEx_GetSPICLKFreq+0x2f4>)
3418b89e:	4293      	cmp	r3, r2
3418b8a0:	f200 8225 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b8a4:	4a74      	ldr	r2, [pc, #464]	@ (3418ba78 <RCCEx_GetSPICLKFreq+0x2f8>)
3418b8a6:	4293      	cmp	r3, r2
3418b8a8:	f000 820e 	beq.w	3418bcc8 <RCCEx_GetSPICLKFreq+0x548>
3418b8ac:	4a72      	ldr	r2, [pc, #456]	@ (3418ba78 <RCCEx_GetSPICLKFreq+0x2f8>)
3418b8ae:	4293      	cmp	r3, r2
3418b8b0:	f200 821d 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b8b4:	4a71      	ldr	r2, [pc, #452]	@ (3418ba7c <RCCEx_GetSPICLKFreq+0x2fc>)
3418b8b6:	4293      	cmp	r3, r2
3418b8b8:	f000 8171 	beq.w	3418bb9e <RCCEx_GetSPICLKFreq+0x41e>
3418b8bc:	4a6f      	ldr	r2, [pc, #444]	@ (3418ba7c <RCCEx_GetSPICLKFreq+0x2fc>)
3418b8be:	4293      	cmp	r3, r2
3418b8c0:	f200 8215 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b8c4:	4a6e      	ldr	r2, [pc, #440]	@ (3418ba80 <RCCEx_GetSPICLKFreq+0x300>)
3418b8c6:	4293      	cmp	r3, r2
3418b8c8:	f000 81ad 	beq.w	3418bc26 <RCCEx_GetSPICLKFreq+0x4a6>
3418b8cc:	4a6c      	ldr	r2, [pc, #432]	@ (3418ba80 <RCCEx_GetSPICLKFreq+0x300>)
3418b8ce:	4293      	cmp	r3, r2
3418b8d0:	f200 820d 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b8d4:	4a6b      	ldr	r2, [pc, #428]	@ (3418ba84 <RCCEx_GetSPICLKFreq+0x304>)
3418b8d6:	4293      	cmp	r3, r2
3418b8d8:	f000 81a5 	beq.w	3418bc26 <RCCEx_GetSPICLKFreq+0x4a6>
3418b8dc:	4a69      	ldr	r2, [pc, #420]	@ (3418ba84 <RCCEx_GetSPICLKFreq+0x304>)
3418b8de:	4293      	cmp	r3, r2
3418b8e0:	f200 8205 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b8e4:	4a68      	ldr	r2, [pc, #416]	@ (3418ba88 <RCCEx_GetSPICLKFreq+0x308>)
3418b8e6:	4293      	cmp	r3, r2
3418b8e8:	f000 8159 	beq.w	3418bb9e <RCCEx_GetSPICLKFreq+0x41e>
3418b8ec:	4a66      	ldr	r2, [pc, #408]	@ (3418ba88 <RCCEx_GetSPICLKFreq+0x308>)
3418b8ee:	4293      	cmp	r3, r2
3418b8f0:	f200 81fd 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b8f4:	4a65      	ldr	r2, [pc, #404]	@ (3418ba8c <RCCEx_GetSPICLKFreq+0x30c>)
3418b8f6:	4293      	cmp	r3, r2
3418b8f8:	f000 8151 	beq.w	3418bb9e <RCCEx_GetSPICLKFreq+0x41e>
3418b8fc:	4a63      	ldr	r2, [pc, #396]	@ (3418ba8c <RCCEx_GetSPICLKFreq+0x30c>)
3418b8fe:	4293      	cmp	r3, r2
3418b900:	f200 81f5 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b904:	4a62      	ldr	r2, [pc, #392]	@ (3418ba90 <RCCEx_GetSPICLKFreq+0x310>)
3418b906:	4293      	cmp	r3, r2
3418b908:	f000 8149 	beq.w	3418bb9e <RCCEx_GetSPICLKFreq+0x41e>
3418b90c:	4a60      	ldr	r2, [pc, #384]	@ (3418ba90 <RCCEx_GetSPICLKFreq+0x310>)
3418b90e:	4293      	cmp	r3, r2
3418b910:	f200 81ed 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b914:	4a5f      	ldr	r2, [pc, #380]	@ (3418ba94 <RCCEx_GetSPICLKFreq+0x314>)
3418b916:	4293      	cmp	r3, r2
3418b918:	f000 80fd 	beq.w	3418bb16 <RCCEx_GetSPICLKFreq+0x396>
3418b91c:	4a5d      	ldr	r2, [pc, #372]	@ (3418ba94 <RCCEx_GetSPICLKFreq+0x314>)
3418b91e:	4293      	cmp	r3, r2
3418b920:	f200 81e5 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b924:	4a5c      	ldr	r2, [pc, #368]	@ (3418ba98 <RCCEx_GetSPICLKFreq+0x318>)
3418b926:	4293      	cmp	r3, r2
3418b928:	f000 8139 	beq.w	3418bb9e <RCCEx_GetSPICLKFreq+0x41e>
3418b92c:	4a5a      	ldr	r2, [pc, #360]	@ (3418ba98 <RCCEx_GetSPICLKFreq+0x318>)
3418b92e:	4293      	cmp	r3, r2
3418b930:	f200 81dd 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b934:	4a59      	ldr	r2, [pc, #356]	@ (3418ba9c <RCCEx_GetSPICLKFreq+0x31c>)
3418b936:	4293      	cmp	r3, r2
3418b938:	f000 8131 	beq.w	3418bb9e <RCCEx_GetSPICLKFreq+0x41e>
3418b93c:	4a57      	ldr	r2, [pc, #348]	@ (3418ba9c <RCCEx_GetSPICLKFreq+0x31c>)
3418b93e:	4293      	cmp	r3, r2
3418b940:	f200 81d5 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b944:	4a56      	ldr	r2, [pc, #344]	@ (3418baa0 <RCCEx_GetSPICLKFreq+0x320>)
3418b946:	4293      	cmp	r3, r2
3418b948:	f000 80e5 	beq.w	3418bb16 <RCCEx_GetSPICLKFreq+0x396>
3418b94c:	4a54      	ldr	r2, [pc, #336]	@ (3418baa0 <RCCEx_GetSPICLKFreq+0x320>)
3418b94e:	4293      	cmp	r3, r2
3418b950:	f200 81cd 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b954:	4a53      	ldr	r2, [pc, #332]	@ (3418baa4 <RCCEx_GetSPICLKFreq+0x324>)
3418b956:	4293      	cmp	r3, r2
3418b958:	f000 80dd 	beq.w	3418bb16 <RCCEx_GetSPICLKFreq+0x396>
3418b95c:	4a51      	ldr	r2, [pc, #324]	@ (3418baa4 <RCCEx_GetSPICLKFreq+0x324>)
3418b95e:	4293      	cmp	r3, r2
3418b960:	f200 81c5 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b964:	4a50      	ldr	r2, [pc, #320]	@ (3418baa8 <RCCEx_GetSPICLKFreq+0x328>)
3418b966:	4293      	cmp	r3, r2
3418b968:	f000 80d5 	beq.w	3418bb16 <RCCEx_GetSPICLKFreq+0x396>
3418b96c:	4a4e      	ldr	r2, [pc, #312]	@ (3418baa8 <RCCEx_GetSPICLKFreq+0x328>)
3418b96e:	4293      	cmp	r3, r2
3418b970:	f200 81bd 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b974:	4a4d      	ldr	r2, [pc, #308]	@ (3418baac <RCCEx_GetSPICLKFreq+0x32c>)
3418b976:	4293      	cmp	r3, r2
3418b978:	f000 80c8 	beq.w	3418bb0c <RCCEx_GetSPICLKFreq+0x38c>
3418b97c:	4a4b      	ldr	r2, [pc, #300]	@ (3418baac <RCCEx_GetSPICLKFreq+0x32c>)
3418b97e:	4293      	cmp	r3, r2
3418b980:	f200 81b5 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b984:	4a4a      	ldr	r2, [pc, #296]	@ (3418bab0 <RCCEx_GetSPICLKFreq+0x330>)
3418b986:	4293      	cmp	r3, r2
3418b988:	f000 80c0 	beq.w	3418bb0c <RCCEx_GetSPICLKFreq+0x38c>
3418b98c:	4a48      	ldr	r2, [pc, #288]	@ (3418bab0 <RCCEx_GetSPICLKFreq+0x330>)
3418b98e:	4293      	cmp	r3, r2
3418b990:	f200 81ad 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b994:	4a47      	ldr	r2, [pc, #284]	@ (3418bab4 <RCCEx_GetSPICLKFreq+0x334>)
3418b996:	4293      	cmp	r3, r2
3418b998:	f000 80b8 	beq.w	3418bb0c <RCCEx_GetSPICLKFreq+0x38c>
3418b99c:	4a45      	ldr	r2, [pc, #276]	@ (3418bab4 <RCCEx_GetSPICLKFreq+0x334>)
3418b99e:	4293      	cmp	r3, r2
3418b9a0:	f200 81a5 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b9a4:	4a44      	ldr	r2, [pc, #272]	@ (3418bab8 <RCCEx_GetSPICLKFreq+0x338>)
3418b9a6:	4293      	cmp	r3, r2
3418b9a8:	f000 80b0 	beq.w	3418bb0c <RCCEx_GetSPICLKFreq+0x38c>
3418b9ac:	4a42      	ldr	r2, [pc, #264]	@ (3418bab8 <RCCEx_GetSPICLKFreq+0x338>)
3418b9ae:	4293      	cmp	r3, r2
3418b9b0:	f200 819d 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b9b4:	4a41      	ldr	r2, [pc, #260]	@ (3418babc <RCCEx_GetSPICLKFreq+0x33c>)
3418b9b6:	4293      	cmp	r3, r2
3418b9b8:	f000 80a8 	beq.w	3418bb0c <RCCEx_GetSPICLKFreq+0x38c>
3418b9bc:	4a3f      	ldr	r2, [pc, #252]	@ (3418babc <RCCEx_GetSPICLKFreq+0x33c>)
3418b9be:	4293      	cmp	r3, r2
3418b9c0:	f200 8195 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b9c4:	4a3e      	ldr	r2, [pc, #248]	@ (3418bac0 <RCCEx_GetSPICLKFreq+0x340>)
3418b9c6:	4293      	cmp	r3, r2
3418b9c8:	f000 80a0 	beq.w	3418bb0c <RCCEx_GetSPICLKFreq+0x38c>
3418b9cc:	4a3c      	ldr	r2, [pc, #240]	@ (3418bac0 <RCCEx_GetSPICLKFreq+0x340>)
3418b9ce:	4293      	cmp	r3, r2
3418b9d0:	f200 818d 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b9d4:	4a3b      	ldr	r2, [pc, #236]	@ (3418bac4 <RCCEx_GetSPICLKFreq+0x344>)
3418b9d6:	4293      	cmp	r3, r2
3418b9d8:	f000 808c 	beq.w	3418baf4 <RCCEx_GetSPICLKFreq+0x374>
3418b9dc:	4a39      	ldr	r2, [pc, #228]	@ (3418bac4 <RCCEx_GetSPICLKFreq+0x344>)
3418b9de:	4293      	cmp	r3, r2
3418b9e0:	f200 8185 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b9e4:	4a38      	ldr	r2, [pc, #224]	@ (3418bac8 <RCCEx_GetSPICLKFreq+0x348>)
3418b9e6:	4293      	cmp	r3, r2
3418b9e8:	d078      	beq.n	3418badc <RCCEx_GetSPICLKFreq+0x35c>
3418b9ea:	4a37      	ldr	r2, [pc, #220]	@ (3418bac8 <RCCEx_GetSPICLKFreq+0x348>)
3418b9ec:	4293      	cmp	r3, r2
3418b9ee:	f200 817e 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418b9f2:	4a36      	ldr	r2, [pc, #216]	@ (3418bacc <RCCEx_GetSPICLKFreq+0x34c>)
3418b9f4:	4293      	cmp	r3, r2
3418b9f6:	d071      	beq.n	3418badc <RCCEx_GetSPICLKFreq+0x35c>
3418b9f8:	4a34      	ldr	r2, [pc, #208]	@ (3418bacc <RCCEx_GetSPICLKFreq+0x34c>)
3418b9fa:	4293      	cmp	r3, r2
3418b9fc:	f200 8177 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418ba00:	4a33      	ldr	r2, [pc, #204]	@ (3418bad0 <RCCEx_GetSPICLKFreq+0x350>)
3418ba02:	4293      	cmp	r3, r2
3418ba04:	d00a      	beq.n	3418ba1c <RCCEx_GetSPICLKFreq+0x29c>
3418ba06:	4a32      	ldr	r2, [pc, #200]	@ (3418bad0 <RCCEx_GetSPICLKFreq+0x350>)
3418ba08:	4293      	cmp	r3, r2
3418ba0a:	f200 8170 	bhi.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
3418ba0e:	4a31      	ldr	r2, [pc, #196]	@ (3418bad4 <RCCEx_GetSPICLKFreq+0x354>)
3418ba10:	4293      	cmp	r3, r2
3418ba12:	d063      	beq.n	3418badc <RCCEx_GetSPICLKFreq+0x35c>
3418ba14:	4a30      	ldr	r2, [pc, #192]	@ (3418bad8 <RCCEx_GetSPICLKFreq+0x358>)
3418ba16:	4293      	cmp	r3, r2
3418ba18:	f040 8169 	bne.w	3418bcee <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418ba1c:	f7f8 fc34 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418ba20:	4603      	mov	r3, r0
3418ba22:	4618      	mov	r0, r3
3418ba24:	f7fd fbd4 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418ba28:	4603      	mov	r3, r0
3418ba2a:	4618      	mov	r0, r3
3418ba2c:	f7fd fbe1 	bl	341891f2 <RCCEx_GetPCLK1Freq>
3418ba30:	60f8      	str	r0, [r7, #12]
      break;
3418ba32:	e169      	b.n	3418bd08 <RCCEx_GetSPICLKFreq+0x588>
3418ba34:	07061820 	.word	0x07061820
3418ba38:	07061420 	.word	0x07061420
3418ba3c:	07061020 	.word	0x07061020
3418ba40:	07060c20 	.word	0x07060c20
3418ba44:	07060820 	.word	0x07060820
3418ba48:	07060420 	.word	0x07060420
3418ba4c:	07051820 	.word	0x07051820
3418ba50:	07051420 	.word	0x07051420
3418ba54:	07051020 	.word	0x07051020
3418ba58:	07050c20 	.word	0x07050c20
3418ba5c:	07050820 	.word	0x07050820
3418ba60:	07050420 	.word	0x07050420
3418ba64:	07041820 	.word	0x07041820
3418ba68:	07041420 	.word	0x07041420
3418ba6c:	07041020 	.word	0x07041020
3418ba70:	07040c20 	.word	0x07040c20
3418ba74:	07040820 	.word	0x07040820
3418ba78:	07040420 	.word	0x07040420
3418ba7c:	07031820 	.word	0x07031820
3418ba80:	07031420 	.word	0x07031420
3418ba84:	07031020 	.word	0x07031020
3418ba88:	07030c20 	.word	0x07030c20
3418ba8c:	07030820 	.word	0x07030820
3418ba90:	07030420 	.word	0x07030420
3418ba94:	07021820 	.word	0x07021820
3418ba98:	07021420 	.word	0x07021420
3418ba9c:	07021020 	.word	0x07021020
3418baa0:	07020c20 	.word	0x07020c20
3418baa4:	07020820 	.word	0x07020820
3418baa8:	07020420 	.word	0x07020420
3418baac:	07011820 	.word	0x07011820
3418bab0:	07011420 	.word	0x07011420
3418bab4:	07011020 	.word	0x07011020
3418bab8:	07010c20 	.word	0x07010c20
3418babc:	07010820 	.word	0x07010820
3418bac0:	07010420 	.word	0x07010420
3418bac4:	07001820 	.word	0x07001820
3418bac8:	07001420 	.word	0x07001420
3418bacc:	07001020 	.word	0x07001020
3418bad0:	07000c20 	.word	0x07000c20
3418bad4:	07000420 	.word	0x07000420
3418bad8:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418badc:	f7f8 fbd4 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418bae0:	4603      	mov	r3, r0
3418bae2:	4618      	mov	r0, r3
3418bae4:	f7fd fb74 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418bae8:	4603      	mov	r3, r0
3418baea:	4618      	mov	r0, r3
3418baec:	f7fd fb91 	bl	34189212 <RCCEx_GetPCLK2Freq>
3418baf0:	60f8      	str	r0, [r7, #12]
      break;
3418baf2:	e109      	b.n	3418bd08 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418baf4:	f7f8 fbc8 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418baf8:	4603      	mov	r3, r0
3418bafa:	4618      	mov	r0, r3
3418bafc:	f7fd fb68 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418bb00:	4603      	mov	r3, r0
3418bb02:	4618      	mov	r0, r3
3418bb04:	f7fd fb96 	bl	34189234 <RCCEx_GetPCLK4Freq>
3418bb08:	60f8      	str	r0, [r7, #12]
      break;
3418bb0a:	e0fd      	b.n	3418bd08 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418bb0c:	2007      	movs	r0, #7
3418bb0e:	f7fd fe4b 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418bb12:	60f8      	str	r0, [r7, #12]
      break;
3418bb14:	e0f8      	b.n	3418bd08 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418bb16:	f7f9 ffaf 	bl	34185a78 <LL_RCC_IC8_IsEnabled>
3418bb1a:	4603      	mov	r3, r0
3418bb1c:	2b00      	cmp	r3, #0
3418bb1e:	f000 80e8 	beq.w	3418bcf2 <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418bb22:	f7f9 ffcb 	bl	34185abc <LL_RCC_IC8_GetDivider>
3418bb26:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418bb28:	f7f9 ffba 	bl	34185aa0 <LL_RCC_IC8_GetSource>
3418bb2c:	4603      	mov	r3, r0
3418bb2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bb32:	d029      	beq.n	3418bb88 <RCCEx_GetSPICLKFreq+0x408>
3418bb34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bb38:	d82f      	bhi.n	3418bb9a <RCCEx_GetSPICLKFreq+0x41a>
3418bb3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bb3e:	d01a      	beq.n	3418bb76 <RCCEx_GetSPICLKFreq+0x3f6>
3418bb40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bb44:	d829      	bhi.n	3418bb9a <RCCEx_GetSPICLKFreq+0x41a>
3418bb46:	2b00      	cmp	r3, #0
3418bb48:	d003      	beq.n	3418bb52 <RCCEx_GetSPICLKFreq+0x3d2>
3418bb4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bb4e:	d009      	beq.n	3418bb64 <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418bb50:	e023      	b.n	3418bb9a <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bb52:	f7fd fa25 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418bb56:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418bb58:	68fa      	ldr	r2, [r7, #12]
3418bb5a:	68bb      	ldr	r3, [r7, #8]
3418bb5c:	fbb2 f3f3 	udiv	r3, r2, r3
3418bb60:	60fb      	str	r3, [r7, #12]
            break;
3418bb62:	e01b      	b.n	3418bb9c <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bb64:	f7fd fa62 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418bb68:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418bb6a:	68fa      	ldr	r2, [r7, #12]
3418bb6c:	68bb      	ldr	r3, [r7, #8]
3418bb6e:	fbb2 f3f3 	udiv	r3, r2, r3
3418bb72:	60fb      	str	r3, [r7, #12]
            break;
3418bb74:	e012      	b.n	3418bb9c <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bb76:	f7fd fa9f 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418bb7a:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418bb7c:	68fa      	ldr	r2, [r7, #12]
3418bb7e:	68bb      	ldr	r3, [r7, #8]
3418bb80:	fbb2 f3f3 	udiv	r3, r2, r3
3418bb84:	60fb      	str	r3, [r7, #12]
            break;
3418bb86:	e009      	b.n	3418bb9c <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bb88:	f7fd fadc 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418bb8c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418bb8e:	68fa      	ldr	r2, [r7, #12]
3418bb90:	68bb      	ldr	r3, [r7, #8]
3418bb92:	fbb2 f3f3 	udiv	r3, r2, r3
3418bb96:	60fb      	str	r3, [r7, #12]
            break;
3418bb98:	e000      	b.n	3418bb9c <RCCEx_GetSPICLKFreq+0x41c>
            break;
3418bb9a:	bf00      	nop
        }
      }
      break;
3418bb9c:	e0a9      	b.n	3418bcf2 <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418bb9e:	f7f9 ffab 	bl	34185af8 <LL_RCC_IC9_IsEnabled>
3418bba2:	4603      	mov	r3, r0
3418bba4:	2b00      	cmp	r3, #0
3418bba6:	f000 80a6 	beq.w	3418bcf6 <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418bbaa:	f7f9 ffc7 	bl	34185b3c <LL_RCC_IC9_GetDivider>
3418bbae:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418bbb0:	f7f9 ffb6 	bl	34185b20 <LL_RCC_IC9_GetSource>
3418bbb4:	4603      	mov	r3, r0
3418bbb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bbba:	d029      	beq.n	3418bc10 <RCCEx_GetSPICLKFreq+0x490>
3418bbbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bbc0:	d82f      	bhi.n	3418bc22 <RCCEx_GetSPICLKFreq+0x4a2>
3418bbc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bbc6:	d01a      	beq.n	3418bbfe <RCCEx_GetSPICLKFreq+0x47e>
3418bbc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bbcc:	d829      	bhi.n	3418bc22 <RCCEx_GetSPICLKFreq+0x4a2>
3418bbce:	2b00      	cmp	r3, #0
3418bbd0:	d003      	beq.n	3418bbda <RCCEx_GetSPICLKFreq+0x45a>
3418bbd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bbd6:	d009      	beq.n	3418bbec <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418bbd8:	e023      	b.n	3418bc22 <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bbda:	f7fd f9e1 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418bbde:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418bbe0:	68fa      	ldr	r2, [r7, #12]
3418bbe2:	68bb      	ldr	r3, [r7, #8]
3418bbe4:	fbb2 f3f3 	udiv	r3, r2, r3
3418bbe8:	60fb      	str	r3, [r7, #12]
            break;
3418bbea:	e01b      	b.n	3418bc24 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bbec:	f7fd fa1e 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418bbf0:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418bbf2:	68fa      	ldr	r2, [r7, #12]
3418bbf4:	68bb      	ldr	r3, [r7, #8]
3418bbf6:	fbb2 f3f3 	udiv	r3, r2, r3
3418bbfa:	60fb      	str	r3, [r7, #12]
            break;
3418bbfc:	e012      	b.n	3418bc24 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bbfe:	f7fd fa5b 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418bc02:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418bc04:	68fa      	ldr	r2, [r7, #12]
3418bc06:	68bb      	ldr	r3, [r7, #8]
3418bc08:	fbb2 f3f3 	udiv	r3, r2, r3
3418bc0c:	60fb      	str	r3, [r7, #12]
            break;
3418bc0e:	e009      	b.n	3418bc24 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bc10:	f7fd fa98 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418bc14:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418bc16:	68fa      	ldr	r2, [r7, #12]
3418bc18:	68bb      	ldr	r3, [r7, #8]
3418bc1a:	fbb2 f3f3 	udiv	r3, r2, r3
3418bc1e:	60fb      	str	r3, [r7, #12]
            break;
3418bc20:	e000      	b.n	3418bc24 <RCCEx_GetSPICLKFreq+0x4a4>
            break;
3418bc22:	bf00      	nop
        }
      }
      break;
3418bc24:	e067      	b.n	3418bcf6 <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418bc26:	f7fa f867 	bl	34185cf8 <LL_RCC_IC14_IsEnabled>
3418bc2a:	4603      	mov	r3, r0
3418bc2c:	2b00      	cmp	r3, #0
3418bc2e:	d064      	beq.n	3418bcfa <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418bc30:	f7fa f884 	bl	34185d3c <LL_RCC_IC14_GetDivider>
3418bc34:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418bc36:	f7fa f873 	bl	34185d20 <LL_RCC_IC14_GetSource>
3418bc3a:	4603      	mov	r3, r0
3418bc3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bc40:	d029      	beq.n	3418bc96 <RCCEx_GetSPICLKFreq+0x516>
3418bc42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bc46:	d82f      	bhi.n	3418bca8 <RCCEx_GetSPICLKFreq+0x528>
3418bc48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bc4c:	d01a      	beq.n	3418bc84 <RCCEx_GetSPICLKFreq+0x504>
3418bc4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bc52:	d829      	bhi.n	3418bca8 <RCCEx_GetSPICLKFreq+0x528>
3418bc54:	2b00      	cmp	r3, #0
3418bc56:	d003      	beq.n	3418bc60 <RCCEx_GetSPICLKFreq+0x4e0>
3418bc58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bc5c:	d009      	beq.n	3418bc72 <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418bc5e:	e023      	b.n	3418bca8 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bc60:	f7fd f99e 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418bc64:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418bc66:	68fa      	ldr	r2, [r7, #12]
3418bc68:	68bb      	ldr	r3, [r7, #8]
3418bc6a:	fbb2 f3f3 	udiv	r3, r2, r3
3418bc6e:	60fb      	str	r3, [r7, #12]
            break;
3418bc70:	e01b      	b.n	3418bcaa <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bc72:	f7fd f9db 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418bc76:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418bc78:	68fa      	ldr	r2, [r7, #12]
3418bc7a:	68bb      	ldr	r3, [r7, #8]
3418bc7c:	fbb2 f3f3 	udiv	r3, r2, r3
3418bc80:	60fb      	str	r3, [r7, #12]
            break;
3418bc82:	e012      	b.n	3418bcaa <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bc84:	f7fd fa18 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418bc88:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418bc8a:	68fa      	ldr	r2, [r7, #12]
3418bc8c:	68bb      	ldr	r3, [r7, #8]
3418bc8e:	fbb2 f3f3 	udiv	r3, r2, r3
3418bc92:	60fb      	str	r3, [r7, #12]
            break;
3418bc94:	e009      	b.n	3418bcaa <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bc96:	f7fd fa55 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418bc9a:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418bc9c:	68fa      	ldr	r2, [r7, #12]
3418bc9e:	68bb      	ldr	r3, [r7, #8]
3418bca0:	fbb2 f3f3 	udiv	r3, r2, r3
3418bca4:	60fb      	str	r3, [r7, #12]
            break;
3418bca6:	e000      	b.n	3418bcaa <RCCEx_GetSPICLKFreq+0x52a>
            break;
3418bca8:	bf00      	nop
        }
      }
      break;
3418bcaa:	e026      	b.n	3418bcfa <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418bcac:	f7f8 ff00 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418bcb0:	4603      	mov	r3, r0
3418bcb2:	2b00      	cmp	r3, #0
3418bcb4:	d023      	beq.n	3418bcfe <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418bcb6:	f7f8 ff0d 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
3418bcba:	4603      	mov	r3, r0
3418bcbc:	09db      	lsrs	r3, r3, #7
3418bcbe:	4a15      	ldr	r2, [pc, #84]	@ (3418bd14 <RCCEx_GetSPICLKFreq+0x594>)
3418bcc0:	fa22 f303 	lsr.w	r3, r2, r3
3418bcc4:	60fb      	str	r3, [r7, #12]
      }
      break;
3418bcc6:	e01a      	b.n	3418bcfe <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418bcc8:	f7f8 ff12 	bl	34184af0 <LL_RCC_MSI_IsReady>
3418bccc:	4603      	mov	r3, r0
3418bcce:	2b00      	cmp	r3, #0
3418bcd0:	d017      	beq.n	3418bd02 <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
3418bcd2:	4b11      	ldr	r3, [pc, #68]	@ (3418bd18 <RCCEx_GetSPICLKFreq+0x598>)
3418bcd4:	60fb      	str	r3, [r7, #12]
      }
      break;
3418bcd6:	e014      	b.n	3418bd02 <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
3418bcd8:	4b10      	ldr	r3, [pc, #64]	@ (3418bd1c <RCCEx_GetSPICLKFreq+0x59c>)
3418bcda:	60fb      	str	r3, [r7, #12]
      break;
3418bcdc:	e014      	b.n	3418bd08 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3418bcde:	f7f8 fed5 	bl	34184a8c <LL_RCC_HSE_IsReady>
3418bce2:	4603      	mov	r3, r0
3418bce4:	2b00      	cmp	r3, #0
3418bce6:	d00e      	beq.n	3418bd06 <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
3418bce8:	4b0d      	ldr	r3, [pc, #52]	@ (3418bd20 <RCCEx_GetSPICLKFreq+0x5a0>)
3418bcea:	60fb      	str	r3, [r7, #12]
      }
      break;
3418bcec:	e00b      	b.n	3418bd06 <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
3418bcee:	bf00      	nop
3418bcf0:	e00a      	b.n	3418bd08 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418bcf2:	bf00      	nop
3418bcf4:	e008      	b.n	3418bd08 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418bcf6:	bf00      	nop
3418bcf8:	e006      	b.n	3418bd08 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418bcfa:	bf00      	nop
3418bcfc:	e004      	b.n	3418bd08 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418bcfe:	bf00      	nop
3418bd00:	e002      	b.n	3418bd08 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418bd02:	bf00      	nop
3418bd04:	e000      	b.n	3418bd08 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418bd06:	bf00      	nop
  }

  return spi_frequency;
3418bd08:	68fb      	ldr	r3, [r7, #12]
}
3418bd0a:	4618      	mov	r0, r3
3418bd0c:	3710      	adds	r7, #16
3418bd0e:	46bd      	mov	sp, r7
3418bd10:	bd80      	pop	{r7, pc}
3418bd12:	bf00      	nop
3418bd14:	03d09000 	.word	0x03d09000
3418bd18:	003d0900 	.word	0x003d0900
3418bd1c:	00bb8000 	.word	0x00bb8000
3418bd20:	02dc6c00 	.word	0x02dc6c00

3418bd24 <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
3418bd24:	b580      	push	{r7, lr}
3418bd26:	b084      	sub	sp, #16
3418bd28:	af00      	add	r7, sp, #0
3418bd2a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418bd2c:	2300      	movs	r3, #0
3418bd2e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3418bd30:	6878      	ldr	r0, [r7, #4]
3418bd32:	f7f9 fab1 	bl	34185298 <LL_RCC_GetUARTClockSource>
3418bd36:	4603      	mov	r3, r0
3418bd38:	4aa2      	ldr	r2, [pc, #648]	@ (3418bfc4 <RCCEx_GetUARTCLKFreq+0x2a0>)
3418bd3a:	4293      	cmp	r3, r2
3418bd3c:	f000 81e8 	beq.w	3418c110 <RCCEx_GetUARTCLKFreq+0x3ec>
3418bd40:	4aa0      	ldr	r2, [pc, #640]	@ (3418bfc4 <RCCEx_GetUARTCLKFreq+0x2a0>)
3418bd42:	4293      	cmp	r3, r2
3418bd44:	f200 8203 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bd48:	4a9f      	ldr	r2, [pc, #636]	@ (3418bfc8 <RCCEx_GetUARTCLKFreq+0x2a4>)
3418bd4a:	4293      	cmp	r3, r2
3418bd4c:	f000 81e0 	beq.w	3418c110 <RCCEx_GetUARTCLKFreq+0x3ec>
3418bd50:	4a9d      	ldr	r2, [pc, #628]	@ (3418bfc8 <RCCEx_GetUARTCLKFreq+0x2a4>)
3418bd52:	4293      	cmp	r3, r2
3418bd54:	f200 81fb 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bd58:	4a9c      	ldr	r2, [pc, #624]	@ (3418bfcc <RCCEx_GetUARTCLKFreq+0x2a8>)
3418bd5a:	4293      	cmp	r3, r2
3418bd5c:	f000 81d8 	beq.w	3418c110 <RCCEx_GetUARTCLKFreq+0x3ec>
3418bd60:	4a9a      	ldr	r2, [pc, #616]	@ (3418bfcc <RCCEx_GetUARTCLKFreq+0x2a8>)
3418bd62:	4293      	cmp	r3, r2
3418bd64:	f200 81f3 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bd68:	4a99      	ldr	r2, [pc, #612]	@ (3418bfd0 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418bd6a:	4293      	cmp	r3, r2
3418bd6c:	f000 81d0 	beq.w	3418c110 <RCCEx_GetUARTCLKFreq+0x3ec>
3418bd70:	4a97      	ldr	r2, [pc, #604]	@ (3418bfd0 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418bd72:	4293      	cmp	r3, r2
3418bd74:	f200 81eb 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bd78:	4a96      	ldr	r2, [pc, #600]	@ (3418bfd4 <RCCEx_GetUARTCLKFreq+0x2b0>)
3418bd7a:	4293      	cmp	r3, r2
3418bd7c:	f000 81c8 	beq.w	3418c110 <RCCEx_GetUARTCLKFreq+0x3ec>
3418bd80:	4a94      	ldr	r2, [pc, #592]	@ (3418bfd4 <RCCEx_GetUARTCLKFreq+0x2b0>)
3418bd82:	4293      	cmp	r3, r2
3418bd84:	f200 81e3 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bd88:	4a93      	ldr	r2, [pc, #588]	@ (3418bfd8 <RCCEx_GetUARTCLKFreq+0x2b4>)
3418bd8a:	4293      	cmp	r3, r2
3418bd8c:	f000 81ce 	beq.w	3418c12c <RCCEx_GetUARTCLKFreq+0x408>
3418bd90:	4a91      	ldr	r2, [pc, #580]	@ (3418bfd8 <RCCEx_GetUARTCLKFreq+0x2b4>)
3418bd92:	4293      	cmp	r3, r2
3418bd94:	f200 81db 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bd98:	4a90      	ldr	r2, [pc, #576]	@ (3418bfdc <RCCEx_GetUARTCLKFreq+0x2b8>)
3418bd9a:	4293      	cmp	r3, r2
3418bd9c:	f000 81c6 	beq.w	3418c12c <RCCEx_GetUARTCLKFreq+0x408>
3418bda0:	4a8e      	ldr	r2, [pc, #568]	@ (3418bfdc <RCCEx_GetUARTCLKFreq+0x2b8>)
3418bda2:	4293      	cmp	r3, r2
3418bda4:	f200 81d3 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bda8:	4a8d      	ldr	r2, [pc, #564]	@ (3418bfe0 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418bdaa:	4293      	cmp	r3, r2
3418bdac:	f000 81be 	beq.w	3418c12c <RCCEx_GetUARTCLKFreq+0x408>
3418bdb0:	4a8b      	ldr	r2, [pc, #556]	@ (3418bfe0 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418bdb2:	4293      	cmp	r3, r2
3418bdb4:	f200 81cb 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bdb8:	4a8a      	ldr	r2, [pc, #552]	@ (3418bfe4 <RCCEx_GetUARTCLKFreq+0x2c0>)
3418bdba:	4293      	cmp	r3, r2
3418bdbc:	f000 81b6 	beq.w	3418c12c <RCCEx_GetUARTCLKFreq+0x408>
3418bdc0:	4a88      	ldr	r2, [pc, #544]	@ (3418bfe4 <RCCEx_GetUARTCLKFreq+0x2c0>)
3418bdc2:	4293      	cmp	r3, r2
3418bdc4:	f200 81c3 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bdc8:	4a87      	ldr	r2, [pc, #540]	@ (3418bfe8 <RCCEx_GetUARTCLKFreq+0x2c4>)
3418bdca:	4293      	cmp	r3, r2
3418bdcc:	f000 81ae 	beq.w	3418c12c <RCCEx_GetUARTCLKFreq+0x408>
3418bdd0:	4a85      	ldr	r2, [pc, #532]	@ (3418bfe8 <RCCEx_GetUARTCLKFreq+0x2c4>)
3418bdd2:	4293      	cmp	r3, r2
3418bdd4:	f200 81bb 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bdd8:	4a84      	ldr	r2, [pc, #528]	@ (3418bfec <RCCEx_GetUARTCLKFreq+0x2c8>)
3418bdda:	4293      	cmp	r3, r2
3418bddc:	f000 81ae 	beq.w	3418c13c <RCCEx_GetUARTCLKFreq+0x418>
3418bde0:	4a82      	ldr	r2, [pc, #520]	@ (3418bfec <RCCEx_GetUARTCLKFreq+0x2c8>)
3418bde2:	4293      	cmp	r3, r2
3418bde4:	f200 81b3 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bde8:	4a81      	ldr	r2, [pc, #516]	@ (3418bff0 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418bdea:	4293      	cmp	r3, r2
3418bdec:	f000 81a6 	beq.w	3418c13c <RCCEx_GetUARTCLKFreq+0x418>
3418bdf0:	4a7f      	ldr	r2, [pc, #508]	@ (3418bff0 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418bdf2:	4293      	cmp	r3, r2
3418bdf4:	f200 81ab 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bdf8:	4a7e      	ldr	r2, [pc, #504]	@ (3418bff4 <RCCEx_GetUARTCLKFreq+0x2d0>)
3418bdfa:	4293      	cmp	r3, r2
3418bdfc:	f000 819e 	beq.w	3418c13c <RCCEx_GetUARTCLKFreq+0x418>
3418be00:	4a7c      	ldr	r2, [pc, #496]	@ (3418bff4 <RCCEx_GetUARTCLKFreq+0x2d0>)
3418be02:	4293      	cmp	r3, r2
3418be04:	f200 81a3 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418be08:	4a7b      	ldr	r2, [pc, #492]	@ (3418bff8 <RCCEx_GetUARTCLKFreq+0x2d4>)
3418be0a:	4293      	cmp	r3, r2
3418be0c:	f000 8196 	beq.w	3418c13c <RCCEx_GetUARTCLKFreq+0x418>
3418be10:	4a79      	ldr	r2, [pc, #484]	@ (3418bff8 <RCCEx_GetUARTCLKFreq+0x2d4>)
3418be12:	4293      	cmp	r3, r2
3418be14:	f200 819b 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418be18:	4a78      	ldr	r2, [pc, #480]	@ (3418bffc <RCCEx_GetUARTCLKFreq+0x2d8>)
3418be1a:	4293      	cmp	r3, r2
3418be1c:	f000 818e 	beq.w	3418c13c <RCCEx_GetUARTCLKFreq+0x418>
3418be20:	4a76      	ldr	r2, [pc, #472]	@ (3418bffc <RCCEx_GetUARTCLKFreq+0x2d8>)
3418be22:	4293      	cmp	r3, r2
3418be24:	f200 8193 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418be28:	4a75      	ldr	r2, [pc, #468]	@ (3418c000 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418be2a:	4293      	cmp	r3, r2
3418be2c:	f000 812d 	beq.w	3418c08a <RCCEx_GetUARTCLKFreq+0x366>
3418be30:	4a73      	ldr	r2, [pc, #460]	@ (3418c000 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418be32:	4293      	cmp	r3, r2
3418be34:	f200 818b 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418be38:	4a72      	ldr	r2, [pc, #456]	@ (3418c004 <RCCEx_GetUARTCLKFreq+0x2e0>)
3418be3a:	4293      	cmp	r3, r2
3418be3c:	f000 8125 	beq.w	3418c08a <RCCEx_GetUARTCLKFreq+0x366>
3418be40:	4a70      	ldr	r2, [pc, #448]	@ (3418c004 <RCCEx_GetUARTCLKFreq+0x2e0>)
3418be42:	4293      	cmp	r3, r2
3418be44:	f200 8183 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418be48:	4a6f      	ldr	r2, [pc, #444]	@ (3418c008 <RCCEx_GetUARTCLKFreq+0x2e4>)
3418be4a:	4293      	cmp	r3, r2
3418be4c:	f000 811d 	beq.w	3418c08a <RCCEx_GetUARTCLKFreq+0x366>
3418be50:	4a6d      	ldr	r2, [pc, #436]	@ (3418c008 <RCCEx_GetUARTCLKFreq+0x2e4>)
3418be52:	4293      	cmp	r3, r2
3418be54:	f200 817b 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418be58:	4a6c      	ldr	r2, [pc, #432]	@ (3418c00c <RCCEx_GetUARTCLKFreq+0x2e8>)
3418be5a:	4293      	cmp	r3, r2
3418be5c:	f000 8115 	beq.w	3418c08a <RCCEx_GetUARTCLKFreq+0x366>
3418be60:	4a6a      	ldr	r2, [pc, #424]	@ (3418c00c <RCCEx_GetUARTCLKFreq+0x2e8>)
3418be62:	4293      	cmp	r3, r2
3418be64:	f200 8173 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418be68:	4a69      	ldr	r2, [pc, #420]	@ (3418c010 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418be6a:	4293      	cmp	r3, r2
3418be6c:	f000 810d 	beq.w	3418c08a <RCCEx_GetUARTCLKFreq+0x366>
3418be70:	4a67      	ldr	r2, [pc, #412]	@ (3418c010 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418be72:	4293      	cmp	r3, r2
3418be74:	f200 816b 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418be78:	4a66      	ldr	r2, [pc, #408]	@ (3418c014 <RCCEx_GetUARTCLKFreq+0x2f0>)
3418be7a:	4293      	cmp	r3, r2
3418be7c:	d07b      	beq.n	3418bf76 <RCCEx_GetUARTCLKFreq+0x252>
3418be7e:	4a65      	ldr	r2, [pc, #404]	@ (3418c014 <RCCEx_GetUARTCLKFreq+0x2f0>)
3418be80:	4293      	cmp	r3, r2
3418be82:	f200 8164 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418be86:	4a64      	ldr	r2, [pc, #400]	@ (3418c018 <RCCEx_GetUARTCLKFreq+0x2f4>)
3418be88:	4293      	cmp	r3, r2
3418be8a:	d074      	beq.n	3418bf76 <RCCEx_GetUARTCLKFreq+0x252>
3418be8c:	4a62      	ldr	r2, [pc, #392]	@ (3418c018 <RCCEx_GetUARTCLKFreq+0x2f4>)
3418be8e:	4293      	cmp	r3, r2
3418be90:	f200 815d 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418be94:	4a61      	ldr	r2, [pc, #388]	@ (3418c01c <RCCEx_GetUARTCLKFreq+0x2f8>)
3418be96:	4293      	cmp	r3, r2
3418be98:	d06d      	beq.n	3418bf76 <RCCEx_GetUARTCLKFreq+0x252>
3418be9a:	4a60      	ldr	r2, [pc, #384]	@ (3418c01c <RCCEx_GetUARTCLKFreq+0x2f8>)
3418be9c:	4293      	cmp	r3, r2
3418be9e:	f200 8156 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bea2:	4a5f      	ldr	r2, [pc, #380]	@ (3418c020 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418bea4:	4293      	cmp	r3, r2
3418bea6:	d066      	beq.n	3418bf76 <RCCEx_GetUARTCLKFreq+0x252>
3418bea8:	4a5d      	ldr	r2, [pc, #372]	@ (3418c020 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418beaa:	4293      	cmp	r3, r2
3418beac:	f200 814f 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418beb0:	4a5c      	ldr	r2, [pc, #368]	@ (3418c024 <RCCEx_GetUARTCLKFreq+0x300>)
3418beb2:	4293      	cmp	r3, r2
3418beb4:	d05f      	beq.n	3418bf76 <RCCEx_GetUARTCLKFreq+0x252>
3418beb6:	4a5b      	ldr	r2, [pc, #364]	@ (3418c024 <RCCEx_GetUARTCLKFreq+0x300>)
3418beb8:	4293      	cmp	r3, r2
3418beba:	f200 8148 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bebe:	4a5a      	ldr	r2, [pc, #360]	@ (3418c028 <RCCEx_GetUARTCLKFreq+0x304>)
3418bec0:	4293      	cmp	r3, r2
3418bec2:	d053      	beq.n	3418bf6c <RCCEx_GetUARTCLKFreq+0x248>
3418bec4:	4a58      	ldr	r2, [pc, #352]	@ (3418c028 <RCCEx_GetUARTCLKFreq+0x304>)
3418bec6:	4293      	cmp	r3, r2
3418bec8:	f200 8141 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418becc:	4a57      	ldr	r2, [pc, #348]	@ (3418c02c <RCCEx_GetUARTCLKFreq+0x308>)
3418bece:	4293      	cmp	r3, r2
3418bed0:	d04c      	beq.n	3418bf6c <RCCEx_GetUARTCLKFreq+0x248>
3418bed2:	4a56      	ldr	r2, [pc, #344]	@ (3418c02c <RCCEx_GetUARTCLKFreq+0x308>)
3418bed4:	4293      	cmp	r3, r2
3418bed6:	f200 813a 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418beda:	4a55      	ldr	r2, [pc, #340]	@ (3418c030 <RCCEx_GetUARTCLKFreq+0x30c>)
3418bedc:	4293      	cmp	r3, r2
3418bede:	d045      	beq.n	3418bf6c <RCCEx_GetUARTCLKFreq+0x248>
3418bee0:	4a53      	ldr	r2, [pc, #332]	@ (3418c030 <RCCEx_GetUARTCLKFreq+0x30c>)
3418bee2:	4293      	cmp	r3, r2
3418bee4:	f200 8133 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bee8:	4a52      	ldr	r2, [pc, #328]	@ (3418c034 <RCCEx_GetUARTCLKFreq+0x310>)
3418beea:	4293      	cmp	r3, r2
3418beec:	d03e      	beq.n	3418bf6c <RCCEx_GetUARTCLKFreq+0x248>
3418beee:	4a51      	ldr	r2, [pc, #324]	@ (3418c034 <RCCEx_GetUARTCLKFreq+0x310>)
3418bef0:	4293      	cmp	r3, r2
3418bef2:	f200 812c 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bef6:	4a50      	ldr	r2, [pc, #320]	@ (3418c038 <RCCEx_GetUARTCLKFreq+0x314>)
3418bef8:	4293      	cmp	r3, r2
3418befa:	d037      	beq.n	3418bf6c <RCCEx_GetUARTCLKFreq+0x248>
3418befc:	4a4e      	ldr	r2, [pc, #312]	@ (3418c038 <RCCEx_GetUARTCLKFreq+0x314>)
3418befe:	4293      	cmp	r3, r2
3418bf00:	f200 8125 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bf04:	4a4d      	ldr	r2, [pc, #308]	@ (3418c03c <RCCEx_GetUARTCLKFreq+0x318>)
3418bf06:	4293      	cmp	r3, r2
3418bf08:	d018      	beq.n	3418bf3c <RCCEx_GetUARTCLKFreq+0x218>
3418bf0a:	4a4c      	ldr	r2, [pc, #304]	@ (3418c03c <RCCEx_GetUARTCLKFreq+0x318>)
3418bf0c:	4293      	cmp	r3, r2
3418bf0e:	f200 811e 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bf12:	4a4b      	ldr	r2, [pc, #300]	@ (3418c040 <RCCEx_GetUARTCLKFreq+0x31c>)
3418bf14:	4293      	cmp	r3, r2
3418bf16:	d011      	beq.n	3418bf3c <RCCEx_GetUARTCLKFreq+0x218>
3418bf18:	4a49      	ldr	r2, [pc, #292]	@ (3418c040 <RCCEx_GetUARTCLKFreq+0x31c>)
3418bf1a:	4293      	cmp	r3, r2
3418bf1c:	f200 8117 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bf20:	4a48      	ldr	r2, [pc, #288]	@ (3418c044 <RCCEx_GetUARTCLKFreq+0x320>)
3418bf22:	4293      	cmp	r3, r2
3418bf24:	d00a      	beq.n	3418bf3c <RCCEx_GetUARTCLKFreq+0x218>
3418bf26:	4a47      	ldr	r2, [pc, #284]	@ (3418c044 <RCCEx_GetUARTCLKFreq+0x320>)
3418bf28:	4293      	cmp	r3, r2
3418bf2a:	f200 8110 	bhi.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
3418bf2e:	4a46      	ldr	r2, [pc, #280]	@ (3418c048 <RCCEx_GetUARTCLKFreq+0x324>)
3418bf30:	4293      	cmp	r3, r2
3418bf32:	d00f      	beq.n	3418bf54 <RCCEx_GetUARTCLKFreq+0x230>
3418bf34:	4a45      	ldr	r2, [pc, #276]	@ (3418c04c <RCCEx_GetUARTCLKFreq+0x328>)
3418bf36:	4293      	cmp	r3, r2
3418bf38:	f040 8109 	bne.w	3418c14e <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418bf3c:	f7f8 f9a4 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418bf40:	4603      	mov	r3, r0
3418bf42:	4618      	mov	r0, r3
3418bf44:	f7fd f944 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418bf48:	4603      	mov	r3, r0
3418bf4a:	4618      	mov	r0, r3
3418bf4c:	f7fd f951 	bl	341891f2 <RCCEx_GetPCLK1Freq>
3418bf50:	60f8      	str	r0, [r7, #12]
      break;
3418bf52:	e107      	b.n	3418c164 <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418bf54:	f7f8 f998 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418bf58:	4603      	mov	r3, r0
3418bf5a:	4618      	mov	r0, r3
3418bf5c:	f7fd f938 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418bf60:	4603      	mov	r3, r0
3418bf62:	4618      	mov	r0, r3
3418bf64:	f7fd f955 	bl	34189212 <RCCEx_GetPCLK2Freq>
3418bf68:	60f8      	str	r0, [r7, #12]
      break;
3418bf6a:	e0fb      	b.n	3418c164 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418bf6c:	2007      	movs	r0, #7
3418bf6e:	f7fd fc1b 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418bf72:	60f8      	str	r0, [r7, #12]
      break;
3418bf74:	e0f6      	b.n	3418c164 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418bf76:	f7f9 fdbf 	bl	34185af8 <LL_RCC_IC9_IsEnabled>
3418bf7a:	4603      	mov	r3, r0
3418bf7c:	2b00      	cmp	r3, #0
3418bf7e:	f000 80e8 	beq.w	3418c152 <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418bf82:	f7f9 fddb 	bl	34185b3c <LL_RCC_IC9_GetDivider>
3418bf86:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418bf88:	f7f9 fdca 	bl	34185b20 <LL_RCC_IC9_GetSource>
3418bf8c:	4603      	mov	r3, r0
3418bf8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bf92:	d06f      	beq.n	3418c074 <RCCEx_GetUARTCLKFreq+0x350>
3418bf94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bf98:	d875      	bhi.n	3418c086 <RCCEx_GetUARTCLKFreq+0x362>
3418bf9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bf9e:	d060      	beq.n	3418c062 <RCCEx_GetUARTCLKFreq+0x33e>
3418bfa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bfa4:	d86f      	bhi.n	3418c086 <RCCEx_GetUARTCLKFreq+0x362>
3418bfa6:	2b00      	cmp	r3, #0
3418bfa8:	d003      	beq.n	3418bfb2 <RCCEx_GetUARTCLKFreq+0x28e>
3418bfaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bfae:	d04f      	beq.n	3418c050 <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418bfb0:	e069      	b.n	3418c086 <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bfb2:	f7fc fff5 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418bfb6:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418bfb8:	68fa      	ldr	r2, [r7, #12]
3418bfba:	68bb      	ldr	r3, [r7, #8]
3418bfbc:	fbb2 f3f3 	udiv	r3, r2, r3
3418bfc0:	60fb      	str	r3, [r7, #12]
            break;
3418bfc2:	e061      	b.n	3418c088 <RCCEx_GetUARTCLKFreq+0x364>
3418bfc4:	07061c30 	.word	0x07061c30
3418bfc8:	07061830 	.word	0x07061830
3418bfcc:	07061030 	.word	0x07061030
3418bfd0:	07060c30 	.word	0x07060c30
3418bfd4:	07060034 	.word	0x07060034
3418bfd8:	07051c30 	.word	0x07051c30
3418bfdc:	07051830 	.word	0x07051830
3418bfe0:	07051030 	.word	0x07051030
3418bfe4:	07050c30 	.word	0x07050c30
3418bfe8:	07050034 	.word	0x07050034
3418bfec:	07041c30 	.word	0x07041c30
3418bff0:	07041830 	.word	0x07041830
3418bff4:	07041030 	.word	0x07041030
3418bff8:	07040c30 	.word	0x07040c30
3418bffc:	07040034 	.word	0x07040034
3418c000:	07031c30 	.word	0x07031c30
3418c004:	07031830 	.word	0x07031830
3418c008:	07031030 	.word	0x07031030
3418c00c:	07030c30 	.word	0x07030c30
3418c010:	07030034 	.word	0x07030034
3418c014:	07021c30 	.word	0x07021c30
3418c018:	07021830 	.word	0x07021830
3418c01c:	07021030 	.word	0x07021030
3418c020:	07020c30 	.word	0x07020c30
3418c024:	07020034 	.word	0x07020034
3418c028:	07011c30 	.word	0x07011c30
3418c02c:	07011830 	.word	0x07011830
3418c030:	07011030 	.word	0x07011030
3418c034:	07010c30 	.word	0x07010c30
3418c038:	07010034 	.word	0x07010034
3418c03c:	07001c30 	.word	0x07001c30
3418c040:	07001830 	.word	0x07001830
3418c044:	07001030 	.word	0x07001030
3418c048:	07000034 	.word	0x07000034
3418c04c:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c050:	f7fc ffec 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418c054:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418c056:	68fa      	ldr	r2, [r7, #12]
3418c058:	68bb      	ldr	r3, [r7, #8]
3418c05a:	fbb2 f3f3 	udiv	r3, r2, r3
3418c05e:	60fb      	str	r3, [r7, #12]
            break;
3418c060:	e012      	b.n	3418c088 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c062:	f7fd f829 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c066:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418c068:	68fa      	ldr	r2, [r7, #12]
3418c06a:	68bb      	ldr	r3, [r7, #8]
3418c06c:	fbb2 f3f3 	udiv	r3, r2, r3
3418c070:	60fb      	str	r3, [r7, #12]
            break;
3418c072:	e009      	b.n	3418c088 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c074:	f7fd f866 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418c078:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418c07a:	68fa      	ldr	r2, [r7, #12]
3418c07c:	68bb      	ldr	r3, [r7, #8]
3418c07e:	fbb2 f3f3 	udiv	r3, r2, r3
3418c082:	60fb      	str	r3, [r7, #12]
            break;
3418c084:	e000      	b.n	3418c088 <RCCEx_GetUARTCLKFreq+0x364>
            break;
3418c086:	bf00      	nop
        }
      }
      break;
3418c088:	e063      	b.n	3418c152 <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418c08a:	f7f9 fe35 	bl	34185cf8 <LL_RCC_IC14_IsEnabled>
3418c08e:	4603      	mov	r3, r0
3418c090:	2b00      	cmp	r3, #0
3418c092:	d060      	beq.n	3418c156 <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418c094:	f7f9 fe52 	bl	34185d3c <LL_RCC_IC14_GetDivider>
3418c098:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418c09a:	f7f9 fe41 	bl	34185d20 <LL_RCC_IC14_GetSource>
3418c09e:	4603      	mov	r3, r0
3418c0a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c0a4:	d029      	beq.n	3418c0fa <RCCEx_GetUARTCLKFreq+0x3d6>
3418c0a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c0aa:	d82f      	bhi.n	3418c10c <RCCEx_GetUARTCLKFreq+0x3e8>
3418c0ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c0b0:	d01a      	beq.n	3418c0e8 <RCCEx_GetUARTCLKFreq+0x3c4>
3418c0b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c0b6:	d829      	bhi.n	3418c10c <RCCEx_GetUARTCLKFreq+0x3e8>
3418c0b8:	2b00      	cmp	r3, #0
3418c0ba:	d003      	beq.n	3418c0c4 <RCCEx_GetUARTCLKFreq+0x3a0>
3418c0bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c0c0:	d009      	beq.n	3418c0d6 <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418c0c2:	e023      	b.n	3418c10c <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c0c4:	f7fc ff6c 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c0c8:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418c0ca:	68fa      	ldr	r2, [r7, #12]
3418c0cc:	68bb      	ldr	r3, [r7, #8]
3418c0ce:	fbb2 f3f3 	udiv	r3, r2, r3
3418c0d2:	60fb      	str	r3, [r7, #12]
            break;
3418c0d4:	e01b      	b.n	3418c10e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c0d6:	f7fc ffa9 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418c0da:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418c0dc:	68fa      	ldr	r2, [r7, #12]
3418c0de:	68bb      	ldr	r3, [r7, #8]
3418c0e0:	fbb2 f3f3 	udiv	r3, r2, r3
3418c0e4:	60fb      	str	r3, [r7, #12]
            break;
3418c0e6:	e012      	b.n	3418c10e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c0e8:	f7fc ffe6 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c0ec:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418c0ee:	68fa      	ldr	r2, [r7, #12]
3418c0f0:	68bb      	ldr	r3, [r7, #8]
3418c0f2:	fbb2 f3f3 	udiv	r3, r2, r3
3418c0f6:	60fb      	str	r3, [r7, #12]
            break;
3418c0f8:	e009      	b.n	3418c10e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c0fa:	f7fd f823 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418c0fe:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418c100:	68fa      	ldr	r2, [r7, #12]
3418c102:	68bb      	ldr	r3, [r7, #8]
3418c104:	fbb2 f3f3 	udiv	r3, r2, r3
3418c108:	60fb      	str	r3, [r7, #12]
            break;
3418c10a:	e000      	b.n	3418c10e <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
3418c10c:	bf00      	nop
        }
      }
      break;
3418c10e:	e022      	b.n	3418c156 <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418c110:	f7f8 fcce 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418c114:	4603      	mov	r3, r0
3418c116:	2b00      	cmp	r3, #0
3418c118:	d01f      	beq.n	3418c15a <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418c11a:	f7f8 fcdb 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
3418c11e:	4603      	mov	r3, r0
3418c120:	09db      	lsrs	r3, r3, #7
3418c122:	4a13      	ldr	r2, [pc, #76]	@ (3418c170 <RCCEx_GetUARTCLKFreq+0x44c>)
3418c124:	fa22 f303 	lsr.w	r3, r2, r3
3418c128:	60fb      	str	r3, [r7, #12]
      }
      break;
3418c12a:	e016      	b.n	3418c15a <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418c12c:	f7f8 fce0 	bl	34184af0 <LL_RCC_MSI_IsReady>
3418c130:	4603      	mov	r3, r0
3418c132:	2b00      	cmp	r3, #0
3418c134:	d013      	beq.n	3418c15e <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
3418c136:	4b0f      	ldr	r3, [pc, #60]	@ (3418c174 <RCCEx_GetUARTCLKFreq+0x450>)
3418c138:	60fb      	str	r3, [r7, #12]
      }
      break;
3418c13a:	e010      	b.n	3418c15e <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
3418c13c:	f7f8 fcf8 	bl	34184b30 <LL_RCC_LSE_IsReady>
3418c140:	4603      	mov	r3, r0
3418c142:	2b00      	cmp	r3, #0
3418c144:	d00d      	beq.n	3418c162 <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
3418c146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418c14a:	60fb      	str	r3, [r7, #12]
      }
      break;
3418c14c:	e009      	b.n	3418c162 <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
3418c14e:	bf00      	nop
3418c150:	e008      	b.n	3418c164 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418c152:	bf00      	nop
3418c154:	e006      	b.n	3418c164 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418c156:	bf00      	nop
3418c158:	e004      	b.n	3418c164 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418c15a:	bf00      	nop
3418c15c:	e002      	b.n	3418c164 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418c15e:	bf00      	nop
3418c160:	e000      	b.n	3418c164 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418c162:	bf00      	nop
  }

  return uart_frequency;
3418c164:	68fb      	ldr	r3, [r7, #12]
}
3418c166:	4618      	mov	r0, r3
3418c168:	3710      	adds	r7, #16
3418c16a:	46bd      	mov	sp, r7
3418c16c:	bd80      	pop	{r7, pc}
3418c16e:	bf00      	nop
3418c170:	03d09000 	.word	0x03d09000
3418c174:	003d0900 	.word	0x003d0900

3418c178 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
3418c178:	b580      	push	{r7, lr}
3418c17a:	b084      	sub	sp, #16
3418c17c:	af00      	add	r7, sp, #0
3418c17e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c180:	2300      	movs	r3, #0
3418c182:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3418c184:	6878      	ldr	r0, [r7, #4]
3418c186:	f7f9 f87b 	bl	34185280 <LL_RCC_GetUSARTClockSource>
3418c18a:	4603      	mov	r3, r0
3418c18c:	4aa2      	ldr	r2, [pc, #648]	@ (3418c418 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418c18e:	4293      	cmp	r3, r2
3418c190:	f000 81e8 	beq.w	3418c564 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418c194:	4aa0      	ldr	r2, [pc, #640]	@ (3418c418 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418c196:	4293      	cmp	r3, r2
3418c198:	f200 8203 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c19c:	4a9f      	ldr	r2, [pc, #636]	@ (3418c41c <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418c19e:	4293      	cmp	r3, r2
3418c1a0:	f000 81e0 	beq.w	3418c564 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418c1a4:	4a9d      	ldr	r2, [pc, #628]	@ (3418c41c <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418c1a6:	4293      	cmp	r3, r2
3418c1a8:	f200 81fb 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c1ac:	4a9c      	ldr	r2, [pc, #624]	@ (3418c420 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418c1ae:	4293      	cmp	r3, r2
3418c1b0:	f000 81d8 	beq.w	3418c564 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418c1b4:	4a9a      	ldr	r2, [pc, #616]	@ (3418c420 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418c1b6:	4293      	cmp	r3, r2
3418c1b8:	f200 81f3 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c1bc:	4a99      	ldr	r2, [pc, #612]	@ (3418c424 <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418c1be:	4293      	cmp	r3, r2
3418c1c0:	f000 81d0 	beq.w	3418c564 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418c1c4:	4a97      	ldr	r2, [pc, #604]	@ (3418c424 <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418c1c6:	4293      	cmp	r3, r2
3418c1c8:	f200 81eb 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c1cc:	4a96      	ldr	r2, [pc, #600]	@ (3418c428 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418c1ce:	4293      	cmp	r3, r2
3418c1d0:	f000 81c8 	beq.w	3418c564 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418c1d4:	4a94      	ldr	r2, [pc, #592]	@ (3418c428 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418c1d6:	4293      	cmp	r3, r2
3418c1d8:	f200 81e3 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c1dc:	4a93      	ldr	r2, [pc, #588]	@ (3418c42c <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418c1de:	4293      	cmp	r3, r2
3418c1e0:	f000 81ce 	beq.w	3418c580 <RCCEx_GetUSARTCLKFreq+0x408>
3418c1e4:	4a91      	ldr	r2, [pc, #580]	@ (3418c42c <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418c1e6:	4293      	cmp	r3, r2
3418c1e8:	f200 81db 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c1ec:	4a90      	ldr	r2, [pc, #576]	@ (3418c430 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418c1ee:	4293      	cmp	r3, r2
3418c1f0:	f000 81c6 	beq.w	3418c580 <RCCEx_GetUSARTCLKFreq+0x408>
3418c1f4:	4a8e      	ldr	r2, [pc, #568]	@ (3418c430 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418c1f6:	4293      	cmp	r3, r2
3418c1f8:	f200 81d3 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c1fc:	4a8d      	ldr	r2, [pc, #564]	@ (3418c434 <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418c1fe:	4293      	cmp	r3, r2
3418c200:	f000 81be 	beq.w	3418c580 <RCCEx_GetUSARTCLKFreq+0x408>
3418c204:	4a8b      	ldr	r2, [pc, #556]	@ (3418c434 <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418c206:	4293      	cmp	r3, r2
3418c208:	f200 81cb 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c20c:	4a8a      	ldr	r2, [pc, #552]	@ (3418c438 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418c20e:	4293      	cmp	r3, r2
3418c210:	f000 81b6 	beq.w	3418c580 <RCCEx_GetUSARTCLKFreq+0x408>
3418c214:	4a88      	ldr	r2, [pc, #544]	@ (3418c438 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418c216:	4293      	cmp	r3, r2
3418c218:	f200 81c3 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c21c:	4a87      	ldr	r2, [pc, #540]	@ (3418c43c <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418c21e:	4293      	cmp	r3, r2
3418c220:	f000 81ae 	beq.w	3418c580 <RCCEx_GetUSARTCLKFreq+0x408>
3418c224:	4a85      	ldr	r2, [pc, #532]	@ (3418c43c <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418c226:	4293      	cmp	r3, r2
3418c228:	f200 81bb 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c22c:	4a84      	ldr	r2, [pc, #528]	@ (3418c440 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418c22e:	4293      	cmp	r3, r2
3418c230:	f000 81ae 	beq.w	3418c590 <RCCEx_GetUSARTCLKFreq+0x418>
3418c234:	4a82      	ldr	r2, [pc, #520]	@ (3418c440 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418c236:	4293      	cmp	r3, r2
3418c238:	f200 81b3 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c23c:	4a81      	ldr	r2, [pc, #516]	@ (3418c444 <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418c23e:	4293      	cmp	r3, r2
3418c240:	f000 81a6 	beq.w	3418c590 <RCCEx_GetUSARTCLKFreq+0x418>
3418c244:	4a7f      	ldr	r2, [pc, #508]	@ (3418c444 <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418c246:	4293      	cmp	r3, r2
3418c248:	f200 81ab 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c24c:	4a7e      	ldr	r2, [pc, #504]	@ (3418c448 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418c24e:	4293      	cmp	r3, r2
3418c250:	f000 819e 	beq.w	3418c590 <RCCEx_GetUSARTCLKFreq+0x418>
3418c254:	4a7c      	ldr	r2, [pc, #496]	@ (3418c448 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418c256:	4293      	cmp	r3, r2
3418c258:	f200 81a3 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c25c:	4a7b      	ldr	r2, [pc, #492]	@ (3418c44c <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418c25e:	4293      	cmp	r3, r2
3418c260:	f000 8196 	beq.w	3418c590 <RCCEx_GetUSARTCLKFreq+0x418>
3418c264:	4a79      	ldr	r2, [pc, #484]	@ (3418c44c <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418c266:	4293      	cmp	r3, r2
3418c268:	f200 819b 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c26c:	4a78      	ldr	r2, [pc, #480]	@ (3418c450 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418c26e:	4293      	cmp	r3, r2
3418c270:	f000 818e 	beq.w	3418c590 <RCCEx_GetUSARTCLKFreq+0x418>
3418c274:	4a76      	ldr	r2, [pc, #472]	@ (3418c450 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418c276:	4293      	cmp	r3, r2
3418c278:	f200 8193 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c27c:	4a75      	ldr	r2, [pc, #468]	@ (3418c454 <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418c27e:	4293      	cmp	r3, r2
3418c280:	f000 812d 	beq.w	3418c4de <RCCEx_GetUSARTCLKFreq+0x366>
3418c284:	4a73      	ldr	r2, [pc, #460]	@ (3418c454 <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418c286:	4293      	cmp	r3, r2
3418c288:	f200 818b 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c28c:	4a72      	ldr	r2, [pc, #456]	@ (3418c458 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418c28e:	4293      	cmp	r3, r2
3418c290:	f000 8125 	beq.w	3418c4de <RCCEx_GetUSARTCLKFreq+0x366>
3418c294:	4a70      	ldr	r2, [pc, #448]	@ (3418c458 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418c296:	4293      	cmp	r3, r2
3418c298:	f200 8183 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c29c:	4a6f      	ldr	r2, [pc, #444]	@ (3418c45c <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418c29e:	4293      	cmp	r3, r2
3418c2a0:	f000 811d 	beq.w	3418c4de <RCCEx_GetUSARTCLKFreq+0x366>
3418c2a4:	4a6d      	ldr	r2, [pc, #436]	@ (3418c45c <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418c2a6:	4293      	cmp	r3, r2
3418c2a8:	f200 817b 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c2ac:	4a6c      	ldr	r2, [pc, #432]	@ (3418c460 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418c2ae:	4293      	cmp	r3, r2
3418c2b0:	f000 8115 	beq.w	3418c4de <RCCEx_GetUSARTCLKFreq+0x366>
3418c2b4:	4a6a      	ldr	r2, [pc, #424]	@ (3418c460 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418c2b6:	4293      	cmp	r3, r2
3418c2b8:	f200 8173 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c2bc:	4a69      	ldr	r2, [pc, #420]	@ (3418c464 <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418c2be:	4293      	cmp	r3, r2
3418c2c0:	f000 810d 	beq.w	3418c4de <RCCEx_GetUSARTCLKFreq+0x366>
3418c2c4:	4a67      	ldr	r2, [pc, #412]	@ (3418c464 <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418c2c6:	4293      	cmp	r3, r2
3418c2c8:	f200 816b 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c2cc:	4a66      	ldr	r2, [pc, #408]	@ (3418c468 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418c2ce:	4293      	cmp	r3, r2
3418c2d0:	d07b      	beq.n	3418c3ca <RCCEx_GetUSARTCLKFreq+0x252>
3418c2d2:	4a65      	ldr	r2, [pc, #404]	@ (3418c468 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418c2d4:	4293      	cmp	r3, r2
3418c2d6:	f200 8164 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c2da:	4a64      	ldr	r2, [pc, #400]	@ (3418c46c <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418c2dc:	4293      	cmp	r3, r2
3418c2de:	d074      	beq.n	3418c3ca <RCCEx_GetUSARTCLKFreq+0x252>
3418c2e0:	4a62      	ldr	r2, [pc, #392]	@ (3418c46c <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418c2e2:	4293      	cmp	r3, r2
3418c2e4:	f200 815d 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c2e8:	4a61      	ldr	r2, [pc, #388]	@ (3418c470 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418c2ea:	4293      	cmp	r3, r2
3418c2ec:	d06d      	beq.n	3418c3ca <RCCEx_GetUSARTCLKFreq+0x252>
3418c2ee:	4a60      	ldr	r2, [pc, #384]	@ (3418c470 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418c2f0:	4293      	cmp	r3, r2
3418c2f2:	f200 8156 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c2f6:	4a5f      	ldr	r2, [pc, #380]	@ (3418c474 <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418c2f8:	4293      	cmp	r3, r2
3418c2fa:	d066      	beq.n	3418c3ca <RCCEx_GetUSARTCLKFreq+0x252>
3418c2fc:	4a5d      	ldr	r2, [pc, #372]	@ (3418c474 <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418c2fe:	4293      	cmp	r3, r2
3418c300:	f200 814f 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c304:	4a5c      	ldr	r2, [pc, #368]	@ (3418c478 <RCCEx_GetUSARTCLKFreq+0x300>)
3418c306:	4293      	cmp	r3, r2
3418c308:	d05f      	beq.n	3418c3ca <RCCEx_GetUSARTCLKFreq+0x252>
3418c30a:	4a5b      	ldr	r2, [pc, #364]	@ (3418c478 <RCCEx_GetUSARTCLKFreq+0x300>)
3418c30c:	4293      	cmp	r3, r2
3418c30e:	f200 8148 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c312:	4a5a      	ldr	r2, [pc, #360]	@ (3418c47c <RCCEx_GetUSARTCLKFreq+0x304>)
3418c314:	4293      	cmp	r3, r2
3418c316:	d053      	beq.n	3418c3c0 <RCCEx_GetUSARTCLKFreq+0x248>
3418c318:	4a58      	ldr	r2, [pc, #352]	@ (3418c47c <RCCEx_GetUSARTCLKFreq+0x304>)
3418c31a:	4293      	cmp	r3, r2
3418c31c:	f200 8141 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c320:	4a57      	ldr	r2, [pc, #348]	@ (3418c480 <RCCEx_GetUSARTCLKFreq+0x308>)
3418c322:	4293      	cmp	r3, r2
3418c324:	d04c      	beq.n	3418c3c0 <RCCEx_GetUSARTCLKFreq+0x248>
3418c326:	4a56      	ldr	r2, [pc, #344]	@ (3418c480 <RCCEx_GetUSARTCLKFreq+0x308>)
3418c328:	4293      	cmp	r3, r2
3418c32a:	f200 813a 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c32e:	4a55      	ldr	r2, [pc, #340]	@ (3418c484 <RCCEx_GetUSARTCLKFreq+0x30c>)
3418c330:	4293      	cmp	r3, r2
3418c332:	d045      	beq.n	3418c3c0 <RCCEx_GetUSARTCLKFreq+0x248>
3418c334:	4a53      	ldr	r2, [pc, #332]	@ (3418c484 <RCCEx_GetUSARTCLKFreq+0x30c>)
3418c336:	4293      	cmp	r3, r2
3418c338:	f200 8133 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c33c:	4a52      	ldr	r2, [pc, #328]	@ (3418c488 <RCCEx_GetUSARTCLKFreq+0x310>)
3418c33e:	4293      	cmp	r3, r2
3418c340:	d03e      	beq.n	3418c3c0 <RCCEx_GetUSARTCLKFreq+0x248>
3418c342:	4a51      	ldr	r2, [pc, #324]	@ (3418c488 <RCCEx_GetUSARTCLKFreq+0x310>)
3418c344:	4293      	cmp	r3, r2
3418c346:	f200 812c 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c34a:	4a50      	ldr	r2, [pc, #320]	@ (3418c48c <RCCEx_GetUSARTCLKFreq+0x314>)
3418c34c:	4293      	cmp	r3, r2
3418c34e:	d037      	beq.n	3418c3c0 <RCCEx_GetUSARTCLKFreq+0x248>
3418c350:	4a4e      	ldr	r2, [pc, #312]	@ (3418c48c <RCCEx_GetUSARTCLKFreq+0x314>)
3418c352:	4293      	cmp	r3, r2
3418c354:	f200 8125 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c358:	4a4d      	ldr	r2, [pc, #308]	@ (3418c490 <RCCEx_GetUSARTCLKFreq+0x318>)
3418c35a:	4293      	cmp	r3, r2
3418c35c:	d018      	beq.n	3418c390 <RCCEx_GetUSARTCLKFreq+0x218>
3418c35e:	4a4c      	ldr	r2, [pc, #304]	@ (3418c490 <RCCEx_GetUSARTCLKFreq+0x318>)
3418c360:	4293      	cmp	r3, r2
3418c362:	f200 811e 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c366:	4a4b      	ldr	r2, [pc, #300]	@ (3418c494 <RCCEx_GetUSARTCLKFreq+0x31c>)
3418c368:	4293      	cmp	r3, r2
3418c36a:	d01d      	beq.n	3418c3a8 <RCCEx_GetUSARTCLKFreq+0x230>
3418c36c:	4a49      	ldr	r2, [pc, #292]	@ (3418c494 <RCCEx_GetUSARTCLKFreq+0x31c>)
3418c36e:	4293      	cmp	r3, r2
3418c370:	f200 8117 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c374:	4a48      	ldr	r2, [pc, #288]	@ (3418c498 <RCCEx_GetUSARTCLKFreq+0x320>)
3418c376:	4293      	cmp	r3, r2
3418c378:	d00a      	beq.n	3418c390 <RCCEx_GetUSARTCLKFreq+0x218>
3418c37a:	4a47      	ldr	r2, [pc, #284]	@ (3418c498 <RCCEx_GetUSARTCLKFreq+0x320>)
3418c37c:	4293      	cmp	r3, r2
3418c37e:	f200 8110 	bhi.w	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418c382:	4a46      	ldr	r2, [pc, #280]	@ (3418c49c <RCCEx_GetUSARTCLKFreq+0x324>)
3418c384:	4293      	cmp	r3, r2
3418c386:	d003      	beq.n	3418c390 <RCCEx_GetUSARTCLKFreq+0x218>
3418c388:	4a45      	ldr	r2, [pc, #276]	@ (3418c4a0 <RCCEx_GetUSARTCLKFreq+0x328>)
3418c38a:	4293      	cmp	r3, r2
3418c38c:	d00c      	beq.n	3418c3a8 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418c38e:	e108      	b.n	3418c5a2 <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418c390:	f7f7 ff7a 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418c394:	4603      	mov	r3, r0
3418c396:	4618      	mov	r0, r3
3418c398:	f7fc ff1a 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418c39c:	4603      	mov	r3, r0
3418c39e:	4618      	mov	r0, r3
3418c3a0:	f7fc ff37 	bl	34189212 <RCCEx_GetPCLK2Freq>
3418c3a4:	60f8      	str	r0, [r7, #12]
      break;
3418c3a6:	e107      	b.n	3418c5b8 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418c3a8:	f7f7 ff6e 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418c3ac:	4603      	mov	r3, r0
3418c3ae:	4618      	mov	r0, r3
3418c3b0:	f7fc ff0e 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418c3b4:	4603      	mov	r3, r0
3418c3b6:	4618      	mov	r0, r3
3418c3b8:	f7fc ff1b 	bl	341891f2 <RCCEx_GetPCLK1Freq>
3418c3bc:	60f8      	str	r0, [r7, #12]
      break;
3418c3be:	e0fb      	b.n	3418c5b8 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c3c0:	2007      	movs	r0, #7
3418c3c2:	f7fd f9f1 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418c3c6:	60f8      	str	r0, [r7, #12]
      break;
3418c3c8:	e0f6      	b.n	3418c5b8 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418c3ca:	f7f9 fb95 	bl	34185af8 <LL_RCC_IC9_IsEnabled>
3418c3ce:	4603      	mov	r3, r0
3418c3d0:	2b00      	cmp	r3, #0
3418c3d2:	f000 80e8 	beq.w	3418c5a6 <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
3418c3d6:	f7f9 fbb1 	bl	34185b3c <LL_RCC_IC9_GetDivider>
3418c3da:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418c3dc:	f7f9 fba0 	bl	34185b20 <LL_RCC_IC9_GetSource>
3418c3e0:	4603      	mov	r3, r0
3418c3e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c3e6:	d06f      	beq.n	3418c4c8 <RCCEx_GetUSARTCLKFreq+0x350>
3418c3e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c3ec:	d875      	bhi.n	3418c4da <RCCEx_GetUSARTCLKFreq+0x362>
3418c3ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c3f2:	d060      	beq.n	3418c4b6 <RCCEx_GetUSARTCLKFreq+0x33e>
3418c3f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c3f8:	d86f      	bhi.n	3418c4da <RCCEx_GetUSARTCLKFreq+0x362>
3418c3fa:	2b00      	cmp	r3, #0
3418c3fc:	d003      	beq.n	3418c406 <RCCEx_GetUSARTCLKFreq+0x28e>
3418c3fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c402:	d04f      	beq.n	3418c4a4 <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
3418c404:	e069      	b.n	3418c4da <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c406:	f7fc fdcb 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c40a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418c40c:	68fa      	ldr	r2, [r7, #12]
3418c40e:	68bb      	ldr	r3, [r7, #8]
3418c410:	fbb2 f3f3 	udiv	r3, r2, r3
3418c414:	60fb      	str	r3, [r7, #12]
            break;
3418c416:	e061      	b.n	3418c4dc <RCCEx_GetUSARTCLKFreq+0x364>
3418c418:	07061430 	.word	0x07061430
3418c41c:	07060830 	.word	0x07060830
3418c420:	07060434 	.word	0x07060434
3418c424:	07060430 	.word	0x07060430
3418c428:	07060030 	.word	0x07060030
3418c42c:	07051430 	.word	0x07051430
3418c430:	07050830 	.word	0x07050830
3418c434:	07050434 	.word	0x07050434
3418c438:	07050430 	.word	0x07050430
3418c43c:	07050030 	.word	0x07050030
3418c440:	07041430 	.word	0x07041430
3418c444:	07040830 	.word	0x07040830
3418c448:	07040434 	.word	0x07040434
3418c44c:	07040430 	.word	0x07040430
3418c450:	07040030 	.word	0x07040030
3418c454:	07031430 	.word	0x07031430
3418c458:	07030830 	.word	0x07030830
3418c45c:	07030434 	.word	0x07030434
3418c460:	07030430 	.word	0x07030430
3418c464:	07030030 	.word	0x07030030
3418c468:	07021430 	.word	0x07021430
3418c46c:	07020830 	.word	0x07020830
3418c470:	07020434 	.word	0x07020434
3418c474:	07020430 	.word	0x07020430
3418c478:	07020030 	.word	0x07020030
3418c47c:	07011430 	.word	0x07011430
3418c480:	07010830 	.word	0x07010830
3418c484:	07010434 	.word	0x07010434
3418c488:	07010430 	.word	0x07010430
3418c48c:	07010030 	.word	0x07010030
3418c490:	07001430 	.word	0x07001430
3418c494:	07000830 	.word	0x07000830
3418c498:	07000434 	.word	0x07000434
3418c49c:	07000030 	.word	0x07000030
3418c4a0:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c4a4:	f7fc fdc2 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418c4a8:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418c4aa:	68fa      	ldr	r2, [r7, #12]
3418c4ac:	68bb      	ldr	r3, [r7, #8]
3418c4ae:	fbb2 f3f3 	udiv	r3, r2, r3
3418c4b2:	60fb      	str	r3, [r7, #12]
            break;
3418c4b4:	e012      	b.n	3418c4dc <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c4b6:	f7fc fdff 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c4ba:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418c4bc:	68fa      	ldr	r2, [r7, #12]
3418c4be:	68bb      	ldr	r3, [r7, #8]
3418c4c0:	fbb2 f3f3 	udiv	r3, r2, r3
3418c4c4:	60fb      	str	r3, [r7, #12]
            break;
3418c4c6:	e009      	b.n	3418c4dc <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c4c8:	f7fc fe3c 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418c4cc:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418c4ce:	68fa      	ldr	r2, [r7, #12]
3418c4d0:	68bb      	ldr	r3, [r7, #8]
3418c4d2:	fbb2 f3f3 	udiv	r3, r2, r3
3418c4d6:	60fb      	str	r3, [r7, #12]
            break;
3418c4d8:	e000      	b.n	3418c4dc <RCCEx_GetUSARTCLKFreq+0x364>
            break;
3418c4da:	bf00      	nop
      break;
3418c4dc:	e063      	b.n	3418c5a6 <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418c4de:	f7f9 fc0b 	bl	34185cf8 <LL_RCC_IC14_IsEnabled>
3418c4e2:	4603      	mov	r3, r0
3418c4e4:	2b00      	cmp	r3, #0
3418c4e6:	d060      	beq.n	3418c5aa <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
3418c4e8:	f7f9 fc28 	bl	34185d3c <LL_RCC_IC14_GetDivider>
3418c4ec:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418c4ee:	f7f9 fc17 	bl	34185d20 <LL_RCC_IC14_GetSource>
3418c4f2:	4603      	mov	r3, r0
3418c4f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c4f8:	d029      	beq.n	3418c54e <RCCEx_GetUSARTCLKFreq+0x3d6>
3418c4fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c4fe:	d82f      	bhi.n	3418c560 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418c500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c504:	d01a      	beq.n	3418c53c <RCCEx_GetUSARTCLKFreq+0x3c4>
3418c506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c50a:	d829      	bhi.n	3418c560 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418c50c:	2b00      	cmp	r3, #0
3418c50e:	d003      	beq.n	3418c518 <RCCEx_GetUSARTCLKFreq+0x3a0>
3418c510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c514:	d009      	beq.n	3418c52a <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
3418c516:	e023      	b.n	3418c560 <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c518:	f7fc fd42 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c51c:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418c51e:	68fa      	ldr	r2, [r7, #12]
3418c520:	68bb      	ldr	r3, [r7, #8]
3418c522:	fbb2 f3f3 	udiv	r3, r2, r3
3418c526:	60fb      	str	r3, [r7, #12]
            break;
3418c528:	e01b      	b.n	3418c562 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c52a:	f7fc fd7f 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418c52e:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418c530:	68fa      	ldr	r2, [r7, #12]
3418c532:	68bb      	ldr	r3, [r7, #8]
3418c534:	fbb2 f3f3 	udiv	r3, r2, r3
3418c538:	60fb      	str	r3, [r7, #12]
            break;
3418c53a:	e012      	b.n	3418c562 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c53c:	f7fc fdbc 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c540:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418c542:	68fa      	ldr	r2, [r7, #12]
3418c544:	68bb      	ldr	r3, [r7, #8]
3418c546:	fbb2 f3f3 	udiv	r3, r2, r3
3418c54a:	60fb      	str	r3, [r7, #12]
            break;
3418c54c:	e009      	b.n	3418c562 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c54e:	f7fc fdf9 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418c552:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418c554:	68fa      	ldr	r2, [r7, #12]
3418c556:	68bb      	ldr	r3, [r7, #8]
3418c558:	fbb2 f3f3 	udiv	r3, r2, r3
3418c55c:	60fb      	str	r3, [r7, #12]
            break;
3418c55e:	e000      	b.n	3418c562 <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
3418c560:	bf00      	nop
      break;
3418c562:	e022      	b.n	3418c5aa <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
3418c564:	f7f8 faa4 	bl	34184ab0 <LL_RCC_HSI_IsReady>
3418c568:	4603      	mov	r3, r0
3418c56a:	2b00      	cmp	r3, #0
3418c56c:	d01f      	beq.n	3418c5ae <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418c56e:	f7f8 fab1 	bl	34184ad4 <LL_RCC_HSI_GetDivider>
3418c572:	4603      	mov	r3, r0
3418c574:	09db      	lsrs	r3, r3, #7
3418c576:	4a13      	ldr	r2, [pc, #76]	@ (3418c5c4 <RCCEx_GetUSARTCLKFreq+0x44c>)
3418c578:	fa22 f303 	lsr.w	r3, r2, r3
3418c57c:	60fb      	str	r3, [r7, #12]
      break;
3418c57e:	e016      	b.n	3418c5ae <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
3418c580:	f7f8 fab6 	bl	34184af0 <LL_RCC_MSI_IsReady>
3418c584:	4603      	mov	r3, r0
3418c586:	2b00      	cmp	r3, #0
3418c588:	d013      	beq.n	3418c5b2 <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
3418c58a:	4b0f      	ldr	r3, [pc, #60]	@ (3418c5c8 <RCCEx_GetUSARTCLKFreq+0x450>)
3418c58c:	60fb      	str	r3, [r7, #12]
      break;
3418c58e:	e010      	b.n	3418c5b2 <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
3418c590:	f7f8 face 	bl	34184b30 <LL_RCC_LSE_IsReady>
3418c594:	4603      	mov	r3, r0
3418c596:	2b00      	cmp	r3, #0
3418c598:	d00d      	beq.n	3418c5b6 <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
3418c59a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418c59e:	60fb      	str	r3, [r7, #12]
      break;
3418c5a0:	e009      	b.n	3418c5b6 <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
3418c5a2:	bf00      	nop
3418c5a4:	e008      	b.n	3418c5b8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418c5a6:	bf00      	nop
3418c5a8:	e006      	b.n	3418c5b8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418c5aa:	bf00      	nop
3418c5ac:	e004      	b.n	3418c5b8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418c5ae:	bf00      	nop
3418c5b0:	e002      	b.n	3418c5b8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418c5b2:	bf00      	nop
3418c5b4:	e000      	b.n	3418c5b8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418c5b6:	bf00      	nop
  }

  return usart_frequency;
3418c5b8:	68fb      	ldr	r3, [r7, #12]
}
3418c5ba:	4618      	mov	r0, r3
3418c5bc:	3710      	adds	r7, #16
3418c5be:	46bd      	mov	sp, r7
3418c5c0:	bd80      	pop	{r7, pc}
3418c5c2:	bf00      	nop
3418c5c4:	03d09000 	.word	0x03d09000
3418c5c8:	003d0900 	.word	0x003d0900

3418c5cc <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
3418c5cc:	b580      	push	{r7, lr}
3418c5ce:	b084      	sub	sp, #16
3418c5d0:	af00      	add	r7, sp, #0
3418c5d2:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c5d4:	2300      	movs	r3, #0
3418c5d6:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
3418c5d8:	6878      	ldr	r0, [r7, #4]
3418c5da:	f7f8 fe69 	bl	341852b0 <LL_RCC_GetUSBClockSource>
3418c5de:	4603      	mov	r3, r0
3418c5e0:	4a4b      	ldr	r2, [pc, #300]	@ (3418c710 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418c5e2:	4293      	cmp	r3, r2
3418c5e4:	d035      	beq.n	3418c652 <RCCEx_GetOTGPHYCLKFreq+0x86>
3418c5e6:	4a4a      	ldr	r2, [pc, #296]	@ (3418c710 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418c5e8:	4293      	cmp	r3, r2
3418c5ea:	f200 8085 	bhi.w	3418c6f8 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418c5ee:	4a49      	ldr	r2, [pc, #292]	@ (3418c714 <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418c5f0:	4293      	cmp	r3, r2
3418c5f2:	d02e      	beq.n	3418c652 <RCCEx_GetOTGPHYCLKFreq+0x86>
3418c5f4:	4a47      	ldr	r2, [pc, #284]	@ (3418c714 <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418c5f6:	4293      	cmp	r3, r2
3418c5f8:	d87e      	bhi.n	3418c6f8 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418c5fa:	4a47      	ldr	r2, [pc, #284]	@ (3418c718 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418c5fc:	4293      	cmp	r3, r2
3418c5fe:	d038      	beq.n	3418c672 <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418c600:	4a45      	ldr	r2, [pc, #276]	@ (3418c718 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418c602:	4293      	cmp	r3, r2
3418c604:	d878      	bhi.n	3418c6f8 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418c606:	4a45      	ldr	r2, [pc, #276]	@ (3418c71c <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418c608:	4293      	cmp	r3, r2
3418c60a:	d032      	beq.n	3418c672 <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418c60c:	4a43      	ldr	r2, [pc, #268]	@ (3418c71c <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418c60e:	4293      	cmp	r3, r2
3418c610:	d872      	bhi.n	3418c6f8 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418c612:	4a43      	ldr	r2, [pc, #268]	@ (3418c720 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418c614:	4293      	cmp	r3, r2
3418c616:	d00f      	beq.n	3418c638 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418c618:	4a41      	ldr	r2, [pc, #260]	@ (3418c720 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418c61a:	4293      	cmp	r3, r2
3418c61c:	d86c      	bhi.n	3418c6f8 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418c61e:	4a41      	ldr	r2, [pc, #260]	@ (3418c724 <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418c620:	4293      	cmp	r3, r2
3418c622:	d009      	beq.n	3418c638 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418c624:	4a3f      	ldr	r2, [pc, #252]	@ (3418c724 <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418c626:	4293      	cmp	r3, r2
3418c628:	d866      	bhi.n	3418c6f8 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418c62a:	4a3f      	ldr	r2, [pc, #252]	@ (3418c728 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
3418c62c:	4293      	cmp	r3, r2
3418c62e:	d008      	beq.n	3418c642 <RCCEx_GetOTGPHYCLKFreq+0x76>
3418c630:	4a3e      	ldr	r2, [pc, #248]	@ (3418c72c <RCCEx_GetOTGPHYCLKFreq+0x160>)
3418c632:	4293      	cmp	r3, r2
3418c634:	d005      	beq.n	3418c642 <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418c636:	e05f      	b.n	3418c6f8 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c638:	2007      	movs	r0, #7
3418c63a:	f7fd f8b5 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418c63e:	60f8      	str	r0, [r7, #12]
      break;
3418c640:	e061      	b.n	3418c706 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
3418c642:	f7f8 fa23 	bl	34184a8c <LL_RCC_HSE_IsReady>
3418c646:	4603      	mov	r3, r0
3418c648:	2b00      	cmp	r3, #0
3418c64a:	d057      	beq.n	3418c6fc <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
3418c64c:	4b38      	ldr	r3, [pc, #224]	@ (3418c730 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418c64e:	60fb      	str	r3, [r7, #12]
      break;
3418c650:	e054      	b.n	3418c6fc <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
3418c652:	f7f8 fa1b 	bl	34184a8c <LL_RCC_HSE_IsReady>
3418c656:	4603      	mov	r3, r0
3418c658:	2b00      	cmp	r3, #0
3418c65a:	d051      	beq.n	3418c700 <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418c65c:	f7f8 fa04 	bl	34184a68 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418c660:	4603      	mov	r3, r0
3418c662:	2b00      	cmp	r3, #0
3418c664:	d102      	bne.n	3418c66c <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
3418c666:	4b33      	ldr	r3, [pc, #204]	@ (3418c734 <RCCEx_GetOTGPHYCLKFreq+0x168>)
3418c668:	60fb      	str	r3, [r7, #12]
      break;
3418c66a:	e049      	b.n	3418c700 <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
3418c66c:	4b30      	ldr	r3, [pc, #192]	@ (3418c730 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418c66e:	60fb      	str	r3, [r7, #12]
      break;
3418c670:	e046      	b.n	3418c700 <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418c672:	f7f9 fb81 	bl	34185d78 <LL_RCC_IC15_IsEnabled>
3418c676:	4603      	mov	r3, r0
3418c678:	2b00      	cmp	r3, #0
3418c67a:	d043      	beq.n	3418c704 <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
3418c67c:	f7f9 fb9e 	bl	34185dbc <LL_RCC_IC15_GetDivider>
3418c680:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418c682:	f7f9 fb8d 	bl	34185da0 <LL_RCC_IC15_GetSource>
3418c686:	4603      	mov	r3, r0
3418c688:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c68c:	d029      	beq.n	3418c6e2 <RCCEx_GetOTGPHYCLKFreq+0x116>
3418c68e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c692:	d82f      	bhi.n	3418c6f4 <RCCEx_GetOTGPHYCLKFreq+0x128>
3418c694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c698:	d01a      	beq.n	3418c6d0 <RCCEx_GetOTGPHYCLKFreq+0x104>
3418c69a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c69e:	d829      	bhi.n	3418c6f4 <RCCEx_GetOTGPHYCLKFreq+0x128>
3418c6a0:	2b00      	cmp	r3, #0
3418c6a2:	d003      	beq.n	3418c6ac <RCCEx_GetOTGPHYCLKFreq+0xe0>
3418c6a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c6a8:	d009      	beq.n	3418c6be <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
3418c6aa:	e023      	b.n	3418c6f4 <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c6ac:	f7fc fc78 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c6b0:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418c6b2:	68fa      	ldr	r2, [r7, #12]
3418c6b4:	68bb      	ldr	r3, [r7, #8]
3418c6b6:	fbb2 f3f3 	udiv	r3, r2, r3
3418c6ba:	60fb      	str	r3, [r7, #12]
            break;
3418c6bc:	e01b      	b.n	3418c6f6 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c6be:	f7fc fcb5 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418c6c2:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418c6c4:	68fa      	ldr	r2, [r7, #12]
3418c6c6:	68bb      	ldr	r3, [r7, #8]
3418c6c8:	fbb2 f3f3 	udiv	r3, r2, r3
3418c6cc:	60fb      	str	r3, [r7, #12]
            break;
3418c6ce:	e012      	b.n	3418c6f6 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c6d0:	f7fc fcf2 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c6d4:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418c6d6:	68fa      	ldr	r2, [r7, #12]
3418c6d8:	68bb      	ldr	r3, [r7, #8]
3418c6da:	fbb2 f3f3 	udiv	r3, r2, r3
3418c6de:	60fb      	str	r3, [r7, #12]
            break;
3418c6e0:	e009      	b.n	3418c6f6 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c6e2:	f7fc fd2f 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418c6e6:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418c6e8:	68fa      	ldr	r2, [r7, #12]
3418c6ea:	68bb      	ldr	r3, [r7, #8]
3418c6ec:	fbb2 f3f3 	udiv	r3, r2, r3
3418c6f0:	60fb      	str	r3, [r7, #12]
            break;
3418c6f2:	e000      	b.n	3418c6f6 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
3418c6f4:	bf00      	nop
      break;
3418c6f6:	e005      	b.n	3418c704 <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
3418c6f8:	bf00      	nop
3418c6fa:	e004      	b.n	3418c706 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418c6fc:	bf00      	nop
3418c6fe:	e002      	b.n	3418c706 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418c700:	bf00      	nop
3418c702:	e000      	b.n	3418c706 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418c704:	bf00      	nop
  }

  return usb_frequency;
3418c706:	68fb      	ldr	r3, [r7, #12]
}
3418c708:	4618      	mov	r0, r3
3418c70a:	3710      	adds	r7, #16
3418c70c:	46bd      	mov	sp, r7
3418c70e:	bd80      	pop	{r7, pc}
3418c710:	03031414 	.word	0x03031414
3418c714:	03030c14 	.word	0x03030c14
3418c718:	03021414 	.word	0x03021414
3418c71c:	03020c14 	.word	0x03020c14
3418c720:	03011414 	.word	0x03011414
3418c724:	03010c14 	.word	0x03010c14
3418c728:	03000c14 	.word	0x03000c14
3418c72c:	03001414 	.word	0x03001414
3418c730:	016e3600 	.word	0x016e3600
3418c734:	02dc6c00 	.word	0x02dc6c00

3418c738 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
3418c738:	b580      	push	{r7, lr}
3418c73a:	b084      	sub	sp, #16
3418c73c:	af00      	add	r7, sp, #0
3418c73e:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c740:	2300      	movs	r3, #0
3418c742:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
3418c744:	6878      	ldr	r0, [r7, #4]
3418c746:	f7f8 fdb3 	bl	341852b0 <LL_RCC_GetUSBClockSource>
3418c74a:	4603      	mov	r3, r0
3418c74c:	4a1a      	ldr	r2, [pc, #104]	@ (3418c7b8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418c74e:	4293      	cmp	r3, r2
3418c750:	d00f      	beq.n	3418c772 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418c752:	4a19      	ldr	r2, [pc, #100]	@ (3418c7b8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418c754:	4293      	cmp	r3, r2
3418c756:	d826      	bhi.n	3418c7a6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418c758:	4a18      	ldr	r2, [pc, #96]	@ (3418c7bc <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418c75a:	4293      	cmp	r3, r2
3418c75c:	d009      	beq.n	3418c772 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418c75e:	4a17      	ldr	r2, [pc, #92]	@ (3418c7bc <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418c760:	4293      	cmp	r3, r2
3418c762:	d820      	bhi.n	3418c7a6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418c764:	4a16      	ldr	r2, [pc, #88]	@ (3418c7c0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
3418c766:	4293      	cmp	r3, r2
3418c768:	d013      	beq.n	3418c792 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
3418c76a:	4a16      	ldr	r2, [pc, #88]	@ (3418c7c4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
3418c76c:	4293      	cmp	r3, r2
3418c76e:	d015      	beq.n	3418c79c <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
3418c770:	e019      	b.n	3418c7a6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
3418c772:	f7f8 f98b 	bl	34184a8c <LL_RCC_HSE_IsReady>
3418c776:	4603      	mov	r3, r0
3418c778:	2b00      	cmp	r3, #0
3418c77a:	d016      	beq.n	3418c7aa <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418c77c:	f7f8 f974 	bl	34184a68 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418c780:	4603      	mov	r3, r0
3418c782:	2b00      	cmp	r3, #0
3418c784:	d102      	bne.n	3418c78c <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
3418c786:	4b10      	ldr	r3, [pc, #64]	@ (3418c7c8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
3418c788:	60fb      	str	r3, [r7, #12]
      break;
3418c78a:	e00e      	b.n	3418c7aa <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
3418c78c:	4b0f      	ldr	r3, [pc, #60]	@ (3418c7cc <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
3418c78e:	60fb      	str	r3, [r7, #12]
      break;
3418c790:	e00b      	b.n	3418c7aa <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3418c792:	480f      	ldr	r0, [pc, #60]	@ (3418c7d0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
3418c794:	f7ff ff1a 	bl	3418c5cc <RCCEx_GetOTGPHYCLKFreq>
3418c798:	60f8      	str	r0, [r7, #12]
      break;
3418c79a:	e007      	b.n	3418c7ac <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3418c79c:	480d      	ldr	r0, [pc, #52]	@ (3418c7d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
3418c79e:	f7ff ff15 	bl	3418c5cc <RCCEx_GetOTGPHYCLKFreq>
3418c7a2:	60f8      	str	r0, [r7, #12]
      break;
3418c7a4:	e002      	b.n	3418c7ac <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418c7a6:	bf00      	nop
3418c7a8:	e000      	b.n	3418c7ac <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418c7aa:	bf00      	nop
  }

  return usb_frequency;
3418c7ac:	68fb      	ldr	r3, [r7, #12]
}
3418c7ae:	4618      	mov	r0, r3
3418c7b0:	3710      	adds	r7, #16
3418c7b2:	46bd      	mov	sp, r7
3418c7b4:	bd80      	pop	{r7, pc}
3418c7b6:	bf00      	nop
3418c7b8:	01011814 	.word	0x01011814
3418c7bc:	01011014 	.word	0x01011014
3418c7c0:	01001014 	.word	0x01001014
3418c7c4:	01001814 	.word	0x01001814
3418c7c8:	02dc6c00 	.word	0x02dc6c00
3418c7cc:	016e3600 	.word	0x016e3600
3418c7d0:	03000c14 	.word	0x03000c14
3418c7d4:	03001414 	.word	0x03001414

3418c7d8 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
3418c7d8:	b580      	push	{r7, lr}
3418c7da:	b084      	sub	sp, #16
3418c7dc:	af00      	add	r7, sp, #0
3418c7de:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c7e0:	2300      	movs	r3, #0
3418c7e2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3418c7e4:	6878      	ldr	r0, [r7, #4]
3418c7e6:	f7f8 fd6f 	bl	341852c8 <LL_RCC_GetXSPIClockSource>
3418c7ea:	4603      	mov	r3, r0
3418c7ec:	4a76      	ldr	r2, [pc, #472]	@ (3418c9c8 <RCCEx_GetXSPICLKFreq+0x1f0>)
3418c7ee:	4293      	cmp	r3, r2
3418c7f0:	f000 809d 	beq.w	3418c92e <RCCEx_GetXSPICLKFreq+0x156>
3418c7f4:	4a74      	ldr	r2, [pc, #464]	@ (3418c9c8 <RCCEx_GetXSPICLKFreq+0x1f0>)
3418c7f6:	4293      	cmp	r3, r2
3418c7f8:	f200 80dc 	bhi.w	3418c9b4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418c7fc:	4a73      	ldr	r2, [pc, #460]	@ (3418c9cc <RCCEx_GetXSPICLKFreq+0x1f4>)
3418c7fe:	4293      	cmp	r3, r2
3418c800:	f000 8095 	beq.w	3418c92e <RCCEx_GetXSPICLKFreq+0x156>
3418c804:	4a71      	ldr	r2, [pc, #452]	@ (3418c9cc <RCCEx_GetXSPICLKFreq+0x1f4>)
3418c806:	4293      	cmp	r3, r2
3418c808:	f200 80d4 	bhi.w	3418c9b4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418c80c:	4a70      	ldr	r2, [pc, #448]	@ (3418c9d0 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418c80e:	4293      	cmp	r3, r2
3418c810:	f000 808d 	beq.w	3418c92e <RCCEx_GetXSPICLKFreq+0x156>
3418c814:	4a6e      	ldr	r2, [pc, #440]	@ (3418c9d0 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418c816:	4293      	cmp	r3, r2
3418c818:	f200 80cc 	bhi.w	3418c9b4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418c81c:	4a6d      	ldr	r2, [pc, #436]	@ (3418c9d4 <RCCEx_GetXSPICLKFreq+0x1fc>)
3418c81e:	4293      	cmp	r3, r2
3418c820:	d041      	beq.n	3418c8a6 <RCCEx_GetXSPICLKFreq+0xce>
3418c822:	4a6c      	ldr	r2, [pc, #432]	@ (3418c9d4 <RCCEx_GetXSPICLKFreq+0x1fc>)
3418c824:	4293      	cmp	r3, r2
3418c826:	f200 80c5 	bhi.w	3418c9b4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418c82a:	4a6b      	ldr	r2, [pc, #428]	@ (3418c9d8 <RCCEx_GetXSPICLKFreq+0x200>)
3418c82c:	4293      	cmp	r3, r2
3418c82e:	d03a      	beq.n	3418c8a6 <RCCEx_GetXSPICLKFreq+0xce>
3418c830:	4a69      	ldr	r2, [pc, #420]	@ (3418c9d8 <RCCEx_GetXSPICLKFreq+0x200>)
3418c832:	4293      	cmp	r3, r2
3418c834:	f200 80be 	bhi.w	3418c9b4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418c838:	4a68      	ldr	r2, [pc, #416]	@ (3418c9dc <RCCEx_GetXSPICLKFreq+0x204>)
3418c83a:	4293      	cmp	r3, r2
3418c83c:	d033      	beq.n	3418c8a6 <RCCEx_GetXSPICLKFreq+0xce>
3418c83e:	4a67      	ldr	r2, [pc, #412]	@ (3418c9dc <RCCEx_GetXSPICLKFreq+0x204>)
3418c840:	4293      	cmp	r3, r2
3418c842:	f200 80b7 	bhi.w	3418c9b4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418c846:	4a66      	ldr	r2, [pc, #408]	@ (3418c9e0 <RCCEx_GetXSPICLKFreq+0x208>)
3418c848:	4293      	cmp	r3, r2
3418c84a:	d027      	beq.n	3418c89c <RCCEx_GetXSPICLKFreq+0xc4>
3418c84c:	4a64      	ldr	r2, [pc, #400]	@ (3418c9e0 <RCCEx_GetXSPICLKFreq+0x208>)
3418c84e:	4293      	cmp	r3, r2
3418c850:	f200 80b0 	bhi.w	3418c9b4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418c854:	4a63      	ldr	r2, [pc, #396]	@ (3418c9e4 <RCCEx_GetXSPICLKFreq+0x20c>)
3418c856:	4293      	cmp	r3, r2
3418c858:	d020      	beq.n	3418c89c <RCCEx_GetXSPICLKFreq+0xc4>
3418c85a:	4a62      	ldr	r2, [pc, #392]	@ (3418c9e4 <RCCEx_GetXSPICLKFreq+0x20c>)
3418c85c:	4293      	cmp	r3, r2
3418c85e:	f200 80a9 	bhi.w	3418c9b4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418c862:	4a61      	ldr	r2, [pc, #388]	@ (3418c9e8 <RCCEx_GetXSPICLKFreq+0x210>)
3418c864:	4293      	cmp	r3, r2
3418c866:	d019      	beq.n	3418c89c <RCCEx_GetXSPICLKFreq+0xc4>
3418c868:	4a5f      	ldr	r2, [pc, #380]	@ (3418c9e8 <RCCEx_GetXSPICLKFreq+0x210>)
3418c86a:	4293      	cmp	r3, r2
3418c86c:	f200 80a2 	bhi.w	3418c9b4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418c870:	4a5e      	ldr	r2, [pc, #376]	@ (3418c9ec <RCCEx_GetXSPICLKFreq+0x214>)
3418c872:	4293      	cmp	r3, r2
3418c874:	d00a      	beq.n	3418c88c <RCCEx_GetXSPICLKFreq+0xb4>
3418c876:	4a5d      	ldr	r2, [pc, #372]	@ (3418c9ec <RCCEx_GetXSPICLKFreq+0x214>)
3418c878:	4293      	cmp	r3, r2
3418c87a:	f200 809b 	bhi.w	3418c9b4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418c87e:	4a5c      	ldr	r2, [pc, #368]	@ (3418c9f0 <RCCEx_GetXSPICLKFreq+0x218>)
3418c880:	4293      	cmp	r3, r2
3418c882:	d003      	beq.n	3418c88c <RCCEx_GetXSPICLKFreq+0xb4>
3418c884:	4a5b      	ldr	r2, [pc, #364]	@ (3418c9f4 <RCCEx_GetXSPICLKFreq+0x21c>)
3418c886:	4293      	cmp	r3, r2
3418c888:	f040 8094 	bne.w	3418c9b4 <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418c88c:	f7f7 fcfc 	bl	34184288 <HAL_RCC_GetSysClockFreq>
3418c890:	4603      	mov	r3, r0
3418c892:	4618      	mov	r0, r3
3418c894:	f7fc fc9c 	bl	341891d0 <RCCEx_GetHCLKFreq>
3418c898:	60f8      	str	r0, [r7, #12]
      break;
3418c89a:	e090      	b.n	3418c9be <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c89c:	2007      	movs	r0, #7
3418c89e:	f7fc ff83 	bl	341897a8 <RCCEx_GetCLKPCLKFreq>
3418c8a2:	60f8      	str	r0, [r7, #12]
      break;
3418c8a4:	e08b      	b.n	3418c9be <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
3418c8a6:	f7f8 ffe7 	bl	34185878 <LL_RCC_IC3_IsEnabled>
3418c8aa:	4603      	mov	r3, r0
3418c8ac:	2b00      	cmp	r3, #0
3418c8ae:	f000 8083 	beq.w	3418c9b8 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
3418c8b2:	f7f9 f803 	bl	341858bc <LL_RCC_IC3_GetDivider>
3418c8b6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
3418c8b8:	f7f8 fff2 	bl	341858a0 <LL_RCC_IC3_GetSource>
3418c8bc:	4603      	mov	r3, r0
3418c8be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c8c2:	d029      	beq.n	3418c918 <RCCEx_GetXSPICLKFreq+0x140>
3418c8c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c8c8:	d82f      	bhi.n	3418c92a <RCCEx_GetXSPICLKFreq+0x152>
3418c8ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c8ce:	d01a      	beq.n	3418c906 <RCCEx_GetXSPICLKFreq+0x12e>
3418c8d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c8d4:	d829      	bhi.n	3418c92a <RCCEx_GetXSPICLKFreq+0x152>
3418c8d6:	2b00      	cmp	r3, #0
3418c8d8:	d003      	beq.n	3418c8e2 <RCCEx_GetXSPICLKFreq+0x10a>
3418c8da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c8de:	d009      	beq.n	3418c8f4 <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418c8e0:	e023      	b.n	3418c92a <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c8e2:	f7fc fb5d 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c8e6:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c8e8:	68fa      	ldr	r2, [r7, #12]
3418c8ea:	68bb      	ldr	r3, [r7, #8]
3418c8ec:	fbb2 f3f3 	udiv	r3, r2, r3
3418c8f0:	60fb      	str	r3, [r7, #12]
            break;
3418c8f2:	e01b      	b.n	3418c92c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c8f4:	f7fc fb9a 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418c8f8:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c8fa:	68fa      	ldr	r2, [r7, #12]
3418c8fc:	68bb      	ldr	r3, [r7, #8]
3418c8fe:	fbb2 f3f3 	udiv	r3, r2, r3
3418c902:	60fb      	str	r3, [r7, #12]
            break;
3418c904:	e012      	b.n	3418c92c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c906:	f7fc fbd7 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c90a:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c90c:	68fa      	ldr	r2, [r7, #12]
3418c90e:	68bb      	ldr	r3, [r7, #8]
3418c910:	fbb2 f3f3 	udiv	r3, r2, r3
3418c914:	60fb      	str	r3, [r7, #12]
            break;
3418c916:	e009      	b.n	3418c92c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c918:	f7fc fc14 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418c91c:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c91e:	68fa      	ldr	r2, [r7, #12]
3418c920:	68bb      	ldr	r3, [r7, #8]
3418c922:	fbb2 f3f3 	udiv	r3, r2, r3
3418c926:	60fb      	str	r3, [r7, #12]
            break;
3418c928:	e000      	b.n	3418c92c <RCCEx_GetXSPICLKFreq+0x154>
            break;
3418c92a:	bf00      	nop
        }
      }
      break;
3418c92c:	e044      	b.n	3418c9b8 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418c92e:	f7f8 ffe3 	bl	341858f8 <LL_RCC_IC4_IsEnabled>
3418c932:	4603      	mov	r3, r0
3418c934:	2b00      	cmp	r3, #0
3418c936:	d041      	beq.n	3418c9bc <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418c938:	f7f9 f800 	bl	3418593c <LL_RCC_IC4_GetDivider>
3418c93c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418c93e:	f7f8 ffef 	bl	34185920 <LL_RCC_IC4_GetSource>
3418c942:	4603      	mov	r3, r0
3418c944:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c948:	d029      	beq.n	3418c99e <RCCEx_GetXSPICLKFreq+0x1c6>
3418c94a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c94e:	d82f      	bhi.n	3418c9b0 <RCCEx_GetXSPICLKFreq+0x1d8>
3418c950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c954:	d01a      	beq.n	3418c98c <RCCEx_GetXSPICLKFreq+0x1b4>
3418c956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c95a:	d829      	bhi.n	3418c9b0 <RCCEx_GetXSPICLKFreq+0x1d8>
3418c95c:	2b00      	cmp	r3, #0
3418c95e:	d003      	beq.n	3418c968 <RCCEx_GetXSPICLKFreq+0x190>
3418c960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c964:	d009      	beq.n	3418c97a <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418c966:	e023      	b.n	3418c9b0 <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c968:	f7fc fb1a 	bl	34188fa0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c96c:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c96e:	68fa      	ldr	r2, [r7, #12]
3418c970:	68bb      	ldr	r3, [r7, #8]
3418c972:	fbb2 f3f3 	udiv	r3, r2, r3
3418c976:	60fb      	str	r3, [r7, #12]
            break;
3418c978:	e01b      	b.n	3418c9b2 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c97a:	f7fc fb57 	bl	3418902c <HAL_RCCEx_GetPLL2CLKFreq>
3418c97e:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c980:	68fa      	ldr	r2, [r7, #12]
3418c982:	68bb      	ldr	r3, [r7, #8]
3418c984:	fbb2 f3f3 	udiv	r3, r2, r3
3418c988:	60fb      	str	r3, [r7, #12]
            break;
3418c98a:	e012      	b.n	3418c9b2 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c98c:	f7fc fb94 	bl	341890b8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c990:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c992:	68fa      	ldr	r2, [r7, #12]
3418c994:	68bb      	ldr	r3, [r7, #8]
3418c996:	fbb2 f3f3 	udiv	r3, r2, r3
3418c99a:	60fb      	str	r3, [r7, #12]
            break;
3418c99c:	e009      	b.n	3418c9b2 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c99e:	f7fc fbd1 	bl	34189144 <HAL_RCCEx_GetPLL4CLKFreq>
3418c9a2:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418c9a4:	68fa      	ldr	r2, [r7, #12]
3418c9a6:	68bb      	ldr	r3, [r7, #8]
3418c9a8:	fbb2 f3f3 	udiv	r3, r2, r3
3418c9ac:	60fb      	str	r3, [r7, #12]
            break;
3418c9ae:	e000      	b.n	3418c9b2 <RCCEx_GetXSPICLKFreq+0x1da>
            break;
3418c9b0:	bf00      	nop
        }
      }
      break;
3418c9b2:	e003      	b.n	3418c9bc <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
3418c9b4:	bf00      	nop
3418c9b6:	e002      	b.n	3418c9be <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418c9b8:	bf00      	nop
3418c9ba:	e000      	b.n	3418c9be <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418c9bc:	bf00      	nop
  }

  return xspi_frequency;
3418c9be:	68fb      	ldr	r3, [r7, #12]
}
3418c9c0:	4618      	mov	r0, r3
3418c9c2:	3710      	adds	r7, #16
3418c9c4:	46bd      	mov	sp, r7
3418c9c6:	bd80      	pop	{r7, pc}
3418c9c8:	03030814 	.word	0x03030814
3418c9cc:	03030414 	.word	0x03030414
3418c9d0:	03030014 	.word	0x03030014
3418c9d4:	03020814 	.word	0x03020814
3418c9d8:	03020414 	.word	0x03020414
3418c9dc:	03020014 	.word	0x03020014
3418c9e0:	03010814 	.word	0x03010814
3418c9e4:	03010414 	.word	0x03010414
3418c9e8:	03010014 	.word	0x03010014
3418c9ec:	03000814 	.word	0x03000814
3418c9f0:	03000014 	.word	0x03000014
3418c9f4:	03000414 	.word	0x03000414

3418c9f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
3418c9f8:	b580      	push	{r7, lr}
3418c9fa:	b084      	sub	sp, #16
3418c9fc:	af00      	add	r7, sp, #0
3418c9fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
3418ca00:	687b      	ldr	r3, [r7, #4]
3418ca02:	681b      	ldr	r3, [r3, #0]
3418ca04:	68db      	ldr	r3, [r3, #12]
3418ca06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
3418ca08:	687b      	ldr	r3, [r7, #4]
3418ca0a:	681b      	ldr	r3, [r3, #0]
3418ca0c:	691b      	ldr	r3, [r3, #16]
3418ca0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
3418ca10:	68bb      	ldr	r3, [r7, #8]
3418ca12:	f003 0302 	and.w	r3, r3, #2
3418ca16:	2b00      	cmp	r3, #0
3418ca18:	d020      	beq.n	3418ca5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
3418ca1a:	68fb      	ldr	r3, [r7, #12]
3418ca1c:	f003 0302 	and.w	r3, r3, #2
3418ca20:	2b00      	cmp	r3, #0
3418ca22:	d01b      	beq.n	3418ca5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
3418ca24:	687b      	ldr	r3, [r7, #4]
3418ca26:	681b      	ldr	r3, [r3, #0]
3418ca28:	f06f 0202 	mvn.w	r2, #2
3418ca2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
3418ca2e:	687b      	ldr	r3, [r7, #4]
3418ca30:	2201      	movs	r2, #1
3418ca32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
3418ca34:	687b      	ldr	r3, [r7, #4]
3418ca36:	681b      	ldr	r3, [r3, #0]
3418ca38:	699b      	ldr	r3, [r3, #24]
3418ca3a:	f003 0303 	and.w	r3, r3, #3
3418ca3e:	2b00      	cmp	r3, #0
3418ca40:	d003      	beq.n	3418ca4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
3418ca42:	6878      	ldr	r0, [r7, #4]
3418ca44:	f000 f93b 	bl	3418ccbe <HAL_TIM_IC_CaptureCallback>
3418ca48:	e005      	b.n	3418ca56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
3418ca4a:	6878      	ldr	r0, [r7, #4]
3418ca4c:	f000 f92d 	bl	3418ccaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
3418ca50:	6878      	ldr	r0, [r7, #4]
3418ca52:	f000 f93e 	bl	3418ccd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3418ca56:	687b      	ldr	r3, [r7, #4]
3418ca58:	2200      	movs	r2, #0
3418ca5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
3418ca5c:	68bb      	ldr	r3, [r7, #8]
3418ca5e:	f003 0304 	and.w	r3, r3, #4
3418ca62:	2b00      	cmp	r3, #0
3418ca64:	d020      	beq.n	3418caa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
3418ca66:	68fb      	ldr	r3, [r7, #12]
3418ca68:	f003 0304 	and.w	r3, r3, #4
3418ca6c:	2b00      	cmp	r3, #0
3418ca6e:	d01b      	beq.n	3418caa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
3418ca70:	687b      	ldr	r3, [r7, #4]
3418ca72:	681b      	ldr	r3, [r3, #0]
3418ca74:	f06f 0204 	mvn.w	r2, #4
3418ca78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
3418ca7a:	687b      	ldr	r3, [r7, #4]
3418ca7c:	2202      	movs	r2, #2
3418ca7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
3418ca80:	687b      	ldr	r3, [r7, #4]
3418ca82:	681b      	ldr	r3, [r3, #0]
3418ca84:	699b      	ldr	r3, [r3, #24]
3418ca86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3418ca8a:	2b00      	cmp	r3, #0
3418ca8c:	d003      	beq.n	3418ca96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
3418ca8e:	6878      	ldr	r0, [r7, #4]
3418ca90:	f000 f915 	bl	3418ccbe <HAL_TIM_IC_CaptureCallback>
3418ca94:	e005      	b.n	3418caa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
3418ca96:	6878      	ldr	r0, [r7, #4]
3418ca98:	f000 f907 	bl	3418ccaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
3418ca9c:	6878      	ldr	r0, [r7, #4]
3418ca9e:	f000 f918 	bl	3418ccd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3418caa2:	687b      	ldr	r3, [r7, #4]
3418caa4:	2200      	movs	r2, #0
3418caa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
3418caa8:	68bb      	ldr	r3, [r7, #8]
3418caaa:	f003 0308 	and.w	r3, r3, #8
3418caae:	2b00      	cmp	r3, #0
3418cab0:	d020      	beq.n	3418caf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
3418cab2:	68fb      	ldr	r3, [r7, #12]
3418cab4:	f003 0308 	and.w	r3, r3, #8
3418cab8:	2b00      	cmp	r3, #0
3418caba:	d01b      	beq.n	3418caf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
3418cabc:	687b      	ldr	r3, [r7, #4]
3418cabe:	681b      	ldr	r3, [r3, #0]
3418cac0:	f06f 0208 	mvn.w	r2, #8
3418cac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
3418cac6:	687b      	ldr	r3, [r7, #4]
3418cac8:	2204      	movs	r2, #4
3418caca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
3418cacc:	687b      	ldr	r3, [r7, #4]
3418cace:	681b      	ldr	r3, [r3, #0]
3418cad0:	69db      	ldr	r3, [r3, #28]
3418cad2:	f003 0303 	and.w	r3, r3, #3
3418cad6:	2b00      	cmp	r3, #0
3418cad8:	d003      	beq.n	3418cae2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
3418cada:	6878      	ldr	r0, [r7, #4]
3418cadc:	f000 f8ef 	bl	3418ccbe <HAL_TIM_IC_CaptureCallback>
3418cae0:	e005      	b.n	3418caee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
3418cae2:	6878      	ldr	r0, [r7, #4]
3418cae4:	f000 f8e1 	bl	3418ccaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
3418cae8:	6878      	ldr	r0, [r7, #4]
3418caea:	f000 f8f2 	bl	3418ccd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3418caee:	687b      	ldr	r3, [r7, #4]
3418caf0:	2200      	movs	r2, #0
3418caf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
3418caf4:	68bb      	ldr	r3, [r7, #8]
3418caf6:	f003 0310 	and.w	r3, r3, #16
3418cafa:	2b00      	cmp	r3, #0
3418cafc:	d020      	beq.n	3418cb40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
3418cafe:	68fb      	ldr	r3, [r7, #12]
3418cb00:	f003 0310 	and.w	r3, r3, #16
3418cb04:	2b00      	cmp	r3, #0
3418cb06:	d01b      	beq.n	3418cb40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
3418cb08:	687b      	ldr	r3, [r7, #4]
3418cb0a:	681b      	ldr	r3, [r3, #0]
3418cb0c:	f06f 0210 	mvn.w	r2, #16
3418cb10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
3418cb12:	687b      	ldr	r3, [r7, #4]
3418cb14:	2208      	movs	r2, #8
3418cb16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
3418cb18:	687b      	ldr	r3, [r7, #4]
3418cb1a:	681b      	ldr	r3, [r3, #0]
3418cb1c:	69db      	ldr	r3, [r3, #28]
3418cb1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3418cb22:	2b00      	cmp	r3, #0
3418cb24:	d003      	beq.n	3418cb2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
3418cb26:	6878      	ldr	r0, [r7, #4]
3418cb28:	f000 f8c9 	bl	3418ccbe <HAL_TIM_IC_CaptureCallback>
3418cb2c:	e005      	b.n	3418cb3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
3418cb2e:	6878      	ldr	r0, [r7, #4]
3418cb30:	f000 f8bb 	bl	3418ccaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
3418cb34:	6878      	ldr	r0, [r7, #4]
3418cb36:	f000 f8cc 	bl	3418ccd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
3418cb3a:	687b      	ldr	r3, [r7, #4]
3418cb3c:	2200      	movs	r2, #0
3418cb3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
3418cb40:	68bb      	ldr	r3, [r7, #8]
3418cb42:	f003 0301 	and.w	r3, r3, #1
3418cb46:	2b00      	cmp	r3, #0
3418cb48:	d00c      	beq.n	3418cb64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
3418cb4a:	68fb      	ldr	r3, [r7, #12]
3418cb4c:	f003 0301 	and.w	r3, r3, #1
3418cb50:	2b00      	cmp	r3, #0
3418cb52:	d007      	beq.n	3418cb64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
3418cb54:	687b      	ldr	r3, [r7, #4]
3418cb56:	681b      	ldr	r3, [r3, #0]
3418cb58:	f06f 0201 	mvn.w	r2, #1
3418cb5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
3418cb5e:	6878      	ldr	r0, [r7, #4]
3418cb60:	f000 f899 	bl	3418cc96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
3418cb64:	68bb      	ldr	r3, [r7, #8]
3418cb66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418cb6a:	2b00      	cmp	r3, #0
3418cb6c:	d104      	bne.n	3418cb78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
3418cb6e:	68bb      	ldr	r3, [r7, #8]
3418cb70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
3418cb74:	2b00      	cmp	r3, #0
3418cb76:	d00c      	beq.n	3418cb92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
3418cb78:	68fb      	ldr	r3, [r7, #12]
3418cb7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418cb7e:	2b00      	cmp	r3, #0
3418cb80:	d007      	beq.n	3418cb92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
3418cb82:	687b      	ldr	r3, [r7, #4]
3418cb84:	681b      	ldr	r3, [r3, #0]
3418cb86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
3418cb8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
3418cb8c:	6878      	ldr	r0, [r7, #4]
3418cb8e:	f000 f8be 	bl	3418cd0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
3418cb92:	68bb      	ldr	r3, [r7, #8]
3418cb94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418cb98:	2b00      	cmp	r3, #0
3418cb9a:	d00c      	beq.n	3418cbb6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
3418cb9c:	68fb      	ldr	r3, [r7, #12]
3418cb9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418cba2:	2b00      	cmp	r3, #0
3418cba4:	d007      	beq.n	3418cbb6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
3418cba6:	687b      	ldr	r3, [r7, #4]
3418cba8:	681b      	ldr	r3, [r3, #0]
3418cbaa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
3418cbae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
3418cbb0:	6878      	ldr	r0, [r7, #4]
3418cbb2:	f000 f8b6 	bl	3418cd22 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
3418cbb6:	68bb      	ldr	r3, [r7, #8]
3418cbb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418cbbc:	2b00      	cmp	r3, #0
3418cbbe:	d00c      	beq.n	3418cbda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
3418cbc0:	68fb      	ldr	r3, [r7, #12]
3418cbc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418cbc6:	2b00      	cmp	r3, #0
3418cbc8:	d007      	beq.n	3418cbda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
3418cbca:	687b      	ldr	r3, [r7, #4]
3418cbcc:	681b      	ldr	r3, [r3, #0]
3418cbce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
3418cbd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
3418cbd4:	6878      	ldr	r0, [r7, #4]
3418cbd6:	f000 f886 	bl	3418cce6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
3418cbda:	68bb      	ldr	r3, [r7, #8]
3418cbdc:	f003 0320 	and.w	r3, r3, #32
3418cbe0:	2b00      	cmp	r3, #0
3418cbe2:	d00c      	beq.n	3418cbfe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
3418cbe4:	68fb      	ldr	r3, [r7, #12]
3418cbe6:	f003 0320 	and.w	r3, r3, #32
3418cbea:	2b00      	cmp	r3, #0
3418cbec:	d007      	beq.n	3418cbfe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
3418cbee:	687b      	ldr	r3, [r7, #4]
3418cbf0:	681b      	ldr	r3, [r3, #0]
3418cbf2:	f06f 0220 	mvn.w	r2, #32
3418cbf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
3418cbf8:	6878      	ldr	r0, [r7, #4]
3418cbfa:	f000 f87e 	bl	3418ccfa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
3418cbfe:	68bb      	ldr	r3, [r7, #8]
3418cc00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3418cc04:	2b00      	cmp	r3, #0
3418cc06:	d00c      	beq.n	3418cc22 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
3418cc08:	68fb      	ldr	r3, [r7, #12]
3418cc0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3418cc0e:	2b00      	cmp	r3, #0
3418cc10:	d007      	beq.n	3418cc22 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
3418cc12:	687b      	ldr	r3, [r7, #4]
3418cc14:	681b      	ldr	r3, [r3, #0]
3418cc16:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
3418cc1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
3418cc1c:	6878      	ldr	r0, [r7, #4]
3418cc1e:	f000 f88a 	bl	3418cd36 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
3418cc22:	68bb      	ldr	r3, [r7, #8]
3418cc24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3418cc28:	2b00      	cmp	r3, #0
3418cc2a:	d00c      	beq.n	3418cc46 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
3418cc2c:	68fb      	ldr	r3, [r7, #12]
3418cc2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3418cc32:	2b00      	cmp	r3, #0
3418cc34:	d007      	beq.n	3418cc46 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
3418cc36:	687b      	ldr	r3, [r7, #4]
3418cc38:	681b      	ldr	r3, [r3, #0]
3418cc3a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
3418cc3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
3418cc40:	6878      	ldr	r0, [r7, #4]
3418cc42:	f000 f882 	bl	3418cd4a <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
3418cc46:	68bb      	ldr	r3, [r7, #8]
3418cc48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3418cc4c:	2b00      	cmp	r3, #0
3418cc4e:	d00c      	beq.n	3418cc6a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
3418cc50:	68fb      	ldr	r3, [r7, #12]
3418cc52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3418cc56:	2b00      	cmp	r3, #0
3418cc58:	d007      	beq.n	3418cc6a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
3418cc5a:	687b      	ldr	r3, [r7, #4]
3418cc5c:	681b      	ldr	r3, [r3, #0]
3418cc5e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
3418cc62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
3418cc64:	6878      	ldr	r0, [r7, #4]
3418cc66:	f000 f87a 	bl	3418cd5e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
3418cc6a:	68bb      	ldr	r3, [r7, #8]
3418cc6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3418cc70:	2b00      	cmp	r3, #0
3418cc72:	d00c      	beq.n	3418cc8e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
3418cc74:	68fb      	ldr	r3, [r7, #12]
3418cc76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3418cc7a:	2b00      	cmp	r3, #0
3418cc7c:	d007      	beq.n	3418cc8e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
3418cc7e:	687b      	ldr	r3, [r7, #4]
3418cc80:	681b      	ldr	r3, [r3, #0]
3418cc82:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
3418cc86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
3418cc88:	6878      	ldr	r0, [r7, #4]
3418cc8a:	f000 f872 	bl	3418cd72 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
3418cc8e:	bf00      	nop
3418cc90:	3710      	adds	r7, #16
3418cc92:	46bd      	mov	sp, r7
3418cc94:	bd80      	pop	{r7, pc}

3418cc96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
3418cc96:	b480      	push	{r7}
3418cc98:	b083      	sub	sp, #12
3418cc9a:	af00      	add	r7, sp, #0
3418cc9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
3418cc9e:	bf00      	nop
3418cca0:	370c      	adds	r7, #12
3418cca2:	46bd      	mov	sp, r7
3418cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cca8:	4770      	bx	lr

3418ccaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
3418ccaa:	b480      	push	{r7}
3418ccac:	b083      	sub	sp, #12
3418ccae:	af00      	add	r7, sp, #0
3418ccb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
3418ccb2:	bf00      	nop
3418ccb4:	370c      	adds	r7, #12
3418ccb6:	46bd      	mov	sp, r7
3418ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ccbc:	4770      	bx	lr

3418ccbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
3418ccbe:	b480      	push	{r7}
3418ccc0:	b083      	sub	sp, #12
3418ccc2:	af00      	add	r7, sp, #0
3418ccc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
3418ccc6:	bf00      	nop
3418ccc8:	370c      	adds	r7, #12
3418ccca:	46bd      	mov	sp, r7
3418cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ccd0:	4770      	bx	lr

3418ccd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
3418ccd2:	b480      	push	{r7}
3418ccd4:	b083      	sub	sp, #12
3418ccd6:	af00      	add	r7, sp, #0
3418ccd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
3418ccda:	bf00      	nop
3418ccdc:	370c      	adds	r7, #12
3418ccde:	46bd      	mov	sp, r7
3418cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cce4:	4770      	bx	lr

3418cce6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
3418cce6:	b480      	push	{r7}
3418cce8:	b083      	sub	sp, #12
3418ccea:	af00      	add	r7, sp, #0
3418ccec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
3418ccee:	bf00      	nop
3418ccf0:	370c      	adds	r7, #12
3418ccf2:	46bd      	mov	sp, r7
3418ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ccf8:	4770      	bx	lr

3418ccfa <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
3418ccfa:	b480      	push	{r7}
3418ccfc:	b083      	sub	sp, #12
3418ccfe:	af00      	add	r7, sp, #0
3418cd00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
3418cd02:	bf00      	nop
3418cd04:	370c      	adds	r7, #12
3418cd06:	46bd      	mov	sp, r7
3418cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cd0c:	4770      	bx	lr

3418cd0e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
3418cd0e:	b480      	push	{r7}
3418cd10:	b083      	sub	sp, #12
3418cd12:	af00      	add	r7, sp, #0
3418cd14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
3418cd16:	bf00      	nop
3418cd18:	370c      	adds	r7, #12
3418cd1a:	46bd      	mov	sp, r7
3418cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cd20:	4770      	bx	lr

3418cd22 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
3418cd22:	b480      	push	{r7}
3418cd24:	b083      	sub	sp, #12
3418cd26:	af00      	add	r7, sp, #0
3418cd28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
3418cd2a:	bf00      	nop
3418cd2c:	370c      	adds	r7, #12
3418cd2e:	46bd      	mov	sp, r7
3418cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cd34:	4770      	bx	lr

3418cd36 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
3418cd36:	b480      	push	{r7}
3418cd38:	b083      	sub	sp, #12
3418cd3a:	af00      	add	r7, sp, #0
3418cd3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
3418cd3e:	bf00      	nop
3418cd40:	370c      	adds	r7, #12
3418cd42:	46bd      	mov	sp, r7
3418cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cd48:	4770      	bx	lr

3418cd4a <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
3418cd4a:	b480      	push	{r7}
3418cd4c:	b083      	sub	sp, #12
3418cd4e:	af00      	add	r7, sp, #0
3418cd50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
3418cd52:	bf00      	nop
3418cd54:	370c      	adds	r7, #12
3418cd56:	46bd      	mov	sp, r7
3418cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cd5c:	4770      	bx	lr

3418cd5e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
3418cd5e:	b480      	push	{r7}
3418cd60:	b083      	sub	sp, #12
3418cd62:	af00      	add	r7, sp, #0
3418cd64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
3418cd66:	bf00      	nop
3418cd68:	370c      	adds	r7, #12
3418cd6a:	46bd      	mov	sp, r7
3418cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cd70:	4770      	bx	lr

3418cd72 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
3418cd72:	b480      	push	{r7}
3418cd74:	b083      	sub	sp, #12
3418cd76:	af00      	add	r7, sp, #0
3418cd78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
3418cd7a:	bf00      	nop
3418cd7c:	370c      	adds	r7, #12
3418cd7e:	46bd      	mov	sp, r7
3418cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
3418cd84:	4770      	bx	lr

3418cd86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
3418cd86:	b580      	push	{r7, lr}
3418cd88:	b082      	sub	sp, #8
3418cd8a:	af00      	add	r7, sp, #0
3418cd8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
3418cd8e:	687b      	ldr	r3, [r7, #4]
3418cd90:	2b00      	cmp	r3, #0
3418cd92:	d101      	bne.n	3418cd98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
3418cd94:	2301      	movs	r3, #1
3418cd96:	e042      	b.n	3418ce1e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
3418cd98:	687b      	ldr	r3, [r7, #4]
3418cd9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418cd9e:	2b00      	cmp	r3, #0
3418cda0:	d106      	bne.n	3418cdb0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
3418cda2:	687b      	ldr	r3, [r7, #4]
3418cda4:	2200      	movs	r2, #0
3418cda6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
3418cdaa:	6878      	ldr	r0, [r7, #4]
3418cdac:	f7f4 ff7e 	bl	34181cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
3418cdb0:	687b      	ldr	r3, [r7, #4]
3418cdb2:	2224      	movs	r2, #36	@ 0x24
3418cdb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
3418cdb8:	687b      	ldr	r3, [r7, #4]
3418cdba:	681b      	ldr	r3, [r3, #0]
3418cdbc:	681a      	ldr	r2, [r3, #0]
3418cdbe:	687b      	ldr	r3, [r7, #4]
3418cdc0:	681b      	ldr	r3, [r3, #0]
3418cdc2:	f022 0201 	bic.w	r2, r2, #1
3418cdc6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3418cdc8:	687b      	ldr	r3, [r7, #4]
3418cdca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418cdcc:	2b00      	cmp	r3, #0
3418cdce:	d002      	beq.n	3418cdd6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
3418cdd0:	6878      	ldr	r0, [r7, #4]
3418cdd2:	f000 faa3 	bl	3418d31c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
3418cdd6:	6878      	ldr	r0, [r7, #4]
3418cdd8:	f000 f8b4 	bl	3418cf44 <UART_SetConfig>
3418cddc:	4603      	mov	r3, r0
3418cdde:	2b01      	cmp	r3, #1
3418cde0:	d101      	bne.n	3418cde6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
3418cde2:	2301      	movs	r3, #1
3418cde4:	e01b      	b.n	3418ce1e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3418cde6:	687b      	ldr	r3, [r7, #4]
3418cde8:	681b      	ldr	r3, [r3, #0]
3418cdea:	685a      	ldr	r2, [r3, #4]
3418cdec:	687b      	ldr	r3, [r7, #4]
3418cdee:	681b      	ldr	r3, [r3, #0]
3418cdf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3418cdf4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3418cdf6:	687b      	ldr	r3, [r7, #4]
3418cdf8:	681b      	ldr	r3, [r3, #0]
3418cdfa:	689a      	ldr	r2, [r3, #8]
3418cdfc:	687b      	ldr	r3, [r7, #4]
3418cdfe:	681b      	ldr	r3, [r3, #0]
3418ce00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3418ce04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
3418ce06:	687b      	ldr	r3, [r7, #4]
3418ce08:	681b      	ldr	r3, [r3, #0]
3418ce0a:	681a      	ldr	r2, [r3, #0]
3418ce0c:	687b      	ldr	r3, [r7, #4]
3418ce0e:	681b      	ldr	r3, [r3, #0]
3418ce10:	f042 0201 	orr.w	r2, r2, #1
3418ce14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
3418ce16:	6878      	ldr	r0, [r7, #4]
3418ce18:	f000 fb22 	bl	3418d460 <UART_CheckIdleState>
3418ce1c:	4603      	mov	r3, r0
}
3418ce1e:	4618      	mov	r0, r3
3418ce20:	3708      	adds	r7, #8
3418ce22:	46bd      	mov	sp, r7
3418ce24:	bd80      	pop	{r7, pc}

3418ce26 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
3418ce26:	b580      	push	{r7, lr}
3418ce28:	b08a      	sub	sp, #40	@ 0x28
3418ce2a:	af02      	add	r7, sp, #8
3418ce2c:	60f8      	str	r0, [r7, #12]
3418ce2e:	60b9      	str	r1, [r7, #8]
3418ce30:	603b      	str	r3, [r7, #0]
3418ce32:	4613      	mov	r3, r2
3418ce34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
3418ce36:	68fb      	ldr	r3, [r7, #12]
3418ce38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418ce3c:	2b20      	cmp	r3, #32
3418ce3e:	d17b      	bne.n	3418cf38 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
3418ce40:	68bb      	ldr	r3, [r7, #8]
3418ce42:	2b00      	cmp	r3, #0
3418ce44:	d002      	beq.n	3418ce4c <HAL_UART_Transmit+0x26>
3418ce46:	88fb      	ldrh	r3, [r7, #6]
3418ce48:	2b00      	cmp	r3, #0
3418ce4a:	d101      	bne.n	3418ce50 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
3418ce4c:	2301      	movs	r3, #1
3418ce4e:	e074      	b.n	3418cf3a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
3418ce50:	68fb      	ldr	r3, [r7, #12]
3418ce52:	2200      	movs	r2, #0
3418ce54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3418ce58:	68fb      	ldr	r3, [r7, #12]
3418ce5a:	2221      	movs	r2, #33	@ 0x21
3418ce5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
3418ce60:	f7f5 fac2 	bl	341823e8 <HAL_GetTick>
3418ce64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
3418ce66:	68fb      	ldr	r3, [r7, #12]
3418ce68:	88fa      	ldrh	r2, [r7, #6]
3418ce6a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
3418ce6e:	68fb      	ldr	r3, [r7, #12]
3418ce70:	88fa      	ldrh	r2, [r7, #6]
3418ce72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3418ce76:	68fb      	ldr	r3, [r7, #12]
3418ce78:	689b      	ldr	r3, [r3, #8]
3418ce7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418ce7e:	d108      	bne.n	3418ce92 <HAL_UART_Transmit+0x6c>
3418ce80:	68fb      	ldr	r3, [r7, #12]
3418ce82:	691b      	ldr	r3, [r3, #16]
3418ce84:	2b00      	cmp	r3, #0
3418ce86:	d104      	bne.n	3418ce92 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
3418ce88:	2300      	movs	r3, #0
3418ce8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
3418ce8c:	68bb      	ldr	r3, [r7, #8]
3418ce8e:	61bb      	str	r3, [r7, #24]
3418ce90:	e003      	b.n	3418ce9a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
3418ce92:	68bb      	ldr	r3, [r7, #8]
3418ce94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
3418ce96:	2300      	movs	r3, #0
3418ce98:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
3418ce9a:	e030      	b.n	3418cefe <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3418ce9c:	683b      	ldr	r3, [r7, #0]
3418ce9e:	9300      	str	r3, [sp, #0]
3418cea0:	697b      	ldr	r3, [r7, #20]
3418cea2:	2200      	movs	r2, #0
3418cea4:	2180      	movs	r1, #128	@ 0x80
3418cea6:	68f8      	ldr	r0, [r7, #12]
3418cea8:	f000 fb84 	bl	3418d5b4 <UART_WaitOnFlagUntilTimeout>
3418ceac:	4603      	mov	r3, r0
3418ceae:	2b00      	cmp	r3, #0
3418ceb0:	d005      	beq.n	3418cebe <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
3418ceb2:	68fb      	ldr	r3, [r7, #12]
3418ceb4:	2220      	movs	r2, #32
3418ceb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
3418ceba:	2303      	movs	r3, #3
3418cebc:	e03d      	b.n	3418cf3a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
3418cebe:	69fb      	ldr	r3, [r7, #28]
3418cec0:	2b00      	cmp	r3, #0
3418cec2:	d10b      	bne.n	3418cedc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3418cec4:	69bb      	ldr	r3, [r7, #24]
3418cec6:	881b      	ldrh	r3, [r3, #0]
3418cec8:	461a      	mov	r2, r3
3418ceca:	68fb      	ldr	r3, [r7, #12]
3418cecc:	681b      	ldr	r3, [r3, #0]
3418cece:	f3c2 0208 	ubfx	r2, r2, #0, #9
3418ced2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
3418ced4:	69bb      	ldr	r3, [r7, #24]
3418ced6:	3302      	adds	r3, #2
3418ced8:	61bb      	str	r3, [r7, #24]
3418ceda:	e007      	b.n	3418ceec <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3418cedc:	69fb      	ldr	r3, [r7, #28]
3418cede:	781a      	ldrb	r2, [r3, #0]
3418cee0:	68fb      	ldr	r3, [r7, #12]
3418cee2:	681b      	ldr	r3, [r3, #0]
3418cee4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
3418cee6:	69fb      	ldr	r3, [r7, #28]
3418cee8:	3301      	adds	r3, #1
3418ceea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
3418ceec:	68fb      	ldr	r3, [r7, #12]
3418ceee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3418cef2:	b29b      	uxth	r3, r3
3418cef4:	3b01      	subs	r3, #1
3418cef6:	b29a      	uxth	r2, r3
3418cef8:	68fb      	ldr	r3, [r7, #12]
3418cefa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
3418cefe:	68fb      	ldr	r3, [r7, #12]
3418cf00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3418cf04:	b29b      	uxth	r3, r3
3418cf06:	2b00      	cmp	r3, #0
3418cf08:	d1c8      	bne.n	3418ce9c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3418cf0a:	683b      	ldr	r3, [r7, #0]
3418cf0c:	9300      	str	r3, [sp, #0]
3418cf0e:	697b      	ldr	r3, [r7, #20]
3418cf10:	2200      	movs	r2, #0
3418cf12:	2140      	movs	r1, #64	@ 0x40
3418cf14:	68f8      	ldr	r0, [r7, #12]
3418cf16:	f000 fb4d 	bl	3418d5b4 <UART_WaitOnFlagUntilTimeout>
3418cf1a:	4603      	mov	r3, r0
3418cf1c:	2b00      	cmp	r3, #0
3418cf1e:	d005      	beq.n	3418cf2c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
3418cf20:	68fb      	ldr	r3, [r7, #12]
3418cf22:	2220      	movs	r2, #32
3418cf24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
3418cf28:	2303      	movs	r3, #3
3418cf2a:	e006      	b.n	3418cf3a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
3418cf2c:	68fb      	ldr	r3, [r7, #12]
3418cf2e:	2220      	movs	r2, #32
3418cf30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
3418cf34:	2300      	movs	r3, #0
3418cf36:	e000      	b.n	3418cf3a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
3418cf38:	2302      	movs	r3, #2
  }
}
3418cf3a:	4618      	mov	r0, r3
3418cf3c:	3720      	adds	r7, #32
3418cf3e:	46bd      	mov	sp, r7
3418cf40:	bd80      	pop	{r7, pc}
	...

3418cf44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
3418cf44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3418cf48:	b090      	sub	sp, #64	@ 0x40
3418cf4a:	af00      	add	r7, sp, #0
3418cf4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
3418cf4e:	2300      	movs	r3, #0
3418cf50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
3418cf54:	697b      	ldr	r3, [r7, #20]
3418cf56:	681b      	ldr	r3, [r3, #0]
3418cf58:	4aa3      	ldr	r2, [pc, #652]	@ (3418d1e8 <UART_SetConfig+0x2a4>)
3418cf5a:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3418cf5c:	697b      	ldr	r3, [r7, #20]
3418cf5e:	689a      	ldr	r2, [r3, #8]
3418cf60:	697b      	ldr	r3, [r7, #20]
3418cf62:	691b      	ldr	r3, [r3, #16]
3418cf64:	431a      	orrs	r2, r3
3418cf66:	697b      	ldr	r3, [r7, #20]
3418cf68:	695b      	ldr	r3, [r3, #20]
3418cf6a:	431a      	orrs	r2, r3
3418cf6c:	697b      	ldr	r3, [r7, #20]
3418cf6e:	69db      	ldr	r3, [r3, #28]
3418cf70:	4313      	orrs	r3, r2
3418cf72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3418cf74:	697b      	ldr	r3, [r7, #20]
3418cf76:	681b      	ldr	r3, [r3, #0]
3418cf78:	681a      	ldr	r2, [r3, #0]
3418cf7a:	4b9c      	ldr	r3, [pc, #624]	@ (3418d1ec <UART_SetConfig+0x2a8>)
3418cf7c:	4013      	ands	r3, r2
3418cf7e:	697a      	ldr	r2, [r7, #20]
3418cf80:	6812      	ldr	r2, [r2, #0]
3418cf82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418cf84:	430b      	orrs	r3, r1
3418cf86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3418cf88:	697b      	ldr	r3, [r7, #20]
3418cf8a:	681b      	ldr	r3, [r3, #0]
3418cf8c:	685b      	ldr	r3, [r3, #4]
3418cf8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
3418cf92:	697b      	ldr	r3, [r7, #20]
3418cf94:	68da      	ldr	r2, [r3, #12]
3418cf96:	697b      	ldr	r3, [r7, #20]
3418cf98:	681b      	ldr	r3, [r3, #0]
3418cf9a:	430a      	orrs	r2, r1
3418cf9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3418cf9e:	697b      	ldr	r3, [r7, #20]
3418cfa0:	699b      	ldr	r3, [r3, #24]
3418cfa2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
3418cfa4:	697b      	ldr	r3, [r7, #20]
3418cfa6:	681b      	ldr	r3, [r3, #0]
3418cfa8:	4a8f      	ldr	r2, [pc, #572]	@ (3418d1e8 <UART_SetConfig+0x2a4>)
3418cfaa:	4293      	cmp	r3, r2
3418cfac:	d009      	beq.n	3418cfc2 <UART_SetConfig+0x7e>
3418cfae:	697b      	ldr	r3, [r7, #20]
3418cfb0:	681b      	ldr	r3, [r3, #0]
3418cfb2:	4a8f      	ldr	r2, [pc, #572]	@ (3418d1f0 <UART_SetConfig+0x2ac>)
3418cfb4:	4293      	cmp	r3, r2
3418cfb6:	d004      	beq.n	3418cfc2 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
3418cfb8:	697b      	ldr	r3, [r7, #20]
3418cfba:	6a1b      	ldr	r3, [r3, #32]
3418cfbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
3418cfbe:	4313      	orrs	r3, r2
3418cfc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3418cfc2:	697b      	ldr	r3, [r7, #20]
3418cfc4:	681b      	ldr	r3, [r3, #0]
3418cfc6:	689b      	ldr	r3, [r3, #8]
3418cfc8:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
3418cfcc:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
3418cfd0:	697a      	ldr	r2, [r7, #20]
3418cfd2:	6812      	ldr	r2, [r2, #0]
3418cfd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418cfd6:	430b      	orrs	r3, r1
3418cfd8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3418cfda:	697b      	ldr	r3, [r7, #20]
3418cfdc:	681b      	ldr	r3, [r3, #0]
3418cfde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418cfe0:	f023 010f 	bic.w	r1, r3, #15
3418cfe4:	697b      	ldr	r3, [r7, #20]
3418cfe6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3418cfe8:	697b      	ldr	r3, [r7, #20]
3418cfea:	681b      	ldr	r3, [r3, #0]
3418cfec:	430a      	orrs	r2, r1
3418cfee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
3418cff0:	697b      	ldr	r3, [r7, #20]
3418cff2:	681b      	ldr	r3, [r3, #0]
3418cff4:	4a7f      	ldr	r2, [pc, #508]	@ (3418d1f4 <UART_SetConfig+0x2b0>)
3418cff6:	4293      	cmp	r3, r2
3418cff8:	d106      	bne.n	3418d008 <UART_SetConfig+0xc4>
3418cffa:	f04f 0200 	mov.w	r2, #0
3418cffe:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418d002:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418d006:	e07d      	b.n	3418d104 <UART_SetConfig+0x1c0>
3418d008:	697b      	ldr	r3, [r7, #20]
3418d00a:	681b      	ldr	r3, [r3, #0]
3418d00c:	4a7a      	ldr	r2, [pc, #488]	@ (3418d1f8 <UART_SetConfig+0x2b4>)
3418d00e:	4293      	cmp	r3, r2
3418d010:	d106      	bne.n	3418d020 <UART_SetConfig+0xdc>
3418d012:	f04f 0200 	mov.w	r2, #0
3418d016:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418d01a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418d01e:	e071      	b.n	3418d104 <UART_SetConfig+0x1c0>
3418d020:	697b      	ldr	r3, [r7, #20]
3418d022:	681b      	ldr	r3, [r3, #0]
3418d024:	4a75      	ldr	r2, [pc, #468]	@ (3418d1fc <UART_SetConfig+0x2b8>)
3418d026:	4293      	cmp	r3, r2
3418d028:	d106      	bne.n	3418d038 <UART_SetConfig+0xf4>
3418d02a:	f04f 0200 	mov.w	r2, #0
3418d02e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418d032:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418d036:	e065      	b.n	3418d104 <UART_SetConfig+0x1c0>
3418d038:	697b      	ldr	r3, [r7, #20]
3418d03a:	681b      	ldr	r3, [r3, #0]
3418d03c:	4a70      	ldr	r2, [pc, #448]	@ (3418d200 <UART_SetConfig+0x2bc>)
3418d03e:	4293      	cmp	r3, r2
3418d040:	d106      	bne.n	3418d050 <UART_SetConfig+0x10c>
3418d042:	f04f 0200 	mov.w	r2, #0
3418d046:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418d04a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418d04e:	e059      	b.n	3418d104 <UART_SetConfig+0x1c0>
3418d050:	697b      	ldr	r3, [r7, #20]
3418d052:	681b      	ldr	r3, [r3, #0]
3418d054:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3418d058:	d106      	bne.n	3418d068 <UART_SetConfig+0x124>
3418d05a:	f04f 0200 	mov.w	r2, #0
3418d05e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3418d062:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418d066:	e04d      	b.n	3418d104 <UART_SetConfig+0x1c0>
3418d068:	697b      	ldr	r3, [r7, #20]
3418d06a:	681b      	ldr	r3, [r3, #0]
3418d06c:	4a65      	ldr	r2, [pc, #404]	@ (3418d204 <UART_SetConfig+0x2c0>)
3418d06e:	4293      	cmp	r3, r2
3418d070:	d106      	bne.n	3418d080 <UART_SetConfig+0x13c>
3418d072:	f04f 0200 	mov.w	r2, #0
3418d076:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418d07a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418d07e:	e041      	b.n	3418d104 <UART_SetConfig+0x1c0>
3418d080:	697b      	ldr	r3, [r7, #20]
3418d082:	681b      	ldr	r3, [r3, #0]
3418d084:	4a60      	ldr	r2, [pc, #384]	@ (3418d208 <UART_SetConfig+0x2c4>)
3418d086:	4293      	cmp	r3, r2
3418d088:	d106      	bne.n	3418d098 <UART_SetConfig+0x154>
3418d08a:	f04f 0200 	mov.w	r2, #0
3418d08e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3418d092:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418d096:	e035      	b.n	3418d104 <UART_SetConfig+0x1c0>
3418d098:	697b      	ldr	r3, [r7, #20]
3418d09a:	681b      	ldr	r3, [r3, #0]
3418d09c:	4a5b      	ldr	r2, [pc, #364]	@ (3418d20c <UART_SetConfig+0x2c8>)
3418d09e:	4293      	cmp	r3, r2
3418d0a0:	d106      	bne.n	3418d0b0 <UART_SetConfig+0x16c>
3418d0a2:	f04f 0200 	mov.w	r2, #0
3418d0a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418d0aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418d0ae:	e029      	b.n	3418d104 <UART_SetConfig+0x1c0>
3418d0b0:	697b      	ldr	r3, [r7, #20]
3418d0b2:	681b      	ldr	r3, [r3, #0]
3418d0b4:	4a56      	ldr	r2, [pc, #344]	@ (3418d210 <UART_SetConfig+0x2cc>)
3418d0b6:	4293      	cmp	r3, r2
3418d0b8:	d106      	bne.n	3418d0c8 <UART_SetConfig+0x184>
3418d0ba:	f04f 0200 	mov.w	r2, #0
3418d0be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3418d0c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418d0c6:	e01d      	b.n	3418d104 <UART_SetConfig+0x1c0>
3418d0c8:	697b      	ldr	r3, [r7, #20]
3418d0ca:	681b      	ldr	r3, [r3, #0]
3418d0cc:	4a51      	ldr	r2, [pc, #324]	@ (3418d214 <UART_SetConfig+0x2d0>)
3418d0ce:	4293      	cmp	r3, r2
3418d0d0:	d106      	bne.n	3418d0e0 <UART_SetConfig+0x19c>
3418d0d2:	f04f 0200 	mov.w	r2, #0
3418d0d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
3418d0da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418d0de:	e011      	b.n	3418d104 <UART_SetConfig+0x1c0>
3418d0e0:	697b      	ldr	r3, [r7, #20]
3418d0e2:	681b      	ldr	r3, [r3, #0]
3418d0e4:	4a40      	ldr	r2, [pc, #256]	@ (3418d1e8 <UART_SetConfig+0x2a4>)
3418d0e6:	4293      	cmp	r3, r2
3418d0e8:	d106      	bne.n	3418d0f8 <UART_SetConfig+0x1b4>
3418d0ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3418d0ee:	f04f 0300 	mov.w	r3, #0
3418d0f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418d0f6:	e005      	b.n	3418d104 <UART_SetConfig+0x1c0>
3418d0f8:	f04f 0200 	mov.w	r2, #0
3418d0fc:	f04f 0300 	mov.w	r3, #0
3418d100:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
3418d104:	697b      	ldr	r3, [r7, #20]
3418d106:	681b      	ldr	r3, [r3, #0]
3418d108:	4a37      	ldr	r2, [pc, #220]	@ (3418d1e8 <UART_SetConfig+0x2a4>)
3418d10a:	4293      	cmp	r3, r2
3418d10c:	d005      	beq.n	3418d11a <UART_SetConfig+0x1d6>
3418d10e:	697b      	ldr	r3, [r7, #20]
3418d110:	681b      	ldr	r3, [r3, #0]
3418d112:	4a37      	ldr	r2, [pc, #220]	@ (3418d1f0 <UART_SetConfig+0x2ac>)
3418d114:	4293      	cmp	r3, r2
3418d116:	f040 8081 	bne.w	3418d21c <UART_SetConfig+0x2d8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3418d11a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418d11e:	f7fb faa3 	bl	34188668 <HAL_RCCEx_GetPeriphCLKFreq>
3418d122:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
3418d124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418d126:	2b00      	cmp	r3, #0
3418d128:	f000 80e0 	beq.w	3418d2ec <UART_SetConfig+0x3a8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3418d12c:	697b      	ldr	r3, [r7, #20]
3418d12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d130:	4a39      	ldr	r2, [pc, #228]	@ (3418d218 <UART_SetConfig+0x2d4>)
3418d132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418d136:	461a      	mov	r2, r3
3418d138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418d13a:	fbb3 f3f2 	udiv	r3, r3, r2
3418d13e:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3418d140:	697b      	ldr	r3, [r7, #20]
3418d142:	685a      	ldr	r2, [r3, #4]
3418d144:	4613      	mov	r3, r2
3418d146:	005b      	lsls	r3, r3, #1
3418d148:	4413      	add	r3, r2
3418d14a:	69fa      	ldr	r2, [r7, #28]
3418d14c:	429a      	cmp	r2, r3
3418d14e:	d305      	bcc.n	3418d15c <UART_SetConfig+0x218>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
3418d150:	697b      	ldr	r3, [r7, #20]
3418d152:	685b      	ldr	r3, [r3, #4]
3418d154:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3418d156:	69fa      	ldr	r2, [r7, #28]
3418d158:	429a      	cmp	r2, r3
3418d15a:	d903      	bls.n	3418d164 <UART_SetConfig+0x220>
      {
        ret = HAL_ERROR;
3418d15c:	2301      	movs	r3, #1
3418d15e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3418d162:	e040      	b.n	3418d1e6 <UART_SetConfig+0x2a2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3418d164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418d166:	2200      	movs	r2, #0
3418d168:	60bb      	str	r3, [r7, #8]
3418d16a:	60fa      	str	r2, [r7, #12]
3418d16c:	697b      	ldr	r3, [r7, #20]
3418d16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d170:	4a29      	ldr	r2, [pc, #164]	@ (3418d218 <UART_SetConfig+0x2d4>)
3418d172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418d176:	b29b      	uxth	r3, r3
3418d178:	2200      	movs	r2, #0
3418d17a:	603b      	str	r3, [r7, #0]
3418d17c:	607a      	str	r2, [r7, #4]
3418d17e:	e9d7 2300 	ldrd	r2, r3, [r7]
3418d182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3418d186:	f7f3 fb01 	bl	3418078c <__aeabi_uldivmod>
3418d18a:	4602      	mov	r2, r0
3418d18c:	460b      	mov	r3, r1
3418d18e:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
3418d192:	6979      	ldr	r1, [r7, #20]
3418d194:	6849      	ldr	r1, [r1, #4]
3418d196:	0849      	lsrs	r1, r1, #1
3418d198:	2000      	movs	r0, #0
3418d19a:	460c      	mov	r4, r1
3418d19c:	4605      	mov	r5, r0
3418d19e:	eb12 0804 	adds.w	r8, r2, r4
3418d1a2:	eb43 0905 	adc.w	r9, r3, r5
3418d1a6:	697b      	ldr	r3, [r7, #20]
3418d1a8:	685b      	ldr	r3, [r3, #4]
3418d1aa:	2200      	movs	r2, #0
3418d1ac:	469a      	mov	sl, r3
3418d1ae:	4693      	mov	fp, r2
3418d1b0:	4652      	mov	r2, sl
3418d1b2:	465b      	mov	r3, fp
3418d1b4:	4640      	mov	r0, r8
3418d1b6:	4649      	mov	r1, r9
3418d1b8:	f7f3 fae8 	bl	3418078c <__aeabi_uldivmod>
3418d1bc:	4602      	mov	r2, r0
3418d1be:	460b      	mov	r3, r1
3418d1c0:	4613      	mov	r3, r2
3418d1c2:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3418d1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d1c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418d1ca:	d308      	bcc.n	3418d1de <UART_SetConfig+0x29a>
3418d1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d1ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418d1d2:	d204      	bcs.n	3418d1de <UART_SetConfig+0x29a>
        {
          huart->Instance->BRR = usartdiv;
3418d1d4:	697b      	ldr	r3, [r7, #20]
3418d1d6:	681b      	ldr	r3, [r3, #0]
3418d1d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3418d1da:	60da      	str	r2, [r3, #12]
3418d1dc:	e003      	b.n	3418d1e6 <UART_SetConfig+0x2a2>
        }
        else
        {
          ret = HAL_ERROR;
3418d1de:	2301      	movs	r3, #1
3418d1e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
3418d1e4:	e082      	b.n	3418d2ec <UART_SetConfig+0x3a8>
3418d1e6:	e081      	b.n	3418d2ec <UART_SetConfig+0x3a8>
3418d1e8:	56000c00 	.word	0x56000c00
3418d1ec:	cfff69f3 	.word	0xcfff69f3
3418d1f0:	46000c00 	.word	0x46000c00
3418d1f4:	52001000 	.word	0x52001000
3418d1f8:	50004400 	.word	0x50004400
3418d1fc:	50004800 	.word	0x50004800
3418d200:	50004c00 	.word	0x50004c00
3418d204:	52001400 	.word	0x52001400
3418d208:	50007800 	.word	0x50007800
3418d20c:	50007c00 	.word	0x50007c00
3418d210:	52001800 	.word	0x52001800
3418d214:	52001c00 	.word	0x52001c00
3418d218:	34192860 	.word	0x34192860
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3418d21c:	697b      	ldr	r3, [r7, #20]
3418d21e:	69db      	ldr	r3, [r3, #28]
3418d220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3418d224:	d138      	bne.n	3418d298 <UART_SetConfig+0x354>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3418d226:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418d22a:	f7fb fa1d 	bl	34188668 <HAL_RCCEx_GetPeriphCLKFreq>
3418d22e:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
3418d230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418d232:	2b00      	cmp	r3, #0
3418d234:	d05a      	beq.n	3418d2ec <UART_SetConfig+0x3a8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3418d236:	697b      	ldr	r3, [r7, #20]
3418d238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d23a:	4a37      	ldr	r2, [pc, #220]	@ (3418d318 <UART_SetConfig+0x3d4>)
3418d23c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418d240:	461a      	mov	r2, r3
3418d242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418d244:	fbb3 f3f2 	udiv	r3, r3, r2
3418d248:	005a      	lsls	r2, r3, #1
3418d24a:	697b      	ldr	r3, [r7, #20]
3418d24c:	685b      	ldr	r3, [r3, #4]
3418d24e:	085b      	lsrs	r3, r3, #1
3418d250:	441a      	add	r2, r3
3418d252:	697b      	ldr	r3, [r7, #20]
3418d254:	685b      	ldr	r3, [r3, #4]
3418d256:	fbb2 f3f3 	udiv	r3, r2, r3
3418d25a:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3418d25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d25e:	2b0f      	cmp	r3, #15
3418d260:	d916      	bls.n	3418d290 <UART_SetConfig+0x34c>
3418d262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418d268:	d212      	bcs.n	3418d290 <UART_SetConfig+0x34c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3418d26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d26c:	b29b      	uxth	r3, r3
3418d26e:	f023 030f 	bic.w	r3, r3, #15
3418d272:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3418d274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d276:	085b      	lsrs	r3, r3, #1
3418d278:	b29b      	uxth	r3, r3
3418d27a:	f003 0307 	and.w	r3, r3, #7
3418d27e:	b29a      	uxth	r2, r3
3418d280:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
3418d282:	4313      	orrs	r3, r2
3418d284:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
3418d286:	697b      	ldr	r3, [r7, #20]
3418d288:	681b      	ldr	r3, [r3, #0]
3418d28a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
3418d28c:	60da      	str	r2, [r3, #12]
3418d28e:	e02d      	b.n	3418d2ec <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
3418d290:	2301      	movs	r3, #1
3418d292:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3418d296:	e029      	b.n	3418d2ec <UART_SetConfig+0x3a8>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3418d298:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418d29c:	f7fb f9e4 	bl	34188668 <HAL_RCCEx_GetPeriphCLKFreq>
3418d2a0:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
3418d2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418d2a4:	2b00      	cmp	r3, #0
3418d2a6:	d021      	beq.n	3418d2ec <UART_SetConfig+0x3a8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3418d2a8:	697b      	ldr	r3, [r7, #20]
3418d2aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d2ac:	4a1a      	ldr	r2, [pc, #104]	@ (3418d318 <UART_SetConfig+0x3d4>)
3418d2ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418d2b2:	461a      	mov	r2, r3
3418d2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418d2b6:	fbb3 f2f2 	udiv	r2, r3, r2
3418d2ba:	697b      	ldr	r3, [r7, #20]
3418d2bc:	685b      	ldr	r3, [r3, #4]
3418d2be:	085b      	lsrs	r3, r3, #1
3418d2c0:	441a      	add	r2, r3
3418d2c2:	697b      	ldr	r3, [r7, #20]
3418d2c4:	685b      	ldr	r3, [r3, #4]
3418d2c6:	fbb2 f3f3 	udiv	r3, r2, r3
3418d2ca:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3418d2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d2ce:	2b0f      	cmp	r3, #15
3418d2d0:	d909      	bls.n	3418d2e6 <UART_SetConfig+0x3a2>
3418d2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d2d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418d2d8:	d205      	bcs.n	3418d2e6 <UART_SetConfig+0x3a2>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
3418d2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d2dc:	b29a      	uxth	r2, r3
3418d2de:	697b      	ldr	r3, [r7, #20]
3418d2e0:	681b      	ldr	r3, [r3, #0]
3418d2e2:	60da      	str	r2, [r3, #12]
3418d2e4:	e002      	b.n	3418d2ec <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
3418d2e6:	2301      	movs	r3, #1
3418d2e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
3418d2ec:	697b      	ldr	r3, [r7, #20]
3418d2ee:	2201      	movs	r2, #1
3418d2f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
3418d2f4:	697b      	ldr	r3, [r7, #20]
3418d2f6:	2201      	movs	r2, #1
3418d2f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
3418d2fc:	697b      	ldr	r3, [r7, #20]
3418d2fe:	2200      	movs	r2, #0
3418d300:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
3418d302:	697b      	ldr	r3, [r7, #20]
3418d304:	2200      	movs	r2, #0
3418d306:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
3418d308:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
3418d30c:	4618      	mov	r0, r3
3418d30e:	3740      	adds	r7, #64	@ 0x40
3418d310:	46bd      	mov	sp, r7
3418d312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3418d316:	bf00      	nop
3418d318:	34192860 	.word	0x34192860

3418d31c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
3418d31c:	b480      	push	{r7}
3418d31e:	b083      	sub	sp, #12
3418d320:	af00      	add	r7, sp, #0
3418d322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3418d324:	687b      	ldr	r3, [r7, #4]
3418d326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418d328:	f003 0308 	and.w	r3, r3, #8
3418d32c:	2b00      	cmp	r3, #0
3418d32e:	d00a      	beq.n	3418d346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3418d330:	687b      	ldr	r3, [r7, #4]
3418d332:	681b      	ldr	r3, [r3, #0]
3418d334:	685b      	ldr	r3, [r3, #4]
3418d336:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
3418d33a:	687b      	ldr	r3, [r7, #4]
3418d33c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418d33e:	687b      	ldr	r3, [r7, #4]
3418d340:	681b      	ldr	r3, [r3, #0]
3418d342:	430a      	orrs	r2, r1
3418d344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3418d346:	687b      	ldr	r3, [r7, #4]
3418d348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418d34a:	f003 0301 	and.w	r3, r3, #1
3418d34e:	2b00      	cmp	r3, #0
3418d350:	d00a      	beq.n	3418d368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3418d352:	687b      	ldr	r3, [r7, #4]
3418d354:	681b      	ldr	r3, [r3, #0]
3418d356:	685b      	ldr	r3, [r3, #4]
3418d358:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
3418d35c:	687b      	ldr	r3, [r7, #4]
3418d35e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3418d360:	687b      	ldr	r3, [r7, #4]
3418d362:	681b      	ldr	r3, [r3, #0]
3418d364:	430a      	orrs	r2, r1
3418d366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3418d368:	687b      	ldr	r3, [r7, #4]
3418d36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418d36c:	f003 0302 	and.w	r3, r3, #2
3418d370:	2b00      	cmp	r3, #0
3418d372:	d00a      	beq.n	3418d38a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3418d374:	687b      	ldr	r3, [r7, #4]
3418d376:	681b      	ldr	r3, [r3, #0]
3418d378:	685b      	ldr	r3, [r3, #4]
3418d37a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3418d37e:	687b      	ldr	r3, [r7, #4]
3418d380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
3418d382:	687b      	ldr	r3, [r7, #4]
3418d384:	681b      	ldr	r3, [r3, #0]
3418d386:	430a      	orrs	r2, r1
3418d388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3418d38a:	687b      	ldr	r3, [r7, #4]
3418d38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418d38e:	f003 0304 	and.w	r3, r3, #4
3418d392:	2b00      	cmp	r3, #0
3418d394:	d00a      	beq.n	3418d3ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3418d396:	687b      	ldr	r3, [r7, #4]
3418d398:	681b      	ldr	r3, [r3, #0]
3418d39a:	685b      	ldr	r3, [r3, #4]
3418d39c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
3418d3a0:	687b      	ldr	r3, [r7, #4]
3418d3a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418d3a4:	687b      	ldr	r3, [r7, #4]
3418d3a6:	681b      	ldr	r3, [r3, #0]
3418d3a8:	430a      	orrs	r2, r1
3418d3aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3418d3ac:	687b      	ldr	r3, [r7, #4]
3418d3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418d3b0:	f003 0310 	and.w	r3, r3, #16
3418d3b4:	2b00      	cmp	r3, #0
3418d3b6:	d00a      	beq.n	3418d3ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3418d3b8:	687b      	ldr	r3, [r7, #4]
3418d3ba:	681b      	ldr	r3, [r3, #0]
3418d3bc:	689b      	ldr	r3, [r3, #8]
3418d3be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
3418d3c2:	687b      	ldr	r3, [r7, #4]
3418d3c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3418d3c6:	687b      	ldr	r3, [r7, #4]
3418d3c8:	681b      	ldr	r3, [r3, #0]
3418d3ca:	430a      	orrs	r2, r1
3418d3cc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3418d3ce:	687b      	ldr	r3, [r7, #4]
3418d3d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418d3d2:	f003 0320 	and.w	r3, r3, #32
3418d3d6:	2b00      	cmp	r3, #0
3418d3d8:	d00a      	beq.n	3418d3f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3418d3da:	687b      	ldr	r3, [r7, #4]
3418d3dc:	681b      	ldr	r3, [r3, #0]
3418d3de:	689b      	ldr	r3, [r3, #8]
3418d3e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
3418d3e4:	687b      	ldr	r3, [r7, #4]
3418d3e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418d3e8:	687b      	ldr	r3, [r7, #4]
3418d3ea:	681b      	ldr	r3, [r3, #0]
3418d3ec:	430a      	orrs	r2, r1
3418d3ee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3418d3f0:	687b      	ldr	r3, [r7, #4]
3418d3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418d3f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418d3f8:	2b00      	cmp	r3, #0
3418d3fa:	d01a      	beq.n	3418d432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3418d3fc:	687b      	ldr	r3, [r7, #4]
3418d3fe:	681b      	ldr	r3, [r3, #0]
3418d400:	685b      	ldr	r3, [r3, #4]
3418d402:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
3418d406:	687b      	ldr	r3, [r7, #4]
3418d408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
3418d40a:	687b      	ldr	r3, [r7, #4]
3418d40c:	681b      	ldr	r3, [r3, #0]
3418d40e:	430a      	orrs	r2, r1
3418d410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3418d412:	687b      	ldr	r3, [r7, #4]
3418d414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418d416:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418d41a:	d10a      	bne.n	3418d432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3418d41c:	687b      	ldr	r3, [r7, #4]
3418d41e:	681b      	ldr	r3, [r3, #0]
3418d420:	685b      	ldr	r3, [r3, #4]
3418d422:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
3418d426:	687b      	ldr	r3, [r7, #4]
3418d428:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418d42a:	687b      	ldr	r3, [r7, #4]
3418d42c:	681b      	ldr	r3, [r3, #0]
3418d42e:	430a      	orrs	r2, r1
3418d430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3418d432:	687b      	ldr	r3, [r7, #4]
3418d434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418d436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418d43a:	2b00      	cmp	r3, #0
3418d43c:	d00a      	beq.n	3418d454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3418d43e:	687b      	ldr	r3, [r7, #4]
3418d440:	681b      	ldr	r3, [r3, #0]
3418d442:	685b      	ldr	r3, [r3, #4]
3418d444:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
3418d448:	687b      	ldr	r3, [r7, #4]
3418d44a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418d44c:	687b      	ldr	r3, [r7, #4]
3418d44e:	681b      	ldr	r3, [r3, #0]
3418d450:	430a      	orrs	r2, r1
3418d452:	605a      	str	r2, [r3, #4]
  }
}
3418d454:	bf00      	nop
3418d456:	370c      	adds	r7, #12
3418d458:	46bd      	mov	sp, r7
3418d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d45e:	4770      	bx	lr

3418d460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
3418d460:	b580      	push	{r7, lr}
3418d462:	b098      	sub	sp, #96	@ 0x60
3418d464:	af02      	add	r7, sp, #8
3418d466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3418d468:	687b      	ldr	r3, [r7, #4]
3418d46a:	2200      	movs	r2, #0
3418d46c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
3418d470:	f7f4 ffba 	bl	341823e8 <HAL_GetTick>
3418d474:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3418d476:	687b      	ldr	r3, [r7, #4]
3418d478:	681b      	ldr	r3, [r3, #0]
3418d47a:	681b      	ldr	r3, [r3, #0]
3418d47c:	f003 0308 	and.w	r3, r3, #8
3418d480:	2b08      	cmp	r3, #8
3418d482:	d12f      	bne.n	3418d4e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3418d484:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3418d488:	9300      	str	r3, [sp, #0]
3418d48a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3418d48c:	2200      	movs	r2, #0
3418d48e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3418d492:	6878      	ldr	r0, [r7, #4]
3418d494:	f000 f88e 	bl	3418d5b4 <UART_WaitOnFlagUntilTimeout>
3418d498:	4603      	mov	r3, r0
3418d49a:	2b00      	cmp	r3, #0
3418d49c:	d022      	beq.n	3418d4e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3418d49e:	687b      	ldr	r3, [r7, #4]
3418d4a0:	681b      	ldr	r3, [r3, #0]
3418d4a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418d4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418d4a6:	e853 3f00 	ldrex	r3, [r3]
3418d4aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
3418d4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418d4ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
3418d4b2:	653b      	str	r3, [r7, #80]	@ 0x50
3418d4b4:	687b      	ldr	r3, [r7, #4]
3418d4b6:	681b      	ldr	r3, [r3, #0]
3418d4b8:	461a      	mov	r2, r3
3418d4ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418d4bc:	647b      	str	r3, [r7, #68]	@ 0x44
3418d4be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418d4c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
3418d4c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3418d4c4:	e841 2300 	strex	r3, r2, [r1]
3418d4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
3418d4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418d4cc:	2b00      	cmp	r3, #0
3418d4ce:	d1e6      	bne.n	3418d49e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
3418d4d0:	687b      	ldr	r3, [r7, #4]
3418d4d2:	2220      	movs	r2, #32
3418d4d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
3418d4d8:	687b      	ldr	r3, [r7, #4]
3418d4da:	2200      	movs	r2, #0
3418d4dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3418d4e0:	2303      	movs	r3, #3
3418d4e2:	e063      	b.n	3418d5ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3418d4e4:	687b      	ldr	r3, [r7, #4]
3418d4e6:	681b      	ldr	r3, [r3, #0]
3418d4e8:	681b      	ldr	r3, [r3, #0]
3418d4ea:	f003 0304 	and.w	r3, r3, #4
3418d4ee:	2b04      	cmp	r3, #4
3418d4f0:	d149      	bne.n	3418d586 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3418d4f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3418d4f6:	9300      	str	r3, [sp, #0]
3418d4f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3418d4fa:	2200      	movs	r2, #0
3418d4fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3418d500:	6878      	ldr	r0, [r7, #4]
3418d502:	f000 f857 	bl	3418d5b4 <UART_WaitOnFlagUntilTimeout>
3418d506:	4603      	mov	r3, r0
3418d508:	2b00      	cmp	r3, #0
3418d50a:	d03c      	beq.n	3418d586 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3418d50c:	687b      	ldr	r3, [r7, #4]
3418d50e:	681b      	ldr	r3, [r3, #0]
3418d510:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418d512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d514:	e853 3f00 	ldrex	r3, [r3]
3418d518:	623b      	str	r3, [r7, #32]
   return(result);
3418d51a:	6a3b      	ldr	r3, [r7, #32]
3418d51c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3418d520:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418d522:	687b      	ldr	r3, [r7, #4]
3418d524:	681b      	ldr	r3, [r3, #0]
3418d526:	461a      	mov	r2, r3
3418d528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418d52a:	633b      	str	r3, [r7, #48]	@ 0x30
3418d52c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418d52e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
3418d530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
3418d532:	e841 2300 	strex	r3, r2, [r1]
3418d536:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
3418d538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418d53a:	2b00      	cmp	r3, #0
3418d53c:	d1e6      	bne.n	3418d50c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3418d53e:	687b      	ldr	r3, [r7, #4]
3418d540:	681b      	ldr	r3, [r3, #0]
3418d542:	3308      	adds	r3, #8
3418d544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418d546:	693b      	ldr	r3, [r7, #16]
3418d548:	e853 3f00 	ldrex	r3, [r3]
3418d54c:	60fb      	str	r3, [r7, #12]
   return(result);
3418d54e:	68fb      	ldr	r3, [r7, #12]
3418d550:	f023 0301 	bic.w	r3, r3, #1
3418d554:	64bb      	str	r3, [r7, #72]	@ 0x48
3418d556:	687b      	ldr	r3, [r7, #4]
3418d558:	681b      	ldr	r3, [r3, #0]
3418d55a:	3308      	adds	r3, #8
3418d55c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3418d55e:	61fa      	str	r2, [r7, #28]
3418d560:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418d562:	69b9      	ldr	r1, [r7, #24]
3418d564:	69fa      	ldr	r2, [r7, #28]
3418d566:	e841 2300 	strex	r3, r2, [r1]
3418d56a:	617b      	str	r3, [r7, #20]
   return(result);
3418d56c:	697b      	ldr	r3, [r7, #20]
3418d56e:	2b00      	cmp	r3, #0
3418d570:	d1e5      	bne.n	3418d53e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
3418d572:	687b      	ldr	r3, [r7, #4]
3418d574:	2220      	movs	r2, #32
3418d576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
3418d57a:	687b      	ldr	r3, [r7, #4]
3418d57c:	2200      	movs	r2, #0
3418d57e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3418d582:	2303      	movs	r3, #3
3418d584:	e012      	b.n	3418d5ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
3418d586:	687b      	ldr	r3, [r7, #4]
3418d588:	2220      	movs	r2, #32
3418d58a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3418d58e:	687b      	ldr	r3, [r7, #4]
3418d590:	2220      	movs	r2, #32
3418d592:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3418d596:	687b      	ldr	r3, [r7, #4]
3418d598:	2200      	movs	r2, #0
3418d59a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3418d59c:	687b      	ldr	r3, [r7, #4]
3418d59e:	2200      	movs	r2, #0
3418d5a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
3418d5a2:	687b      	ldr	r3, [r7, #4]
3418d5a4:	2200      	movs	r2, #0
3418d5a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418d5aa:	2300      	movs	r3, #0
}
3418d5ac:	4618      	mov	r0, r3
3418d5ae:	3758      	adds	r7, #88	@ 0x58
3418d5b0:	46bd      	mov	sp, r7
3418d5b2:	bd80      	pop	{r7, pc}

3418d5b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
3418d5b4:	b580      	push	{r7, lr}
3418d5b6:	b084      	sub	sp, #16
3418d5b8:	af00      	add	r7, sp, #0
3418d5ba:	60f8      	str	r0, [r7, #12]
3418d5bc:	60b9      	str	r1, [r7, #8]
3418d5be:	603b      	str	r3, [r7, #0]
3418d5c0:	4613      	mov	r3, r2
3418d5c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3418d5c4:	e04f      	b.n	3418d666 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3418d5c6:	69bb      	ldr	r3, [r7, #24]
3418d5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
3418d5cc:	d04b      	beq.n	3418d666 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418d5ce:	f7f4 ff0b 	bl	341823e8 <HAL_GetTick>
3418d5d2:	4602      	mov	r2, r0
3418d5d4:	683b      	ldr	r3, [r7, #0]
3418d5d6:	1ad3      	subs	r3, r2, r3
3418d5d8:	69ba      	ldr	r2, [r7, #24]
3418d5da:	429a      	cmp	r2, r3
3418d5dc:	d302      	bcc.n	3418d5e4 <UART_WaitOnFlagUntilTimeout+0x30>
3418d5de:	69bb      	ldr	r3, [r7, #24]
3418d5e0:	2b00      	cmp	r3, #0
3418d5e2:	d101      	bne.n	3418d5e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
3418d5e4:	2303      	movs	r3, #3
3418d5e6:	e04e      	b.n	3418d686 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3418d5e8:	68fb      	ldr	r3, [r7, #12]
3418d5ea:	681b      	ldr	r3, [r3, #0]
3418d5ec:	681b      	ldr	r3, [r3, #0]
3418d5ee:	f003 0304 	and.w	r3, r3, #4
3418d5f2:	2b00      	cmp	r3, #0
3418d5f4:	d037      	beq.n	3418d666 <UART_WaitOnFlagUntilTimeout+0xb2>
3418d5f6:	68bb      	ldr	r3, [r7, #8]
3418d5f8:	2b80      	cmp	r3, #128	@ 0x80
3418d5fa:	d034      	beq.n	3418d666 <UART_WaitOnFlagUntilTimeout+0xb2>
3418d5fc:	68bb      	ldr	r3, [r7, #8]
3418d5fe:	2b40      	cmp	r3, #64	@ 0x40
3418d600:	d031      	beq.n	3418d666 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3418d602:	68fb      	ldr	r3, [r7, #12]
3418d604:	681b      	ldr	r3, [r3, #0]
3418d606:	69db      	ldr	r3, [r3, #28]
3418d608:	f003 0308 	and.w	r3, r3, #8
3418d60c:	2b08      	cmp	r3, #8
3418d60e:	d110      	bne.n	3418d632 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3418d610:	68fb      	ldr	r3, [r7, #12]
3418d612:	681b      	ldr	r3, [r3, #0]
3418d614:	2208      	movs	r2, #8
3418d616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3418d618:	68f8      	ldr	r0, [r7, #12]
3418d61a:	f000 f838 	bl	3418d68e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
3418d61e:	68fb      	ldr	r3, [r7, #12]
3418d620:	2208      	movs	r2, #8
3418d622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3418d626:	68fb      	ldr	r3, [r7, #12]
3418d628:	2200      	movs	r2, #0
3418d62a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
3418d62e:	2301      	movs	r3, #1
3418d630:	e029      	b.n	3418d686 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3418d632:	68fb      	ldr	r3, [r7, #12]
3418d634:	681b      	ldr	r3, [r3, #0]
3418d636:	69db      	ldr	r3, [r3, #28]
3418d638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418d63c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418d640:	d111      	bne.n	3418d666 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3418d642:	68fb      	ldr	r3, [r7, #12]
3418d644:	681b      	ldr	r3, [r3, #0]
3418d646:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418d64a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3418d64c:	68f8      	ldr	r0, [r7, #12]
3418d64e:	f000 f81e 	bl	3418d68e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
3418d652:	68fb      	ldr	r3, [r7, #12]
3418d654:	2220      	movs	r2, #32
3418d656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3418d65a:	68fb      	ldr	r3, [r7, #12]
3418d65c:	2200      	movs	r2, #0
3418d65e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
3418d662:	2303      	movs	r3, #3
3418d664:	e00f      	b.n	3418d686 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3418d666:	68fb      	ldr	r3, [r7, #12]
3418d668:	681b      	ldr	r3, [r3, #0]
3418d66a:	69da      	ldr	r2, [r3, #28]
3418d66c:	68bb      	ldr	r3, [r7, #8]
3418d66e:	4013      	ands	r3, r2
3418d670:	68ba      	ldr	r2, [r7, #8]
3418d672:	429a      	cmp	r2, r3
3418d674:	bf0c      	ite	eq
3418d676:	2301      	moveq	r3, #1
3418d678:	2300      	movne	r3, #0
3418d67a:	b2db      	uxtb	r3, r3
3418d67c:	461a      	mov	r2, r3
3418d67e:	79fb      	ldrb	r3, [r7, #7]
3418d680:	429a      	cmp	r2, r3
3418d682:	d0a0      	beq.n	3418d5c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
3418d684:	2300      	movs	r3, #0
}
3418d686:	4618      	mov	r0, r3
3418d688:	3710      	adds	r7, #16
3418d68a:	46bd      	mov	sp, r7
3418d68c:	bd80      	pop	{r7, pc}

3418d68e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3418d68e:	b480      	push	{r7}
3418d690:	b095      	sub	sp, #84	@ 0x54
3418d692:	af00      	add	r7, sp, #0
3418d694:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3418d696:	687b      	ldr	r3, [r7, #4]
3418d698:	681b      	ldr	r3, [r3, #0]
3418d69a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418d69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418d69e:	e853 3f00 	ldrex	r3, [r3]
3418d6a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
3418d6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418d6a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3418d6aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418d6ac:	687b      	ldr	r3, [r7, #4]
3418d6ae:	681b      	ldr	r3, [r3, #0]
3418d6b0:	461a      	mov	r2, r3
3418d6b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418d6b4:	643b      	str	r3, [r7, #64]	@ 0x40
3418d6b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418d6b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418d6ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
3418d6bc:	e841 2300 	strex	r3, r2, [r1]
3418d6c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
3418d6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418d6c4:	2b00      	cmp	r3, #0
3418d6c6:	d1e6      	bne.n	3418d696 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3418d6c8:	687b      	ldr	r3, [r7, #4]
3418d6ca:	681b      	ldr	r3, [r3, #0]
3418d6cc:	3308      	adds	r3, #8
3418d6ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418d6d0:	6a3b      	ldr	r3, [r7, #32]
3418d6d2:	e853 3f00 	ldrex	r3, [r3]
3418d6d6:	61fb      	str	r3, [r7, #28]
   return(result);
3418d6d8:	69fb      	ldr	r3, [r7, #28]
3418d6da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
3418d6de:	f023 0301 	bic.w	r3, r3, #1
3418d6e2:	64bb      	str	r3, [r7, #72]	@ 0x48
3418d6e4:	687b      	ldr	r3, [r7, #4]
3418d6e6:	681b      	ldr	r3, [r3, #0]
3418d6e8:	3308      	adds	r3, #8
3418d6ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3418d6ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
3418d6ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418d6f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418d6f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
3418d6f4:	e841 2300 	strex	r3, r2, [r1]
3418d6f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
3418d6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d6fc:	2b00      	cmp	r3, #0
3418d6fe:	d1e3      	bne.n	3418d6c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3418d700:	687b      	ldr	r3, [r7, #4]
3418d702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418d704:	2b01      	cmp	r3, #1
3418d706:	d118      	bne.n	3418d73a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3418d708:	687b      	ldr	r3, [r7, #4]
3418d70a:	681b      	ldr	r3, [r3, #0]
3418d70c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418d70e:	68fb      	ldr	r3, [r7, #12]
3418d710:	e853 3f00 	ldrex	r3, [r3]
3418d714:	60bb      	str	r3, [r7, #8]
   return(result);
3418d716:	68bb      	ldr	r3, [r7, #8]
3418d718:	f023 0310 	bic.w	r3, r3, #16
3418d71c:	647b      	str	r3, [r7, #68]	@ 0x44
3418d71e:	687b      	ldr	r3, [r7, #4]
3418d720:	681b      	ldr	r3, [r3, #0]
3418d722:	461a      	mov	r2, r3
3418d724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3418d726:	61bb      	str	r3, [r7, #24]
3418d728:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418d72a:	6979      	ldr	r1, [r7, #20]
3418d72c:	69ba      	ldr	r2, [r7, #24]
3418d72e:	e841 2300 	strex	r3, r2, [r1]
3418d732:	613b      	str	r3, [r7, #16]
   return(result);
3418d734:	693b      	ldr	r3, [r7, #16]
3418d736:	2b00      	cmp	r3, #0
3418d738:	d1e6      	bne.n	3418d708 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3418d73a:	687b      	ldr	r3, [r7, #4]
3418d73c:	2220      	movs	r2, #32
3418d73e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3418d742:	687b      	ldr	r3, [r7, #4]
3418d744:	2200      	movs	r2, #0
3418d746:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3418d748:	687b      	ldr	r3, [r7, #4]
3418d74a:	2200      	movs	r2, #0
3418d74c:	675a      	str	r2, [r3, #116]	@ 0x74
}
3418d74e:	bf00      	nop
3418d750:	3754      	adds	r7, #84	@ 0x54
3418d752:	46bd      	mov	sp, r7
3418d754:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d758:	4770      	bx	lr

3418d75a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
3418d75a:	b480      	push	{r7}
3418d75c:	b085      	sub	sp, #20
3418d75e:	af00      	add	r7, sp, #0
3418d760:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
3418d762:	687b      	ldr	r3, [r7, #4]
3418d764:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3418d768:	2b01      	cmp	r3, #1
3418d76a:	d101      	bne.n	3418d770 <HAL_UARTEx_DisableFifoMode+0x16>
3418d76c:	2302      	movs	r3, #2
3418d76e:	e027      	b.n	3418d7c0 <HAL_UARTEx_DisableFifoMode+0x66>
3418d770:	687b      	ldr	r3, [r7, #4]
3418d772:	2201      	movs	r2, #1
3418d774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3418d778:	687b      	ldr	r3, [r7, #4]
3418d77a:	2224      	movs	r2, #36	@ 0x24
3418d77c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418d780:	687b      	ldr	r3, [r7, #4]
3418d782:	681b      	ldr	r3, [r3, #0]
3418d784:	681b      	ldr	r3, [r3, #0]
3418d786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3418d788:	687b      	ldr	r3, [r7, #4]
3418d78a:	681b      	ldr	r3, [r3, #0]
3418d78c:	681a      	ldr	r2, [r3, #0]
3418d78e:	687b      	ldr	r3, [r7, #4]
3418d790:	681b      	ldr	r3, [r3, #0]
3418d792:	f022 0201 	bic.w	r2, r2, #1
3418d796:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
3418d798:	68fb      	ldr	r3, [r7, #12]
3418d79a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
3418d79e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
3418d7a0:	687b      	ldr	r3, [r7, #4]
3418d7a2:	2200      	movs	r2, #0
3418d7a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3418d7a6:	687b      	ldr	r3, [r7, #4]
3418d7a8:	681b      	ldr	r3, [r3, #0]
3418d7aa:	68fa      	ldr	r2, [r7, #12]
3418d7ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3418d7ae:	687b      	ldr	r3, [r7, #4]
3418d7b0:	2220      	movs	r2, #32
3418d7b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3418d7b6:	687b      	ldr	r3, [r7, #4]
3418d7b8:	2200      	movs	r2, #0
3418d7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418d7be:	2300      	movs	r3, #0
}
3418d7c0:	4618      	mov	r0, r3
3418d7c2:	3714      	adds	r7, #20
3418d7c4:	46bd      	mov	sp, r7
3418d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d7ca:	4770      	bx	lr

3418d7cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
3418d7cc:	b580      	push	{r7, lr}
3418d7ce:	b084      	sub	sp, #16
3418d7d0:	af00      	add	r7, sp, #0
3418d7d2:	6078      	str	r0, [r7, #4]
3418d7d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
3418d7d6:	687b      	ldr	r3, [r7, #4]
3418d7d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3418d7dc:	2b01      	cmp	r3, #1
3418d7de:	d101      	bne.n	3418d7e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
3418d7e0:	2302      	movs	r3, #2
3418d7e2:	e02d      	b.n	3418d840 <HAL_UARTEx_SetTxFifoThreshold+0x74>
3418d7e4:	687b      	ldr	r3, [r7, #4]
3418d7e6:	2201      	movs	r2, #1
3418d7e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3418d7ec:	687b      	ldr	r3, [r7, #4]
3418d7ee:	2224      	movs	r2, #36	@ 0x24
3418d7f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418d7f4:	687b      	ldr	r3, [r7, #4]
3418d7f6:	681b      	ldr	r3, [r3, #0]
3418d7f8:	681b      	ldr	r3, [r3, #0]
3418d7fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3418d7fc:	687b      	ldr	r3, [r7, #4]
3418d7fe:	681b      	ldr	r3, [r3, #0]
3418d800:	681a      	ldr	r2, [r3, #0]
3418d802:	687b      	ldr	r3, [r7, #4]
3418d804:	681b      	ldr	r3, [r3, #0]
3418d806:	f022 0201 	bic.w	r2, r2, #1
3418d80a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
3418d80c:	687b      	ldr	r3, [r7, #4]
3418d80e:	681b      	ldr	r3, [r3, #0]
3418d810:	689b      	ldr	r3, [r3, #8]
3418d812:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
3418d816:	687b      	ldr	r3, [r7, #4]
3418d818:	681b      	ldr	r3, [r3, #0]
3418d81a:	683a      	ldr	r2, [r7, #0]
3418d81c:	430a      	orrs	r2, r1
3418d81e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
3418d820:	6878      	ldr	r0, [r7, #4]
3418d822:	f000 f84f 	bl	3418d8c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3418d826:	687b      	ldr	r3, [r7, #4]
3418d828:	681b      	ldr	r3, [r3, #0]
3418d82a:	68fa      	ldr	r2, [r7, #12]
3418d82c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3418d82e:	687b      	ldr	r3, [r7, #4]
3418d830:	2220      	movs	r2, #32
3418d832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3418d836:	687b      	ldr	r3, [r7, #4]
3418d838:	2200      	movs	r2, #0
3418d83a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418d83e:	2300      	movs	r3, #0
}
3418d840:	4618      	mov	r0, r3
3418d842:	3710      	adds	r7, #16
3418d844:	46bd      	mov	sp, r7
3418d846:	bd80      	pop	{r7, pc}

3418d848 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
3418d848:	b580      	push	{r7, lr}
3418d84a:	b084      	sub	sp, #16
3418d84c:	af00      	add	r7, sp, #0
3418d84e:	6078      	str	r0, [r7, #4]
3418d850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
3418d852:	687b      	ldr	r3, [r7, #4]
3418d854:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3418d858:	2b01      	cmp	r3, #1
3418d85a:	d101      	bne.n	3418d860 <HAL_UARTEx_SetRxFifoThreshold+0x18>
3418d85c:	2302      	movs	r3, #2
3418d85e:	e02d      	b.n	3418d8bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
3418d860:	687b      	ldr	r3, [r7, #4]
3418d862:	2201      	movs	r2, #1
3418d864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3418d868:	687b      	ldr	r3, [r7, #4]
3418d86a:	2224      	movs	r2, #36	@ 0x24
3418d86c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418d870:	687b      	ldr	r3, [r7, #4]
3418d872:	681b      	ldr	r3, [r3, #0]
3418d874:	681b      	ldr	r3, [r3, #0]
3418d876:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3418d878:	687b      	ldr	r3, [r7, #4]
3418d87a:	681b      	ldr	r3, [r3, #0]
3418d87c:	681a      	ldr	r2, [r3, #0]
3418d87e:	687b      	ldr	r3, [r7, #4]
3418d880:	681b      	ldr	r3, [r3, #0]
3418d882:	f022 0201 	bic.w	r2, r2, #1
3418d886:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
3418d888:	687b      	ldr	r3, [r7, #4]
3418d88a:	681b      	ldr	r3, [r3, #0]
3418d88c:	689b      	ldr	r3, [r3, #8]
3418d88e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
3418d892:	687b      	ldr	r3, [r7, #4]
3418d894:	681b      	ldr	r3, [r3, #0]
3418d896:	683a      	ldr	r2, [r7, #0]
3418d898:	430a      	orrs	r2, r1
3418d89a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
3418d89c:	6878      	ldr	r0, [r7, #4]
3418d89e:	f000 f811 	bl	3418d8c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3418d8a2:	687b      	ldr	r3, [r7, #4]
3418d8a4:	681b      	ldr	r3, [r3, #0]
3418d8a6:	68fa      	ldr	r2, [r7, #12]
3418d8a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3418d8aa:	687b      	ldr	r3, [r7, #4]
3418d8ac:	2220      	movs	r2, #32
3418d8ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3418d8b2:	687b      	ldr	r3, [r7, #4]
3418d8b4:	2200      	movs	r2, #0
3418d8b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418d8ba:	2300      	movs	r3, #0
}
3418d8bc:	4618      	mov	r0, r3
3418d8be:	3710      	adds	r7, #16
3418d8c0:	46bd      	mov	sp, r7
3418d8c2:	bd80      	pop	{r7, pc}

3418d8c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
3418d8c4:	b480      	push	{r7}
3418d8c6:	b085      	sub	sp, #20
3418d8c8:	af00      	add	r7, sp, #0
3418d8ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
3418d8cc:	687b      	ldr	r3, [r7, #4]
3418d8ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418d8d0:	2b00      	cmp	r3, #0
3418d8d2:	d108      	bne.n	3418d8e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
3418d8d4:	687b      	ldr	r3, [r7, #4]
3418d8d6:	2201      	movs	r2, #1
3418d8d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
3418d8dc:	687b      	ldr	r3, [r7, #4]
3418d8de:	2201      	movs	r2, #1
3418d8e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
3418d8e4:	e031      	b.n	3418d94a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
3418d8e6:	2310      	movs	r3, #16
3418d8e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
3418d8ea:	2310      	movs	r3, #16
3418d8ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
3418d8ee:	687b      	ldr	r3, [r7, #4]
3418d8f0:	681b      	ldr	r3, [r3, #0]
3418d8f2:	689b      	ldr	r3, [r3, #8]
3418d8f4:	0e5b      	lsrs	r3, r3, #25
3418d8f6:	b2db      	uxtb	r3, r3
3418d8f8:	f003 0307 	and.w	r3, r3, #7
3418d8fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
3418d8fe:	687b      	ldr	r3, [r7, #4]
3418d900:	681b      	ldr	r3, [r3, #0]
3418d902:	689b      	ldr	r3, [r3, #8]
3418d904:	0f5b      	lsrs	r3, r3, #29
3418d906:	b2db      	uxtb	r3, r3
3418d908:	f003 0307 	and.w	r3, r3, #7
3418d90c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
3418d90e:	7bbb      	ldrb	r3, [r7, #14]
3418d910:	7b3a      	ldrb	r2, [r7, #12]
3418d912:	4911      	ldr	r1, [pc, #68]	@ (3418d958 <UARTEx_SetNbDataToProcess+0x94>)
3418d914:	5c8a      	ldrb	r2, [r1, r2]
3418d916:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
3418d91a:	7b3a      	ldrb	r2, [r7, #12]
3418d91c:	490f      	ldr	r1, [pc, #60]	@ (3418d95c <UARTEx_SetNbDataToProcess+0x98>)
3418d91e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
3418d920:	fb93 f3f2 	sdiv	r3, r3, r2
3418d924:	b29a      	uxth	r2, r3
3418d926:	687b      	ldr	r3, [r7, #4]
3418d928:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
3418d92c:	7bfb      	ldrb	r3, [r7, #15]
3418d92e:	7b7a      	ldrb	r2, [r7, #13]
3418d930:	4909      	ldr	r1, [pc, #36]	@ (3418d958 <UARTEx_SetNbDataToProcess+0x94>)
3418d932:	5c8a      	ldrb	r2, [r1, r2]
3418d934:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
3418d938:	7b7a      	ldrb	r2, [r7, #13]
3418d93a:	4908      	ldr	r1, [pc, #32]	@ (3418d95c <UARTEx_SetNbDataToProcess+0x98>)
3418d93c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
3418d93e:	fb93 f3f2 	sdiv	r3, r3, r2
3418d942:	b29a      	uxth	r2, r3
3418d944:	687b      	ldr	r3, [r7, #4]
3418d946:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
3418d94a:	bf00      	nop
3418d94c:	3714      	adds	r7, #20
3418d94e:	46bd      	mov	sp, r7
3418d950:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d954:	4770      	bx	lr
3418d956:	bf00      	nop
3418d958:	34192878 	.word	0x34192878
3418d95c:	34192880 	.word	0x34192880

3418d960 <LL_AHB5_GRP1_IsEnabledClock>:
{
3418d960:	b480      	push	{r7}
3418d962:	b083      	sub	sp, #12
3418d964:	af00      	add	r7, sp, #0
3418d966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB5ENR, Periphs) == Periphs) ? 1UL : 0UL);
3418d968:	4b08      	ldr	r3, [pc, #32]	@ (3418d98c <LL_AHB5_GRP1_IsEnabledClock+0x2c>)
3418d96a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
3418d96e:	687b      	ldr	r3, [r7, #4]
3418d970:	4013      	ands	r3, r2
3418d972:	687a      	ldr	r2, [r7, #4]
3418d974:	429a      	cmp	r2, r3
3418d976:	d101      	bne.n	3418d97c <LL_AHB5_GRP1_IsEnabledClock+0x1c>
3418d978:	2301      	movs	r3, #1
3418d97a:	e000      	b.n	3418d97e <LL_AHB5_GRP1_IsEnabledClock+0x1e>
3418d97c:	2300      	movs	r3, #0
}
3418d97e:	4618      	mov	r0, r3
3418d980:	370c      	adds	r7, #12
3418d982:	46bd      	mov	sp, r7
3418d984:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d988:	4770      	bx	lr
3418d98a:	bf00      	nop
3418d98c:	56028000 	.word	0x56028000

3418d990 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
3418d990:	b580      	push	{r7, lr}
3418d992:	b086      	sub	sp, #24
3418d994:	af02      	add	r7, sp, #8
3418d996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418d998:	2300      	movs	r3, #0
3418d99a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3418d99c:	f7f4 fd24 	bl	341823e8 <HAL_GetTick>
3418d9a0:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
3418d9a2:	687b      	ldr	r3, [r7, #4]
3418d9a4:	2b00      	cmp	r3, #0
3418d9a6:	d102      	bne.n	3418d9ae <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
3418d9a8:	2301      	movs	r3, #1
3418d9aa:	73fb      	strb	r3, [r7, #15]
3418d9ac:	e0ec      	b.n	3418db88 <HAL_XSPI_Init+0x1f8>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3418d9ae:	687b      	ldr	r3, [r7, #4]
3418d9b0:	2200      	movs	r2, #0
3418d9b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3418d9b4:	687b      	ldr	r3, [r7, #4]
3418d9b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418d9b8:	2b00      	cmp	r3, #0
3418d9ba:	f040 80e5 	bne.w	3418db88 <HAL_XSPI_Init+0x1f8>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
3418d9be:	6878      	ldr	r0, [r7, #4]
3418d9c0:	f7f4 fad4 	bl	34181f6c <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418d9c4:	f241 3188 	movw	r1, #5000	@ 0x1388
3418d9c8:	6878      	ldr	r0, [r7, #4]
3418d9ca:	f000 fde0 	bl	3418e58e <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
3418d9ce:	687b      	ldr	r3, [r7, #4]
3418d9d0:	681b      	ldr	r3, [r3, #0]
3418d9d2:	689a      	ldr	r2, [r3, #8]
3418d9d4:	4b6f      	ldr	r3, [pc, #444]	@ (3418db94 <HAL_XSPI_Init+0x204>)
3418d9d6:	4013      	ands	r3, r2
3418d9d8:	687a      	ldr	r2, [r7, #4]
3418d9da:	68d1      	ldr	r1, [r2, #12]
3418d9dc:	687a      	ldr	r2, [r7, #4]
3418d9de:	6912      	ldr	r2, [r2, #16]
3418d9e0:	0412      	lsls	r2, r2, #16
3418d9e2:	4311      	orrs	r1, r2
3418d9e4:	687a      	ldr	r2, [r7, #4]
3418d9e6:	6952      	ldr	r2, [r2, #20]
3418d9e8:	3a01      	subs	r2, #1
3418d9ea:	0212      	lsls	r2, r2, #8
3418d9ec:	4311      	orrs	r1, r2
3418d9ee:	687a      	ldr	r2, [r7, #4]
3418d9f0:	69d2      	ldr	r2, [r2, #28]
3418d9f2:	4311      	orrs	r1, r2
3418d9f4:	687a      	ldr	r2, [r7, #4]
3418d9f6:	6812      	ldr	r2, [r2, #0]
3418d9f8:	430b      	orrs	r3, r1
3418d9fa:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3418d9fc:	687b      	ldr	r3, [r7, #4]
3418d9fe:	681b      	ldr	r3, [r3, #0]
3418da00:	68db      	ldr	r3, [r3, #12]
3418da02:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
3418da06:	687b      	ldr	r3, [r7, #4]
3418da08:	6a1a      	ldr	r2, [r3, #32]
3418da0a:	687b      	ldr	r3, [r7, #4]
3418da0c:	681b      	ldr	r3, [r3, #0]
3418da0e:	430a      	orrs	r2, r1
3418da10:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3418da12:	687b      	ldr	r3, [r7, #4]
3418da14:	681b      	ldr	r3, [r3, #0]
3418da16:	691b      	ldr	r3, [r3, #16]
3418da18:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
3418da1c:	687b      	ldr	r3, [r7, #4]
3418da1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418da20:	041a      	lsls	r2, r3, #16
3418da22:	687b      	ldr	r3, [r7, #4]
3418da24:	681b      	ldr	r3, [r3, #0]
3418da26:	430a      	orrs	r2, r1
3418da28:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3418da2a:	687b      	ldr	r3, [r7, #4]
3418da2c:	681b      	ldr	r3, [r3, #0]
3418da2e:	691b      	ldr	r3, [r3, #16]
3418da30:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418da34:	687b      	ldr	r3, [r7, #4]
3418da36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418da38:	687b      	ldr	r3, [r7, #4]
3418da3a:	681b      	ldr	r3, [r3, #0]
3418da3c:	430a      	orrs	r2, r1
3418da3e:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3418da40:	687b      	ldr	r3, [r7, #4]
3418da42:	681b      	ldr	r3, [r3, #0]
3418da44:	687a      	ldr	r2, [r7, #4]
3418da46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418da48:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3418da4a:	687b      	ldr	r3, [r7, #4]
3418da4c:	681b      	ldr	r3, [r3, #0]
3418da4e:	681b      	ldr	r3, [r3, #0]
3418da50:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
3418da54:	687b      	ldr	r3, [r7, #4]
3418da56:	685b      	ldr	r3, [r3, #4]
3418da58:	3b01      	subs	r3, #1
3418da5a:	021a      	lsls	r2, r3, #8
3418da5c:	687b      	ldr	r3, [r7, #4]
3418da5e:	681b      	ldr	r3, [r3, #0]
3418da60:	430a      	orrs	r2, r1
3418da62:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418da64:	687b      	ldr	r3, [r7, #4]
3418da66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418da68:	9300      	str	r3, [sp, #0]
3418da6a:	68bb      	ldr	r3, [r7, #8]
3418da6c:	2200      	movs	r2, #0
3418da6e:	2120      	movs	r1, #32
3418da70:	6878      	ldr	r0, [r7, #4]
3418da72:	f000 ff03 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418da76:	4603      	mov	r3, r0
3418da78:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
3418da7a:	7bfb      	ldrb	r3, [r7, #15]
3418da7c:	2b00      	cmp	r3, #0
3418da7e:	f040 8083 	bne.w	3418db88 <HAL_XSPI_Init+0x1f8>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3418da82:	687b      	ldr	r3, [r7, #4]
3418da84:	681b      	ldr	r3, [r3, #0]
3418da86:	68db      	ldr	r3, [r3, #12]
3418da88:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418da8c:	687b      	ldr	r3, [r7, #4]
3418da8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3418da90:	687b      	ldr	r3, [r7, #4]
3418da92:	681b      	ldr	r3, [r3, #0]
3418da94:	430a      	orrs	r2, r1
3418da96:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3418da98:	687b      	ldr	r3, [r7, #4]
3418da9a:	681b      	ldr	r3, [r3, #0]
3418da9c:	4a3e      	ldr	r2, [pc, #248]	@ (3418db98 <HAL_XSPI_Init+0x208>)
3418da9e:	4293      	cmp	r3, r2
3418daa0:	d018      	beq.n	3418dad4 <HAL_XSPI_Init+0x144>
3418daa2:	687b      	ldr	r3, [r7, #4]
3418daa4:	681b      	ldr	r3, [r3, #0]
3418daa6:	4a3d      	ldr	r2, [pc, #244]	@ (3418db9c <HAL_XSPI_Init+0x20c>)
3418daa8:	4293      	cmp	r3, r2
3418daaa:	d013      	beq.n	3418dad4 <HAL_XSPI_Init+0x144>
3418daac:	687b      	ldr	r3, [r7, #4]
3418daae:	681b      	ldr	r3, [r3, #0]
3418dab0:	4a3b      	ldr	r2, [pc, #236]	@ (3418dba0 <HAL_XSPI_Init+0x210>)
3418dab2:	4293      	cmp	r3, r2
3418dab4:	d00e      	beq.n	3418dad4 <HAL_XSPI_Init+0x144>
3418dab6:	687b      	ldr	r3, [r7, #4]
3418dab8:	681b      	ldr	r3, [r3, #0]
3418daba:	4a3a      	ldr	r2, [pc, #232]	@ (3418dba4 <HAL_XSPI_Init+0x214>)
3418dabc:	4293      	cmp	r3, r2
3418dabe:	d009      	beq.n	3418dad4 <HAL_XSPI_Init+0x144>
3418dac0:	687b      	ldr	r3, [r7, #4]
3418dac2:	681b      	ldr	r3, [r3, #0]
3418dac4:	4a38      	ldr	r2, [pc, #224]	@ (3418dba8 <HAL_XSPI_Init+0x218>)
3418dac6:	4293      	cmp	r3, r2
3418dac8:	d004      	beq.n	3418dad4 <HAL_XSPI_Init+0x144>
3418daca:	687b      	ldr	r3, [r7, #4]
3418dacc:	681b      	ldr	r3, [r3, #0]
3418dace:	4a37      	ldr	r2, [pc, #220]	@ (3418dbac <HAL_XSPI_Init+0x21c>)
3418dad0:	4293      	cmp	r3, r2
3418dad2:	d10f      	bne.n	3418daf4 <HAL_XSPI_Init+0x164>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418dad4:	687b      	ldr	r3, [r7, #4]
3418dad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418dad8:	9300      	str	r3, [sp, #0]
3418dada:	68bb      	ldr	r3, [r7, #8]
3418dadc:	2200      	movs	r2, #0
3418dade:	2120      	movs	r1, #32
3418dae0:	6878      	ldr	r0, [r7, #4]
3418dae2:	f000 fecb 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418dae6:	4603      	mov	r3, r0
3418dae8:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
3418daea:	7bfb      	ldrb	r3, [r7, #15]
3418daec:	2b00      	cmp	r3, #0
3418daee:	d001      	beq.n	3418daf4 <HAL_XSPI_Init+0x164>
          {
            return status;
3418daf0:	7bfb      	ldrb	r3, [r7, #15]
3418daf2:	e04a      	b.n	3418db8a <HAL_XSPI_Init+0x1fa>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3418daf4:	687b      	ldr	r3, [r7, #4]
3418daf6:	681b      	ldr	r3, [r3, #0]
3418daf8:	681b      	ldr	r3, [r3, #0]
3418dafa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3418dafe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3418db02:	687a      	ldr	r2, [r7, #4]
3418db04:	6891      	ldr	r1, [r2, #8]
3418db06:	687a      	ldr	r2, [r7, #4]
3418db08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
3418db0a:	4311      	orrs	r1, r2
3418db0c:	687a      	ldr	r2, [r7, #4]
3418db0e:	6812      	ldr	r2, [r2, #0]
3418db10:	430b      	orrs	r3, r1
3418db12:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT), hxspi->Init.SampleShifting);
3418db14:	687b      	ldr	r3, [r7, #4]
3418db16:	681b      	ldr	r3, [r3, #0]
3418db18:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418db1c:	f023 4180 	bic.w	r1, r3, #1073741824	@ 0x40000000
3418db20:	687b      	ldr	r3, [r7, #4]
3418db22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418db24:	687b      	ldr	r3, [r7, #4]
3418db26:	681b      	ldr	r3, [r3, #0]
3418db28:	430a      	orrs	r2, r1
3418db2a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
3418db2e:	687b      	ldr	r3, [r7, #4]
3418db30:	681b      	ldr	r3, [r3, #0]
3418db32:	681a      	ldr	r2, [r3, #0]
3418db34:	687b      	ldr	r3, [r7, #4]
3418db36:	681b      	ldr	r3, [r3, #0]
3418db38:	f042 0201 	orr.w	r2, r2, #1
3418db3c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3418db3e:	687b      	ldr	r3, [r7, #4]
3418db40:	699b      	ldr	r3, [r3, #24]
3418db42:	2b02      	cmp	r3, #2
3418db44:	d107      	bne.n	3418db56 <HAL_XSPI_Init+0x1c6>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3418db46:	687b      	ldr	r3, [r7, #4]
3418db48:	681b      	ldr	r3, [r3, #0]
3418db4a:	689a      	ldr	r2, [r3, #8]
3418db4c:	687b      	ldr	r3, [r7, #4]
3418db4e:	681b      	ldr	r3, [r3, #0]
3418db50:	f042 0202 	orr.w	r2, r2, #2
3418db54:	609a      	str	r2, [r3, #8]
        }

        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3418db56:	687b      	ldr	r3, [r7, #4]
3418db58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418db5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418db5e:	d107      	bne.n	3418db70 <HAL_XSPI_Init+0x1e0>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3418db60:	687b      	ldr	r3, [r7, #4]
3418db62:	681b      	ldr	r3, [r3, #0]
3418db64:	689a      	ldr	r2, [r3, #8]
3418db66:	687b      	ldr	r3, [r7, #4]
3418db68:	681b      	ldr	r3, [r3, #0]
3418db6a:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
3418db6e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418db70:	687b      	ldr	r3, [r7, #4]
3418db72:	68db      	ldr	r3, [r3, #12]
3418db74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418db78:	d103      	bne.n	3418db82 <HAL_XSPI_Init+0x1f2>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3418db7a:	687b      	ldr	r3, [r7, #4]
3418db7c:	2201      	movs	r2, #1
3418db7e:	659a      	str	r2, [r3, #88]	@ 0x58
3418db80:	e002      	b.n	3418db88 <HAL_XSPI_Init+0x1f8>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
3418db82:	687b      	ldr	r3, [r7, #4]
3418db84:	2202      	movs	r2, #2
3418db86:	659a      	str	r2, [r3, #88]	@ 0x58
        }
      }
    }
  }
  return status;
3418db88:	7bfb      	ldrb	r3, [r7, #15]
}
3418db8a:	4618      	mov	r0, r3
3418db8c:	3710      	adds	r7, #16
3418db8e:	46bd      	mov	sp, r7
3418db90:	bd80      	pop	{r7, pc}
3418db92:	bf00      	nop
3418db94:	f8e0c0fc 	.word	0xf8e0c0fc
3418db98:	58025000 	.word	0x58025000
3418db9c:	48025000 	.word	0x48025000
3418dba0:	5802a000 	.word	0x5802a000
3418dba4:	4802a000 	.word	0x4802a000
3418dba8:	5802d000 	.word	0x5802d000
3418dbac:	4802d000 	.word	0x4802d000

3418dbb0 <HAL_XSPI_IRQHandler>:
  * @brief  Handle XSPI interrupt request.
  * @param  hxspi : XSPI handle
  * @retval None
  */
void HAL_XSPI_IRQHandler(XSPI_HandleTypeDef *hxspi)
{
3418dbb0:	b580      	push	{r7, lr}
3418dbb2:	b086      	sub	sp, #24
3418dbb4:	af00      	add	r7, sp, #0
3418dbb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418dbb8:	687b      	ldr	r3, [r7, #4]
3418dbba:	681b      	ldr	r3, [r3, #0]
3418dbbc:	3350      	adds	r3, #80	@ 0x50
3418dbbe:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hxspi->Instance->SR;
3418dbc0:	687b      	ldr	r3, [r7, #4]
3418dbc2:	681b      	ldr	r3, [r3, #0]
3418dbc4:	6a1b      	ldr	r3, [r3, #32]
3418dbc6:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hxspi->Instance->CR;
3418dbc8:	687b      	ldr	r3, [r7, #4]
3418dbca:	681b      	ldr	r3, [r3, #0]
3418dbcc:	681b      	ldr	r3, [r3, #0]
3418dbce:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hxspi->State;
3418dbd0:	687b      	ldr	r3, [r7, #4]
3418dbd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418dbd4:	60bb      	str	r3, [r7, #8]

  /* XSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_XSPI_FLAG_FT) != 0U) && ((itsource & HAL_XSPI_IT_FT) != 0U))
3418dbd6:	693b      	ldr	r3, [r7, #16]
3418dbd8:	f003 0304 	and.w	r3, r3, #4
3418dbdc:	2b00      	cmp	r3, #0
3418dbde:	d03a      	beq.n	3418dc56 <HAL_XSPI_IRQHandler+0xa6>
3418dbe0:	68fb      	ldr	r3, [r7, #12]
3418dbe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3418dbe6:	2b00      	cmp	r3, #0
3418dbe8:	d035      	beq.n	3418dc56 <HAL_XSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_XSPI_STATE_BUSY_TX)
3418dbea:	68bb      	ldr	r3, [r7, #8]
3418dbec:	2b18      	cmp	r3, #24
3418dbee:	d10f      	bne.n	3418dc10 <HAL_XSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3418dbf0:	687b      	ldr	r3, [r7, #4]
3418dbf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418dbf4:	781a      	ldrb	r2, [r3, #0]
3418dbf6:	697b      	ldr	r3, [r7, #20]
3418dbf8:	701a      	strb	r2, [r3, #0]
      hxspi->pBuffPtr++;
3418dbfa:	687b      	ldr	r3, [r7, #4]
3418dbfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418dbfe:	1c5a      	adds	r2, r3, #1
3418dc00:	687b      	ldr	r3, [r7, #4]
3418dc02:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferCount--;
3418dc04:	687b      	ldr	r3, [r7, #4]
3418dc06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418dc08:	1e5a      	subs	r2, r3, #1
3418dc0a:	687b      	ldr	r3, [r7, #4]
3418dc0c:	64da      	str	r2, [r3, #76]	@ 0x4c
3418dc0e:	e012      	b.n	3418dc36 <HAL_XSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418dc10:	68bb      	ldr	r3, [r7, #8]
3418dc12:	2b28      	cmp	r3, #40	@ 0x28
3418dc14:	d10f      	bne.n	3418dc36 <HAL_XSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3418dc16:	687b      	ldr	r3, [r7, #4]
3418dc18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418dc1a:	697a      	ldr	r2, [r7, #20]
3418dc1c:	7812      	ldrb	r2, [r2, #0]
3418dc1e:	b2d2      	uxtb	r2, r2
3418dc20:	701a      	strb	r2, [r3, #0]
      hxspi->pBuffPtr++;
3418dc22:	687b      	ldr	r3, [r7, #4]
3418dc24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418dc26:	1c5a      	adds	r2, r3, #1
3418dc28:	687b      	ldr	r3, [r7, #4]
3418dc2a:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferCount--;
3418dc2c:	687b      	ldr	r3, [r7, #4]
3418dc2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418dc30:	1e5a      	subs	r2, r3, #1
3418dc32:	687b      	ldr	r3, [r7, #4]
3418dc34:	64da      	str	r2, [r3, #76]	@ 0x4c
    else
    {
      /* Nothing to do */
    }

    if (hxspi->XferCount == 0U)
3418dc36:	687b      	ldr	r3, [r7, #4]
3418dc38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418dc3a:	2b00      	cmp	r3, #0
3418dc3c:	d107      	bne.n	3418dc4e <HAL_XSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_FT);
3418dc3e:	687b      	ldr	r3, [r7, #4]
3418dc40:	681b      	ldr	r3, [r3, #0]
3418dc42:	681a      	ldr	r2, [r3, #0]
3418dc44:	687b      	ldr	r3, [r7, #4]
3418dc46:	681b      	ldr	r3, [r3, #0]
3418dc48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
3418dc4c:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->FifoThresholdCallback(hxspi);
#else
    HAL_XSPI_FifoThresholdCallback(hxspi);
3418dc4e:	6878      	ldr	r0, [r7, #4]
3418dc50:	f000 fbb2 	bl	3418e3b8 <HAL_XSPI_FifoThresholdCallback>
3418dc54:	e0f9      	b.n	3418de4a <HAL_XSPI_IRQHandler+0x29a>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* XSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TC) != 0U) && ((itsource & HAL_XSPI_IT_TC) != 0U))
3418dc56:	693b      	ldr	r3, [r7, #16]
3418dc58:	f003 0302 	and.w	r3, r3, #2
3418dc5c:	2b00      	cmp	r3, #0
3418dc5e:	d067      	beq.n	3418dd30 <HAL_XSPI_IRQHandler+0x180>
3418dc60:	68fb      	ldr	r3, [r7, #12]
3418dc62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418dc66:	2b00      	cmp	r3, #0
3418dc68:	d062      	beq.n	3418dd30 <HAL_XSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418dc6a:	68bb      	ldr	r3, [r7, #8]
3418dc6c:	2b28      	cmp	r3, #40	@ 0x28
3418dc6e:	d131      	bne.n	3418dcd4 <HAL_XSPI_IRQHandler+0x124>
    {
      if ((hxspi->XferCount > 0U) && ((flag & XSPI_SR_FLEVEL) != 0U))
3418dc70:	687b      	ldr	r3, [r7, #4]
3418dc72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418dc74:	2b00      	cmp	r3, #0
3418dc76:	d015      	beq.n	3418dca4 <HAL_XSPI_IRQHandler+0xf4>
3418dc78:	693b      	ldr	r3, [r7, #16]
3418dc7a:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
3418dc7e:	2b00      	cmp	r3, #0
3418dc80:	d010      	beq.n	3418dca4 <HAL_XSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3418dc82:	687b      	ldr	r3, [r7, #4]
3418dc84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418dc86:	697a      	ldr	r2, [r7, #20]
3418dc88:	7812      	ldrb	r2, [r2, #0]
3418dc8a:	b2d2      	uxtb	r2, r2
3418dc8c:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418dc8e:	687b      	ldr	r3, [r7, #4]
3418dc90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418dc92:	1c5a      	adds	r2, r3, #1
3418dc94:	687b      	ldr	r3, [r7, #4]
3418dc96:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418dc98:	687b      	ldr	r3, [r7, #4]
3418dc9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418dc9c:	1e5a      	subs	r2, r3, #1
3418dc9e:	687b      	ldr	r3, [r7, #4]
3418dca0:	64da      	str	r2, [r3, #76]	@ 0x4c
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418dca2:	e0cf      	b.n	3418de44 <HAL_XSPI_IRQHandler+0x294>
      }
      else if (hxspi->XferCount == 0U)
3418dca4:	687b      	ldr	r3, [r7, #4]
3418dca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418dca8:	2b00      	cmp	r3, #0
3418dcaa:	f040 80cb 	bne.w	3418de44 <HAL_XSPI_IRQHandler+0x294>
      {
        /* Clear flag */
        hxspi->Instance->FCR = HAL_XSPI_FLAG_TC;
3418dcae:	687b      	ldr	r3, [r7, #4]
3418dcb0:	681b      	ldr	r3, [r3, #0]
3418dcb2:	2202      	movs	r2, #2
3418dcb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_TC | HAL_XSPI_IT_FT | HAL_XSPI_IT_TE);
3418dcb6:	687b      	ldr	r3, [r7, #4]
3418dcb8:	681b      	ldr	r3, [r3, #0]
3418dcba:	681a      	ldr	r2, [r3, #0]
3418dcbc:	687b      	ldr	r3, [r7, #4]
3418dcbe:	681b      	ldr	r3, [r3, #0]
3418dcc0:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
3418dcc4:	601a      	str	r2, [r3, #0]

        hxspi->State = HAL_XSPI_STATE_READY;
3418dcc6:	687b      	ldr	r3, [r7, #4]
3418dcc8:	2202      	movs	r2, #2
3418dcca:	659a      	str	r2, [r3, #88]	@ 0x58

        /* RX complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->RxCpltCallback(hxspi);
#else
        HAL_XSPI_RxCpltCallback(hxspi);
3418dccc:	6878      	ldr	r0, [r7, #4]
3418dcce:	f000 fb87 	bl	3418e3e0 <HAL_XSPI_RxCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418dcd2:	e0b7      	b.n	3418de44 <HAL_XSPI_IRQHandler+0x294>
      }
    }
    else
    {
      /* Clear flag */
      hxspi->Instance->FCR = HAL_XSPI_FLAG_TC;
3418dcd4:	687b      	ldr	r3, [r7, #4]
3418dcd6:	681b      	ldr	r3, [r3, #0]
3418dcd8:	2202      	movs	r2, #2
3418dcda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_TC | HAL_XSPI_IT_FT | HAL_XSPI_IT_TE);
3418dcdc:	687b      	ldr	r3, [r7, #4]
3418dcde:	681b      	ldr	r3, [r3, #0]
3418dce0:	681a      	ldr	r2, [r3, #0]
3418dce2:	687b      	ldr	r3, [r7, #4]
3418dce4:	681b      	ldr	r3, [r3, #0]
3418dce6:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
3418dcea:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
3418dcec:	687b      	ldr	r3, [r7, #4]
3418dcee:	2202      	movs	r2, #2
3418dcf0:	659a      	str	r2, [r3, #88]	@ 0x58

      if (currentstate == HAL_XSPI_STATE_BUSY_TX)
3418dcf2:	68bb      	ldr	r3, [r7, #8]
3418dcf4:	2b18      	cmp	r3, #24
3418dcf6:	d103      	bne.n	3418dd00 <HAL_XSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->TxCpltCallback(hxspi);
#else
        HAL_XSPI_TxCpltCallback(hxspi);
3418dcf8:	6878      	ldr	r0, [r7, #4]
3418dcfa:	f000 fb7b 	bl	3418e3f4 <HAL_XSPI_TxCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418dcfe:	e0a1      	b.n	3418de44 <HAL_XSPI_IRQHandler+0x294>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_XSPI_STATE_BUSY_CMD)
3418dd00:	68bb      	ldr	r3, [r7, #8]
3418dd02:	2b08      	cmp	r3, #8
3418dd04:	d103      	bne.n	3418dd0e <HAL_XSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->CmdCpltCallback(hxspi);
#else
        HAL_XSPI_CmdCpltCallback(hxspi);
3418dd06:	6878      	ldr	r0, [r7, #4]
3418dd08:	f000 fb60 	bl	3418e3cc <HAL_XSPI_CmdCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418dd0c:	e09a      	b.n	3418de44 <HAL_XSPI_IRQHandler+0x294>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_XSPI_STATE_ABORT)
3418dd0e:	68bb      	ldr	r3, [r7, #8]
3418dd10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418dd14:	f040 8096 	bne.w	3418de44 <HAL_XSPI_IRQHandler+0x294>
      {
        if (hxspi->ErrorCode == HAL_XSPI_ERROR_NONE)
3418dd18:	687b      	ldr	r3, [r7, #4]
3418dd1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418dd1c:	2b00      	cmp	r3, #0
3418dd1e:	d103      	bne.n	3418dd28 <HAL_XSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
          hxspi->AbortCpltCallback(hxspi);
#else
          HAL_XSPI_AbortCpltCallback(hxspi);
3418dd20:	6878      	ldr	r0, [r7, #4]
3418dd22:	f000 fb3f 	bl	3418e3a4 <HAL_XSPI_AbortCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418dd26:	e08d      	b.n	3418de44 <HAL_XSPI_IRQHandler+0x294>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
          hxspi->ErrorCallback(hxspi);
#else
          HAL_XSPI_ErrorCallback(hxspi);
3418dd28:	6878      	ldr	r0, [r7, #4]
3418dd2a:	f000 fb31 	bl	3418e390 <HAL_XSPI_ErrorCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418dd2e:	e089      	b.n	3418de44 <HAL_XSPI_IRQHandler+0x294>
        /* Nothing to do */
      }
    }
  }
  /* XSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_SM) != 0U) && ((itsource & HAL_XSPI_IT_SM) != 0U))
3418dd30:	693b      	ldr	r3, [r7, #16]
3418dd32:	f003 0308 	and.w	r3, r3, #8
3418dd36:	2b00      	cmp	r3, #0
3418dd38:	d01e      	beq.n	3418dd78 <HAL_XSPI_IRQHandler+0x1c8>
3418dd3a:	68fb      	ldr	r3, [r7, #12]
3418dd3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3418dd40:	2b00      	cmp	r3, #0
3418dd42:	d019      	beq.n	3418dd78 <HAL_XSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_SM;
3418dd44:	687b      	ldr	r3, [r7, #4]
3418dd46:	681b      	ldr	r3, [r3, #0]
3418dd48:	2208      	movs	r2, #8
3418dd4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hxspi->Instance->CR & XSPI_CR_APMS) != 0U)
3418dd4c:	687b      	ldr	r3, [r7, #4]
3418dd4e:	681b      	ldr	r3, [r3, #0]
3418dd50:	681b      	ldr	r3, [r3, #0]
3418dd52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3418dd56:	2b00      	cmp	r3, #0
3418dd58:	d00a      	beq.n	3418dd70 <HAL_XSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_SM | HAL_XSPI_IT_TE);
3418dd5a:	687b      	ldr	r3, [r7, #4]
3418dd5c:	681b      	ldr	r3, [r3, #0]
3418dd5e:	681a      	ldr	r2, [r3, #0]
3418dd60:	687b      	ldr	r3, [r7, #4]
3418dd62:	681b      	ldr	r3, [r3, #0]
3418dd64:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
3418dd68:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
3418dd6a:	687b      	ldr	r3, [r7, #4]
3418dd6c:	2202      	movs	r2, #2
3418dd6e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Status match callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->StatusMatchCallback(hxspi);
#else
    HAL_XSPI_StatusMatchCallback(hxspi);
3418dd70:	6878      	ldr	r0, [r7, #4]
3418dd72:	f000 fb49 	bl	3418e408 <HAL_XSPI_StatusMatchCallback>
3418dd76:	e068      	b.n	3418de4a <HAL_XSPI_IRQHandler+0x29a>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* XSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TE) != 0U) && ((itsource & HAL_XSPI_IT_TE) != 0U))
3418dd78:	693b      	ldr	r3, [r7, #16]
3418dd7a:	f003 0301 	and.w	r3, r3, #1
3418dd7e:	2b00      	cmp	r3, #0
3418dd80:	d04e      	beq.n	3418de20 <HAL_XSPI_IRQHandler+0x270>
3418dd82:	68fb      	ldr	r3, [r7, #12]
3418dd84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418dd88:	2b00      	cmp	r3, #0
3418dd8a:	d049      	beq.n	3418de20 <HAL_XSPI_IRQHandler+0x270>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_TE;
3418dd8c:	687b      	ldr	r3, [r7, #4]
3418dd8e:	681b      	ldr	r3, [r3, #0]
3418dd90:	2201      	movs	r2, #1
3418dd92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    HAL_XSPI_DISABLE_IT(hxspi, (HAL_XSPI_IT_TO | HAL_XSPI_IT_SM | HAL_XSPI_IT_FT | HAL_XSPI_IT_TC | HAL_XSPI_IT_TE));
3418dd94:	687b      	ldr	r3, [r7, #4]
3418dd96:	681b      	ldr	r3, [r3, #0]
3418dd98:	681a      	ldr	r2, [r3, #0]
3418dd9a:	687b      	ldr	r3, [r7, #4]
3418dd9c:	681b      	ldr	r3, [r3, #0]
3418dd9e:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
3418dda2:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_TRANSFER;
3418dda4:	687b      	ldr	r3, [r7, #4]
3418dda6:	2202      	movs	r2, #2
3418dda8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418ddaa:	687b      	ldr	r3, [r7, #4]
3418ddac:	681b      	ldr	r3, [r3, #0]
3418ddae:	681b      	ldr	r3, [r3, #0]
3418ddb0:	f003 0304 	and.w	r3, r3, #4
3418ddb4:	2b00      	cmp	r3, #0
3418ddb6:	d02c      	beq.n	3418de12 <HAL_XSPI_IRQHandler+0x262>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
3418ddb8:	687b      	ldr	r3, [r7, #4]
3418ddba:	681b      	ldr	r3, [r3, #0]
3418ddbc:	681a      	ldr	r2, [r3, #0]
3418ddbe:	687b      	ldr	r3, [r7, #4]
3418ddc0:	681b      	ldr	r3, [r3, #0]
3418ddc2:	f022 0204 	bic.w	r2, r2, #4
3418ddc6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      hxspi->hdmatx->XferAbortCallback = XSPI_DMAAbortCplt;
3418ddc8:	687b      	ldr	r3, [r7, #4]
3418ddca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418ddcc:	4a21      	ldr	r2, [pc, #132]	@ (3418de54 <HAL_XSPI_IRQHandler+0x2a4>)
3418ddce:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hxspi->hdmatx) != HAL_OK)
3418ddd0:	687b      	ldr	r3, [r7, #4]
3418ddd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418ddd4:	4618      	mov	r0, r3
3418ddd6:	f7f4 fe5e 	bl	34182a96 <HAL_DMA_Abort_IT>
3418ddda:	4603      	mov	r3, r0
3418dddc:	2b00      	cmp	r3, #0
3418ddde:	d005      	beq.n	3418ddec <HAL_XSPI_IRQHandler+0x23c>
      {
        hxspi->State = HAL_XSPI_STATE_READY;
3418dde0:	687b      	ldr	r3, [r7, #4]
3418dde2:	2202      	movs	r2, #2
3418dde4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->ErrorCallback(hxspi);
#else
        HAL_XSPI_ErrorCallback(hxspi);
3418dde6:	6878      	ldr	r0, [r7, #4]
3418dde8:	f000 fad2 	bl	3418e390 <HAL_XSPI_ErrorCallback>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }

      /* Disable the DMA receive on the DMA side */
      hxspi->hdmarx->XferAbortCallback = XSPI_DMAAbortCplt;
3418ddec:	687b      	ldr	r3, [r7, #4]
3418ddee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418ddf0:	4a18      	ldr	r2, [pc, #96]	@ (3418de54 <HAL_XSPI_IRQHandler+0x2a4>)
3418ddf2:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hxspi->hdmarx) != HAL_OK)
3418ddf4:	687b      	ldr	r3, [r7, #4]
3418ddf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418ddf8:	4618      	mov	r0, r3
3418ddfa:	f7f4 fe4c 	bl	34182a96 <HAL_DMA_Abort_IT>
3418ddfe:	4603      	mov	r3, r0
3418de00:	2b00      	cmp	r3, #0
3418de02:	d021      	beq.n	3418de48 <HAL_XSPI_IRQHandler+0x298>
      {
        hxspi->State = HAL_XSPI_STATE_READY;
3418de04:	687b      	ldr	r3, [r7, #4]
3418de06:	2202      	movs	r2, #2
3418de08:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->ErrorCallback(hxspi);
#else
        HAL_XSPI_ErrorCallback(hxspi);
3418de0a:	6878      	ldr	r0, [r7, #4]
3418de0c:	f000 fac0 	bl	3418e390 <HAL_XSPI_ErrorCallback>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418de10:	e01a      	b.n	3418de48 <HAL_XSPI_IRQHandler+0x298>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
    }
    else
    {
      hxspi->State = HAL_XSPI_STATE_READY;
3418de12:	687b      	ldr	r3, [r7, #4]
3418de14:	2202      	movs	r2, #2
3418de16:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
      hxspi->ErrorCallback(hxspi);
#else
      HAL_XSPI_ErrorCallback(hxspi);
3418de18:	6878      	ldr	r0, [r7, #4]
3418de1a:	f000 fab9 	bl	3418e390 <HAL_XSPI_ErrorCallback>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418de1e:	e013      	b.n	3418de48 <HAL_XSPI_IRQHandler+0x298>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* XSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TO) != 0U) && ((itsource & HAL_XSPI_IT_TO) != 0U))
3418de20:	693b      	ldr	r3, [r7, #16]
3418de22:	f003 0310 	and.w	r3, r3, #16
3418de26:	2b00      	cmp	r3, #0
3418de28:	d00f      	beq.n	3418de4a <HAL_XSPI_IRQHandler+0x29a>
3418de2a:	68fb      	ldr	r3, [r7, #12]
3418de2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3418de30:	2b00      	cmp	r3, #0
3418de32:	d00a      	beq.n	3418de4a <HAL_XSPI_IRQHandler+0x29a>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_TO;
3418de34:	687b      	ldr	r3, [r7, #4]
3418de36:	681b      	ldr	r3, [r3, #0]
3418de38:	2210      	movs	r2, #16
3418de3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->TimeOutCallback(hxspi);
#else
    HAL_XSPI_TimeOutCallback(hxspi);
3418de3c:	6878      	ldr	r0, [r7, #4]
3418de3e:	f000 faed 	bl	3418e41c <HAL_XSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
3418de42:	e002      	b.n	3418de4a <HAL_XSPI_IRQHandler+0x29a>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418de44:	bf00      	nop
3418de46:	e000      	b.n	3418de4a <HAL_XSPI_IRQHandler+0x29a>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418de48:	bf00      	nop
}
3418de4a:	bf00      	nop
3418de4c:	3718      	adds	r7, #24
3418de4e:	46bd      	mov	sp, r7
3418de50:	bd80      	pop	{r7, pc}
3418de52:	bf00      	nop
3418de54:	3418e805 	.word	0x3418e805

3418de58 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd, uint32_t Timeout)
{
3418de58:	b580      	push	{r7, lr}
3418de5a:	b08a      	sub	sp, #40	@ 0x28
3418de5c:	af02      	add	r7, sp, #8
3418de5e:	60f8      	str	r0, [r7, #12]
3418de60:	60b9      	str	r1, [r7, #8]
3418de62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
3418de64:	f7f4 fac0 	bl	341823e8 <HAL_GetTick>
3418de68:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418de6a:	68bb      	ldr	r3, [r7, #8]
3418de6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418de6e:	2b00      	cmp	r3, #0
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));

  /* Check the state of the driver */
  state = hxspi->State;
3418de70:	68fb      	ldr	r3, [r7, #12]
3418de72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418de74:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3418de76:	697b      	ldr	r3, [r7, #20]
3418de78:	2b02      	cmp	r3, #2
3418de7a:	d104      	bne.n	3418de86 <HAL_XSPI_Command+0x2e>
3418de7c:	68fb      	ldr	r3, [r7, #12]
3418de7e:	68db      	ldr	r3, [r3, #12]
3418de80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418de84:	d115      	bne.n	3418deb2 <HAL_XSPI_Command+0x5a>
3418de86:	697b      	ldr	r3, [r7, #20]
3418de88:	2b14      	cmp	r3, #20
3418de8a:	d107      	bne.n	3418de9c <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3418de8c:	68bb      	ldr	r3, [r7, #8]
3418de8e:	681b      	ldr	r3, [r3, #0]
3418de90:	2b02      	cmp	r3, #2
3418de92:	d00e      	beq.n	3418deb2 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3418de94:	68bb      	ldr	r3, [r7, #8]
3418de96:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3418de98:	2b03      	cmp	r3, #3
3418de9a:	d00a      	beq.n	3418deb2 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3418de9c:	697b      	ldr	r3, [r7, #20]
3418de9e:	2b24      	cmp	r3, #36	@ 0x24
3418dea0:	d15e      	bne.n	3418df60 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3418dea2:	68bb      	ldr	r3, [r7, #8]
3418dea4:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3418dea6:	2b01      	cmp	r3, #1
3418dea8:	d003      	beq.n	3418deb2 <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
3418deaa:	68bb      	ldr	r3, [r7, #8]
3418deac:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3418deae:	2b03      	cmp	r3, #3
3418deb0:	d156      	bne.n	3418df60 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418deb2:	687b      	ldr	r3, [r7, #4]
3418deb4:	9300      	str	r3, [sp, #0]
3418deb6:	69bb      	ldr	r3, [r7, #24]
3418deb8:	2200      	movs	r2, #0
3418deba:	2120      	movs	r1, #32
3418debc:	68f8      	ldr	r0, [r7, #12]
3418debe:	f000 fcdd 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418dec2:	4603      	mov	r3, r0
3418dec4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
3418dec6:	7ffb      	ldrb	r3, [r7, #31]
3418dec8:	2b00      	cmp	r3, #0
3418deca:	d146      	bne.n	3418df5a <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3418decc:	68fb      	ldr	r3, [r7, #12]
3418dece:	2200      	movs	r2, #0
3418ded0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
3418ded2:	68b9      	ldr	r1, [r7, #8]
3418ded4:	68f8      	ldr	r0, [r7, #12]
3418ded6:	f000 fd07 	bl	3418e8e8 <XSPI_ConfigCmd>
3418deda:	4603      	mov	r3, r0
3418dedc:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
3418dede:	7ffb      	ldrb	r3, [r7, #31]
3418dee0:	2b00      	cmp	r3, #0
3418dee2:	d143      	bne.n	3418df6c <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3418dee4:	68bb      	ldr	r3, [r7, #8]
3418dee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418dee8:	2b00      	cmp	r3, #0
3418deea:	d10e      	bne.n	3418df0a <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418deec:	687b      	ldr	r3, [r7, #4]
3418deee:	9300      	str	r3, [sp, #0]
3418def0:	69bb      	ldr	r3, [r7, #24]
3418def2:	2200      	movs	r2, #0
3418def4:	2120      	movs	r1, #32
3418def6:	68f8      	ldr	r0, [r7, #12]
3418def8:	f000 fcc0 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418defc:	4603      	mov	r3, r0
3418defe:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418df00:	68fb      	ldr	r3, [r7, #12]
3418df02:	681b      	ldr	r3, [r3, #0]
3418df04:	2202      	movs	r2, #2
3418df06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
3418df08:	e030      	b.n	3418df6c <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418df0a:	68bb      	ldr	r3, [r7, #8]
3418df0c:	681b      	ldr	r3, [r3, #0]
3418df0e:	2b00      	cmp	r3, #0
3418df10:	d103      	bne.n	3418df1a <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418df12:	68fb      	ldr	r3, [r7, #12]
3418df14:	2204      	movs	r2, #4
3418df16:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418df18:	e028      	b.n	3418df6c <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3418df1a:	68bb      	ldr	r3, [r7, #8]
3418df1c:	681b      	ldr	r3, [r3, #0]
3418df1e:	2b01      	cmp	r3, #1
3418df20:	d10b      	bne.n	3418df3a <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3418df22:	68fb      	ldr	r3, [r7, #12]
3418df24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418df26:	2b24      	cmp	r3, #36	@ 0x24
3418df28:	d103      	bne.n	3418df32 <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418df2a:	68fb      	ldr	r3, [r7, #12]
3418df2c:	2204      	movs	r2, #4
3418df2e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418df30:	e01c      	b.n	3418df6c <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3418df32:	68fb      	ldr	r3, [r7, #12]
3418df34:	2214      	movs	r2, #20
3418df36:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418df38:	e018      	b.n	3418df6c <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3418df3a:	68bb      	ldr	r3, [r7, #8]
3418df3c:	681b      	ldr	r3, [r3, #0]
3418df3e:	2b02      	cmp	r3, #2
3418df40:	d114      	bne.n	3418df6c <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3418df42:	68fb      	ldr	r3, [r7, #12]
3418df44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418df46:	2b14      	cmp	r3, #20
3418df48:	d103      	bne.n	3418df52 <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418df4a:	68fb      	ldr	r3, [r7, #12]
3418df4c:	2204      	movs	r2, #4
3418df4e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418df50:	e00c      	b.n	3418df6c <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3418df52:	68fb      	ldr	r3, [r7, #12]
3418df54:	2224      	movs	r2, #36	@ 0x24
3418df56:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418df58:	e008      	b.n	3418df6c <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
3418df5a:	2302      	movs	r3, #2
3418df5c:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3418df5e:	e005      	b.n	3418df6c <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
3418df60:	2301      	movs	r3, #1
3418df62:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418df64:	68fb      	ldr	r3, [r7, #12]
3418df66:	2210      	movs	r2, #16
3418df68:	65da      	str	r2, [r3, #92]	@ 0x5c
3418df6a:	e000      	b.n	3418df6e <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
3418df6c:	bf00      	nop
  }

  return status;
3418df6e:	7ffb      	ldrb	r3, [r7, #31]
}
3418df70:	4618      	mov	r0, r3
3418df72:	3720      	adds	r7, #32
3418df74:	46bd      	mov	sp, r7
3418df76:	bd80      	pop	{r7, pc}

3418df78 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
3418df78:	b580      	push	{r7, lr}
3418df7a:	b08a      	sub	sp, #40	@ 0x28
3418df7c:	af02      	add	r7, sp, #8
3418df7e:	60f8      	str	r0, [r7, #12]
3418df80:	60b9      	str	r1, [r7, #8]
3418df82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418df84:	f7f4 fa30 	bl	341823e8 <HAL_GetTick>
3418df88:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418df8a:	68fb      	ldr	r3, [r7, #12]
3418df8c:	681b      	ldr	r3, [r3, #0]
3418df8e:	3350      	adds	r3, #80	@ 0x50
3418df90:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3418df92:	68bb      	ldr	r3, [r7, #8]
3418df94:	2b00      	cmp	r3, #0
3418df96:	d105      	bne.n	3418dfa4 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
3418df98:	2301      	movs	r3, #1
3418df9a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418df9c:	68fb      	ldr	r3, [r7, #12]
3418df9e:	2208      	movs	r2, #8
3418dfa0:	65da      	str	r2, [r3, #92]	@ 0x5c
3418dfa2:	e057      	b.n	3418e054 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418dfa4:	68fb      	ldr	r3, [r7, #12]
3418dfa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418dfa8:	2b04      	cmp	r3, #4
3418dfaa:	d14e      	bne.n	3418e04a <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3418dfac:	68fb      	ldr	r3, [r7, #12]
3418dfae:	681b      	ldr	r3, [r3, #0]
3418dfb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418dfb2:	1c5a      	adds	r2, r3, #1
3418dfb4:	68fb      	ldr	r3, [r7, #12]
3418dfb6:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3418dfb8:	68fb      	ldr	r3, [r7, #12]
3418dfba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418dfbc:	68fb      	ldr	r3, [r7, #12]
3418dfbe:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = (uint8_t *)pData;
3418dfc0:	68fb      	ldr	r3, [r7, #12]
3418dfc2:	68ba      	ldr	r2, [r7, #8]
3418dfc4:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3418dfc6:	68fb      	ldr	r3, [r7, #12]
3418dfc8:	681b      	ldr	r3, [r3, #0]
3418dfca:	681a      	ldr	r2, [r3, #0]
3418dfcc:	68fb      	ldr	r3, [r7, #12]
3418dfce:	681b      	ldr	r3, [r3, #0]
3418dfd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418dfd4:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3418dfd6:	687b      	ldr	r3, [r7, #4]
3418dfd8:	9300      	str	r3, [sp, #0]
3418dfda:	69bb      	ldr	r3, [r7, #24]
3418dfdc:	2201      	movs	r2, #1
3418dfde:	2104      	movs	r1, #4
3418dfe0:	68f8      	ldr	r0, [r7, #12]
3418dfe2:	f000 fc4b 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418dfe6:	4603      	mov	r3, r0
3418dfe8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
3418dfea:	7ffb      	ldrb	r3, [r7, #31]
3418dfec:	2b00      	cmp	r3, #0
3418dfee:	d113      	bne.n	3418e018 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3418dff0:	68fb      	ldr	r3, [r7, #12]
3418dff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418dff4:	781a      	ldrb	r2, [r3, #0]
3418dff6:	697b      	ldr	r3, [r7, #20]
3418dff8:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418dffa:	68fb      	ldr	r3, [r7, #12]
3418dffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418dffe:	1c5a      	adds	r2, r3, #1
3418e000:	68fb      	ldr	r3, [r7, #12]
3418e002:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418e004:	68fb      	ldr	r3, [r7, #12]
3418e006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e008:	1e5a      	subs	r2, r3, #1
3418e00a:	68fb      	ldr	r3, [r7, #12]
3418e00c:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3418e00e:	68fb      	ldr	r3, [r7, #12]
3418e010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e012:	2b00      	cmp	r3, #0
3418e014:	d1df      	bne.n	3418dfd6 <HAL_XSPI_Transmit+0x5e>
3418e016:	e000      	b.n	3418e01a <HAL_XSPI_Transmit+0xa2>
          break;
3418e018:	bf00      	nop

      if (status == HAL_OK)
3418e01a:	7ffb      	ldrb	r3, [r7, #31]
3418e01c:	2b00      	cmp	r3, #0
3418e01e:	d119      	bne.n	3418e054 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418e020:	687b      	ldr	r3, [r7, #4]
3418e022:	9300      	str	r3, [sp, #0]
3418e024:	69bb      	ldr	r3, [r7, #24]
3418e026:	2201      	movs	r2, #1
3418e028:	2102      	movs	r1, #2
3418e02a:	68f8      	ldr	r0, [r7, #12]
3418e02c:	f000 fc26 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418e030:	4603      	mov	r3, r0
3418e032:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
3418e034:	7ffb      	ldrb	r3, [r7, #31]
3418e036:	2b00      	cmp	r3, #0
3418e038:	d10c      	bne.n	3418e054 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418e03a:	68fb      	ldr	r3, [r7, #12]
3418e03c:	681b      	ldr	r3, [r3, #0]
3418e03e:	2202      	movs	r2, #2
3418e040:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3418e042:	68fb      	ldr	r3, [r7, #12]
3418e044:	2202      	movs	r2, #2
3418e046:	659a      	str	r2, [r3, #88]	@ 0x58
3418e048:	e004      	b.n	3418e054 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3418e04a:	2301      	movs	r3, #1
3418e04c:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418e04e:	68fb      	ldr	r3, [r7, #12]
3418e050:	2210      	movs	r2, #16
3418e052:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418e054:	7ffb      	ldrb	r3, [r7, #31]
}
3418e056:	4618      	mov	r0, r3
3418e058:	3720      	adds	r7, #32
3418e05a:	46bd      	mov	sp, r7
3418e05c:	bd80      	pop	{r7, pc}

3418e05e <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *pData, uint32_t Timeout)
{
3418e05e:	b580      	push	{r7, lr}
3418e060:	b08c      	sub	sp, #48	@ 0x30
3418e062:	af02      	add	r7, sp, #8
3418e064:	60f8      	str	r0, [r7, #12]
3418e066:	60b9      	str	r1, [r7, #8]
3418e068:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418e06a:	f7f4 f9bd 	bl	341823e8 <HAL_GetTick>
3418e06e:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418e070:	68fb      	ldr	r3, [r7, #12]
3418e072:	681b      	ldr	r3, [r3, #0]
3418e074:	3350      	adds	r3, #80	@ 0x50
3418e076:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
3418e078:	68fb      	ldr	r3, [r7, #12]
3418e07a:	681b      	ldr	r3, [r3, #0]
3418e07c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418e07e:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
3418e080:	68fb      	ldr	r3, [r7, #12]
3418e082:	681b      	ldr	r3, [r3, #0]
3418e084:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418e088:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3418e08a:	68bb      	ldr	r3, [r7, #8]
3418e08c:	2b00      	cmp	r3, #0
3418e08e:	d106      	bne.n	3418e09e <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
3418e090:	2301      	movs	r3, #1
3418e092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418e096:	68fb      	ldr	r3, [r7, #12]
3418e098:	2208      	movs	r2, #8
3418e09a:	65da      	str	r2, [r3, #92]	@ 0x5c
3418e09c:	e07c      	b.n	3418e198 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418e09e:	68fb      	ldr	r3, [r7, #12]
3418e0a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418e0a2:	2b04      	cmp	r3, #4
3418e0a4:	d172      	bne.n	3418e18c <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3418e0a6:	68fb      	ldr	r3, [r7, #12]
3418e0a8:	681b      	ldr	r3, [r3, #0]
3418e0aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418e0ac:	1c5a      	adds	r2, r3, #1
3418e0ae:	68fb      	ldr	r3, [r7, #12]
3418e0b0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3418e0b2:	68fb      	ldr	r3, [r7, #12]
3418e0b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418e0b6:	68fb      	ldr	r3, [r7, #12]
3418e0b8:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = pData;
3418e0ba:	68fb      	ldr	r3, [r7, #12]
3418e0bc:	68ba      	ldr	r2, [r7, #8]
3418e0be:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3418e0c0:	68fb      	ldr	r3, [r7, #12]
3418e0c2:	681b      	ldr	r3, [r3, #0]
3418e0c4:	681b      	ldr	r3, [r3, #0]
3418e0c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
3418e0ca:	68fb      	ldr	r3, [r7, #12]
3418e0cc:	681b      	ldr	r3, [r3, #0]
3418e0ce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
3418e0d2:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418e0d4:	68fb      	ldr	r3, [r7, #12]
3418e0d6:	68db      	ldr	r3, [r3, #12]
3418e0d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418e0dc:	d104      	bne.n	3418e0e8 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3418e0de:	68fb      	ldr	r3, [r7, #12]
3418e0e0:	681b      	ldr	r3, [r3, #0]
3418e0e2:	69ba      	ldr	r2, [r7, #24]
3418e0e4:	649a      	str	r2, [r3, #72]	@ 0x48
3418e0e6:	e011      	b.n	3418e10c <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3418e0e8:	68fb      	ldr	r3, [r7, #12]
3418e0ea:	681b      	ldr	r3, [r3, #0]
3418e0ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418e0f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3418e0f4:	2b00      	cmp	r3, #0
3418e0f6:	d004      	beq.n	3418e102 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3418e0f8:	68fb      	ldr	r3, [r7, #12]
3418e0fa:	681b      	ldr	r3, [r3, #0]
3418e0fc:	69ba      	ldr	r2, [r7, #24]
3418e0fe:	649a      	str	r2, [r3, #72]	@ 0x48
3418e100:	e004      	b.n	3418e10c <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3418e102:	68fb      	ldr	r3, [r7, #12]
3418e104:	681b      	ldr	r3, [r3, #0]
3418e106:	697a      	ldr	r2, [r7, #20]
3418e108:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3418e10c:	687b      	ldr	r3, [r7, #4]
3418e10e:	9300      	str	r3, [sp, #0]
3418e110:	6a3b      	ldr	r3, [r7, #32]
3418e112:	2201      	movs	r2, #1
3418e114:	2106      	movs	r1, #6
3418e116:	68f8      	ldr	r0, [r7, #12]
3418e118:	f000 fbb0 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418e11c:	4603      	mov	r3, r0
3418e11e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
3418e122:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418e126:	2b00      	cmp	r3, #0
3418e128:	d114      	bne.n	3418e154 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3418e12a:	68fb      	ldr	r3, [r7, #12]
3418e12c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418e12e:	69fa      	ldr	r2, [r7, #28]
3418e130:	7812      	ldrb	r2, [r2, #0]
3418e132:	b2d2      	uxtb	r2, r2
3418e134:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418e136:	68fb      	ldr	r3, [r7, #12]
3418e138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418e13a:	1c5a      	adds	r2, r3, #1
3418e13c:	68fb      	ldr	r3, [r7, #12]
3418e13e:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418e140:	68fb      	ldr	r3, [r7, #12]
3418e142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e144:	1e5a      	subs	r2, r3, #1
3418e146:	68fb      	ldr	r3, [r7, #12]
3418e148:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3418e14a:	68fb      	ldr	r3, [r7, #12]
3418e14c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418e14e:	2b00      	cmp	r3, #0
3418e150:	d1dc      	bne.n	3418e10c <HAL_XSPI_Receive+0xae>
3418e152:	e000      	b.n	3418e156 <HAL_XSPI_Receive+0xf8>
          break;
3418e154:	bf00      	nop

      if (status == HAL_OK)
3418e156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418e15a:	2b00      	cmp	r3, #0
3418e15c:	d11c      	bne.n	3418e198 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418e15e:	687b      	ldr	r3, [r7, #4]
3418e160:	9300      	str	r3, [sp, #0]
3418e162:	6a3b      	ldr	r3, [r7, #32]
3418e164:	2201      	movs	r2, #1
3418e166:	2102      	movs	r1, #2
3418e168:	68f8      	ldr	r0, [r7, #12]
3418e16a:	f000 fb87 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418e16e:	4603      	mov	r3, r0
3418e170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
3418e174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418e178:	2b00      	cmp	r3, #0
3418e17a:	d10d      	bne.n	3418e198 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418e17c:	68fb      	ldr	r3, [r7, #12]
3418e17e:	681b      	ldr	r3, [r3, #0]
3418e180:	2202      	movs	r2, #2
3418e182:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3418e184:	68fb      	ldr	r3, [r7, #12]
3418e186:	2202      	movs	r2, #2
3418e188:	659a      	str	r2, [r3, #88]	@ 0x58
3418e18a:	e005      	b.n	3418e198 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3418e18c:	2301      	movs	r3, #1
3418e18e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418e192:	68fb      	ldr	r3, [r7, #12]
3418e194:	2210      	movs	r2, #16
3418e196:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418e198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418e19c:	4618      	mov	r0, r3
3418e19e:	3728      	adds	r7, #40	@ 0x28
3418e1a0:	46bd      	mov	sp, r7
3418e1a2:	bd80      	pop	{r7, pc}

3418e1a4 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, const XSPI_AutoPollingTypeDef *pCfg,
                                       uint32_t Timeout)
{
3418e1a4:	b580      	push	{r7, lr}
3418e1a6:	b08a      	sub	sp, #40	@ 0x28
3418e1a8:	af02      	add	r7, sp, #8
3418e1aa:	60f8      	str	r0, [r7, #12]
3418e1ac:	60b9      	str	r1, [r7, #8]
3418e1ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418e1b0:	f7f4 f91a 	bl	341823e8 <HAL_GetTick>
3418e1b4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
3418e1b6:	68fb      	ldr	r3, [r7, #12]
3418e1b8:	681b      	ldr	r3, [r3, #0]
3418e1ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418e1bc:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
3418e1be:	68fb      	ldr	r3, [r7, #12]
3418e1c0:	681b      	ldr	r3, [r3, #0]
3418e1c2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418e1c6:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3418e1c8:	68fb      	ldr	r3, [r7, #12]
3418e1ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418e1cc:	2b04      	cmp	r3, #4
3418e1ce:	d167      	bne.n	3418e2a0 <HAL_XSPI_AutoPolling+0xfc>
3418e1d0:	68bb      	ldr	r3, [r7, #8]
3418e1d2:	68db      	ldr	r3, [r3, #12]
3418e1d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3418e1d8:	d162      	bne.n	3418e2a0 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418e1da:	687b      	ldr	r3, [r7, #4]
3418e1dc:	9300      	str	r3, [sp, #0]
3418e1de:	69bb      	ldr	r3, [r7, #24]
3418e1e0:	2200      	movs	r2, #0
3418e1e2:	2120      	movs	r1, #32
3418e1e4:	68f8      	ldr	r0, [r7, #12]
3418e1e6:	f000 fb49 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418e1ea:	4603      	mov	r3, r0
3418e1ec:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
3418e1ee:	7ffb      	ldrb	r3, [r7, #31]
3418e1f0:	2b00      	cmp	r3, #0
3418e1f2:	d152      	bne.n	3418e29a <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3418e1f4:	68fb      	ldr	r3, [r7, #12]
3418e1f6:	681b      	ldr	r3, [r3, #0]
3418e1f8:	68ba      	ldr	r2, [r7, #8]
3418e1fa:	6812      	ldr	r2, [r2, #0]
3418e1fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3418e200:	68fb      	ldr	r3, [r7, #12]
3418e202:	681b      	ldr	r3, [r3, #0]
3418e204:	68ba      	ldr	r2, [r7, #8]
3418e206:	6852      	ldr	r2, [r2, #4]
3418e208:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3418e20c:	68fb      	ldr	r3, [r7, #12]
3418e20e:	681b      	ldr	r3, [r3, #0]
3418e210:	68ba      	ldr	r2, [r7, #8]
3418e212:	6912      	ldr	r2, [r2, #16]
3418e214:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3418e218:	68fb      	ldr	r3, [r7, #12]
3418e21a:	681b      	ldr	r3, [r3, #0]
3418e21c:	681b      	ldr	r3, [r3, #0]
3418e21e:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
3418e222:	68bb      	ldr	r3, [r7, #8]
3418e224:	6899      	ldr	r1, [r3, #8]
3418e226:	68bb      	ldr	r3, [r7, #8]
3418e228:	68db      	ldr	r3, [r3, #12]
3418e22a:	430b      	orrs	r3, r1
3418e22c:	431a      	orrs	r2, r3
3418e22e:	68fb      	ldr	r3, [r7, #12]
3418e230:	681b      	ldr	r3, [r3, #0]
3418e232:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
3418e236:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418e238:	68fb      	ldr	r3, [r7, #12]
3418e23a:	68db      	ldr	r3, [r3, #12]
3418e23c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418e240:	d104      	bne.n	3418e24c <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3418e242:	68fb      	ldr	r3, [r7, #12]
3418e244:	681b      	ldr	r3, [r3, #0]
3418e246:	697a      	ldr	r2, [r7, #20]
3418e248:	649a      	str	r2, [r3, #72]	@ 0x48
3418e24a:	e011      	b.n	3418e270 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3418e24c:	68fb      	ldr	r3, [r7, #12]
3418e24e:	681b      	ldr	r3, [r3, #0]
3418e250:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418e254:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3418e258:	2b00      	cmp	r3, #0
3418e25a:	d004      	beq.n	3418e266 <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3418e25c:	68fb      	ldr	r3, [r7, #12]
3418e25e:	681b      	ldr	r3, [r3, #0]
3418e260:	697a      	ldr	r2, [r7, #20]
3418e262:	649a      	str	r2, [r3, #72]	@ 0x48
3418e264:	e004      	b.n	3418e270 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3418e266:	68fb      	ldr	r3, [r7, #12]
3418e268:	681b      	ldr	r3, [r3, #0]
3418e26a:	693a      	ldr	r2, [r7, #16]
3418e26c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3418e270:	687b      	ldr	r3, [r7, #4]
3418e272:	9300      	str	r3, [sp, #0]
3418e274:	69bb      	ldr	r3, [r7, #24]
3418e276:	2201      	movs	r2, #1
3418e278:	2108      	movs	r1, #8
3418e27a:	68f8      	ldr	r0, [r7, #12]
3418e27c:	f000 fafe 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418e280:	4603      	mov	r3, r0
3418e282:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
3418e284:	7ffb      	ldrb	r3, [r7, #31]
3418e286:	2b00      	cmp	r3, #0
3418e288:	d110      	bne.n	3418e2ac <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3418e28a:	68fb      	ldr	r3, [r7, #12]
3418e28c:	681b      	ldr	r3, [r3, #0]
3418e28e:	2208      	movs	r2, #8
3418e290:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
3418e292:	68fb      	ldr	r3, [r7, #12]
3418e294:	2202      	movs	r2, #2
3418e296:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418e298:	e008      	b.n	3418e2ac <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
3418e29a:	2302      	movs	r3, #2
3418e29c:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3418e29e:	e005      	b.n	3418e2ac <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
3418e2a0:	2301      	movs	r3, #1
3418e2a2:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418e2a4:	68fb      	ldr	r3, [r7, #12]
3418e2a6:	2210      	movs	r2, #16
3418e2a8:	65da      	str	r2, [r3, #92]	@ 0x5c
3418e2aa:	e000      	b.n	3418e2ae <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
3418e2ac:	bf00      	nop
  }

  return status;
3418e2ae:	7ffb      	ldrb	r3, [r7, #31]
}
3418e2b0:	4618      	mov	r0, r3
3418e2b2:	3720      	adds	r7, #32
3418e2b4:	46bd      	mov	sp, r7
3418e2b6:	bd80      	pop	{r7, pc}

3418e2b8 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, const XSPI_MemoryMappedTypeDef *pCfg)
{
3418e2b8:	b580      	push	{r7, lr}
3418e2ba:	b086      	sub	sp, #24
3418e2bc:	af02      	add	r7, sp, #8
3418e2be:	6078      	str	r0, [r7, #4]
3418e2c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418e2c2:	f7f4 f891 	bl	341823e8 <HAL_GetTick>
3418e2c6:	60b8      	str	r0, [r7, #8]
  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418e2c8:	687b      	ldr	r3, [r7, #4]
3418e2ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418e2cc:	2b04      	cmp	r3, #4
3418e2ce:	d155      	bne.n	3418e37c <HAL_XSPI_MemoryMapped+0xc4>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418e2d0:	687b      	ldr	r3, [r7, #4]
3418e2d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418e2d4:	9300      	str	r3, [sp, #0]
3418e2d6:	68bb      	ldr	r3, [r7, #8]
3418e2d8:	2200      	movs	r2, #0
3418e2da:	2120      	movs	r1, #32
3418e2dc:	6878      	ldr	r0, [r7, #4]
3418e2de:	f000 facd 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418e2e2:	4603      	mov	r3, r0
3418e2e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
3418e2e6:	7bfb      	ldrb	r3, [r7, #15]
3418e2e8:	2b00      	cmp	r3, #0
3418e2ea:	d14c      	bne.n	3418e386 <HAL_XSPI_MemoryMapped+0xce>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3418e2ec:	687b      	ldr	r3, [r7, #4]
3418e2ee:	2288      	movs	r2, #136	@ 0x88
3418e2f0:	659a      	str	r2, [r3, #88]	@ 0x58

      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3418e2f2:	683b      	ldr	r3, [r7, #0]
3418e2f4:	689b      	ldr	r3, [r3, #8]
3418e2f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418e2fa:	d10b      	bne.n	3418e314 <HAL_XSPI_MemoryMapped+0x5c>
      {
        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3418e2fc:	687b      	ldr	r3, [r7, #4]
3418e2fe:	681b      	ldr	r3, [r3, #0]
3418e300:	681b      	ldr	r3, [r3, #0]
3418e302:	f023 7100 	bic.w	r1, r3, #33554432	@ 0x2000000
3418e306:	683b      	ldr	r3, [r7, #0]
3418e308:	689a      	ldr	r2, [r3, #8]
3418e30a:	687b      	ldr	r3, [r7, #4]
3418e30c:	681b      	ldr	r3, [r3, #0]
3418e30e:	430a      	orrs	r2, r1
3418e310:	601a      	str	r2, [r3, #0]
3418e312:	e00d      	b.n	3418e330 <HAL_XSPI_MemoryMapped+0x78>
      else
      {
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));

        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3418e314:	687b      	ldr	r3, [r7, #4]
3418e316:	681b      	ldr	r3, [r3, #0]
3418e318:	681b      	ldr	r3, [r3, #0]
3418e31a:	f023 61c0 	bic.w	r1, r3, #100663296	@ 0x6000000
3418e31e:	683b      	ldr	r3, [r7, #0]
3418e320:	689a      	ldr	r2, [r3, #8]
3418e322:	683b      	ldr	r3, [r7, #0]
3418e324:	68db      	ldr	r3, [r3, #12]
3418e326:	431a      	orrs	r2, r3
3418e328:	687b      	ldr	r3, [r7, #4]
3418e32a:	681b      	ldr	r3, [r3, #0]
3418e32c:	430a      	orrs	r2, r1
3418e32e:	601a      	str	r2, [r3, #0]
                   (pCfg->NoPrefetchData | pCfg->NoPrefetchAXI));
      }
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3418e330:	683b      	ldr	r3, [r7, #0]
3418e332:	681b      	ldr	r3, [r3, #0]
3418e334:	2b08      	cmp	r3, #8
3418e336:	d111      	bne.n	3418e35c <HAL_XSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3418e338:	687b      	ldr	r3, [r7, #4]
3418e33a:	681b      	ldr	r3, [r3, #0]
3418e33c:	683a      	ldr	r2, [r7, #0]
3418e33e:	6852      	ldr	r2, [r2, #4]
3418e340:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3418e344:	687b      	ldr	r3, [r7, #4]
3418e346:	681b      	ldr	r3, [r3, #0]
3418e348:	2210      	movs	r2, #16
3418e34a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3418e34c:	687b      	ldr	r3, [r7, #4]
3418e34e:	681b      	ldr	r3, [r3, #0]
3418e350:	681a      	ldr	r2, [r3, #0]
3418e352:	687b      	ldr	r3, [r7, #4]
3418e354:	681b      	ldr	r3, [r3, #0]
3418e356:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3418e35a:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3418e35c:	687b      	ldr	r3, [r7, #4]
3418e35e:	681b      	ldr	r3, [r3, #0]
3418e360:	681b      	ldr	r3, [r3, #0]
3418e362:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3418e366:	f023 0308 	bic.w	r3, r3, #8
3418e36a:	683a      	ldr	r2, [r7, #0]
3418e36c:	6812      	ldr	r2, [r2, #0]
3418e36e:	431a      	orrs	r2, r3
3418e370:	687b      	ldr	r3, [r7, #4]
3418e372:	681b      	ldr	r3, [r3, #0]
3418e374:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
3418e378:	601a      	str	r2, [r3, #0]
3418e37a:	e004      	b.n	3418e386 <HAL_XSPI_MemoryMapped+0xce>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
3418e37c:	2301      	movs	r3, #1
3418e37e:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418e380:	687b      	ldr	r3, [r7, #4]
3418e382:	2210      	movs	r2, #16
3418e384:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
3418e386:	7bfb      	ldrb	r3, [r7, #15]
}
3418e388:	4618      	mov	r0, r3
3418e38a:	3710      	adds	r7, #16
3418e38c:	46bd      	mov	sp, r7
3418e38e:	bd80      	pop	{r7, pc}

3418e390 <HAL_XSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_ErrorCallback(XSPI_HandleTypeDef *hxspi)
{
3418e390:	b480      	push	{r7}
3418e392:	b083      	sub	sp, #12
3418e394:	af00      	add	r7, sp, #0
3418e396:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_ErrorCallback could be implemented in the user file
   */
}
3418e398:	bf00      	nop
3418e39a:	370c      	adds	r7, #12
3418e39c:	46bd      	mov	sp, r7
3418e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e3a2:	4770      	bx	lr

3418e3a4 <HAL_XSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_AbortCpltCallback(XSPI_HandleTypeDef *hxspi)
{
3418e3a4:	b480      	push	{r7}
3418e3a6:	b083      	sub	sp, #12
3418e3a8:	af00      	add	r7, sp, #0
3418e3aa:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_AbortCpltCallback could be implemented in the user file
   */
}
3418e3ac:	bf00      	nop
3418e3ae:	370c      	adds	r7, #12
3418e3b0:	46bd      	mov	sp, r7
3418e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e3b6:	4770      	bx	lr

3418e3b8 <HAL_XSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_FifoThresholdCallback(XSPI_HandleTypeDef *hxspi)
{
3418e3b8:	b480      	push	{r7}
3418e3ba:	b083      	sub	sp, #12
3418e3bc:	af00      	add	r7, sp, #0
3418e3be:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
3418e3c0:	bf00      	nop
3418e3c2:	370c      	adds	r7, #12
3418e3c4:	46bd      	mov	sp, r7
3418e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e3ca:	4770      	bx	lr

3418e3cc <HAL_XSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_CmdCpltCallback(XSPI_HandleTypeDef *hxspi)
{
3418e3cc:	b480      	push	{r7}
3418e3ce:	b083      	sub	sp, #12
3418e3d0:	af00      	add	r7, sp, #0
3418e3d2:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_CmdCpltCallback could be implemented in the user file
   */
}
3418e3d4:	bf00      	nop
3418e3d6:	370c      	adds	r7, #12
3418e3d8:	46bd      	mov	sp, r7
3418e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e3de:	4770      	bx	lr

3418e3e0 <HAL_XSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_RxCpltCallback(XSPI_HandleTypeDef *hxspi)
{
3418e3e0:	b480      	push	{r7}
3418e3e2:	b083      	sub	sp, #12
3418e3e4:	af00      	add	r7, sp, #0
3418e3e6:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_RxCpltCallback could be implemented in the user file
   */
}
3418e3e8:	bf00      	nop
3418e3ea:	370c      	adds	r7, #12
3418e3ec:	46bd      	mov	sp, r7
3418e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e3f2:	4770      	bx	lr

3418e3f4 <HAL_XSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_TxCpltCallback(XSPI_HandleTypeDef *hxspi)
{
3418e3f4:	b480      	push	{r7}
3418e3f6:	b083      	sub	sp, #12
3418e3f8:	af00      	add	r7, sp, #0
3418e3fa:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_TxCpltCallback could be implemented in the user file
   */
}
3418e3fc:	bf00      	nop
3418e3fe:	370c      	adds	r7, #12
3418e400:	46bd      	mov	sp, r7
3418e402:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e406:	4770      	bx	lr

3418e408 <HAL_XSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_StatusMatchCallback(XSPI_HandleTypeDef *hxspi)
{
3418e408:	b480      	push	{r7}
3418e40a:	b083      	sub	sp, #12
3418e40c:	af00      	add	r7, sp, #0
3418e40e:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_StatusMatchCallback could be implemented in the user file
   */
}
3418e410:	bf00      	nop
3418e412:	370c      	adds	r7, #12
3418e414:	46bd      	mov	sp, r7
3418e416:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e41a:	4770      	bx	lr

3418e41c <HAL_XSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_TimeOutCallback(XSPI_HandleTypeDef *hxspi)
{
3418e41c:	b480      	push	{r7}
3418e41e:	b083      	sub	sp, #12
3418e420:	af00      	add	r7, sp, #0
3418e422:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_TimeOutCallback could be implemented in the user file
   */
}
3418e424:	bf00      	nop
3418e426:	370c      	adds	r7, #12
3418e428:	46bd      	mov	sp, r7
3418e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e42e:	4770      	bx	lr

3418e430 <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
3418e430:	b580      	push	{r7, lr}
3418e432:	b086      	sub	sp, #24
3418e434:	af02      	add	r7, sp, #8
3418e436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418e438:	2300      	movs	r3, #0
3418e43a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3418e43c:	f7f3 ffd4 	bl	341823e8 <HAL_GetTick>
3418e440:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
3418e442:	687b      	ldr	r3, [r7, #4]
3418e444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418e446:	2b00      	cmp	r3, #0
3418e448:	d06f      	beq.n	3418e52a <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418e44a:	687b      	ldr	r3, [r7, #4]
3418e44c:	681b      	ldr	r3, [r3, #0]
3418e44e:	681b      	ldr	r3, [r3, #0]
3418e450:	f003 0304 	and.w	r3, r3, #4
3418e454:	2b00      	cmp	r3, #0
3418e456:	d021      	beq.n	3418e49c <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
3418e458:	687b      	ldr	r3, [r7, #4]
3418e45a:	681b      	ldr	r3, [r3, #0]
3418e45c:	681a      	ldr	r2, [r3, #0]
3418e45e:	687b      	ldr	r3, [r7, #4]
3418e460:	681b      	ldr	r3, [r3, #0]
3418e462:	f022 0204 	bic.w	r2, r2, #4
3418e466:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
3418e468:	687b      	ldr	r3, [r7, #4]
3418e46a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418e46c:	4618      	mov	r0, r3
3418e46e:	f7f4 fa96 	bl	3418299e <HAL_DMA_Abort>
3418e472:	4603      	mov	r3, r0
3418e474:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
3418e476:	7bfb      	ldrb	r3, [r7, #15]
3418e478:	2b00      	cmp	r3, #0
3418e47a:	d002      	beq.n	3418e482 <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
3418e47c:	687b      	ldr	r3, [r7, #4]
3418e47e:	2204      	movs	r2, #4
3418e480:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
3418e482:	687b      	ldr	r3, [r7, #4]
3418e484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418e486:	4618      	mov	r0, r3
3418e488:	f7f4 fa89 	bl	3418299e <HAL_DMA_Abort>
3418e48c:	4603      	mov	r3, r0
3418e48e:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
3418e490:	7bfb      	ldrb	r3, [r7, #15]
3418e492:	2b00      	cmp	r3, #0
3418e494:	d002      	beq.n	3418e49c <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
3418e496:	687b      	ldr	r3, [r7, #4]
3418e498:	2204      	movs	r2, #4
3418e49a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
3418e49c:	687b      	ldr	r3, [r7, #4]
3418e49e:	681b      	ldr	r3, [r3, #0]
3418e4a0:	6a1b      	ldr	r3, [r3, #32]
3418e4a2:	f003 0320 	and.w	r3, r3, #32
3418e4a6:	2b00      	cmp	r3, #0
3418e4a8:	d033      	beq.n	3418e512 <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
3418e4aa:	687b      	ldr	r3, [r7, #4]
3418e4ac:	681b      	ldr	r3, [r3, #0]
3418e4ae:	681a      	ldr	r2, [r3, #0]
3418e4b0:	687b      	ldr	r3, [r7, #4]
3418e4b2:	681b      	ldr	r3, [r3, #0]
3418e4b4:	f042 0202 	orr.w	r2, r2, #2
3418e4b8:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
3418e4ba:	687b      	ldr	r3, [r7, #4]
3418e4bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418e4be:	9300      	str	r3, [sp, #0]
3418e4c0:	68bb      	ldr	r3, [r7, #8]
3418e4c2:	2201      	movs	r2, #1
3418e4c4:	2102      	movs	r1, #2
3418e4c6:	6878      	ldr	r0, [r7, #4]
3418e4c8:	f000 f9d8 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418e4cc:	4603      	mov	r3, r0
3418e4ce:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
3418e4d0:	7bfb      	ldrb	r3, [r7, #15]
3418e4d2:	2b00      	cmp	r3, #0
3418e4d4:	d12e      	bne.n	3418e534 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418e4d6:	687b      	ldr	r3, [r7, #4]
3418e4d8:	681b      	ldr	r3, [r3, #0]
3418e4da:	2202      	movs	r2, #2
3418e4dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418e4de:	687b      	ldr	r3, [r7, #4]
3418e4e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418e4e2:	9300      	str	r3, [sp, #0]
3418e4e4:	68bb      	ldr	r3, [r7, #8]
3418e4e6:	2200      	movs	r2, #0
3418e4e8:	2120      	movs	r1, #32
3418e4ea:	6878      	ldr	r0, [r7, #4]
3418e4ec:	f000 f9c6 	bl	3418e87c <XSPI_WaitFlagStateUntilTimeout>
3418e4f0:	4603      	mov	r3, r0
3418e4f2:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
3418e4f4:	7bfb      	ldrb	r3, [r7, #15]
3418e4f6:	2b00      	cmp	r3, #0
3418e4f8:	d11c      	bne.n	3418e534 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
3418e4fa:	687b      	ldr	r3, [r7, #4]
3418e4fc:	681b      	ldr	r3, [r3, #0]
3418e4fe:	681a      	ldr	r2, [r3, #0]
3418e500:	687b      	ldr	r3, [r7, #4]
3418e502:	681b      	ldr	r3, [r3, #0]
3418e504:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418e508:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
3418e50a:	687b      	ldr	r3, [r7, #4]
3418e50c:	2202      	movs	r2, #2
3418e50e:	659a      	str	r2, [r3, #88]	@ 0x58
3418e510:	e010      	b.n	3418e534 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
3418e512:	687b      	ldr	r3, [r7, #4]
3418e514:	681b      	ldr	r3, [r3, #0]
3418e516:	681a      	ldr	r2, [r3, #0]
3418e518:	687b      	ldr	r3, [r7, #4]
3418e51a:	681b      	ldr	r3, [r3, #0]
3418e51c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418e520:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
3418e522:	687b      	ldr	r3, [r7, #4]
3418e524:	2202      	movs	r2, #2
3418e526:	659a      	str	r2, [r3, #88]	@ 0x58
3418e528:	e004      	b.n	3418e534 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
3418e52a:	2301      	movs	r3, #1
3418e52c:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418e52e:	687b      	ldr	r3, [r7, #4]
3418e530:	2210      	movs	r2, #16
3418e532:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
3418e534:	7bfb      	ldrb	r3, [r7, #15]
}
3418e536:	4618      	mov	r0, r3
3418e538:	3710      	adds	r7, #16
3418e53a:	46bd      	mov	sp, r7
3418e53c:	bd80      	pop	{r7, pc}

3418e53e <HAL_XSPI_SetClockPrescaler>:
  * @param  hxspi     : XSPI handle.
  * @param  Prescaler : Clock prescaler.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_SetClockPrescaler(XSPI_HandleTypeDef *hxspi, uint32_t Prescaler)
{
3418e53e:	b480      	push	{r7}
3418e540:	b085      	sub	sp, #20
3418e542:	af00      	add	r7, sp, #0
3418e544:	6078      	str	r0, [r7, #4]
3418e546:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
3418e548:	2300      	movs	r3, #0
3418e54a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));

  /* Check the state */
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
3418e54c:	687b      	ldr	r3, [r7, #4]
3418e54e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418e550:	f003 0308 	and.w	r3, r3, #8
3418e554:	2b00      	cmp	r3, #0
3418e556:	d10e      	bne.n	3418e576 <HAL_XSPI_SetClockPrescaler+0x38>
  {
    /* Synchronize initialization structure with the new clock prescaler value */
    hxspi->Init.ClockPrescaler = Prescaler;
3418e558:	687b      	ldr	r3, [r7, #4]
3418e55a:	683a      	ldr	r2, [r7, #0]
3418e55c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure clock prescaler */
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3418e55e:	687b      	ldr	r3, [r7, #4]
3418e560:	681b      	ldr	r3, [r3, #0]
3418e562:	68db      	ldr	r3, [r3, #12]
3418e564:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418e568:	687b      	ldr	r3, [r7, #4]
3418e56a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3418e56c:	687b      	ldr	r3, [r7, #4]
3418e56e:	681b      	ldr	r3, [r3, #0]
3418e570:	430a      	orrs	r2, r1
3418e572:	60da      	str	r2, [r3, #12]
3418e574:	e004      	b.n	3418e580 <HAL_XSPI_SetClockPrescaler+0x42>
               ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));
  }
  else
  {
    status = HAL_ERROR;
3418e576:	2301      	movs	r3, #1
3418e578:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418e57a:	687b      	ldr	r3, [r7, #4]
3418e57c:	2210      	movs	r2, #16
3418e57e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
3418e580:	7bfb      	ldrb	r3, [r7, #15]
}
3418e582:	4618      	mov	r0, r3
3418e584:	3714      	adds	r7, #20
3418e586:	46bd      	mov	sp, r7
3418e588:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e58c:	4770      	bx	lr

3418e58e <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
3418e58e:	b480      	push	{r7}
3418e590:	b083      	sub	sp, #12
3418e592:	af00      	add	r7, sp, #0
3418e594:	6078      	str	r0, [r7, #4]
3418e596:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
3418e598:	687b      	ldr	r3, [r7, #4]
3418e59a:	683a      	ldr	r2, [r7, #0]
3418e59c:	661a      	str	r2, [r3, #96]	@ 0x60
  return HAL_OK;
3418e59e:	2300      	movs	r3, #0
}
3418e5a0:	4618      	mov	r0, r3
3418e5a2:	370c      	adds	r7, #12
3418e5a4:	46bd      	mov	sp, r7
3418e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e5aa:	4770      	bx	lr

3418e5ac <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *hxspi, const XSPIM_CfgTypeDef *pCfg, uint32_t Timeout)
{
3418e5ac:	b580      	push	{r7, lr}
3418e5ae:	b08e      	sub	sp, #56	@ 0x38
3418e5b0:	af00      	add	r7, sp, #0
3418e5b2:	60f8      	str	r0, [r7, #12]
3418e5b4:	60b9      	str	r1, [r7, #8]
3418e5b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418e5b8:	2300      	movs	r3, #0
3418e5ba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  uint8_t index;
  uint8_t xspi_enabled = 0U;
3418e5be:	2300      	movs	r3, #0
3418e5c0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
3418e5c4:	f107 0310 	add.w	r3, r7, #16
3418e5c8:	2224      	movs	r2, #36	@ 0x24
3418e5ca:	2100      	movs	r1, #0
3418e5cc:	4618      	mov	r0, r3
3418e5ce:	f003 fb39 	bl	34191c44 <memset>
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
3418e5d2:	2300      	movs	r3, #0
3418e5d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418e5d8:	e014      	b.n	3418e604 <HAL_XSPIM_Config+0x58>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
3418e5da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418e5de:	3301      	adds	r3, #1
3418e5e0:	b2d8      	uxtb	r0, r3
3418e5e2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
3418e5e6:	f107 0110 	add.w	r1, r7, #16
3418e5ea:	4613      	mov	r3, r2
3418e5ec:	005b      	lsls	r3, r3, #1
3418e5ee:	4413      	add	r3, r2
3418e5f0:	009b      	lsls	r3, r3, #2
3418e5f2:	440b      	add	r3, r1
3418e5f4:	4619      	mov	r1, r3
3418e5f6:	f000 fb15 	bl	3418ec24 <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
3418e5fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418e5fe:	3301      	adds	r3, #1
3418e600:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418e604:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418e608:	2b02      	cmp	r3, #2
3418e60a:	d9e6      	bls.n	3418e5da <HAL_XSPIM_Config+0x2e>
  }

  /********** Disable all XSPI to configure XSPI IO Manager **********/
  if (__HAL_RCC_XSPI1_IS_CLK_ENABLED() != 0U)
3418e60c:	2020      	movs	r0, #32
3418e60e:	f7ff f9a7 	bl	3418d960 <LL_AHB5_GRP1_IsEnabledClock>
3418e612:	4603      	mov	r3, r0
3418e614:	2b00      	cmp	r3, #0
3418e616:	d011      	beq.n	3418e63c <HAL_XSPIM_Config+0x90>
  {
    if ((XSPI1->CR & XSPI_CR_EN) != 0U)
3418e618:	4b76      	ldr	r3, [pc, #472]	@ (3418e7f4 <HAL_XSPIM_Config+0x248>)
3418e61a:	681b      	ldr	r3, [r3, #0]
3418e61c:	f003 0301 	and.w	r3, r3, #1
3418e620:	2b00      	cmp	r3, #0
3418e622:	d00b      	beq.n	3418e63c <HAL_XSPIM_Config+0x90>
    {
      CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
3418e624:	4b73      	ldr	r3, [pc, #460]	@ (3418e7f4 <HAL_XSPIM_Config+0x248>)
3418e626:	681b      	ldr	r3, [r3, #0]
3418e628:	4a72      	ldr	r2, [pc, #456]	@ (3418e7f4 <HAL_XSPIM_Config+0x248>)
3418e62a:	f023 0301 	bic.w	r3, r3, #1
3418e62e:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x1U;
3418e630:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418e634:	f043 0301 	orr.w	r3, r3, #1
3418e638:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI2_IS_CLK_ENABLED() != 0U)
3418e63c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
3418e640:	f7ff f98e 	bl	3418d960 <LL_AHB5_GRP1_IsEnabledClock>
3418e644:	4603      	mov	r3, r0
3418e646:	2b00      	cmp	r3, #0
3418e648:	d011      	beq.n	3418e66e <HAL_XSPIM_Config+0xc2>
  {
    if ((XSPI2->CR & XSPI_CR_EN) != 0U)
3418e64a:	4b6b      	ldr	r3, [pc, #428]	@ (3418e7f8 <HAL_XSPIM_Config+0x24c>)
3418e64c:	681b      	ldr	r3, [r3, #0]
3418e64e:	f003 0301 	and.w	r3, r3, #1
3418e652:	2b00      	cmp	r3, #0
3418e654:	d00b      	beq.n	3418e66e <HAL_XSPIM_Config+0xc2>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
3418e656:	4b68      	ldr	r3, [pc, #416]	@ (3418e7f8 <HAL_XSPIM_Config+0x24c>)
3418e658:	681b      	ldr	r3, [r3, #0]
3418e65a:	4a67      	ldr	r2, [pc, #412]	@ (3418e7f8 <HAL_XSPIM_Config+0x24c>)
3418e65c:	f023 0301 	bic.w	r3, r3, #1
3418e660:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x2U;
3418e662:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418e666:	f043 0302 	orr.w	r3, r3, #2
3418e66a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI3_IS_CLK_ENABLED() != 0U)
3418e66e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
3418e672:	f7ff f975 	bl	3418d960 <LL_AHB5_GRP1_IsEnabledClock>
3418e676:	4603      	mov	r3, r0
3418e678:	2b00      	cmp	r3, #0
3418e67a:	d011      	beq.n	3418e6a0 <HAL_XSPIM_Config+0xf4>
  {
    if ((XSPI3->CR & XSPI_CR_EN) != 0U)
3418e67c:	4b5f      	ldr	r3, [pc, #380]	@ (3418e7fc <HAL_XSPIM_Config+0x250>)
3418e67e:	681b      	ldr	r3, [r3, #0]
3418e680:	f003 0301 	and.w	r3, r3, #1
3418e684:	2b00      	cmp	r3, #0
3418e686:	d00b      	beq.n	3418e6a0 <HAL_XSPIM_Config+0xf4>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
3418e688:	4b5b      	ldr	r3, [pc, #364]	@ (3418e7f8 <HAL_XSPIM_Config+0x24c>)
3418e68a:	681b      	ldr	r3, [r3, #0]
3418e68c:	4a5a      	ldr	r2, [pc, #360]	@ (3418e7f8 <HAL_XSPIM_Config+0x24c>)
3418e68e:	f023 0301 	bic.w	r3, r3, #1
3418e692:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x4U;
3418e694:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418e698:	f043 0304 	orr.w	r3, r3, #4
3418e69c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
3418e6a0:	4b57      	ldr	r3, [pc, #348]	@ (3418e800 <HAL_XSPIM_Config+0x254>)
3418e6a2:	2200      	movs	r2, #0
3418e6a4:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
3418e6a6:	4b56      	ldr	r3, [pc, #344]	@ (3418e800 <HAL_XSPIM_Config+0x254>)
3418e6a8:	681b      	ldr	r3, [r3, #0]
3418e6aa:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
3418e6ae:	68bb      	ldr	r3, [r7, #8]
3418e6b0:	689b      	ldr	r3, [r3, #8]
3418e6b2:	3b01      	subs	r3, #1
3418e6b4:	041b      	lsls	r3, r3, #16
3418e6b6:	4952      	ldr	r1, [pc, #328]	@ (3418e800 <HAL_XSPIM_Config+0x254>)
3418e6b8:	4313      	orrs	r3, r2
3418e6ba:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
3418e6bc:	68fb      	ldr	r3, [r7, #12]
3418e6be:	681b      	ldr	r3, [r3, #0]
3418e6c0:	4a4c      	ldr	r2, [pc, #304]	@ (3418e7f4 <HAL_XSPIM_Config+0x248>)
3418e6c2:	4293      	cmp	r3, r2
3418e6c4:	d110      	bne.n	3418e6e8 <HAL_XSPIM_Config+0x13c>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
3418e6c6:	68bb      	ldr	r3, [r7, #8]
3418e6c8:	685b      	ldr	r3, [r3, #4]
3418e6ca:	617b      	str	r3, [r7, #20]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
3418e6cc:	68bb      	ldr	r3, [r7, #8]
3418e6ce:	681b      	ldr	r3, [r3, #0]
3418e6d0:	2b00      	cmp	r3, #0
3418e6d2:	d03e      	beq.n	3418e752 <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
3418e6d4:	4b4a      	ldr	r3, [pc, #296]	@ (3418e800 <HAL_XSPIM_Config+0x254>)
3418e6d6:	681b      	ldr	r3, [r3, #0]
3418e6d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3418e6dc:	68bb      	ldr	r3, [r7, #8]
3418e6de:	681b      	ldr	r3, [r3, #0]
3418e6e0:	4947      	ldr	r1, [pc, #284]	@ (3418e800 <HAL_XSPIM_Config+0x254>)
3418e6e2:	4313      	orrs	r3, r2
3418e6e4:	600b      	str	r3, [r1, #0]
3418e6e6:	e034      	b.n	3418e752 <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
3418e6e8:	68fb      	ldr	r3, [r7, #12]
3418e6ea:	681b      	ldr	r3, [r3, #0]
3418e6ec:	4a42      	ldr	r2, [pc, #264]	@ (3418e7f8 <HAL_XSPIM_Config+0x24c>)
3418e6ee:	4293      	cmp	r3, r2
3418e6f0:	d110      	bne.n	3418e714 <HAL_XSPIM_Config+0x168>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
3418e6f2:	68bb      	ldr	r3, [r7, #8]
3418e6f4:	685b      	ldr	r3, [r3, #4]
3418e6f6:	623b      	str	r3, [r7, #32]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
3418e6f8:	68bb      	ldr	r3, [r7, #8]
3418e6fa:	681b      	ldr	r3, [r3, #0]
3418e6fc:	2b00      	cmp	r3, #0
3418e6fe:	d028      	beq.n	3418e752 <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
3418e700:	4b3f      	ldr	r3, [pc, #252]	@ (3418e800 <HAL_XSPIM_Config+0x254>)
3418e702:	681b      	ldr	r3, [r3, #0]
3418e704:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
3418e708:	68bb      	ldr	r3, [r7, #8]
3418e70a:	681b      	ldr	r3, [r3, #0]
3418e70c:	493c      	ldr	r1, [pc, #240]	@ (3418e800 <HAL_XSPIM_Config+0x254>)
3418e70e:	4313      	orrs	r3, r2
3418e710:	600b      	str	r3, [r1, #0]
3418e712:	e01e      	b.n	3418e752 <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI3)
3418e714:	68fb      	ldr	r3, [r7, #12]
3418e716:	681b      	ldr	r3, [r3, #0]
3418e718:	4a38      	ldr	r2, [pc, #224]	@ (3418e7fc <HAL_XSPIM_Config+0x250>)
3418e71a:	4293      	cmp	r3, r2
3418e71c:	d111      	bne.n	3418e742 <HAL_XSPIM_Config+0x196>
  {
    if (pCfg->IOPort == HAL_XSPIM_IOPORT_1)
3418e71e:	68bb      	ldr	r3, [r7, #8]
3418e720:	685b      	ldr	r3, [r3, #4]
3418e722:	2b00      	cmp	r3, #0
3418e724:	d104      	bne.n	3418e730 <HAL_XSPIM_Config+0x184>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_2 ;
3418e726:	2301      	movs	r3, #1
3418e728:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_2 ;
3418e72a:	2301      	movs	r3, #1
3418e72c:	623b      	str	r3, [r7, #32]
3418e72e:	e010      	b.n	3418e752 <HAL_XSPIM_Config+0x1a6>
    }
    else if (pCfg->IOPort == HAL_XSPIM_IOPORT_2)
3418e730:	68bb      	ldr	r3, [r7, #8]
3418e732:	685b      	ldr	r3, [r3, #4]
3418e734:	2b01      	cmp	r3, #1
3418e736:	d10c      	bne.n	3418e752 <HAL_XSPIM_Config+0x1a6>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_1 ;
3418e738:	2300      	movs	r3, #0
3418e73a:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_1 ;
3418e73c:	2300      	movs	r3, #0
3418e73e:	623b      	str	r3, [r7, #32]
3418e740:	e007      	b.n	3418e752 <HAL_XSPIM_Config+0x1a6>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
3418e742:	68fb      	ldr	r3, [r7, #12]
3418e744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418e746:	f043 0208 	orr.w	r2, r3, #8
3418e74a:	68fb      	ldr	r3, [r7, #12]
3418e74c:	65da      	str	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
3418e74e:	2301      	movs	r3, #1
3418e750:	e04c      	b.n	3418e7ec <HAL_XSPIM_Config+0x240>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
3418e752:	2300      	movs	r3, #0
3418e754:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418e758:	e02a      	b.n	3418e7b0 <HAL_XSPIM_Config+0x204>
  {
    if (IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort)
3418e75a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
3418e75e:	4613      	mov	r3, r2
3418e760:	005b      	lsls	r3, r3, #1
3418e762:	4413      	add	r3, r2
3418e764:	009b      	lsls	r3, r3, #2
3418e766:	3338      	adds	r3, #56	@ 0x38
3418e768:	443b      	add	r3, r7
3418e76a:	3b24      	subs	r3, #36	@ 0x24
3418e76c:	6819      	ldr	r1, [r3, #0]
3418e76e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418e772:	1c5a      	adds	r2, r3, #1
3418e774:	4613      	mov	r3, r2
3418e776:	005b      	lsls	r3, r3, #1
3418e778:	4413      	add	r3, r2
3418e77a:	009b      	lsls	r3, r3, #2
3418e77c:	3338      	adds	r3, #56	@ 0x38
3418e77e:	443b      	add	r3, r7
3418e780:	3b24      	subs	r3, #36	@ 0x24
3418e782:	681b      	ldr	r3, [r3, #0]
3418e784:	4299      	cmp	r1, r3
3418e786:	d105      	bne.n	3418e794 <HAL_XSPIM_Config+0x1e8>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
3418e788:	4b1d      	ldr	r3, [pc, #116]	@ (3418e800 <HAL_XSPIM_Config+0x254>)
3418e78a:	681b      	ldr	r3, [r3, #0]
3418e78c:	4a1c      	ldr	r2, [pc, #112]	@ (3418e800 <HAL_XSPIM_Config+0x254>)
3418e78e:	f043 0301 	orr.w	r3, r3, #1
3418e792:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
3418e794:	697b      	ldr	r3, [r7, #20]
3418e796:	2b01      	cmp	r3, #1
3418e798:	d105      	bne.n	3418e7a6 <HAL_XSPIM_Config+0x1fa>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
3418e79a:	4b19      	ldr	r3, [pc, #100]	@ (3418e800 <HAL_XSPIM_Config+0x254>)
3418e79c:	681b      	ldr	r3, [r3, #0]
3418e79e:	4a18      	ldr	r2, [pc, #96]	@ (3418e800 <HAL_XSPIM_Config+0x254>)
3418e7a0:	f043 0302 	orr.w	r3, r3, #2
3418e7a4:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
3418e7a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418e7aa:	3301      	adds	r3, #1
3418e7ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418e7b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418e7b4:	2b00      	cmp	r3, #0
3418e7b6:	d0d0      	beq.n	3418e75a <HAL_XSPIM_Config+0x1ae>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
3418e7b8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418e7bc:	f003 0301 	and.w	r3, r3, #1
3418e7c0:	2b00      	cmp	r3, #0
3418e7c2:	d005      	beq.n	3418e7d0 <HAL_XSPIM_Config+0x224>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
3418e7c4:	4b0b      	ldr	r3, [pc, #44]	@ (3418e7f4 <HAL_XSPIM_Config+0x248>)
3418e7c6:	681b      	ldr	r3, [r3, #0]
3418e7c8:	4a0a      	ldr	r2, [pc, #40]	@ (3418e7f4 <HAL_XSPIM_Config+0x248>)
3418e7ca:	f043 0301 	orr.w	r3, r3, #1
3418e7ce:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
3418e7d0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418e7d4:	f003 0302 	and.w	r3, r3, #2
3418e7d8:	2b00      	cmp	r3, #0
3418e7da:	d005      	beq.n	3418e7e8 <HAL_XSPIM_Config+0x23c>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
3418e7dc:	4b06      	ldr	r3, [pc, #24]	@ (3418e7f8 <HAL_XSPIM_Config+0x24c>)
3418e7de:	681b      	ldr	r3, [r3, #0]
3418e7e0:	4a05      	ldr	r2, [pc, #20]	@ (3418e7f8 <HAL_XSPIM_Config+0x24c>)
3418e7e2:	f043 0301 	orr.w	r3, r3, #1
3418e7e6:	6013      	str	r3, [r2, #0]
  }

  return status;
3418e7e8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
3418e7ec:	4618      	mov	r0, r3
3418e7ee:	3738      	adds	r7, #56	@ 0x38
3418e7f0:	46bd      	mov	sp, r7
3418e7f2:	bd80      	pop	{r7, pc}
3418e7f4:	58025000 	.word	0x58025000
3418e7f8:	5802a000 	.word	0x5802a000
3418e7fc:	5802d000 	.word	0x5802d000
3418e800:	5802b400 	.word	0x5802b400

3418e804 <XSPI_DMAAbortCplt>:
  * @brief  DMA XSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void XSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
3418e804:	b580      	push	{r7, lr}
3418e806:	b084      	sub	sp, #16
3418e808:	af00      	add	r7, sp, #0
3418e80a:	6078      	str	r0, [r7, #4]
  XSPI_HandleTypeDef *hxspi = (XSPI_HandleTypeDef *)(hdma->Parent);
3418e80c:	687b      	ldr	r3, [r7, #4]
3418e80e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418e810:	60fb      	str	r3, [r7, #12]
  hxspi->XferCount = 0;
3418e812:	68fb      	ldr	r3, [r7, #12]
3418e814:	2200      	movs	r2, #0
3418e816:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_ABORT)
3418e818:	68fb      	ldr	r3, [r7, #12]
3418e81a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418e81c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418e820:	d122      	bne.n	3418e868 <XSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by XSPI abort */
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
3418e822:	68fb      	ldr	r3, [r7, #12]
3418e824:	681b      	ldr	r3, [r3, #0]
3418e826:	6a1b      	ldr	r3, [r3, #32]
3418e828:	f003 0320 	and.w	r3, r3, #32
3418e82c:	2b00      	cmp	r3, #0
3418e82e:	d014      	beq.n	3418e85a <XSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418e830:	68fb      	ldr	r3, [r7, #12]
3418e832:	681b      	ldr	r3, [r3, #0]
3418e834:	2202      	movs	r2, #2
3418e836:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TC);
3418e838:	68fb      	ldr	r3, [r7, #12]
3418e83a:	681b      	ldr	r3, [r3, #0]
3418e83c:	681a      	ldr	r2, [r3, #0]
3418e83e:	68fb      	ldr	r3, [r7, #12]
3418e840:	681b      	ldr	r3, [r3, #0]
3418e842:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
3418e846:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
3418e848:	68fb      	ldr	r3, [r7, #12]
3418e84a:	681b      	ldr	r3, [r3, #0]
3418e84c:	681a      	ldr	r2, [r3, #0]
3418e84e:	68fb      	ldr	r3, [r7, #12]
3418e850:	681b      	ldr	r3, [r3, #0]
3418e852:	f042 0202 	orr.w	r2, r2, #2
3418e856:	601a      	str	r2, [r3, #0]
    hxspi->ErrorCallback(hxspi);
#else
    HAL_XSPI_ErrorCallback(hxspi);
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
}
3418e858:	e00c      	b.n	3418e874 <XSPI_DMAAbortCplt+0x70>
      hxspi->State = HAL_XSPI_STATE_READY;
3418e85a:	68fb      	ldr	r3, [r7, #12]
3418e85c:	2202      	movs	r2, #2
3418e85e:	659a      	str	r2, [r3, #88]	@ 0x58
      HAL_XSPI_AbortCpltCallback(hxspi);
3418e860:	68f8      	ldr	r0, [r7, #12]
3418e862:	f7ff fd9f 	bl	3418e3a4 <HAL_XSPI_AbortCpltCallback>
}
3418e866:	e005      	b.n	3418e874 <XSPI_DMAAbortCplt+0x70>
    hxspi->State = HAL_XSPI_STATE_READY;
3418e868:	68fb      	ldr	r3, [r7, #12]
3418e86a:	2202      	movs	r2, #2
3418e86c:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_XSPI_ErrorCallback(hxspi);
3418e86e:	68f8      	ldr	r0, [r7, #12]
3418e870:	f7ff fd8e 	bl	3418e390 <HAL_XSPI_ErrorCallback>
}
3418e874:	bf00      	nop
3418e876:	3710      	adds	r7, #16
3418e878:	46bd      	mov	sp, r7
3418e87a:	bd80      	pop	{r7, pc}

3418e87c <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
3418e87c:	b580      	push	{r7, lr}
3418e87e:	b084      	sub	sp, #16
3418e880:	af00      	add	r7, sp, #0
3418e882:	60f8      	str	r0, [r7, #12]
3418e884:	60b9      	str	r1, [r7, #8]
3418e886:	603b      	str	r3, [r7, #0]
3418e888:	4613      	mov	r3, r2
3418e88a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3418e88c:	e019      	b.n	3418e8c2 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3418e88e:	69bb      	ldr	r3, [r7, #24]
3418e890:	f1b3 3fff 	cmp.w	r3, #4294967295
3418e894:	d015      	beq.n	3418e8c2 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418e896:	f7f3 fda7 	bl	341823e8 <HAL_GetTick>
3418e89a:	4602      	mov	r2, r0
3418e89c:	683b      	ldr	r3, [r7, #0]
3418e89e:	1ad3      	subs	r3, r2, r3
3418e8a0:	69ba      	ldr	r2, [r7, #24]
3418e8a2:	429a      	cmp	r2, r3
3418e8a4:	d302      	bcc.n	3418e8ac <XSPI_WaitFlagStateUntilTimeout+0x30>
3418e8a6:	69bb      	ldr	r3, [r7, #24]
3418e8a8:	2b00      	cmp	r3, #0
3418e8aa:	d10a      	bne.n	3418e8c2 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
3418e8ac:	68fb      	ldr	r3, [r7, #12]
3418e8ae:	2202      	movs	r2, #2
3418e8b0:	659a      	str	r2, [r3, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3418e8b2:	68fb      	ldr	r3, [r7, #12]
3418e8b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418e8b6:	f043 0201 	orr.w	r2, r3, #1
3418e8ba:	68fb      	ldr	r3, [r7, #12]
3418e8bc:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
3418e8be:	2303      	movs	r3, #3
3418e8c0:	e00e      	b.n	3418e8e0 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3418e8c2:	68fb      	ldr	r3, [r7, #12]
3418e8c4:	681b      	ldr	r3, [r3, #0]
3418e8c6:	6a1a      	ldr	r2, [r3, #32]
3418e8c8:	68bb      	ldr	r3, [r7, #8]
3418e8ca:	4013      	ands	r3, r2
3418e8cc:	2b00      	cmp	r3, #0
3418e8ce:	bf14      	ite	ne
3418e8d0:	2301      	movne	r3, #1
3418e8d2:	2300      	moveq	r3, #0
3418e8d4:	b2db      	uxtb	r3, r3
3418e8d6:	461a      	mov	r2, r3
3418e8d8:	79fb      	ldrb	r3, [r7, #7]
3418e8da:	429a      	cmp	r2, r3
3418e8dc:	d1d7      	bne.n	3418e88e <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
3418e8de:	2300      	movs	r3, #0
}
3418e8e0:	4618      	mov	r0, r3
3418e8e2:	3710      	adds	r7, #16
3418e8e4:	46bd      	mov	sp, r7
3418e8e6:	bd80      	pop	{r7, pc}

3418e8e8 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd)
{
3418e8e8:	b480      	push	{r7}
3418e8ea:	b089      	sub	sp, #36	@ 0x24
3418e8ec:	af00      	add	r7, sp, #0
3418e8ee:	6078      	str	r0, [r7, #4]
3418e8f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
3418e8f2:	2300      	movs	r3, #0
3418e8f4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3418e8f6:	687b      	ldr	r3, [r7, #4]
3418e8f8:	681b      	ldr	r3, [r3, #0]
3418e8fa:	681a      	ldr	r2, [r3, #0]
3418e8fc:	687b      	ldr	r3, [r7, #4]
3418e8fe:	681b      	ldr	r3, [r3, #0]
3418e900:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418e904:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3418e906:	687b      	ldr	r3, [r7, #4]
3418e908:	689b      	ldr	r3, [r3, #8]
3418e90a:	2b00      	cmp	r3, #0
3418e90c:	d10a      	bne.n	3418e924 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3418e90e:	687b      	ldr	r3, [r7, #4]
3418e910:	681b      	ldr	r3, [r3, #0]
3418e912:	681b      	ldr	r3, [r3, #0]
3418e914:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
3418e918:	683b      	ldr	r3, [r7, #0]
3418e91a:	685a      	ldr	r2, [r3, #4]
3418e91c:	687b      	ldr	r3, [r7, #4]
3418e91e:	681b      	ldr	r3, [r3, #0]
3418e920:	430a      	orrs	r2, r1
3418e922:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3418e924:	683b      	ldr	r3, [r7, #0]
3418e926:	681b      	ldr	r3, [r3, #0]
3418e928:	2b02      	cmp	r3, #2
3418e92a:	d114      	bne.n	3418e956 <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3418e92c:	687b      	ldr	r3, [r7, #4]
3418e92e:	681b      	ldr	r3, [r3, #0]
3418e930:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
3418e934:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
3418e936:	687b      	ldr	r3, [r7, #4]
3418e938:	681b      	ldr	r3, [r3, #0]
3418e93a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
3418e93e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
3418e940:	687b      	ldr	r3, [r7, #4]
3418e942:	681b      	ldr	r3, [r3, #0]
3418e944:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
3418e948:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
3418e94a:	687b      	ldr	r3, [r7, #4]
3418e94c:	681b      	ldr	r3, [r3, #0]
3418e94e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
3418e952:	60fb      	str	r3, [r7, #12]
3418e954:	e02c      	b.n	3418e9b0 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3418e956:	683b      	ldr	r3, [r7, #0]
3418e958:	681b      	ldr	r3, [r3, #0]
3418e95a:	2b03      	cmp	r3, #3
3418e95c:	d114      	bne.n	3418e988 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
3418e95e:	687b      	ldr	r3, [r7, #4]
3418e960:	681b      	ldr	r3, [r3, #0]
3418e962:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
3418e966:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
3418e968:	687b      	ldr	r3, [r7, #4]
3418e96a:	681b      	ldr	r3, [r3, #0]
3418e96c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
3418e970:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
3418e972:	687b      	ldr	r3, [r7, #4]
3418e974:	681b      	ldr	r3, [r3, #0]
3418e976:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
3418e97a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
3418e97c:	687b      	ldr	r3, [r7, #4]
3418e97e:	681b      	ldr	r3, [r3, #0]
3418e980:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
3418e984:	60fb      	str	r3, [r7, #12]
3418e986:	e013      	b.n	3418e9b0 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
3418e988:	687b      	ldr	r3, [r7, #4]
3418e98a:	681b      	ldr	r3, [r3, #0]
3418e98c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418e990:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
3418e992:	687b      	ldr	r3, [r7, #4]
3418e994:	681b      	ldr	r3, [r3, #0]
3418e996:	f503 7384 	add.w	r3, r3, #264	@ 0x108
3418e99a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
3418e99c:	687b      	ldr	r3, [r7, #4]
3418e99e:	681b      	ldr	r3, [r3, #0]
3418e9a0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
3418e9a4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
3418e9a6:	687b      	ldr	r3, [r7, #4]
3418e9a8:	681b      	ldr	r3, [r3, #0]
3418e9aa:	f503 7390 	add.w	r3, r3, #288	@ 0x120
3418e9ae:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3418e9b0:	683b      	ldr	r3, [r7, #0]
3418e9b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418e9b4:	69bb      	ldr	r3, [r7, #24]
3418e9b6:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3418e9b8:	683b      	ldr	r3, [r7, #0]
3418e9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418e9bc:	2b00      	cmp	r3, #0
3418e9be:	d012      	beq.n	3418e9e6 <XSPI_ConfigCmd+0xfe>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3418e9c0:	683b      	ldr	r3, [r7, #0]
3418e9c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418e9c4:	68fb      	ldr	r3, [r7, #12]
3418e9c6:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3418e9c8:	69bb      	ldr	r3, [r7, #24]
3418e9ca:	681b      	ldr	r3, [r3, #0]
3418e9cc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
3418e9d0:	683b      	ldr	r3, [r7, #0]
3418e9d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3418e9d4:	683b      	ldr	r3, [r7, #0]
3418e9d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418e9d8:	4319      	orrs	r1, r3
3418e9da:	683b      	ldr	r3, [r7, #0]
3418e9dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418e9de:	430b      	orrs	r3, r1
3418e9e0:	431a      	orrs	r2, r3
3418e9e2:	69bb      	ldr	r3, [r7, #24]
3418e9e4:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3418e9e6:	697b      	ldr	r3, [r7, #20]
3418e9e8:	681b      	ldr	r3, [r3, #0]
3418e9ea:	f023 021f 	bic.w	r2, r3, #31
3418e9ee:	683b      	ldr	r3, [r7, #0]
3418e9f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418e9f2:	431a      	orrs	r2, r3
3418e9f4:	697b      	ldr	r3, [r7, #20]
3418e9f6:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418e9f8:	683b      	ldr	r3, [r7, #0]
3418e9fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418e9fc:	2b00      	cmp	r3, #0
3418e9fe:	d009      	beq.n	3418ea14 <XSPI_ConfigCmd+0x12c>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418ea00:	683b      	ldr	r3, [r7, #0]
3418ea02:	681b      	ldr	r3, [r3, #0]
3418ea04:	2b00      	cmp	r3, #0
3418ea06:	d105      	bne.n	3418ea14 <XSPI_ConfigCmd+0x12c>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3418ea08:	683b      	ldr	r3, [r7, #0]
3418ea0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3418ea0c:	687b      	ldr	r3, [r7, #4]
3418ea0e:	681b      	ldr	r3, [r3, #0]
3418ea10:	3a01      	subs	r2, #1
3418ea12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418ea14:	683b      	ldr	r3, [r7, #0]
3418ea16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418ea18:	2b00      	cmp	r3, #0
3418ea1a:	d01e      	beq.n	3418ea5a <XSPI_ConfigCmd+0x172>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3418ea1c:	683b      	ldr	r3, [r7, #0]
3418ea1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418ea20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418ea24:	d10a      	bne.n	3418ea3c <XSPI_ConfigCmd+0x154>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3418ea26:	687b      	ldr	r3, [r7, #4]
3418ea28:	681b      	ldr	r3, [r3, #0]
3418ea2a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418ea2e:	687b      	ldr	r3, [r7, #4]
3418ea30:	681b      	ldr	r3, [r3, #0]
3418ea32:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
3418ea36:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
3418ea3a:	e00e      	b.n	3418ea5a <XSPI_ConfigCmd+0x172>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3418ea3c:	687b      	ldr	r3, [r7, #4]
3418ea3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418ea40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418ea44:	d109      	bne.n	3418ea5a <XSPI_ConfigCmd+0x172>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3418ea46:	687b      	ldr	r3, [r7, #4]
3418ea48:	681b      	ldr	r3, [r3, #0]
3418ea4a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418ea4e:	687b      	ldr	r3, [r7, #4]
3418ea50:	681b      	ldr	r3, [r3, #0]
3418ea52:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3418ea56:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3418ea5a:	683b      	ldr	r3, [r7, #0]
3418ea5c:	68db      	ldr	r3, [r3, #12]
3418ea5e:	2b00      	cmp	r3, #0
3418ea60:	f000 808f 	beq.w	3418eb82 <XSPI_ConfigCmd+0x29a>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3418ea64:	683b      	ldr	r3, [r7, #0]
3418ea66:	69db      	ldr	r3, [r3, #28]
3418ea68:	2b00      	cmp	r3, #0
3418ea6a:	d050      	beq.n	3418eb0e <XSPI_ConfigCmd+0x226>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418ea6c:	683b      	ldr	r3, [r7, #0]
3418ea6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418ea70:	2b00      	cmp	r3, #0
3418ea72:	d01e      	beq.n	3418eab2 <XSPI_ConfigCmd+0x1ca>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3418ea74:	69bb      	ldr	r3, [r7, #24]
3418ea76:	681a      	ldr	r2, [r3, #0]
3418ea78:	4b69      	ldr	r3, [pc, #420]	@ (3418ec20 <XSPI_ConfigCmd+0x338>)
3418ea7a:	4013      	ands	r3, r2
3418ea7c:	683a      	ldr	r2, [r7, #0]
3418ea7e:	68d1      	ldr	r1, [r2, #12]
3418ea80:	683a      	ldr	r2, [r7, #0]
3418ea82:	6952      	ldr	r2, [r2, #20]
3418ea84:	4311      	orrs	r1, r2
3418ea86:	683a      	ldr	r2, [r7, #0]
3418ea88:	6912      	ldr	r2, [r2, #16]
3418ea8a:	4311      	orrs	r1, r2
3418ea8c:	683a      	ldr	r2, [r7, #0]
3418ea8e:	69d2      	ldr	r2, [r2, #28]
3418ea90:	4311      	orrs	r1, r2
3418ea92:	683a      	ldr	r2, [r7, #0]
3418ea94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418ea96:	4311      	orrs	r1, r2
3418ea98:	683a      	ldr	r2, [r7, #0]
3418ea9a:	6a12      	ldr	r2, [r2, #32]
3418ea9c:	4311      	orrs	r1, r2
3418ea9e:	683a      	ldr	r2, [r7, #0]
3418eaa0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418eaa2:	4311      	orrs	r1, r2
3418eaa4:	683a      	ldr	r2, [r7, #0]
3418eaa6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418eaa8:	430a      	orrs	r2, r1
3418eaaa:	431a      	orrs	r2, r3
3418eaac:	69bb      	ldr	r3, [r7, #24]
3418eaae:	601a      	str	r2, [r3, #0]
3418eab0:	e023      	b.n	3418eafa <XSPI_ConfigCmd+0x212>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3418eab2:	69bb      	ldr	r3, [r7, #24]
3418eab4:	681b      	ldr	r3, [r3, #0]
3418eab6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3418eaba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3418eabe:	683a      	ldr	r2, [r7, #0]
3418eac0:	68d1      	ldr	r1, [r2, #12]
3418eac2:	683a      	ldr	r2, [r7, #0]
3418eac4:	6952      	ldr	r2, [r2, #20]
3418eac6:	4311      	orrs	r1, r2
3418eac8:	683a      	ldr	r2, [r7, #0]
3418eaca:	6912      	ldr	r2, [r2, #16]
3418eacc:	4311      	orrs	r1, r2
3418eace:	683a      	ldr	r2, [r7, #0]
3418ead0:	69d2      	ldr	r2, [r2, #28]
3418ead2:	4311      	orrs	r1, r2
3418ead4:	683a      	ldr	r2, [r7, #0]
3418ead6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418ead8:	4311      	orrs	r1, r2
3418eada:	683a      	ldr	r2, [r7, #0]
3418eadc:	6a12      	ldr	r2, [r2, #32]
3418eade:	430a      	orrs	r2, r1
3418eae0:	431a      	orrs	r2, r3
3418eae2:	69bb      	ldr	r3, [r7, #24]
3418eae4:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* DDTR bit should be activated */
        if (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE)
3418eae6:	683b      	ldr	r3, [r7, #0]
3418eae8:	695b      	ldr	r3, [r3, #20]
3418eaea:	2b08      	cmp	r3, #8
3418eaec:	d105      	bne.n	3418eafa <XSPI_ConfigCmd+0x212>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3418eaee:	69bb      	ldr	r3, [r7, #24]
3418eaf0:	681b      	ldr	r3, [r3, #0]
3418eaf2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418eaf6:	69bb      	ldr	r3, [r7, #24]
3418eaf8:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3418eafa:	683b      	ldr	r3, [r7, #0]
3418eafc:	689a      	ldr	r2, [r3, #8]
3418eafe:	693b      	ldr	r3, [r7, #16]
3418eb00:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
3418eb02:	687b      	ldr	r3, [r7, #4]
3418eb04:	681b      	ldr	r3, [r3, #0]
3418eb06:	683a      	ldr	r2, [r7, #0]
3418eb08:	6992      	ldr	r2, [r2, #24]
3418eb0a:	649a      	str	r2, [r3, #72]	@ 0x48
3418eb0c:	e073      	b.n	3418ebf6 <XSPI_ConfigCmd+0x30e>
        assert_param(IS_XSPI_PROG_ADDR(hxspi->Instance->AR, pCmd->Address));
      }
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418eb0e:	683b      	ldr	r3, [r7, #0]
3418eb10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418eb12:	2b00      	cmp	r3, #0
3418eb14:	d017      	beq.n	3418eb46 <XSPI_ConfigCmd+0x25e>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3418eb16:	69bb      	ldr	r3, [r7, #24]
3418eb18:	681b      	ldr	r3, [r3, #0]
3418eb1a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
3418eb1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3418eb22:	683a      	ldr	r2, [r7, #0]
3418eb24:	68d1      	ldr	r1, [r2, #12]
3418eb26:	683a      	ldr	r2, [r7, #0]
3418eb28:	6952      	ldr	r2, [r2, #20]
3418eb2a:	4311      	orrs	r1, r2
3418eb2c:	683a      	ldr	r2, [r7, #0]
3418eb2e:	6912      	ldr	r2, [r2, #16]
3418eb30:	4311      	orrs	r1, r2
3418eb32:	683a      	ldr	r2, [r7, #0]
3418eb34:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418eb36:	4311      	orrs	r1, r2
3418eb38:	683a      	ldr	r2, [r7, #0]
3418eb3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418eb3c:	430a      	orrs	r2, r1
3418eb3e:	431a      	orrs	r2, r3
3418eb40:	69bb      	ldr	r3, [r7, #24]
3418eb42:	601a      	str	r2, [r3, #0]
3418eb44:	e018      	b.n	3418eb78 <XSPI_ConfigCmd+0x290>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3418eb46:	69bb      	ldr	r3, [r7, #24]
3418eb48:	681b      	ldr	r3, [r3, #0]
3418eb4a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
3418eb4e:	683b      	ldr	r3, [r7, #0]
3418eb50:	68d9      	ldr	r1, [r3, #12]
3418eb52:	683b      	ldr	r3, [r7, #0]
3418eb54:	695b      	ldr	r3, [r3, #20]
3418eb56:	4319      	orrs	r1, r3
3418eb58:	683b      	ldr	r3, [r7, #0]
3418eb5a:	691b      	ldr	r3, [r3, #16]
3418eb5c:	430b      	orrs	r3, r1
3418eb5e:	431a      	orrs	r2, r3
3418eb60:	69bb      	ldr	r3, [r7, #24]
3418eb62:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* DDTR bit should be activated */
        if (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE)
3418eb64:	683b      	ldr	r3, [r7, #0]
3418eb66:	695b      	ldr	r3, [r3, #20]
3418eb68:	2b08      	cmp	r3, #8
3418eb6a:	d105      	bne.n	3418eb78 <XSPI_ConfigCmd+0x290>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3418eb6c:	69bb      	ldr	r3, [r7, #24]
3418eb6e:	681b      	ldr	r3, [r3, #0]
3418eb70:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418eb74:	69bb      	ldr	r3, [r7, #24]
3418eb76:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3418eb78:	683b      	ldr	r3, [r7, #0]
3418eb7a:	689a      	ldr	r2, [r3, #8]
3418eb7c:	693b      	ldr	r3, [r7, #16]
3418eb7e:	601a      	str	r2, [r3, #0]
3418eb80:	e039      	b.n	3418ebf6 <XSPI_ConfigCmd+0x30e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3418eb82:	683b      	ldr	r3, [r7, #0]
3418eb84:	69db      	ldr	r3, [r3, #28]
3418eb86:	2b00      	cmp	r3, #0
3418eb88:	d030      	beq.n	3418ebec <XSPI_ConfigCmd+0x304>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418eb8a:	683b      	ldr	r3, [r7, #0]
3418eb8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418eb8e:	2b00      	cmp	r3, #0
3418eb90:	d017      	beq.n	3418ebc2 <XSPI_ConfigCmd+0x2da>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3418eb92:	69bb      	ldr	r3, [r7, #24]
3418eb94:	681b      	ldr	r3, [r3, #0]
3418eb96:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
3418eb9a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3418eb9e:	683a      	ldr	r2, [r7, #0]
3418eba0:	69d1      	ldr	r1, [r2, #28]
3418eba2:	683a      	ldr	r2, [r7, #0]
3418eba4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418eba6:	4311      	orrs	r1, r2
3418eba8:	683a      	ldr	r2, [r7, #0]
3418ebaa:	6a12      	ldr	r2, [r2, #32]
3418ebac:	4311      	orrs	r1, r2
3418ebae:	683a      	ldr	r2, [r7, #0]
3418ebb0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418ebb2:	4311      	orrs	r1, r2
3418ebb4:	683a      	ldr	r2, [r7, #0]
3418ebb6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418ebb8:	430a      	orrs	r2, r1
3418ebba:	431a      	orrs	r2, r3
3418ebbc:	69bb      	ldr	r3, [r7, #24]
3418ebbe:	601a      	str	r2, [r3, #0]
3418ebc0:	e00e      	b.n	3418ebe0 <XSPI_ConfigCmd+0x2f8>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3418ebc2:	69bb      	ldr	r3, [r7, #24]
3418ebc4:	681b      	ldr	r3, [r3, #0]
3418ebc6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
3418ebca:	683b      	ldr	r3, [r7, #0]
3418ebcc:	69d9      	ldr	r1, [r3, #28]
3418ebce:	683b      	ldr	r3, [r7, #0]
3418ebd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ebd2:	4319      	orrs	r1, r3
3418ebd4:	683b      	ldr	r3, [r7, #0]
3418ebd6:	6a1b      	ldr	r3, [r3, #32]
3418ebd8:	430b      	orrs	r3, r1
3418ebda:	431a      	orrs	r2, r3
3418ebdc:	69bb      	ldr	r3, [r7, #24]
3418ebde:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3418ebe0:	687b      	ldr	r3, [r7, #4]
3418ebe2:	681b      	ldr	r3, [r3, #0]
3418ebe4:	683a      	ldr	r2, [r7, #0]
3418ebe6:	6992      	ldr	r2, [r2, #24]
3418ebe8:	649a      	str	r2, [r3, #72]	@ 0x48
3418ebea:	e004      	b.n	3418ebf6 <XSPI_ConfigCmd+0x30e>
      }
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
3418ebec:	2301      	movs	r3, #1
3418ebee:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418ebf0:	687b      	ldr	r3, [r7, #4]
3418ebf2:	2208      	movs	r2, #8
3418ebf4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418ebf6:	683b      	ldr	r3, [r7, #0]
3418ebf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418ebfa:	2b00      	cmp	r3, #0
3418ebfc:	d009      	beq.n	3418ec12 <XSPI_ConfigCmd+0x32a>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418ebfe:	683b      	ldr	r3, [r7, #0]
3418ec00:	681b      	ldr	r3, [r3, #0]
3418ec02:	2b00      	cmp	r3, #0
3418ec04:	d105      	bne.n	3418ec12 <XSPI_ConfigCmd+0x32a>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3418ec06:	683b      	ldr	r3, [r7, #0]
3418ec08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3418ec0a:	687b      	ldr	r3, [r7, #4]
3418ec0c:	681b      	ldr	r3, [r3, #0]
3418ec0e:	3a01      	subs	r2, #1
3418ec10:	641a      	str	r2, [r3, #64]	@ 0x40
      /* Verify if programmed data fit with requirement of Reference Manual 28.5 chapter */
      assert_param(IS_XSPI_PROG_DATA(hxspi->Instance->DLR, (pCmd->DataLength - 1U)));
    }
  }

  return status;
3418ec12:	7ffb      	ldrb	r3, [r7, #31]
}
3418ec14:	4618      	mov	r0, r3
3418ec16:	3724      	adds	r7, #36	@ 0x24
3418ec18:	46bd      	mov	sp, r7
3418ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ec1e:	4770      	bx	lr
3418ec20:	f0ffc0c0 	.word	0xf0ffc0c0

3418ec24 <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *pCfg)
{
3418ec24:	b480      	push	{r7}
3418ec26:	b085      	sub	sp, #20
3418ec28:	af00      	add	r7, sp, #0
3418ec2a:	4603      	mov	r3, r0
3418ec2c:	6039      	str	r1, [r7, #0]
3418ec2e:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
3418ec30:	79fb      	ldrb	r3, [r7, #7]
3418ec32:	2b01      	cmp	r3, #1
3418ec34:	d124      	bne.n	3418ec80 <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
3418ec36:	4b2c      	ldr	r3, [pc, #176]	@ (3418ece8 <XSPIM_GetConfig+0xc4>)
3418ec38:	681b      	ldr	r3, [r3, #0]
3418ec3a:	f003 0302 	and.w	r3, r3, #2
3418ec3e:	2b00      	cmp	r3, #0
3418ec40:	d103      	bne.n	3418ec4a <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
3418ec42:	683b      	ldr	r3, [r7, #0]
3418ec44:	2200      	movs	r2, #0
3418ec46:	605a      	str	r2, [r3, #4]
3418ec48:	e002      	b.n	3418ec50 <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
3418ec4a:	683b      	ldr	r3, [r7, #0]
3418ec4c:	2201      	movs	r2, #1
3418ec4e:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
3418ec50:	4b25      	ldr	r3, [pc, #148]	@ (3418ece8 <XSPIM_GetConfig+0xc4>)
3418ec52:	681b      	ldr	r3, [r3, #0]
3418ec54:	f003 0310 	and.w	r3, r3, #16
3418ec58:	2b10      	cmp	r3, #16
3418ec5a:	d003      	beq.n	3418ec64 <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
3418ec5c:	683b      	ldr	r3, [r7, #0]
3418ec5e:	2200      	movs	r2, #0
3418ec60:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
3418ec62:	e03a      	b.n	3418ecda <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
3418ec64:	4b20      	ldr	r3, [pc, #128]	@ (3418ece8 <XSPIM_GetConfig+0xc4>)
3418ec66:	681b      	ldr	r3, [r3, #0]
3418ec68:	f003 0320 	and.w	r3, r3, #32
3418ec6c:	2b20      	cmp	r3, #32
3418ec6e:	d103      	bne.n	3418ec78 <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
3418ec70:	683b      	ldr	r3, [r7, #0]
3418ec72:	2270      	movs	r2, #112	@ 0x70
3418ec74:	601a      	str	r2, [r3, #0]
}
3418ec76:	e030      	b.n	3418ecda <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418ec78:	683b      	ldr	r3, [r7, #0]
3418ec7a:	2210      	movs	r2, #16
3418ec7c:	601a      	str	r2, [r3, #0]
}
3418ec7e:	e02c      	b.n	3418ecda <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
3418ec80:	4b19      	ldr	r3, [pc, #100]	@ (3418ece8 <XSPIM_GetConfig+0xc4>)
3418ec82:	681b      	ldr	r3, [r3, #0]
3418ec84:	f003 0301 	and.w	r3, r3, #1
3418ec88:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
3418ec8a:	4b17      	ldr	r3, [pc, #92]	@ (3418ece8 <XSPIM_GetConfig+0xc4>)
3418ec8c:	681b      	ldr	r3, [r3, #0]
3418ec8e:	085b      	lsrs	r3, r3, #1
3418ec90:	f003 0301 	and.w	r3, r3, #1
3418ec94:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
3418ec96:	68fa      	ldr	r2, [r7, #12]
3418ec98:	68bb      	ldr	r3, [r7, #8]
3418ec9a:	429a      	cmp	r2, r3
3418ec9c:	d003      	beq.n	3418eca6 <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
3418ec9e:	683b      	ldr	r3, [r7, #0]
3418eca0:	2200      	movs	r2, #0
3418eca2:	605a      	str	r2, [r3, #4]
3418eca4:	e002      	b.n	3418ecac <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
3418eca6:	683b      	ldr	r3, [r7, #0]
3418eca8:	2201      	movs	r2, #1
3418ecaa:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
3418ecac:	4b0e      	ldr	r3, [pc, #56]	@ (3418ece8 <XSPIM_GetConfig+0xc4>)
3418ecae:	681b      	ldr	r3, [r3, #0]
3418ecb0:	f003 0310 	and.w	r3, r3, #16
3418ecb4:	2b10      	cmp	r3, #16
3418ecb6:	d003      	beq.n	3418ecc0 <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
3418ecb8:	683b      	ldr	r3, [r7, #0]
3418ecba:	2200      	movs	r2, #0
3418ecbc:	601a      	str	r2, [r3, #0]
}
3418ecbe:	e00c      	b.n	3418ecda <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
3418ecc0:	4b09      	ldr	r3, [pc, #36]	@ (3418ece8 <XSPIM_GetConfig+0xc4>)
3418ecc2:	681b      	ldr	r3, [r3, #0]
3418ecc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418ecc8:	2b40      	cmp	r3, #64	@ 0x40
3418ecca:	d103      	bne.n	3418ecd4 <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
3418eccc:	683b      	ldr	r3, [r7, #0]
3418ecce:	2270      	movs	r2, #112	@ 0x70
3418ecd0:	601a      	str	r2, [r3, #0]
}
3418ecd2:	e002      	b.n	3418ecda <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418ecd4:	683b      	ldr	r3, [r7, #0]
3418ecd6:	2210      	movs	r2, #16
3418ecd8:	601a      	str	r2, [r3, #0]
}
3418ecda:	bf00      	nop
3418ecdc:	3714      	adds	r7, #20
3418ecde:	46bd      	mov	sp, r7
3418ece0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ece4:	4770      	bx	lr
3418ece6:	bf00      	nop
3418ece8:	5802b400 	.word	0x5802b400

3418ecec <BOOT_Application>:
  *  @addtogroup BOOT_XIP_Exported_Functions Boot XIP exported functions
  * @{
  */

BOOTStatus_TypeDef BOOT_Application(void)
{
3418ecec:	b580      	push	{r7, lr}
3418ecee:	b082      	sub	sp, #8
3418ecf0:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr;

  /* mount the memory */
  retr = MapMemory();
3418ecf2:	f000 f80e 	bl	3418ed12 <MapMemory>
3418ecf6:	4603      	mov	r3, r0
3418ecf8:	71fb      	strb	r3, [r7, #7]
  if (BOOT_OK == retr)
3418ecfa:	79fb      	ldrb	r3, [r7, #7]
3418ecfc:	2b00      	cmp	r3, #0
3418ecfe:	d103      	bne.n	3418ed08 <BOOT_Application+0x1c>
  {
    /* jump on the application */
    retr = JumpToApplication();
3418ed00:	f000 f836 	bl	3418ed70 <JumpToApplication>
3418ed04:	4603      	mov	r3, r0
3418ed06:	71fb      	strb	r3, [r7, #7]
  }
  return retr;
3418ed08:	79fb      	ldrb	r3, [r7, #7]
}
3418ed0a:	4618      	mov	r0, r3
3418ed0c:	3708      	adds	r7, #8
3418ed0e:	46bd      	mov	sp, r7
3418ed10:	bd80      	pop	{r7, pc}

3418ed12 <MapMemory>:
/**
  * @brief  this function maps the memory
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef MapMemory(void)
{
3418ed12:	b580      	push	{r7, lr}
3418ed14:	b082      	sub	sp, #8
3418ed16:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
3418ed18:	2300      	movs	r3, #0
3418ed1a:	71fb      	strb	r3, [r7, #7]

  /* Map all the memory */
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
3418ed1c:	2300      	movs	r3, #0
3418ed1e:	71bb      	strb	r3, [r7, #6]
3418ed20:	e01d      	b.n	3418ed5e <MapMemory+0x4c>
  {
    switch(EXTMEM_MemoryMappedMode(index, EXTMEM_ENABLE))
3418ed22:	79bb      	ldrb	r3, [r7, #6]
3418ed24:	2100      	movs	r1, #0
3418ed26:	4618      	mov	r0, r3
3418ed28:	f000 f942 	bl	3418efb0 <EXTMEM_MemoryMappedMode>
3418ed2c:	4603      	mov	r3, r0
3418ed2e:	f1b3 3fff 	cmp.w	r3, #4294967295
3418ed32:	d002      	beq.n	3418ed3a <MapMemory+0x28>
3418ed34:	2b00      	cmp	r3, #0
3418ed36:	d00e      	beq.n	3418ed56 <MapMemory+0x44>
3418ed38:	e00a      	b.n	3418ed50 <MapMemory+0x3e>
    {
    case EXTMEM_ERROR_NOTSUPPORTED :
      if (EXTMEM_MEMORY_BOOTXIP ==  index)
3418ed3a:	79bb      	ldrb	r3, [r7, #6]
3418ed3c:	2b00      	cmp	r3, #0
3418ed3e:	d102      	bne.n	3418ed46 <MapMemory+0x34>
      {
        retr = BOOT_ERROR_INCOMPATIBLEMEMORY;
3418ed40:	2304      	movs	r3, #4
3418ed42:	71fb      	strb	r3, [r7, #7]
      else
      {
        /* We considers the memory will be not used any more */
        EXTMEM_DeInit(index);
      }
      break;
3418ed44:	e008      	b.n	3418ed58 <MapMemory+0x46>
        EXTMEM_DeInit(index);
3418ed46:	79bb      	ldrb	r3, [r7, #6]
3418ed48:	4618      	mov	r0, r3
3418ed4a:	f000 f905 	bl	3418ef58 <EXTMEM_DeInit>
      break;
3418ed4e:	e003      	b.n	3418ed58 <MapMemory+0x46>
    case EXTMEM_OK:
      break;
    default :
      retr = BOOT_ERROR_MAPPEDMODEFAIL;
3418ed50:	2303      	movs	r3, #3
3418ed52:	71fb      	strb	r3, [r7, #7]
      break;
3418ed54:	e000      	b.n	3418ed58 <MapMemory+0x46>
      break;
3418ed56:	bf00      	nop
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
3418ed58:	79bb      	ldrb	r3, [r7, #6]
3418ed5a:	3301      	adds	r3, #1
3418ed5c:	71bb      	strb	r3, [r7, #6]
3418ed5e:	79bb      	ldrb	r3, [r7, #6]
3418ed60:	2b00      	cmp	r3, #0
3418ed62:	d0de      	beq.n	3418ed22 <MapMemory+0x10>
    }
  }
  return retr;
3418ed64:	79fb      	ldrb	r3, [r7, #7]
}
3418ed66:	4618      	mov	r0, r3
3418ed68:	3708      	adds	r7, #8
3418ed6a:	46bd      	mov	sp, r7
3418ed6c:	bd80      	pop	{r7, pc}
	...

3418ed70 <JumpToApplication>:
/**
  * @brief  This function jumps to the application through its vector table
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef JumpToApplication(void)
{
3418ed70:	b590      	push	{r4, r7, lr}
3418ed72:	b091      	sub	sp, #68	@ 0x44
3418ed74:	af00      	add	r7, sp, #0
3418ed76:	f107 0340 	add.w	r3, r7, #64	@ 0x40
3418ed7a:	3b40      	subs	r3, #64	@ 0x40
3418ed7c:	331f      	adds	r3, #31
3418ed7e:	095b      	lsrs	r3, r3, #5
3418ed80:	015c      	lsls	r4, r3, #5
  uint32_t primask_bit;
  typedef  void (*pFunction)(void);
  static pFunction JumpToApp;
  uint32_t Application_vector;

  if (EXTMEM_OK != EXTMEM_GetMapAddress(EXTMEM_MEMORY_BOOTXIP, &Application_vector))
3418ed82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
3418ed86:	4619      	mov	r1, r3
3418ed88:	2000      	movs	r0, #0
3418ed8a:	f000 f95f 	bl	3418f04c <EXTMEM_GetMapAddress>
3418ed8e:	4603      	mov	r3, r0
3418ed90:	2b00      	cmp	r3, #0
3418ed92:	d001      	beq.n	3418ed98 <JumpToApplication+0x28>
  {
      return BOOT_ERROR_INCOMPATIBLEMEMORY;
3418ed94:	2304      	movs	r3, #4
3418ed96:	e095      	b.n	3418eec4 <JumpToApplication+0x154>
  }

  /* Suspend SysTick */
  HAL_SuspendTick();
3418ed98:	f7f3 fb56 	bl	34182448 <HAL_SuspendTick>

#if defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  /* if I-Cache is enabled, disable I-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_IC_Msk)
3418ed9c:	4b4b      	ldr	r3, [pc, #300]	@ (3418eecc <JumpToApplication+0x15c>)
3418ed9e:	695b      	ldr	r3, [r3, #20]
3418eda0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418eda4:	2b00      	cmp	r3, #0
3418eda6:	d016      	beq.n	3418edd6 <JumpToApplication+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
3418eda8:	f3bf 8f4f 	dsb	sy
}
3418edac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418edae:	f3bf 8f6f 	isb	sy
}
3418edb2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
3418edb4:	4b45      	ldr	r3, [pc, #276]	@ (3418eecc <JumpToApplication+0x15c>)
3418edb6:	695b      	ldr	r3, [r3, #20]
3418edb8:	4a44      	ldr	r2, [pc, #272]	@ (3418eecc <JumpToApplication+0x15c>)
3418edba:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3418edbe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
3418edc0:	4b42      	ldr	r3, [pc, #264]	@ (3418eecc <JumpToApplication+0x15c>)
3418edc2:	2200      	movs	r2, #0
3418edc4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
3418edc8:	f3bf 8f4f 	dsb	sy
}
3418edcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418edce:	f3bf 8f6f 	isb	sy
}
3418edd2:	bf00      	nop
}
3418edd4:	bf00      	nop
  }
#endif /* defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U) */

#if defined(__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
  /* if D-Cache is enabled, disable D-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_DC_Msk)
3418edd6:	4b3d      	ldr	r3, [pc, #244]	@ (3418eecc <JumpToApplication+0x15c>)
3418edd8:	695b      	ldr	r3, [r3, #20]
3418edda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418edde:	2b00      	cmp	r3, #0
3418ede0:	d043      	beq.n	3418ee6a <JumpToApplication+0xfa>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
3418ede2:	4b3a      	ldr	r3, [pc, #232]	@ (3418eecc <JumpToApplication+0x15c>)
3418ede4:	2200      	movs	r2, #0
3418ede6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3418edea:	f3bf 8f4f 	dsb	sy
}
3418edee:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
3418edf0:	4b36      	ldr	r3, [pc, #216]	@ (3418eecc <JumpToApplication+0x15c>)
3418edf2:	695b      	ldr	r3, [r3, #20]
3418edf4:	4a35      	ldr	r2, [pc, #212]	@ (3418eecc <JumpToApplication+0x15c>)
3418edf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418edfa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3418edfc:	f3bf 8f4f 	dsb	sy
}
3418ee00:	bf00      	nop
      SCB->DCCIMVAC = (uint32_t)&locals;
3418ee02:	4b32      	ldr	r3, [pc, #200]	@ (3418eecc <JumpToApplication+0x15c>)
3418ee04:	4622      	mov	r2, r4
3418ee06:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270
  __ASM volatile ("dsb 0xF":::"memory");
3418ee0a:	f3bf 8f4f 	dsb	sy
}
3418ee0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418ee10:	f3bf 8f6f 	isb	sy
}
3418ee14:	bf00      	nop
    locals.ccsidr = SCB->CCSIDR;
3418ee16:	4b2d      	ldr	r3, [pc, #180]	@ (3418eecc <JumpToApplication+0x15c>)
3418ee18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418ee1c:	6023      	str	r3, [r4, #0]
    locals.sets = (uint32_t)(CCSIDR_SETS(locals.ccsidr));
3418ee1e:	6823      	ldr	r3, [r4, #0]
3418ee20:	0b5b      	lsrs	r3, r3, #13
3418ee22:	f3c3 030e 	ubfx	r3, r3, #0, #15
3418ee26:	6063      	str	r3, [r4, #4]
      locals.ways = (uint32_t)(CCSIDR_WAYS(locals.ccsidr));
3418ee28:	6823      	ldr	r3, [r4, #0]
3418ee2a:	08db      	lsrs	r3, r3, #3
3418ee2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
3418ee30:	60a3      	str	r3, [r4, #8]
        SCB->DCCISW = (((locals.sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3418ee32:	6863      	ldr	r3, [r4, #4]
3418ee34:	015a      	lsls	r2, r3, #5
3418ee36:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
3418ee3a:	4013      	ands	r3, r2
                       ((locals.ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
3418ee3c:	68a2      	ldr	r2, [r4, #8]
3418ee3e:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((locals.sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3418ee40:	4922      	ldr	r1, [pc, #136]	@ (3418eecc <JumpToApplication+0x15c>)
3418ee42:	4313      	orrs	r3, r2
3418ee44:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (locals.ways-- != 0U);
3418ee48:	68a3      	ldr	r3, [r4, #8]
3418ee4a:	1e5a      	subs	r2, r3, #1
3418ee4c:	60a2      	str	r2, [r4, #8]
3418ee4e:	2b00      	cmp	r3, #0
3418ee50:	d1ef      	bne.n	3418ee32 <JumpToApplication+0xc2>
    } while(locals.sets-- != 0U);
3418ee52:	6863      	ldr	r3, [r4, #4]
3418ee54:	1e5a      	subs	r2, r3, #1
3418ee56:	6062      	str	r2, [r4, #4]
3418ee58:	2b00      	cmp	r3, #0
3418ee5a:	d1e5      	bne.n	3418ee28 <JumpToApplication+0xb8>
  __ASM volatile ("dsb 0xF":::"memory");
3418ee5c:	f3bf 8f4f 	dsb	sy
}
3418ee60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418ee62:	f3bf 8f6f 	isb	sy
}
3418ee66:	bf00      	nop
}
3418ee68:	bf00      	nop
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
3418ee6a:	f3ef 8310 	mrs	r3, PRIMASK
3418ee6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
3418ee70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    SCB_DisableDCache();
  }
#endif /* defined(__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U) */

  /* Initialize user application's Stack Pointer & Jump to user application  */
  primask_bit = __get_PRIMASK();
3418ee72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
3418ee74:	b672      	cpsid	i
}
3418ee76:	bf00      	nop
  __disable_irq();

  /* Apply offsets for image location and vector table offset */
  Application_vector += EXTMEM_XIP_IMAGE_OFFSET + EXTMEM_HEADER_OFFSET;
3418ee78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ee7a:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
3418ee7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3418ee82:	62bb      	str	r3, [r7, #40]	@ 0x28

  SCB->VTOR = (uint32_t)Application_vector;
3418ee84:	4a11      	ldr	r2, [pc, #68]	@ (3418eecc <JumpToApplication+0x15c>)
3418ee86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ee88:	6093      	str	r3, [r2, #8]
  JumpToApp = (pFunction) (*(__IO uint32_t *)(Application_vector + 4u));
3418ee8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ee8c:	3304      	adds	r3, #4
3418ee8e:	681b      	ldr	r3, [r3, #0]
3418ee90:	461a      	mov	r2, r3
3418ee92:	4b0f      	ldr	r3, [pc, #60]	@ (3418eed0 <JumpToApplication+0x160>)
3418ee94:	601a      	str	r2, [r3, #0]
3418ee96:	2300      	movs	r3, #0
3418ee98:	633b      	str	r3, [r7, #48]	@ 0x30
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
3418ee9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418ee9c:	f383 880a 	msr	MSPLIM, r3
#endif
}
3418eea0:	bf00      	nop
     (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
  /* on ARM v8m, set MSPLIM before setting MSP to avoid unwanted stack overflow faults */
  __set_MSPLIM(0x00000000);
#endif  /* __ARM_ARCH_8M_MAIN__ or __ARM_ARCH_8M_BASE__ */

  __set_MSP(*(__IO uint32_t*) Application_vector);
3418eea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418eea4:	681b      	ldr	r3, [r3, #0]
3418eea6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
3418eea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418eeaa:	f383 8808 	msr	MSP, r3
}
3418eeae:	bf00      	nop
3418eeb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418eeb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
3418eeb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418eeb6:	f383 8810 	msr	PRIMASK, r3
}
3418eeba:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);

  JumpToApp();
3418eebc:	4b04      	ldr	r3, [pc, #16]	@ (3418eed0 <JumpToApplication+0x160>)
3418eebe:	681b      	ldr	r3, [r3, #0]
3418eec0:	4798      	blx	r3
  return BOOT_OK;
3418eec2:	2300      	movs	r3, #0
}
3418eec4:	4618      	mov	r0, r3
3418eec6:	3744      	adds	r7, #68	@ 0x44
3418eec8:	46bd      	mov	sp, r7
3418eeca:	bd90      	pop	{r4, r7, pc}
3418eecc:	e000ed00 	.word	0xe000ed00
3418eed0:	341c02e8 	.word	0x341c02e8

3418eed4 <EXTMEM_Init>:
/** @defgroup EXTMEM_Exported_Functions External Memory Exported Functions
  * @{
  */

EXTMEM_StatusTypeDef EXTMEM_Init(uint32_t MemId, uint32_t ClockInput)
{
3418eed4:	b580      	push	{r7, lr}
3418eed6:	b084      	sub	sp, #16
3418eed8:	af00      	add	r7, sp, #0
3418eeda:	6078      	str	r0, [r7, #4]
3418eedc:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418eede:	23fb      	movs	r3, #251	@ 0xfb
3418eee0:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418eee2:	687b      	ldr	r3, [r7, #4]
3418eee4:	2b00      	cmp	r3, #0
3418eee6:	d12f      	bne.n	3418ef48 <EXTMEM_Init+0x74>
  {
    retr = EXTMEM_OK;
3418eee8:	2300      	movs	r3, #0
3418eeea:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418eeec:	4a19      	ldr	r2, [pc, #100]	@ (3418ef54 <EXTMEM_Init+0x80>)
3418eeee:	687b      	ldr	r3, [r7, #4]
3418eef0:	21ac      	movs	r1, #172	@ 0xac
3418eef2:	fb01 f303 	mul.w	r3, r1, r3
3418eef6:	4413      	add	r3, r2
3418eef8:	781b      	ldrb	r3, [r3, #0]
3418eefa:	2b00      	cmp	r3, #0
3418eefc:	d120      	bne.n	3418ef40 <EXTMEM_Init+0x6c>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Init(extmem_list_config[MemId].Handle,
3418eefe:	4a15      	ldr	r2, [pc, #84]	@ (3418ef54 <EXTMEM_Init+0x80>)
3418ef00:	687b      	ldr	r3, [r7, #4]
3418ef02:	21ac      	movs	r1, #172	@ 0xac
3418ef04:	fb01 f303 	mul.w	r3, r1, r3
3418ef08:	4413      	add	r3, r2
3418ef0a:	3304      	adds	r3, #4
3418ef0c:	6818      	ldr	r0, [r3, #0]
3418ef0e:	4a11      	ldr	r2, [pc, #68]	@ (3418ef54 <EXTMEM_Init+0x80>)
3418ef10:	687b      	ldr	r3, [r7, #4]
3418ef12:	21ac      	movs	r1, #172	@ 0xac
3418ef14:	fb01 f303 	mul.w	r3, r1, r3
3418ef18:	4413      	add	r3, r2
3418ef1a:	3308      	adds	r3, #8
3418ef1c:	7819      	ldrb	r1, [r3, #0]
3418ef1e:	687b      	ldr	r3, [r7, #4]
3418ef20:	22ac      	movs	r2, #172	@ 0xac
3418ef22:	fb02 f303 	mul.w	r3, r2, r3
3418ef26:	3308      	adds	r3, #8
3418ef28:	4a0a      	ldr	r2, [pc, #40]	@ (3418ef54 <EXTMEM_Init+0x80>)
3418ef2a:	4413      	add	r3, r2
3418ef2c:	3304      	adds	r3, #4
3418ef2e:	683a      	ldr	r2, [r7, #0]
3418ef30:	f002 fb7c 	bl	3419162c <EXTMEM_DRIVER_NOR_SFDP_Init>
3418ef34:	4603      	mov	r3, r0
3418ef36:	2b00      	cmp	r3, #0
3418ef38:	d005      	beq.n	3418ef46 <EXTMEM_Init+0x72>
                                                                     extmem_list_config[MemId].ConfigType,
                                                                     ClockInput,
                                                                     &extmem_list_config[MemId].NorSfdpObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
3418ef3a:	23fd      	movs	r3, #253	@ 0xfd
3418ef3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
3418ef3e:	e002      	b.n	3418ef46 <EXTMEM_Init+0x72>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418ef40:	23fe      	movs	r3, #254	@ 0xfe
3418ef42:	73fb      	strb	r3, [r7, #15]
        break;
3418ef44:	e000      	b.n	3418ef48 <EXTMEM_Init+0x74>
        break;
3418ef46:	bf00      	nop
      }
    }
  }
  return retr;
3418ef48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418ef4c:	4618      	mov	r0, r3
3418ef4e:	3710      	adds	r7, #16
3418ef50:	46bd      	mov	sp, r7
3418ef52:	bd80      	pop	{r7, pc}
3418ef54:	341c000c 	.word	0x341c000c

3418ef58 <EXTMEM_DeInit>:

EXTMEM_StatusTypeDef EXTMEM_DeInit(uint32_t MemId)
{
3418ef58:	b580      	push	{r7, lr}
3418ef5a:	b084      	sub	sp, #16
3418ef5c:	af00      	add	r7, sp, #0
3418ef5e:	6078      	str	r0, [r7, #4]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418ef60:	23fb      	movs	r3, #251	@ 0xfb
3418ef62:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418ef64:	687b      	ldr	r3, [r7, #4]
3418ef66:	2b00      	cmp	r3, #0
3418ef68:	d119      	bne.n	3418ef9e <EXTMEM_DeInit+0x46>
  {
    retr = EXTMEM_OK;
3418ef6a:	2300      	movs	r3, #0
3418ef6c:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418ef6e:	4a0f      	ldr	r2, [pc, #60]	@ (3418efac <EXTMEM_DeInit+0x54>)
3418ef70:	687b      	ldr	r3, [r7, #4]
3418ef72:	21ac      	movs	r1, #172	@ 0xac
3418ef74:	fb01 f303 	mul.w	r3, r1, r3
3418ef78:	4413      	add	r3, r2
3418ef7a:	781b      	ldrb	r3, [r3, #0]
3418ef7c:	2b00      	cmp	r3, #0
3418ef7e:	d10b      	bne.n	3418ef98 <EXTMEM_DeInit+0x40>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* UnInitialize the SFDP memory, the return is always OK no need to test the returned value */
        (void)EXTMEM_DRIVER_NOR_SFDP_DeInit(&extmem_list_config[MemId].NorSfdpObject);
3418ef80:	687b      	ldr	r3, [r7, #4]
3418ef82:	22ac      	movs	r2, #172	@ 0xac
3418ef84:	fb02 f303 	mul.w	r3, r2, r3
3418ef88:	3308      	adds	r3, #8
3418ef8a:	4a08      	ldr	r2, [pc, #32]	@ (3418efac <EXTMEM_DeInit+0x54>)
3418ef8c:	4413      	add	r3, r2
3418ef8e:	3304      	adds	r3, #4
3418ef90:	4618      	mov	r0, r3
3418ef92:	f002 fc07 	bl	341917a4 <EXTMEM_DRIVER_NOR_SFDP_DeInit>
        break;
3418ef96:	e002      	b.n	3418ef9e <EXTMEM_DeInit+0x46>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
      default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418ef98:	23fe      	movs	r3, #254	@ 0xfe
3418ef9a:	73fb      	strb	r3, [r7, #15]
        break;
3418ef9c:	bf00      	nop
      }
    }
  }
  return retr;
3418ef9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418efa2:	4618      	mov	r0, r3
3418efa4:	3710      	adds	r7, #16
3418efa6:	46bd      	mov	sp, r7
3418efa8:	bd80      	pop	{r7, pc}
3418efaa:	bf00      	nop
3418efac:	341c000c 	.word	0x341c000c

3418efb0 <EXTMEM_MemoryMappedMode>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_MemoryMappedMode(uint32_t MemId, EXTMEM_StateTypeDef State)
{
3418efb0:	b580      	push	{r7, lr}
3418efb2:	b084      	sub	sp, #16
3418efb4:	af00      	add	r7, sp, #0
3418efb6:	6078      	str	r0, [r7, #4]
3418efb8:	460b      	mov	r3, r1
3418efba:	70fb      	strb	r3, [r7, #3]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418efbc:	23fb      	movs	r3, #251	@ 0xfb
3418efbe:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418efc0:	687b      	ldr	r3, [r7, #4]
3418efc2:	2b00      	cmp	r3, #0
3418efc4:	d139      	bne.n	3418f03a <EXTMEM_MemoryMappedMode+0x8a>
  {
    retr = EXTMEM_OK;
3418efc6:	2300      	movs	r3, #0
3418efc8:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418efca:	4a1f      	ldr	r2, [pc, #124]	@ (3418f048 <EXTMEM_MemoryMappedMode+0x98>)
3418efcc:	687b      	ldr	r3, [r7, #4]
3418efce:	21ac      	movs	r1, #172	@ 0xac
3418efd0:	fb01 f303 	mul.w	r3, r1, r3
3418efd4:	4413      	add	r3, r2
3418efd6:	781b      	ldrb	r3, [r3, #0]
3418efd8:	2b00      	cmp	r3, #0
3418efda:	d002      	beq.n	3418efe2 <EXTMEM_MemoryMappedMode+0x32>
3418efdc:	2b03      	cmp	r3, #3
3418efde:	d025      	beq.n	3418f02c <EXTMEM_MemoryMappedMode+0x7c>
3418efe0:	e027      	b.n	3418f032 <EXTMEM_MemoryMappedMode+0x82>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        if (EXTMEM_ENABLE == State)
3418efe2:	78fb      	ldrb	r3, [r7, #3]
3418efe4:	2b00      	cmp	r3, #0
3418efe6:	d110      	bne.n	3418f00a <EXTMEM_MemoryMappedMode+0x5a>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
3418efe8:	687b      	ldr	r3, [r7, #4]
3418efea:	22ac      	movs	r2, #172	@ 0xac
3418efec:	fb02 f303 	mul.w	r3, r2, r3
3418eff0:	3308      	adds	r3, #8
3418eff2:	4a15      	ldr	r2, [pc, #84]	@ (3418f048 <EXTMEM_MemoryMappedMode+0x98>)
3418eff4:	4413      	add	r3, r2
3418eff6:	3304      	adds	r3, #4
3418eff8:	4618      	mov	r0, r3
3418effa:	f002 fbe2 	bl	341917c2 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>
3418effe:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
3418f000:	2b00      	cmp	r3, #0
3418f002:	d019      	beq.n	3418f038 <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
3418f004:	f06f 0302 	mvn.w	r3, #2
3418f008:	e019      	b.n	3418f03e <EXTMEM_MemoryMappedMode+0x8e>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
3418f00a:	687b      	ldr	r3, [r7, #4]
3418f00c:	22ac      	movs	r2, #172	@ 0xac
3418f00e:	fb02 f303 	mul.w	r3, r2, r3
3418f012:	3308      	adds	r3, #8
3418f014:	4a0c      	ldr	r2, [pc, #48]	@ (3418f048 <EXTMEM_MemoryMappedMode+0x98>)
3418f016:	4413      	add	r3, r2
3418f018:	3304      	adds	r3, #4
3418f01a:	4618      	mov	r0, r3
3418f01c:	f002 fbf2 	bl	34191804 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>
3418f020:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
3418f022:	2b00      	cmp	r3, #0
3418f024:	d008      	beq.n	3418f038 <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
3418f026:	f06f 0302 	mvn.w	r3, #2
3418f02a:	e008      	b.n	3418f03e <EXTMEM_MemoryMappedMode+0x8e>
       }
       break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    case EXTMEM_SDCARD :
      retr = EXTMEM_ERROR_NOTSUPPORTED;
3418f02c:	23ff      	movs	r3, #255	@ 0xff
3418f02e:	73fb      	strb	r3, [r7, #15]
    break;
3418f030:	e003      	b.n	3418f03a <EXTMEM_MemoryMappedMode+0x8a>
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418f032:	23fe      	movs	r3, #254	@ 0xfe
3418f034:	73fb      	strb	r3, [r7, #15]
        break;
3418f036:	e000      	b.n	3418f03a <EXTMEM_MemoryMappedMode+0x8a>
        break;
3418f038:	bf00      	nop
      }
    }
  }
  return retr;
3418f03a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418f03e:	4618      	mov	r0, r3
3418f040:	3710      	adds	r7, #16
3418f042:	46bd      	mov	sp, r7
3418f044:	bd80      	pop	{r7, pc}
3418f046:	bf00      	nop
3418f048:	341c000c 	.word	0x341c000c

3418f04c <EXTMEM_GetMapAddress>:

EXTMEM_StatusTypeDef EXTMEM_GetMapAddress(uint32_t MemId, uint32_t *BaseAddress)
{
3418f04c:	b480      	push	{r7}
3418f04e:	b085      	sub	sp, #20
3418f050:	af00      	add	r7, sp, #0
3418f052:	6078      	str	r0, [r7, #4]
3418f054:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418f056:	23fb      	movs	r3, #251	@ 0xfb
3418f058:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418f05a:	687b      	ldr	r3, [r7, #4]
3418f05c:	2b00      	cmp	r3, #0
3418f05e:	d145      	bne.n	3418f0ec <EXTMEM_GetMapAddress+0xa0>
  {
    retr = EXTMEM_OK;
3418f060:	2300      	movs	r3, #0
3418f062:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418f064:	4a25      	ldr	r2, [pc, #148]	@ (3418f0fc <EXTMEM_GetMapAddress+0xb0>)
3418f066:	687b      	ldr	r3, [r7, #4]
3418f068:	21ac      	movs	r1, #172	@ 0xac
3418f06a:	fb01 f303 	mul.w	r3, r1, r3
3418f06e:	4413      	add	r3, r2
3418f070:	781b      	ldrb	r3, [r3, #0]
3418f072:	2b00      	cmp	r3, #0
3418f074:	d001      	beq.n	3418f07a <EXTMEM_GetMapAddress+0x2e>
3418f076:	2b02      	cmp	r3, #2
3418f078:	d135      	bne.n	3418f0e6 <EXTMEM_GetMapAddress+0x9a>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1 || EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM:
      case EXTMEM_NOR_SFDP:{
#if defined(XSPI1)
       if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI1)
3418f07a:	4a20      	ldr	r2, [pc, #128]	@ (3418f0fc <EXTMEM_GetMapAddress+0xb0>)
3418f07c:	687b      	ldr	r3, [r7, #4]
3418f07e:	21ac      	movs	r1, #172	@ 0xac
3418f080:	fb01 f303 	mul.w	r3, r1, r3
3418f084:	4413      	add	r3, r2
3418f086:	3304      	adds	r3, #4
3418f088:	681b      	ldr	r3, [r3, #0]
3418f08a:	681b      	ldr	r3, [r3, #0]
3418f08c:	4a1c      	ldr	r2, [pc, #112]	@ (3418f100 <EXTMEM_GetMapAddress+0xb4>)
3418f08e:	4293      	cmp	r3, r2
3418f090:	d104      	bne.n	3418f09c <EXTMEM_GetMapAddress+0x50>
        {
          *BaseAddress = XSPI1_BASE;
3418f092:	683b      	ldr	r3, [r7, #0]
3418f094:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
3418f098:	601a      	str	r2, [r3, #0]
       else
       {
          retr = EXTMEM_ERROR_DRIVER;
       }

       break;
3418f09a:	e027      	b.n	3418f0ec <EXTMEM_GetMapAddress+0xa0>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI2)
3418f09c:	4a17      	ldr	r2, [pc, #92]	@ (3418f0fc <EXTMEM_GetMapAddress+0xb0>)
3418f09e:	687b      	ldr	r3, [r7, #4]
3418f0a0:	21ac      	movs	r1, #172	@ 0xac
3418f0a2:	fb01 f303 	mul.w	r3, r1, r3
3418f0a6:	4413      	add	r3, r2
3418f0a8:	3304      	adds	r3, #4
3418f0aa:	681b      	ldr	r3, [r3, #0]
3418f0ac:	681b      	ldr	r3, [r3, #0]
3418f0ae:	4a15      	ldr	r2, [pc, #84]	@ (3418f104 <EXTMEM_GetMapAddress+0xb8>)
3418f0b0:	4293      	cmp	r3, r2
3418f0b2:	d104      	bne.n	3418f0be <EXTMEM_GetMapAddress+0x72>
          *BaseAddress = XSPI2_BASE;
3418f0b4:	683b      	ldr	r3, [r7, #0]
3418f0b6:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
3418f0ba:	601a      	str	r2, [r3, #0]
       break;
3418f0bc:	e016      	b.n	3418f0ec <EXTMEM_GetMapAddress+0xa0>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI3)
3418f0be:	4a0f      	ldr	r2, [pc, #60]	@ (3418f0fc <EXTMEM_GetMapAddress+0xb0>)
3418f0c0:	687b      	ldr	r3, [r7, #4]
3418f0c2:	21ac      	movs	r1, #172	@ 0xac
3418f0c4:	fb01 f303 	mul.w	r3, r1, r3
3418f0c8:	4413      	add	r3, r2
3418f0ca:	3304      	adds	r3, #4
3418f0cc:	681b      	ldr	r3, [r3, #0]
3418f0ce:	681b      	ldr	r3, [r3, #0]
3418f0d0:	4a0d      	ldr	r2, [pc, #52]	@ (3418f108 <EXTMEM_GetMapAddress+0xbc>)
3418f0d2:	4293      	cmp	r3, r2
3418f0d4:	d104      	bne.n	3418f0e0 <EXTMEM_GetMapAddress+0x94>
          *BaseAddress = XSPI3_BASE;
3418f0d6:	683b      	ldr	r3, [r7, #0]
3418f0d8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
3418f0dc:	601a      	str	r2, [r3, #0]
       break;
3418f0de:	e005      	b.n	3418f0ec <EXTMEM_GetMapAddress+0xa0>
          retr = EXTMEM_ERROR_DRIVER;
3418f0e0:	23fd      	movs	r3, #253	@ 0xfd
3418f0e2:	73fb      	strb	r3, [r7, #15]
       break;
3418f0e4:	e002      	b.n	3418f0ec <EXTMEM_GetMapAddress+0xa0>
      break;
      }
#endif /* EXTMEM_DRIVER_USER == 1 */
      default :
      {
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418f0e6:	23fe      	movs	r3, #254	@ 0xfe
3418f0e8:	73fb      	strb	r3, [r7, #15]
        break;
3418f0ea:	bf00      	nop
      }
    }
  }
  return retr;
3418f0ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418f0f0:	4618      	mov	r0, r3
3418f0f2:	3714      	adds	r7, #20
3418f0f4:	46bd      	mov	sp, r7
3418f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f0fa:	4770      	bx	lr
3418f0fc:	341c000c 	.word	0x341c000c
3418f100:	58025000 	.word	0x58025000
3418f104:	5802a000 	.word	0x5802a000
3418f108:	5802d000 	.word	0x5802d000

3418f10c <SAL_XSPI_SetClock>:
/* Private variables ---------------------------------------------------------*/
/** @defgroup SAL_XSPI_Exported_Functions SAL XSP Exported Functions
  * @{
  */
HAL_StatusTypeDef SAL_XSPI_SetClock(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t ClockIn, uint32_t ClockRequested, uint32_t *ClockReal)
{
3418f10c:	b480      	push	{r7}
3418f10e:	b087      	sub	sp, #28
3418f110:	af00      	add	r7, sp, #0
3418f112:	60f8      	str	r0, [r7, #12]
3418f114:	60b9      	str	r1, [r7, #8]
3418f116:	607a      	str	r2, [r7, #4]
3418f118:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr = HAL_OK;
3418f11a:	2300      	movs	r3, #0
3418f11c:	75fb      	strb	r3, [r7, #23]
  uint32_t divider;

  if (ClockRequested == 0u)
3418f11e:	687b      	ldr	r3, [r7, #4]
3418f120:	2b00      	cmp	r3, #0
3418f122:	d102      	bne.n	3418f12a <SAL_XSPI_SetClock+0x1e>
  {
    retr = HAL_ERROR;
3418f124:	2301      	movs	r3, #1
3418f126:	75fb      	strb	r3, [r7, #23]
3418f128:	e028      	b.n	3418f17c <SAL_XSPI_SetClock+0x70>
  }
  else
  {
    divider = (ClockIn / ClockRequested);
3418f12a:	68ba      	ldr	r2, [r7, #8]
3418f12c:	687b      	ldr	r3, [r7, #4]
3418f12e:	fbb2 f3f3 	udiv	r3, r2, r3
3418f132:	613b      	str	r3, [r7, #16]
    if (divider >= 1u)
3418f134:	693b      	ldr	r3, [r7, #16]
3418f136:	2b00      	cmp	r3, #0
3418f138:	d00d      	beq.n	3418f156 <SAL_XSPI_SetClock+0x4a>
    {
      *ClockReal = ClockIn / divider;
3418f13a:	68ba      	ldr	r2, [r7, #8]
3418f13c:	693b      	ldr	r3, [r7, #16]
3418f13e:	fbb2 f2f3 	udiv	r2, r2, r3
3418f142:	683b      	ldr	r3, [r7, #0]
3418f144:	601a      	str	r2, [r3, #0]
      if (*ClockReal <= ClockRequested)
3418f146:	683b      	ldr	r3, [r7, #0]
3418f148:	681b      	ldr	r3, [r3, #0]
3418f14a:	687a      	ldr	r2, [r7, #4]
3418f14c:	429a      	cmp	r2, r3
3418f14e:	d302      	bcc.n	3418f156 <SAL_XSPI_SetClock+0x4a>
      {
        divider--;
3418f150:	693b      	ldr	r3, [r7, #16]
3418f152:	3b01      	subs	r3, #1
3418f154:	613b      	str	r3, [r7, #16]
      }
    }

    /* real clock calculation */
    *ClockReal = ClockIn / (divider + 1u);
3418f156:	693b      	ldr	r3, [r7, #16]
3418f158:	3301      	adds	r3, #1
3418f15a:	68ba      	ldr	r2, [r7, #8]
3418f15c:	fbb2 f2f3 	udiv	r2, r2, r3
3418f160:	683b      	ldr	r3, [r7, #0]
3418f162:	601a      	str	r2, [r3, #0]

    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLOCKDIV::"); DEBUG_PARAM_INT(divider+1); DEBUG_PARAM_END();
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLKFREQ::"); DEBUG_PARAM_INTD(*ClockReal); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER, (uint32_t)divider << XSPI_DCR2_PRESCALER_Pos);
3418f164:	68fb      	ldr	r3, [r7, #12]
3418f166:	681b      	ldr	r3, [r3, #0]
3418f168:	681b      	ldr	r3, [r3, #0]
3418f16a:	68db      	ldr	r3, [r3, #12]
3418f16c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418f170:	68fb      	ldr	r3, [r7, #12]
3418f172:	681b      	ldr	r3, [r3, #0]
3418f174:	681b      	ldr	r3, [r3, #0]
3418f176:	693a      	ldr	r2, [r7, #16]
3418f178:	430a      	orrs	r2, r1
3418f17a:	60da      	str	r2, [r3, #12]
  }

  return retr;
3418f17c:	7dfb      	ldrb	r3, [r7, #23]
}
3418f17e:	4618      	mov	r0, r3
3418f180:	371c      	adds	r7, #28
3418f182:	46bd      	mov	sp, r7
3418f184:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f188:	4770      	bx	lr

3418f18a <SAL_XSPI_Init>:
/*
* This function is used to configure the way to discuss with the memory
*
*/
HAL_StatusTypeDef SAL_XSPI_Init(SAL_XSPI_ObjectTypeDef *SalXspi, void *HALHandle)
{
3418f18a:	b580      	push	{r7, lr}
3418f18c:	b096      	sub	sp, #88	@ 0x58
3418f18e:	af00      	add	r7, sp, #0
3418f190:	6078      	str	r0, [r7, #4]
3418f192:	6039      	str	r1, [r7, #0]
  XSPI_RegularCmdTypeDef s_commandbase = {
3418f194:	f107 030c 	add.w	r3, r7, #12
3418f198:	224c      	movs	r2, #76	@ 0x4c
3418f19a:	2100      	movs	r1, #0
3418f19c:	4618      	mov	r0, r3
3418f19e:	f002 fd51 	bl	34191c44 <memset>
3418f1a2:	235a      	movs	r3, #90	@ 0x5a
3418f1a4:	617b      	str	r3, [r7, #20]
3418f1a6:	2301      	movs	r3, #1
3418f1a8:	61bb      	str	r3, [r7, #24]
3418f1aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418f1ae:	62bb      	str	r3, [r7, #40]	@ 0x28
3418f1b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418f1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418f1b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418f1ba:	647b      	str	r3, [r7, #68]	@ 0x44
3418f1bc:	2308      	movs	r3, #8
3418f1be:	653b      	str	r3, [r7, #80]	@ 0x50
#if defined(XSPI_CCR_SIOO)
      .SIOOMode = HAL_XSPI_SIOO_INST_EVERY_CMD,
#endif /* HAL_XSPI_SIOO_INST_EVERY_CMD */
  };

  SalXspi->hxspi = (XSPI_HandleTypeDef *)HALHandle;
3418f1c0:	687b      	ldr	r3, [r7, #4]
3418f1c2:	683a      	ldr	r2, [r7, #0]
3418f1c4:	601a      	str	r2, [r3, #0]
  SalXspi->Commandbase = s_commandbase;
3418f1c6:	687b      	ldr	r3, [r7, #4]
3418f1c8:	3304      	adds	r3, #4
3418f1ca:	f107 010c 	add.w	r1, r7, #12
3418f1ce:	224c      	movs	r2, #76	@ 0x4c
3418f1d0:	4618      	mov	r0, r3
3418f1d2:	f002 fdb2 	bl	34191d3a <memcpy>
  SalXspi->CommandExtension = 0;
3418f1d6:	687b      	ldr	r3, [r7, #4]
3418f1d8:	2200      	movs	r2, #0
3418f1da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  SalXspi->PhyLink = PHY_LINK_1S1S1S;
3418f1de:	687b      	ldr	r3, [r7, #4]
3418f1e0:	2200      	movs	r2, #0
3418f1e2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_TX_CPLT_CB_ID, SAL_XSPI_CompleteCallback);
  /* set the error callback */
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_ERROR_CB_ID, SAL_XSPI_ErrorCallback);
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return HAL_OK;
3418f1e6:	2300      	movs	r3, #0
}
3418f1e8:	4618      	mov	r0, r3
3418f1ea:	3758      	adds	r7, #88	@ 0x58
3418f1ec:	46bd      	mov	sp, r7
3418f1ee:	bd80      	pop	{r7, pc}

3418f1f0 <SAL_XSPI_MemoryConfig>:

HAL_StatusTypeDef SAL_XSPI_MemoryConfig(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_MemParamTypeTypeDef ParametersType, void *ParamVal)
{
3418f1f0:	b580      	push	{r7, lr}
3418f1f2:	b098      	sub	sp, #96	@ 0x60
3418f1f4:	af00      	add	r7, sp, #0
3418f1f6:	60f8      	str	r0, [r7, #12]
3418f1f8:	460b      	mov	r3, r1
3418f1fa:	607a      	str	r2, [r7, #4]
3418f1fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr = HAL_OK;
3418f1fe:	2300      	movs	r3, #0
3418f200:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  XSPI_RegularCmdTypeDef s_commandbase = SalXspi->Commandbase;
3418f204:	68fb      	ldr	r3, [r7, #12]
3418f206:	f107 0010 	add.w	r0, r7, #16
3418f20a:	3304      	adds	r3, #4
3418f20c:	224c      	movs	r2, #76	@ 0x4c
3418f20e:	4619      	mov	r1, r3
3418f210:	f002 fd93 	bl	34191d3a <memcpy>

  switch (ParametersType) {
3418f214:	7afb      	ldrb	r3, [r7, #11]
3418f216:	2b04      	cmp	r3, #4
3418f218:	f200 812a 	bhi.w	3418f470 <SAL_XSPI_MemoryConfig+0x280>
3418f21c:	a201      	add	r2, pc, #4	@ (adr r2, 3418f224 <SAL_XSPI_MemoryConfig+0x34>)
3418f21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418f222:	bf00      	nop
3418f224:	3418f239 	.word	0x3418f239
3418f228:	3418f461 	.word	0x3418f461
3418f22c:	3418f433 	.word	0x3418f433
3418f230:	3418f471 	.word	0x3418f471
3418f234:	3418f43b 	.word	0x3418f43b
  case PARAM_PHY_LINK:{
    SalXspi->PhyLink = *((SAL_XSPI_PhysicalLinkTypeDef *)ParamVal);
3418f238:	687b      	ldr	r3, [r7, #4]
3418f23a:	781a      	ldrb	r2, [r3, #0]
3418f23c:	68fb      	ldr	r3, [r7, #12]
3418f23e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_PHY_LINK::");DEBUG_PARAM_DATA(STR_PHY_LINK(SalXspi->PhyLink));
    switch (SalXspi->PhyLink)
3418f242:	68fb      	ldr	r3, [r7, #12]
3418f244:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
3418f248:	2b0b      	cmp	r3, #11
3418f24a:	f200 80ed 	bhi.w	3418f428 <SAL_XSPI_MemoryConfig+0x238>
3418f24e:	a201      	add	r2, pc, #4	@ (adr r2, 3418f254 <SAL_XSPI_MemoryConfig+0x64>)
3418f250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418f254:	3418f285 	.word	0x3418f285
3418f258:	3418f285 	.word	0x3418f285
3418f25c:	3418f285 	.word	0x3418f285
3418f260:	3418f285 	.word	0x3418f285
3418f264:	3418f2b5 	.word	0x3418f2b5
3418f268:	3418f2b5 	.word	0x3418f2b5
3418f26c:	3418f2e5 	.word	0x3418f2e5
3418f270:	3418f319 	.word	0x3418f319
3418f274:	3418f349 	.word	0x3418f349
3418f278:	3418f37f 	.word	0x3418f37f
3418f27c:	3418f3b5 	.word	0x3418f3b5
3418f280:	3418f3ef 	.word	0x3418f3ef
    {
    case PHY_LINK_1S1D1D:
    case PHY_LINK_1S2S2S:
    case PHY_LINK_1S1S2S:
    case PHY_LINK_1S1S1S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
3418f284:	2301      	movs	r3, #1
3418f286:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418f288:	2300      	movs	r3, #0
3418f28a:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418f28c:	2300      	movs	r3, #0
3418f28e:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_1_LINE;
3418f290:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418f294:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418f296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418f29a:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418f29c:	2300      	movs	r3, #0
3418f29e:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_1_LINE;
3418f2a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418f2a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418f2a6:	2300      	movs	r3, #0
3418f2a8:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418f2aa:	2308      	movs	r3, #8
3418f2ac:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418f2ae:	2300      	movs	r3, #0
3418f2b0:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418f2b2:	e0bd      	b.n	3418f430 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_4S4D4D:
    case PHY_LINK_4S4S4S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
3418f2b4:	2303      	movs	r3, #3
3418f2b6:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418f2b8:	2300      	movs	r3, #0
3418f2ba:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418f2bc:	2300      	movs	r3, #0
3418f2be:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
3418f2c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
3418f2c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418f2c6:	2300      	movs	r3, #0
3418f2c8:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418f2ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418f2ce:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
3418f2d0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3418f2d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418f2d6:	2300      	movs	r3, #0
3418f2d8:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
3418f2da:	2306      	movs	r3, #6
3418f2dc:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418f2de:	2300      	movs	r3, #0
3418f2e0:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418f2e2:	e0a5      	b.n	3418f430 <SAL_XSPI_MemoryConfig+0x240>
      }
    case PHY_LINK_4D4D4D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
3418f2e4:	2303      	movs	r3, #3
3418f2e6:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418f2e8:	2300      	movs	r3, #0
3418f2ea:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3418f2ec:	2308      	movs	r3, #8
3418f2ee:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
3418f2f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
3418f2f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418f2f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418f2fa:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418f2fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418f300:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
3418f302:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3418f306:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418f308:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418f30c:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
3418f30e:	2306      	movs	r3, #6
3418f310:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418f312:	2300      	movs	r3, #0
3418f314:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418f316:	e08b      	b.n	3418f430 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_1S8S8S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
3418f318:	2301      	movs	r3, #1
3418f31a:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418f31c:	2300      	movs	r3, #0
3418f31e:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418f320:	2300      	movs	r3, #0
3418f322:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418f324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418f328:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418f32a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418f32e:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418f330:	2300      	movs	r3, #0
3418f332:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418f334:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418f338:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418f33a:	2300      	movs	r3, #0
3418f33c:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418f33e:	2308      	movs	r3, #8
3418f340:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418f342:	2300      	movs	r3, #0
3418f344:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418f346:	e073      	b.n	3418f430 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_8S8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3418f348:	2304      	movs	r3, #4
3418f34a:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418f34c:	2300      	movs	r3, #0
3418f34e:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418f350:	2300      	movs	r3, #0
3418f352:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418f354:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418f358:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418f35a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418f35e:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418f360:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418f364:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418f366:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418f36a:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418f36c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418f370:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418f372:	2308      	movs	r3, #8
3418f374:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
3418f376:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418f37a:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418f37c:	e058      	b.n	3418f430 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_8D8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3418f37e:	2304      	movs	r3, #4
3418f380:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
3418f382:	2310      	movs	r3, #16
3418f384:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3418f386:	2308      	movs	r3, #8
3418f388:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418f38a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418f38e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418f390:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418f394:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418f396:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418f39a:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418f39c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418f3a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418f3a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418f3a6:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 20;
3418f3a8:	2314      	movs	r3, #20
3418f3aa:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
3418f3ac:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418f3b0:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418f3b2:	e03d      	b.n	3418f430 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_RAM8:{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3418f3b4:	2304      	movs	r3, #4
3418f3b6:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
3418f3b8:	2300      	movs	r3, #0
3418f3ba:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418f3bc:	2300      	movs	r3, #0
3418f3be:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3418f3c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418f3c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3418f3c6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418f3ca:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418f3cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418f3d0:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3418f3d2:	2300      	movs	r3, #0
3418f3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_8_LINES;
3418f3d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418f3da:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
3418f3dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418f3e0:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
3418f3e2:	230a      	movs	r3, #10
3418f3e4:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
3418f3e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418f3ea:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418f3ec:	e020      	b.n	3418f430 <SAL_XSPI_MemoryConfig+0x240>
    }
#if defined(HAL_XSPI_DATA_16_LINES)
    case PHY_LINK_RAM16 :{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3418f3ee:	2304      	movs	r3, #4
3418f3f0:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
3418f3f2:	2300      	movs	r3, #0
3418f3f4:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418f3f6:	2300      	movs	r3, #0
3418f3f8:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3418f3fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418f3fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3418f400:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418f404:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418f406:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418f40a:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3418f40c:	2300      	movs	r3, #0
3418f40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_16_LINES;
3418f410:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
3418f414:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
3418f416:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418f41a:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
3418f41c:	230a      	movs	r3, #10
3418f41e:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
3418f420:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418f424:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418f426:	e003      	b.n	3418f430 <SAL_XSPI_MemoryConfig+0x240>
    }
#endif /* defined(HAL_XSPI_DATA_16_LINES) */
    default:
      retr = HAL_ERROR;
3418f428:	2301      	movs	r3, #1
3418f42a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
3418f42e:	bf00      	nop
    }
    DEBUG_PARAM_END();
    break;
3418f430:	e022      	b.n	3418f478 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_ADDRESS_4BYTES: {
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_ADDRESS_4BYTES"); DEBUG_PARAM_END();
    s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418f432:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418f436:	633b      	str	r3, [r7, #48]	@ 0x30
    break;
3418f438:	e01e      	b.n	3418f478 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_FLASHSIZE:{
    uint8_t valParam = *((uint8_t *)ParamVal);
3418f43a:	687b      	ldr	r3, [r7, #4]
3418f43c:	781b      	ldrb	r3, [r3, #0]
3418f43e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_FLASHSIZE::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_DEVSIZE, ((uint32_t)valParam) << XSPI_DCR1_DEVSIZE_Pos);
3418f442:	68fb      	ldr	r3, [r7, #12]
3418f444:	681b      	ldr	r3, [r3, #0]
3418f446:	681b      	ldr	r3, [r3, #0]
3418f448:	689b      	ldr	r3, [r3, #8]
3418f44a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
3418f44e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
3418f452:	041a      	lsls	r2, r3, #16
3418f454:	68fb      	ldr	r3, [r7, #12]
3418f456:	681b      	ldr	r3, [r3, #0]
3418f458:	681b      	ldr	r3, [r3, #0]
3418f45a:	430a      	orrs	r2, r1
3418f45c:	609a      	str	r2, [r3, #8]
    break;
3418f45e:	e00b      	b.n	3418f478 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_DUMMY_CYCLES:{
    uint8_t valParam = *((uint8_t *)ParamVal);
3418f460:	687b      	ldr	r3, [r7, #4]
3418f462:	781b      	ldrb	r3, [r3, #0]
3418f464:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_DUMMY_CYCLES::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    s_commandbase.DummyCycles = valParam;
3418f468:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
3418f46c:	657b      	str	r3, [r7, #84]	@ 0x54
    break;
3418f46e:	e003      	b.n	3418f478 <SAL_XSPI_MemoryConfig+0x288>
  }
  default:
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_MemoryConfig::ERROR"); DEBUG_PARAM_END();
    retr = HAL_ERROR;
3418f470:	2301      	movs	r3, #1
3418f472:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    break;
3418f476:	bf00      	nop
  }
  SalXspi->Commandbase = s_commandbase;
3418f478:	68fb      	ldr	r3, [r7, #12]
3418f47a:	3304      	adds	r3, #4
3418f47c:	f107 0110 	add.w	r1, r7, #16
3418f480:	224c      	movs	r2, #76	@ 0x4c
3418f482:	4618      	mov	r0, r3
3418f484:	f002 fc59 	bl	34191d3a <memcpy>
  return retr;
3418f488:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418f48c:	4618      	mov	r0, r3
3418f48e:	3760      	adds	r7, #96	@ 0x60
3418f490:	46bd      	mov	sp, r7
3418f492:	bd80      	pop	{r7, pc}

3418f494 <SAL_XSPI_GetSFDP>:

HAL_StatusTypeDef SAL_XSPI_GetSFDP(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
3418f494:	b580      	push	{r7, lr}
3418f496:	b098      	sub	sp, #96	@ 0x60
3418f498:	af00      	add	r7, sp, #0
3418f49a:	60f8      	str	r0, [r7, #12]
3418f49c:	60b9      	str	r1, [r7, #8]
3418f49e:	607a      	str	r2, [r7, #4]
3418f4a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418f4a2:	68fb      	ldr	r3, [r7, #12]
3418f4a4:	f107 0010 	add.w	r0, r7, #16
3418f4a8:	3304      	adds	r3, #4
3418f4aa:	224c      	movs	r2, #76	@ 0x4c
3418f4ac:	4619      	mov	r1, r3
3418f4ae:	f002 fc44 	bl	34191d3a <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth,
3418f4b2:	68fb      	ldr	r3, [r7, #12]
3418f4b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418f4b8:	6a39      	ldr	r1, [r7, #32]
3418f4ba:	225a      	movs	r2, #90	@ 0x5a
3418f4bc:	4618      	mov	r0, r3
3418f4be:	f000 fbca 	bl	3418fc56 <XSPI_FormatCommand>
3418f4c2:	4603      	mov	r3, r0
3418f4c4:	61bb      	str	r3, [r7, #24]
                                             EXTMEM_READ_SFDP_COMMAND);

  s_command.Address     = Address;
3418f4c6:	68bb      	ldr	r3, [r7, #8]
3418f4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength  = DataSize;
3418f4ca:	683b      	ldr	r3, [r7, #0]
3418f4cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* Nb of Dummy cycles for READ SFDP command does not correspond to SFDPDummyCycle field of SAL structure,
     as initialised after SFDP Header analysis */
  s_command.DummyCycles = EXTMEM_READ_SFDP_NB_DUMMY_CYCLES_DEFAULT;
3418f4ce:	2308      	movs	r3, #8
3418f4d0:	657b      	str	r3, [r7, #84]	@ 0x54

  if (s_command.AddressMode == HAL_XSPI_ADDRESS_1_LINE)
3418f4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418f4d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418f4d8:	d102      	bne.n	3418f4e0 <SAL_XSPI_GetSFDP+0x4c>
  {
    s_command.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418f4da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418f4de:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3418f4e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418f4e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418f4e6:	d103      	bne.n	3418f4f0 <SAL_XSPI_GetSFDP+0x5c>
  {
    s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
3418f4e8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418f4ec:	65bb      	str	r3, [r7, #88]	@ 0x58
3418f4ee:	e001      	b.n	3418f4f4 <SAL_XSPI_GetSFDP+0x60>
  }
  else
  {
    s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
3418f4f0:	2300      	movs	r3, #0
3418f4f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f4f4:	68fb      	ldr	r3, [r7, #12]
3418f4f6:	681b      	ldr	r3, [r3, #0]
3418f4f8:	f107 0110 	add.w	r1, r7, #16
3418f4fc:	2264      	movs	r2, #100	@ 0x64
3418f4fe:	4618      	mov	r0, r3
3418f500:	f7fe fcaa 	bl	3418de58 <HAL_XSPI_Command>
3418f504:	4603      	mov	r3, r0
3418f506:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418f50a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f50e:	2b00      	cmp	r3, #0
3418f510:	d10a      	bne.n	3418f528 <SAL_XSPI_GetSFDP+0x94>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f512:	68fb      	ldr	r3, [r7, #12]
3418f514:	681b      	ldr	r3, [r3, #0]
3418f516:	2264      	movs	r2, #100	@ 0x64
3418f518:	6879      	ldr	r1, [r7, #4]
3418f51a:	4618      	mov	r0, r3
3418f51c:	f7fe fd9f 	bl	3418e05e <HAL_XSPI_Receive>
3418f520:	4603      	mov	r3, r0
3418f522:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418f526:	e000      	b.n	3418f52a <SAL_XSPI_GetSFDP+0x96>
    goto error;
3418f528:	bf00      	nop

error:
  if (retr != HAL_OK )
3418f52a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f52e:	2b00      	cmp	r3, #0
3418f530:	d004      	beq.n	3418f53c <SAL_XSPI_GetSFDP+0xa8>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418f532:	68fb      	ldr	r3, [r7, #12]
3418f534:	681b      	ldr	r3, [r3, #0]
3418f536:	4618      	mov	r0, r3
3418f538:	f7fe ff7a 	bl	3418e430 <HAL_XSPI_Abort>
  }
  return retr;
3418f53c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418f540:	4618      	mov	r0, r3
3418f542:	3760      	adds	r7, #96	@ 0x60
3418f544:	46bd      	mov	sp, r7
3418f546:	bd80      	pop	{r7, pc}

3418f548 <SAL_XSPI_GetId>:

HAL_StatusTypeDef SAL_XSPI_GetId(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t *Data, uint32_t DataSize)
{
3418f548:	b580      	push	{r7, lr}
3418f54a:	b098      	sub	sp, #96	@ 0x60
3418f54c:	af00      	add	r7, sp, #0
3418f54e:	60f8      	str	r0, [r7, #12]
3418f550:	60b9      	str	r1, [r7, #8]
3418f552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418f554:	68fb      	ldr	r3, [r7, #12]
3418f556:	f107 0010 	add.w	r0, r7, #16
3418f55a:	3304      	adds	r3, #4
3418f55c:	224c      	movs	r2, #76	@ 0x4c
3418f55e:	4619      	mov	r1, r3
3418f560:	f002 fbeb 	bl	34191d3a <memcpy>

  /* Initialize the Read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth,
3418f564:	68fb      	ldr	r3, [r7, #12]
3418f566:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418f56a:	6a39      	ldr	r1, [r7, #32]
3418f56c:	229f      	movs	r2, #159	@ 0x9f
3418f56e:	4618      	mov	r0, r3
3418f570:	f000 fb71 	bl	3418fc56 <XSPI_FormatCommand>
3418f574:	4603      	mov	r3, r0
3418f576:	61bb      	str	r3, [r7, #24]
                                             EXTMEM_READ_JEDEC_ID_SPI_COMMAND);

  s_command.DataLength  = DataSize;
3418f578:	687b      	ldr	r3, [r7, #4]
3418f57a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
3418f57c:	69fb      	ldr	r3, [r7, #28]
3418f57e:	2b01      	cmp	r3, #1
3418f580:	d107      	bne.n	3418f592 <SAL_XSPI_GetId+0x4a>
  {
    s_command.AddressMode       = HAL_XSPI_ADDRESS_NONE;
3418f582:	2300      	movs	r3, #0
3418f584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DummyCycles       = 0;
3418f586:	2300      	movs	r3, #0
3418f588:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with micron memory to read ID in 1S8S8S */
    s_command.DataMode = HAL_XSPI_DATA_1_LINE;
3418f58a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418f58e:	64bb      	str	r3, [r7, #72]	@ 0x48
3418f590:	e030      	b.n	3418f5f4 <SAL_XSPI_GetId+0xac>
  }
  else if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_4_LINES)
3418f592:	69fb      	ldr	r3, [r7, #28]
3418f594:	2b03      	cmp	r3, #3
3418f596:	d107      	bne.n	3418f5a8 <SAL_XSPI_GetId+0x60>
  {
    s_command.AddressMode       = HAL_XSPI_ADDRESS_NONE;
3418f598:	2300      	movs	r3, #0
3418f59a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DummyCycles       = 0;
3418f59c:	2300      	movs	r3, #0
3418f59e:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with ISSI memory to read ID in 4S4S4S */
    s_command.DataMode          = HAL_XSPI_DATA_4_LINES;
3418f5a0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3418f5a4:	64bb      	str	r3, [r7, #72]	@ 0x48
3418f5a6:	e025      	b.n	3418f5f4 <SAL_XSPI_GetId+0xac>
  }
  else if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_8_LINES)
3418f5a8:	69fb      	ldr	r3, [r7, #28]
3418f5aa:	2b04      	cmp	r3, #4
3418f5ac:	d11e      	bne.n	3418f5ec <SAL_XSPI_GetId+0xa4>
  {
    s_command.Address = 0;
3418f5ae:	2300      	movs	r3, #0
3418f5b0:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Specific case for Macronix memories : RDID is not Data DTR  */
    if ((Data[0] == 0xC2) && (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE))
3418f5b2:	68bb      	ldr	r3, [r7, #8]
3418f5b4:	781b      	ldrb	r3, [r3, #0]
3418f5b6:	2bc2      	cmp	r3, #194	@ 0xc2
3418f5b8:	d108      	bne.n	3418f5cc <SAL_XSPI_GetId+0x84>
3418f5ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418f5bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418f5c0:	d104      	bne.n	3418f5cc <SAL_XSPI_GetId+0x84>
    {
      s_command.DummyCycles       = 4;
3418f5c2:	2304      	movs	r3, #4
3418f5c4:	657b      	str	r3, [r7, #84]	@ 0x54
      s_command.DataDTRMode       = HAL_XSPI_DATA_DTR_DISABLE;
3418f5c6:	2300      	movs	r3, #0
3418f5c8:	653b      	str	r3, [r7, #80]	@ 0x50
3418f5ca:	e013      	b.n	3418f5f4 <SAL_XSPI_GetId+0xac>
    }
    /* Specific case for GigaDevice memories : RDID has no address even in Octal mode  */
    else if ((Data[0] == 0xC8) && (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE))
3418f5cc:	68bb      	ldr	r3, [r7, #8]
3418f5ce:	781b      	ldrb	r3, [r3, #0]
3418f5d0:	2bc8      	cmp	r3, #200	@ 0xc8
3418f5d2:	d108      	bne.n	3418f5e6 <SAL_XSPI_GetId+0x9e>
3418f5d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418f5d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418f5da:	d104      	bne.n	3418f5e6 <SAL_XSPI_GetId+0x9e>
    {
      s_command.DummyCycles       = 8;
3418f5dc:	2308      	movs	r3, #8
3418f5de:	657b      	str	r3, [r7, #84]	@ 0x54
      s_command.AddressMode       = HAL_XSPI_ADDRESS_NONE;
3418f5e0:	2300      	movs	r3, #0
3418f5e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418f5e4:	e006      	b.n	3418f5f4 <SAL_XSPI_GetId+0xac>
    }
    else
    {
      s_command.DummyCycles = 8;
3418f5e6:	2308      	movs	r3, #8
3418f5e8:	657b      	str	r3, [r7, #84]	@ 0x54
3418f5ea:	e003      	b.n	3418f5f4 <SAL_XSPI_GetId+0xac>
    }
    /* Required behavior to be confirmed on the other memories */
  }
  else
  {
    s_command.Address = 0;
3418f5ec:	2300      	movs	r3, #0
3418f5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.DummyCycles = 8;
3418f5f0:	2308      	movs	r3, #8
3418f5f2:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f5f4:	68fb      	ldr	r3, [r7, #12]
3418f5f6:	681b      	ldr	r3, [r3, #0]
3418f5f8:	f107 0110 	add.w	r1, r7, #16
3418f5fc:	2264      	movs	r2, #100	@ 0x64
3418f5fe:	4618      	mov	r0, r3
3418f600:	f7fe fc2a 	bl	3418de58 <HAL_XSPI_Command>
3418f604:	4603      	mov	r3, r0
3418f606:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418f60a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f60e:	2b00      	cmp	r3, #0
3418f610:	d10a      	bne.n	3418f628 <SAL_XSPI_GetId+0xe0>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f612:	68fb      	ldr	r3, [r7, #12]
3418f614:	681b      	ldr	r3, [r3, #0]
3418f616:	2264      	movs	r2, #100	@ 0x64
3418f618:	68b9      	ldr	r1, [r7, #8]
3418f61a:	4618      	mov	r0, r3
3418f61c:	f7fe fd1f 	bl	3418e05e <HAL_XSPI_Receive>
3418f620:	4603      	mov	r3, r0
3418f622:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418f626:	e000      	b.n	3418f62a <SAL_XSPI_GetId+0xe2>
    goto error;
3418f628:	bf00      	nop

error:
  if (retr != HAL_OK )
3418f62a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f62e:	2b00      	cmp	r3, #0
3418f630:	d004      	beq.n	3418f63c <SAL_XSPI_GetId+0xf4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418f632:	68fb      	ldr	r3, [r7, #12]
3418f634:	681b      	ldr	r3, [r3, #0]
3418f636:	4618      	mov	r0, r3
3418f638:	f7fe fefa 	bl	3418e430 <HAL_XSPI_Abort>
  }
  return retr;
3418f63c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418f640:	4618      	mov	r0, r3
3418f642:	3760      	adds	r7, #96	@ 0x60
3418f644:	46bd      	mov	sp, r7
3418f646:	bd80      	pop	{r7, pc}

3418f648 <SAL_XSPI_Read>:

HAL_StatusTypeDef SAL_XSPI_Read(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
3418f648:	b580      	push	{r7, lr}
3418f64a:	b098      	sub	sp, #96	@ 0x60
3418f64c:	af00      	add	r7, sp, #0
3418f64e:	60f8      	str	r0, [r7, #12]
3418f650:	607a      	str	r2, [r7, #4]
3418f652:	603b      	str	r3, [r7, #0]
3418f654:	460b      	mov	r3, r1
3418f656:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418f658:	68fb      	ldr	r3, [r7, #12]
3418f65a:	f107 0010 	add.w	r0, r7, #16
3418f65e:	3304      	adds	r3, #4
3418f660:	224c      	movs	r2, #76	@ 0x4c
3418f662:	4619      	mov	r1, r3
3418f664:	f002 fb69 	bl	34191d3a <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418f668:	68fb      	ldr	r3, [r7, #12]
3418f66a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418f66e:	6a39      	ldr	r1, [r7, #32]
3418f670:	7afa      	ldrb	r2, [r7, #11]
3418f672:	4618      	mov	r0, r3
3418f674:	f000 faef 	bl	3418fc56 <XSPI_FormatCommand>
3418f678:	4603      	mov	r3, r0
3418f67a:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
3418f67c:	687b      	ldr	r3, [r7, #4]
3418f67e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
3418f680:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418f682:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DTR management for single/dual/quad */
  switch(SalXspi->PhyLink)
3418f684:	68fb      	ldr	r3, [r7, #12]
3418f686:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
3418f68a:	2b05      	cmp	r3, #5
3418f68c:	d006      	beq.n	3418f69c <SAL_XSPI_Read+0x54>
3418f68e:	2b05      	cmp	r3, #5
3418f690:	dc1a      	bgt.n	3418f6c8 <SAL_XSPI_Read+0x80>
3418f692:	2b01      	cmp	r3, #1
3418f694:	d014      	beq.n	3418f6c0 <SAL_XSPI_Read+0x78>
3418f696:	2b02      	cmp	r3, #2
3418f698:	d00b      	beq.n	3418f6b2 <SAL_XSPI_Read+0x6a>
     s_command.DataMode       = HAL_XSPI_DATA_2_LINES;
   break;
   }
   default :{
     /* keep default parameters */
   break;
3418f69a:	e015      	b.n	3418f6c8 <SAL_XSPI_Read+0x80>
     s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418f69c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418f6a0:	637b      	str	r3, [r7, #52]	@ 0x34
     s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_ENABLE;
3418f6a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418f6a6:	653b      	str	r3, [r7, #80]	@ 0x50
     s_command.DummyCycles    = SalXspi->DTRDummyCycle;
3418f6a8:	68fb      	ldr	r3, [r7, #12]
3418f6aa:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
3418f6ae:	657b      	str	r3, [r7, #84]	@ 0x54
   break;
3418f6b0:	e00b      	b.n	3418f6ca <SAL_XSPI_Read+0x82>
     s_command.AddressMode    = HAL_XSPI_ADDRESS_2_LINES;
3418f6b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418f6b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
     s_command.DataMode       = HAL_XSPI_DATA_2_LINES;
3418f6b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
3418f6bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
3418f6be:	e004      	b.n	3418f6ca <SAL_XSPI_Read+0x82>
     s_command.DataMode       = HAL_XSPI_DATA_2_LINES;
3418f6c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
3418f6c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
3418f6c6:	e000      	b.n	3418f6ca <SAL_XSPI_Read+0x82>
   break;
3418f6c8:	bf00      	nop
   }
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f6ca:	68fb      	ldr	r3, [r7, #12]
3418f6cc:	681b      	ldr	r3, [r3, #0]
3418f6ce:	f107 0110 	add.w	r1, r7, #16
3418f6d2:	2264      	movs	r2, #100	@ 0x64
3418f6d4:	4618      	mov	r0, r3
3418f6d6:	f7fe fbbf 	bl	3418de58 <HAL_XSPI_Command>
3418f6da:	4603      	mov	r3, r0
3418f6dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (retr  != HAL_OK)
3418f6e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f6e4:	2b00      	cmp	r3, #0
3418f6e6:	d107      	bne.n	3418f6f8 <SAL_XSPI_Read+0xb0>
  {
    goto error;
  }

  /* read the data */
  retr = XSPI_Receive(SalXspi, Data);
3418f6e8:	6839      	ldr	r1, [r7, #0]
3418f6ea:	68f8      	ldr	r0, [r7, #12]
3418f6ec:	f000 faef 	bl	3418fcce <XSPI_Receive>
3418f6f0:	4603      	mov	r3, r0
3418f6f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418f6f6:	e000      	b.n	3418f6fa <SAL_XSPI_Read+0xb2>
    goto error;
3418f6f8:	bf00      	nop

error:
  if (retr != HAL_OK )
3418f6fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f6fe:	2b00      	cmp	r3, #0
3418f700:	d004      	beq.n	3418f70c <SAL_XSPI_Read+0xc4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418f702:	68fb      	ldr	r3, [r7, #12]
3418f704:	681b      	ldr	r3, [r3, #0]
3418f706:	4618      	mov	r0, r3
3418f708:	f7fe fe92 	bl	3418e430 <HAL_XSPI_Abort>
  }
  return retr;
3418f70c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418f710:	4618      	mov	r0, r3
3418f712:	3760      	adds	r7, #96	@ 0x60
3418f714:	46bd      	mov	sp, r7
3418f716:	bd80      	pop	{r7, pc}

3418f718 <SAL_XSPI_Write>:

HAL_StatusTypeDef SAL_XSPI_Write(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, const uint8_t *Data, uint32_t DataSize)
{
3418f718:	b580      	push	{r7, lr}
3418f71a:	b098      	sub	sp, #96	@ 0x60
3418f71c:	af00      	add	r7, sp, #0
3418f71e:	60f8      	str	r0, [r7, #12]
3418f720:	607a      	str	r2, [r7, #4]
3418f722:	603b      	str	r3, [r7, #0]
3418f724:	460b      	mov	r3, r1
3418f726:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418f728:	68fb      	ldr	r3, [r7, #12]
3418f72a:	f107 0010 	add.w	r0, r7, #16
3418f72e:	3304      	adds	r3, #4
3418f730:	224c      	movs	r2, #76	@ 0x4c
3418f732:	4619      	mov	r1, r3
3418f734:	f002 fb01 	bl	34191d3a <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418f738:	68fb      	ldr	r3, [r7, #12]
3418f73a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418f73e:	6a39      	ldr	r1, [r7, #32]
3418f740:	7afa      	ldrb	r2, [r7, #11]
3418f742:	4618      	mov	r0, r3
3418f744:	f000 fa87 	bl	3418fc56 <XSPI_FormatCommand>
3418f748:	4603      	mov	r3, r0
3418f74a:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
3418f74c:	687b      	ldr	r3, [r7, #4]
3418f74e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
3418f750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418f752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0u;
3418f754:	2300      	movs	r3, #0
3418f756:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode           = HAL_XSPI_DQS_DISABLE;
3418f758:	2300      	movs	r3, #0
3418f75a:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f75c:	68fb      	ldr	r3, [r7, #12]
3418f75e:	681b      	ldr	r3, [r3, #0]
3418f760:	f107 0110 	add.w	r1, r7, #16
3418f764:	2264      	movs	r2, #100	@ 0x64
3418f766:	4618      	mov	r0, r3
3418f768:	f7fe fb76 	bl	3418de58 <HAL_XSPI_Command>
3418f76c:	4603      	mov	r3, r0
3418f76e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (HAL_OK != retr)
3418f772:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f776:	2b00      	cmp	r3, #0
3418f778:	d107      	bne.n	3418f78a <SAL_XSPI_Write+0x72>
  {
    goto error;
  }

  /* transmit data */
  retr = XSPI_Transmit(SalXspi, Data);
3418f77a:	6839      	ldr	r1, [r7, #0]
3418f77c:	68f8      	ldr	r0, [r7, #12]
3418f77e:	f000 fa93 	bl	3418fca8 <XSPI_Transmit>
3418f782:	4603      	mov	r3, r0
3418f784:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418f788:	e000      	b.n	3418f78c <SAL_XSPI_Write+0x74>
    goto error;
3418f78a:	bf00      	nop

error:
  if (retr != HAL_OK )
3418f78c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f790:	2b00      	cmp	r3, #0
3418f792:	d004      	beq.n	3418f79e <SAL_XSPI_Write+0x86>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418f794:	68fb      	ldr	r3, [r7, #12]
3418f796:	681b      	ldr	r3, [r3, #0]
3418f798:	4618      	mov	r0, r3
3418f79a:	f7fe fe49 	bl	3418e430 <HAL_XSPI_Abort>
  }
  return retr;
3418f79e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418f7a2:	4618      	mov	r0, r3
3418f7a4:	3760      	adds	r7, #96	@ 0x60
3418f7a6:	46bd      	mov	sp, r7
3418f7a8:	bd80      	pop	{r7, pc}

3418f7aa <SAL_XSPI_CommandSendData>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_CommandSendData(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
3418f7aa:	b580      	push	{r7, lr}
3418f7ac:	b098      	sub	sp, #96	@ 0x60
3418f7ae:	af00      	add	r7, sp, #0
3418f7b0:	60f8      	str	r0, [r7, #12]
3418f7b2:	607a      	str	r2, [r7, #4]
3418f7b4:	461a      	mov	r2, r3
3418f7b6:	460b      	mov	r3, r1
3418f7b8:	72fb      	strb	r3, [r7, #11]
3418f7ba:	4613      	mov	r3, r2
3418f7bc:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418f7be:	68fb      	ldr	r3, [r7, #12]
3418f7c0:	f107 0010 	add.w	r0, r7, #16
3418f7c4:	3304      	adds	r3, #4
3418f7c6:	224c      	movs	r2, #76	@ 0x4c
3418f7c8:	4619      	mov	r1, r3
3418f7ca:	f002 fab6 	bl	34191d3a <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418f7ce:	68fb      	ldr	r3, [r7, #12]
3418f7d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418f7d4:	6a39      	ldr	r1, [r7, #32]
3418f7d6:	7afa      	ldrb	r2, [r7, #11]
3418f7d8:	4618      	mov	r0, r3
3418f7da:	f000 fa3c 	bl	3418fc56 <XSPI_FormatCommand>
3418f7de:	4603      	mov	r3, r0
3418f7e0:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3418f7e2:	2300      	movs	r3, #0
3418f7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0U;
3418f7e6:	2300      	movs	r3, #0
3418f7e8:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418f7ea:	893b      	ldrh	r3, [r7, #8]
3418f7ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418f7ee:	2300      	movs	r3, #0
3418f7f0:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
3418f7f2:	893b      	ldrh	r3, [r7, #8]
3418f7f4:	2b00      	cmp	r3, #0
3418f7f6:	d101      	bne.n	3418f7fc <SAL_XSPI_CommandSendData+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
3418f7f8:	2300      	movs	r3, #0
3418f7fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f7fc:	68fb      	ldr	r3, [r7, #12]
3418f7fe:	681b      	ldr	r3, [r3, #0]
3418f800:	f107 0110 	add.w	r1, r7, #16
3418f804:	2264      	movs	r2, #100	@ 0x64
3418f806:	4618      	mov	r0, r3
3418f808:	f7fe fb26 	bl	3418de58 <HAL_XSPI_Command>
3418f80c:	4603      	mov	r3, r0
3418f80e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
3418f812:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f816:	2b00      	cmp	r3, #0
3418f818:	d10c      	bne.n	3418f834 <SAL_XSPI_CommandSendData+0x8a>
3418f81a:	893b      	ldrh	r3, [r7, #8]
3418f81c:	2b00      	cmp	r3, #0
3418f81e:	d009      	beq.n	3418f834 <SAL_XSPI_CommandSendData+0x8a>
  {
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f820:	68fb      	ldr	r3, [r7, #12]
3418f822:	681b      	ldr	r3, [r3, #0]
3418f824:	2264      	movs	r2, #100	@ 0x64
3418f826:	6879      	ldr	r1, [r7, #4]
3418f828:	4618      	mov	r0, r3
3418f82a:	f7fe fba5 	bl	3418df78 <HAL_XSPI_Transmit>
3418f82e:	4603      	mov	r3, r0
3418f830:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418f834:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f838:	2b00      	cmp	r3, #0
3418f83a:	d004      	beq.n	3418f846 <SAL_XSPI_CommandSendData+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418f83c:	68fb      	ldr	r3, [r7, #12]
3418f83e:	681b      	ldr	r3, [r3, #0]
3418f840:	4618      	mov	r0, r3
3418f842:	f7fe fdf5 	bl	3418e430 <HAL_XSPI_Abort>
  }
  return retr;
3418f846:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418f84a:	4618      	mov	r0, r3
3418f84c:	3760      	adds	r7, #96	@ 0x60
3418f84e:	46bd      	mov	sp, r7
3418f850:	bd80      	pop	{r7, pc}

3418f852 <SAL_XSPI_SendReadCommand>:

HAL_StatusTypeDef SAL_XSPI_SendReadCommand(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
3418f852:	b580      	push	{r7, lr}
3418f854:	b098      	sub	sp, #96	@ 0x60
3418f856:	af00      	add	r7, sp, #0
3418f858:	60f8      	str	r0, [r7, #12]
3418f85a:	607a      	str	r2, [r7, #4]
3418f85c:	461a      	mov	r2, r3
3418f85e:	460b      	mov	r3, r1
3418f860:	72fb      	strb	r3, [r7, #11]
3418f862:	4613      	mov	r3, r2
3418f864:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418f866:	68fb      	ldr	r3, [r7, #12]
3418f868:	f107 0010 	add.w	r0, r7, #16
3418f86c:	3304      	adds	r3, #4
3418f86e:	224c      	movs	r2, #76	@ 0x4c
3418f870:	4619      	mov	r1, r3
3418f872:	f002 fa62 	bl	34191d3a <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the reading of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418f876:	68fb      	ldr	r3, [r7, #12]
3418f878:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418f87c:	6a39      	ldr	r1, [r7, #32]
3418f87e:	7afa      	ldrb	r2, [r7, #11]
3418f880:	4618      	mov	r0, r3
3418f882:	f000 f9e8 	bl	3418fc56 <XSPI_FormatCommand>
3418f886:	4603      	mov	r3, r0
3418f888:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3418f88a:	2300      	movs	r3, #0
3418f88c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0u;
3418f88e:	2300      	movs	r3, #0
3418f890:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418f892:	893b      	ldrh	r3, [r7, #8]
3418f894:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418f896:	2300      	movs	r3, #0
3418f898:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
3418f89a:	893b      	ldrh	r3, [r7, #8]
3418f89c:	2b00      	cmp	r3, #0
3418f89e:	d101      	bne.n	3418f8a4 <SAL_XSPI_SendReadCommand+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
3418f8a0:	2300      	movs	r3, #0
3418f8a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f8a4:	68fb      	ldr	r3, [r7, #12]
3418f8a6:	681b      	ldr	r3, [r3, #0]
3418f8a8:	f107 0110 	add.w	r1, r7, #16
3418f8ac:	2264      	movs	r2, #100	@ 0x64
3418f8ae:	4618      	mov	r0, r3
3418f8b0:	f7fe fad2 	bl	3418de58 <HAL_XSPI_Command>
3418f8b4:	4603      	mov	r3, r0
3418f8b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
3418f8ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f8be:	2b00      	cmp	r3, #0
3418f8c0:	d10c      	bne.n	3418f8dc <SAL_XSPI_SendReadCommand+0x8a>
3418f8c2:	893b      	ldrh	r3, [r7, #8]
3418f8c4:	2b00      	cmp	r3, #0
3418f8c6:	d009      	beq.n	3418f8dc <SAL_XSPI_SendReadCommand+0x8a>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f8c8:	68fb      	ldr	r3, [r7, #12]
3418f8ca:	681b      	ldr	r3, [r3, #0]
3418f8cc:	2264      	movs	r2, #100	@ 0x64
3418f8ce:	6879      	ldr	r1, [r7, #4]
3418f8d0:	4618      	mov	r0, r3
3418f8d2:	f7fe fbc4 	bl	3418e05e <HAL_XSPI_Receive>
3418f8d6:	4603      	mov	r3, r0
3418f8d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418f8dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f8e0:	2b00      	cmp	r3, #0
3418f8e2:	d004      	beq.n	3418f8ee <SAL_XSPI_SendReadCommand+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418f8e4:	68fb      	ldr	r3, [r7, #12]
3418f8e6:	681b      	ldr	r3, [r3, #0]
3418f8e8:	4618      	mov	r0, r3
3418f8ea:	f7fe fda1 	bl	3418e430 <HAL_XSPI_Abort>
  }
  return retr;
3418f8ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418f8f2:	4618      	mov	r0, r3
3418f8f4:	3760      	adds	r7, #96	@ 0x60
3418f8f6:	46bd      	mov	sp, r7
3418f8f8:	bd80      	pop	{r7, pc}

3418f8fa <SAL_XSPI_CommandSendReadAddress>:

HAL_StatusTypeDef SAL_XSPI_CommandSendReadAddress(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                                  uint32_t Address, uint8_t *Data, uint16_t DataSize,
                                                  uint8_t ManuId)
{
3418f8fa:	b580      	push	{r7, lr}
3418f8fc:	b098      	sub	sp, #96	@ 0x60
3418f8fe:	af00      	add	r7, sp, #0
3418f900:	60f8      	str	r0, [r7, #12]
3418f902:	607a      	str	r2, [r7, #4]
3418f904:	603b      	str	r3, [r7, #0]
3418f906:	460b      	mov	r3, r1
3418f908:	72fb      	strb	r3, [r7, #11]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418f90a:	68fb      	ldr	r3, [r7, #12]
3418f90c:	f107 0010 	add.w	r0, r7, #16
3418f910:	3304      	adds	r3, #4
3418f912:	224c      	movs	r2, #76	@ 0x4c
3418f914:	4619      	mov	r1, r3
3418f916:	f002 fa10 	bl	34191d3a <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the reading of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418f91a:	68fb      	ldr	r3, [r7, #12]
3418f91c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418f920:	6a39      	ldr	r1, [r7, #32]
3418f922:	7afa      	ldrb	r2, [r7, #11]
3418f924:	4618      	mov	r0, r3
3418f926:	f000 f996 	bl	3418fc56 <XSPI_FormatCommand>
3418f92a:	4603      	mov	r3, r0
3418f92c:	61bb      	str	r3, [r7, #24]

  s_command.Address            = Address;
3418f92e:	687b      	ldr	r3, [r7, #4]
3418f930:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DummyCycles        = SalXspi->SFDPDummyCycle;
3418f932:	68fb      	ldr	r3, [r7, #12]
3418f934:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
3418f938:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418f93a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
3418f93e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* Specific case for Macronix memories : RDID and RDCR are not Data DTR  */
  if ((ManuId == EXTMEM_MANFACTURER_MACRONIX) && (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE))
3418f940:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
3418f944:	2bc2      	cmp	r3, #194	@ 0xc2
3418f946:	d106      	bne.n	3418f956 <SAL_XSPI_CommandSendReadAddress+0x5c>
3418f948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418f94a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418f94e:	d102      	bne.n	3418f956 <SAL_XSPI_CommandSendReadAddress+0x5c>
  {
    s_command.DataDTRMode      = HAL_XSPI_DATA_DTR_DISABLE;
3418f950:	2300      	movs	r3, #0
3418f952:	653b      	str	r3, [r7, #80]	@ 0x50
3418f954:	e00e      	b.n	3418f974 <SAL_XSPI_CommandSendReadAddress+0x7a>
  }
  /* Specific case for GigaDevice memories : Read Configuration Register are not Data DTR  */
  else if ((ManuId == 0xC8) && (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE))
3418f956:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
3418f95a:	2bc8      	cmp	r3, #200	@ 0xc8
3418f95c:	d108      	bne.n	3418f970 <SAL_XSPI_CommandSendReadAddress+0x76>
3418f95e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418f960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418f964:	d104      	bne.n	3418f970 <SAL_XSPI_CommandSendReadAddress+0x76>
  {
    s_command.DataDTRMode      = HAL_XSPI_DATA_DTR_DISABLE;
3418f966:	2300      	movs	r3, #0
3418f968:	653b      	str	r3, [r7, #80]	@ 0x50
    s_command.DQSMode          = HAL_XSPI_DQS_DISABLE;
3418f96a:	2300      	movs	r3, #0
3418f96c:	65bb      	str	r3, [r7, #88]	@ 0x58
3418f96e:	e001      	b.n	3418f974 <SAL_XSPI_CommandSendReadAddress+0x7a>
  }
  else
  {
    s_command.DQSMode          = HAL_XSPI_DQS_DISABLE;
3418f970:	2300      	movs	r3, #0
3418f972:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f974:	68fb      	ldr	r3, [r7, #12]
3418f976:	681b      	ldr	r3, [r3, #0]
3418f978:	f107 0110 	add.w	r1, r7, #16
3418f97c:	2264      	movs	r2, #100	@ 0x64
3418f97e:	4618      	mov	r0, r3
3418f980:	f7fe fa6a 	bl	3418de58 <HAL_XSPI_Command>
3418f984:	4603      	mov	r3, r0
3418f986:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ( retr == HAL_OK)
3418f98a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f98e:	2b00      	cmp	r3, #0
3418f990:	d109      	bne.n	3418f9a6 <SAL_XSPI_CommandSendReadAddress+0xac>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f992:	68fb      	ldr	r3, [r7, #12]
3418f994:	681b      	ldr	r3, [r3, #0]
3418f996:	2264      	movs	r2, #100	@ 0x64
3418f998:	6839      	ldr	r1, [r7, #0]
3418f99a:	4618      	mov	r0, r3
3418f99c:	f7fe fb5f 	bl	3418e05e <HAL_XSPI_Receive>
3418f9a0:	4603      	mov	r3, r0
3418f9a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418f9a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418f9aa:	2b00      	cmp	r3, #0
3418f9ac:	d004      	beq.n	3418f9b8 <SAL_XSPI_CommandSendReadAddress+0xbe>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418f9ae:	68fb      	ldr	r3, [r7, #12]
3418f9b0:	681b      	ldr	r3, [r3, #0]
3418f9b2:	4618      	mov	r0, r3
3418f9b4:	f7fe fd3c 	bl	3418e430 <HAL_XSPI_Abort>
  }
  return retr;
3418f9b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418f9bc:	4618      	mov	r0, r3
3418f9be:	3760      	adds	r7, #96	@ 0x60
3418f9c0:	46bd      	mov	sp, r7
3418f9c2:	bd80      	pop	{r7, pc}

3418f9c4 <SAL_XSPI_CheckStatusRegister>:

HAL_StatusTypeDef SAL_XSPI_CheckStatusRegister(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address,
                                               uint8_t MatchValue, uint8_t MatchMask, uint8_t ManuId,
                                               uint32_t Timeout)
{
3418f9c4:	b580      	push	{r7, lr}
3418f9c6:	b09e      	sub	sp, #120	@ 0x78
3418f9c8:	af00      	add	r7, sp, #0
3418f9ca:	60f8      	str	r0, [r7, #12]
3418f9cc:	607a      	str	r2, [r7, #4]
3418f9ce:	461a      	mov	r2, r3
3418f9d0:	460b      	mov	r3, r1
3418f9d2:	72fb      	strb	r3, [r7, #11]
3418f9d4:	4613      	mov	r3, r2
3418f9d6:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418f9d8:	68fb      	ldr	r3, [r7, #12]
3418f9da:	f107 0028 	add.w	r0, r7, #40	@ 0x28
3418f9de:	3304      	adds	r3, #4
3418f9e0:	224c      	movs	r2, #76	@ 0x4c
3418f9e2:	4619      	mov	r1, r3
3418f9e4:	f002 f9a9 	bl	34191d3a <memcpy>
  XSPI_AutoPollingTypeDef  s_config = {
3418f9e8:	7abb      	ldrb	r3, [r7, #10]
3418f9ea:	617b      	str	r3, [r7, #20]
3418f9ec:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
3418f9f0:	61bb      	str	r3, [r7, #24]
3418f9f2:	2300      	movs	r3, #0
3418f9f4:	61fb      	str	r3, [r7, #28]
3418f9f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
3418f9fa:	623b      	str	r3, [r7, #32]
3418f9fc:	2310      	movs	r3, #16
3418f9fe:	627b      	str	r3, [r7, #36]	@ 0x24
                                       .IntervalTime  = 0x10
                                      };
  HAL_StatusTypeDef retr;

  /* Initialize the reading of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418fa00:	68fb      	ldr	r3, [r7, #12]
3418fa02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418fa06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
3418fa08:	7afa      	ldrb	r2, [r7, #11]
3418fa0a:	4618      	mov	r0, r3
3418fa0c:	f000 f923 	bl	3418fc56 <XSPI_FormatCommand>
3418fa10:	4603      	mov	r3, r0
3418fa12:	633b      	str	r3, [r7, #48]	@ 0x30

  s_command.DataLength     = 1u;
3418fa14:	2301      	movs	r3, #1
3418fa16:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode        = HAL_XSPI_DQS_DISABLE;
3418fa18:	2300      	movs	r3, #0
3418fa1a:	673b      	str	r3, [r7, #112]	@ 0x70

  if (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
3418fa1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418fa1e:	2b01      	cmp	r3, #1
3418fa20:	d106      	bne.n	3418fa30 <SAL_XSPI_CheckStatusRegister+0x6c>
  {
    /* patch cypress to force 1 line on status read */
    s_command.DataMode    = HAL_XSPI_DATA_1_LINE;
3418fa22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418fa26:	663b      	str	r3, [r7, #96]	@ 0x60
    s_command.AddressMode = HAL_XSPI_DATA_NONE;
3418fa28:	2300      	movs	r3, #0
3418fa2a:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.DummyCycles = 0u;
3418fa2c:	2300      	movs	r3, #0
3418fa2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* @ is used only in 8 LINES format */
  if (s_command.DataMode == HAL_XSPI_DATA_8_LINES)
3418fa30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
3418fa32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418fa36:	d114      	bne.n	3418fa62 <SAL_XSPI_CheckStatusRegister+0x9e>
  {
    /* Specific case for Macronix memories : RDID and RDCR are not Data DTR  */
    if ((ManuId == EXTMEM_MANFACTURER_MACRONIX) && (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE))
3418fa38:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
3418fa3c:	2bc2      	cmp	r3, #194	@ 0xc2
3418fa3e:	d108      	bne.n	3418fa52 <SAL_XSPI_CheckStatusRegister+0x8e>
3418fa40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418fa42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418fa46:	d104      	bne.n	3418fa52 <SAL_XSPI_CheckStatusRegister+0x8e>
    {
      s_command.DQSMode        = HAL_XSPI_DQS_ENABLE;
3418fa48:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418fa4c:	673b      	str	r3, [r7, #112]	@ 0x70
      s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_DISABLE;
3418fa4e:	2300      	movs	r3, #0
3418fa50:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    s_command.AddressMode    = HAL_XSPI_ADDRESS_8_LINES;
3418fa52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418fa56:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
3418fa58:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418fa5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    s_command.Address        = Address;
3418fa5e:	687b      	ldr	r3, [r7, #4]
3418fa60:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418fa62:	68fb      	ldr	r3, [r7, #12]
3418fa64:	681b      	ldr	r3, [r3, #0]
3418fa66:	f107 0128 	add.w	r1, r7, #40	@ 0x28
3418fa6a:	2264      	movs	r2, #100	@ 0x64
3418fa6c:	4618      	mov	r0, r3
3418fa6e:	f7fe f9f3 	bl	3418de58 <HAL_XSPI_Command>
3418fa72:	4603      	mov	r3, r0
3418fa74:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if ( retr == HAL_OK)
3418fa78:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
3418fa7c:	2b00      	cmp	r3, #0
3418fa7e:	d10b      	bne.n	3418fa98 <SAL_XSPI_CheckStatusRegister+0xd4>
  {
    retr = HAL_XSPI_AutoPolling(SalXspi->hxspi, &s_config, Timeout);
3418fa80:	68fb      	ldr	r3, [r7, #12]
3418fa82:	681b      	ldr	r3, [r3, #0]
3418fa84:	f107 0114 	add.w	r1, r7, #20
3418fa88:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
3418fa8c:	4618      	mov	r0, r3
3418fa8e:	f7fe fb89 	bl	3418e1a4 <HAL_XSPI_AutoPolling>
3418fa92:	4603      	mov	r3, r0
3418fa94:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    DEBUG_AUTOPOLLING(SalXspi->hxspi->Instance->DR, s_config.MatchValue, s_config.MatchMask)
  }

  if (retr != HAL_OK )
3418fa98:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
3418fa9c:	2b00      	cmp	r3, #0
3418fa9e:	d004      	beq.n	3418faaa <SAL_XSPI_CheckStatusRegister+0xe6>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418faa0:	68fb      	ldr	r3, [r7, #12]
3418faa2:	681b      	ldr	r3, [r3, #0]
3418faa4:	4618      	mov	r0, r3
3418faa6:	f7fe fcc3 	bl	3418e430 <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
3418faaa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
3418faae:	4618      	mov	r0, r3
3418fab0:	3778      	adds	r7, #120	@ 0x78
3418fab2:	46bd      	mov	sp, r7
3418fab4:	bd80      	pop	{r7, pc}

3418fab6 <SAL_XSPI_EnableMapMode>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_EnableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t CommandRead, uint8_t DummyRead,
                                         uint8_t CommandWrite, uint8_t DummyWrite)
{
3418fab6:	b580      	push	{r7, lr}
3418fab8:	b09a      	sub	sp, #104	@ 0x68
3418faba:	af00      	add	r7, sp, #0
3418fabc:	6078      	str	r0, [r7, #4]
3418fabe:	4608      	mov	r0, r1
3418fac0:	4611      	mov	r1, r2
3418fac2:	461a      	mov	r2, r3
3418fac4:	4603      	mov	r3, r0
3418fac6:	70fb      	strb	r3, [r7, #3]
3418fac8:	460b      	mov	r3, r1
3418faca:	70bb      	strb	r3, [r7, #2]
3418facc:	4613      	mov	r3, r2
3418face:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418fad0:	687b      	ldr	r3, [r7, #4]
3418fad2:	f107 0018 	add.w	r0, r7, #24
3418fad6:	3304      	adds	r3, #4
3418fad8:	224c      	movs	r2, #76	@ 0x4c
3418fada:	4619      	mov	r1, r3
3418fadc:	f002 f92d 	bl	34191d3a <memcpy>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
3418fae0:	f107 0308 	add.w	r3, r7, #8
3418fae4:	2200      	movs	r2, #0
3418fae6:	601a      	str	r2, [r3, #0]
3418fae8:	605a      	str	r2, [r3, #4]
3418faea:	609a      	str	r2, [r3, #8]
3418faec:	60da      	str	r2, [r3, #12]

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3418faee:	2301      	movs	r3, #1
3418faf0:	61bb      	str	r3, [r7, #24]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandRead);
3418faf2:	687b      	ldr	r3, [r7, #4]
3418faf4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418faf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418fafa:	78fa      	ldrb	r2, [r7, #3]
3418fafc:	4618      	mov	r0, r3
3418fafe:	f000 f8aa 	bl	3418fc56 <XSPI_FormatCommand>
3418fb02:	4603      	mov	r3, r0
3418fb04:	623b      	str	r3, [r7, #32]
  s_command.DummyCycles = DummyRead;
3418fb06:	78bb      	ldrb	r3, [r7, #2]
3418fb08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418fb0a:	687b      	ldr	r3, [r7, #4]
3418fb0c:	681b      	ldr	r3, [r3, #0]
3418fb0e:	f107 0118 	add.w	r1, r7, #24
3418fb12:	2264      	movs	r2, #100	@ 0x64
3418fb14:	4618      	mov	r0, r3
3418fb16:	f7fe f99f 	bl	3418de58 <HAL_XSPI_Command>
3418fb1a:	4603      	mov	r3, r0
3418fb1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if ( retr  != HAL_OK)
3418fb20:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418fb24:	2b00      	cmp	r3, #0
3418fb26:	d12d      	bne.n	3418fb84 <SAL_XSPI_EnableMapMode+0xce>
  {
    goto error;
  }

  /* Initialize the read ID command */
  s_command.OperationType     = HAL_XSPI_OPTYPE_WRITE_CFG;
3418fb28:	2302      	movs	r3, #2
3418fb2a:	61bb      	str	r3, [r7, #24]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandWrite);
3418fb2c:	687b      	ldr	r3, [r7, #4]
3418fb2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418fb32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418fb34:	787a      	ldrb	r2, [r7, #1]
3418fb36:	4618      	mov	r0, r3
3418fb38:	f000 f88d 	bl	3418fc56 <XSPI_FormatCommand>
3418fb3c:	4603      	mov	r3, r0
3418fb3e:	623b      	str	r3, [r7, #32]
  s_command.DummyCycles = DummyWrite;
3418fb40:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
3418fb44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418fb46:	687b      	ldr	r3, [r7, #4]
3418fb48:	681b      	ldr	r3, [r3, #0]
3418fb4a:	f107 0118 	add.w	r1, r7, #24
3418fb4e:	2264      	movs	r2, #100	@ 0x64
3418fb50:	4618      	mov	r0, r3
3418fb52:	f7fe f981 	bl	3418de58 <HAL_XSPI_Command>
3418fb56:	4603      	mov	r3, r0
3418fb58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if ( retr  != HAL_OK)
3418fb5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418fb60:	2b00      	cmp	r3, #0
3418fb62:	d111      	bne.n	3418fb88 <SAL_XSPI_EnableMapMode+0xd2>
  {
    goto error;
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation  = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3418fb64:	2300      	movs	r3, #0
3418fb66:	60bb      	str	r3, [r7, #8]
  sMemMappedCfg.TimeoutPeriodClock = 0x50;
3418fb68:	2350      	movs	r3, #80	@ 0x50
3418fb6a:	60fb      	str	r3, [r7, #12]
  retr = HAL_XSPI_MemoryMapped(SalXspi->hxspi, &sMemMappedCfg);
3418fb6c:	687b      	ldr	r3, [r7, #4]
3418fb6e:	681b      	ldr	r3, [r3, #0]
3418fb70:	f107 0208 	add.w	r2, r7, #8
3418fb74:	4611      	mov	r1, r2
3418fb76:	4618      	mov	r0, r3
3418fb78:	f7fe fb9e 	bl	3418e2b8 <HAL_XSPI_MemoryMapped>
3418fb7c:	4603      	mov	r3, r0
3418fb7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
3418fb82:	e002      	b.n	3418fb8a <SAL_XSPI_EnableMapMode+0xd4>
    goto error;
3418fb84:	bf00      	nop
3418fb86:	e000      	b.n	3418fb8a <SAL_XSPI_EnableMapMode+0xd4>
    goto error;
3418fb88:	bf00      	nop

error:
  if (retr != HAL_OK )
3418fb8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418fb8e:	2b00      	cmp	r3, #0
3418fb90:	d004      	beq.n	3418fb9c <SAL_XSPI_EnableMapMode+0xe6>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418fb92:	687b      	ldr	r3, [r7, #4]
3418fb94:	681b      	ldr	r3, [r3, #0]
3418fb96:	4618      	mov	r0, r3
3418fb98:	f7fe fc4a 	bl	3418e430 <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
3418fb9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
3418fba0:	4618      	mov	r0, r3
3418fba2:	3768      	adds	r7, #104	@ 0x68
3418fba4:	46bd      	mov	sp, r7
3418fba6:	bd80      	pop	{r7, pc}

3418fba8 <SAL_XSPI_DisableMapMode>:

HAL_StatusTypeDef SAL_XSPI_DisableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi)
{
3418fba8:	b580      	push	{r7, lr}
3418fbaa:	b082      	sub	sp, #8
3418fbac:	af00      	add	r7, sp, #0
3418fbae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
3418fbb0:	f3bf 8f4f 	dsb	sy
}
3418fbb4:	bf00      	nop
  __DSB();
  return HAL_XSPI_Abort(SalXspi->hxspi);
3418fbb6:	687b      	ldr	r3, [r7, #4]
3418fbb8:	681b      	ldr	r3, [r3, #0]
3418fbba:	4618      	mov	r0, r3
3418fbbc:	f7fe fc38 	bl	3418e430 <HAL_XSPI_Abort>
3418fbc0:	4603      	mov	r3, r0
}
3418fbc2:	4618      	mov	r0, r3
3418fbc4:	3708      	adds	r7, #8
3418fbc6:	46bd      	mov	sp, r7
3418fbc8:	bd80      	pop	{r7, pc}

3418fbca <SAL_XSPI_UpdateMemoryType>:


HAL_StatusTypeDef SAL_XSPI_UpdateMemoryType(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_DataOrderTypeDef DataOrder)
{
3418fbca:	b480      	push	{r7}
3418fbcc:	b085      	sub	sp, #20
3418fbce:	af00      	add	r7, sp, #0
3418fbd0:	6078      	str	r0, [r7, #4]
3418fbd2:	460b      	mov	r3, r1
3418fbd4:	70fb      	strb	r3, [r7, #3]
HAL_StatusTypeDef retr = HAL_OK;
3418fbd6:	2300      	movs	r3, #0
3418fbd8:	73fb      	strb	r3, [r7, #15]

  /* read the memory type value */
  uint32_t memorytype = READ_REG(SalXspi->hxspi->Instance->DCR1) & XSPI_DCR1_MTYP;
3418fbda:	687b      	ldr	r3, [r7, #4]
3418fbdc:	681b      	ldr	r3, [r3, #0]
3418fbde:	681b      	ldr	r3, [r3, #0]
3418fbe0:	689b      	ldr	r3, [r3, #8]
3418fbe2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
3418fbe6:	60bb      	str	r3, [r7, #8]

  switch(DataOrder)
3418fbe8:	78fb      	ldrb	r3, [r7, #3]
3418fbea:	2b00      	cmp	r3, #0
3418fbec:	d11e      	bne.n	3418fc2c <SAL_XSPI_UpdateMemoryType+0x62>
  {
  case SAL_XSPI_ORDERINVERTED :
    if (memorytype == HAL_XSPI_MEMTYPE_MICRON) {
3418fbee:	68bb      	ldr	r3, [r7, #8]
3418fbf0:	2b00      	cmp	r3, #0
3418fbf2:	d103      	bne.n	3418fbfc <SAL_XSPI_UpdateMemoryType+0x32>
      memorytype = HAL_XSPI_MEMTYPE_MACRONIX;
3418fbf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418fbf8:	60bb      	str	r3, [r7, #8]
3418fbfa:	e008      	b.n	3418fc0e <SAL_XSPI_UpdateMemoryType+0x44>
    } else if (memorytype == HAL_XSPI_MEMTYPE_MACRONIX) {
3418fbfc:	68bb      	ldr	r3, [r7, #8]
3418fbfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418fc02:	d102      	bne.n	3418fc0a <SAL_XSPI_UpdateMemoryType+0x40>
      memorytype = HAL_XSPI_MEMTYPE_MICRON;
3418fc04:	2300      	movs	r3, #0
3418fc06:	60bb      	str	r3, [r7, #8]
3418fc08:	e001      	b.n	3418fc0e <SAL_XSPI_UpdateMemoryType+0x44>
    } else {
      retr = HAL_ERROR;
3418fc0a:	2301      	movs	r3, #1
3418fc0c:	73fb      	strb	r3, [r7, #15]
    }
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_MTYP, memorytype);
3418fc0e:	687b      	ldr	r3, [r7, #4]
3418fc10:	681b      	ldr	r3, [r3, #0]
3418fc12:	681b      	ldr	r3, [r3, #0]
3418fc14:	689b      	ldr	r3, [r3, #8]
3418fc16:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
3418fc1a:	687b      	ldr	r3, [r7, #4]
3418fc1c:	681b      	ldr	r3, [r3, #0]
3418fc1e:	681b      	ldr	r3, [r3, #0]
3418fc20:	68ba      	ldr	r2, [r7, #8]
3418fc22:	430a      	orrs	r2, r1
3418fc24:	609a      	str	r2, [r3, #8]
    break;
3418fc26:	bf00      	nop
    return HAL_ERROR;
    break;
  }

  DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_UpdateMemoryType::"); DEBUG_PARAM_INT(memorytype); DEBUG_PARAM_END();
  return retr;
3418fc28:	7bfb      	ldrb	r3, [r7, #15]
3418fc2a:	e000      	b.n	3418fc2e <SAL_XSPI_UpdateMemoryType+0x64>
    return HAL_ERROR;
3418fc2c:	2301      	movs	r3, #1
}
3418fc2e:	4618      	mov	r0, r3
3418fc30:	3714      	adds	r7, #20
3418fc32:	46bd      	mov	sp, r7
3418fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fc38:	4770      	bx	lr

3418fc3a <SAL_XSPI_Abort>:

HAL_StatusTypeDef SAL_XSPI_Abort(SAL_XSPI_ObjectTypeDef *SalXspi)
{
3418fc3a:	b580      	push	{r7, lr}
3418fc3c:	b082      	sub	sp, #8
3418fc3e:	af00      	add	r7, sp, #0
3418fc40:	6078      	str	r0, [r7, #4]
  return HAL_XSPI_Abort(SalXspi->hxspi);
3418fc42:	687b      	ldr	r3, [r7, #4]
3418fc44:	681b      	ldr	r3, [r3, #0]
3418fc46:	4618      	mov	r0, r3
3418fc48:	f7fe fbf2 	bl	3418e430 <HAL_XSPI_Abort>
3418fc4c:	4603      	mov	r3, r0
}
3418fc4e:	4618      	mov	r0, r3
3418fc50:	3708      	adds	r7, #8
3418fc52:	46bd      	mov	sp, r7
3418fc54:	bd80      	pop	{r7, pc}

3418fc56 <XSPI_FormatCommand>:
  * @param InstructionWidth instruction width
  * @param Command command
  * @return the formatted command
  */
uint16_t XSPI_FormatCommand(uint8_t CommandExtension, uint32_t InstructionWidth, uint8_t Command)
{
3418fc56:	b480      	push	{r7}
3418fc58:	b085      	sub	sp, #20
3418fc5a:	af00      	add	r7, sp, #0
3418fc5c:	4603      	mov	r3, r0
3418fc5e:	6039      	str	r1, [r7, #0]
3418fc60:	71fb      	strb	r3, [r7, #7]
3418fc62:	4613      	mov	r3, r2
3418fc64:	71bb      	strb	r3, [r7, #6]
  uint16_t retr;
  if  (InstructionWidth == HAL_XSPI_INSTRUCTION_16_BITS)
3418fc66:	683b      	ldr	r3, [r7, #0]
3418fc68:	2b10      	cmp	r3, #16
3418fc6a:	d114      	bne.n	3418fc96 <XSPI_FormatCommand+0x40>
  {
    /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
    /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
    /* 0b11 Command and Command Extension forms a 16 bit command word :: Not yet handled */
    retr = ((uint16_t)Command << 8u);
3418fc6c:	79bb      	ldrb	r3, [r7, #6]
3418fc6e:	b29b      	uxth	r3, r3
3418fc70:	021b      	lsls	r3, r3, #8
3418fc72:	81fb      	strh	r3, [r7, #14]
    if (CommandExtension == 1u)
3418fc74:	79fb      	ldrb	r3, [r7, #7]
3418fc76:	2b01      	cmp	r3, #1
3418fc78:	d107      	bne.n	3418fc8a <XSPI_FormatCommand+0x34>
    {
       retr|=  (uint8_t)(~Command & 0xFFu);
3418fc7a:	79bb      	ldrb	r3, [r7, #6]
3418fc7c:	43db      	mvns	r3, r3
3418fc7e:	b2db      	uxtb	r3, r3
3418fc80:	461a      	mov	r2, r3
3418fc82:	89fb      	ldrh	r3, [r7, #14]
3418fc84:	4313      	orrs	r3, r2
3418fc86:	81fb      	strh	r3, [r7, #14]
3418fc88:	e007      	b.n	3418fc9a <XSPI_FormatCommand+0x44>
    }
    else
    {
       retr|=  (uint8_t)(Command & 0xFFu);
3418fc8a:	79bb      	ldrb	r3, [r7, #6]
3418fc8c:	b29a      	uxth	r2, r3
3418fc8e:	89fb      	ldrh	r3, [r7, #14]
3418fc90:	4313      	orrs	r3, r2
3418fc92:	81fb      	strh	r3, [r7, #14]
3418fc94:	e001      	b.n	3418fc9a <XSPI_FormatCommand+0x44>
    }
  }
  else
  {
    retr = Command;
3418fc96:	79bb      	ldrb	r3, [r7, #6]
3418fc98:	81fb      	strh	r3, [r7, #14]
  }

  return retr;
3418fc9a:	89fb      	ldrh	r3, [r7, #14]
}
3418fc9c:	4618      	mov	r0, r3
3418fc9e:	3714      	adds	r7, #20
3418fca0:	46bd      	mov	sp, r7
3418fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418fca6:	4770      	bx	lr

3418fca8 <XSPI_Transmit>:
  * @param SalXspi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Transmit(SAL_XSPI_ObjectTypeDef *SalXspi, const uint8_t *Data)
{
3418fca8:	b580      	push	{r7, lr}
3418fcaa:	b084      	sub	sp, #16
3418fcac:	af00      	add	r7, sp, #0
3418fcae:	6078      	str	r0, [r7, #4]
3418fcb0:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmatx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* transmit data */
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418fcb2:	687b      	ldr	r3, [r7, #4]
3418fcb4:	681b      	ldr	r3, [r3, #0]
3418fcb6:	2264      	movs	r2, #100	@ 0x64
3418fcb8:	6839      	ldr	r1, [r7, #0]
3418fcba:	4618      	mov	r0, r3
3418fcbc:	f7fe f95c 	bl	3418df78 <HAL_XSPI_Transmit>
3418fcc0:	4603      	mov	r3, r0
3418fcc2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return retr;
3418fcc4:	7bfb      	ldrb	r3, [r7, #15]
}
3418fcc6:	4618      	mov	r0, r3
3418fcc8:	3710      	adds	r7, #16
3418fcca:	46bd      	mov	sp, r7
3418fccc:	bd80      	pop	{r7, pc}

3418fcce <XSPI_Receive>:
  * @param SalXspi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Receive(SAL_XSPI_ObjectTypeDef *SalXspi,  uint8_t *Data)
{
3418fcce:	b580      	push	{r7, lr}
3418fcd0:	b084      	sub	sp, #16
3418fcd2:	af00      	add	r7, sp, #0
3418fcd4:	6078      	str	r0, [r7, #4]
3418fcd6:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmarx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* Reception of the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418fcd8:	687b      	ldr	r3, [r7, #4]
3418fcda:	681b      	ldr	r3, [r3, #0]
3418fcdc:	2264      	movs	r2, #100	@ 0x64
3418fcde:	6839      	ldr	r1, [r7, #0]
3418fce0:	4618      	mov	r0, r3
3418fce2:	f7fe f9bc 	bl	3418e05e <HAL_XSPI_Receive>
3418fce6:	4603      	mov	r3, r0
3418fce8:	73fb      	strb	r3, [r7, #15]
        retr = HAL_ERROR;
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  return retr;
3418fcea:	7bfb      	ldrb	r3, [r7, #15]
}
3418fcec:	4618      	mov	r0, r3
3418fcee:	3710      	adds	r7, #16
3418fcf0:	46bd      	mov	sp, r7
3418fcf2:	bd80      	pop	{r7, pc}

3418fcf4 <SFDP_ReadHeader>:
 * @param Object memory Object
 * @param sfdp_header data of the SFDP header
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef SFDP_ReadHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFDP_HeaderTypeDef *sfdp_header)
{
3418fcf4:	b580      	push	{r7, lr}
3418fcf6:	b084      	sub	sp, #16
3418fcf8:	af00      	add	r7, sp, #0
3418fcfa:	6078      	str	r0, [r7, #4]
3418fcfc:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr;
  uint8_t retry_counter = 0;
3418fcfe:	2300      	movs	r3, #0
3418fd00:	73bb      	strb	r3, [r7, #14]
  SFDP_DEBUG_STR(__func__);

  do {
    /* Reset the signature value */
    sfdp_header->Signature = 0;
3418fd02:	683b      	ldr	r3, [r7, #0]
3418fd04:	2200      	movs	r2, #0
3418fd06:	601a      	str	r2, [r3, #0]

    /* send the SFDP command to read the header */
    if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfdp_private.SALObject, 0, (uint8_t*)sfdp_header, SFDP_HEADER_SIZE))
3418fd08:	687b      	ldr	r3, [r7, #4]
3418fd0a:	f103 0008 	add.w	r0, r3, #8
3418fd0e:	2308      	movs	r3, #8
3418fd10:	683a      	ldr	r2, [r7, #0]
3418fd12:	2100      	movs	r1, #0
3418fd14:	f7ff fbbe 	bl	3418f494 <SAL_XSPI_GetSFDP>
3418fd18:	4603      	mov	r3, r0
3418fd1a:	2b00      	cmp	r3, #0
3418fd1c:	d002      	beq.n	3418fd24 <SFDP_ReadHeader+0x30>
    {
      retr = EXTMEM_SFDP_ERROR_SFDPREAD;
3418fd1e:	2303      	movs	r3, #3
3418fd20:	73fb      	strb	r3, [r7, #15]
      goto error;
3418fd22:	e01f      	b.n	3418fd64 <SFDP_ReadHeader+0x70>
    }

    /* view the header signature value  */
    SFDP_DEBUG_INT("SFDP signature::", sfdp_header->Signature);

    switch(CheckSFDP_Signature(Object, sfdp_header->Signature))
3418fd24:	683b      	ldr	r3, [r7, #0]
3418fd26:	681b      	ldr	r3, [r3, #0]
3418fd28:	4619      	mov	r1, r3
3418fd2a:	6878      	ldr	r0, [r7, #4]
3418fd2c:	f001 fc54 	bl	341915d8 <CheckSFDP_Signature>
3418fd30:	4603      	mov	r3, r0
3418fd32:	2b00      	cmp	r3, #0
3418fd34:	d002      	beq.n	3418fd3c <SFDP_ReadHeader+0x48>
3418fd36:	2b05      	cmp	r3, #5
3418fd38:	d005      	beq.n	3418fd46 <SFDP_ReadHeader+0x52>
3418fd3a:	e00a      	b.n	3418fd52 <SFDP_ReadHeader+0x5e>
    {
    case EXTMEM_SFDP_OK:
      SFDP_DEBUG_INT("param_number=", sfdp_header->param_number);
      SFDP_DEBUG_INT("AccessProtocol=", sfdp_header->AccessProtocol);
      retr = EXTMEM_SFDP_OK;
3418fd3c:	2300      	movs	r3, #0
3418fd3e:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
3418fd40:	2302      	movs	r3, #2
3418fd42:	73bb      	strb	r3, [r7, #14]
    break;
3418fd44:	e00a      	b.n	3418fd5c <SFDP_ReadHeader+0x68>
    case EXTMEM_SFDP_ERROR_SIGNATUREMTYPE:
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418fd46:	2304      	movs	r3, #4
3418fd48:	73fb      	strb	r3, [r7, #15]
      retry_counter++;
3418fd4a:	7bbb      	ldrb	r3, [r7, #14]
3418fd4c:	3301      	adds	r3, #1
3418fd4e:	73bb      	strb	r3, [r7, #14]
      break;
3418fd50:	e004      	b.n	3418fd5c <SFDP_ReadHeader+0x68>
    /* case EXTMEM_SFDP_ERROR_SIGNATURE :*/
    default :
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418fd52:	2304      	movs	r3, #4
3418fd54:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
3418fd56:	2302      	movs	r3, #2
3418fd58:	73bb      	strb	r3, [r7, #14]
      break;
3418fd5a:	bf00      	nop
    }
  } while(retry_counter < 2u);
3418fd5c:	7bbb      	ldrb	r3, [r7, #14]
3418fd5e:	2b01      	cmp	r3, #1
3418fd60:	d9cf      	bls.n	3418fd02 <SFDP_ReadHeader+0xe>

error:
3418fd62:	bf00      	nop
  return retr;
3418fd64:	7bfb      	ldrb	r3, [r7, #15]
}
3418fd66:	4618      	mov	r0, r3
3418fd68:	3710      	adds	r7, #16
3418fd6a:	46bd      	mov	sp, r7
3418fd6c:	bd80      	pop	{r7, pc}
	...

3418fd70 <SFDP_GetHeader>:


SFDP_StatusTypeDef SFDP_GetHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFDP_HeaderTypeDef *sfdp_header)
{
3418fd70:	b590      	push	{r4, r7, lr}
3418fd72:	b089      	sub	sp, #36	@ 0x24
3418fd74:	af00      	add	r7, sp, #0
3418fd76:	6078      	str	r0, [r7, #4]
3418fd78:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418fd7a:	2304      	movs	r3, #4
3418fd7c:	77fb      	strb	r3, [r7, #31]
  SFDP_DEBUG_STR(__func__);
  const TableConfig_Typedef table_config[] =
3418fd7e:	4b2a      	ldr	r3, [pc, #168]	@ (3418fe28 <SFDP_GetHeader+0xb8>)
3418fd80:	f107 040c 	add.w	r4, r7, #12
3418fd84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
3418fd86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {PHY_LINK_8D8D8D, 10u},
    {PHY_LINK_8D8D8D, 16u}
  };

  /* loop to find the link configuration of the memory */
  for (uint8_t index = 0u;
3418fd8a:	2300      	movs	r3, #0
3418fd8c:	77bb      	strb	r3, [r7, #30]
3418fd8e:	e040      	b.n	3418fe12 <SFDP_GetHeader+0xa2>
  {
    /* Set the command mode */
    SFDP_DEBUG_STR("try a command configuration");

    /* Configure the link */
    Object->sfdp_private.DriverInfo.SpiPhyLink  = table_config[index].PhyLink;
3418fd90:	7fbb      	ldrb	r3, [r7, #30]
3418fd92:	005b      	lsls	r3, r3, #1
3418fd94:	3320      	adds	r3, #32
3418fd96:	443b      	add	r3, r7
3418fd98:	f813 2c14 	ldrb.w	r2, [r3, #-20]
3418fd9c:	687b      	ldr	r3, [r7, #4]
3418fd9e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    (void)SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_PHY_LINK, &Object->sfdp_private.DriverInfo.SpiPhyLink);
3418fda2:	687b      	ldr	r3, [r7, #4]
3418fda4:	f103 0008 	add.w	r0, r3, #8
3418fda8:	687b      	ldr	r3, [r7, #4]
3418fdaa:	3364      	adds	r3, #100	@ 0x64
3418fdac:	461a      	mov	r2, r3
3418fdae:	2100      	movs	r1, #0
3418fdb0:	f7ff fa1e 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>
    SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfdp_private.SALObject, table_config[index].DummyCycle);
3418fdb4:	7fbb      	ldrb	r3, [r7, #30]
3418fdb6:	005b      	lsls	r3, r3, #1
3418fdb8:	3320      	adds	r3, #32
3418fdba:	443b      	add	r3, r7
3418fdbc:	f813 2c13 	ldrb.w	r2, [r3, #-19]
3418fdc0:	687b      	ldr	r3, [r7, #4]
3418fdc2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Loop on the instruction extension */
    for (uint8_t IExt = 0u;
3418fdc6:	2300      	movs	r3, #0
3418fdc8:	777b      	strb	r3, [r7, #29]
3418fdca:	e017      	b.n	3418fdfc <SFDP_GetHeader+0x8c>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
    {
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfdp_private.SALObject, IExt);
3418fdcc:	687b      	ldr	r3, [r7, #4]
3418fdce:	7f7a      	ldrb	r2, [r7, #29]
3418fdd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Read the sfdp header */
      if (EXTMEM_SFDP_OK == SFDP_ReadHeader(Object, sfdp_header))
3418fdd4:	6839      	ldr	r1, [r7, #0]
3418fdd6:	6878      	ldr	r0, [r7, #4]
3418fdd8:	f7ff ff8c 	bl	3418fcf4 <SFDP_ReadHeader>
3418fddc:	4603      	mov	r3, r0
3418fdde:	2b00      	cmp	r3, #0
3418fde0:	d101      	bne.n	3418fde6 <SFDP_GetHeader+0x76>
      {
        retr = EXTMEM_SFDP_OK;
3418fde2:	2300      	movs	r3, #0
3418fde4:	77fb      	strb	r3, [r7, #31]
      }

      if (table_config[index].PhyLink < PHY_LINK_4S4S4S)
3418fde6:	7fbb      	ldrb	r3, [r7, #30]
3418fde8:	005b      	lsls	r3, r3, #1
3418fdea:	3320      	adds	r3, #32
3418fdec:	443b      	add	r3, r7
3418fdee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
3418fdf2:	2b03      	cmp	r3, #3
3418fdf4:	d909      	bls.n	3418fe0a <SFDP_GetHeader+0x9a>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
3418fdf6:	7f7b      	ldrb	r3, [r7, #29]
3418fdf8:	3301      	adds	r3, #1
3418fdfa:	777b      	strb	r3, [r7, #29]
3418fdfc:	7f7b      	ldrb	r3, [r7, #29]
3418fdfe:	2b01      	cmp	r3, #1
3418fe00:	d804      	bhi.n	3418fe0c <SFDP_GetHeader+0x9c>
3418fe02:	7ffb      	ldrb	r3, [r7, #31]
3418fe04:	2b04      	cmp	r3, #4
3418fe06:	d0e1      	beq.n	3418fdcc <SFDP_GetHeader+0x5c>
3418fe08:	e000      	b.n	3418fe0c <SFDP_GetHeader+0x9c>
      {
        /* Config 1 is invalid so exit the loop */
        break;
3418fe0a:	bf00      	nop
           ; index++)
3418fe0c:	7fbb      	ldrb	r3, [r7, #30]
3418fe0e:	3301      	adds	r3, #1
3418fe10:	77bb      	strb	r3, [r7, #30]
       (index < (sizeof(table_config)/sizeof(TableConfig_Typedef))) &&
3418fe12:	7fbb      	ldrb	r3, [r7, #30]
3418fe14:	2b07      	cmp	r3, #7
3418fe16:	d802      	bhi.n	3418fe1e <SFDP_GetHeader+0xae>
3418fe18:	7ffb      	ldrb	r3, [r7, #31]
3418fe1a:	2b04      	cmp	r3, #4
3418fe1c:	d0b8      	beq.n	3418fd90 <SFDP_GetHeader+0x20>
      }
    }
  }
  return retr;
3418fe1e:	7ffb      	ldrb	r3, [r7, #31]
}
3418fe20:	4618      	mov	r0, r3
3418fe22:	3724      	adds	r7, #36	@ 0x24
3418fe24:	46bd      	mov	sp, r7
3418fe26:	bd90      	pop	{r4, r7, pc}
3418fe28:	34192834 	.word	0x34192834

3418fe2c <SFDP_CollectData>:

SFDP_StatusTypeDef SFDP_CollectData(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418fe2c:	b580      	push	{r7, lr}
3418fe2e:	b088      	sub	sp, #32
3418fe30:	af00      	add	r7, sp, #0
3418fe32:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418fe34:	2300      	movs	r3, #0
3418fe36:	77fb      	strb	r3, [r7, #31]
  uint32_t sfdp_address = SFDP_HEADER_SIZE;
3418fe38:	2308      	movs	r3, #8
3418fe3a:	61bb      	str	r3, [r7, #24]
  SFDP_DEBUG_STR(__func__);

  /* reset the table mask */
  Object->sfdp_private.Sfdp_table_mask = 0;
3418fe3c:	687b      	ldr	r3, [r7, #4]
3418fe3e:	2200      	movs	r2, #0
3418fe40:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* reset the param info */
  (void)memset(sfdp_param_info, 0x0, sizeof(sfdp_param_info));
3418fe44:	2278      	movs	r2, #120	@ 0x78
3418fe46:	2100      	movs	r1, #0
3418fe48:	485f      	ldr	r0, [pc, #380]	@ (3418ffc8 <SFDP_CollectData+0x19c>)
3418fe4a:	f001 fefb 	bl	34191c44 <memset>

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfdp_private.Sfdp_param_number + 1u); index++)
3418fe4e:	2300      	movs	r3, #0
3418fe50:	75fb      	strb	r3, [r7, #23]
3418fe52:	e027      	b.n	3418fea4 <SFDP_CollectData+0x78>
  {
    CHECK_FUNCTION_CALL(sfdp_get_paraminfo(Object, sfdp_address, &sfdp_param_info[index]))
3418fe54:	7dfa      	ldrb	r2, [r7, #23]
3418fe56:	4613      	mov	r3, r2
3418fe58:	005b      	lsls	r3, r3, #1
3418fe5a:	4413      	add	r3, r2
3418fe5c:	009b      	lsls	r3, r3, #2
3418fe5e:	4a5a      	ldr	r2, [pc, #360]	@ (3418ffc8 <SFDP_CollectData+0x19c>)
3418fe60:	4413      	add	r3, r2
3418fe62:	461a      	mov	r2, r3
3418fe64:	69b9      	ldr	r1, [r7, #24]
3418fe66:	6878      	ldr	r0, [r7, #4]
3418fe68:	f000 ffe4 	bl	34190e34 <sfdp_get_paraminfo>
3418fe6c:	4603      	mov	r3, r0
3418fe6e:	77fb      	strb	r3, [r7, #31]
3418fe70:	7ffb      	ldrb	r3, [r7, #31]
3418fe72:	2b00      	cmp	r3, #0
3418fe74:	f040 80a2 	bne.w	3418ffbc <SFDP_CollectData+0x190>
    Object->sfdp_private.Sfdp_table_mask |= (uint32_t)sfdp_param_info[index].type;
3418fe78:	687b      	ldr	r3, [r7, #4]
3418fe7a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
3418fe7e:	7dfa      	ldrb	r2, [r7, #23]
3418fe80:	4851      	ldr	r0, [pc, #324]	@ (3418ffc8 <SFDP_CollectData+0x19c>)
3418fe82:	4613      	mov	r3, r2
3418fe84:	005b      	lsls	r3, r3, #1
3418fe86:	4413      	add	r3, r2
3418fe88:	009b      	lsls	r3, r3, #2
3418fe8a:	4403      	add	r3, r0
3418fe8c:	681b      	ldr	r3, [r3, #0]
3418fe8e:	ea41 0203 	orr.w	r2, r1, r3
3418fe92:	687b      	ldr	r3, [r7, #4]
3418fe94:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    sfdp_address+= SFDP_PARAM_HEADER_SIZE;
3418fe98:	69bb      	ldr	r3, [r7, #24]
3418fe9a:	3308      	adds	r3, #8
3418fe9c:	61bb      	str	r3, [r7, #24]
  for(uint8_t index = 0u; index <  (Object->sfdp_private.Sfdp_param_number + 1u); index++)
3418fe9e:	7dfb      	ldrb	r3, [r7, #23]
3418fea0:	3301      	adds	r3, #1
3418fea2:	75fb      	strb	r3, [r7, #23]
3418fea4:	7dfa      	ldrb	r2, [r7, #23]
3418fea6:	687b      	ldr	r3, [r7, #4]
3418fea8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
3418feac:	3301      	adds	r3, #1
3418feae:	429a      	cmp	r2, r3
3418feb0:	d3d0      	bcc.n	3418fe54 <SFDP_CollectData+0x28>
  }

  /* Read each table param to extract the information to build the driver */
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFDP_PARAMID_UNKNOWN; index++)
3418feb2:	2300      	movs	r3, #0
3418feb4:	75bb      	strb	r3, [r7, #22]
3418feb6:	e075      	b.n	3418ffa4 <SFDP_CollectData+0x178>
  {
    uint8_t *ptr = NULL;
3418feb8:	2300      	movs	r3, #0
3418feba:	613b      	str	r3, [r7, #16]
    uint32_t size = sfdp_param_info[index].size;
3418febc:	7dba      	ldrb	r2, [r7, #22]
3418febe:	4942      	ldr	r1, [pc, #264]	@ (3418ffc8 <SFDP_CollectData+0x19c>)
3418fec0:	4613      	mov	r3, r2
3418fec2:	005b      	lsls	r3, r3, #1
3418fec4:	4413      	add	r3, r2
3418fec6:	009b      	lsls	r3, r3, #2
3418fec8:	440b      	add	r3, r1
3418feca:	3308      	adds	r3, #8
3418fecc:	781b      	ldrb	r3, [r3, #0]
3418fece:	60fb      	str	r3, [r7, #12]
    switch(sfdp_param_info[index].type)
3418fed0:	7dba      	ldrb	r2, [r7, #22]
3418fed2:	493d      	ldr	r1, [pc, #244]	@ (3418ffc8 <SFDP_CollectData+0x19c>)
3418fed4:	4613      	mov	r3, r2
3418fed6:	005b      	lsls	r3, r3, #1
3418fed8:	4413      	add	r3, r2
3418feda:	009b      	lsls	r3, r3, #2
3418fedc:	440b      	add	r3, r1
3418fede:	681b      	ldr	r3, [r3, #0]
3418fee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418fee4:	d029      	beq.n	3418ff3a <SFDP_CollectData+0x10e>
3418fee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418feea:	d829      	bhi.n	3418ff40 <SFDP_CollectData+0x114>
3418feec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418fef0:	d01d      	beq.n	3418ff2e <SFDP_CollectData+0x102>
3418fef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418fef6:	d823      	bhi.n	3418ff40 <SFDP_CollectData+0x114>
3418fef8:	2b80      	cmp	r3, #128	@ 0x80
3418fefa:	d01b      	beq.n	3418ff34 <SFDP_CollectData+0x108>
3418fefc:	2b80      	cmp	r3, #128	@ 0x80
3418fefe:	d81f      	bhi.n	3418ff40 <SFDP_CollectData+0x114>
3418ff00:	2b08      	cmp	r3, #8
3418ff02:	d002      	beq.n	3418ff0a <SFDP_CollectData+0xde>
3418ff04:	2b40      	cmp	r3, #64	@ 0x40
3418ff06:	d00f      	beq.n	3418ff28 <SFDP_CollectData+0xfc>
    case SFDP_PARAMID_OCTAL_DDR:
      ptr = JEDEC_OctalDdr.data_BYTE;
      break;
    default :
      SFDP_DEBUG_STR("the table is not yet handled by the SW");
      break;
3418ff08:	e01a      	b.n	3418ff40 <SFDP_CollectData+0x114>
      JEDEC_Basic.size = sfdp_param_info[index].size;
3418ff0a:	7dba      	ldrb	r2, [r7, #22]
3418ff0c:	492e      	ldr	r1, [pc, #184]	@ (3418ffc8 <SFDP_CollectData+0x19c>)
3418ff0e:	4613      	mov	r3, r2
3418ff10:	005b      	lsls	r3, r3, #1
3418ff12:	4413      	add	r3, r2
3418ff14:	009b      	lsls	r3, r3, #2
3418ff16:	440b      	add	r3, r1
3418ff18:	3308      	adds	r3, #8
3418ff1a:	781b      	ldrb	r3, [r3, #0]
3418ff1c:	461a      	mov	r2, r3
3418ff1e:	4b2b      	ldr	r3, [pc, #172]	@ (3418ffcc <SFDP_CollectData+0x1a0>)
3418ff20:	601a      	str	r2, [r3, #0]
      ptr = JEDEC_Basic.Params.data_BYTE;
3418ff22:	4b2b      	ldr	r3, [pc, #172]	@ (3418ffd0 <SFDP_CollectData+0x1a4>)
3418ff24:	613b      	str	r3, [r7, #16]
      break;
3418ff26:	e00c      	b.n	3418ff42 <SFDP_CollectData+0x116>
      ptr = JEDEC_Address4Bytes.data_BYTE;
3418ff28:	4b2a      	ldr	r3, [pc, #168]	@ (3418ffd4 <SFDP_CollectData+0x1a8>)
3418ff2a:	613b      	str	r3, [r7, #16]
      break;
3418ff2c:	e009      	b.n	3418ff42 <SFDP_CollectData+0x116>
      ptr = JEDEC_SCCR_Map.data_b;
3418ff2e:	4b2a      	ldr	r3, [pc, #168]	@ (3418ffd8 <SFDP_CollectData+0x1ac>)
3418ff30:	613b      	str	r3, [r7, #16]
      break;
3418ff32:	e006      	b.n	3418ff42 <SFDP_CollectData+0x116>
      ptr = JEDEC_XSPI10.data_BYTE;
3418ff34:	4b29      	ldr	r3, [pc, #164]	@ (3418ffdc <SFDP_CollectData+0x1b0>)
3418ff36:	613b      	str	r3, [r7, #16]
      break;
3418ff38:	e003      	b.n	3418ff42 <SFDP_CollectData+0x116>
      ptr = JEDEC_OctalDdr.data_BYTE;
3418ff3a:	4b29      	ldr	r3, [pc, #164]	@ (3418ffe0 <SFDP_CollectData+0x1b4>)
3418ff3c:	613b      	str	r3, [r7, #16]
      break;
3418ff3e:	e000      	b.n	3418ff42 <SFDP_CollectData+0x116>
      break;
3418ff40:	bf00      	nop
    }
    if (ptr != NULL)
3418ff42:	693b      	ldr	r3, [r7, #16]
3418ff44:	2b00      	cmp	r3, #0
3418ff46:	d016      	beq.n	3418ff76 <SFDP_CollectData+0x14a>
    {
      if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfdp_private.SALObject,
3418ff48:	687b      	ldr	r3, [r7, #4]
3418ff4a:	f103 0008 	add.w	r0, r3, #8
3418ff4e:	7dba      	ldrb	r2, [r7, #22]
3418ff50:	491d      	ldr	r1, [pc, #116]	@ (3418ffc8 <SFDP_CollectData+0x19c>)
3418ff52:	4613      	mov	r3, r2
3418ff54:	005b      	lsls	r3, r3, #1
3418ff56:	4413      	add	r3, r2
3418ff58:	009b      	lsls	r3, r3, #2
3418ff5a:	440b      	add	r3, r1
3418ff5c:	3304      	adds	r3, #4
3418ff5e:	6819      	ldr	r1, [r3, #0]
3418ff60:	68fb      	ldr	r3, [r7, #12]
3418ff62:	009b      	lsls	r3, r3, #2
3418ff64:	693a      	ldr	r2, [r7, #16]
3418ff66:	f7ff fa95 	bl	3418f494 <SAL_XSPI_GetSFDP>
3418ff6a:	4603      	mov	r3, r0
3418ff6c:	2b00      	cmp	r3, #0
3418ff6e:	d002      	beq.n	3418ff76 <SFDP_CollectData+0x14a>
                                     sfdp_param_info[index].address,
                                     ptr, size * 4u))
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
3418ff70:	230c      	movs	r3, #12
3418ff72:	77fb      	strb	r3, [r7, #31]
        goto error;
3418ff74:	e022      	b.n	3418ffbc <SFDP_CollectData+0x190>
      }
    }

    if (SFDP_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[index].type)
3418ff76:	7dba      	ldrb	r2, [r7, #22]
3418ff78:	4913      	ldr	r1, [pc, #76]	@ (3418ffc8 <SFDP_CollectData+0x19c>)
3418ff7a:	4613      	mov	r3, r2
3418ff7c:	005b      	lsls	r3, r3, #1
3418ff7e:	4413      	add	r3, r2
3418ff80:	009b      	lsls	r3, r3, #2
3418ff82:	440b      	add	r3, r1
3418ff84:	681b      	ldr	r3, [r3, #0]
3418ff86:	2b08      	cmp	r3, #8
3418ff88:	d109      	bne.n	3418ff9e <SFDP_CollectData+0x172>
    {
      /* save data about the reset procedure */
      Object->sfdp_private.Reset_info = JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support;
3418ff8a:	4b10      	ldr	r3, [pc, #64]	@ (3418ffcc <SFDP_CollectData+0x1a0>)
3418ff8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418ff90:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418ff94:	b2db      	uxtb	r3, r3
3418ff96:	461a      	mov	r2, r3
3418ff98:	687b      	ldr	r3, [r7, #4]
3418ff9a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFDP_PARAMID_UNKNOWN; index++)
3418ff9e:	7dbb      	ldrb	r3, [r7, #22]
3418ffa0:	3301      	adds	r3, #1
3418ffa2:	75bb      	strb	r3, [r7, #22]
3418ffa4:	7dba      	ldrb	r2, [r7, #22]
3418ffa6:	4908      	ldr	r1, [pc, #32]	@ (3418ffc8 <SFDP_CollectData+0x19c>)
3418ffa8:	4613      	mov	r3, r2
3418ffaa:	005b      	lsls	r3, r3, #1
3418ffac:	4413      	add	r3, r2
3418ffae:	009b      	lsls	r3, r3, #2
3418ffb0:	440b      	add	r3, r1
3418ffb2:	681b      	ldr	r3, [r3, #0]
3418ffb4:	2b00      	cmp	r3, #0
3418ffb6:	f47f af7f 	bne.w	3418feb8 <SFDP_CollectData+0x8c>
    }
  }

error:
3418ffba:	bf00      	nop
  return retr;
3418ffbc:	7ffb      	ldrb	r3, [r7, #31]
}
3418ffbe:	4618      	mov	r0, r3
3418ffc0:	3720      	adds	r7, #32
3418ffc2:	46bd      	mov	sp, r7
3418ffc4:	bd80      	pop	{r7, pc}
3418ffc6:	bf00      	nop
3418ffc8:	341c02ec 	.word	0x341c02ec
3418ffcc:	341c0364 	.word	0x341c0364
3418ffd0:	341c0368 	.word	0x341c0368
3418ffd4:	341c03c4 	.word	0x341c03c4
3418ffd8:	341c03e4 	.word	0x341c03e4
3418ffdc:	341c03cc 	.word	0x341c03cc
3418ffe0:	341c0454 	.word	0x341c0454

3418ffe4 <SFDP_MemoryReset>:

SFDP_StatusTypeDef SFDP_MemoryReset(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418ffe4:	b580      	push	{r7, lr}
3418ffe6:	b086      	sub	sp, #24
3418ffe8:	af00      	add	r7, sp, #0
3418ffea:	6078      	str	r0, [r7, #4]
  RESET_METHOD reset_method;
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
3418ffec:	2307      	movs	r3, #7
3418ffee:	75bb      	strb	r3, [r7, #22]
  uint32_t sfdp_address = SFDP_HEADER_SIZE;
3418fff0:	2308      	movs	r3, #8
3418fff2:	613b      	str	r3, [r7, #16]
  uint8_t find = 0u;
3418fff4:	2300      	movs	r3, #0
3418fff6:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR(__func__);

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfdp_private.Sfdp_param_number + 1u); index++)
3418fff8:	2300      	movs	r3, #0
3418fffa:	73bb      	strb	r3, [r7, #14]
3418fffc:	e02e      	b.n	3419005c <SFDP_MemoryReset+0x78>
  {
    retr = sfdp_get_paraminfo(Object, sfdp_address, &sfdp_param_info[0]);
3418fffe:	4a64      	ldr	r2, [pc, #400]	@ (34190190 <SFDP_MemoryReset+0x1ac>)
34190000:	6939      	ldr	r1, [r7, #16]
34190002:	6878      	ldr	r0, [r7, #4]
34190004:	f000 ff16 	bl	34190e34 <sfdp_get_paraminfo>
34190008:	4603      	mov	r3, r0
3419000a:	75bb      	strb	r3, [r7, #22]
    if (EXTMEM_SFDP_OK == retr)
3419000c:	7dbb      	ldrb	r3, [r7, #22]
3419000e:	2b00      	cmp	r3, #0
34190010:	d118      	bne.n	34190044 <SFDP_MemoryReset+0x60>
    {
      /* check if the table is basic table */
      if (SFDP_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[0].type)
34190012:	4b5f      	ldr	r3, [pc, #380]	@ (34190190 <SFDP_MemoryReset+0x1ac>)
34190014:	681b      	ldr	r3, [r3, #0]
34190016:	2b08      	cmp	r3, #8
34190018:	d114      	bne.n	34190044 <SFDP_MemoryReset+0x60>
      {
        /* read the JEDEC basic param */
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfdp_private.SALObject,
3419001a:	687b      	ldr	r3, [r7, #4]
3419001c:	f103 0008 	add.w	r0, r3, #8
34190020:	4b5b      	ldr	r3, [pc, #364]	@ (34190190 <SFDP_MemoryReset+0x1ac>)
34190022:	6859      	ldr	r1, [r3, #4]
                                       sfdp_param_info[0].address,
                                       JEDEC_Basic.Params.data_BYTE,
                                       ((uint32_t)sfdp_param_info[0].size) * 4u))
34190024:	4b5a      	ldr	r3, [pc, #360]	@ (34190190 <SFDP_MemoryReset+0x1ac>)
34190026:	7a1b      	ldrb	r3, [r3, #8]
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfdp_private.SALObject,
34190028:	009b      	lsls	r3, r3, #2
3419002a:	4a5a      	ldr	r2, [pc, #360]	@ (34190194 <SFDP_MemoryReset+0x1b0>)
3419002c:	f7ff fa32 	bl	3418f494 <SAL_XSPI_GetSFDP>
34190030:	4603      	mov	r3, r0
34190032:	2b00      	cmp	r3, #0
34190034:	d002      	beq.n	3419003c <SFDP_MemoryReset+0x58>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
34190036:	230c      	movs	r3, #12
34190038:	75bb      	strb	r3, [r7, #22]
3419003a:	e003      	b.n	34190044 <SFDP_MemoryReset+0x60>
        }
        else
        {
          retr = EXTMEM_SFDP_OK;
3419003c:	2300      	movs	r3, #0
3419003e:	75bb      	strb	r3, [r7, #22]
          find = 1u;
34190040:	2301      	movs	r3, #1
34190042:	73fb      	strb	r3, [r7, #15]
        }
      }
    }

    if ((EXTMEM_SFDP_OK != retr) || (1u == find))
34190044:	7dbb      	ldrb	r3, [r7, #22]
34190046:	2b00      	cmp	r3, #0
34190048:	d10f      	bne.n	3419006a <SFDP_MemoryReset+0x86>
3419004a:	7bfb      	ldrb	r3, [r7, #15]
3419004c:	2b01      	cmp	r3, #1
3419004e:	d00c      	beq.n	3419006a <SFDP_MemoryReset+0x86>
    {
        /* stop the read, if there is an error or if the table has been found */
        break;
    }
    /* look for the next table */
    sfdp_address+= SFDP_PARAM_HEADER_SIZE;
34190050:	693b      	ldr	r3, [r7, #16]
34190052:	3308      	adds	r3, #8
34190054:	613b      	str	r3, [r7, #16]
  for(uint8_t index = 0u; index <  (Object->sfdp_private.Sfdp_param_number + 1u); index++)
34190056:	7bbb      	ldrb	r3, [r7, #14]
34190058:	3301      	adds	r3, #1
3419005a:	73bb      	strb	r3, [r7, #14]
3419005c:	7bba      	ldrb	r2, [r7, #14]
3419005e:	687b      	ldr	r3, [r7, #4]
34190060:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
34190064:	3301      	adds	r3, #1
34190066:	429a      	cmp	r2, r3
34190068:	d3c9      	bcc.n	3418fffe <SFDP_MemoryReset+0x1a>
  }

  /* if an error has been returned or if the table has not been found */
  if ((EXTMEM_SFDP_OK != retr) || (0u == find))
3419006a:	7dbb      	ldrb	r3, [r7, #22]
3419006c:	2b00      	cmp	r3, #0
3419006e:	d102      	bne.n	34190076 <SFDP_MemoryReset+0x92>
34190070:	7bfb      	ldrb	r3, [r7, #15]
34190072:	2b00      	cmp	r3, #0
34190074:	d102      	bne.n	3419007c <SFDP_MemoryReset+0x98>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34190076:	230c      	movs	r3, #12
34190078:	75bb      	strb	r3, [r7, #22]
    goto error;
3419007a:	e083      	b.n	34190184 <SFDP_MemoryReset+0x1a0>
  }

  /* determine how to proceed memory reset */
  if( 0x0u == JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support)
3419007c:	4b46      	ldr	r3, [pc, #280]	@ (34190198 <SFDP_MemoryReset+0x1b4>)
3419007e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34190082:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34190086:	b2db      	uxtb	r3, r3
34190088:	2b00      	cmp	r3, #0
3419008a:	d102      	bne.n	34190092 <SFDP_MemoryReset+0xae>
  {
    /* 00_0000b: no software reset instruction is supported */
    reset_method = RESET_NONE;
3419008c:	2300      	movs	r3, #0
3419008e:	75fb      	strb	r3, [r7, #23]
34190090:	e053      	b.n	3419013a <SFDP_MemoryReset+0x156>
  }
  else if (0x1u == (0x1u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
34190092:	4b41      	ldr	r3, [pc, #260]	@ (34190198 <SFDP_MemoryReset+0x1b4>)
34190094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34190098:	f3c3 0305 	ubfx	r3, r3, #0, #6
3419009c:	b2db      	uxtb	r3, r3
3419009e:	f003 0301 	and.w	r3, r3, #1
341900a2:	b2db      	uxtb	r3, r3
341900a4:	2b00      	cmp	r3, #0
341900a6:	d002      	beq.n	341900ae <SFDP_MemoryReset+0xca>
  {
    /* xx_xxx1b: drive Fh on all 4 data wires for 8 clocks */
    reset_method = RESET_Fh_4DATA_8CLOCK;
341900a8:	2301      	movs	r3, #1
341900aa:	75fb      	strb	r3, [r7, #23]
341900ac:	e045      	b.n	3419013a <SFDP_MemoryReset+0x156>
  }
  else if (0x2u == (0x2u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
341900ae:	4b3a      	ldr	r3, [pc, #232]	@ (34190198 <SFDP_MemoryReset+0x1b4>)
341900b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
341900b4:	f3c3 0305 	ubfx	r3, r3, #0, #6
341900b8:	b2db      	uxtb	r3, r3
341900ba:	f003 0302 	and.w	r3, r3, #2
341900be:	b2db      	uxtb	r3, r3
341900c0:	2b00      	cmp	r3, #0
341900c2:	d002      	beq.n	341900ca <SFDP_MemoryReset+0xe6>
  {
    /* xx_xx1xb: drive Fh on all 4 data wires for 10 clocks if device is operating in 4-byte address mode */
    reset_method = RESET_Fh_4DATA_10CLOCK;
341900c4:	2302      	movs	r3, #2
341900c6:	75fb      	strb	r3, [r7, #23]
341900c8:	e037      	b.n	3419013a <SFDP_MemoryReset+0x156>
  }
  else if (0x4u == (0x4u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
341900ca:	4b33      	ldr	r3, [pc, #204]	@ (34190198 <SFDP_MemoryReset+0x1b4>)
341900cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
341900d0:	f3c3 0305 	ubfx	r3, r3, #0, #6
341900d4:	b2db      	uxtb	r3, r3
341900d6:	f003 0304 	and.w	r3, r3, #4
341900da:	b2db      	uxtb	r3, r3
341900dc:	2b00      	cmp	r3, #0
341900de:	d002      	beq.n	341900e6 <SFDP_MemoryReset+0x102>
  {
    /* xx_x1xxb: drive Fh on all 4 data wires for 16 clocks */
    reset_method = RESET_Fh_4DATA_16CLOCK;
341900e0:	2303      	movs	r3, #3
341900e2:	75fb      	strb	r3, [r7, #23]
341900e4:	e029      	b.n	3419013a <SFDP_MemoryReset+0x156>
  }
  else if (0x8u == (0x8u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
341900e6:	4b2c      	ldr	r3, [pc, #176]	@ (34190198 <SFDP_MemoryReset+0x1b4>)
341900e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
341900ec:	f3c3 0305 	ubfx	r3, r3, #0, #6
341900f0:	b2db      	uxtb	r3, r3
341900f2:	f003 0308 	and.w	r3, r3, #8
341900f6:	b2db      	uxtb	r3, r3
341900f8:	2b00      	cmp	r3, #0
341900fa:	d002      	beq.n	34190102 <SFDP_MemoryReset+0x11e>
  {
    /* xx_1xxxb: issue instruction F0h */
    reset_method = RESET_INSTRUCTION_F0;
341900fc:	2304      	movs	r3, #4
341900fe:	75fb      	strb	r3, [r7, #23]
34190100:	e01b      	b.n	3419013a <SFDP_MemoryReset+0x156>
  }
  else if (0x10u == (0x10u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
34190102:	4b25      	ldr	r3, [pc, #148]	@ (34190198 <SFDP_MemoryReset+0x1b4>)
34190104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34190108:	f3c3 0305 	ubfx	r3, r3, #0, #6
3419010c:	b2db      	uxtb	r3, r3
3419010e:	f003 0310 	and.w	r3, r3, #16
34190112:	b2db      	uxtb	r3, r3
34190114:	2b00      	cmp	r3, #0
34190116:	d002      	beq.n	3419011e <SFDP_MemoryReset+0x13a>
  {
    /* x1_xxxxb: issue reset enable instruction 66h, then issue reset instruction 99h. The reset enable,
    reset sequence may be issued on 1, 2, or 4 wires depending on the device operating mode.
    */
    reset_method = RESET_INSTRUCTION_66_99;
34190118:	2305      	movs	r3, #5
3419011a:	75fb      	strb	r3, [r7, #23]
3419011c:	e00d      	b.n	3419013a <SFDP_MemoryReset+0x156>
  }
  else if (0x20u == (0x20u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3419011e:	4b1e      	ldr	r3, [pc, #120]	@ (34190198 <SFDP_MemoryReset+0x1b4>)
34190120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34190124:	f3c3 0305 	ubfx	r3, r3, #0, #6
34190128:	b2db      	uxtb	r3, r3
3419012a:	2b1f      	cmp	r3, #31
3419012c:	d902      	bls.n	34190134 <SFDP_MemoryReset+0x150>
    xx_xx1x_xxxxb: Hardware reset
    xx_x1xx_xxxxb: Software reset (see bits 13:8 in this DWORD)
    xx_1xxx_xxxxb: Power cycle
    x1_xxxx_xxxxb: Reserved
    */
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3419012e:	230f      	movs	r3, #15
34190130:	75bb      	strb	r3, [r7, #22]
    goto error;
34190132:	e027      	b.n	34190184 <SFDP_MemoryReset+0x1a0>
  }
  else
  {
    /* no coherence, should be managed as error */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34190134:	230c      	movs	r3, #12
34190136:	75bb      	strb	r3, [r7, #22]
    goto error;
34190138:	e024      	b.n	34190184 <SFDP_MemoryReset+0x1a0>
  }

  switch(reset_method)
3419013a:	7dfb      	ldrb	r3, [r7, #23]
3419013c:	2b05      	cmp	r3, #5
3419013e:	d009      	beq.n	34190154 <SFDP_MemoryReset+0x170>
34190140:	2b05      	cmp	r3, #5
34190142:	dc1b      	bgt.n	3419017c <SFDP_MemoryReset+0x198>
34190144:	2b00      	cmp	r3, #0
34190146:	d01c      	beq.n	34190182 <SFDP_MemoryReset+0x19e>
34190148:	2b00      	cmp	r3, #0
3419014a:	db17      	blt.n	3419017c <SFDP_MemoryReset+0x198>
3419014c:	3b01      	subs	r3, #1
3419014e:	2b03      	cmp	r3, #3
34190150:	d814      	bhi.n	3419017c <SFDP_MemoryReset+0x198>
34190152:	e010      	b.n	34190176 <SFDP_MemoryReset+0x192>
  case RESET_NONE:
    break;
  case RESET_INSTRUCTION_66_99:
    /* perform the reset in 1, 2 and 4 lines */
    SFDP_DEBUG_STR("::reset 0x66 0x99");
    (void)SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, 0x66, NULL, 0);
34190154:	687b      	ldr	r3, [r7, #4]
34190156:	f103 0008 	add.w	r0, r3, #8
3419015a:	2300      	movs	r3, #0
3419015c:	2200      	movs	r2, #0
3419015e:	2166      	movs	r1, #102	@ 0x66
34190160:	f7ff fb23 	bl	3418f7aa <SAL_XSPI_CommandSendData>
    (void)SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, 0x99, NULL, 0);
34190164:	687b      	ldr	r3, [r7, #4]
34190166:	f103 0008 	add.w	r0, r3, #8
3419016a:	2300      	movs	r3, #0
3419016c:	2200      	movs	r2, #0
3419016e:	2199      	movs	r1, #153	@ 0x99
34190170:	f7ff fb1b 	bl	3418f7aa <SAL_XSPI_CommandSendData>
    break;
34190174:	e006      	b.n	34190184 <SFDP_MemoryReset+0x1a0>
  case RESET_INSTRUCTION_F0:
  case RESET_Fh_4DATA_8CLOCK:
  case RESET_Fh_4DATA_10CLOCK:
  case RESET_Fh_4DATA_16CLOCK:
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
34190176:	230f      	movs	r3, #15
34190178:	75bb      	strb	r3, [r7, #22]
    break;
3419017a:	e003      	b.n	34190184 <SFDP_MemoryReset+0x1a0>
  /* case RESET_ERROR:*/
  default :
    retr = EXTMEM_SFDP_ERROR_PARAM;
3419017c:	2301      	movs	r3, #1
3419017e:	75bb      	strb	r3, [r7, #22]
    break;
34190180:	e000      	b.n	34190184 <SFDP_MemoryReset+0x1a0>
    break;
34190182:	bf00      	nop
  }
error :
  return retr;
34190184:	7dbb      	ldrb	r3, [r7, #22]
}
34190186:	4618      	mov	r0, r3
34190188:	3718      	adds	r7, #24
3419018a:	46bd      	mov	sp, r7
3419018c:	bd80      	pop	{r7, pc}
3419018e:	bf00      	nop
34190190:	341c02ec 	.word	0x341c02ec
34190194:	341c0368 	.word	0x341c0368
34190198:	341c0364 	.word	0x341c0364

3419019c <SFDP_BuildGenericDriver>:

SFDP_StatusTypeDef SFDP_BuildGenericDriver(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint8_t *FreqUpdated)
{
3419019c:	b5f0      	push	{r4, r5, r6, r7, lr}
3419019e:	b08f      	sub	sp, #60	@ 0x3c
341901a0:	af04      	add	r7, sp, #16
341901a2:	6078      	str	r0, [r7, #4]
341901a4:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
341901a6:	2300      	movs	r3, #0
341901a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  static const uint16_t block_erase_unit[] = { 16u, 256u, 4000u, 64000u};
  static const uint32_t chip_erase_unit[]  = { 16u, 256u, 4000u, 64000u};
  SFDP_DEBUG_STR(__func__);
  uint8_t flag4byteAddress = 0u;
341901ac:	2300      	movs	r3, #0
341901ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint32_t dummyCycles, dummyCyclesValue;
  uint8_t FlashSize;

  if ((Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_BASIC_SPIPROTOCOL) != (uint32_t)SFDP_PARAMID_BASIC_SPIPROTOCOL)
341901b2:	687b      	ldr	r3, [r7, #4]
341901b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341901b8:	f003 0308 	and.w	r3, r3, #8
341901bc:	2b00      	cmp	r3, #0
341901be:	d104      	bne.n	341901ca <SFDP_BuildGenericDriver+0x2e>
  {
    /* This table is mandatory to build the driver data */
    retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
341901c0:	2307      	movs	r3, #7
341901c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
341901c6:	f000 bdbd 	b.w	34190d44 <SFDP_BuildGenericDriver+0xba8>
  /* ---------------------------------------------------
   *  Flash sizing
   * ---------------------------------------------------
   */
  /* Calculation of the flash density in puissance of 2 */
  if ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x80000000u) == 0x0u)
341901ca:	4bba      	ldr	r3, [pc, #744]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
341901cc:	689b      	ldr	r3, [r3, #8]
341901ce:	2b00      	cmp	r3, #0
341901d0:	db13      	blt.n	341901fa <SFDP_BuildGenericDriver+0x5e>
  {
#if( __CORTEX_M == 0)
#error "the assembly instruction is not available"
#else
    Object->sfdp_private.FlashSize = 31u - (uint8_t)__CLZ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize + 1u));
341901d2:	4bb8      	ldr	r3, [pc, #736]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
341901d4:	689b      	ldr	r3, [r3, #8]
341901d6:	3301      	adds	r3, #1
341901d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
341901da:	69bb      	ldr	r3, [r7, #24]
341901dc:	2b00      	cmp	r3, #0
341901de:	d101      	bne.n	341901e4 <SFDP_BuildGenericDriver+0x48>
    return 32U;
341901e0:	2320      	movs	r3, #32
341901e2:	e003      	b.n	341901ec <SFDP_BuildGenericDriver+0x50>
  return __builtin_clz(value);
341901e4:	69bb      	ldr	r3, [r7, #24]
341901e6:	fab3 f383 	clz	r3, r3
341901ea:	b2db      	uxtb	r3, r3
341901ec:	f1c3 031f 	rsb	r3, r3, #31
341901f0:	b2da      	uxtb	r2, r3
341901f2:	687b      	ldr	r3, [r7, #4]
341901f4:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
341901f8:	e005      	b.n	34190206 <SFDP_BuildGenericDriver+0x6a>
#endif /* __CORTEX_M */
  }
  else
  {
    Object->sfdp_private.FlashSize = (uint8_t)(JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x7FFFFFFFu);
341901fa:	4bae      	ldr	r3, [pc, #696]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
341901fc:	689b      	ldr	r3, [r3, #8]
341901fe:	b2da      	uxtb	r2, r3
34190200:	687b      	ldr	r3, [r7, #4]
34190202:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  }

  /* Conversion bit to byte */
  Object->sfdp_private.FlashSize = Object->sfdp_private.FlashSize - 3u; /* divide by eight the value */
34190206:	687b      	ldr	r3, [r7, #4]
34190208:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
3419020c:	3b03      	subs	r3, #3
3419020e:	b2da      	uxtb	r2, r3
34190210:	687b      	ldr	r3, [r7, #4]
34190212:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e

  SFDP_DEBUG_INT("-> flash size: 2^", Object->sfdp_private.FlashSize);
  FlashSize = Object->sfdp_private.FlashSize - 1u;
34190216:	687b      	ldr	r3, [r7, #4]
34190218:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
3419021c:	3b01      	subs	r3, #1
3419021e:	b2db      	uxtb	r3, r3
34190220:	74fb      	strb	r3, [r7, #19]
  (void) SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_FLASHSIZE, &FlashSize);
34190222:	687b      	ldr	r3, [r7, #4]
34190224:	3308      	adds	r3, #8
34190226:	f107 0213 	add.w	r2, r7, #19
3419022a:	2104      	movs	r1, #4
3419022c:	4618      	mov	r0, r3
3419022e:	f7fe ffdf 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>

  /* get the page size info */
  Object->sfdp_private.PageSize = ((uint32_t)1u <<  JEDEC_Basic.Params.Param_DWORD.D11.PageSize);
34190232:	4ba0      	ldr	r3, [pc, #640]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
34190234:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
34190238:	f3c3 1303 	ubfx	r3, r3, #4, #4
3419023c:	b2db      	uxtb	r3, r3
3419023e:	461a      	mov	r2, r3
34190240:	2301      	movs	r3, #1
34190242:	fa03 f202 	lsl.w	r2, r3, r2
34190246:	687b      	ldr	r3, [r7, #4]
34190248:	661a      	str	r2, [r3, #96]	@ 0x60

  /* ---------------------------------------------------
   *  Set default command
   * ---------------------------------------------------
   */
  Object->sfdp_private.DriverInfo.PageProgramInstruction = SFDP_DRIVER_PAGE_PROGRAM_COMMAND;
3419024a:	687b      	ldr	r3, [r7, #4]
3419024c:	2202      	movs	r2, #2
3419024e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
  /* ---------------------------------------------------
   *  Erase management
   * ---------------------------------------------------
   */
  /* Manage erase data */
  Object->sfdp_private.DriverInfo.EraseType1Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Size;
34190252:	4b98      	ldr	r3, [pc, #608]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
34190254:	f893 2020 	ldrb.w	r2, [r3, #32]
34190258:	687b      	ldr	r3, [r7, #4]
3419025a:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
  Object->sfdp_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Instruction;
3419025e:	4b95      	ldr	r3, [pc, #596]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
34190260:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
34190264:	687b      	ldr	r3, [r7, #4]
34190266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  Object->sfdp_private.DriverInfo.EraseType2Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Size;
3419026a:	4b92      	ldr	r3, [pc, #584]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
3419026c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
34190270:	687b      	ldr	r3, [r7, #4]
34190272:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  Object->sfdp_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Instruction;
34190276:	4b8f      	ldr	r3, [pc, #572]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
34190278:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
3419027c:	687b      	ldr	r3, [r7, #4]
3419027e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  Object->sfdp_private.DriverInfo.EraseType3Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Size;
34190282:	4b8c      	ldr	r3, [pc, #560]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
34190284:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
34190288:	687b      	ldr	r3, [r7, #4]
3419028a:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
  Object->sfdp_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Instruction;
3419028e:	4b89      	ldr	r3, [pc, #548]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
34190290:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
34190294:	687b      	ldr	r3, [r7, #4]
34190296:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  Object->sfdp_private.DriverInfo.EraseType4Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Size;
3419029a:	4b86      	ldr	r3, [pc, #536]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
3419029c:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
341902a0:	687b      	ldr	r3, [r7, #4]
341902a2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  Object->sfdp_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Instruction;
341902a6:	4b83      	ldr	r3, [pc, #524]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
341902a8:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
341902ac:	687b      	ldr	r3, [r7, #4]
341902ae:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

  if (Object->sfdp_private.DriverInfo.EraseType1Command != 0x0u)
341902b2:	687b      	ldr	r3, [r7, #4]
341902b4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
341902b8:	2b00      	cmp	r3, #0
341902ba:	d01d      	beq.n	341902f8 <SFDP_BuildGenericDriver+0x15c>
  {
    Object->sfdp_private.DriverInfo.EraseType1Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_units];
341902bc:	4b7d      	ldr	r3, [pc, #500]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
341902be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
341902c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
341902c6:	b2db      	uxtb	r3, r3
341902c8:	461a      	mov	r2, r3
341902ca:	4b7a      	ldr	r3, [pc, #488]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
341902cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
341902ce:	f3c3 1304 	ubfx	r3, r3, #4, #5
341902d2:	b2db      	uxtb	r3, r3
341902d4:	3301      	adds	r3, #1
341902d6:	fb02 f303 	mul.w	r3, r2, r3
341902da:	4a76      	ldr	r2, [pc, #472]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
341902dc:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
341902e0:	f3c2 0241 	ubfx	r2, r2, #1, #2
341902e4:	b2d2      	uxtb	r2, r2
341902e6:	4611      	mov	r1, r2
341902e8:	4a73      	ldr	r2, [pc, #460]	@ (341904b8 <SFDP_BuildGenericDriver+0x31c>)
341902ea:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
341902ee:	fb03 f202 	mul.w	r2, r3, r2
341902f2:	687b      	ldr	r3, [r7, #4]
341902f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  if (Object->sfdp_private.DriverInfo.EraseType2Command != 0x0u)
341902f8:	687b      	ldr	r3, [r7, #4]
341902fa:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
341902fe:	2b00      	cmp	r3, #0
34190300:	d01e      	beq.n	34190340 <SFDP_BuildGenericDriver+0x1a4>
  {
    Object->sfdp_private.DriverInfo.EraseType2Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_units];
34190302:	4b6c      	ldr	r3, [pc, #432]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
34190304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
34190308:	f3c3 0303 	ubfx	r3, r3, #0, #4
3419030c:	b2db      	uxtb	r3, r3
3419030e:	461a      	mov	r2, r3
34190310:	4b68      	ldr	r3, [pc, #416]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
34190312:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
34190316:	f3c3 03c4 	ubfx	r3, r3, #3, #5
3419031a:	b2db      	uxtb	r3, r3
3419031c:	3301      	adds	r3, #1
3419031e:	fb02 f303 	mul.w	r3, r2, r3
34190322:	4a64      	ldr	r2, [pc, #400]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
34190324:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
34190328:	f3c2 0201 	ubfx	r2, r2, #0, #2
3419032c:	b2d2      	uxtb	r2, r2
3419032e:	4611      	mov	r1, r2
34190330:	4a61      	ldr	r2, [pc, #388]	@ (341904b8 <SFDP_BuildGenericDriver+0x31c>)
34190332:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
34190336:	fb03 f202 	mul.w	r2, r3, r2
3419033a:	687b      	ldr	r3, [r7, #4]
3419033c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  if (Object->sfdp_private.DriverInfo.EraseType3Command != 0x0u)
34190340:	687b      	ldr	r3, [r7, #4]
34190342:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
34190346:	2b00      	cmp	r3, #0
34190348:	d01d      	beq.n	34190386 <SFDP_BuildGenericDriver+0x1ea>
  {
    Object->sfdp_private.DriverInfo.EraseType3Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_units];
3419034a:	4b5a      	ldr	r3, [pc, #360]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
3419034c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
34190350:	f3c3 0303 	ubfx	r3, r3, #0, #4
34190354:	b2db      	uxtb	r3, r3
34190356:	461a      	mov	r2, r3
34190358:	4b56      	ldr	r3, [pc, #344]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
3419035a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
3419035e:	f3c3 0384 	ubfx	r3, r3, #2, #5
34190362:	b2db      	uxtb	r3, r3
34190364:	3301      	adds	r3, #1
34190366:	fb02 f303 	mul.w	r3, r2, r3
3419036a:	4a52      	ldr	r2, [pc, #328]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
3419036c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
3419036e:	f3c2 12c1 	ubfx	r2, r2, #7, #2
34190372:	b2d2      	uxtb	r2, r2
34190374:	4611      	mov	r1, r2
34190376:	4a50      	ldr	r2, [pc, #320]	@ (341904b8 <SFDP_BuildGenericDriver+0x31c>)
34190378:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3419037c:	fb03 f202 	mul.w	r2, r3, r2
34190380:	687b      	ldr	r3, [r7, #4]
34190382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  if (Object->sfdp_private.DriverInfo.EraseType4Command != 0x0u)
34190386:	687b      	ldr	r3, [r7, #4]
34190388:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
3419038c:	2b00      	cmp	r3, #0
3419038e:	d01e      	beq.n	341903ce <SFDP_BuildGenericDriver+0x232>
  {
    Object->sfdp_private.DriverInfo.EraseType4Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_units];
34190390:	4b48      	ldr	r3, [pc, #288]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
34190392:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
34190396:	f3c3 0303 	ubfx	r3, r3, #0, #4
3419039a:	b2db      	uxtb	r3, r3
3419039c:	461a      	mov	r2, r3
3419039e:	4b45      	ldr	r3, [pc, #276]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
341903a0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
341903a4:	f3c3 0344 	ubfx	r3, r3, #1, #5
341903a8:	b2db      	uxtb	r3, r3
341903aa:	3301      	adds	r3, #1
341903ac:	fb02 f303 	mul.w	r3, r2, r3
341903b0:	4a40      	ldr	r2, [pc, #256]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
341903b2:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
341903b6:	f3c2 1281 	ubfx	r2, r2, #6, #2
341903ba:	b2d2      	uxtb	r2, r2
341903bc:	4611      	mov	r1, r2
341903be:	4a3e      	ldr	r2, [pc, #248]	@ (341904b8 <SFDP_BuildGenericDriver+0x31c>)
341903c0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
341903c4:	fb03 f202 	mul.w	r2, r3, r2
341903c8:	687b      	ldr	r3, [r7, #4]
341903ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  Object->sfdp_private.DriverInfo.EraseChipTiming   = JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_count + 1u)* chip_erase_unit[JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_units];
341903ce:	4b39      	ldr	r3, [pc, #228]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
341903d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
341903d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
341903d8:	b2db      	uxtb	r3, r3
341903da:	461a      	mov	r2, r3
341903dc:	4b35      	ldr	r3, [pc, #212]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
341903de:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
341903e2:	f3c3 0304 	ubfx	r3, r3, #0, #5
341903e6:	b2db      	uxtb	r3, r3
341903e8:	3301      	adds	r3, #1
341903ea:	fb02 f303 	mul.w	r3, r2, r3
341903ee:	4a31      	ldr	r2, [pc, #196]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
341903f0:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
341903f4:	f3c2 1241 	ubfx	r2, r2, #5, #2
341903f8:	b2d2      	uxtb	r2, r2
341903fa:	4611      	mov	r1, r2
341903fc:	4a2f      	ldr	r2, [pc, #188]	@ (341904bc <SFDP_BuildGenericDriver+0x320>)
341903fe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
34190402:	fb03 f202 	mul.w	r2, r3, r2
34190406:	687b      	ldr	r3, [r7, #4]
34190408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   *   WIP/WEL : write in progress/ write enable management
   * ------------------------------------------------------
   */
  /* This bit definition is maintained for legacy compatibility only. New system implementations
  should refer to 6.4.19 for a full definition of volatile and non-volatile behavior. */
  Object->sfdp_private.DriverInfo.ReadWELCommand = SFDP_DRIVER_READ_STATUS_REGISTER_COMMAND;
3419040c:	687b      	ldr	r3, [r7, #4]
3419040e:	2205      	movs	r2, #5
34190410:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
  Object->sfdp_private.DriverInfo.ReadWIPCommand = SFDP_DRIVER_READ_STATUS_REGISTER_COMMAND;
34190414:	687b      	ldr	r3, [r7, #4]
34190416:	2205      	movs	r2, #5
34190418:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  if (JEDEC_Basic.Params.Param_DWORD.D1.WriteEnableInstructionVolatileRegister == 0u)
3419041c:	4b25      	ldr	r3, [pc, #148]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
3419041e:	791b      	ldrb	r3, [r3, #4]
34190420:	f003 0310 	and.w	r3, r3, #16
34190424:	b2db      	uxtb	r3, r3
34190426:	2b00      	cmp	r3, #0
34190428:	d104      	bne.n	34190434 <SFDP_BuildGenericDriver+0x298>
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_50H_COMMAND;
3419042a:	687b      	ldr	r3, [r7, #4]
3419042c:	2250      	movs	r2, #80	@ 0x50
3419042e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
34190432:	e003      	b.n	3419043c <SFDP_BuildGenericDriver+0x2a0>
  }
  else
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_06H_COMMAND;
34190434:	687b      	ldr	r3, [r7, #4]
34190436:	2206      	movs	r2, #6
34190438:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
  /* Volatile or Non-Volatile Register and Write Enable Instruction for Status Register 1
     The instruction 01h is typically used to write status register 1 which contains Block Protection (BP) and other bits. Status register 1 is written by the first data byte following the instruction 01h. The protection bits must be written to zero to enable writes/erases to the device.
     This field describes how to modify the writable bits in status register 1 in either a volatile or non-volatile manner. Bits 1:0 in status register 1 are de-facto standard write enable and busy status and are excluded from the definitions below.
  */
  /* xxx_xxx1b: Non-Volatile Status Register 1, powers-up to last written value, use instruction 06h to enable write */
  if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x1u) != 0u)
3419043c:	4b1d      	ldr	r3, [pc, #116]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
3419043e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34190442:	f3c3 0306 	ubfx	r3, r3, #0, #7
34190446:	b2db      	uxtb	r3, r3
34190448:	f003 0301 	and.w	r3, r3, #1
3419044c:	2b00      	cmp	r3, #0
3419044e:	d004      	beq.n	3419045a <SFDP_BuildGenericDriver+0x2be>
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_06H_COMMAND;
34190450:	687b      	ldr	r3, [r7, #4]
34190452:	2206      	movs	r2, #6
34190454:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
34190458:	e046      	b.n	341904e8 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_xx1xb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 06h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x02u) != 0u)
3419045a:	4b16      	ldr	r3, [pc, #88]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
3419045c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34190460:	f3c3 0306 	ubfx	r3, r3, #0, #7
34190464:	b2db      	uxtb	r3, r3
34190466:	f003 0302 	and.w	r3, r3, #2
3419046a:	2b00      	cmp	r3, #0
3419046c:	d004      	beq.n	34190478 <SFDP_BuildGenericDriver+0x2dc>
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_06H_COMMAND;
3419046e:	687b      	ldr	r3, [r7, #4]
34190470:	2206      	movs	r2, #6
34190472:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
34190476:	e037      	b.n	341904e8 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_x1xxb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 50h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x04u) != 0u)
34190478:	4b0e      	ldr	r3, [pc, #56]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
3419047a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3419047e:	f3c3 0306 	ubfx	r3, r3, #0, #7
34190482:	b2db      	uxtb	r3, r3
34190484:	f003 0304 	and.w	r3, r3, #4
34190488:	2b00      	cmp	r3, #0
3419048a:	d004      	beq.n	34190496 <SFDP_BuildGenericDriver+0x2fa>
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_50H_COMMAND;
3419048c:	687b      	ldr	r3, [r7, #4]
3419048e:	2250      	movs	r2, #80	@ 0x50
34190490:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
34190494:	e028      	b.n	341904e8 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_1xxxb: Non-Volatile/Volatile status register 1 powers-up to last written value in the non-volatile status register,
     use instruction 06h to enable write to non-volatile status register. Volatile status register may be activated after
     power-up to override the non-volatile status register, use instruction 50h to enable write and activate the volatile
     status register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x08u) != 0u)
34190496:	4b07      	ldr	r3, [pc, #28]	@ (341904b4 <SFDP_BuildGenericDriver+0x318>)
34190498:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3419049c:	f3c3 0306 	ubfx	r3, r3, #0, #7
341904a0:	b2db      	uxtb	r3, r3
341904a2:	f003 0308 	and.w	r3, r3, #8
341904a6:	2b00      	cmp	r3, #0
341904a8:	d00a      	beq.n	341904c0 <SFDP_BuildGenericDriver+0x324>
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_06H_COMMAND;
341904aa:	687b      	ldr	r3, [r7, #4]
341904ac:	2206      	movs	r2, #6
341904ae:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
341904b2:	e019      	b.n	341904e8 <SFDP_BuildGenericDriver+0x34c>
341904b4:	341c0364 	.word	0x341c0364
341904b8:	34192888 	.word	0x34192888
341904bc:	34192890 	.word	0x34192890
  }
  /* xx1_xxxxb: Status Register 1 contains a mix of volatile and non-volatile bits. The 06h instruction is used to
     enable writing of the register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x10u) != 0u)
341904c0:	4b66      	ldr	r3, [pc, #408]	@ (3419065c <SFDP_BuildGenericDriver+0x4c0>)
341904c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
341904c6:	f3c3 0306 	ubfx	r3, r3, #0, #7
341904ca:	b2db      	uxtb	r3, r3
341904cc:	f003 0310 	and.w	r3, r3, #16
341904d0:	2b00      	cmp	r3, #0
341904d2:	d004      	beq.n	341904de <SFDP_BuildGenericDriver+0x342>
  {
    Object->sfdp_private.DriverInfo.WriteWELCommand = SFDP_DRIVER_WRITE_ENABLE_06H_COMMAND;
341904d4:	687b      	ldr	r3, [r7, #4]
341904d6:	2206      	movs	r2, #6
341904d8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
341904dc:	e004      	b.n	341904e8 <SFDP_BuildGenericDriver+0x34c>
     1xx_xxxxb: Reserved
     NOTE If the status register is read-only then this field will contain all zeros in bits 4:0.
  */
  else
  {
    retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D16;
341904de:	230a      	movs	r3, #10
341904e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
341904e4:	f000 bc2e 	b.w	34190d44 <SFDP_BuildGenericDriver+0xba8>
  }

  if(0u != (Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
341904e8:	687b      	ldr	r3, [r7, #4]
341904ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341904ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341904f2:	2b00      	cmp	r3, #0
341904f4:	d078      	beq.n	341905e8 <SFDP_BuildGenericDriver+0x44c>
  {
    /* WIP */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitAvailable)
341904f6:	4b5a      	ldr	r3, [pc, #360]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
341904f8:	7cdb      	ldrb	r3, [r3, #19]
341904fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
341904fe:	b2db      	uxtb	r3, r3
34190500:	2b00      	cmp	r3, #0
34190502:	d034      	beq.n	3419056e <SFDP_BuildGenericDriver+0x3d2>
    {
      Object->sfdp_private.DriverInfo.ReadWIPCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.CommandReadAccess;
34190504:	4b56      	ldr	r3, [pc, #344]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
34190506:	7c5a      	ldrb	r2, [r3, #17]
34190508:	687b      	ldr	r3, [r7, #4]
3419050a:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      Object->sfdp_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
3419050e:	4b54      	ldr	r3, [pc, #336]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
34190510:	7cdb      	ldrb	r3, [r3, #19]
34190512:	f3c3 0302 	ubfx	r3, r3, #0, #3
34190516:	b2db      	uxtb	r3, r3
34190518:	461a      	mov	r2, r3
3419051a:	687b      	ldr	r3, [r7, #4]
3419051c:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      Object->sfdp_private.DriverInfo.WIPBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.WIPpolarity;
34190520:	4b4f      	ldr	r3, [pc, #316]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
34190522:	7cdb      	ldrb	r3, [r3, #19]
34190524:	f3c3 1380 	ubfx	r3, r3, #6, #1
34190528:	b2db      	uxtb	r3, r3
3419052a:	461a      	mov	r2, r3
3419052c:	687b      	ldr	r3, [r7, #4]
3419052e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
      Object->sfdp_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
34190532:	4b4b      	ldr	r3, [pc, #300]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
34190534:	7cdb      	ldrb	r3, [r3, #19]
34190536:	f3c3 0302 	ubfx	r3, r3, #0, #3
3419053a:	b2db      	uxtb	r3, r3
3419053c:	461a      	mov	r2, r3
3419053e:	687b      	ldr	r3, [r7, #4]
34190540:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
34190544:	4b46      	ldr	r3, [pc, #280]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
34190546:	7cdb      	ldrb	r3, [r3, #19]
34190548:	f003 0310 	and.w	r3, r3, #16
3419054c:	b2db      	uxtb	r3, r3
3419054e:	2b00      	cmp	r3, #0
34190550:	d009      	beq.n	34190566 <SFDP_BuildGenericDriver+0x3ca>
      {
        /* Address management */
        Object->sfdp_private.DriverInfo.WIPAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.LocalAddressForWIP;
34190552:	4b43      	ldr	r3, [pc, #268]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
34190554:	7cdb      	ldrb	r3, [r3, #19]
34190556:	f3c3 03c0 	ubfx	r3, r3, #3, #1
3419055a:	b2db      	uxtb	r3, r3
3419055c:	461a      	mov	r2, r3
3419055e:	687b      	ldr	r3, [r7, #4]
34190560:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
34190564:	e003      	b.n	3419056e <SFDP_BuildGenericDriver+0x3d2>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfdp_private.DriverInfo.WIPAddress = EXTMEM_ADDRESS_NONE;
34190566:	687b      	ldr	r3, [r7, #4]
34190568:	22ff      	movs	r2, #255	@ 0xff
3419056a:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
      }
    }

    /* WEL */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D6.WELBitAvailable)
3419056e:	4b3c      	ldr	r3, [pc, #240]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
34190570:	7ddb      	ldrb	r3, [r3, #23]
34190572:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34190576:	b2db      	uxtb	r3, r3
34190578:	2b00      	cmp	r3, #0
3419057a:	d073      	beq.n	34190664 <SFDP_BuildGenericDriver+0x4c8>
    {
      Object->sfdp_private.DriverInfo.ReadWELCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.CommandReadAccess;
3419057c:	4b38      	ldr	r3, [pc, #224]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
3419057e:	7d5a      	ldrb	r2, [r3, #21]
34190580:	687b      	ldr	r3, [r7, #4]
34190582:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
      Object->sfdp_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
34190586:	4b36      	ldr	r3, [pc, #216]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
34190588:	7ddb      	ldrb	r3, [r3, #23]
3419058a:	f3c3 0302 	ubfx	r3, r3, #0, #3
3419058e:	b2db      	uxtb	r3, r3
34190590:	461a      	mov	r2, r3
34190592:	687b      	ldr	r3, [r7, #4]
34190594:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfdp_private.DriverInfo.WELBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELpolarity;
34190598:	4b31      	ldr	r3, [pc, #196]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
3419059a:	7ddb      	ldrb	r3, [r3, #23]
3419059c:	f3c3 1380 	ubfx	r3, r3, #6, #1
341905a0:	b2db      	uxtb	r3, r3
341905a2:	461a      	mov	r2, r3
341905a4:	687b      	ldr	r3, [r7, #4]
341905a6:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
      Object->sfdp_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
341905aa:	4b2d      	ldr	r3, [pc, #180]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
341905ac:	7ddb      	ldrb	r3, [r3, #23]
341905ae:	f3c3 0302 	ubfx	r3, r3, #0, #3
341905b2:	b2db      	uxtb	r3, r3
341905b4:	461a      	mov	r2, r3
341905b6:	687b      	ldr	r3, [r7, #4]
341905b8:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
341905bc:	4b28      	ldr	r3, [pc, #160]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
341905be:	7cdb      	ldrb	r3, [r3, #19]
341905c0:	f003 0310 	and.w	r3, r3, #16
341905c4:	b2db      	uxtb	r3, r3
341905c6:	2b00      	cmp	r3, #0
341905c8:	d009      	beq.n	341905de <SFDP_BuildGenericDriver+0x442>
      {
        /* Address management */
        Object->sfdp_private.DriverInfo.WELAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELLocalAddress;
341905ca:	4b25      	ldr	r3, [pc, #148]	@ (34190660 <SFDP_BuildGenericDriver+0x4c4>)
341905cc:	7ddb      	ldrb	r3, [r3, #23]
341905ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
341905d2:	b2db      	uxtb	r3, r3
341905d4:	461a      	mov	r2, r3
341905d6:	687b      	ldr	r3, [r7, #4]
341905d8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
341905dc:	e042      	b.n	34190664 <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfdp_private.DriverInfo.WELAddress = EXTMEM_ADDRESS_NONE;
341905de:	687b      	ldr	r3, [r7, #4]
341905e0:	22ff      	movs	r2, #255	@ 0xff
341905e2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
341905e6:	e03d      	b.n	34190664 <SFDP_BuildGenericDriver+0x4c8>
      }
    }
  }
  else
  {
      Object->sfdp_private.DriverInfo.WELPosition     = 1;
341905e8:	687b      	ldr	r3, [r7, #4]
341905ea:	2201      	movs	r2, #1
341905ec:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfdp_private.DriverInfo.WELBusyPolarity = 0;
341905f0:	687b      	ldr	r3, [r7, #4]
341905f2:	2200      	movs	r2, #0
341905f4:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

      /*
       *   WIP : Status register read management
       *         Basic D14 Status register Polling device Busy
       */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x01u))
341905f8:	4b18      	ldr	r3, [pc, #96]	@ (3419065c <SFDP_BuildGenericDriver+0x4c0>)
341905fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
341905fe:	f3c3 0385 	ubfx	r3, r3, #2, #6
34190602:	b2db      	uxtb	r3, r3
34190604:	f003 0301 	and.w	r3, r3, #1
34190608:	2b00      	cmp	r3, #0
3419060a:	d00c      	beq.n	34190626 <SFDP_BuildGenericDriver+0x48a>
      {
        /* xx_xxx1b: Use of legacy polling is supported by reading the Status Register with 05h instruction
           and checking WIP bit[0] (0=ready; 1=busy). */
        Object->sfdp_private.DriverInfo.ReadWIPCommand = SFDP_DRIVER_READ_STATUS_REGISTER_COMMAND;
3419060c:	687b      	ldr	r3, [r7, #4]
3419060e:	2205      	movs	r2, #5
34190610:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfdp_private.DriverInfo.WIPPosition = 0u;
34190614:	687b      	ldr	r3, [r7, #4]
34190616:	2200      	movs	r2, #0
34190618:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfdp_private.DriverInfo.WIPBusyPolarity = 0u;
3419061c:	687b      	ldr	r3, [r7, #4]
3419061e:	2200      	movs	r2, #0
34190620:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
34190624:	e01e      	b.n	34190664 <SFDP_BuildGenericDriver+0x4c8>
      }
      else if (0x02u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x02u))
34190626:	4b0d      	ldr	r3, [pc, #52]	@ (3419065c <SFDP_BuildGenericDriver+0x4c0>)
34190628:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3419062c:	f3c3 0385 	ubfx	r3, r3, #2, #6
34190630:	b2db      	uxtb	r3, r3
34190632:	f003 0302 	and.w	r3, r3, #2
34190636:	2b00      	cmp	r3, #0
34190638:	d00c      	beq.n	34190654 <SFDP_BuildGenericDriver+0x4b8>
      {
        /* xx_xx1xb: Bit 7 of the Flag Status Register may be polled any time a Program, Erase, Suspend/Resume
           command is issued, or after a Reset command while the device is busy. The read instruction is 70h.
           Flag Status Register bit definitions: bit[7]: Program or erase controller status (0=busy; 1=ready)*/
        Object->sfdp_private.DriverInfo.ReadWIPCommand = 0x70;
3419063a:	687b      	ldr	r3, [r7, #4]
3419063c:	2270      	movs	r2, #112	@ 0x70
3419063e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfdp_private.DriverInfo.WIPPosition = 7u;
34190642:	687b      	ldr	r3, [r7, #4]
34190644:	2207      	movs	r2, #7
34190646:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfdp_private.DriverInfo.WIPBusyPolarity = 0u;
3419064a:	687b      	ldr	r3, [r7, #4]
3419064c:	2200      	movs	r2, #0
3419064e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
34190652:	e007      	b.n	34190664 <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
          retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D14;
34190654:	2309      	movs	r3, #9
34190656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3419065a:	e373      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
3419065c:	341c0364 	.word	0x341c0364
34190660:	341c03e4 	.word	0x341c03e4
      }
  }

  /* Set default value for Read instruction */
  Object->sfdp_private.DriverInfo.ReadInstruction     = SFDP_DRIVER_READ_COMMAND;
34190664:	687b      	ldr	r3, [r7, #4]
34190666:	2203      	movs	r2, #3
34190668:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

  /* ---------------------------------------------------
   *  command based on SFDP_PARAMID_BASIC_SPIPROTOCOL
   * ---------------------------------------------------
   */
  if (((Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_BASIC_SPIPROTOCOL)
3419066c:	687b      	ldr	r3, [r7, #4]
3419066e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34190672:	f003 0308 	and.w	r3, r3, #8
34190676:	2b00      	cmp	r3, #0
34190678:	f000 80af 	beq.w	341907da <SFDP_BuildGenericDriver+0x63e>
       == (uint32_t)SFDP_PARAMID_BASIC_SPIPROTOCOL)
      && (Object->sfdp_private.Config < EXTMEM_LINK_CONFIG_8LINES))
3419067c:	687b      	ldr	r3, [r7, #4]
3419067e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
34190682:	2b02      	cmp	r3, #2
34190684:	f200 80a9 	bhi.w	341907da <SFDP_BuildGenericDriver+0x63e>
  {
    dummyCycles = 0;
34190688:	2300      	movs	r3, #0
3419068a:	617b      	str	r3, [r7, #20]
    Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
3419068c:	687b      	ldr	r3, [r7, #4]
3419068e:	2200      	movs	r2, #0
34190690:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

    if (Object->sfdp_private.Config > EXTMEM_LINK_CONFIG_1LINE)
34190694:	687b      	ldr	r3, [r7, #4]
34190696:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3419069a:	2b00      	cmp	r3, #0
3419069c:	d04c      	beq.n	34190738 <SFDP_BuildGenericDriver+0x59c>
    {
      /* control if read 1s1s2s is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction != 0u)
3419069e:	4baa      	ldr	r3, [pc, #680]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
341906a0:	7c5b      	ldrb	r3, [r3, #17]
341906a2:	2b00      	cmp	r3, #0
341906a4:	d015      	beq.n	341906d2 <SFDP_BuildGenericDriver+0x536>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_ModeClock;
341906a6:	4ba8      	ldr	r3, [pc, #672]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
341906a8:	7c1b      	ldrb	r3, [r3, #16]
341906aa:	f3c3 0304 	ubfx	r3, r3, #0, #5
341906ae:	b2db      	uxtb	r3, r3
341906b0:	461a      	mov	r2, r3
341906b2:	4ba5      	ldr	r3, [pc, #660]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
341906b4:	7c1b      	ldrb	r3, [r3, #16]
341906b6:	f3c3 1342 	ubfx	r3, r3, #5, #3
341906ba:	b2db      	uxtb	r3, r3
341906bc:	4413      	add	r3, r2
341906be:	617b      	str	r3, [r7, #20]
        Object->sfdp_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction;
341906c0:	4ba1      	ldr	r3, [pc, #644]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
341906c2:	7c5a      	ldrb	r2, [r3, #17]
341906c4:	687b      	ldr	r3, [r7, #4]
341906c6:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S2S;
341906ca:	687b      	ldr	r3, [r7, #4]
341906cc:	2201      	movs	r2, #1
341906ce:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* control if read 1S2S2S is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction != 0u)
341906d2:	4b9d      	ldr	r3, [pc, #628]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
341906d4:	7cdb      	ldrb	r3, [r3, #19]
341906d6:	2b00      	cmp	r3, #0
341906d8:	d015      	beq.n	34190706 <SFDP_BuildGenericDriver+0x56a>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_ModeClock;
341906da:	4b9b      	ldr	r3, [pc, #620]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
341906dc:	7c9b      	ldrb	r3, [r3, #18]
341906de:	f3c3 0304 	ubfx	r3, r3, #0, #5
341906e2:	b2db      	uxtb	r3, r3
341906e4:	461a      	mov	r2, r3
341906e6:	4b98      	ldr	r3, [pc, #608]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
341906e8:	7c9b      	ldrb	r3, [r3, #18]
341906ea:	f3c3 1342 	ubfx	r3, r3, #5, #3
341906ee:	b2db      	uxtb	r3, r3
341906f0:	4413      	add	r3, r2
341906f2:	617b      	str	r3, [r7, #20]
        Object->sfdp_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction;
341906f4:	4b94      	ldr	r3, [pc, #592]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
341906f6:	7cda      	ldrb	r2, [r3, #19]
341906f8:	687b      	ldr	r3, [r7, #4]
341906fa:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_1S2S2S;
341906fe:	687b      	ldr	r3, [r7, #4]
34190700:	2202      	movs	r2, #2
34190702:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* The memory work only in 2S2S2S */
      if (JEDEC_Basic.Params.Param_DWORD.D5._2S2S2S_FastReadSupport != 0u)
34190706:	4b90      	ldr	r3, [pc, #576]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
34190708:	7d1b      	ldrb	r3, [r3, #20]
3419070a:	f003 0301 	and.w	r3, r3, #1
3419070e:	b2db      	uxtb	r3, r3
34190710:	2b00      	cmp	r3, #0
34190712:	d011      	beq.n	34190738 <SFDP_BuildGenericDriver+0x59c>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_ModeClock;
34190714:	4b8c      	ldr	r3, [pc, #560]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
34190716:	7e9b      	ldrb	r3, [r3, #26]
34190718:	f3c3 0304 	ubfx	r3, r3, #0, #5
3419071c:	b2db      	uxtb	r3, r3
3419071e:	461a      	mov	r2, r3
34190720:	4b89      	ldr	r3, [pc, #548]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
34190722:	7e9b      	ldrb	r3, [r3, #26]
34190724:	f3c3 1342 	ubfx	r3, r3, #5, #3
34190728:	b2db      	uxtb	r3, r3
3419072a:	4413      	add	r3, r2
3419072c:	617b      	str	r3, [r7, #20]
        Object->sfdp_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_FastReadInstruction;
3419072e:	4b86      	ldr	r3, [pc, #536]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
34190730:	7eda      	ldrb	r2, [r3, #27]
34190732:	687b      	ldr	r3, [r7, #4]
34190734:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      }
    }

    /* the command set is only based on this table */
    /* determine the best line configuration */
    if (Object->sfdp_private.Config > EXTMEM_LINK_CONFIG_2LINES)
34190738:	687b      	ldr	r3, [r7, #4]
3419073a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3419073e:	2b01      	cmp	r3, #1
34190740:	d92c      	bls.n	3419079c <SFDP_BuildGenericDriver+0x600>
    {
      if (JEDEC_Basic.Params.Param_DWORD.D5._4S4S4S_FastReadSupport != 0u)
34190742:	4b81      	ldr	r3, [pc, #516]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
34190744:	7d1b      	ldrb	r3, [r3, #20]
34190746:	f003 0310 	and.w	r3, r3, #16
3419074a:	b2db      	uxtb	r3, r3
3419074c:	2b00      	cmp	r3, #0
3419074e:	d020      	beq.n	34190792 <SFDP_BuildGenericDriver+0x5f6>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_ModeClock;
34190750:	4b7d      	ldr	r3, [pc, #500]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
34190752:	7f9b      	ldrb	r3, [r3, #30]
34190754:	f3c3 0304 	ubfx	r3, r3, #0, #5
34190758:	b2db      	uxtb	r3, r3
3419075a:	461a      	mov	r2, r3
3419075c:	4b7a      	ldr	r3, [pc, #488]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
3419075e:	7f9b      	ldrb	r3, [r3, #30]
34190760:	f3c3 1342 	ubfx	r3, r3, #5, #3
34190764:	b2db      	uxtb	r3, r3
34190766:	4413      	add	r3, r2
34190768:	617b      	str	r3, [r7, #20]
        Object->sfdp_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_FastReadInstruction;
3419076a:	4b77      	ldr	r3, [pc, #476]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
3419076c:	7fda      	ldrb	r2, [r3, #31]
3419076e:	687b      	ldr	r3, [r7, #4]
34190770:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_4S4S4S;
34190774:	687b      	ldr	r3, [r7, #4]
34190776:	2204      	movs	r2, #4
34190778:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

        retr = JEDEC_Basic_Manage4S4S4SEnableSequence(Object);
3419077c:	6878      	ldr	r0, [r7, #4]
3419077e:	f000 feeb 	bl	34191558 <JEDEC_Basic_Manage4S4S4SEnableSequence>
34190782:	4603      	mov	r3, r0
34190784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ( retr != EXTMEM_SFDP_OK)
34190788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3419078c:	2b00      	cmp	r3, #0
3419078e:	f040 82d6 	bne.w	34190d3e <SFDP_BuildGenericDriver+0xba2>
      }
      else /* other configuration with more 4 lines */
      {
        /* not yet handled */
      }
      SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfdp_private.SALObject, (uint8_t)dummyCycles);
34190792:	697b      	ldr	r3, [r7, #20]
34190794:	b2da      	uxtb	r2, r3
34190796:	687b      	ldr	r3, [r7, #4]
34190798:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
#endif /* IS25WP032D_ENABLE_DTR */

    }

    /* Configure the link */
    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_PHY_LINK, &Object->sfdp_private.DriverInfo.SpiPhyLink))
3419079c:	687b      	ldr	r3, [r7, #4]
3419079e:	f103 0008 	add.w	r0, r3, #8
341907a2:	687b      	ldr	r3, [r7, #4]
341907a4:	3364      	adds	r3, #100	@ 0x64
341907a6:	461a      	mov	r2, r3
341907a8:	2100      	movs	r1, #0
341907aa:	f7fe fd21 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>
341907ae:	4603      	mov	r3, r0
341907b0:	2b00      	cmp	r3, #0
341907b2:	d003      	beq.n	341907bc <SFDP_BuildGenericDriver+0x620>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
341907b4:	230c      	movs	r3, #12
341907b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
341907ba:	e2c3      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
    }

    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_DUMMY_CYCLES, &dummyCycles))
341907bc:	687b      	ldr	r3, [r7, #4]
341907be:	3308      	adds	r3, #8
341907c0:	f107 0214 	add.w	r2, r7, #20
341907c4:	2101      	movs	r1, #1
341907c6:	4618      	mov	r0, r3
341907c8:	f7fe fd12 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>
341907cc:	4603      	mov	r3, r0
341907ce:	2b00      	cmp	r3, #0
341907d0:	d003      	beq.n	341907da <SFDP_BuildGenericDriver+0x63e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
341907d2:	230c      	movs	r3, #12
341907d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
341907d8:	e2b4      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
  /* -------------------------------------------------------------------------------------------------------------------
     If an octal DDR table is present and the target is 8D8D8D,
     when switch in octal DDR mode
     -------------------------------------------------------------------------------------------------------------------
  */
  if (((uint32_t)SFDP_PARAMID_OCTAL_DDR == (Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_OCTAL_DDR))
341907da:	687b      	ldr	r3, [r7, #4]
341907dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341907e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
341907e4:	2b00      	cmp	r3, #0
341907e6:	d073      	beq.n	341908d0 <SFDP_BuildGenericDriver+0x734>
      && (EXTMEM_LINK_CONFIG_8LINES == Object->sfdp_private.Config))
341907e8:	687b      	ldr	r3, [r7, #4]
341907ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
341907ee:	2b03      	cmp	r3, #3
341907f0:	d16e      	bne.n	341908d0 <SFDP_BuildGenericDriver+0x734>
  {
    /* check if we are not already in octal mode */
    if (PHY_LINK_8D8D8D == Object->sfdp_private.DriverInfo.SpiPhyLink)
341907f2:	687b      	ldr	r3, [r7, #4]
341907f4:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
341907f8:	2b09      	cmp	r3, #9
341907fa:	d103      	bne.n	34190804 <SFDP_BuildGenericDriver+0x668>
    {
      flag4byteAddress = 1u;
341907fc:	2301      	movs	r3, #1
341907fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
34190802:	e044      	b.n	3419088e <SFDP_BuildGenericDriver+0x6f2>
    }
    else
    {
      /* Execute the flash command sequence to switch in octal DDR */
      if (EXTMEM_SFDP_OK == sfdp_enter_octal_mode(Object))
34190804:	6878      	ldr	r0, [r7, #4]
34190806:	f000 fc11 	bl	3419102c <sfdp_enter_octal_mode>
3419080a:	4603      	mov	r3, r0
3419080c:	2b00      	cmp	r3, #0
3419080e:	d13e      	bne.n	3419088e <SFDP_BuildGenericDriver+0x6f2>
      {
        /* switch the memory interface configuration according to the Access protocol field */
        flag4byteAddress = 1u;
34190810:	2301      	movs	r3, #1
34190812:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* Specific case of GigaDevice memory GD25LX512ME whose Instruction mode remains on 8S (8bit commands) */
        if (Object->sfdp_private.ManuID == EXTMEM_MANFACTURER_GIGADEVICE)
34190816:	687b      	ldr	r3, [r7, #4]
34190818:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
3419081c:	2bc8      	cmp	r3, #200	@ 0xc8
3419081e:	d104      	bne.n	3419082a <SFDP_BuildGenericDriver+0x68e>
        {
          Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_8S8D8D;
34190820:	687b      	ldr	r3, [r7, #4]
34190822:	2208      	movs	r2, #8
34190824:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
34190828:	e003      	b.n	34190832 <SFDP_BuildGenericDriver+0x696>
        }
        else
        {
          Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_8D8D8D;
3419082a:	687b      	ldr	r3, [r7, #4]
3419082c:	2209      	movs	r2, #9
3419082e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        }

        /* update the physical link */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_PHY_LINK, &Object->sfdp_private.DriverInfo.SpiPhyLink))
34190832:	687b      	ldr	r3, [r7, #4]
34190834:	f103 0008 	add.w	r0, r3, #8
34190838:	687b      	ldr	r3, [r7, #4]
3419083a:	3364      	adds	r3, #100	@ 0x64
3419083c:	461a      	mov	r2, r3
3419083e:	2100      	movs	r1, #0
34190840:	f7fe fcd6 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>
34190844:	4603      	mov	r3, r0
34190846:	2b00      	cmp	r3, #0
34190848:	d003      	beq.n	34190852 <SFDP_BuildGenericDriver+0x6b6>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3419084a:	230c      	movs	r3, #12
3419084c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
34190850:	e278      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
        }

        if (Object->sfdp_private.Sfdp_AccessProtocol == 0xFDu)
34190852:	687b      	ldr	r3, [r7, #4]
34190854:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
34190858:	2bfd      	cmp	r3, #253	@ 0xfd
3419085a:	d109      	bne.n	34190870 <SFDP_BuildGenericDriver+0x6d4>
        {
          /* set 20 wait state */
          dummyCycles = 20;
3419085c:	2314      	movs	r3, #20
3419085e:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
34190860:	687b      	ldr	r3, [r7, #4]
34190862:	3308      	adds	r3, #8
34190864:	f107 0214 	add.w	r2, r7, #20
34190868:	2101      	movs	r1, #1
3419086a:	4618      	mov	r0, r3
3419086c:	f7fe fcc0 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>
        }
        if (Object->sfdp_private.Sfdp_AccessProtocol == 0xFEu)
34190870:	687b      	ldr	r3, [r7, #4]
34190872:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
34190876:	2bfe      	cmp	r3, #254	@ 0xfe
34190878:	d109      	bne.n	3419088e <SFDP_BuildGenericDriver+0x6f2>
        {
          /* set 8 wait state */
          dummyCycles = 8;
3419087a:	2308      	movs	r3, #8
3419087c:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3419087e:	687b      	ldr	r3, [r7, #4]
34190880:	3308      	adds	r3, #8
34190882:	f107 0214 	add.w	r2, r7, #20
34190886:	2101      	movs	r1, #1
34190888:	4618      	mov	r0, r3
3419088a:	f7fe fcb1 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>
        /* an error occurs when trying to switch the mode                        */
        /* when continue the process and check if another mode could be targeted */
      }
    }

    if ((0u != (Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_BASIC_SPIPROTOCOL)) &&
3419088e:	687b      	ldr	r3, [r7, #4]
34190890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34190894:	f003 0308 	and.w	r3, r3, #8
34190898:	2b00      	cmp	r3, #0
3419089a:	d019      	beq.n	341908d0 <SFDP_BuildGenericDriver+0x734>
        (JEDEC_Basic.size > 16u))
3419089c:	4b2a      	ldr	r3, [pc, #168]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
3419089e:	681b      	ldr	r3, [r3, #0]
    if ((0u != (Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_BASIC_SPIPROTOCOL)) &&
341908a0:	2b10      	cmp	r3, #16
341908a2:	d915      	bls.n	341908d0 <SFDP_BuildGenericDriver+0x734>
    {
      /* check octal information to determine */
      /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
      /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
      /* 0b11 Command and Command Extension forms a 16-bit command word */
      if (JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension > 1u)
341908a4:	4b28      	ldr	r3, [pc, #160]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
341908a6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
341908aa:	f3c3 1341 	ubfx	r3, r3, #5, #2
341908ae:	b2db      	uxtb	r3, r3
341908b0:	2b01      	cmp	r3, #1
341908b2:	d903      	bls.n	341908bc <SFDP_BuildGenericDriver+0x720>
      {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
341908b4:	230f      	movs	r3, #15
341908b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
341908ba:	e243      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
      }
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfdp_private.SALObject, (uint8_t)JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension);
341908bc:	4b22      	ldr	r3, [pc, #136]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
341908be:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
341908c2:	f3c3 1341 	ubfx	r3, r3, #5, #2
341908c6:	b2db      	uxtb	r3, r3
341908c8:	461a      	mov	r2, r3
341908ca:	687b      	ldr	r3, [r7, #4]
341908cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }
  }

  /* Check WIP flag with new access mode */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
341908d0:	2164      	movs	r1, #100	@ 0x64
341908d2:	6878      	ldr	r0, [r7, #4]
341908d4:	f000 fa4a 	bl	34190d6c <driver_check_FlagBUSY>
341908d8:	4603      	mov	r3, r0
341908da:	2b00      	cmp	r3, #0
341908dc:	d003      	beq.n	341908e6 <SFDP_BuildGenericDriver+0x74a>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
341908de:	230c      	movs	r3, #12
341908e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
341908e4:	e22e      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
  }

  if ((Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_4BYTE_ADDRESS_INSTRUCTION) == (uint32_t)SFDP_PARAMID_4BYTE_ADDRESS_INSTRUCTION)
341908e6:	687b      	ldr	r3, [r7, #4]
341908e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341908ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341908f0:	2b00      	cmp	r3, #0
341908f2:	f000 8144 	beq.w	34190b7e <SFDP_BuildGenericDriver+0x9e2>
  {
    if (0u == flag4byteAddress)
341908f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
341908fa:	2b00      	cmp	r3, #0
341908fc:	f040 80a2 	bne.w	34190a44 <SFDP_BuildGenericDriver+0x8a8>
    {
      /* xxxx_xxx1b: issue instruction B7h (preceding write enable not required) */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x01u))
34190900:	4b11      	ldr	r3, [pc, #68]	@ (34190948 <SFDP_BuildGenericDriver+0x7ac>)
34190902:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
34190906:	f003 0301 	and.w	r3, r3, #1
3419090a:	2b00      	cmp	r3, #0
3419090c:	d01e      	beq.n	3419094c <SFDP_BuildGenericDriver+0x7b0>
      {
        /* send command to enter 4-bytes Address mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject,0xB7, NULL, 0))
3419090e:	687b      	ldr	r3, [r7, #4]
34190910:	f103 0008 	add.w	r0, r3, #8
34190914:	2300      	movs	r3, #0
34190916:	2200      	movs	r2, #0
34190918:	21b7      	movs	r1, #183	@ 0xb7
3419091a:	f7fe ff46 	bl	3418f7aa <SAL_XSPI_CommandSendData>
3419091e:	4603      	mov	r3, r0
34190920:	2b00      	cmp	r3, #0
34190922:	d003      	beq.n	3419092c <SFDP_BuildGenericDriver+0x790>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
34190924:	230c      	movs	r3, #12
34190926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3419092a:	e20b      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
        }

        /* Set 4-Byte addressing on PHY side */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_ADDRESS_4BYTES, NULL))
3419092c:	687b      	ldr	r3, [r7, #4]
3419092e:	3308      	adds	r3, #8
34190930:	2200      	movs	r2, #0
34190932:	2102      	movs	r1, #2
34190934:	4618      	mov	r0, r3
34190936:	f7fe fc5b 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>
3419093a:	4603      	mov	r3, r0
3419093c:	2b00      	cmp	r3, #0
3419093e:	d06f      	beq.n	34190a20 <SFDP_BuildGenericDriver+0x884>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
34190940:	230c      	movs	r3, #12
34190942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
34190946:	e1fd      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
34190948:	341c0364 	.word	0x341c0364
        }

        /* flag4byteAddress = 1u; this setting is not needed because variable is no more used */
      }
      /* xxxx_xx1xb: issue write enable instruction 06h, then issue instruction B7h */
      else if (0x2u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x2u))
3419094c:	4b53      	ldr	r3, [pc, #332]	@ (34190a9c <SFDP_BuildGenericDriver+0x900>)
3419094e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
34190952:	f003 0302 	and.w	r3, r3, #2
34190956:	2b00      	cmp	r3, #0
34190958:	d050      	beq.n	341909fc <SFDP_BuildGenericDriver+0x860>
      {
        /* send command to write enable */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject,
3419095a:	687b      	ldr	r3, [r7, #4]
3419095c:	f103 0008 	add.w	r0, r3, #8
34190960:	687b      	ldr	r3, [r7, #4]
34190962:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
34190966:	2300      	movs	r3, #0
34190968:	2200      	movs	r2, #0
3419096a:	f7fe ff1e 	bl	3418f7aa <SAL_XSPI_CommandSendData>
3419096e:	4603      	mov	r3, r0
34190970:	2b00      	cmp	r3, #0
34190972:	d003      	beq.n	3419097c <SFDP_BuildGenericDriver+0x7e0>
                                           Object->sfdp_private.DriverInfo.WriteWELCommand, NULL, 0u))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
34190974:	230c      	movs	r3, #12
34190976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3419097a:	e1e3      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
        }

        /* control the write enable */
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
3419097c:	687b      	ldr	r3, [r7, #4]
3419097e:	f103 0008 	add.w	r0, r3, #8
34190982:	687b      	ldr	r3, [r7, #4]
34190984:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                                   Object->sfdp_private.DriverInfo.ReadWELCommand,
                                                   Object->sfdp_private.DriverInfo.WELAddress,
34190988:	687b      	ldr	r3, [r7, #4]
3419098a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
3419098e:	461e      	mov	r6, r3
                                                   ((Object->sfdp_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfdp_private.DriverInfo.WELPosition,
34190990:	687b      	ldr	r3, [r7, #4]
34190992:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
34190996:	2b00      	cmp	r3, #0
34190998:	d101      	bne.n	3419099e <SFDP_BuildGenericDriver+0x802>
3419099a:	2301      	movs	r3, #1
3419099c:	e000      	b.n	341909a0 <SFDP_BuildGenericDriver+0x804>
3419099e:	2300      	movs	r3, #0
341909a0:	687a      	ldr	r2, [r7, #4]
341909a2:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
341909a6:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
341909a8:	b2dc      	uxtb	r4, r3
                                                   1u << Object->sfdp_private.DriverInfo.WELPosition,
341909aa:	687b      	ldr	r3, [r7, #4]
341909ac:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
341909b0:	461a      	mov	r2, r3
341909b2:	2301      	movs	r3, #1
341909b4:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
341909b6:	b2db      	uxtb	r3, r3
341909b8:	687a      	ldr	r2, [r7, #4]
341909ba:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
341909be:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
341909c2:	9502      	str	r5, [sp, #8]
341909c4:	9201      	str	r2, [sp, #4]
341909c6:	9300      	str	r3, [sp, #0]
341909c8:	4623      	mov	r3, r4
341909ca:	4632      	mov	r2, r6
341909cc:	f7fe fffa 	bl	3418f9c4 <SAL_XSPI_CheckStatusRegister>
341909d0:	4603      	mov	r3, r0
341909d2:	2b00      	cmp	r3, #0
341909d4:	d003      	beq.n	341909de <SFDP_BuildGenericDriver+0x842>
                                                   Object->sfdp_private.ManuID, 1000))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
341909d6:	230c      	movs	r3, #12
341909d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
341909dc:	e1b2      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
        }

        /* send command to enter 4-bytes Address mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, 0xB7, NULL, 0u))
341909de:	687b      	ldr	r3, [r7, #4]
341909e0:	f103 0008 	add.w	r0, r3, #8
341909e4:	2300      	movs	r3, #0
341909e6:	2200      	movs	r2, #0
341909e8:	21b7      	movs	r1, #183	@ 0xb7
341909ea:	f7fe fede 	bl	3418f7aa <SAL_XSPI_CommandSendData>
341909ee:	4603      	mov	r3, r0
341909f0:	2b00      	cmp	r3, #0
341909f2:	d015      	beq.n	34190a20 <SFDP_BuildGenericDriver+0x884>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
341909f4:	230c      	movs	r3, #12
341909f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
341909fa:	e1a3      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
        }
      }
      /* x1xx_xxxxb: Always operates in 4-Byte address mode */
      else if (0x40u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x40u))
341909fc:	4b27      	ldr	r3, [pc, #156]	@ (34190a9c <SFDP_BuildGenericDriver+0x900>)
341909fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
34190a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34190a06:	2b00      	cmp	r3, #0
34190a08:	d10a      	bne.n	34190a20 <SFDP_BuildGenericDriver+0x884>
      {
        /* nothing to do */
        /* flag4byteAddress = 1u; this setting is not needed because variable is no more used */
      }
      /* xx1x_xxxxb: Supports dedicated 4-Byte address instruction set. Consult vendor data sheet for the instruction set definition.*/
      else if (0x20u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x20u))
34190a0a:	4b24      	ldr	r3, [pc, #144]	@ (34190a9c <SFDP_BuildGenericDriver+0x900>)
34190a0c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
34190a10:	f003 0320 	and.w	r3, r3, #32
34190a14:	2b00      	cmp	r3, #0
34190a16:	d103      	bne.n	34190a20 <SFDP_BuildGenericDriver+0x884>
        /* xxxx_x1xxb: 8-bit volatile extended address register used to define A[31:24] bits. Read with instruction C8h. Write instruction is C5h with 1 byte of data. Select the active 128 Mbit memory segment by setting the appropriate A[31:24] bits and use 3-Byte addressing.
           xxxx_1xxxb: 8-bit volatile bank register used to define A[30:A24] bits. MSB (bit[7]) is used to enable/disable 4-byte address mode. When MSB is set to 1, 4-byte address mode is active and A[30:24] bits are do not care. Read with instruction 16h. Write instruction is 17h with 1 byte of data. When MSB is cleared to 0, select the active 128 Mbit segment by setting the appropriate A[30:24] bits and use 3-Byte addressing.
           xxx1_xxxxb: A 16-bit nonvolatile configuration register controls 3-Byte/4-Byte address mode. Read instruction is B5h. Bit[0] controls address mode [0=3-Byte;1=4-Byte]. Write configuration register instruction is B1h, data length is 2 bytes.
        */
      else {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
34190a18:	230f      	movs	r3, #15
34190a1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
34190a1e:	e191      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>

      }

      /* Set 4 bytes addressing on PHY side */
      if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_ADDRESS_4BYTES, NULL))
34190a20:	687b      	ldr	r3, [r7, #4]
34190a22:	3308      	adds	r3, #8
34190a24:	2200      	movs	r2, #0
34190a26:	2102      	movs	r1, #2
34190a28:	4618      	mov	r0, r3
34190a2a:	f7fe fbe1 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>
34190a2e:	4603      	mov	r3, r0
34190a30:	2b00      	cmp	r3, #0
34190a32:	d003      	beq.n	34190a3c <SFDP_BuildGenericDriver+0x8a0>
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
34190a34:	230c      	movs	r3, #12
34190a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
34190a3a:	e183      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
      }

      /* Set the read function for 4 bytes Address */
      Object->sfdp_private.DriverInfo.ReadInstruction = 0x13U;
34190a3c:	687b      	ldr	r3, [r7, #4]
34190a3e:	2213      	movs	r2, #19
34190a40:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if ((EXTMEM_LINK_CONFIG_8LINES == Object->sfdp_private.Config) && (PHY_LINK_1S1S1S == Object->sfdp_private.DriverInfo.SpiPhyLink))
34190a44:	687b      	ldr	r3, [r7, #4]
34190a46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
34190a4a:	2b03      	cmp	r3, #3
34190a4c:	d132      	bne.n	34190ab4 <SFDP_BuildGenericDriver+0x918>
34190a4e:	687b      	ldr	r3, [r7, #4]
34190a50:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
34190a54:	2b00      	cmp	r3, #0
34190a56:	d12d      	bne.n	34190ab4 <SFDP_BuildGenericDriver+0x918>
    {
      /* check if we can switch to if the config is still 1S8S8S */
      if ((0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)  && (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand))
34190a58:	4b11      	ldr	r3, [pc, #68]	@ (34190aa0 <SFDP_BuildGenericDriver+0x904>)
34190a5a:	789b      	ldrb	r3, [r3, #2]
34190a5c:	f003 0320 	and.w	r3, r3, #32
34190a60:	b2db      	uxtb	r3, r3
34190a62:	2b00      	cmp	r3, #0
34190a64:	d026      	beq.n	34190ab4 <SFDP_BuildGenericDriver+0x918>
34190a66:	4b0e      	ldr	r3, [pc, #56]	@ (34190aa0 <SFDP_BuildGenericDriver+0x904>)
34190a68:	78db      	ldrb	r3, [r3, #3]
34190a6a:	f003 0301 	and.w	r3, r3, #1
34190a6e:	b2db      	uxtb	r3, r3
34190a70:	2b00      	cmp	r3, #0
34190a72:	d01f      	beq.n	34190ab4 <SFDP_BuildGenericDriver+0x918>
      {
        /* Patch Micron write command 0x81 @0x0 0xE7 */
        Object->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_1S8S8S;
34190a74:	687b      	ldr	r3, [r7, #4]
34190a76:	2207      	movs	r2, #7
34190a78:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_PHY_LINK, &Object->sfdp_private.DriverInfo.SpiPhyLink))
34190a7c:	687b      	ldr	r3, [r7, #4]
34190a7e:	f103 0008 	add.w	r0, r3, #8
34190a82:	687b      	ldr	r3, [r7, #4]
34190a84:	3364      	adds	r3, #100	@ 0x64
34190a86:	461a      	mov	r2, r3
34190a88:	2100      	movs	r1, #0
34190a8a:	f7fe fbb1 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>
34190a8e:	4603      	mov	r3, r0
34190a90:	2b00      	cmp	r3, #0
34190a92:	d007      	beq.n	34190aa4 <SFDP_BuildGenericDriver+0x908>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
34190a94:	230c      	movs	r3, #12
34190a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
34190a9a:	e153      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
34190a9c:	341c0364 	.word	0x341c0364
34190aa0:	341c03c4 	.word	0x341c03c4
        }
        Object->sfdp_private.DriverInfo.ReadInstruction = 0xCC;
34190aa4:	687b      	ldr	r3, [r7, #4]
34190aa6:	22cc      	movs	r2, #204	@ 0xcc
34190aa8:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfdp_private.DriverInfo.PageProgramInstruction = 0x8E;
34190aac:	687b      	ldr	r3, [r7, #4]
34190aae:	228e      	movs	r2, #142	@ 0x8e
34190ab0:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

    /*
      need to be study more; it seems that Macronix used it to define the command maybe because only one mode is
      supported in their case
    */
    if ((Object->sfdp_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) ||
34190ab4:	687b      	ldr	r3, [r7, #4]
34190ab6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
34190aba:	2b09      	cmp	r3, #9
34190abc:	d004      	beq.n	34190ac8 <SFDP_BuildGenericDriver+0x92c>
        (Object->sfdp_private.DriverInfo.SpiPhyLink == PHY_LINK_1S1S1S))
34190abe:	687b      	ldr	r3, [r7, #4]
34190ac0:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    if ((Object->sfdp_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) ||
34190ac4:	2b00      	cmp	r3, #0
34190ac6:	d120      	bne.n	34190b0a <SFDP_BuildGenericDriver+0x96e>
    {
      if (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S1S1S_PageProgramCommand) {Object->sfdp_private.DriverInfo.PageProgramInstruction = 0x12u;}
34190ac8:	4ba1      	ldr	r3, [pc, #644]	@ (34190d50 <SFDP_BuildGenericDriver+0xbb4>)
34190aca:	781b      	ldrb	r3, [r3, #0]
34190acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34190ad0:	b2db      	uxtb	r3, r3
34190ad2:	2b00      	cmp	r3, #0
34190ad4:	d003      	beq.n	34190ade <SFDP_BuildGenericDriver+0x942>
34190ad6:	687b      	ldr	r3, [r7, #4]
34190ad8:	2212      	movs	r2, #18
34190ada:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S1S1S_ReadCommand)        {Object->sfdp_private.DriverInfo.ReadInstruction        = 0x13u;}
34190ade:	4b9c      	ldr	r3, [pc, #624]	@ (34190d50 <SFDP_BuildGenericDriver+0xbb4>)
34190ae0:	781b      	ldrb	r3, [r3, #0]
34190ae2:	f003 0301 	and.w	r3, r3, #1
34190ae6:	b2db      	uxtb	r3, r3
34190ae8:	2b00      	cmp	r3, #0
34190aea:	d003      	beq.n	34190af4 <SFDP_BuildGenericDriver+0x958>
34190aec:	687b      	ldr	r3, [r7, #4]
34190aee:	2213      	movs	r2, #19
34190af0:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S1S1S_FastReadCommand)    {Object->sfdp_private.DriverInfo.ReadInstruction        = 0x0Cu;}
34190af4:	4b96      	ldr	r3, [pc, #600]	@ (34190d50 <SFDP_BuildGenericDriver+0xbb4>)
34190af6:	781b      	ldrb	r3, [r3, #0]
34190af8:	f003 0302 	and.w	r3, r3, #2
34190afc:	b2db      	uxtb	r3, r3
34190afe:	2b00      	cmp	r3, #0
34190b00:	d003      	beq.n	34190b0a <SFDP_BuildGenericDriver+0x96e>
34190b02:	687b      	ldr	r3, [r7, #4]
34190b04:	220c      	movs	r2, #12
34190b06:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if (Object->sfdp_private.DriverInfo.SpiPhyLink == PHY_LINK_8S8D8D)
34190b0a:	687b      	ldr	r3, [r7, #4]
34190b0c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
34190b10:	2b08      	cmp	r3, #8
34190b12:	d120      	bne.n	34190b56 <SFDP_BuildGenericDriver+0x9ba>
    {
      if (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand) {Object->sfdp_private.DriverInfo.PageProgramInstruction  = 0x02u;}
34190b14:	4b8e      	ldr	r3, [pc, #568]	@ (34190d50 <SFDP_BuildGenericDriver+0xbb4>)
34190b16:	78db      	ldrb	r3, [r3, #3]
34190b18:	f003 0301 	and.w	r3, r3, #1
34190b1c:	b2db      	uxtb	r3, r3
34190b1e:	2b00      	cmp	r3, #0
34190b20:	d003      	beq.n	34190b2a <SFDP_BuildGenericDriver+0x98e>
34190b22:	687b      	ldr	r3, [r7, #4]
34190b24:	2202      	movs	r2, #2
34190b26:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)    {Object->sfdp_private.DriverInfo.ReadInstruction         = 0xCCu;}
34190b2a:	4b89      	ldr	r3, [pc, #548]	@ (34190d50 <SFDP_BuildGenericDriver+0xbb4>)
34190b2c:	789b      	ldrb	r3, [r3, #2]
34190b2e:	f003 0320 	and.w	r3, r3, #32
34190b32:	b2db      	uxtb	r3, r3
34190b34:	2b00      	cmp	r3, #0
34190b36:	d003      	beq.n	34190b40 <SFDP_BuildGenericDriver+0x9a4>
34190b38:	687b      	ldr	r3, [r7, #4]
34190b3a:	22cc      	movs	r2, #204	@ 0xcc
34190b3c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bytes.Param_DWORD.D1.Support_1S8D8D_DTRReadCommand)     {Object->sfdp_private.DriverInfo.ReadInstruction         = 0xFDu;}
34190b40:	4b83      	ldr	r3, [pc, #524]	@ (34190d50 <SFDP_BuildGenericDriver+0xbb4>)
34190b42:	789b      	ldrb	r3, [r3, #2]
34190b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34190b48:	b2db      	uxtb	r3, r3
34190b4a:	2b00      	cmp	r3, #0
34190b4c:	d003      	beq.n	34190b56 <SFDP_BuildGenericDriver+0x9ba>
34190b4e:	687b      	ldr	r3, [r7, #4]
34190b50:	22fd      	movs	r2, #253	@ 0xfd
34190b52:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    Object->sfdp_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Address4Bytes.Param_DWORD.D2.InstructionEraseType1;
34190b56:	4b7e      	ldr	r3, [pc, #504]	@ (34190d50 <SFDP_BuildGenericDriver+0xbb4>)
34190b58:	791a      	ldrb	r2, [r3, #4]
34190b5a:	687b      	ldr	r3, [r7, #4]
34190b5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    Object->sfdp_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Address4Bytes.Param_DWORD.D2.InstructionEraseType2;
34190b60:	4b7b      	ldr	r3, [pc, #492]	@ (34190d50 <SFDP_BuildGenericDriver+0xbb4>)
34190b62:	795a      	ldrb	r2, [r3, #5]
34190b64:	687b      	ldr	r3, [r7, #4]
34190b66:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
    Object->sfdp_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Address4Bytes.Param_DWORD.D2.InstructionEraseType3;
34190b6a:	4b79      	ldr	r3, [pc, #484]	@ (34190d50 <SFDP_BuildGenericDriver+0xbb4>)
34190b6c:	799a      	ldrb	r2, [r3, #6]
34190b6e:	687b      	ldr	r3, [r7, #4]
34190b70:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Object->sfdp_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Address4Bytes.Param_DWORD.D2.InstructionEraseType4;
34190b74:	4b76      	ldr	r3, [pc, #472]	@ (34190d50 <SFDP_BuildGenericDriver+0xbb4>)
34190b76:	79da      	ldrb	r2, [r3, #7]
34190b78:	687b      	ldr	r3, [r7, #4]
34190b7a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  }

  if(((uint32_t)SFDP_PARAMID_XSPI_V1_0 == (Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_XSPI_V1_0))
34190b7e:	687b      	ldr	r3, [r7, #4]
34190b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34190b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34190b88:	2b00      	cmp	r3, #0
34190b8a:	f000 80da 	beq.w	34190d42 <SFDP_BuildGenericDriver+0xba6>
      &&
      ((PHY_LINK_8D8D8D == Object->sfdp_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfdp_private.DriverInfo.SpiPhyLink)))
34190b8e:	687b      	ldr	r3, [r7, #4]
34190b90:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
      &&
34190b94:	2b09      	cmp	r3, #9
34190b96:	d005      	beq.n	34190ba4 <SFDP_BuildGenericDriver+0xa08>
      ((PHY_LINK_8D8D8D == Object->sfdp_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfdp_private.DriverInfo.SpiPhyLink)))
34190b98:	687b      	ldr	r3, [r7, #4]
34190b9a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
34190b9e:	2b08      	cmp	r3, #8
34190ba0:	f040 80cf 	bne.w	34190d42 <SFDP_BuildGenericDriver+0xba6>
  {
    uint32_t ClockOut = 0u;
34190ba4:	2300      	movs	r3, #0
34190ba6:	60fb      	str	r3, [r7, #12]
    uint32_t MaxFreqMhz;
    /* Read command */
    if (0u != JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand)
34190ba8:	4b6a      	ldr	r3, [pc, #424]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190baa:	785b      	ldrb	r3, [r3, #1]
34190bac:	2b00      	cmp	r3, #0
34190bae:	d004      	beq.n	34190bba <SFDP_BuildGenericDriver+0xa1e>
    {
      Object->sfdp_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand;
34190bb0:	4b68      	ldr	r3, [pc, #416]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190bb2:	785a      	ldrb	r2, [r3, #1]
34190bb4:	687b      	ldr	r3, [r7, #4]
34190bb6:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if (JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle != 0u)
34190bba:	4b66      	ldr	r3, [pc, #408]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190bbc:	7d1b      	ldrb	r3, [r3, #20]
34190bbe:	f003 031f 	and.w	r3, r3, #31
34190bc2:	b2db      	uxtb	r3, r3
34190bc4:	2b00      	cmp	r3, #0
34190bc6:	d00d      	beq.n	34190be4 <SFDP_BuildGenericDriver+0xa48>
    {
      /* Set the default dummy cycle of this mode */
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle;
34190bc8:	4b62      	ldr	r3, [pc, #392]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190bca:	7d1b      	ldrb	r3, [r3, #20]
34190bcc:	f3c3 0304 	ubfx	r3, r3, #0, #5
34190bd0:	b2db      	uxtb	r3, r3
34190bd2:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
34190bd4:	687b      	ldr	r3, [r7, #4]
34190bd6:	3308      	adds	r3, #8
34190bd8:	f107 0214 	add.w	r2, r7, #20
34190bdc:	2101      	movs	r1, #1
34190bde:	4618      	mov	r0, r3
34190be0:	f7fe fb06 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>
    }

    /* adapt the memory interface frequency according to its capabilities */
    MaxFreqMhz = sfdp_getfrequencevalue(JEDEC_Basic.Params.Param_DWORD.D20._8D8D8D_MaximunSpeedWithStrobe);
34190be4:	4b5c      	ldr	r3, [pc, #368]	@ (34190d58 <SFDP_BuildGenericDriver+0xbbc>)
34190be6:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
34190bea:	f3c3 1303 	ubfx	r3, r3, #4, #4
34190bee:	b2db      	uxtb	r3, r3
34190bf0:	4618      	mov	r0, r3
34190bf2:	f000 f8f9 	bl	34190de8 <sfdp_getfrequencevalue>
34190bf6:	61f8      	str	r0, [r7, #28]
    if (MaxFreqMhz > Object->sfdp_private.DriverInfo.ClockIn)
34190bf8:	687b      	ldr	r3, [r7, #4]
34190bfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34190bfc:	69fa      	ldr	r2, [r7, #28]
34190bfe:	429a      	cmp	r2, r3
34190c00:	d902      	bls.n	34190c08 <SFDP_BuildGenericDriver+0xa6c>
    {
      /* Adjust the frequence with the ClockIn */
      MaxFreqMhz = Object->sfdp_private.DriverInfo.ClockIn;
34190c02:	687b      	ldr	r3, [r7, #4]
34190c04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34190c06:	61fb      	str	r3, [r7, #28]
    }

    /* Update the clock to be aligned with selected configuration */
    if(HAL_OK != SAL_XSPI_SetClock(&Object->sfdp_private.SALObject, Object->sfdp_private.DriverInfo.ClockIn, MaxFreqMhz, &ClockOut))
34190c08:	687b      	ldr	r3, [r7, #4]
34190c0a:	f103 0008 	add.w	r0, r3, #8
34190c0e:	687b      	ldr	r3, [r7, #4]
34190c10:	6e99      	ldr	r1, [r3, #104]	@ 0x68
34190c12:	f107 030c 	add.w	r3, r7, #12
34190c16:	69fa      	ldr	r2, [r7, #28]
34190c18:	f7fe fa78 	bl	3418f10c <SAL_XSPI_SetClock>
34190c1c:	4603      	mov	r3, r0
34190c1e:	2b00      	cmp	r3, #0
34190c20:	d003      	beq.n	34190c2a <SFDP_BuildGenericDriver+0xa8e>
    {
      retr = EXTMEM_SFDP_ERROR_SETCLOCK;
34190c22:	230d      	movs	r3, #13
34190c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
34190c28:	e08c      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
    }
    *FreqUpdated = 1u; /* Used to indicate that the clock configuration has been updated */
34190c2a:	683b      	ldr	r3, [r7, #0]
34190c2c:	2201      	movs	r2, #1
34190c2e:	701a      	strb	r2, [r3, #0]

    /* get the dummy cycle value according to the real output clock */
    if ((ClockOut >= CLOCK_200MHZ) && (JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle != 0u))
34190c30:	68fb      	ldr	r3, [r7, #12]
34190c32:	4a4a      	ldr	r2, [pc, #296]	@ (34190d5c <SFDP_BuildGenericDriver+0xbc0>)
34190c34:	4293      	cmp	r3, r2
34190c36:	d913      	bls.n	34190c60 <SFDP_BuildGenericDriver+0xac4>
34190c38:	4b46      	ldr	r3, [pc, #280]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190c3a:	899b      	ldrh	r3, [r3, #12]
34190c3c:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
34190c40:	b29b      	uxth	r3, r3
34190c42:	2b00      	cmp	r3, #0
34190c44:	d00c      	beq.n	34190c60 <SFDP_BuildGenericDriver+0xac4>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle;
34190c46:	4b43      	ldr	r3, [pc, #268]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190c48:	899b      	ldrh	r3, [r3, #12]
34190c4a:	f3c3 13c4 	ubfx	r3, r3, #7, #5
34190c4e:	b2db      	uxtb	r3, r3
34190c50:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_ConfigPattern;
34190c52:	4b40      	ldr	r3, [pc, #256]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190c54:	7b1b      	ldrb	r3, [r3, #12]
34190c56:	f3c3 0384 	ubfx	r3, r3, #2, #5
34190c5a:	b2db      	uxtb	r3, r3
34190c5c:	623b      	str	r3, [r7, #32]
34190c5e:	e03b      	b.n	34190cd8 <SFDP_BuildGenericDriver+0xb3c>
    }
    else if ((ClockOut >= CLOCK_166MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle != 0u))
34190c60:	68fb      	ldr	r3, [r7, #12]
34190c62:	4a3f      	ldr	r2, [pc, #252]	@ (34190d60 <SFDP_BuildGenericDriver+0xbc4>)
34190c64:	4293      	cmp	r3, r2
34190c66:	d913      	bls.n	34190c90 <SFDP_BuildGenericDriver+0xaf4>
34190c68:	4b3a      	ldr	r3, [pc, #232]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190c6a:	7cdb      	ldrb	r3, [r3, #19]
34190c6c:	f023 0307 	bic.w	r3, r3, #7
34190c70:	b2db      	uxtb	r3, r3
34190c72:	2b00      	cmp	r3, #0
34190c74:	d00c      	beq.n	34190c90 <SFDP_BuildGenericDriver+0xaf4>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle;
34190c76:	4b37      	ldr	r3, [pc, #220]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190c78:	7cdb      	ldrb	r3, [r3, #19]
34190c7a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
34190c7e:	b2db      	uxtb	r3, r3
34190c80:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_ConfigPattern;
34190c82:	4b34      	ldr	r3, [pc, #208]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190c84:	8a5b      	ldrh	r3, [r3, #18]
34190c86:	f3c3 1384 	ubfx	r3, r3, #6, #5
34190c8a:	b2db      	uxtb	r3, r3
34190c8c:	623b      	str	r3, [r7, #32]
34190c8e:	e023      	b.n	34190cd8 <SFDP_BuildGenericDriver+0xb3c>
    }
    else if ((ClockOut >= CLOCK_133MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle != 0u))
34190c90:	68fb      	ldr	r3, [r7, #12]
34190c92:	4a34      	ldr	r2, [pc, #208]	@ (34190d64 <SFDP_BuildGenericDriver+0xbc8>)
34190c94:	4293      	cmp	r3, r2
34190c96:	d913      	bls.n	34190cc0 <SFDP_BuildGenericDriver+0xb24>
34190c98:	4b2e      	ldr	r3, [pc, #184]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190c9a:	7c9b      	ldrb	r3, [r3, #18]
34190c9c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
34190ca0:	b2db      	uxtb	r3, r3
34190ca2:	2b00      	cmp	r3, #0
34190ca4:	d00c      	beq.n	34190cc0 <SFDP_BuildGenericDriver+0xb24>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle;
34190ca6:	4b2b      	ldr	r3, [pc, #172]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190ca8:	7c9b      	ldrb	r3, [r3, #18]
34190caa:	f3c3 0344 	ubfx	r3, r3, #1, #5
34190cae:	b2db      	uxtb	r3, r3
34190cb0:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_ConfigPattern;
34190cb2:	4b28      	ldr	r3, [pc, #160]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190cb4:	691b      	ldr	r3, [r3, #16]
34190cb6:	f3c3 3304 	ubfx	r3, r3, #12, #5
34190cba:	b2db      	uxtb	r3, r3
34190cbc:	623b      	str	r3, [r7, #32]
34190cbe:	e00b      	b.n	34190cd8 <SFDP_BuildGenericDriver+0xb3c>
    }
    else /* if (ClockOut =< 100Mhz) */
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_DummyCycle;
34190cc0:	4b24      	ldr	r3, [pc, #144]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190cc2:	8a1b      	ldrh	r3, [r3, #16]
34190cc4:	f3c3 13c4 	ubfx	r3, r3, #7, #5
34190cc8:	b2db      	uxtb	r3, r3
34190cca:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_ConfigPattern;
34190ccc:	4b21      	ldr	r3, [pc, #132]	@ (34190d54 <SFDP_BuildGenericDriver+0xbb8>)
34190cce:	7c1b      	ldrb	r3, [r3, #16]
34190cd0:	f3c3 0384 	ubfx	r3, r3, #2, #5
34190cd4:	b2db      	uxtb	r3, r3
34190cd6:	623b      	str	r3, [r7, #32]
    }

    /* Specific case of GigaDevice memory with wrongly coded SFDP table in JEDEC_SCCR_Map.Param_DWORD.D9 */
    if (Object->sfdp_private.ManuID == EXTMEM_MANFACTURER_GIGADEVICE)
34190cd8:	687b      	ldr	r3, [r7, #4]
34190cda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
34190cde:	2bc8      	cmp	r3, #200	@ 0xc8
34190ce0:	d10a      	bne.n	34190cf8 <SFDP_BuildGenericDriver+0xb5c>
    {
      dummyCycles = 16;
34190ce2:	2310      	movs	r3, #16
34190ce4:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
34190ce6:	687b      	ldr	r3, [r7, #4]
34190ce8:	3308      	adds	r3, #8
34190cea:	f107 0214 	add.w	r2, r7, #20
34190cee:	2101      	movs	r1, #1
34190cf0:	4618      	mov	r0, r3
34190cf2:	f7fe fa7d 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>
34190cf6:	e025      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
    }
    else
    {
      /* Write the dummy cycle value in the configuration register using information coming from SCCR Map */
      if((0u != (Object->sfdp_private.Sfdp_table_mask & (uint32_t)SFDP_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
34190cf8:	687b      	ldr	r3, [r7, #4]
34190cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34190cfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34190d02:	2b00      	cmp	r3, #0
34190d04:	d017      	beq.n	34190d36 <SFDP_BuildGenericDriver+0xb9a>
         && (0u != JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable))
34190d06:	4b18      	ldr	r3, [pc, #96]	@ (34190d68 <SFDP_BuildGenericDriver+0xbcc>)
34190d08:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34190d0c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34190d10:	b2db      	uxtb	r3, r3
34190d12:	2b00      	cmp	r3, #0
34190d14:	d00f      	beq.n	34190d36 <SFDP_BuildGenericDriver+0xb9a>
      {
        /* Update the frequence with MaxFreqMhz information */
        if( sfdp_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
34190d16:	6a39      	ldr	r1, [r7, #32]
34190d18:	6878      	ldr	r0, [r7, #4]
34190d1a:	f000 fa6b 	bl	341911f4 <sfdp_set_dummycycle>
34190d1e:	4603      	mov	r3, r0
34190d20:	2b00      	cmp	r3, #0
34190d22:	d10f      	bne.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
        {
          /* Set the dummy cycle corresponding */
          (void)SAL_XSPI_MemoryConfig(&Object->sfdp_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
34190d24:	687b      	ldr	r3, [r7, #4]
34190d26:	3308      	adds	r3, #8
34190d28:	f107 0214 	add.w	r2, r7, #20
34190d2c:	2101      	movs	r1, #1
34190d2e:	4618      	mov	r0, r3
34190d30:	f7fe fa5e 	bl	3418f1f0 <SAL_XSPI_MemoryConfig>
        if( sfdp_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
34190d34:	e006      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
        }
      }
      else
      {
        retr = EXTMEM_SFDP_ERROR_CONFIGDUMMY;
34190d36:	230e      	movs	r3, #14
34190d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
34190d3c:	e002      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
          goto error;
34190d3e:	bf00      	nop
34190d40:	e000      	b.n	34190d44 <SFDP_BuildGenericDriver+0xba8>
      }
    }
  }

error :
34190d42:	bf00      	nop
  return retr;
34190d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
34190d48:	4618      	mov	r0, r3
34190d4a:	372c      	adds	r7, #44	@ 0x2c
34190d4c:	46bd      	mov	sp, r7
34190d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
34190d50:	341c03c4 	.word	0x341c03c4
34190d54:	341c03cc 	.word	0x341c03cc
34190d58:	341c0364 	.word	0x341c0364
34190d5c:	0bebc1ff 	.word	0x0bebc1ff
34190d60:	09e4f57f 	.word	0x09e4f57f
34190d64:	07ed6b3f 	.word	0x07ed6b3f
34190d68:	341c03e4 	.word	0x341c03e4

34190d6c <driver_check_FlagBUSY>:


EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef driver_check_FlagBUSY(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Timeout)
{
34190d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
34190d6e:	b089      	sub	sp, #36	@ 0x24
34190d70:	af04      	add	r7, sp, #16
34190d72:	6078      	str	r0, [r7, #4]
34190d74:	6039      	str	r1, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUSY;
34190d76:	23fb      	movs	r3, #251	@ 0xfb
34190d78:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR((uint8_t *)__func__)
  if (0u != SFDPObject->sfdp_private.DriverInfo.ReadWIPCommand)
34190d7a:	687b      	ldr	r3, [r7, #4]
34190d7c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
34190d80:	2b00      	cmp	r3, #0
34190d82:	d02b      	beq.n	34190ddc <driver_check_FlagBUSY+0x70>
  {
    /* check that the WIP flag is not set */
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfdp_private.SALObject,
34190d84:	687b      	ldr	r3, [r7, #4]
34190d86:	f103 0008 	add.w	r0, r3, #8
34190d8a:	687b      	ldr	r3, [r7, #4]
34190d8c:	f893 406c 	ldrb.w	r4, [r3, #108]	@ 0x6c
                                               SFDPObject->sfdp_private.DriverInfo.ReadWIPCommand,
                                               SFDPObject->sfdp_private.DriverInfo.WIPAddress,
34190d90:	687b      	ldr	r3, [r7, #4]
34190d92:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfdp_private.SALObject,
34190d96:	461e      	mov	r6, r3
                                               SFDPObject->sfdp_private.DriverInfo.WIPBusyPolarity << SFDPObject->sfdp_private.DriverInfo.WIPPosition,
34190d98:	687b      	ldr	r3, [r7, #4]
34190d9a:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
34190d9e:	461a      	mov	r2, r3
34190da0:	687b      	ldr	r3, [r7, #4]
34190da2:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
34190da6:	fa02 f303 	lsl.w	r3, r2, r3
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfdp_private.SALObject,
34190daa:	b2dd      	uxtb	r5, r3
                                               1u << SFDPObject->sfdp_private.DriverInfo.WIPPosition,
34190dac:	687b      	ldr	r3, [r7, #4]
34190dae:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
34190db2:	461a      	mov	r2, r3
34190db4:	2301      	movs	r3, #1
34190db6:	4093      	lsls	r3, r2
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfdp_private.SALObject,
34190db8:	b2db      	uxtb	r3, r3
34190dba:	687a      	ldr	r2, [r7, #4]
34190dbc:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
34190dc0:	6839      	ldr	r1, [r7, #0]
34190dc2:	9102      	str	r1, [sp, #8]
34190dc4:	9201      	str	r2, [sp, #4]
34190dc6:	9300      	str	r3, [sp, #0]
34190dc8:	462b      	mov	r3, r5
34190dca:	4632      	mov	r2, r6
34190dcc:	4621      	mov	r1, r4
34190dce:	f7fe fdf9 	bl	3418f9c4 <SAL_XSPI_CheckStatusRegister>
34190dd2:	4603      	mov	r3, r0
34190dd4:	2b00      	cmp	r3, #0
34190dd6:	d101      	bne.n	34190ddc <driver_check_FlagBUSY+0x70>
                                               SFDPObject->sfdp_private.ManuID, Timeout))
    {
      retr = EXTMEM_DRIVER_NOR_SFDP_OK;
34190dd8:	2300      	movs	r3, #0
34190dda:	73fb      	strb	r3, [r7, #15]
    }
  }
  return retr;
34190ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
34190de0:	4618      	mov	r0, r3
34190de2:	3714      	adds	r7, #20
34190de4:	46bd      	mov	sp, r7
34190de6:	bdf0      	pop	{r4, r5, r6, r7, pc}

34190de8 <sfdp_getfrequencevalue>:
 * @brief This function returns the frequency value corresponding to a frequency
 * @param BitField bit field value
 * @return frequency value
 */
uint32_t sfdp_getfrequencevalue(uint32_t BitField)
{
34190de8:	b4b0      	push	{r4, r5, r7}
34190dea:	b08b      	sub	sp, #44	@ 0x2c
34190dec:	af00      	add	r7, sp, #0
34190dee:	6078      	str	r0, [r7, #4]
  const uint16_t freqMhz_table[] = { 0x0, 33, 50, 66, 80, 100, 133, 166, 200, 250, 266, 333, 400 };
34190df0:	4b0e      	ldr	r3, [pc, #56]	@ (34190e2c <sfdp_getfrequencevalue+0x44>)
34190df2:	f107 040c 	add.w	r4, r7, #12
34190df6:	461d      	mov	r5, r3
34190df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34190dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34190dfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
34190e00:	c403      	stmia	r4!, {r0, r1}
34190e02:	8022      	strh	r2, [r4, #0]
  SFDP_DEBUG_STR(__func__);

  if (BitField < 0b1010u)
34190e04:	687b      	ldr	r3, [r7, #4]
34190e06:	2b09      	cmp	r3, #9
34190e08:	d80a      	bhi.n	34190e20 <sfdp_getfrequencevalue+0x38>
  {
    return (uint32_t)freqMhz_table[BitField]* 1000000u;
34190e0a:	687b      	ldr	r3, [r7, #4]
34190e0c:	005b      	lsls	r3, r3, #1
34190e0e:	3328      	adds	r3, #40	@ 0x28
34190e10:	443b      	add	r3, r7
34190e12:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
34190e16:	461a      	mov	r2, r3
34190e18:	4b05      	ldr	r3, [pc, #20]	@ (34190e30 <sfdp_getfrequencevalue+0x48>)
34190e1a:	fb02 f303 	mul.w	r3, r2, r3
34190e1e:	e000      	b.n	34190e22 <sfdp_getfrequencevalue+0x3a>
  }
  return 0; /* the max frequency is unknown */
34190e20:	2300      	movs	r3, #0
}
34190e22:	4618      	mov	r0, r3
34190e24:	372c      	adds	r7, #44	@ 0x2c
34190e26:	46bd      	mov	sp, r7
34190e28:	bcb0      	pop	{r4, r5, r7}
34190e2a:	4770      	bx	lr
34190e2c:	34192844 	.word	0x34192844
34190e30:	000f4240 	.word	0x000f4240

34190e34 <sfdp_get_paraminfo>:
 * @param sfdp_param_info pointer on parameter info
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_get_paraminfo(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t sfdp_address,
                                      SFDP_ParameterTableTypeDef *Param_info)
{
34190e34:	b580      	push	{r7, lr}
34190e36:	b088      	sub	sp, #32
34190e38:	af00      	add	r7, sp, #0
34190e3a:	60f8      	str	r0, [r7, #12]
34190e3c:	60b9      	str	r1, [r7, #8]
34190e3e:	607a      	str	r2, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
34190e40:	2300      	movs	r3, #0
34190e42:	77fb      	strb	r3, [r7, #31]
  SFDP_ParameterHeaderTypeDef sfdp_param_header = {0};
34190e44:	f107 0314 	add.w	r3, r7, #20
34190e48:	2200      	movs	r2, #0
34190e4a:	601a      	str	r2, [r3, #0]
34190e4c:	605a      	str	r2, [r3, #4]
  SFDP_DEBUG_STR(__func__);

  /* send the SFDP command to read the header */
  if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfdp_private.SALObject, sfdp_address,
34190e4e:	68fb      	ldr	r3, [r7, #12]
34190e50:	f103 0008 	add.w	r0, r3, #8
34190e54:	f107 0214 	add.w	r2, r7, #20
34190e58:	2308      	movs	r3, #8
34190e5a:	68b9      	ldr	r1, [r7, #8]
34190e5c:	f7fe fb1a 	bl	3418f494 <SAL_XSPI_GetSFDP>
34190e60:	4603      	mov	r3, r0
34190e62:	2b00      	cmp	r3, #0
34190e64:	d002      	beq.n	34190e6c <sfdp_get_paraminfo+0x38>
                                (uint8_t*)&sfdp_param_header, SFDP_PARAM_HEADER_SIZE))
  {
    retr = EXTMEM_SFDP_ERROR_SFDPREAD;
34190e66:	2303      	movs	r3, #3
34190e68:	77fb      	strb	r3, [r7, #31]
    goto error;
34190e6a:	e0d9      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
  }

  Param_info->type = SFDP_PARAMID_UNKNOWN;
34190e6c:	687b      	ldr	r3, [r7, #4]
34190e6e:	2200      	movs	r2, #0
34190e70:	601a      	str	r2, [r3, #0]
  Param_info->size = sfdp_param_header.Length ;
34190e72:	7dfa      	ldrb	r2, [r7, #23]
34190e74:	687b      	ldr	r3, [r7, #4]
34190e76:	721a      	strb	r2, [r3, #8]
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
34190e78:	7ebb      	ldrb	r3, [r7, #26]
34190e7a:	041a      	lsls	r2, r3, #16
                        |((uint32_t)sfdp_param_header.TableAddressPointer[1u] << 8u)
34190e7c:	7e7b      	ldrb	r3, [r7, #25]
34190e7e:	021b      	lsls	r3, r3, #8
34190e80:	4313      	orrs	r3, r2
                        |((uint32_t)sfdp_param_header.TableAddressPointer[0u]));
34190e82:	7e3a      	ldrb	r2, [r7, #24]
34190e84:	431a      	orrs	r2, r3
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
34190e86:	687b      	ldr	r3, [r7, #4]
34190e88:	605a      	str	r2, [r3, #4]

  if ((sfdp_param_header.ID_msb > 0x00u) && (sfdp_param_header.ID_msb < 0x80u))
34190e8a:	7efb      	ldrb	r3, [r7, #27]
34190e8c:	2b00      	cmp	r3, #0
34190e8e:	d010      	beq.n	34190eb2 <sfdp_get_paraminfo+0x7e>
34190e90:	7efb      	ldrb	r3, [r7, #27]
34190e92:	b25b      	sxtb	r3, r3
34190e94:	2b00      	cmp	r3, #0
34190e96:	db0c      	blt.n	34190eb2 <sfdp_get_paraminfo+0x7e>
  {
    if ((sfdp_param_header.ID_lsb & 0x01u) == 0x01u)
34190e98:	7d3b      	ldrb	r3, [r7, #20]
34190e9a:	f003 0301 	and.w	r3, r3, #1
34190e9e:	2b00      	cmp	r3, #0
34190ea0:	d003      	beq.n	34190eaa <sfdp_get_paraminfo+0x76>
    {
      Param_info->type = SFDP_PARAMID_VENDOR;
34190ea2:	687b      	ldr	r3, [r7, #4]
34190ea4:	2201      	movs	r2, #1
34190ea6:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_lsb & 0x01u) == 0x01u)
34190ea8:	e0ba      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
      SFDP_DEBUG_STR("-> type SFDP_PARAMID_VENDOR");
    }
    else
    {
      Param_info->type = SFDP_PARAMID_FUNCTION_VENDOR;
34190eaa:	687b      	ldr	r3, [r7, #4]
34190eac:	2202      	movs	r2, #2
34190eae:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_lsb & 0x01u) == 0x01u)
34190eb0:	e0b6      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
      SFDP_DEBUG_STR("-> type SFDP_PARAMID_FUNCTION_VENDOR");
    }
  }
  else if (sfdp_param_header.ID_msb >= 0x80u)
34190eb2:	7efb      	ldrb	r3, [r7, #27]
34190eb4:	b25b      	sxtb	r3, r3
34190eb6:	2b00      	cmp	r3, #0
34190eb8:	f280 80ae 	bge.w	34191018 <sfdp_get_paraminfo+0x1e4>
  {
    if((sfdp_param_header.ID_lsb & 0x01u) == 0x00u)
34190ebc:	7d3b      	ldrb	r3, [r7, #20]
34190ebe:	f003 0301 	and.w	r3, r3, #1
34190ec2:	2b00      	cmp	r3, #0
34190ec4:	d102      	bne.n	34190ecc <sfdp_get_paraminfo+0x98>
    {
      Param_info->type = SFDP_PARAMID_FUNCTION_JEDEC;
34190ec6:	687b      	ldr	r3, [r7, #4]
34190ec8:	2204      	movs	r2, #4
34190eca:	601a      	str	r2, [r3, #0]
      SFDP_DEBUG_STR("-> type SFDP_PARAMID_FUNCTION_JEDEC");
    }

    if (sfdp_param_header.ID_msb == SFDP_BASIC_PARAMETER_TABLE_MSB)
34190ecc:	7efb      	ldrb	r3, [r7, #27]
34190ece:	2bff      	cmp	r3, #255	@ 0xff
34190ed0:	f040 80a6 	bne.w	34191020 <sfdp_get_paraminfo+0x1ec>
    {
      switch(sfdp_param_header.ID_lsb)
34190ed4:	7d3b      	ldrb	r3, [r7, #20]
34190ed6:	2b0f      	cmp	r3, #15
34190ed8:	dc4c      	bgt.n	34190f74 <sfdp_get_paraminfo+0x140>
34190eda:	2b00      	cmp	r3, #0
34190edc:	da24      	bge.n	34190f28 <sfdp_get_paraminfo+0xf4>
        Param_info->type = SFDP_PARAMID_RESERVED;
        SFDP_DEBUG_STR("-> info SFDP_PARAMID_RESERVED");
        break;
      default :
        SFDP_DEBUG_STR("-> info SFDP_PARAMID_????");
        break;
34190ede:	e09e      	b.n	3419101e <sfdp_get_paraminfo+0x1ea>
      switch(sfdp_param_header.ID_lsb)
34190ee0:	3b81      	subs	r3, #129	@ 0x81
34190ee2:	2b0d      	cmp	r3, #13
34190ee4:	f200 809b 	bhi.w	3419101e <sfdp_get_paraminfo+0x1ea>
34190ee8:	a201      	add	r2, pc, #4	@ (adr r2, 34190ef0 <sfdp_get_paraminfo+0xbc>)
34190eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34190eee:	bf00      	nop
34190ef0:	34190f95 	.word	0x34190f95
34190ef4:	3419101f 	.word	0x3419101f
34190ef8:	3419101f 	.word	0x3419101f
34190efc:	34190fa5 	.word	0x34190fa5
34190f00:	3419101f 	.word	0x3419101f
34190f04:	3419101f 	.word	0x3419101f
34190f08:	34190fbf 	.word	0x34190fbf
34190f0c:	34190fc9 	.word	0x34190fc9
34190f10:	3419101f 	.word	0x3419101f
34190f14:	3419101f 	.word	0x3419101f
34190f18:	34190fe7 	.word	0x34190fe7
34190f1c:	3419101f 	.word	0x3419101f
34190f20:	34190ffb 	.word	0x34190ffb
34190f24:	34191005 	.word	0x34191005
34190f28:	2b0f      	cmp	r3, #15
34190f2a:	d878      	bhi.n	3419101e <sfdp_get_paraminfo+0x1ea>
34190f2c:	a201      	add	r2, pc, #4	@ (adr r2, 34190f34 <sfdp_get_paraminfo+0x100>)
34190f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34190f32:	bf00      	nop
34190f34:	34190f7f 	.word	0x34190f7f
34190f38:	3419101f 	.word	0x3419101f
34190f3c:	3419101f 	.word	0x3419101f
34190f40:	34190f9d 	.word	0x34190f9d
34190f44:	3419101f 	.word	0x3419101f
34190f48:	34190fad 	.word	0x34190fad
34190f4c:	34190fb5 	.word	0x34190fb5
34190f50:	3419101f 	.word	0x3419101f
34190f54:	3419101f 	.word	0x3419101f
34190f58:	34190fd3 	.word	0x34190fd3
34190f5c:	34190fdd 	.word	0x34190fdd
34190f60:	3419101f 	.word	0x3419101f
34190f64:	34190ff1 	.word	0x34190ff1
34190f68:	3419101f 	.word	0x3419101f
34190f6c:	3419101f 	.word	0x3419101f
34190f70:	3419100f 	.word	0x3419100f
34190f74:	2b8e      	cmp	r3, #142	@ 0x8e
34190f76:	dc52      	bgt.n	3419101e <sfdp_get_paraminfo+0x1ea>
34190f78:	2b81      	cmp	r3, #129	@ 0x81
34190f7a:	dab1      	bge.n	34190ee0 <sfdp_get_paraminfo+0xac>
        break;
34190f7c:	e04f      	b.n	3419101e <sfdp_get_paraminfo+0x1ea>
        Param_info->type = SFDP_PARAMID_BASIC_SPIPROTOCOL;
34190f7e:	687b      	ldr	r3, [r7, #4]
34190f80:	2208      	movs	r2, #8
34190f82:	601a      	str	r2, [r3, #0]
        Param_info->size = ((sfdp_param_header.Length ) < SFDP_PARAMS_BASIC_TABLE_DEFAULTSIZE)
34190f84:	7dfb      	ldrb	r3, [r7, #23]
                             ? sfdp_param_header.Length : SFDP_PARAMS_BASIC_TABLE_DEFAULTSIZE;
34190f86:	2b17      	cmp	r3, #23
34190f88:	bf28      	it	cs
34190f8a:	2317      	movcs	r3, #23
34190f8c:	b2da      	uxtb	r2, r3
        Param_info->size = ((sfdp_param_header.Length ) < SFDP_PARAMS_BASIC_TABLE_DEFAULTSIZE)
34190f8e:	687b      	ldr	r3, [r7, #4]
34190f90:	721a      	strb	r2, [r3, #8]
        break;
34190f92:	e045      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_SECTORMAP;
34190f94:	687b      	ldr	r3, [r7, #4]
34190f96:	2210      	movs	r2, #16
34190f98:	601a      	str	r2, [r3, #0]
        break;
34190f9a:	e041      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_RPMC;
34190f9c:	687b      	ldr	r3, [r7, #4]
34190f9e:	2220      	movs	r2, #32
34190fa0:	601a      	str	r2, [r3, #0]
        break;
34190fa2:	e03d      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_4BYTE_ADDRESS_INSTRUCTION;
34190fa4:	687b      	ldr	r3, [r7, #4]
34190fa6:	2240      	movs	r2, #64	@ 0x40
34190fa8:	601a      	str	r2, [r3, #0]
        break;
34190faa:	e039      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_XSPI_V1_0;
34190fac:	687b      	ldr	r3, [r7, #4]
34190fae:	2280      	movs	r2, #128	@ 0x80
34190fb0:	601a      	str	r2, [r3, #0]
        break;
34190fb2:	e035      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_XSPI_V2_0;
34190fb4:	687b      	ldr	r3, [r7, #4]
34190fb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
34190fba:	601a      	str	r2, [r3, #0]
        break;
34190fbc:	e030      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP;
34190fbe:	687b      	ldr	r3, [r7, #4]
34190fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
34190fc4:	601a      	str	r2, [r3, #0]
        break;
34190fc6:	e02b      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP_MULTICHIP;
34190fc8:	687b      	ldr	r3, [r7, #4]
34190fca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34190fce:	601a      	str	r2, [r3, #0]
        break;
34190fd0:	e026      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_STATUS_CONTROL_CONFIG_XSPI_V2_0;
34190fd2:	687b      	ldr	r3, [r7, #4]
34190fd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34190fd8:	601a      	str	r2, [r3, #0]
        break;
34190fda:	e021      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_OCTAL_DDR;
34190fdc:	687b      	ldr	r3, [r7, #4]
34190fde:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34190fe2:	601a      	str	r2, [r3, #0]
        break;
34190fe4:	e01c      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_MSPT;
34190fe6:	687b      	ldr	r3, [r7, #4]
34190fe8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34190fec:	601a      	str	r2, [r3, #0]
        break;
34190fee:	e017      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_X4QUAD_DS;
34190ff0:	687b      	ldr	r3, [r7, #4]
34190ff2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34190ff6:	601a      	str	r2, [r3, #0]
        break;
34190ff8:	e012      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_QUAD_DDR;
34190ffa:	687b      	ldr	r3, [r7, #4]
34190ffc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34191000:	601a      	str	r2, [r3, #0]
        break;
34191002:	e00d      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_SECURE_PACKET_READ_WRITE;
34191004:	687b      	ldr	r3, [r7, #4]
34191006:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3419100a:	601a      	str	r2, [r3, #0]
        break;
3419100c:	e008      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        Param_info->type = SFDP_PARAMID_RESERVED;
3419100e:	687b      	ldr	r3, [r7, #4]
34191010:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
34191014:	601a      	str	r2, [r3, #0]
        break;
34191016:	e003      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
  }
  else
  {
    /* Unexpected value for MSB field of SFDP Parameter ID */
    SFDP_DEBUG_STR("-> Unexpected value for MSB field of SFDP Parameter ID");
    retr = EXTMEM_SFDP_ERROR_SFDPREAD;
34191018:	2303      	movs	r3, #3
3419101a:	77fb      	strb	r3, [r7, #31]
    goto error;
3419101c:	e000      	b.n	34191020 <sfdp_get_paraminfo+0x1ec>
        break;
3419101e:	bf00      	nop
  }

error:
  return retr;
34191020:	7ffb      	ldrb	r3, [r7, #31]
}
34191022:	4618      	mov	r0, r3
34191024:	3720      	adds	r7, #32
34191026:	46bd      	mov	sp, r7
34191028:	bd80      	pop	{r7, pc}
3419102a:	bf00      	nop

3419102c <sfdp_enter_octal_mode>:
 * @brief This function executes the octal DDR table to enter octal DDR mode
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_enter_octal_mode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3419102c:	b590      	push	{r4, r7, lr}
3419102e:	b085      	sub	sp, #20
34191030:	af00      	add	r7, sp, #0
34191032:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
34191034:	2300      	movs	r3, #0
34191036:	73fb      	strb	r3, [r7, #15]
  uint8_t data[7];
  SFDP_DEBUG_STR(__func__);
  /* D1-D2 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D1.LengthCommand)
34191038:	4b6d      	ldr	r3, [pc, #436]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
3419103a:	78db      	ldrb	r3, [r3, #3]
3419103c:	2b00      	cmp	r3, #0
3419103e:	d028      	beq.n	34191092 <sfdp_enter_octal_mode+0x66>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte1CommandSequence;
34191040:	4b6b      	ldr	r3, [pc, #428]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191042:	789b      	ldrb	r3, [r3, #2]
34191044:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte2CommandSequence;
34191046:	4b6a      	ldr	r3, [pc, #424]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191048:	785b      	ldrb	r3, [r3, #1]
3419104a:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte3CommandSequence;
3419104c:	4b68      	ldr	r3, [pc, #416]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
3419104e:	781b      	ldrb	r3, [r3, #0]
34191050:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte4CommandSequence;
34191052:	4b67      	ldr	r3, [pc, #412]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191054:	79db      	ldrb	r3, [r3, #7]
34191056:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte5CommandSequence;
34191058:	4b65      	ldr	r3, [pc, #404]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
3419105a:	799b      	ldrb	r3, [r3, #6]
3419105c:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte6CommandSequence;
3419105e:	4b64      	ldr	r3, [pc, #400]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191060:	795b      	ldrb	r3, [r3, #5]
34191062:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte7CommandSequence;
34191064:	4b62      	ldr	r3, [pc, #392]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191066:	791b      	ldrb	r3, [r3, #4]
34191068:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
3419106a:	687b      	ldr	r3, [r7, #4]
3419106c:	f103 0008 	add.w	r0, r3, #8
34191070:	7a39      	ldrb	r1, [r7, #8]
                                           (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D1.LengthCommand - 1u)))
34191072:	4b5f      	ldr	r3, [pc, #380]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191074:	78db      	ldrb	r3, [r3, #3]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
34191076:	3b01      	subs	r3, #1
34191078:	b29c      	uxth	r4, r3
3419107a:	f107 0308 	add.w	r3, r7, #8
3419107e:	1c5a      	adds	r2, r3, #1
34191080:	4623      	mov	r3, r4
34191082:	f7fe fb92 	bl	3418f7aa <SAL_XSPI_CommandSendData>
34191086:	4603      	mov	r3, r0
34191088:	2b00      	cmp	r3, #0
3419108a:	d002      	beq.n	34191092 <sfdp_enter_octal_mode+0x66>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3419108c:	230b      	movs	r3, #11
3419108e:	73fb      	strb	r3, [r7, #15]
      goto error;
34191090:	e0a9      	b.n	341911e6 <sfdp_enter_octal_mode+0x1ba>
    }
  }

  /* D3-D4 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D3.LengthCommand)
34191092:	4b57      	ldr	r3, [pc, #348]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191094:	7adb      	ldrb	r3, [r3, #11]
34191096:	2b00      	cmp	r3, #0
34191098:	d032      	beq.n	34191100 <sfdp_enter_octal_mode+0xd4>
  {
    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3419109a:	2164      	movs	r1, #100	@ 0x64
3419109c:	6878      	ldr	r0, [r7, #4]
3419109e:	f7ff fe65 	bl	34190d6c <driver_check_FlagBUSY>
341910a2:	4603      	mov	r3, r0
341910a4:	2b00      	cmp	r3, #0
341910a6:	d002      	beq.n	341910ae <sfdp_enter_octal_mode+0x82>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
341910a8:	230c      	movs	r3, #12
341910aa:	73fb      	strb	r3, [r7, #15]
      goto error;
341910ac:	e09b      	b.n	341911e6 <sfdp_enter_octal_mode+0x1ba>
    }

    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte1CommandSequence;
341910ae:	4b50      	ldr	r3, [pc, #320]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
341910b0:	7a9b      	ldrb	r3, [r3, #10]
341910b2:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte2CommandSequence;
341910b4:	4b4e      	ldr	r3, [pc, #312]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
341910b6:	7a5b      	ldrb	r3, [r3, #9]
341910b8:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte3CommandSequence;
341910ba:	4b4d      	ldr	r3, [pc, #308]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
341910bc:	7a1b      	ldrb	r3, [r3, #8]
341910be:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte4CommandSequence;
341910c0:	4b4b      	ldr	r3, [pc, #300]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
341910c2:	7bdb      	ldrb	r3, [r3, #15]
341910c4:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte5CommandSequence;
341910c6:	4b4a      	ldr	r3, [pc, #296]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
341910c8:	7b9b      	ldrb	r3, [r3, #14]
341910ca:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte6CommandSequence;
341910cc:	4b48      	ldr	r3, [pc, #288]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
341910ce:	7b5b      	ldrb	r3, [r3, #13]
341910d0:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte7CommandSequence;
341910d2:	4b47      	ldr	r3, [pc, #284]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
341910d4:	7b1b      	ldrb	r3, [r3, #12]
341910d6:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
341910d8:	687b      	ldr	r3, [r7, #4]
341910da:	f103 0008 	add.w	r0, r3, #8
341910de:	7a39      	ldrb	r1, [r7, #8]
                                           (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D3.LengthCommand - 1u)))
341910e0:	4b43      	ldr	r3, [pc, #268]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
341910e2:	7adb      	ldrb	r3, [r3, #11]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
341910e4:	3b01      	subs	r3, #1
341910e6:	b29c      	uxth	r4, r3
341910e8:	f107 0308 	add.w	r3, r7, #8
341910ec:	1c5a      	adds	r2, r3, #1
341910ee:	4623      	mov	r3, r4
341910f0:	f7fe fb5b 	bl	3418f7aa <SAL_XSPI_CommandSendData>
341910f4:	4603      	mov	r3, r0
341910f6:	2b00      	cmp	r3, #0
341910f8:	d002      	beq.n	34191100 <sfdp_enter_octal_mode+0xd4>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
341910fa:	230b      	movs	r3, #11
341910fc:	73fb      	strb	r3, [r7, #15]
      goto error;
341910fe:	e072      	b.n	341911e6 <sfdp_enter_octal_mode+0x1ba>
    }
  }

  /* D5-D6 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D5.LengthCommand)
34191100:	4b3b      	ldr	r3, [pc, #236]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191102:	7cdb      	ldrb	r3, [r3, #19]
34191104:	2b00      	cmp	r3, #0
34191106:	d032      	beq.n	3419116e <sfdp_enter_octal_mode+0x142>
  {
    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
34191108:	2164      	movs	r1, #100	@ 0x64
3419110a:	6878      	ldr	r0, [r7, #4]
3419110c:	f7ff fe2e 	bl	34190d6c <driver_check_FlagBUSY>
34191110:	4603      	mov	r3, r0
34191112:	2b00      	cmp	r3, #0
34191114:	d002      	beq.n	3419111c <sfdp_enter_octal_mode+0xf0>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34191116:	230c      	movs	r3, #12
34191118:	73fb      	strb	r3, [r7, #15]
      goto error;
3419111a:	e064      	b.n	341911e6 <sfdp_enter_octal_mode+0x1ba>
    }

    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte1CommandSequence;
3419111c:	4b34      	ldr	r3, [pc, #208]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
3419111e:	7c9b      	ldrb	r3, [r3, #18]
34191120:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte2CommandSequence;
34191122:	4b33      	ldr	r3, [pc, #204]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191124:	7c5b      	ldrb	r3, [r3, #17]
34191126:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte3CommandSequence;
34191128:	4b31      	ldr	r3, [pc, #196]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
3419112a:	7c1b      	ldrb	r3, [r3, #16]
3419112c:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte4CommandSequence;
3419112e:	4b30      	ldr	r3, [pc, #192]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191130:	7ddb      	ldrb	r3, [r3, #23]
34191132:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte5CommandSequence;
34191134:	4b2e      	ldr	r3, [pc, #184]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191136:	7d9b      	ldrb	r3, [r3, #22]
34191138:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte6CommandSequence;
3419113a:	4b2d      	ldr	r3, [pc, #180]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
3419113c:	7d5b      	ldrb	r3, [r3, #21]
3419113e:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte7CommandSequence;
34191140:	4b2b      	ldr	r3, [pc, #172]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191142:	7d1b      	ldrb	r3, [r3, #20]
34191144:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
34191146:	687b      	ldr	r3, [r7, #4]
34191148:	f103 0008 	add.w	r0, r3, #8
3419114c:	7a39      	ldrb	r1, [r7, #8]
                                           (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D5.LengthCommand - 1u)))
3419114e:	4b28      	ldr	r3, [pc, #160]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191150:	7cdb      	ldrb	r3, [r3, #19]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
34191152:	3b01      	subs	r3, #1
34191154:	b29c      	uxth	r4, r3
34191156:	f107 0308 	add.w	r3, r7, #8
3419115a:	1c5a      	adds	r2, r3, #1
3419115c:	4623      	mov	r3, r4
3419115e:	f7fe fb24 	bl	3418f7aa <SAL_XSPI_CommandSendData>
34191162:	4603      	mov	r3, r0
34191164:	2b00      	cmp	r3, #0
34191166:	d002      	beq.n	3419116e <sfdp_enter_octal_mode+0x142>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
34191168:	230b      	movs	r3, #11
3419116a:	73fb      	strb	r3, [r7, #15]
      goto error;
3419116c:	e03b      	b.n	341911e6 <sfdp_enter_octal_mode+0x1ba>
    }
  }

  /* D7-D8 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D7.LengthCommand)
3419116e:	4b20      	ldr	r3, [pc, #128]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191170:	7edb      	ldrb	r3, [r3, #27]
34191172:	2b00      	cmp	r3, #0
34191174:	d032      	beq.n	341911dc <sfdp_enter_octal_mode+0x1b0>
  {
    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
34191176:	2164      	movs	r1, #100	@ 0x64
34191178:	6878      	ldr	r0, [r7, #4]
3419117a:	f7ff fdf7 	bl	34190d6c <driver_check_FlagBUSY>
3419117e:	4603      	mov	r3, r0
34191180:	2b00      	cmp	r3, #0
34191182:	d002      	beq.n	3419118a <sfdp_enter_octal_mode+0x15e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34191184:	230c      	movs	r3, #12
34191186:	73fb      	strb	r3, [r7, #15]
      goto error;
34191188:	e02d      	b.n	341911e6 <sfdp_enter_octal_mode+0x1ba>
    }

    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte1CommandSequence;
3419118a:	4b19      	ldr	r3, [pc, #100]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
3419118c:	7e9b      	ldrb	r3, [r3, #26]
3419118e:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte2CommandSequence;
34191190:	4b17      	ldr	r3, [pc, #92]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191192:	7e5b      	ldrb	r3, [r3, #25]
34191194:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte3CommandSequence;
34191196:	4b16      	ldr	r3, [pc, #88]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
34191198:	7e1b      	ldrb	r3, [r3, #24]
3419119a:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte4CommandSequence;
3419119c:	4b14      	ldr	r3, [pc, #80]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
3419119e:	7fdb      	ldrb	r3, [r3, #31]
341911a0:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte5CommandSequence;
341911a2:	4b13      	ldr	r3, [pc, #76]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
341911a4:	7f9b      	ldrb	r3, [r3, #30]
341911a6:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte6CommandSequence;
341911a8:	4b11      	ldr	r3, [pc, #68]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
341911aa:	7f5b      	ldrb	r3, [r3, #29]
341911ac:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte7CommandSequence;
341911ae:	4b10      	ldr	r3, [pc, #64]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
341911b0:	7f1b      	ldrb	r3, [r3, #28]
341911b2:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
341911b4:	687b      	ldr	r3, [r7, #4]
341911b6:	f103 0008 	add.w	r0, r3, #8
341911ba:	7a39      	ldrb	r1, [r7, #8]
                                           (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D7.LengthCommand - 1u)))
341911bc:	4b0c      	ldr	r3, [pc, #48]	@ (341911f0 <sfdp_enter_octal_mode+0x1c4>)
341911be:	7edb      	ldrb	r3, [r3, #27]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, data[0], &data[1],
341911c0:	3b01      	subs	r3, #1
341911c2:	b29c      	uxth	r4, r3
341911c4:	f107 0308 	add.w	r3, r7, #8
341911c8:	1c5a      	adds	r2, r3, #1
341911ca:	4623      	mov	r3, r4
341911cc:	f7fe faed 	bl	3418f7aa <SAL_XSPI_CommandSendData>
341911d0:	4603      	mov	r3, r0
341911d2:	2b00      	cmp	r3, #0
341911d4:	d002      	beq.n	341911dc <sfdp_enter_octal_mode+0x1b0>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
341911d6:	230b      	movs	r3, #11
341911d8:	73fb      	strb	r3, [r7, #15]
      goto error;
341911da:	e004      	b.n	341911e6 <sfdp_enter_octal_mode+0x1ba>

    /* no more wait for busy flag clear here, as command format might have changed to Octal */
  }

  /* Abort any ongoing transfer to avoid performance issue */
  SAL_XSPI_Abort(&Object->sfdp_private.SALObject);
341911dc:	687b      	ldr	r3, [r7, #4]
341911de:	3308      	adds	r3, #8
341911e0:	4618      	mov	r0, r3
341911e2:	f7fe fd2a 	bl	3418fc3a <SAL_XSPI_Abort>

error:
  return retr;
341911e6:	7bfb      	ldrb	r3, [r7, #15]
}
341911e8:	4618      	mov	r0, r3
341911ea:	3714      	adds	r7, #20
341911ec:	46bd      	mov	sp, r7
341911ee:	bd90      	pop	{r4, r7, pc}
341911f0:	341c0454 	.word	0x341c0454

341911f4 <sfdp_set_dummycycle>:
 * @brief This function writes the config register to set dummy cycle
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_set_dummycycle(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t DummyValue)
{
341911f4:	b5f0      	push	{r4, r5, r6, r7, lr}
341911f6:	b08b      	sub	sp, #44	@ 0x2c
341911f8:	af04      	add	r7, sp, #16
341911fa:	6078      	str	r0, [r7, #4]
341911fc:	6039      	str	r1, [r7, #0]
const uint8_t MaskWaitStateValue[4] = { 0x3u, 0x7u, 0xFu, 0x1Fu };
341911fe:	4b76      	ldr	r3, [pc, #472]	@ (341913d8 <sfdp_set_dummycycle+0x1e4>)
34191200:	60fb      	str	r3, [r7, #12]
SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
34191202:	2300      	movs	r3, #0
34191204:	75fb      	strb	r3, [r7, #23]
uint8_t localValue[2] = { 0 };
34191206:	2300      	movs	r3, #0
34191208:	813b      	strh	r3, [r7, #8]
uint32_t Address;

  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
3419120a:	4b74      	ldr	r3, [pc, #464]	@ (341913dc <sfdp_set_dummycycle+0x1e8>)
3419120c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34191210:	f003 0310 	and.w	r3, r3, #16
34191214:	b2db      	uxtb	r3, r3
34191216:	2b00      	cmp	r3, #0
34191218:	d10a      	bne.n	34191230 <sfdp_set_dummycycle+0x3c>
    (JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable == 1u))
3419121a:	4b70      	ldr	r3, [pc, #448]	@ (341913dc <sfdp_set_dummycycle+0x1e8>)
3419121c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34191220:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34191224:	b2db      	uxtb	r3, r3
  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
34191226:	2b00      	cmp	r3, #0
34191228:	d002      	beq.n	34191230 <sfdp_set_dummycycle+0x3c>
  {
    /* Not yet supported */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3419122a:	230c      	movs	r3, #12
3419122c:	75fb      	strb	r3, [r7, #23]
    goto error;
3419122e:	e0ce      	b.n	341913ce <sfdp_set_dummycycle+0x1da>
  }

  /* Compute the Address */
  if (JEDEC_SCCR_Map.Param_DWORD.D9.LocalAddress == 1u)
34191230:	4b6a      	ldr	r3, [pc, #424]	@ (341913dc <sfdp_set_dummycycle+0x1e8>)
34191232:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34191236:	f003 0308 	and.w	r3, r3, #8
3419123a:	b2db      	uxtb	r3, r3
3419123c:	2b00      	cmp	r3, #0
3419123e:	d005      	beq.n	3419124c <sfdp_set_dummycycle+0x58>
  {
    /* Local Address is found in Byte 1 of 32-bit address */
    Address = JEDEC_SCCR_Map.Param_DWORD.D9.AddressRegisterOrModesSupported << 8;
34191240:	4b66      	ldr	r3, [pc, #408]	@ (341913dc <sfdp_set_dummycycle+0x1e8>)
34191242:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
34191246:	021b      	lsls	r3, r3, #8
34191248:	613b      	str	r3, [r7, #16]
3419124a:	e00b      	b.n	34191264 <sfdp_set_dummycycle+0x70>
  }
  else
  {
    /* Specific case of GigaDevice GD25LX512ME where register address is wrongly coded in SFDP table */
    if (Object->sfdp_private.ManuID == 0xC8)
3419124c:	687b      	ldr	r3, [r7, #4]
3419124e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
34191252:	2bc8      	cmp	r3, #200	@ 0xc8
34191254:	d102      	bne.n	3419125c <sfdp_set_dummycycle+0x68>
    {
      /* Address value in datasheet : 1, address value coded in SFDP table 200 */
      Address = 1U;
34191256:	2301      	movs	r3, #1
34191258:	613b      	str	r3, [r7, #16]
3419125a:	e003      	b.n	34191264 <sfdp_set_dummycycle+0x70>
    }
    else
    {
      /* Local address for Variable Dummy Cycle Settings bits is found in last byte of the address */
      Address = JEDEC_SCCR_Map.Param_DWORD.D9.AddressRegisterOrModesSupported;
3419125c:	4b5f      	ldr	r3, [pc, #380]	@ (341913dc <sfdp_set_dummycycle+0x1e8>)
3419125e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
34191262:	613b      	str	r3, [r7, #16]
    }
  }

  /* Read the configuration */
  if (HAL_OK != SAL_XSPI_CommandSendReadAddress(&Object->sfdp_private.SALObject,
34191264:	687b      	ldr	r3, [r7, #4]
34191266:	f103 0008 	add.w	r0, r3, #8
3419126a:	4b5c      	ldr	r3, [pc, #368]	@ (341913dc <sfdp_set_dummycycle+0x1e8>)
3419126c:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
34191270:	687b      	ldr	r3, [r7, #4]
34191272:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
34191276:	f107 0208 	add.w	r2, r7, #8
3419127a:	9301      	str	r3, [sp, #4]
3419127c:	2302      	movs	r3, #2
3419127e:	9300      	str	r3, [sp, #0]
34191280:	4613      	mov	r3, r2
34191282:	693a      	ldr	r2, [r7, #16]
34191284:	f7fe fb39 	bl	3418f8fa <SAL_XSPI_CommandSendReadAddress>
34191288:	4603      	mov	r3, r0
3419128a:	2b00      	cmp	r3, #0
3419128c:	d002      	beq.n	34191294 <sfdp_set_dummycycle+0xa0>
                                                Address,
                                                (uint8_t *)localValue,
                                                2u,
                                                Object->sfdp_private.ManuID))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3419128e:	230c      	movs	r3, #12
34191290:	75fb      	strb	r3, [r7, #23]
    goto error;
34191292:	e09c      	b.n	341913ce <sfdp_set_dummycycle+0x1da>
  }

  /* send command to write enable */
  if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject,
34191294:	687b      	ldr	r3, [r7, #4]
34191296:	f103 0008 	add.w	r0, r3, #8
3419129a:	687b      	ldr	r3, [r7, #4]
3419129c:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
341912a0:	2300      	movs	r3, #0
341912a2:	2200      	movs	r2, #0
341912a4:	f7fe fa81 	bl	3418f7aa <SAL_XSPI_CommandSendData>
341912a8:	4603      	mov	r3, r0
341912aa:	2b00      	cmp	r3, #0
341912ac:	d002      	beq.n	341912b4 <sfdp_set_dummycycle+0xc0>
                                         Object->sfdp_private.DriverInfo.WriteWELCommand, NULL, 0u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
341912ae:	230c      	movs	r3, #12
341912b0:	75fb      	strb	r3, [r7, #23]
    goto error;
341912b2:	e08c      	b.n	341913ce <sfdp_set_dummycycle+0x1da>
  }

  /* control the write enable */
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
341912b4:	687b      	ldr	r3, [r7, #4]
341912b6:	f103 0008 	add.w	r0, r3, #8
341912ba:	687b      	ldr	r3, [r7, #4]
341912bc:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                             Object->sfdp_private.DriverInfo.ReadWELCommand,
                                             Object->sfdp_private.DriverInfo.WELAddress,
341912c0:	687b      	ldr	r3, [r7, #4]
341912c2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
341912c6:	461e      	mov	r6, r3
                                             ((Object->sfdp_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfdp_private.DriverInfo.WELPosition,
341912c8:	687b      	ldr	r3, [r7, #4]
341912ca:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
341912ce:	2b00      	cmp	r3, #0
341912d0:	d101      	bne.n	341912d6 <sfdp_set_dummycycle+0xe2>
341912d2:	2301      	movs	r3, #1
341912d4:	e000      	b.n	341912d8 <sfdp_set_dummycycle+0xe4>
341912d6:	2300      	movs	r3, #0
341912d8:	687a      	ldr	r2, [r7, #4]
341912da:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
341912de:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
341912e0:	b2dc      	uxtb	r4, r3
                                             1u << Object->sfdp_private.DriverInfo.WELPosition,
341912e2:	687b      	ldr	r3, [r7, #4]
341912e4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
341912e8:	461a      	mov	r2, r3
341912ea:	2301      	movs	r3, #1
341912ec:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfdp_private.SALObject,
341912ee:	b2db      	uxtb	r3, r3
341912f0:	687a      	ldr	r2, [r7, #4]
341912f2:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
341912f6:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
341912fa:	9502      	str	r5, [sp, #8]
341912fc:	9201      	str	r2, [sp, #4]
341912fe:	9300      	str	r3, [sp, #0]
34191300:	4623      	mov	r3, r4
34191302:	4632      	mov	r2, r6
34191304:	f7fe fb5e 	bl	3418f9c4 <SAL_XSPI_CheckStatusRegister>
34191308:	4603      	mov	r3, r0
3419130a:	2b00      	cmp	r3, #0
3419130c:	d002      	beq.n	34191314 <sfdp_set_dummycycle+0x120>
                                             Object->sfdp_private.ManuID, 1000))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3419130e:	230c      	movs	r3, #12
34191310:	75fb      	strb	r3, [r7, #23]
    goto error;
34191312:	e05c      	b.n	341913ce <sfdp_set_dummycycle+0x1da>
  }

  /* clear the value */
  localValue[0] = localValue[0] & ~(MaskWaitStateValue[JEDEC_SCCR_Map.Param_DWORD.D9.NumberBitsUsedToSetWaitStates] << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
34191314:	7a3b      	ldrb	r3, [r7, #8]
34191316:	b25a      	sxtb	r2, r3
34191318:	4b30      	ldr	r3, [pc, #192]	@ (341913dc <sfdp_set_dummycycle+0x1e8>)
3419131a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3419131e:	f3c3 1341 	ubfx	r3, r3, #5, #2
34191322:	b2db      	uxtb	r3, r3
34191324:	3318      	adds	r3, #24
34191326:	443b      	add	r3, r7
34191328:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
3419132c:	4619      	mov	r1, r3
3419132e:	4b2b      	ldr	r3, [pc, #172]	@ (341913dc <sfdp_set_dummycycle+0x1e8>)
34191330:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34191334:	f3c3 0302 	ubfx	r3, r3, #0, #3
34191338:	b2db      	uxtb	r3, r3
3419133a:	fa01 f303 	lsl.w	r3, r1, r3
3419133e:	b25b      	sxtb	r3, r3
34191340:	43db      	mvns	r3, r3
34191342:	b25b      	sxtb	r3, r3
34191344:	4013      	ands	r3, r2
34191346:	b25b      	sxtb	r3, r3
34191348:	b2db      	uxtb	r3, r3
3419134a:	723b      	strb	r3, [r7, #8]

  /* Apply the value with the mask */
  localValue[0] =  localValue[0] | (uint8_t)(DummyValue << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
3419134c:	7a3a      	ldrb	r2, [r7, #8]
3419134e:	4b23      	ldr	r3, [pc, #140]	@ (341913dc <sfdp_set_dummycycle+0x1e8>)
34191350:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34191354:	f3c3 0302 	ubfx	r3, r3, #0, #3
34191358:	b2db      	uxtb	r3, r3
3419135a:	4619      	mov	r1, r3
3419135c:	683b      	ldr	r3, [r7, #0]
3419135e:	408b      	lsls	r3, r1
34191360:	b2db      	uxtb	r3, r3
34191362:	4313      	orrs	r3, r2
34191364:	b2db      	uxtb	r3, r3
34191366:	723b      	strb	r3, [r7, #8]
  localValue[1] = localValue[0];
34191368:	7a3b      	ldrb	r3, [r7, #8]
3419136a:	727b      	strb	r3, [r7, #9]

  /* Write de configuration */
  if (HAL_OK != SAL_XSPI_Write(&Object->sfdp_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandWriteAccess, Address, (uint8_t *)localValue, 2u))
3419136c:	687b      	ldr	r3, [r7, #4]
3419136e:	f103 0008 	add.w	r0, r3, #8
34191372:	4b1a      	ldr	r3, [pc, #104]	@ (341913dc <sfdp_set_dummycycle+0x1e8>)
34191374:	f893 1020 	ldrb.w	r1, [r3, #32]
34191378:	f107 0308 	add.w	r3, r7, #8
3419137c:	2202      	movs	r2, #2
3419137e:	9200      	str	r2, [sp, #0]
34191380:	693a      	ldr	r2, [r7, #16]
34191382:	f7fe f9c9 	bl	3418f718 <SAL_XSPI_Write>
34191386:	4603      	mov	r3, r0
34191388:	2b00      	cmp	r3, #0
3419138a:	d002      	beq.n	34191392 <sfdp_set_dummycycle+0x19e>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3419138c:	230c      	movs	r3, #12
3419138e:	75fb      	strb	r3, [r7, #23]
    goto error;
34191390:	e01d      	b.n	341913ce <sfdp_set_dummycycle+0x1da>
  }

  /* wait for busy flag clear */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
34191392:	2164      	movs	r1, #100	@ 0x64
34191394:	6878      	ldr	r0, [r7, #4]
34191396:	f7ff fce9 	bl	34190d6c <driver_check_FlagBUSY>
3419139a:	4603      	mov	r3, r0
3419139c:	2b00      	cmp	r3, #0
3419139e:	d002      	beq.n	341913a6 <sfdp_set_dummycycle+0x1b2>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
341913a0:	230c      	movs	r3, #12
341913a2:	75fb      	strb	r3, [r7, #23]
    goto error;
341913a4:	e013      	b.n	341913ce <sfdp_set_dummycycle+0x1da>
  }

  /* Read the configuration, line can be removed it is only used for debug purpose */
  if (HAL_OK != SAL_XSPI_Read(&Object->sfdp_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess,
341913a6:	687b      	ldr	r3, [r7, #4]
341913a8:	f103 0008 	add.w	r0, r3, #8
341913ac:	4b0b      	ldr	r3, [pc, #44]	@ (341913dc <sfdp_set_dummycycle+0x1e8>)
341913ae:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
341913b2:	f107 0308 	add.w	r3, r7, #8
341913b6:	2202      	movs	r2, #2
341913b8:	9200      	str	r2, [sp, #0]
341913ba:	693a      	ldr	r2, [r7, #16]
341913bc:	f7fe f944 	bl	3418f648 <SAL_XSPI_Read>
341913c0:	4603      	mov	r3, r0
341913c2:	2b00      	cmp	r3, #0
341913c4:	d002      	beq.n	341913cc <sfdp_set_dummycycle+0x1d8>
                              Address, (uint8_t *)localValue, 2u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
341913c6:	230c      	movs	r3, #12
341913c8:	75fb      	strb	r3, [r7, #23]
    goto error;
341913ca:	e000      	b.n	341913ce <sfdp_set_dummycycle+0x1da>
  }

error :
341913cc:	bf00      	nop
  return retr;
341913ce:	7dfb      	ldrb	r3, [r7, #23]
}
341913d0:	4618      	mov	r0, r3
341913d2:	371c      	adds	r7, #28
341913d4:	46bd      	mov	sp, r7
341913d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
341913d8:	1f0f0703 	.word	0x1f0f0703
341913dc:	341c03e4 	.word	0x341c03e4

341913e0 <JEDEC_Basic_ManageQuadEnableRequirement>:
          JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequirement parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_ManageQuadEnableRequirement(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
341913e0:	b580      	push	{r7, lr}
341913e2:	b084      	sub	sp, #16
341913e4:	af00      	add	r7, sp, #0
341913e6:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
341913e8:	230f      	movs	r3, #15
341913ea:	73fb      	strb	r3, [r7, #15]
  uint8_t localValue[2];

  /* switch the mode in QSPI if available */
  switch (JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequirement & 0x7u)
341913ec:	4b59      	ldr	r3, [pc, #356]	@ (34191554 <JEDEC_Basic_ManageQuadEnableRequirement+0x174>)
341913ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
341913f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
341913f6:	b2db      	uxtb	r3, r3
341913f8:	2b07      	cmp	r3, #7
341913fa:	f200 80a4 	bhi.w	34191546 <JEDEC_Basic_ManageQuadEnableRequirement+0x166>
341913fe:	a201      	add	r2, pc, #4	@ (adr r2, 34191404 <JEDEC_Basic_ManageQuadEnableRequirement+0x24>)
34191400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34191404:	34191547 	.word	0x34191547
34191408:	34191547 	.word	0x34191547
3419140c:	34191425 	.word	0x34191425
34191410:	34191547 	.word	0x34191547
34191414:	341914a5 	.word	0x341914a5
34191418:	34191547 	.word	0x34191547
3419141c:	34191547 	.word	0x34191547
34191420:	34191547 	.word	0x34191547
              */
    break;
  case 0x2u: {/* 010b: QE is bit 6 of status register 1. It is set via Write Status with one data byte where bit 6 is one.
                 It is cleared via Write Status with one data byte where bit 6 is zero. */
    /* 1 - set the write enable */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfdp_private.SALObject,
34191424:	687b      	ldr	r3, [r7, #4]
34191426:	f103 0008 	add.w	r0, r3, #8
3419142a:	687b      	ldr	r3, [r7, #4]
3419142c:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
34191430:	2300      	movs	r3, #0
34191432:	2200      	movs	r2, #0
34191434:	f7fe fa0d 	bl	3418f852 <SAL_XSPI_SendReadCommand>
34191438:	4603      	mov	r3, r0
3419143a:	2b00      	cmp	r3, #0
3419143c:	d002      	beq.n	34191444 <JEDEC_Basic_ManageQuadEnableRequirement+0x64>
                                           Object->sfdp_private.DriverInfo.WriteWELCommand, NULL, 0u))
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3419143e:	230c      	movs	r3, #12
34191440:	73fb      	strb	r3, [r7, #15]
      goto error;
34191442:	e081      	b.n	34191548 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* 2 - read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfdp_private.SALObject, SFDP_DRIVER_READ_STATUS_REGISTER_COMMAND,
34191444:	687b      	ldr	r3, [r7, #4]
34191446:	f103 0008 	add.w	r0, r3, #8
3419144a:	f107 020c 	add.w	r2, r7, #12
3419144e:	2301      	movs	r3, #1
34191450:	2105      	movs	r1, #5
34191452:	f7fe f9fe 	bl	3418f852 <SAL_XSPI_SendReadCommand>
34191456:	4603      	mov	r3, r0
34191458:	2b00      	cmp	r3, #0
3419145a:	d002      	beq.n	34191462 <JEDEC_Basic_ManageQuadEnableRequirement+0x82>
                                           (uint8_t *)&localValue[0], 1u))
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3419145c:	230c      	movs	r3, #12
3419145e:	73fb      	strb	r3, [r7, #15]
      goto error;
34191460:	e072      	b.n	34191548 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* 3 - update the status register to enable QPI mode*/
    localValue[0] = localValue[0] | 0x40u;
34191462:	7b3b      	ldrb	r3, [r7, #12]
34191464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34191468:	b2db      	uxtb	r3, r3
3419146a:	733b      	strb	r3, [r7, #12]

    /* 4 - write the status register with QPI mode to 1 */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 1u))
3419146c:	687b      	ldr	r3, [r7, #4]
3419146e:	f103 0008 	add.w	r0, r3, #8
34191472:	f107 020c 	add.w	r2, r7, #12
34191476:	2301      	movs	r3, #1
34191478:	2101      	movs	r1, #1
3419147a:	f7fe f996 	bl	3418f7aa <SAL_XSPI_CommandSendData>
3419147e:	4603      	mov	r3, r0
34191480:	2b00      	cmp	r3, #0
34191482:	d002      	beq.n	3419148a <JEDEC_Basic_ManageQuadEnableRequirement+0xaa>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34191484:	230c      	movs	r3, #12
34191486:	73fb      	strb	r3, [r7, #15]
      goto error;
34191488:	e05e      	b.n	34191548 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
3419148a:	2164      	movs	r1, #100	@ 0x64
3419148c:	6878      	ldr	r0, [r7, #4]
3419148e:	f7ff fc6d 	bl	34190d6c <driver_check_FlagBUSY>
34191492:	4603      	mov	r3, r0
34191494:	2b00      	cmp	r3, #0
34191496:	d002      	beq.n	3419149e <JEDEC_Basic_ManageQuadEnableRequirement+0xbe>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34191498:	230c      	movs	r3, #12
3419149a:	73fb      	strb	r3, [r7, #15]
      goto error;
3419149c:	e054      	b.n	34191548 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    retr = EXTMEM_SFDP_OK;
3419149e:	2300      	movs	r3, #0
341914a0:	73fb      	strb	r3, [r7, #15]
    break;
341914a2:	e051      	b.n	34191548 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
  case 0x4u:{ /* 100b: QE is bit 1 of status register 2. It is set via Write Status with two data bytes where bit 1 of the second byte is one.
                It is cleared via Write Status with two data bytes where bit 1 of the second byte is zero.
                In contrast to the 001b code, writing one byte to the status register does not modify status register 2.*/

    /* read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfdp_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
341914a4:	687b      	ldr	r3, [r7, #4]
341914a6:	f103 0008 	add.w	r0, r3, #8
341914aa:	f107 020c 	add.w	r2, r7, #12
341914ae:	2302      	movs	r3, #2
341914b0:	2105      	movs	r1, #5
341914b2:	f7fe f9ce 	bl	3418f852 <SAL_XSPI_SendReadCommand>
341914b6:	4603      	mov	r3, r0
341914b8:	2b00      	cmp	r3, #0
341914ba:	d002      	beq.n	341914c2 <JEDEC_Basic_ManageQuadEnableRequirement+0xe2>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
341914bc:	230c      	movs	r3, #12
341914be:	73fb      	strb	r3, [r7, #15]
      goto error;
341914c0:	e042      	b.n	34191548 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* update the status register */
    localValue[1] |= 2u;
341914c2:	7b7b      	ldrb	r3, [r7, #13]
341914c4:	f043 0302 	orr.w	r3, r3, #2
341914c8:	b2db      	uxtb	r3, r3
341914ca:	737b      	strb	r3, [r7, #13]

    /* WEL */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfdp_private.SALObject, Object->sfdp_private.DriverInfo.WriteWELCommand, NULL, 0u))
341914cc:	687b      	ldr	r3, [r7, #4]
341914ce:	f103 0008 	add.w	r0, r3, #8
341914d2:	687b      	ldr	r3, [r7, #4]
341914d4:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
341914d8:	2300      	movs	r3, #0
341914da:	2200      	movs	r2, #0
341914dc:	f7fe f9b9 	bl	3418f852 <SAL_XSPI_SendReadCommand>
341914e0:	4603      	mov	r3, r0
341914e2:	2b00      	cmp	r3, #0
341914e4:	d002      	beq.n	341914ec <JEDEC_Basic_ManageQuadEnableRequirement+0x10c>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
341914e6:	230c      	movs	r3, #12
341914e8:	73fb      	strb	r3, [r7, #15]
      goto error;
341914ea:	e02d      	b.n	34191548 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* write the status register */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfdp_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 2u))
341914ec:	687b      	ldr	r3, [r7, #4]
341914ee:	f103 0008 	add.w	r0, r3, #8
341914f2:	f107 020c 	add.w	r2, r7, #12
341914f6:	2302      	movs	r3, #2
341914f8:	2101      	movs	r1, #1
341914fa:	f7fe f956 	bl	3418f7aa <SAL_XSPI_CommandSendData>
341914fe:	4603      	mov	r3, r0
34191500:	2b00      	cmp	r3, #0
34191502:	d002      	beq.n	3419150a <JEDEC_Basic_ManageQuadEnableRequirement+0x12a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34191504:	230c      	movs	r3, #12
34191506:	73fb      	strb	r3, [r7, #15]
      goto error;
34191508:	e01e      	b.n	34191548 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
3419150a:	2164      	movs	r1, #100	@ 0x64
3419150c:	6878      	ldr	r0, [r7, #4]
3419150e:	f7ff fc2d 	bl	34190d6c <driver_check_FlagBUSY>
34191512:	4603      	mov	r3, r0
34191514:	2b00      	cmp	r3, #0
34191516:	d002      	beq.n	3419151e <JEDEC_Basic_ManageQuadEnableRequirement+0x13e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34191518:	230c      	movs	r3, #12
3419151a:	73fb      	strb	r3, [r7, #15]
      goto error;
3419151c:	e014      	b.n	34191548 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    /* Optional : only for control read the status register and check write operation is OK */
    localValue[1] = 0xFF;
3419151e:	23ff      	movs	r3, #255	@ 0xff
34191520:	737b      	strb	r3, [r7, #13]
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfdp_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
34191522:	687b      	ldr	r3, [r7, #4]
34191524:	f103 0008 	add.w	r0, r3, #8
34191528:	f107 020c 	add.w	r2, r7, #12
3419152c:	2302      	movs	r3, #2
3419152e:	2105      	movs	r1, #5
34191530:	f7fe f98f 	bl	3418f852 <SAL_XSPI_SendReadCommand>
34191534:	4603      	mov	r3, r0
34191536:	2b00      	cmp	r3, #0
34191538:	d002      	beq.n	34191540 <JEDEC_Basic_ManageQuadEnableRequirement+0x160>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3419153a:	230c      	movs	r3, #12
3419153c:	73fb      	strb	r3, [r7, #15]
      goto error;
3419153e:	e003      	b.n	34191548 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
    }

    retr = EXTMEM_SFDP_OK;
34191540:	2300      	movs	r3, #0
34191542:	73fb      	strb	r3, [r7, #15]
    break;
34191544:	e000      	b.n	34191548 <JEDEC_Basic_ManageQuadEnableRequirement+0x168>
  case 0x6u: /* 110b: QE is bit 1 of the status register 2. Status register 1 is read using Read Status instruction 05h. Status register 2 is read using instruction 35h, and status register 3 is read using instruction 15h. QE is set via Write Status Register instruction 31h with one data byte where bit 1 is one. It is cleared via Write Status Register instruction 31h with one data byte where bit 1 is zero.*/
    break;
  case 0x7u: /*111b: Reserved */
    break;
  default :/* Added for Misra */
    break;
34191546:	bf00      	nop
  }
error :
  return retr;
34191548:	7bfb      	ldrb	r3, [r7, #15]
}
3419154a:	4618      	mov	r0, r3
3419154c:	3710      	adds	r7, #16
3419154e:	46bd      	mov	sp, r7
34191550:	bd80      	pop	{r7, pc}
34191552:	bf00      	nop
34191554:	341c0364 	.word	0x341c0364

34191558 <JEDEC_Basic_Manage4S4S4SEnableSequence>:
          JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_Manage4S4S4SEnableSequence(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
34191558:	b580      	push	{r7, lr}
3419155a:	b084      	sub	sp, #16
3419155c:	af00      	add	r7, sp, #0
3419155e:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
34191560:	230f      	movs	r3, #15
34191562:	73fb      	strb	r3, [r7, #15]
  uint8_t instruction = 0x00u;
34191564:	2300      	movs	r3, #0
34191566:	73bb      	strb	r3, [r7, #14]

  /* 4-4-4 mode enable sequences; This field describes the supported methods to enter 4-4-4 mode from 1-1-1 mode */
  /* x_xxx1b: set QE per QER description above, then issue instruction 38h */
  if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x1u) == 0x1u)
34191568:	4b1a      	ldr	r3, [pc, #104]	@ (341915d4 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x7c>)
3419156a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
3419156c:	f3c3 1304 	ubfx	r3, r3, #4, #5
34191570:	b2db      	uxtb	r3, r3
34191572:	f003 0301 	and.w	r3, r3, #1
34191576:	2b00      	cmp	r3, #0
34191578:	d007      	beq.n	3419158a <JEDEC_Basic_Manage4S4S4SEnableSequence+0x32>
  {
    retr = JEDEC_Basic_ManageQuadEnableRequirement(Object);
3419157a:	6878      	ldr	r0, [r7, #4]
3419157c:	f7ff ff30 	bl	341913e0 <JEDEC_Basic_ManageQuadEnableRequirement>
34191580:	4603      	mov	r3, r0
34191582:	73fb      	strb	r3, [r7, #15]
    instruction = 0x38u;
34191584:	2338      	movs	r3, #56	@ 0x38
34191586:	73bb      	strb	r3, [r7, #14]
34191588:	e00f      	b.n	341915aa <JEDEC_Basic_Manage4S4S4SEnableSequence+0x52>
  }
  /* x_x1xxb: issue instruction 35h */
  else if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x4u) == 0x4u)
3419158a:	4b12      	ldr	r3, [pc, #72]	@ (341915d4 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x7c>)
3419158c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
3419158e:	f3c3 1304 	ubfx	r3, r3, #4, #5
34191592:	b2db      	uxtb	r3, r3
34191594:	f003 0304 	and.w	r3, r3, #4
34191598:	2b00      	cmp	r3, #0
3419159a:	d006      	beq.n	341915aa <JEDEC_Basic_Manage4S4S4SEnableSequence+0x52>
  {
    /* If QE bit exists, Quad Enable Requirement describes method to enable Quad operations */
    retr = JEDEC_Basic_ManageQuadEnableRequirement(Object);
3419159c:	6878      	ldr	r0, [r7, #4]
3419159e:	f7ff ff1f 	bl	341913e0 <JEDEC_Basic_ManageQuadEnableRequirement>
341915a2:	4603      	mov	r3, r0
341915a4:	73fb      	strb	r3, [r7, #15]
    instruction = 0x35u;
341915a6:	2335      	movs	r3, #53	@ 0x35
341915a8:	73bb      	strb	r3, [r7, #14]
       Device uses a read-modify-write sequence of operations:
       Read Volatile Enhanced Configuration Register using instruction 65h, no address is required, set bit 7 to 1.
       Write Volatile Enhanced Configuration Register using instruction 61h, no address is required. This configuration is volatile.
  NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 enable sequence is issued.
  */
  if ((retr == EXTMEM_SFDP_OK) && (instruction != 0u))
341915aa:	7bfb      	ldrb	r3, [r7, #15]
341915ac:	2b00      	cmp	r3, #0
341915ae:	d10c      	bne.n	341915ca <JEDEC_Basic_Manage4S4S4SEnableSequence+0x72>
341915b0:	7bbb      	ldrb	r3, [r7, #14]
341915b2:	2b00      	cmp	r3, #0
341915b4:	d009      	beq.n	341915ca <JEDEC_Basic_Manage4S4S4SEnableSequence+0x72>
  {
    (void)SAL_XSPI_SendReadCommand(&Object->sfdp_private.SALObject, instruction, NULL, 0u);
341915b6:	687b      	ldr	r3, [r7, #4]
341915b8:	f103 0008 	add.w	r0, r3, #8
341915bc:	7bb9      	ldrb	r1, [r7, #14]
341915be:	2300      	movs	r3, #0
341915c0:	2200      	movs	r2, #0
341915c2:	f7fe f946 	bl	3418f852 <SAL_XSPI_SendReadCommand>
    /* @note on memory W25Q64JV the command 38h does not exist so the control on command execution has been removed */
    retr = EXTMEM_SFDP_OK;
341915c6:	2300      	movs	r3, #0
341915c8:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
341915ca:	7bfb      	ldrb	r3, [r7, #15]
}
341915cc:	4618      	mov	r0, r3
341915ce:	3710      	adds	r7, #16
341915d0:	46bd      	mov	sp, r7
341915d2:	bd80      	pop	{r7, pc}
341915d4:	341c0364 	.word	0x341c0364

341915d8 <CheckSFDP_Signature>:
 * @param Object memory Object
 * @param Signature value of the SFDP signature
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef CheckSFDP_Signature(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t Signature )
{
341915d8:	b580      	push	{r7, lr}
341915da:	b084      	sub	sp, #16
341915dc:	af00      	add	r7, sp, #0
341915de:	6078      	str	r0, [r7, #4]
341915e0:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
341915e2:	2304      	movs	r3, #4
341915e4:	73fb      	strb	r3, [r7, #15]

  /* check the magic number */
  switch(Signature)
341915e6:	683b      	ldr	r3, [r7, #0]
341915e8:	4a0e      	ldr	r2, [pc, #56]	@ (34191624 <CheckSFDP_Signature+0x4c>)
341915ea:	4293      	cmp	r3, r2
341915ec:	d006      	beq.n	341915fc <CheckSFDP_Signature+0x24>
341915ee:	683b      	ldr	r3, [r7, #0]
341915f0:	4a0d      	ldr	r2, [pc, #52]	@ (34191628 <CheckSFDP_Signature+0x50>)
341915f2:	4293      	cmp	r3, r2
341915f4:	d10e      	bne.n	34191614 <CheckSFDP_Signature+0x3c>
  {
  case SFDP_SIGNATURE :
    SFDP_DEBUG_STR("signature of the header: OK");
    retr = EXTMEM_SFDP_OK;
341915f6:	2300      	movs	r3, #0
341915f8:	73fb      	strb	r3, [r7, #15]
    break;
341915fa:	e00e      	b.n	3419161a <CheckSFDP_Signature+0x42>
  case SFDP_SIGNATURE_INVERTED :
    SFDP_DEBUG_STR("signature of the header: KO inverted data order");
    /* Change the memory type settings */
    if (HAL_OK == SAL_XSPI_UpdateMemoryType(&Object->sfdp_private.SALObject, SAL_XSPI_ORDERINVERTED))
341915fc:	687b      	ldr	r3, [r7, #4]
341915fe:	3308      	adds	r3, #8
34191600:	2100      	movs	r1, #0
34191602:	4618      	mov	r0, r3
34191604:	f7fe fae1 	bl	3418fbca <SAL_XSPI_UpdateMemoryType>
34191608:	4603      	mov	r3, r0
3419160a:	2b00      	cmp	r3, #0
3419160c:	d104      	bne.n	34191618 <CheckSFDP_Signature+0x40>
    {
      retr = EXTMEM_SFDP_ERROR_SIGNATUREMTYPE;
3419160e:	2305      	movs	r3, #5
34191610:	73fb      	strb	r3, [r7, #15]
    }
    break;
34191612:	e001      	b.n	34191618 <CheckSFDP_Signature+0x40>
  default :
    SFDP_DEBUG_STR("signature of the header: KO");
    break;
34191614:	bf00      	nop
34191616:	e000      	b.n	3419161a <CheckSFDP_Signature+0x42>
    break;
34191618:	bf00      	nop
  }
  return retr;
3419161a:	7bfb      	ldrb	r3, [r7, #15]
}
3419161c:	4618      	mov	r0, r3
3419161e:	3710      	adds	r7, #16
34191620:	46bd      	mov	sp, r7
34191622:	bd80      	pop	{r7, pc}
34191624:	44505346 	.word	0x44505346
34191628:	50444653 	.word	0x50444653

3419162c <EXTMEM_DRIVER_NOR_SFDP_Init>:
/** @defgroup DRIVER_SFDP_Exported_Functions DRIVER SFDP Exported Functions
  * @{
  */

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config, uint32_t ClockInput, EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3419162c:	b580      	push	{r7, lr}
3419162e:	b08a      	sub	sp, #40	@ 0x28
34191630:	af00      	add	r7, sp, #0
34191632:	60f8      	str	r0, [r7, #12]
34191634:	607a      	str	r2, [r7, #4]
34191636:	603b      	str	r3, [r7, #0]
34191638:	460b      	mov	r3, r1
3419163a:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3419163c:	2300      	movs	r3, #0
3419163e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SFDP_HeaderTypeDef JEDEC_SFDP_Header;
  uint8_t FreqUpdate = 0u;
34191642:	2300      	movs	r3, #0
34191644:	76fb      	strb	r3, [r7, #27]
  uint8_t DataID[6];
  uint32_t ClockOut;

  /* reset data of SFDPObject to zero */
  SFDP_DEBUG_STR("1 - reset data SFDPObject to zero")
  (void)memset((void *)&SFDPObject->sfdp_private, 0x0, sizeof(SFDPObject->sfdp_private));
34191646:	683b      	ldr	r3, [r7, #0]
34191648:	3308      	adds	r3, #8
3419164a:	2298      	movs	r2, #152	@ 0x98
3419164c:	2100      	movs	r1, #0
3419164e:	4618      	mov	r0, r3
34191650:	f000 faf8 	bl	34191c44 <memset>

  /* initialize the SFDPObject */
  SFDP_DEBUG_STR("2 - initialize the SFDPObject")
  SFDPObject->sfdp_private.Config = Config;
34191654:	683b      	ldr	r3, [r7, #0]
34191656:	7afa      	ldrb	r2, [r7, #11]
34191658:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  SFDPObject->sfdp_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
3419165c:	683b      	ldr	r3, [r7, #0]
3419165e:	2200      	movs	r2, #0
34191660:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  SFDPObject->sfdp_private.DriverInfo.ClockIn = ClockInput;
34191664:	683b      	ldr	r3, [r7, #0]
34191666:	687a      	ldr	r2, [r7, #4]
34191668:	669a      	str	r2, [r3, #104]	@ 0x68
  SAL_XSPI_SET_SFDPDUMMYCYLE(SFDPObject->sfdp_private.SALObject, EXTMEM_READ_SFDP_NB_DUMMY_CYCLES_DEFAULT);
3419166a:	683b      	ldr	r3, [r7, #0]
3419166c:	2208      	movs	r2, #8
3419166e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* set memory speed to 50Mhz maximum */
  SFDP_DEBUG_STR("3 - set memory link and speed to 50Mhz maximum")
  (void)SAL_XSPI_Init(&SFDPObject->sfdp_private.SALObject, Peripheral);
34191672:	683b      	ldr	r3, [r7, #0]
34191674:	3308      	adds	r3, #8
34191676:	68f9      	ldr	r1, [r7, #12]
34191678:	4618      	mov	r0, r3
3419167a:	f7fd fd86 	bl	3418f18a <SAL_XSPI_Init>
  (void)SAL_XSPI_SetClock(&SFDPObject->sfdp_private.SALObject, ClockInput, DRIVER_SFDP_DEFAULT_CLOCK, &ClockOut);
3419167e:	683b      	ldr	r3, [r7, #0]
34191680:	f103 0008 	add.w	r0, r3, #8
34191684:	f107 0310 	add.w	r3, r7, #16
34191688:	4a45      	ldr	r2, [pc, #276]	@ (341917a0 <EXTMEM_DRIVER_NOR_SFDP_Init+0x174>)
3419168a:	6879      	ldr	r1, [r7, #4]
3419168c:	f7fd fd3e 	bl	3418f10c <SAL_XSPI_SetClock>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&SFDPObject->sfdp_private.SALObject);
34191690:	683b      	ldr	r3, [r7, #0]
34191692:	3308      	adds	r3, #8
34191694:	4618      	mov	r0, r3
34191696:	f7fe fa87 	bl	3418fba8 <SAL_XSPI_DisableMapMode>

  /* analyze the SFDP structure to get driver information */
  SFDP_DEBUG_STR("4 - analyze the SFDP structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
3419169a:	f107 031c 	add.w	r3, r7, #28
3419169e:	4619      	mov	r1, r3
341916a0:	6838      	ldr	r0, [r7, #0]
341916a2:	f7fe fb65 	bl	3418fd70 <SFDP_GetHeader>
341916a6:	4603      	mov	r3, r0
341916a8:	2b00      	cmp	r3, #0
341916aa:	d003      	beq.n	341916b4 <EXTMEM_DRIVER_NOR_SFDP_Init+0x88>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only performed in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
341916ac:	23ff      	movs	r3, #255	@ 0xff
341916ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
341916b2:	e06e      	b.n	34191792 <EXTMEM_DRIVER_NOR_SFDP_Init+0x166>
  }

  /* Reset the memory */
  SFDP_DEBUG_STR("5 - reset the memory")
  if(EXTMEM_SFDP_OK != SFDP_MemoryReset(SFDPObject))
341916b4:	6838      	ldr	r0, [r7, #0]
341916b6:	f7fe fc95 	bl	3418ffe4 <SFDP_MemoryReset>
     */
    SFDP_DEBUG_STR("ERROR::on the call of SFDP_MemoryReset but no error returned")
  }

  /* wait few ms after the reset operation, this is done to avoid issue on SFDP read */
  HAL_Delay(10);
341916ba:	200a      	movs	r0, #10
341916bc:	f7f0 fea0 	bl	34182400 <HAL_Delay>

  /* analyze the SFDP structure to get driver information after the reset */
  SFDP_DEBUG_STR("6 - analyze the SFDP structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
341916c0:	f107 031c 	add.w	r3, r7, #28
341916c4:	4619      	mov	r1, r3
341916c6:	6838      	ldr	r0, [r7, #0]
341916c8:	f7fe fb52 	bl	3418fd70 <SFDP_GetHeader>
341916cc:	4603      	mov	r3, r0
341916ce:	2b00      	cmp	r3, #0
341916d0:	d003      	beq.n	341916da <EXTMEM_DRIVER_NOR_SFDP_Init+0xae>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only perform in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
341916d2:	23ff      	movs	r3, #255	@ 0xff
341916d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
341916d8:	e05b      	b.n	34191792 <EXTMEM_DRIVER_NOR_SFDP_Init+0x166>
  }

  /* Save information from the SFDP table
     Nb of parameters starts at 0 (0 means 1 parameter) */
  if (JEDEC_SFDP_Header.param_number >= SFDP_MAX_NB_OF_PARAM)
341916da:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
341916de:	2b09      	cmp	r3, #9
341916e0:	d904      	bls.n	341916ec <EXTMEM_DRIVER_NOR_SFDP_Init+0xc0>
  {
    SFDPObject->sfdp_private.Sfdp_param_number = SFDP_MAX_NB_OF_PARAM - 1;
341916e2:	683b      	ldr	r3, [r7, #0]
341916e4:	2209      	movs	r2, #9
341916e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
341916ea:	e004      	b.n	341916f6 <EXTMEM_DRIVER_NOR_SFDP_Init+0xca>
  }
  else
  {
    SFDPObject->sfdp_private.Sfdp_param_number = JEDEC_SFDP_Header.param_number;
341916ec:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
341916f0:	683b      	ldr	r3, [r7, #0]
341916f2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
  }
  SFDPObject->sfdp_private.Sfdp_AccessProtocol = JEDEC_SFDP_Header.AccessProtocol;
341916f6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
341916fa:	683b      	ldr	r3, [r7, #0]
341916fc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

  /* read the flash ID */
  SFDP_DEBUG_STR("7 - read the flash ID")
  (void)SAL_XSPI_GetId(&SFDPObject->sfdp_private.SALObject, DataID, EXTMEM_READ_JEDEC_ID_SIZE);
34191700:	683b      	ldr	r3, [r7, #0]
34191702:	3308      	adds	r3, #8
34191704:	f107 0114 	add.w	r1, r7, #20
34191708:	2204      	movs	r2, #4
3419170a:	4618      	mov	r0, r3
3419170c:	f7fd ff1c 	bl	3418f548 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

  /* Keep manufacturer information, it could be used to help in
     building of consistent driver */
  SFDPObject->sfdp_private.ManuID = DataID[0];
34191710:	7d3a      	ldrb	r2, [r7, #20]
34191712:	683b      	ldr	r3, [r7, #0]
34191714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* get the SFDP data */
  SFDP_DEBUG_STR("8 - collect the SFDP data")
  if(EXTMEM_SFDP_OK != SFDP_CollectData(SFDPObject))
34191718:	6838      	ldr	r0, [r7, #0]
3419171a:	f7fe fb87 	bl	3418fe2c <SFDP_CollectData>
3419171e:	4603      	mov	r3, r0
34191720:	2b00      	cmp	r3, #0
34191722:	d003      	beq.n	3419172c <EXTMEM_DRIVER_NOR_SFDP_Init+0x100>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
34191724:	23ff      	movs	r3, #255	@ 0xff
34191726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3419172a:	e032      	b.n	34191792 <EXTMEM_DRIVER_NOR_SFDP_Init+0x166>
  }

  /* setup the generic driver information and prepare the physical layer */
  SFDP_DEBUG_STR("9 - build the generic driver information and prepare the physical layer")
  if(EXTMEM_SFDP_OK != SFDP_BuildGenericDriver(SFDPObject, &FreqUpdate))
3419172c:	f107 031b 	add.w	r3, r7, #27
34191730:	4619      	mov	r1, r3
34191732:	6838      	ldr	r0, [r7, #0]
34191734:	f7fe fd32 	bl	3419019c <SFDP_BuildGenericDriver>
34191738:	4603      	mov	r3, r0
3419173a:	2b00      	cmp	r3, #0
3419173c:	d003      	beq.n	34191746 <EXTMEM_DRIVER_NOR_SFDP_Init+0x11a>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD;
3419173e:	23fd      	movs	r3, #253	@ 0xfd
34191740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
34191744:	e025      	b.n	34191792 <EXTMEM_DRIVER_NOR_SFDP_Init+0x166>
  }

  SFDP_DEBUG_STR("10 - adjust the frequency if required")
  if ((FreqUpdate == 0u) && (SFDPObject->sfdp_public.MaxFreq != 0u))
34191746:	7efb      	ldrb	r3, [r7, #27]
34191748:	2b00      	cmp	r3, #0
3419174a:	d10d      	bne.n	34191768 <EXTMEM_DRIVER_NOR_SFDP_Init+0x13c>
3419174c:	683b      	ldr	r3, [r7, #0]
3419174e:	681b      	ldr	r3, [r3, #0]
34191750:	2b00      	cmp	r3, #0
34191752:	d009      	beq.n	34191768 <EXTMEM_DRIVER_NOR_SFDP_Init+0x13c>
  {
    (void)SAL_XSPI_SetClock(&SFDPObject->sfdp_private.SALObject, ClockInput, SFDPObject->sfdp_public.MaxFreq, &ClockOut);
34191754:	683b      	ldr	r3, [r7, #0]
34191756:	f103 0008 	add.w	r0, r3, #8
3419175a:	683b      	ldr	r3, [r7, #0]
3419175c:	681a      	ldr	r2, [r3, #0]
3419175e:	f107 0310 	add.w	r3, r7, #16
34191762:	6879      	ldr	r1, [r7, #4]
34191764:	f7fd fcd2 	bl	3418f10c <SAL_XSPI_SetClock>
    SFDP_DEBUG_STR("--> new freq configured");
  }

  SFDP_DEBUG_STR("11 - read again the SFDP header to adjust memory type if necessary")
  if(EXTMEM_SFDP_OK != SFDP_ReadHeader(SFDPObject, &JEDEC_SFDP_Header))
34191768:	f107 031c 	add.w	r3, r7, #28
3419176c:	4619      	mov	r1, r3
3419176e:	6838      	ldr	r0, [r7, #0]
34191770:	f7fe fac0 	bl	3418fcf4 <SFDP_ReadHeader>
34191774:	4603      	mov	r3, r0
34191776:	2b00      	cmp	r3, #0
34191778:	d003      	beq.n	34191782 <EXTMEM_DRIVER_NOR_SFDP_Init+0x156>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_MEMTYPE_CHECK")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MEMTYPE_CHECK;
3419177a:	23f2      	movs	r3, #242	@ 0xf2
3419177c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
34191780:	e007      	b.n	34191792 <EXTMEM_DRIVER_NOR_SFDP_Init+0x166>
  }

  (void)SAL_XSPI_GetId(&SFDPObject->sfdp_private.SALObject, DataID, EXTMEM_READ_JEDEC_ID_SIZE);
34191782:	683b      	ldr	r3, [r7, #0]
34191784:	3308      	adds	r3, #8
34191786:	f107 0114 	add.w	r1, r7, #20
3419178a:	2204      	movs	r2, #4
3419178c:	4618      	mov	r0, r3
3419178e:	f7fd fedb 	bl	3418f548 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

error:
  return retr;
34191792:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
34191796:	4618      	mov	r0, r3
34191798:	3728      	adds	r7, #40	@ 0x28
3419179a:	46bd      	mov	sp, r7
3419179c:	bd80      	pop	{r7, pc}
3419179e:	bf00      	nop
341917a0:	02faf080 	.word	0x02faf080

341917a4 <EXTMEM_DRIVER_NOR_SFDP_DeInit>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_DeInit(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
341917a4:	b480      	push	{r7}
341917a6:	b083      	sub	sp, #12
341917a8:	af00      	add	r7, sp, #0
341917aa:	6078      	str	r0, [r7, #4]
  SFDPObject->sfdp_private.FlashSize = 0;
341917ac:	687b      	ldr	r3, [r7, #4]
341917ae:	2200      	movs	r2, #0
341917b0:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  return EXTMEM_DRIVER_NOR_SFDP_OK;
341917b4:	2300      	movs	r3, #0
}
341917b6:	4618      	mov	r0, r3
341917b8:	370c      	adds	r7, #12
341917ba:	46bd      	mov	sp, r7
341917bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341917c0:	4770      	bx	lr

341917c2 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
341917c2:	b590      	push	{r4, r7, lr}
341917c4:	b087      	sub	sp, #28
341917c6:	af02      	add	r7, sp, #8
341917c8:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
341917ca:	2300      	movs	r3, #0
341917cc:	73fb      	strb	r3, [r7, #15]

  /* enter the mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfdp_private.SALObject, SFDPObject->sfdp_private.DriverInfo.ReadInstruction,
341917ce:	687b      	ldr	r3, [r7, #4]
341917d0:	f103 0008 	add.w	r0, r3, #8
341917d4:	687b      	ldr	r3, [r7, #4]
341917d6:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
                                        (uint8_t)SFDPObject->sfdp_private.SALObject.Commandbase.DummyCycles,
341917da:	687b      	ldr	r3, [r7, #4]
341917dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfdp_private.SALObject, SFDPObject->sfdp_private.DriverInfo.ReadInstruction,
341917de:	b2da      	uxtb	r2, r3
341917e0:	687b      	ldr	r3, [r7, #4]
341917e2:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
341917e6:	2400      	movs	r4, #0
341917e8:	9400      	str	r4, [sp, #0]
341917ea:	f7fe f964 	bl	3418fab6 <SAL_XSPI_EnableMapMode>
341917ee:	4603      	mov	r3, r0
341917f0:	2b00      	cmp	r3, #0
341917f2:	d001      	beq.n	341917f8 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode+0x36>
                                        SFDPObject->sfdp_private.DriverInfo.PageProgramInstruction, 0))
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
341917f4:	23f3      	movs	r3, #243	@ 0xf3
341917f6:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
341917f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
341917fc:	4618      	mov	r0, r3
341917fe:	3714      	adds	r7, #20
34191800:	46bd      	mov	sp, r7
34191802:	bd90      	pop	{r4, r7, pc}

34191804 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
34191804:	b580      	push	{r7, lr}
34191806:	b084      	sub	sp, #16
34191808:	af00      	add	r7, sp, #0
3419180a:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3419180c:	2300      	movs	r3, #0
3419180e:	73fb      	strb	r3, [r7, #15]

  /* exit the mapped mode */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&SFDPObject->sfdp_private.SALObject))
34191810:	687b      	ldr	r3, [r7, #4]
34191812:	3308      	adds	r3, #8
34191814:	4618      	mov	r0, r3
34191816:	f7fe f9c7 	bl	3418fba8 <SAL_XSPI_DisableMapMode>
3419181a:	4603      	mov	r3, r0
3419181c:	2b00      	cmp	r3, #0
3419181e:	d001      	beq.n	34191824 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode+0x20>
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
34191820:	23f3      	movs	r3, #243	@ 0xf3
34191822:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
34191824:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
34191828:	4618      	mov	r0, r3
3419182a:	3710      	adds	r7, #16
3419182c:	46bd      	mov	sp, r7
3419182e:	bd80      	pop	{r7, pc}

34191830 <std>:
34191830:	2300      	movs	r3, #0
34191832:	b510      	push	{r4, lr}
34191834:	4604      	mov	r4, r0
34191836:	6083      	str	r3, [r0, #8]
34191838:	8181      	strh	r1, [r0, #12]
3419183a:	4619      	mov	r1, r3
3419183c:	6643      	str	r3, [r0, #100]	@ 0x64
3419183e:	81c2      	strh	r2, [r0, #14]
34191840:	2208      	movs	r2, #8
34191842:	6183      	str	r3, [r0, #24]
34191844:	e9c0 3300 	strd	r3, r3, [r0]
34191848:	e9c0 3304 	strd	r3, r3, [r0, #16]
3419184c:	305c      	adds	r0, #92	@ 0x5c
3419184e:	f000 f9f9 	bl	34191c44 <memset>
34191852:	4b0d      	ldr	r3, [pc, #52]	@ (34191888 <std+0x58>)
34191854:	6224      	str	r4, [r4, #32]
34191856:	6263      	str	r3, [r4, #36]	@ 0x24
34191858:	4b0c      	ldr	r3, [pc, #48]	@ (3419188c <std+0x5c>)
3419185a:	62a3      	str	r3, [r4, #40]	@ 0x28
3419185c:	4b0c      	ldr	r3, [pc, #48]	@ (34191890 <std+0x60>)
3419185e:	62e3      	str	r3, [r4, #44]	@ 0x2c
34191860:	4b0c      	ldr	r3, [pc, #48]	@ (34191894 <std+0x64>)
34191862:	6323      	str	r3, [r4, #48]	@ 0x30
34191864:	4b0c      	ldr	r3, [pc, #48]	@ (34191898 <std+0x68>)
34191866:	429c      	cmp	r4, r3
34191868:	d006      	beq.n	34191878 <std+0x48>
3419186a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3419186e:	4294      	cmp	r4, r2
34191870:	d002      	beq.n	34191878 <std+0x48>
34191872:	33d0      	adds	r3, #208	@ 0xd0
34191874:	429c      	cmp	r4, r3
34191876:	d105      	bne.n	34191884 <std+0x54>
34191878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3419187c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34191880:	f000 ba58 	b.w	34191d34 <__retarget_lock_init_recursive>
34191884:	bd10      	pop	{r4, pc}
34191886:	bf00      	nop
34191888:	34191a95 	.word	0x34191a95
3419188c:	34191ab7 	.word	0x34191ab7
34191890:	34191aef 	.word	0x34191aef
34191894:	34191b13 	.word	0x34191b13
34191898:	341c0474 	.word	0x341c0474

3419189c <stdio_exit_handler>:
3419189c:	4a02      	ldr	r2, [pc, #8]	@ (341918a8 <stdio_exit_handler+0xc>)
3419189e:	4903      	ldr	r1, [pc, #12]	@ (341918ac <stdio_exit_handler+0x10>)
341918a0:	4803      	ldr	r0, [pc, #12]	@ (341918b0 <stdio_exit_handler+0x14>)
341918a2:	f000 b869 	b.w	34191978 <_fwalk_sglue>
341918a6:	bf00      	nop
341918a8:	341c00b8 	.word	0x341c00b8
341918ac:	341925f1 	.word	0x341925f1
341918b0:	341c00c8 	.word	0x341c00c8

341918b4 <cleanup_stdio>:
341918b4:	6841      	ldr	r1, [r0, #4]
341918b6:	4b0c      	ldr	r3, [pc, #48]	@ (341918e8 <cleanup_stdio+0x34>)
341918b8:	4299      	cmp	r1, r3
341918ba:	b510      	push	{r4, lr}
341918bc:	4604      	mov	r4, r0
341918be:	d001      	beq.n	341918c4 <cleanup_stdio+0x10>
341918c0:	f000 fe96 	bl	341925f0 <_fflush_r>
341918c4:	68a1      	ldr	r1, [r4, #8]
341918c6:	4b09      	ldr	r3, [pc, #36]	@ (341918ec <cleanup_stdio+0x38>)
341918c8:	4299      	cmp	r1, r3
341918ca:	d002      	beq.n	341918d2 <cleanup_stdio+0x1e>
341918cc:	4620      	mov	r0, r4
341918ce:	f000 fe8f 	bl	341925f0 <_fflush_r>
341918d2:	68e1      	ldr	r1, [r4, #12]
341918d4:	4b06      	ldr	r3, [pc, #24]	@ (341918f0 <cleanup_stdio+0x3c>)
341918d6:	4299      	cmp	r1, r3
341918d8:	d004      	beq.n	341918e4 <cleanup_stdio+0x30>
341918da:	4620      	mov	r0, r4
341918dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
341918e0:	f000 be86 	b.w	341925f0 <_fflush_r>
341918e4:	bd10      	pop	{r4, pc}
341918e6:	bf00      	nop
341918e8:	341c0474 	.word	0x341c0474
341918ec:	341c04dc 	.word	0x341c04dc
341918f0:	341c0544 	.word	0x341c0544

341918f4 <global_stdio_init.part.0>:
341918f4:	b510      	push	{r4, lr}
341918f6:	4b0b      	ldr	r3, [pc, #44]	@ (34191924 <global_stdio_init.part.0+0x30>)
341918f8:	2104      	movs	r1, #4
341918fa:	4c0b      	ldr	r4, [pc, #44]	@ (34191928 <global_stdio_init.part.0+0x34>)
341918fc:	4a0b      	ldr	r2, [pc, #44]	@ (3419192c <global_stdio_init.part.0+0x38>)
341918fe:	4620      	mov	r0, r4
34191900:	601a      	str	r2, [r3, #0]
34191902:	2200      	movs	r2, #0
34191904:	f7ff ff94 	bl	34191830 <std>
34191908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3419190c:	2201      	movs	r2, #1
3419190e:	2109      	movs	r1, #9
34191910:	f7ff ff8e 	bl	34191830 <std>
34191914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
34191918:	2202      	movs	r2, #2
3419191a:	2112      	movs	r1, #18
3419191c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34191920:	f7ff bf86 	b.w	34191830 <std>
34191924:	341c05ac 	.word	0x341c05ac
34191928:	341c0474 	.word	0x341c0474
3419192c:	3419189d 	.word	0x3419189d

34191930 <__sfp_lock_acquire>:
34191930:	4801      	ldr	r0, [pc, #4]	@ (34191938 <__sfp_lock_acquire+0x8>)
34191932:	f000 ba00 	b.w	34191d36 <__retarget_lock_acquire_recursive>
34191936:	bf00      	nop
34191938:	341c05b5 	.word	0x341c05b5

3419193c <__sfp_lock_release>:
3419193c:	4801      	ldr	r0, [pc, #4]	@ (34191944 <__sfp_lock_release+0x8>)
3419193e:	f000 b9fb 	b.w	34191d38 <__retarget_lock_release_recursive>
34191942:	bf00      	nop
34191944:	341c05b5 	.word	0x341c05b5

34191948 <__sinit>:
34191948:	b510      	push	{r4, lr}
3419194a:	4604      	mov	r4, r0
3419194c:	f7ff fff0 	bl	34191930 <__sfp_lock_acquire>
34191950:	6a23      	ldr	r3, [r4, #32]
34191952:	b11b      	cbz	r3, 3419195c <__sinit+0x14>
34191954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34191958:	f7ff bff0 	b.w	3419193c <__sfp_lock_release>
3419195c:	4b04      	ldr	r3, [pc, #16]	@ (34191970 <__sinit+0x28>)
3419195e:	6223      	str	r3, [r4, #32]
34191960:	4b04      	ldr	r3, [pc, #16]	@ (34191974 <__sinit+0x2c>)
34191962:	681b      	ldr	r3, [r3, #0]
34191964:	2b00      	cmp	r3, #0
34191966:	d1f5      	bne.n	34191954 <__sinit+0xc>
34191968:	f7ff ffc4 	bl	341918f4 <global_stdio_init.part.0>
3419196c:	e7f2      	b.n	34191954 <__sinit+0xc>
3419196e:	bf00      	nop
34191970:	341918b5 	.word	0x341918b5
34191974:	341c05ac 	.word	0x341c05ac

34191978 <_fwalk_sglue>:
34191978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3419197c:	4607      	mov	r7, r0
3419197e:	4688      	mov	r8, r1
34191980:	4614      	mov	r4, r2
34191982:	2600      	movs	r6, #0
34191984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
34191988:	f1b9 0901 	subs.w	r9, r9, #1
3419198c:	d505      	bpl.n	3419199a <_fwalk_sglue+0x22>
3419198e:	6824      	ldr	r4, [r4, #0]
34191990:	2c00      	cmp	r4, #0
34191992:	d1f7      	bne.n	34191984 <_fwalk_sglue+0xc>
34191994:	4630      	mov	r0, r6
34191996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3419199a:	89ab      	ldrh	r3, [r5, #12]
3419199c:	2b01      	cmp	r3, #1
3419199e:	d907      	bls.n	341919b0 <_fwalk_sglue+0x38>
341919a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
341919a4:	3301      	adds	r3, #1
341919a6:	d003      	beq.n	341919b0 <_fwalk_sglue+0x38>
341919a8:	4629      	mov	r1, r5
341919aa:	4638      	mov	r0, r7
341919ac:	47c0      	blx	r8
341919ae:	4306      	orrs	r6, r0
341919b0:	3568      	adds	r5, #104	@ 0x68
341919b2:	e7e9      	b.n	34191988 <_fwalk_sglue+0x10>

341919b4 <iprintf>:
341919b4:	b40f      	push	{r0, r1, r2, r3}
341919b6:	b507      	push	{r0, r1, r2, lr}
341919b8:	4906      	ldr	r1, [pc, #24]	@ (341919d4 <iprintf+0x20>)
341919ba:	ab04      	add	r3, sp, #16
341919bc:	6808      	ldr	r0, [r1, #0]
341919be:	f853 2b04 	ldr.w	r2, [r3], #4
341919c2:	6881      	ldr	r1, [r0, #8]
341919c4:	9301      	str	r3, [sp, #4]
341919c6:	f000 fae7 	bl	34191f98 <_vfiprintf_r>
341919ca:	b003      	add	sp, #12
341919cc:	f85d eb04 	ldr.w	lr, [sp], #4
341919d0:	b004      	add	sp, #16
341919d2:	4770      	bx	lr
341919d4:	341c00c4 	.word	0x341c00c4

341919d8 <_puts_r>:
341919d8:	6a03      	ldr	r3, [r0, #32]
341919da:	b570      	push	{r4, r5, r6, lr}
341919dc:	4605      	mov	r5, r0
341919de:	460e      	mov	r6, r1
341919e0:	6884      	ldr	r4, [r0, #8]
341919e2:	b90b      	cbnz	r3, 341919e8 <_puts_r+0x10>
341919e4:	f7ff ffb0 	bl	34191948 <__sinit>
341919e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
341919ea:	07db      	lsls	r3, r3, #31
341919ec:	d405      	bmi.n	341919fa <_puts_r+0x22>
341919ee:	89a3      	ldrh	r3, [r4, #12]
341919f0:	0598      	lsls	r0, r3, #22
341919f2:	d402      	bmi.n	341919fa <_puts_r+0x22>
341919f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
341919f6:	f000 f99e 	bl	34191d36 <__retarget_lock_acquire_recursive>
341919fa:	89a3      	ldrh	r3, [r4, #12]
341919fc:	0719      	lsls	r1, r3, #28
341919fe:	d502      	bpl.n	34191a06 <_puts_r+0x2e>
34191a00:	6923      	ldr	r3, [r4, #16]
34191a02:	2b00      	cmp	r3, #0
34191a04:	d135      	bne.n	34191a72 <_puts_r+0x9a>
34191a06:	4621      	mov	r1, r4
34191a08:	4628      	mov	r0, r5
34191a0a:	f000 f8c5 	bl	34191b98 <__swsetup_r>
34191a0e:	b380      	cbz	r0, 34191a72 <_puts_r+0x9a>
34191a10:	f04f 35ff 	mov.w	r5, #4294967295
34191a14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34191a16:	07da      	lsls	r2, r3, #31
34191a18:	d405      	bmi.n	34191a26 <_puts_r+0x4e>
34191a1a:	89a3      	ldrh	r3, [r4, #12]
34191a1c:	059b      	lsls	r3, r3, #22
34191a1e:	d402      	bmi.n	34191a26 <_puts_r+0x4e>
34191a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34191a22:	f000 f989 	bl	34191d38 <__retarget_lock_release_recursive>
34191a26:	4628      	mov	r0, r5
34191a28:	bd70      	pop	{r4, r5, r6, pc}
34191a2a:	2b00      	cmp	r3, #0
34191a2c:	da04      	bge.n	34191a38 <_puts_r+0x60>
34191a2e:	69a2      	ldr	r2, [r4, #24]
34191a30:	429a      	cmp	r2, r3
34191a32:	dc17      	bgt.n	34191a64 <_puts_r+0x8c>
34191a34:	290a      	cmp	r1, #10
34191a36:	d015      	beq.n	34191a64 <_puts_r+0x8c>
34191a38:	6823      	ldr	r3, [r4, #0]
34191a3a:	1c5a      	adds	r2, r3, #1
34191a3c:	6022      	str	r2, [r4, #0]
34191a3e:	7019      	strb	r1, [r3, #0]
34191a40:	68a3      	ldr	r3, [r4, #8]
34191a42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
34191a46:	3b01      	subs	r3, #1
34191a48:	60a3      	str	r3, [r4, #8]
34191a4a:	2900      	cmp	r1, #0
34191a4c:	d1ed      	bne.n	34191a2a <_puts_r+0x52>
34191a4e:	2b00      	cmp	r3, #0
34191a50:	da11      	bge.n	34191a76 <_puts_r+0x9e>
34191a52:	4622      	mov	r2, r4
34191a54:	210a      	movs	r1, #10
34191a56:	4628      	mov	r0, r5
34191a58:	f000 f85f 	bl	34191b1a <__swbuf_r>
34191a5c:	3001      	adds	r0, #1
34191a5e:	d0d7      	beq.n	34191a10 <_puts_r+0x38>
34191a60:	250a      	movs	r5, #10
34191a62:	e7d7      	b.n	34191a14 <_puts_r+0x3c>
34191a64:	4622      	mov	r2, r4
34191a66:	4628      	mov	r0, r5
34191a68:	f000 f857 	bl	34191b1a <__swbuf_r>
34191a6c:	3001      	adds	r0, #1
34191a6e:	d1e7      	bne.n	34191a40 <_puts_r+0x68>
34191a70:	e7ce      	b.n	34191a10 <_puts_r+0x38>
34191a72:	3e01      	subs	r6, #1
34191a74:	e7e4      	b.n	34191a40 <_puts_r+0x68>
34191a76:	6823      	ldr	r3, [r4, #0]
34191a78:	1c5a      	adds	r2, r3, #1
34191a7a:	6022      	str	r2, [r4, #0]
34191a7c:	220a      	movs	r2, #10
34191a7e:	701a      	strb	r2, [r3, #0]
34191a80:	e7ee      	b.n	34191a60 <_puts_r+0x88>
	...

34191a84 <puts>:
34191a84:	4b02      	ldr	r3, [pc, #8]	@ (34191a90 <puts+0xc>)
34191a86:	4601      	mov	r1, r0
34191a88:	6818      	ldr	r0, [r3, #0]
34191a8a:	f7ff bfa5 	b.w	341919d8 <_puts_r>
34191a8e:	bf00      	nop
34191a90:	341c00c4 	.word	0x341c00c4

34191a94 <__sread>:
34191a94:	b510      	push	{r4, lr}
34191a96:	460c      	mov	r4, r1
34191a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34191a9c:	f000 f8fc 	bl	34191c98 <_read_r>
34191aa0:	2800      	cmp	r0, #0
34191aa2:	bfab      	itete	ge
34191aa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
34191aa6:	89a3      	ldrhlt	r3, [r4, #12]
34191aa8:	181b      	addge	r3, r3, r0
34191aaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
34191aae:	bfac      	ite	ge
34191ab0:	6563      	strge	r3, [r4, #84]	@ 0x54
34191ab2:	81a3      	strhlt	r3, [r4, #12]
34191ab4:	bd10      	pop	{r4, pc}

34191ab6 <__swrite>:
34191ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34191aba:	461f      	mov	r7, r3
34191abc:	898b      	ldrh	r3, [r1, #12]
34191abe:	4605      	mov	r5, r0
34191ac0:	460c      	mov	r4, r1
34191ac2:	05db      	lsls	r3, r3, #23
34191ac4:	4616      	mov	r6, r2
34191ac6:	d505      	bpl.n	34191ad4 <__swrite+0x1e>
34191ac8:	2302      	movs	r3, #2
34191aca:	2200      	movs	r2, #0
34191acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34191ad0:	f000 f8d0 	bl	34191c74 <_lseek_r>
34191ad4:	89a3      	ldrh	r3, [r4, #12]
34191ad6:	4632      	mov	r2, r6
34191ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34191adc:	4628      	mov	r0, r5
34191ade:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
34191ae2:	81a3      	strh	r3, [r4, #12]
34191ae4:	463b      	mov	r3, r7
34191ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
34191aea:	f000 b8e7 	b.w	34191cbc <_write_r>

34191aee <__sseek>:
34191aee:	b510      	push	{r4, lr}
34191af0:	460c      	mov	r4, r1
34191af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34191af6:	f000 f8bd 	bl	34191c74 <_lseek_r>
34191afa:	1c43      	adds	r3, r0, #1
34191afc:	89a3      	ldrh	r3, [r4, #12]
34191afe:	bf15      	itete	ne
34191b00:	6560      	strne	r0, [r4, #84]	@ 0x54
34191b02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
34191b06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
34191b0a:	81a3      	strheq	r3, [r4, #12]
34191b0c:	bf18      	it	ne
34191b0e:	81a3      	strhne	r3, [r4, #12]
34191b10:	bd10      	pop	{r4, pc}

34191b12 <__sclose>:
34191b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34191b16:	f000 b89d 	b.w	34191c54 <_close_r>

34191b1a <__swbuf_r>:
34191b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34191b1c:	460e      	mov	r6, r1
34191b1e:	4614      	mov	r4, r2
34191b20:	4605      	mov	r5, r0
34191b22:	b118      	cbz	r0, 34191b2c <__swbuf_r+0x12>
34191b24:	6a03      	ldr	r3, [r0, #32]
34191b26:	b90b      	cbnz	r3, 34191b2c <__swbuf_r+0x12>
34191b28:	f7ff ff0e 	bl	34191948 <__sinit>
34191b2c:	69a3      	ldr	r3, [r4, #24]
34191b2e:	60a3      	str	r3, [r4, #8]
34191b30:	89a3      	ldrh	r3, [r4, #12]
34191b32:	071a      	lsls	r2, r3, #28
34191b34:	d501      	bpl.n	34191b3a <__swbuf_r+0x20>
34191b36:	6923      	ldr	r3, [r4, #16]
34191b38:	b943      	cbnz	r3, 34191b4c <__swbuf_r+0x32>
34191b3a:	4621      	mov	r1, r4
34191b3c:	4628      	mov	r0, r5
34191b3e:	f000 f82b 	bl	34191b98 <__swsetup_r>
34191b42:	b118      	cbz	r0, 34191b4c <__swbuf_r+0x32>
34191b44:	f04f 37ff 	mov.w	r7, #4294967295
34191b48:	4638      	mov	r0, r7
34191b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34191b4c:	6823      	ldr	r3, [r4, #0]
34191b4e:	b2f6      	uxtb	r6, r6
34191b50:	6922      	ldr	r2, [r4, #16]
34191b52:	4637      	mov	r7, r6
34191b54:	1a98      	subs	r0, r3, r2
34191b56:	6963      	ldr	r3, [r4, #20]
34191b58:	4283      	cmp	r3, r0
34191b5a:	dc05      	bgt.n	34191b68 <__swbuf_r+0x4e>
34191b5c:	4621      	mov	r1, r4
34191b5e:	4628      	mov	r0, r5
34191b60:	f000 fd46 	bl	341925f0 <_fflush_r>
34191b64:	2800      	cmp	r0, #0
34191b66:	d1ed      	bne.n	34191b44 <__swbuf_r+0x2a>
34191b68:	68a3      	ldr	r3, [r4, #8]
34191b6a:	3b01      	subs	r3, #1
34191b6c:	60a3      	str	r3, [r4, #8]
34191b6e:	6823      	ldr	r3, [r4, #0]
34191b70:	1c5a      	adds	r2, r3, #1
34191b72:	6022      	str	r2, [r4, #0]
34191b74:	701e      	strb	r6, [r3, #0]
34191b76:	1c43      	adds	r3, r0, #1
34191b78:	6962      	ldr	r2, [r4, #20]
34191b7a:	429a      	cmp	r2, r3
34191b7c:	d004      	beq.n	34191b88 <__swbuf_r+0x6e>
34191b7e:	89a3      	ldrh	r3, [r4, #12]
34191b80:	07db      	lsls	r3, r3, #31
34191b82:	d5e1      	bpl.n	34191b48 <__swbuf_r+0x2e>
34191b84:	2e0a      	cmp	r6, #10
34191b86:	d1df      	bne.n	34191b48 <__swbuf_r+0x2e>
34191b88:	4621      	mov	r1, r4
34191b8a:	4628      	mov	r0, r5
34191b8c:	f000 fd30 	bl	341925f0 <_fflush_r>
34191b90:	2800      	cmp	r0, #0
34191b92:	d0d9      	beq.n	34191b48 <__swbuf_r+0x2e>
34191b94:	e7d6      	b.n	34191b44 <__swbuf_r+0x2a>
	...

34191b98 <__swsetup_r>:
34191b98:	b538      	push	{r3, r4, r5, lr}
34191b9a:	4b29      	ldr	r3, [pc, #164]	@ (34191c40 <__swsetup_r+0xa8>)
34191b9c:	4605      	mov	r5, r0
34191b9e:	460c      	mov	r4, r1
34191ba0:	6818      	ldr	r0, [r3, #0]
34191ba2:	b118      	cbz	r0, 34191bac <__swsetup_r+0x14>
34191ba4:	6a03      	ldr	r3, [r0, #32]
34191ba6:	b90b      	cbnz	r3, 34191bac <__swsetup_r+0x14>
34191ba8:	f7ff fece 	bl	34191948 <__sinit>
34191bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34191bb0:	0719      	lsls	r1, r3, #28
34191bb2:	d422      	bmi.n	34191bfa <__swsetup_r+0x62>
34191bb4:	06da      	lsls	r2, r3, #27
34191bb6:	d407      	bmi.n	34191bc8 <__swsetup_r+0x30>
34191bb8:	2209      	movs	r2, #9
34191bba:	602a      	str	r2, [r5, #0]
34191bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34191bc0:	f04f 30ff 	mov.w	r0, #4294967295
34191bc4:	81a3      	strh	r3, [r4, #12]
34191bc6:	e033      	b.n	34191c30 <__swsetup_r+0x98>
34191bc8:	0758      	lsls	r0, r3, #29
34191bca:	d512      	bpl.n	34191bf2 <__swsetup_r+0x5a>
34191bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
34191bce:	b141      	cbz	r1, 34191be2 <__swsetup_r+0x4a>
34191bd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
34191bd4:	4299      	cmp	r1, r3
34191bd6:	d002      	beq.n	34191bde <__swsetup_r+0x46>
34191bd8:	4628      	mov	r0, r5
34191bda:	f000 f8bb 	bl	34191d54 <_free_r>
34191bde:	2300      	movs	r3, #0
34191be0:	6363      	str	r3, [r4, #52]	@ 0x34
34191be2:	89a3      	ldrh	r3, [r4, #12]
34191be4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
34191be8:	81a3      	strh	r3, [r4, #12]
34191bea:	2300      	movs	r3, #0
34191bec:	6063      	str	r3, [r4, #4]
34191bee:	6923      	ldr	r3, [r4, #16]
34191bf0:	6023      	str	r3, [r4, #0]
34191bf2:	89a3      	ldrh	r3, [r4, #12]
34191bf4:	f043 0308 	orr.w	r3, r3, #8
34191bf8:	81a3      	strh	r3, [r4, #12]
34191bfa:	6923      	ldr	r3, [r4, #16]
34191bfc:	b94b      	cbnz	r3, 34191c12 <__swsetup_r+0x7a>
34191bfe:	89a3      	ldrh	r3, [r4, #12]
34191c00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
34191c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34191c08:	d003      	beq.n	34191c12 <__swsetup_r+0x7a>
34191c0a:	4621      	mov	r1, r4
34191c0c:	4628      	mov	r0, r5
34191c0e:	f000 fd3c 	bl	3419268a <__smakebuf_r>
34191c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34191c16:	f013 0201 	ands.w	r2, r3, #1
34191c1a:	d00a      	beq.n	34191c32 <__swsetup_r+0x9a>
34191c1c:	2200      	movs	r2, #0
34191c1e:	60a2      	str	r2, [r4, #8]
34191c20:	6962      	ldr	r2, [r4, #20]
34191c22:	4252      	negs	r2, r2
34191c24:	61a2      	str	r2, [r4, #24]
34191c26:	6922      	ldr	r2, [r4, #16]
34191c28:	b942      	cbnz	r2, 34191c3c <__swsetup_r+0xa4>
34191c2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
34191c2e:	d1c5      	bne.n	34191bbc <__swsetup_r+0x24>
34191c30:	bd38      	pop	{r3, r4, r5, pc}
34191c32:	0799      	lsls	r1, r3, #30
34191c34:	bf58      	it	pl
34191c36:	6962      	ldrpl	r2, [r4, #20]
34191c38:	60a2      	str	r2, [r4, #8]
34191c3a:	e7f4      	b.n	34191c26 <__swsetup_r+0x8e>
34191c3c:	2000      	movs	r0, #0
34191c3e:	e7f7      	b.n	34191c30 <__swsetup_r+0x98>
34191c40:	341c00c4 	.word	0x341c00c4

34191c44 <memset>:
34191c44:	4402      	add	r2, r0
34191c46:	4603      	mov	r3, r0
34191c48:	4293      	cmp	r3, r2
34191c4a:	d100      	bne.n	34191c4e <memset+0xa>
34191c4c:	4770      	bx	lr
34191c4e:	f803 1b01 	strb.w	r1, [r3], #1
34191c52:	e7f9      	b.n	34191c48 <memset+0x4>

34191c54 <_close_r>:
34191c54:	b538      	push	{r3, r4, r5, lr}
34191c56:	2300      	movs	r3, #0
34191c58:	4d05      	ldr	r5, [pc, #20]	@ (34191c70 <_close_r+0x1c>)
34191c5a:	4604      	mov	r4, r0
34191c5c:	4608      	mov	r0, r1
34191c5e:	602b      	str	r3, [r5, #0]
34191c60:	f7ef fc9d 	bl	3418159e <_close>
34191c64:	1c43      	adds	r3, r0, #1
34191c66:	d102      	bne.n	34191c6e <_close_r+0x1a>
34191c68:	682b      	ldr	r3, [r5, #0]
34191c6a:	b103      	cbz	r3, 34191c6e <_close_r+0x1a>
34191c6c:	6023      	str	r3, [r4, #0]
34191c6e:	bd38      	pop	{r3, r4, r5, pc}
34191c70:	341c05b0 	.word	0x341c05b0

34191c74 <_lseek_r>:
34191c74:	b538      	push	{r3, r4, r5, lr}
34191c76:	4604      	mov	r4, r0
34191c78:	4d06      	ldr	r5, [pc, #24]	@ (34191c94 <_lseek_r+0x20>)
34191c7a:	4608      	mov	r0, r1
34191c7c:	4611      	mov	r1, r2
34191c7e:	2200      	movs	r2, #0
34191c80:	602a      	str	r2, [r5, #0]
34191c82:	461a      	mov	r2, r3
34191c84:	f7ef fcb2 	bl	341815ec <_lseek>
34191c88:	1c43      	adds	r3, r0, #1
34191c8a:	d102      	bne.n	34191c92 <_lseek_r+0x1e>
34191c8c:	682b      	ldr	r3, [r5, #0]
34191c8e:	b103      	cbz	r3, 34191c92 <_lseek_r+0x1e>
34191c90:	6023      	str	r3, [r4, #0]
34191c92:	bd38      	pop	{r3, r4, r5, pc}
34191c94:	341c05b0 	.word	0x341c05b0

34191c98 <_read_r>:
34191c98:	b538      	push	{r3, r4, r5, lr}
34191c9a:	4604      	mov	r4, r0
34191c9c:	4d06      	ldr	r5, [pc, #24]	@ (34191cb8 <_read_r+0x20>)
34191c9e:	4608      	mov	r0, r1
34191ca0:	4611      	mov	r1, r2
34191ca2:	2200      	movs	r2, #0
34191ca4:	602a      	str	r2, [r5, #0]
34191ca6:	461a      	mov	r2, r3
34191ca8:	f7ef fc40 	bl	3418152c <_read>
34191cac:	1c43      	adds	r3, r0, #1
34191cae:	d102      	bne.n	34191cb6 <_read_r+0x1e>
34191cb0:	682b      	ldr	r3, [r5, #0]
34191cb2:	b103      	cbz	r3, 34191cb6 <_read_r+0x1e>
34191cb4:	6023      	str	r3, [r4, #0]
34191cb6:	bd38      	pop	{r3, r4, r5, pc}
34191cb8:	341c05b0 	.word	0x341c05b0

34191cbc <_write_r>:
34191cbc:	b538      	push	{r3, r4, r5, lr}
34191cbe:	4604      	mov	r4, r0
34191cc0:	4d06      	ldr	r5, [pc, #24]	@ (34191cdc <_write_r+0x20>)
34191cc2:	4608      	mov	r0, r1
34191cc4:	4611      	mov	r1, r2
34191cc6:	2200      	movs	r2, #0
34191cc8:	602a      	str	r2, [r5, #0]
34191cca:	461a      	mov	r2, r3
34191ccc:	f7ef fc4b 	bl	34181566 <_write>
34191cd0:	1c43      	adds	r3, r0, #1
34191cd2:	d102      	bne.n	34191cda <_write_r+0x1e>
34191cd4:	682b      	ldr	r3, [r5, #0]
34191cd6:	b103      	cbz	r3, 34191cda <_write_r+0x1e>
34191cd8:	6023      	str	r3, [r4, #0]
34191cda:	bd38      	pop	{r3, r4, r5, pc}
34191cdc:	341c05b0 	.word	0x341c05b0

34191ce0 <__errno>:
34191ce0:	4b01      	ldr	r3, [pc, #4]	@ (34191ce8 <__errno+0x8>)
34191ce2:	6818      	ldr	r0, [r3, #0]
34191ce4:	4770      	bx	lr
34191ce6:	bf00      	nop
34191ce8:	341c00c4 	.word	0x341c00c4

34191cec <__libc_init_array>:
34191cec:	b570      	push	{r4, r5, r6, lr}
34191cee:	4d0d      	ldr	r5, [pc, #52]	@ (34191d24 <__libc_init_array+0x38>)
34191cf0:	2600      	movs	r6, #0
34191cf2:	4c0d      	ldr	r4, [pc, #52]	@ (34191d28 <__libc_init_array+0x3c>)
34191cf4:	1b64      	subs	r4, r4, r5
34191cf6:	10a4      	asrs	r4, r4, #2
34191cf8:	42a6      	cmp	r6, r4
34191cfa:	d109      	bne.n	34191d10 <__libc_init_array+0x24>
34191cfc:	4d0b      	ldr	r5, [pc, #44]	@ (34191d2c <__libc_init_array+0x40>)
34191cfe:	2600      	movs	r6, #0
34191d00:	4c0b      	ldr	r4, [pc, #44]	@ (34191d30 <__libc_init_array+0x44>)
34191d02:	f000 fd3f 	bl	34192784 <_init>
34191d06:	1b64      	subs	r4, r4, r5
34191d08:	10a4      	asrs	r4, r4, #2
34191d0a:	42a6      	cmp	r6, r4
34191d0c:	d105      	bne.n	34191d1a <__libc_init_array+0x2e>
34191d0e:	bd70      	pop	{r4, r5, r6, pc}
34191d10:	f855 3b04 	ldr.w	r3, [r5], #4
34191d14:	3601      	adds	r6, #1
34191d16:	4798      	blx	r3
34191d18:	e7ee      	b.n	34191cf8 <__libc_init_array+0xc>
34191d1a:	f855 3b04 	ldr.w	r3, [r5], #4
34191d1e:	3601      	adds	r6, #1
34191d20:	4798      	blx	r3
34191d22:	e7f2      	b.n	34191d0a <__libc_init_array+0x1e>
34191d24:	341928dc 	.word	0x341928dc
34191d28:	341928dc 	.word	0x341928dc
34191d2c:	341928dc 	.word	0x341928dc
34191d30:	341928e0 	.word	0x341928e0

34191d34 <__retarget_lock_init_recursive>:
34191d34:	4770      	bx	lr

34191d36 <__retarget_lock_acquire_recursive>:
34191d36:	4770      	bx	lr

34191d38 <__retarget_lock_release_recursive>:
34191d38:	4770      	bx	lr

34191d3a <memcpy>:
34191d3a:	440a      	add	r2, r1
34191d3c:	1e43      	subs	r3, r0, #1
34191d3e:	4291      	cmp	r1, r2
34191d40:	d100      	bne.n	34191d44 <memcpy+0xa>
34191d42:	4770      	bx	lr
34191d44:	b510      	push	{r4, lr}
34191d46:	f811 4b01 	ldrb.w	r4, [r1], #1
34191d4a:	4291      	cmp	r1, r2
34191d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
34191d50:	d1f9      	bne.n	34191d46 <memcpy+0xc>
34191d52:	bd10      	pop	{r4, pc}

34191d54 <_free_r>:
34191d54:	b538      	push	{r3, r4, r5, lr}
34191d56:	4605      	mov	r5, r0
34191d58:	2900      	cmp	r1, #0
34191d5a:	d041      	beq.n	34191de0 <_free_r+0x8c>
34191d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
34191d60:	1f0c      	subs	r4, r1, #4
34191d62:	2b00      	cmp	r3, #0
34191d64:	bfb8      	it	lt
34191d66:	18e4      	addlt	r4, r4, r3
34191d68:	f000 f8e0 	bl	34191f2c <__malloc_lock>
34191d6c:	4a1d      	ldr	r2, [pc, #116]	@ (34191de4 <_free_r+0x90>)
34191d6e:	6813      	ldr	r3, [r2, #0]
34191d70:	b933      	cbnz	r3, 34191d80 <_free_r+0x2c>
34191d72:	6063      	str	r3, [r4, #4]
34191d74:	6014      	str	r4, [r2, #0]
34191d76:	4628      	mov	r0, r5
34191d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
34191d7c:	f000 b8dc 	b.w	34191f38 <__malloc_unlock>
34191d80:	42a3      	cmp	r3, r4
34191d82:	d908      	bls.n	34191d96 <_free_r+0x42>
34191d84:	6820      	ldr	r0, [r4, #0]
34191d86:	1821      	adds	r1, r4, r0
34191d88:	428b      	cmp	r3, r1
34191d8a:	bf01      	itttt	eq
34191d8c:	6819      	ldreq	r1, [r3, #0]
34191d8e:	685b      	ldreq	r3, [r3, #4]
34191d90:	1809      	addeq	r1, r1, r0
34191d92:	6021      	streq	r1, [r4, #0]
34191d94:	e7ed      	b.n	34191d72 <_free_r+0x1e>
34191d96:	461a      	mov	r2, r3
34191d98:	685b      	ldr	r3, [r3, #4]
34191d9a:	b10b      	cbz	r3, 34191da0 <_free_r+0x4c>
34191d9c:	42a3      	cmp	r3, r4
34191d9e:	d9fa      	bls.n	34191d96 <_free_r+0x42>
34191da0:	6811      	ldr	r1, [r2, #0]
34191da2:	1850      	adds	r0, r2, r1
34191da4:	42a0      	cmp	r0, r4
34191da6:	d10b      	bne.n	34191dc0 <_free_r+0x6c>
34191da8:	6820      	ldr	r0, [r4, #0]
34191daa:	4401      	add	r1, r0
34191dac:	1850      	adds	r0, r2, r1
34191dae:	6011      	str	r1, [r2, #0]
34191db0:	4283      	cmp	r3, r0
34191db2:	d1e0      	bne.n	34191d76 <_free_r+0x22>
34191db4:	6818      	ldr	r0, [r3, #0]
34191db6:	685b      	ldr	r3, [r3, #4]
34191db8:	4408      	add	r0, r1
34191dba:	6053      	str	r3, [r2, #4]
34191dbc:	6010      	str	r0, [r2, #0]
34191dbe:	e7da      	b.n	34191d76 <_free_r+0x22>
34191dc0:	d902      	bls.n	34191dc8 <_free_r+0x74>
34191dc2:	230c      	movs	r3, #12
34191dc4:	602b      	str	r3, [r5, #0]
34191dc6:	e7d6      	b.n	34191d76 <_free_r+0x22>
34191dc8:	6820      	ldr	r0, [r4, #0]
34191dca:	1821      	adds	r1, r4, r0
34191dcc:	428b      	cmp	r3, r1
34191dce:	bf02      	ittt	eq
34191dd0:	6819      	ldreq	r1, [r3, #0]
34191dd2:	685b      	ldreq	r3, [r3, #4]
34191dd4:	1809      	addeq	r1, r1, r0
34191dd6:	6063      	str	r3, [r4, #4]
34191dd8:	bf08      	it	eq
34191dda:	6021      	streq	r1, [r4, #0]
34191ddc:	6054      	str	r4, [r2, #4]
34191dde:	e7ca      	b.n	34191d76 <_free_r+0x22>
34191de0:	bd38      	pop	{r3, r4, r5, pc}
34191de2:	bf00      	nop
34191de4:	341c05bc 	.word	0x341c05bc

34191de8 <sbrk_aligned>:
34191de8:	b570      	push	{r4, r5, r6, lr}
34191dea:	4e0f      	ldr	r6, [pc, #60]	@ (34191e28 <sbrk_aligned+0x40>)
34191dec:	460c      	mov	r4, r1
34191dee:	4605      	mov	r5, r0
34191df0:	6831      	ldr	r1, [r6, #0]
34191df2:	b911      	cbnz	r1, 34191dfa <sbrk_aligned+0x12>
34191df4:	f000 fca8 	bl	34192748 <_sbrk_r>
34191df8:	6030      	str	r0, [r6, #0]
34191dfa:	4621      	mov	r1, r4
34191dfc:	4628      	mov	r0, r5
34191dfe:	f000 fca3 	bl	34192748 <_sbrk_r>
34191e02:	1c43      	adds	r3, r0, #1
34191e04:	d103      	bne.n	34191e0e <sbrk_aligned+0x26>
34191e06:	f04f 34ff 	mov.w	r4, #4294967295
34191e0a:	4620      	mov	r0, r4
34191e0c:	bd70      	pop	{r4, r5, r6, pc}
34191e0e:	1cc4      	adds	r4, r0, #3
34191e10:	f024 0403 	bic.w	r4, r4, #3
34191e14:	42a0      	cmp	r0, r4
34191e16:	d0f8      	beq.n	34191e0a <sbrk_aligned+0x22>
34191e18:	1a21      	subs	r1, r4, r0
34191e1a:	4628      	mov	r0, r5
34191e1c:	f000 fc94 	bl	34192748 <_sbrk_r>
34191e20:	3001      	adds	r0, #1
34191e22:	d1f2      	bne.n	34191e0a <sbrk_aligned+0x22>
34191e24:	e7ef      	b.n	34191e06 <sbrk_aligned+0x1e>
34191e26:	bf00      	nop
34191e28:	341c05b8 	.word	0x341c05b8

34191e2c <_malloc_r>:
34191e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34191e30:	1ccd      	adds	r5, r1, #3
34191e32:	4606      	mov	r6, r0
34191e34:	f025 0503 	bic.w	r5, r5, #3
34191e38:	3508      	adds	r5, #8
34191e3a:	2d0c      	cmp	r5, #12
34191e3c:	bf38      	it	cc
34191e3e:	250c      	movcc	r5, #12
34191e40:	2d00      	cmp	r5, #0
34191e42:	db01      	blt.n	34191e48 <_malloc_r+0x1c>
34191e44:	42a9      	cmp	r1, r5
34191e46:	d904      	bls.n	34191e52 <_malloc_r+0x26>
34191e48:	230c      	movs	r3, #12
34191e4a:	6033      	str	r3, [r6, #0]
34191e4c:	2000      	movs	r0, #0
34191e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34191e52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 34191f28 <_malloc_r+0xfc>
34191e56:	f000 f869 	bl	34191f2c <__malloc_lock>
34191e5a:	f8d8 3000 	ldr.w	r3, [r8]
34191e5e:	461c      	mov	r4, r3
34191e60:	bb44      	cbnz	r4, 34191eb4 <_malloc_r+0x88>
34191e62:	4629      	mov	r1, r5
34191e64:	4630      	mov	r0, r6
34191e66:	f7ff ffbf 	bl	34191de8 <sbrk_aligned>
34191e6a:	1c43      	adds	r3, r0, #1
34191e6c:	4604      	mov	r4, r0
34191e6e:	d158      	bne.n	34191f22 <_malloc_r+0xf6>
34191e70:	f8d8 4000 	ldr.w	r4, [r8]
34191e74:	4627      	mov	r7, r4
34191e76:	2f00      	cmp	r7, #0
34191e78:	d143      	bne.n	34191f02 <_malloc_r+0xd6>
34191e7a:	2c00      	cmp	r4, #0
34191e7c:	d04b      	beq.n	34191f16 <_malloc_r+0xea>
34191e7e:	6823      	ldr	r3, [r4, #0]
34191e80:	4639      	mov	r1, r7
34191e82:	4630      	mov	r0, r6
34191e84:	eb04 0903 	add.w	r9, r4, r3
34191e88:	f000 fc5e 	bl	34192748 <_sbrk_r>
34191e8c:	4581      	cmp	r9, r0
34191e8e:	d142      	bne.n	34191f16 <_malloc_r+0xea>
34191e90:	6821      	ldr	r1, [r4, #0]
34191e92:	4630      	mov	r0, r6
34191e94:	1a6d      	subs	r5, r5, r1
34191e96:	4629      	mov	r1, r5
34191e98:	f7ff ffa6 	bl	34191de8 <sbrk_aligned>
34191e9c:	3001      	adds	r0, #1
34191e9e:	d03a      	beq.n	34191f16 <_malloc_r+0xea>
34191ea0:	6823      	ldr	r3, [r4, #0]
34191ea2:	442b      	add	r3, r5
34191ea4:	6023      	str	r3, [r4, #0]
34191ea6:	f8d8 3000 	ldr.w	r3, [r8]
34191eaa:	685a      	ldr	r2, [r3, #4]
34191eac:	bb62      	cbnz	r2, 34191f08 <_malloc_r+0xdc>
34191eae:	f8c8 7000 	str.w	r7, [r8]
34191eb2:	e00f      	b.n	34191ed4 <_malloc_r+0xa8>
34191eb4:	6822      	ldr	r2, [r4, #0]
34191eb6:	1b52      	subs	r2, r2, r5
34191eb8:	d420      	bmi.n	34191efc <_malloc_r+0xd0>
34191eba:	2a0b      	cmp	r2, #11
34191ebc:	d917      	bls.n	34191eee <_malloc_r+0xc2>
34191ebe:	1961      	adds	r1, r4, r5
34191ec0:	42a3      	cmp	r3, r4
34191ec2:	6025      	str	r5, [r4, #0]
34191ec4:	bf18      	it	ne
34191ec6:	6059      	strne	r1, [r3, #4]
34191ec8:	6863      	ldr	r3, [r4, #4]
34191eca:	bf08      	it	eq
34191ecc:	f8c8 1000 	streq.w	r1, [r8]
34191ed0:	5162      	str	r2, [r4, r5]
34191ed2:	604b      	str	r3, [r1, #4]
34191ed4:	4630      	mov	r0, r6
34191ed6:	f000 f82f 	bl	34191f38 <__malloc_unlock>
34191eda:	f104 000b 	add.w	r0, r4, #11
34191ede:	1d23      	adds	r3, r4, #4
34191ee0:	f020 0007 	bic.w	r0, r0, #7
34191ee4:	1ac2      	subs	r2, r0, r3
34191ee6:	bf1c      	itt	ne
34191ee8:	1a1b      	subne	r3, r3, r0
34191eea:	50a3      	strne	r3, [r4, r2]
34191eec:	e7af      	b.n	34191e4e <_malloc_r+0x22>
34191eee:	6862      	ldr	r2, [r4, #4]
34191ef0:	42a3      	cmp	r3, r4
34191ef2:	bf0c      	ite	eq
34191ef4:	f8c8 2000 	streq.w	r2, [r8]
34191ef8:	605a      	strne	r2, [r3, #4]
34191efa:	e7eb      	b.n	34191ed4 <_malloc_r+0xa8>
34191efc:	4623      	mov	r3, r4
34191efe:	6864      	ldr	r4, [r4, #4]
34191f00:	e7ae      	b.n	34191e60 <_malloc_r+0x34>
34191f02:	463c      	mov	r4, r7
34191f04:	687f      	ldr	r7, [r7, #4]
34191f06:	e7b6      	b.n	34191e76 <_malloc_r+0x4a>
34191f08:	461a      	mov	r2, r3
34191f0a:	685b      	ldr	r3, [r3, #4]
34191f0c:	42a3      	cmp	r3, r4
34191f0e:	d1fb      	bne.n	34191f08 <_malloc_r+0xdc>
34191f10:	2300      	movs	r3, #0
34191f12:	6053      	str	r3, [r2, #4]
34191f14:	e7de      	b.n	34191ed4 <_malloc_r+0xa8>
34191f16:	230c      	movs	r3, #12
34191f18:	4630      	mov	r0, r6
34191f1a:	6033      	str	r3, [r6, #0]
34191f1c:	f000 f80c 	bl	34191f38 <__malloc_unlock>
34191f20:	e794      	b.n	34191e4c <_malloc_r+0x20>
34191f22:	6005      	str	r5, [r0, #0]
34191f24:	e7d6      	b.n	34191ed4 <_malloc_r+0xa8>
34191f26:	bf00      	nop
34191f28:	341c05bc 	.word	0x341c05bc

34191f2c <__malloc_lock>:
34191f2c:	4801      	ldr	r0, [pc, #4]	@ (34191f34 <__malloc_lock+0x8>)
34191f2e:	f7ff bf02 	b.w	34191d36 <__retarget_lock_acquire_recursive>
34191f32:	bf00      	nop
34191f34:	341c05b4 	.word	0x341c05b4

34191f38 <__malloc_unlock>:
34191f38:	4801      	ldr	r0, [pc, #4]	@ (34191f40 <__malloc_unlock+0x8>)
34191f3a:	f7ff befd 	b.w	34191d38 <__retarget_lock_release_recursive>
34191f3e:	bf00      	nop
34191f40:	341c05b4 	.word	0x341c05b4

34191f44 <__sfputc_r>:
34191f44:	6893      	ldr	r3, [r2, #8]
34191f46:	3b01      	subs	r3, #1
34191f48:	2b00      	cmp	r3, #0
34191f4a:	b410      	push	{r4}
34191f4c:	6093      	str	r3, [r2, #8]
34191f4e:	da08      	bge.n	34191f62 <__sfputc_r+0x1e>
34191f50:	6994      	ldr	r4, [r2, #24]
34191f52:	42a3      	cmp	r3, r4
34191f54:	db01      	blt.n	34191f5a <__sfputc_r+0x16>
34191f56:	290a      	cmp	r1, #10
34191f58:	d103      	bne.n	34191f62 <__sfputc_r+0x1e>
34191f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
34191f5e:	f7ff bddc 	b.w	34191b1a <__swbuf_r>
34191f62:	6813      	ldr	r3, [r2, #0]
34191f64:	1c58      	adds	r0, r3, #1
34191f66:	6010      	str	r0, [r2, #0]
34191f68:	4608      	mov	r0, r1
34191f6a:	7019      	strb	r1, [r3, #0]
34191f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
34191f70:	4770      	bx	lr

34191f72 <__sfputs_r>:
34191f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34191f74:	4606      	mov	r6, r0
34191f76:	460f      	mov	r7, r1
34191f78:	4614      	mov	r4, r2
34191f7a:	18d5      	adds	r5, r2, r3
34191f7c:	42ac      	cmp	r4, r5
34191f7e:	d101      	bne.n	34191f84 <__sfputs_r+0x12>
34191f80:	2000      	movs	r0, #0
34191f82:	e007      	b.n	34191f94 <__sfputs_r+0x22>
34191f84:	463a      	mov	r2, r7
34191f86:	f814 1b01 	ldrb.w	r1, [r4], #1
34191f8a:	4630      	mov	r0, r6
34191f8c:	f7ff ffda 	bl	34191f44 <__sfputc_r>
34191f90:	1c43      	adds	r3, r0, #1
34191f92:	d1f3      	bne.n	34191f7c <__sfputs_r+0xa>
34191f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

34191f98 <_vfiprintf_r>:
34191f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34191f9c:	460d      	mov	r5, r1
34191f9e:	b09d      	sub	sp, #116	@ 0x74
34191fa0:	4614      	mov	r4, r2
34191fa2:	4698      	mov	r8, r3
34191fa4:	4606      	mov	r6, r0
34191fa6:	b118      	cbz	r0, 34191fb0 <_vfiprintf_r+0x18>
34191fa8:	6a03      	ldr	r3, [r0, #32]
34191faa:	b90b      	cbnz	r3, 34191fb0 <_vfiprintf_r+0x18>
34191fac:	f7ff fccc 	bl	34191948 <__sinit>
34191fb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34191fb2:	07d9      	lsls	r1, r3, #31
34191fb4:	d405      	bmi.n	34191fc2 <_vfiprintf_r+0x2a>
34191fb6:	89ab      	ldrh	r3, [r5, #12]
34191fb8:	059a      	lsls	r2, r3, #22
34191fba:	d402      	bmi.n	34191fc2 <_vfiprintf_r+0x2a>
34191fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34191fbe:	f7ff feba 	bl	34191d36 <__retarget_lock_acquire_recursive>
34191fc2:	89ab      	ldrh	r3, [r5, #12]
34191fc4:	071b      	lsls	r3, r3, #28
34191fc6:	d501      	bpl.n	34191fcc <_vfiprintf_r+0x34>
34191fc8:	692b      	ldr	r3, [r5, #16]
34191fca:	b99b      	cbnz	r3, 34191ff4 <_vfiprintf_r+0x5c>
34191fcc:	4629      	mov	r1, r5
34191fce:	4630      	mov	r0, r6
34191fd0:	f7ff fde2 	bl	34191b98 <__swsetup_r>
34191fd4:	b170      	cbz	r0, 34191ff4 <_vfiprintf_r+0x5c>
34191fd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34191fd8:	07dc      	lsls	r4, r3, #31
34191fda:	d504      	bpl.n	34191fe6 <_vfiprintf_r+0x4e>
34191fdc:	f04f 30ff 	mov.w	r0, #4294967295
34191fe0:	b01d      	add	sp, #116	@ 0x74
34191fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34191fe6:	89ab      	ldrh	r3, [r5, #12]
34191fe8:	0598      	lsls	r0, r3, #22
34191fea:	d4f7      	bmi.n	34191fdc <_vfiprintf_r+0x44>
34191fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34191fee:	f7ff fea3 	bl	34191d38 <__retarget_lock_release_recursive>
34191ff2:	e7f3      	b.n	34191fdc <_vfiprintf_r+0x44>
34191ff4:	2300      	movs	r3, #0
34191ff6:	f8cd 800c 	str.w	r8, [sp, #12]
34191ffa:	f04f 0901 	mov.w	r9, #1
34191ffe:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 341921b4 <_vfiprintf_r+0x21c>
34192002:	9309      	str	r3, [sp, #36]	@ 0x24
34192004:	2320      	movs	r3, #32
34192006:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3419200a:	2330      	movs	r3, #48	@ 0x30
3419200c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
34192010:	4623      	mov	r3, r4
34192012:	469a      	mov	sl, r3
34192014:	f813 2b01 	ldrb.w	r2, [r3], #1
34192018:	b10a      	cbz	r2, 3419201e <_vfiprintf_r+0x86>
3419201a:	2a25      	cmp	r2, #37	@ 0x25
3419201c:	d1f9      	bne.n	34192012 <_vfiprintf_r+0x7a>
3419201e:	ebba 0b04 	subs.w	fp, sl, r4
34192022:	d00b      	beq.n	3419203c <_vfiprintf_r+0xa4>
34192024:	465b      	mov	r3, fp
34192026:	4622      	mov	r2, r4
34192028:	4629      	mov	r1, r5
3419202a:	4630      	mov	r0, r6
3419202c:	f7ff ffa1 	bl	34191f72 <__sfputs_r>
34192030:	3001      	adds	r0, #1
34192032:	f000 80a7 	beq.w	34192184 <_vfiprintf_r+0x1ec>
34192036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34192038:	445a      	add	r2, fp
3419203a:	9209      	str	r2, [sp, #36]	@ 0x24
3419203c:	f89a 3000 	ldrb.w	r3, [sl]
34192040:	2b00      	cmp	r3, #0
34192042:	f000 809f 	beq.w	34192184 <_vfiprintf_r+0x1ec>
34192046:	2300      	movs	r3, #0
34192048:	f04f 32ff 	mov.w	r2, #4294967295
3419204c:	f10a 0a01 	add.w	sl, sl, #1
34192050:	9304      	str	r3, [sp, #16]
34192052:	9307      	str	r3, [sp, #28]
34192054:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
34192058:	931a      	str	r3, [sp, #104]	@ 0x68
3419205a:	e9cd 2305 	strd	r2, r3, [sp, #20]
3419205e:	4654      	mov	r4, sl
34192060:	2205      	movs	r2, #5
34192062:	4854      	ldr	r0, [pc, #336]	@ (341921b4 <_vfiprintf_r+0x21c>)
34192064:	f814 1b01 	ldrb.w	r1, [r4], #1
34192068:	f000 fb7e 	bl	34192768 <memchr>
3419206c:	9a04      	ldr	r2, [sp, #16]
3419206e:	b9d8      	cbnz	r0, 341920a8 <_vfiprintf_r+0x110>
34192070:	06d1      	lsls	r1, r2, #27
34192072:	bf44      	itt	mi
34192074:	2320      	movmi	r3, #32
34192076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3419207a:	0713      	lsls	r3, r2, #28
3419207c:	bf44      	itt	mi
3419207e:	232b      	movmi	r3, #43	@ 0x2b
34192080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34192084:	f89a 3000 	ldrb.w	r3, [sl]
34192088:	2b2a      	cmp	r3, #42	@ 0x2a
3419208a:	d015      	beq.n	341920b8 <_vfiprintf_r+0x120>
3419208c:	9a07      	ldr	r2, [sp, #28]
3419208e:	4654      	mov	r4, sl
34192090:	2000      	movs	r0, #0
34192092:	f04f 0c0a 	mov.w	ip, #10
34192096:	4621      	mov	r1, r4
34192098:	f811 3b01 	ldrb.w	r3, [r1], #1
3419209c:	3b30      	subs	r3, #48	@ 0x30
3419209e:	2b09      	cmp	r3, #9
341920a0:	d94b      	bls.n	3419213a <_vfiprintf_r+0x1a2>
341920a2:	b1b0      	cbz	r0, 341920d2 <_vfiprintf_r+0x13a>
341920a4:	9207      	str	r2, [sp, #28]
341920a6:	e014      	b.n	341920d2 <_vfiprintf_r+0x13a>
341920a8:	eba0 0308 	sub.w	r3, r0, r8
341920ac:	46a2      	mov	sl, r4
341920ae:	fa09 f303 	lsl.w	r3, r9, r3
341920b2:	4313      	orrs	r3, r2
341920b4:	9304      	str	r3, [sp, #16]
341920b6:	e7d2      	b.n	3419205e <_vfiprintf_r+0xc6>
341920b8:	9b03      	ldr	r3, [sp, #12]
341920ba:	1d19      	adds	r1, r3, #4
341920bc:	681b      	ldr	r3, [r3, #0]
341920be:	2b00      	cmp	r3, #0
341920c0:	9103      	str	r1, [sp, #12]
341920c2:	bfbb      	ittet	lt
341920c4:	425b      	neglt	r3, r3
341920c6:	f042 0202 	orrlt.w	r2, r2, #2
341920ca:	9307      	strge	r3, [sp, #28]
341920cc:	9307      	strlt	r3, [sp, #28]
341920ce:	bfb8      	it	lt
341920d0:	9204      	strlt	r2, [sp, #16]
341920d2:	7823      	ldrb	r3, [r4, #0]
341920d4:	2b2e      	cmp	r3, #46	@ 0x2e
341920d6:	d10a      	bne.n	341920ee <_vfiprintf_r+0x156>
341920d8:	7863      	ldrb	r3, [r4, #1]
341920da:	2b2a      	cmp	r3, #42	@ 0x2a
341920dc:	d132      	bne.n	34192144 <_vfiprintf_r+0x1ac>
341920de:	9b03      	ldr	r3, [sp, #12]
341920e0:	3402      	adds	r4, #2
341920e2:	1d1a      	adds	r2, r3, #4
341920e4:	681b      	ldr	r3, [r3, #0]
341920e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
341920ea:	9203      	str	r2, [sp, #12]
341920ec:	9305      	str	r3, [sp, #20]
341920ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 341921c4 <_vfiprintf_r+0x22c>
341920f2:	2203      	movs	r2, #3
341920f4:	7821      	ldrb	r1, [r4, #0]
341920f6:	4650      	mov	r0, sl
341920f8:	f000 fb36 	bl	34192768 <memchr>
341920fc:	b138      	cbz	r0, 3419210e <_vfiprintf_r+0x176>
341920fe:	eba0 000a 	sub.w	r0, r0, sl
34192102:	2240      	movs	r2, #64	@ 0x40
34192104:	9b04      	ldr	r3, [sp, #16]
34192106:	3401      	adds	r4, #1
34192108:	4082      	lsls	r2, r0
3419210a:	4313      	orrs	r3, r2
3419210c:	9304      	str	r3, [sp, #16]
3419210e:	f814 1b01 	ldrb.w	r1, [r4], #1
34192112:	2206      	movs	r2, #6
34192114:	4828      	ldr	r0, [pc, #160]	@ (341921b8 <_vfiprintf_r+0x220>)
34192116:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3419211a:	f000 fb25 	bl	34192768 <memchr>
3419211e:	2800      	cmp	r0, #0
34192120:	d03f      	beq.n	341921a2 <_vfiprintf_r+0x20a>
34192122:	4b26      	ldr	r3, [pc, #152]	@ (341921bc <_vfiprintf_r+0x224>)
34192124:	bb1b      	cbnz	r3, 3419216e <_vfiprintf_r+0x1d6>
34192126:	9b03      	ldr	r3, [sp, #12]
34192128:	3307      	adds	r3, #7
3419212a:	f023 0307 	bic.w	r3, r3, #7
3419212e:	3308      	adds	r3, #8
34192130:	9303      	str	r3, [sp, #12]
34192132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34192134:	443b      	add	r3, r7
34192136:	9309      	str	r3, [sp, #36]	@ 0x24
34192138:	e76a      	b.n	34192010 <_vfiprintf_r+0x78>
3419213a:	fb0c 3202 	mla	r2, ip, r2, r3
3419213e:	460c      	mov	r4, r1
34192140:	2001      	movs	r0, #1
34192142:	e7a8      	b.n	34192096 <_vfiprintf_r+0xfe>
34192144:	2300      	movs	r3, #0
34192146:	3401      	adds	r4, #1
34192148:	f04f 0c0a 	mov.w	ip, #10
3419214c:	4619      	mov	r1, r3
3419214e:	9305      	str	r3, [sp, #20]
34192150:	4620      	mov	r0, r4
34192152:	f810 2b01 	ldrb.w	r2, [r0], #1
34192156:	3a30      	subs	r2, #48	@ 0x30
34192158:	2a09      	cmp	r2, #9
3419215a:	d903      	bls.n	34192164 <_vfiprintf_r+0x1cc>
3419215c:	2b00      	cmp	r3, #0
3419215e:	d0c6      	beq.n	341920ee <_vfiprintf_r+0x156>
34192160:	9105      	str	r1, [sp, #20]
34192162:	e7c4      	b.n	341920ee <_vfiprintf_r+0x156>
34192164:	fb0c 2101 	mla	r1, ip, r1, r2
34192168:	4604      	mov	r4, r0
3419216a:	2301      	movs	r3, #1
3419216c:	e7f0      	b.n	34192150 <_vfiprintf_r+0x1b8>
3419216e:	ab03      	add	r3, sp, #12
34192170:	462a      	mov	r2, r5
34192172:	a904      	add	r1, sp, #16
34192174:	4630      	mov	r0, r6
34192176:	9300      	str	r3, [sp, #0]
34192178:	4b11      	ldr	r3, [pc, #68]	@ (341921c0 <_vfiprintf_r+0x228>)
3419217a:	f3af 8000 	nop.w
3419217e:	4607      	mov	r7, r0
34192180:	1c78      	adds	r0, r7, #1
34192182:	d1d6      	bne.n	34192132 <_vfiprintf_r+0x19a>
34192184:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34192186:	07d9      	lsls	r1, r3, #31
34192188:	d405      	bmi.n	34192196 <_vfiprintf_r+0x1fe>
3419218a:	89ab      	ldrh	r3, [r5, #12]
3419218c:	059a      	lsls	r2, r3, #22
3419218e:	d402      	bmi.n	34192196 <_vfiprintf_r+0x1fe>
34192190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34192192:	f7ff fdd1 	bl	34191d38 <__retarget_lock_release_recursive>
34192196:	89ab      	ldrh	r3, [r5, #12]
34192198:	065b      	lsls	r3, r3, #25
3419219a:	f53f af1f 	bmi.w	34191fdc <_vfiprintf_r+0x44>
3419219e:	9809      	ldr	r0, [sp, #36]	@ 0x24
341921a0:	e71e      	b.n	34191fe0 <_vfiprintf_r+0x48>
341921a2:	ab03      	add	r3, sp, #12
341921a4:	462a      	mov	r2, r5
341921a6:	a904      	add	r1, sp, #16
341921a8:	4630      	mov	r0, r6
341921aa:	9300      	str	r3, [sp, #0]
341921ac:	4b04      	ldr	r3, [pc, #16]	@ (341921c0 <_vfiprintf_r+0x228>)
341921ae:	f000 f87d 	bl	341922ac <_printf_i>
341921b2:	e7e4      	b.n	3419217e <_vfiprintf_r+0x1e6>
341921b4:	341928a0 	.word	0x341928a0
341921b8:	341928aa 	.word	0x341928aa
341921bc:	00000000 	.word	0x00000000
341921c0:	34191f73 	.word	0x34191f73
341921c4:	341928a6 	.word	0x341928a6

341921c8 <_printf_common>:
341921c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
341921cc:	4616      	mov	r6, r2
341921ce:	4698      	mov	r8, r3
341921d0:	688a      	ldr	r2, [r1, #8]
341921d2:	4607      	mov	r7, r0
341921d4:	690b      	ldr	r3, [r1, #16]
341921d6:	460c      	mov	r4, r1
341921d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
341921dc:	4293      	cmp	r3, r2
341921de:	bfb8      	it	lt
341921e0:	4613      	movlt	r3, r2
341921e2:	6033      	str	r3, [r6, #0]
341921e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
341921e8:	b10a      	cbz	r2, 341921ee <_printf_common+0x26>
341921ea:	3301      	adds	r3, #1
341921ec:	6033      	str	r3, [r6, #0]
341921ee:	6823      	ldr	r3, [r4, #0]
341921f0:	0699      	lsls	r1, r3, #26
341921f2:	bf42      	ittt	mi
341921f4:	6833      	ldrmi	r3, [r6, #0]
341921f6:	3302      	addmi	r3, #2
341921f8:	6033      	strmi	r3, [r6, #0]
341921fa:	6825      	ldr	r5, [r4, #0]
341921fc:	f015 0506 	ands.w	r5, r5, #6
34192200:	d106      	bne.n	34192210 <_printf_common+0x48>
34192202:	f104 0a19 	add.w	sl, r4, #25
34192206:	68e3      	ldr	r3, [r4, #12]
34192208:	6832      	ldr	r2, [r6, #0]
3419220a:	1a9b      	subs	r3, r3, r2
3419220c:	42ab      	cmp	r3, r5
3419220e:	dc2b      	bgt.n	34192268 <_printf_common+0xa0>
34192210:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
34192214:	6822      	ldr	r2, [r4, #0]
34192216:	3b00      	subs	r3, #0
34192218:	bf18      	it	ne
3419221a:	2301      	movne	r3, #1
3419221c:	0692      	lsls	r2, r2, #26
3419221e:	d430      	bmi.n	34192282 <_printf_common+0xba>
34192220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
34192224:	4641      	mov	r1, r8
34192226:	4638      	mov	r0, r7
34192228:	47c8      	blx	r9
3419222a:	3001      	adds	r0, #1
3419222c:	d023      	beq.n	34192276 <_printf_common+0xae>
3419222e:	6823      	ldr	r3, [r4, #0]
34192230:	341a      	adds	r4, #26
34192232:	f854 2c0a 	ldr.w	r2, [r4, #-10]
34192236:	f003 0306 	and.w	r3, r3, #6
3419223a:	2b04      	cmp	r3, #4
3419223c:	bf0a      	itet	eq
3419223e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
34192242:	2500      	movne	r5, #0
34192244:	6833      	ldreq	r3, [r6, #0]
34192246:	f04f 0600 	mov.w	r6, #0
3419224a:	bf08      	it	eq
3419224c:	1aed      	subeq	r5, r5, r3
3419224e:	f854 3c12 	ldr.w	r3, [r4, #-18]
34192252:	bf08      	it	eq
34192254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
34192258:	4293      	cmp	r3, r2
3419225a:	bfc4      	itt	gt
3419225c:	1a9b      	subgt	r3, r3, r2
3419225e:	18ed      	addgt	r5, r5, r3
34192260:	42b5      	cmp	r5, r6
34192262:	d11a      	bne.n	3419229a <_printf_common+0xd2>
34192264:	2000      	movs	r0, #0
34192266:	e008      	b.n	3419227a <_printf_common+0xb2>
34192268:	2301      	movs	r3, #1
3419226a:	4652      	mov	r2, sl
3419226c:	4641      	mov	r1, r8
3419226e:	4638      	mov	r0, r7
34192270:	47c8      	blx	r9
34192272:	3001      	adds	r0, #1
34192274:	d103      	bne.n	3419227e <_printf_common+0xb6>
34192276:	f04f 30ff 	mov.w	r0, #4294967295
3419227a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3419227e:	3501      	adds	r5, #1
34192280:	e7c1      	b.n	34192206 <_printf_common+0x3e>
34192282:	18e1      	adds	r1, r4, r3
34192284:	1c5a      	adds	r2, r3, #1
34192286:	2030      	movs	r0, #48	@ 0x30
34192288:	3302      	adds	r3, #2
3419228a:	4422      	add	r2, r4
3419228c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
34192290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
34192294:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
34192298:	e7c2      	b.n	34192220 <_printf_common+0x58>
3419229a:	2301      	movs	r3, #1
3419229c:	4622      	mov	r2, r4
3419229e:	4641      	mov	r1, r8
341922a0:	4638      	mov	r0, r7
341922a2:	47c8      	blx	r9
341922a4:	3001      	adds	r0, #1
341922a6:	d0e6      	beq.n	34192276 <_printf_common+0xae>
341922a8:	3601      	adds	r6, #1
341922aa:	e7d9      	b.n	34192260 <_printf_common+0x98>

341922ac <_printf_i>:
341922ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
341922b0:	7e0f      	ldrb	r7, [r1, #24]
341922b2:	4691      	mov	r9, r2
341922b4:	4680      	mov	r8, r0
341922b6:	460c      	mov	r4, r1
341922b8:	2f78      	cmp	r7, #120	@ 0x78
341922ba:	469a      	mov	sl, r3
341922bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
341922be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
341922c2:	d807      	bhi.n	341922d4 <_printf_i+0x28>
341922c4:	2f62      	cmp	r7, #98	@ 0x62
341922c6:	d80a      	bhi.n	341922de <_printf_i+0x32>
341922c8:	2f00      	cmp	r7, #0
341922ca:	f000 80d1 	beq.w	34192470 <_printf_i+0x1c4>
341922ce:	2f58      	cmp	r7, #88	@ 0x58
341922d0:	f000 80b8 	beq.w	34192444 <_printf_i+0x198>
341922d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
341922d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
341922dc:	e03a      	b.n	34192354 <_printf_i+0xa8>
341922de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
341922e2:	2b15      	cmp	r3, #21
341922e4:	d8f6      	bhi.n	341922d4 <_printf_i+0x28>
341922e6:	a101      	add	r1, pc, #4	@ (adr r1, 341922ec <_printf_i+0x40>)
341922e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
341922ec:	34192345 	.word	0x34192345
341922f0:	34192359 	.word	0x34192359
341922f4:	341922d5 	.word	0x341922d5
341922f8:	341922d5 	.word	0x341922d5
341922fc:	341922d5 	.word	0x341922d5
34192300:	341922d5 	.word	0x341922d5
34192304:	34192359 	.word	0x34192359
34192308:	341922d5 	.word	0x341922d5
3419230c:	341922d5 	.word	0x341922d5
34192310:	341922d5 	.word	0x341922d5
34192314:	341922d5 	.word	0x341922d5
34192318:	34192457 	.word	0x34192457
3419231c:	34192383 	.word	0x34192383
34192320:	34192411 	.word	0x34192411
34192324:	341922d5 	.word	0x341922d5
34192328:	341922d5 	.word	0x341922d5
3419232c:	34192479 	.word	0x34192479
34192330:	341922d5 	.word	0x341922d5
34192334:	34192383 	.word	0x34192383
34192338:	341922d5 	.word	0x341922d5
3419233c:	341922d5 	.word	0x341922d5
34192340:	34192419 	.word	0x34192419
34192344:	6833      	ldr	r3, [r6, #0]
34192346:	1d1a      	adds	r2, r3, #4
34192348:	681b      	ldr	r3, [r3, #0]
3419234a:	6032      	str	r2, [r6, #0]
3419234c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
34192350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
34192354:	2301      	movs	r3, #1
34192356:	e09c      	b.n	34192492 <_printf_i+0x1e6>
34192358:	6833      	ldr	r3, [r6, #0]
3419235a:	6820      	ldr	r0, [r4, #0]
3419235c:	1d19      	adds	r1, r3, #4
3419235e:	6031      	str	r1, [r6, #0]
34192360:	0606      	lsls	r6, r0, #24
34192362:	d501      	bpl.n	34192368 <_printf_i+0xbc>
34192364:	681d      	ldr	r5, [r3, #0]
34192366:	e003      	b.n	34192370 <_printf_i+0xc4>
34192368:	0645      	lsls	r5, r0, #25
3419236a:	d5fb      	bpl.n	34192364 <_printf_i+0xb8>
3419236c:	f9b3 5000 	ldrsh.w	r5, [r3]
34192370:	2d00      	cmp	r5, #0
34192372:	da03      	bge.n	3419237c <_printf_i+0xd0>
34192374:	232d      	movs	r3, #45	@ 0x2d
34192376:	426d      	negs	r5, r5
34192378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3419237c:	4858      	ldr	r0, [pc, #352]	@ (341924e0 <_printf_i+0x234>)
3419237e:	230a      	movs	r3, #10
34192380:	e011      	b.n	341923a6 <_printf_i+0xfa>
34192382:	6821      	ldr	r1, [r4, #0]
34192384:	6833      	ldr	r3, [r6, #0]
34192386:	0608      	lsls	r0, r1, #24
34192388:	f853 5b04 	ldr.w	r5, [r3], #4
3419238c:	d402      	bmi.n	34192394 <_printf_i+0xe8>
3419238e:	0649      	lsls	r1, r1, #25
34192390:	bf48      	it	mi
34192392:	b2ad      	uxthmi	r5, r5
34192394:	2f6f      	cmp	r7, #111	@ 0x6f
34192396:	6033      	str	r3, [r6, #0]
34192398:	4851      	ldr	r0, [pc, #324]	@ (341924e0 <_printf_i+0x234>)
3419239a:	bf14      	ite	ne
3419239c:	230a      	movne	r3, #10
3419239e:	2308      	moveq	r3, #8
341923a0:	2100      	movs	r1, #0
341923a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
341923a6:	6866      	ldr	r6, [r4, #4]
341923a8:	2e00      	cmp	r6, #0
341923aa:	60a6      	str	r6, [r4, #8]
341923ac:	db05      	blt.n	341923ba <_printf_i+0x10e>
341923ae:	6821      	ldr	r1, [r4, #0]
341923b0:	432e      	orrs	r6, r5
341923b2:	f021 0104 	bic.w	r1, r1, #4
341923b6:	6021      	str	r1, [r4, #0]
341923b8:	d04b      	beq.n	34192452 <_printf_i+0x1a6>
341923ba:	4616      	mov	r6, r2
341923bc:	fbb5 f1f3 	udiv	r1, r5, r3
341923c0:	fb03 5711 	mls	r7, r3, r1, r5
341923c4:	5dc7      	ldrb	r7, [r0, r7]
341923c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
341923ca:	462f      	mov	r7, r5
341923cc:	460d      	mov	r5, r1
341923ce:	42bb      	cmp	r3, r7
341923d0:	d9f4      	bls.n	341923bc <_printf_i+0x110>
341923d2:	2b08      	cmp	r3, #8
341923d4:	d10b      	bne.n	341923ee <_printf_i+0x142>
341923d6:	6823      	ldr	r3, [r4, #0]
341923d8:	07df      	lsls	r7, r3, #31
341923da:	d508      	bpl.n	341923ee <_printf_i+0x142>
341923dc:	6923      	ldr	r3, [r4, #16]
341923de:	6861      	ldr	r1, [r4, #4]
341923e0:	4299      	cmp	r1, r3
341923e2:	bfde      	ittt	le
341923e4:	2330      	movle	r3, #48	@ 0x30
341923e6:	f806 3c01 	strble.w	r3, [r6, #-1]
341923ea:	f106 36ff 	addle.w	r6, r6, #4294967295
341923ee:	1b92      	subs	r2, r2, r6
341923f0:	6122      	str	r2, [r4, #16]
341923f2:	464b      	mov	r3, r9
341923f4:	aa03      	add	r2, sp, #12
341923f6:	4621      	mov	r1, r4
341923f8:	4640      	mov	r0, r8
341923fa:	f8cd a000 	str.w	sl, [sp]
341923fe:	f7ff fee3 	bl	341921c8 <_printf_common>
34192402:	3001      	adds	r0, #1
34192404:	d14a      	bne.n	3419249c <_printf_i+0x1f0>
34192406:	f04f 30ff 	mov.w	r0, #4294967295
3419240a:	b004      	add	sp, #16
3419240c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34192410:	6823      	ldr	r3, [r4, #0]
34192412:	f043 0320 	orr.w	r3, r3, #32
34192416:	6023      	str	r3, [r4, #0]
34192418:	2778      	movs	r7, #120	@ 0x78
3419241a:	4832      	ldr	r0, [pc, #200]	@ (341924e4 <_printf_i+0x238>)
3419241c:	6823      	ldr	r3, [r4, #0]
3419241e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
34192422:	061f      	lsls	r7, r3, #24
34192424:	6831      	ldr	r1, [r6, #0]
34192426:	f851 5b04 	ldr.w	r5, [r1], #4
3419242a:	d402      	bmi.n	34192432 <_printf_i+0x186>
3419242c:	065f      	lsls	r7, r3, #25
3419242e:	bf48      	it	mi
34192430:	b2ad      	uxthmi	r5, r5
34192432:	6031      	str	r1, [r6, #0]
34192434:	07d9      	lsls	r1, r3, #31
34192436:	bf44      	itt	mi
34192438:	f043 0320 	orrmi.w	r3, r3, #32
3419243c:	6023      	strmi	r3, [r4, #0]
3419243e:	b11d      	cbz	r5, 34192448 <_printf_i+0x19c>
34192440:	2310      	movs	r3, #16
34192442:	e7ad      	b.n	341923a0 <_printf_i+0xf4>
34192444:	4826      	ldr	r0, [pc, #152]	@ (341924e0 <_printf_i+0x234>)
34192446:	e7e9      	b.n	3419241c <_printf_i+0x170>
34192448:	6823      	ldr	r3, [r4, #0]
3419244a:	f023 0320 	bic.w	r3, r3, #32
3419244e:	6023      	str	r3, [r4, #0]
34192450:	e7f6      	b.n	34192440 <_printf_i+0x194>
34192452:	4616      	mov	r6, r2
34192454:	e7bd      	b.n	341923d2 <_printf_i+0x126>
34192456:	6833      	ldr	r3, [r6, #0]
34192458:	6825      	ldr	r5, [r4, #0]
3419245a:	1d18      	adds	r0, r3, #4
3419245c:	6961      	ldr	r1, [r4, #20]
3419245e:	6030      	str	r0, [r6, #0]
34192460:	062e      	lsls	r6, r5, #24
34192462:	681b      	ldr	r3, [r3, #0]
34192464:	d501      	bpl.n	3419246a <_printf_i+0x1be>
34192466:	6019      	str	r1, [r3, #0]
34192468:	e002      	b.n	34192470 <_printf_i+0x1c4>
3419246a:	0668      	lsls	r0, r5, #25
3419246c:	d5fb      	bpl.n	34192466 <_printf_i+0x1ba>
3419246e:	8019      	strh	r1, [r3, #0]
34192470:	2300      	movs	r3, #0
34192472:	4616      	mov	r6, r2
34192474:	6123      	str	r3, [r4, #16]
34192476:	e7bc      	b.n	341923f2 <_printf_i+0x146>
34192478:	6833      	ldr	r3, [r6, #0]
3419247a:	2100      	movs	r1, #0
3419247c:	1d1a      	adds	r2, r3, #4
3419247e:	6032      	str	r2, [r6, #0]
34192480:	681e      	ldr	r6, [r3, #0]
34192482:	6862      	ldr	r2, [r4, #4]
34192484:	4630      	mov	r0, r6
34192486:	f000 f96f 	bl	34192768 <memchr>
3419248a:	b108      	cbz	r0, 34192490 <_printf_i+0x1e4>
3419248c:	1b80      	subs	r0, r0, r6
3419248e:	6060      	str	r0, [r4, #4]
34192490:	6863      	ldr	r3, [r4, #4]
34192492:	6123      	str	r3, [r4, #16]
34192494:	2300      	movs	r3, #0
34192496:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3419249a:	e7aa      	b.n	341923f2 <_printf_i+0x146>
3419249c:	6923      	ldr	r3, [r4, #16]
3419249e:	4632      	mov	r2, r6
341924a0:	4649      	mov	r1, r9
341924a2:	4640      	mov	r0, r8
341924a4:	47d0      	blx	sl
341924a6:	3001      	adds	r0, #1
341924a8:	d0ad      	beq.n	34192406 <_printf_i+0x15a>
341924aa:	6823      	ldr	r3, [r4, #0]
341924ac:	079b      	lsls	r3, r3, #30
341924ae:	d413      	bmi.n	341924d8 <_printf_i+0x22c>
341924b0:	68e0      	ldr	r0, [r4, #12]
341924b2:	9b03      	ldr	r3, [sp, #12]
341924b4:	4298      	cmp	r0, r3
341924b6:	bfb8      	it	lt
341924b8:	4618      	movlt	r0, r3
341924ba:	e7a6      	b.n	3419240a <_printf_i+0x15e>
341924bc:	2301      	movs	r3, #1
341924be:	4632      	mov	r2, r6
341924c0:	4649      	mov	r1, r9
341924c2:	4640      	mov	r0, r8
341924c4:	47d0      	blx	sl
341924c6:	3001      	adds	r0, #1
341924c8:	d09d      	beq.n	34192406 <_printf_i+0x15a>
341924ca:	3501      	adds	r5, #1
341924cc:	68e3      	ldr	r3, [r4, #12]
341924ce:	9903      	ldr	r1, [sp, #12]
341924d0:	1a5b      	subs	r3, r3, r1
341924d2:	42ab      	cmp	r3, r5
341924d4:	dcf2      	bgt.n	341924bc <_printf_i+0x210>
341924d6:	e7eb      	b.n	341924b0 <_printf_i+0x204>
341924d8:	2500      	movs	r5, #0
341924da:	f104 0619 	add.w	r6, r4, #25
341924de:	e7f5      	b.n	341924cc <_printf_i+0x220>
341924e0:	341928b1 	.word	0x341928b1
341924e4:	341928c2 	.word	0x341928c2

341924e8 <__sflush_r>:
341924e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
341924ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
341924f0:	0716      	lsls	r6, r2, #28
341924f2:	4605      	mov	r5, r0
341924f4:	460c      	mov	r4, r1
341924f6:	d454      	bmi.n	341925a2 <__sflush_r+0xba>
341924f8:	684b      	ldr	r3, [r1, #4]
341924fa:	2b00      	cmp	r3, #0
341924fc:	dc02      	bgt.n	34192504 <__sflush_r+0x1c>
341924fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
34192500:	2b00      	cmp	r3, #0
34192502:	dd48      	ble.n	34192596 <__sflush_r+0xae>
34192504:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
34192506:	2e00      	cmp	r6, #0
34192508:	d045      	beq.n	34192596 <__sflush_r+0xae>
3419250a:	2300      	movs	r3, #0
3419250c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
34192510:	682f      	ldr	r7, [r5, #0]
34192512:	6a21      	ldr	r1, [r4, #32]
34192514:	602b      	str	r3, [r5, #0]
34192516:	d030      	beq.n	3419257a <__sflush_r+0x92>
34192518:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3419251a:	89a3      	ldrh	r3, [r4, #12]
3419251c:	0759      	lsls	r1, r3, #29
3419251e:	d505      	bpl.n	3419252c <__sflush_r+0x44>
34192520:	6863      	ldr	r3, [r4, #4]
34192522:	1ad2      	subs	r2, r2, r3
34192524:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34192526:	b10b      	cbz	r3, 3419252c <__sflush_r+0x44>
34192528:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3419252a:	1ad2      	subs	r2, r2, r3
3419252c:	2300      	movs	r3, #0
3419252e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
34192530:	6a21      	ldr	r1, [r4, #32]
34192532:	4628      	mov	r0, r5
34192534:	47b0      	blx	r6
34192536:	1c43      	adds	r3, r0, #1
34192538:	89a3      	ldrh	r3, [r4, #12]
3419253a:	d106      	bne.n	3419254a <__sflush_r+0x62>
3419253c:	6829      	ldr	r1, [r5, #0]
3419253e:	291d      	cmp	r1, #29
34192540:	d82b      	bhi.n	3419259a <__sflush_r+0xb2>
34192542:	4a2a      	ldr	r2, [pc, #168]	@ (341925ec <__sflush_r+0x104>)
34192544:	40ca      	lsrs	r2, r1
34192546:	07d6      	lsls	r6, r2, #31
34192548:	d527      	bpl.n	3419259a <__sflush_r+0xb2>
3419254a:	2200      	movs	r2, #0
3419254c:	04d9      	lsls	r1, r3, #19
3419254e:	6062      	str	r2, [r4, #4]
34192550:	6922      	ldr	r2, [r4, #16]
34192552:	6022      	str	r2, [r4, #0]
34192554:	d504      	bpl.n	34192560 <__sflush_r+0x78>
34192556:	1c42      	adds	r2, r0, #1
34192558:	d101      	bne.n	3419255e <__sflush_r+0x76>
3419255a:	682b      	ldr	r3, [r5, #0]
3419255c:	b903      	cbnz	r3, 34192560 <__sflush_r+0x78>
3419255e:	6560      	str	r0, [r4, #84]	@ 0x54
34192560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
34192562:	602f      	str	r7, [r5, #0]
34192564:	b1b9      	cbz	r1, 34192596 <__sflush_r+0xae>
34192566:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3419256a:	4299      	cmp	r1, r3
3419256c:	d002      	beq.n	34192574 <__sflush_r+0x8c>
3419256e:	4628      	mov	r0, r5
34192570:	f7ff fbf0 	bl	34191d54 <_free_r>
34192574:	2300      	movs	r3, #0
34192576:	6363      	str	r3, [r4, #52]	@ 0x34
34192578:	e00d      	b.n	34192596 <__sflush_r+0xae>
3419257a:	2301      	movs	r3, #1
3419257c:	4628      	mov	r0, r5
3419257e:	47b0      	blx	r6
34192580:	4602      	mov	r2, r0
34192582:	1c50      	adds	r0, r2, #1
34192584:	d1c9      	bne.n	3419251a <__sflush_r+0x32>
34192586:	682b      	ldr	r3, [r5, #0]
34192588:	2b00      	cmp	r3, #0
3419258a:	d0c6      	beq.n	3419251a <__sflush_r+0x32>
3419258c:	2b1d      	cmp	r3, #29
3419258e:	d001      	beq.n	34192594 <__sflush_r+0xac>
34192590:	2b16      	cmp	r3, #22
34192592:	d11d      	bne.n	341925d0 <__sflush_r+0xe8>
34192594:	602f      	str	r7, [r5, #0]
34192596:	2000      	movs	r0, #0
34192598:	e021      	b.n	341925de <__sflush_r+0xf6>
3419259a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3419259e:	b21b      	sxth	r3, r3
341925a0:	e01a      	b.n	341925d8 <__sflush_r+0xf0>
341925a2:	690f      	ldr	r7, [r1, #16]
341925a4:	2f00      	cmp	r7, #0
341925a6:	d0f6      	beq.n	34192596 <__sflush_r+0xae>
341925a8:	0793      	lsls	r3, r2, #30
341925aa:	680e      	ldr	r6, [r1, #0]
341925ac:	600f      	str	r7, [r1, #0]
341925ae:	bf0c      	ite	eq
341925b0:	694b      	ldreq	r3, [r1, #20]
341925b2:	2300      	movne	r3, #0
341925b4:	eba6 0807 	sub.w	r8, r6, r7
341925b8:	608b      	str	r3, [r1, #8]
341925ba:	f1b8 0f00 	cmp.w	r8, #0
341925be:	ddea      	ble.n	34192596 <__sflush_r+0xae>
341925c0:	4643      	mov	r3, r8
341925c2:	463a      	mov	r2, r7
341925c4:	6a21      	ldr	r1, [r4, #32]
341925c6:	4628      	mov	r0, r5
341925c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
341925ca:	47b0      	blx	r6
341925cc:	2800      	cmp	r0, #0
341925ce:	dc08      	bgt.n	341925e2 <__sflush_r+0xfa>
341925d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
341925d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
341925d8:	f04f 30ff 	mov.w	r0, #4294967295
341925dc:	81a3      	strh	r3, [r4, #12]
341925de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
341925e2:	4407      	add	r7, r0
341925e4:	eba8 0800 	sub.w	r8, r8, r0
341925e8:	e7e7      	b.n	341925ba <__sflush_r+0xd2>
341925ea:	bf00      	nop
341925ec:	20400001 	.word	0x20400001

341925f0 <_fflush_r>:
341925f0:	b538      	push	{r3, r4, r5, lr}
341925f2:	690b      	ldr	r3, [r1, #16]
341925f4:	4605      	mov	r5, r0
341925f6:	460c      	mov	r4, r1
341925f8:	b913      	cbnz	r3, 34192600 <_fflush_r+0x10>
341925fa:	2500      	movs	r5, #0
341925fc:	4628      	mov	r0, r5
341925fe:	bd38      	pop	{r3, r4, r5, pc}
34192600:	b118      	cbz	r0, 3419260a <_fflush_r+0x1a>
34192602:	6a03      	ldr	r3, [r0, #32]
34192604:	b90b      	cbnz	r3, 3419260a <_fflush_r+0x1a>
34192606:	f7ff f99f 	bl	34191948 <__sinit>
3419260a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3419260e:	2b00      	cmp	r3, #0
34192610:	d0f3      	beq.n	341925fa <_fflush_r+0xa>
34192612:	6e62      	ldr	r2, [r4, #100]	@ 0x64
34192614:	07d0      	lsls	r0, r2, #31
34192616:	d404      	bmi.n	34192622 <_fflush_r+0x32>
34192618:	0599      	lsls	r1, r3, #22
3419261a:	d402      	bmi.n	34192622 <_fflush_r+0x32>
3419261c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3419261e:	f7ff fb8a 	bl	34191d36 <__retarget_lock_acquire_recursive>
34192622:	4628      	mov	r0, r5
34192624:	4621      	mov	r1, r4
34192626:	f7ff ff5f 	bl	341924e8 <__sflush_r>
3419262a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3419262c:	4605      	mov	r5, r0
3419262e:	07da      	lsls	r2, r3, #31
34192630:	d4e4      	bmi.n	341925fc <_fflush_r+0xc>
34192632:	89a3      	ldrh	r3, [r4, #12]
34192634:	059b      	lsls	r3, r3, #22
34192636:	d4e1      	bmi.n	341925fc <_fflush_r+0xc>
34192638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3419263a:	f7ff fb7d 	bl	34191d38 <__retarget_lock_release_recursive>
3419263e:	e7dd      	b.n	341925fc <_fflush_r+0xc>

34192640 <__swhatbuf_r>:
34192640:	b570      	push	{r4, r5, r6, lr}
34192642:	460c      	mov	r4, r1
34192644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34192648:	b096      	sub	sp, #88	@ 0x58
3419264a:	4615      	mov	r5, r2
3419264c:	2900      	cmp	r1, #0
3419264e:	461e      	mov	r6, r3
34192650:	da0c      	bge.n	3419266c <__swhatbuf_r+0x2c>
34192652:	89a3      	ldrh	r3, [r4, #12]
34192654:	2100      	movs	r1, #0
34192656:	f013 0f80 	tst.w	r3, #128	@ 0x80
3419265a:	bf14      	ite	ne
3419265c:	2340      	movne	r3, #64	@ 0x40
3419265e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
34192662:	2000      	movs	r0, #0
34192664:	6031      	str	r1, [r6, #0]
34192666:	602b      	str	r3, [r5, #0]
34192668:	b016      	add	sp, #88	@ 0x58
3419266a:	bd70      	pop	{r4, r5, r6, pc}
3419266c:	466a      	mov	r2, sp
3419266e:	f000 f849 	bl	34192704 <_fstat_r>
34192672:	2800      	cmp	r0, #0
34192674:	dbed      	blt.n	34192652 <__swhatbuf_r+0x12>
34192676:	9901      	ldr	r1, [sp, #4]
34192678:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3419267c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
34192680:	4259      	negs	r1, r3
34192682:	4159      	adcs	r1, r3
34192684:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34192688:	e7eb      	b.n	34192662 <__swhatbuf_r+0x22>

3419268a <__smakebuf_r>:
3419268a:	898b      	ldrh	r3, [r1, #12]
3419268c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3419268e:	079d      	lsls	r5, r3, #30
34192690:	4606      	mov	r6, r0
34192692:	460c      	mov	r4, r1
34192694:	d507      	bpl.n	341926a6 <__smakebuf_r+0x1c>
34192696:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3419269a:	6023      	str	r3, [r4, #0]
3419269c:	6123      	str	r3, [r4, #16]
3419269e:	2301      	movs	r3, #1
341926a0:	6163      	str	r3, [r4, #20]
341926a2:	b003      	add	sp, #12
341926a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
341926a6:	ab01      	add	r3, sp, #4
341926a8:	466a      	mov	r2, sp
341926aa:	f7ff ffc9 	bl	34192640 <__swhatbuf_r>
341926ae:	9f00      	ldr	r7, [sp, #0]
341926b0:	4605      	mov	r5, r0
341926b2:	4630      	mov	r0, r6
341926b4:	4639      	mov	r1, r7
341926b6:	f7ff fbb9 	bl	34191e2c <_malloc_r>
341926ba:	b948      	cbnz	r0, 341926d0 <__smakebuf_r+0x46>
341926bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
341926c0:	059a      	lsls	r2, r3, #22
341926c2:	d4ee      	bmi.n	341926a2 <__smakebuf_r+0x18>
341926c4:	f023 0303 	bic.w	r3, r3, #3
341926c8:	f043 0302 	orr.w	r3, r3, #2
341926cc:	81a3      	strh	r3, [r4, #12]
341926ce:	e7e2      	b.n	34192696 <__smakebuf_r+0xc>
341926d0:	89a3      	ldrh	r3, [r4, #12]
341926d2:	6020      	str	r0, [r4, #0]
341926d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
341926d8:	81a3      	strh	r3, [r4, #12]
341926da:	9b01      	ldr	r3, [sp, #4]
341926dc:	e9c4 0704 	strd	r0, r7, [r4, #16]
341926e0:	b15b      	cbz	r3, 341926fa <__smakebuf_r+0x70>
341926e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
341926e6:	4630      	mov	r0, r6
341926e8:	f000 f81e 	bl	34192728 <_isatty_r>
341926ec:	b128      	cbz	r0, 341926fa <__smakebuf_r+0x70>
341926ee:	89a3      	ldrh	r3, [r4, #12]
341926f0:	f023 0303 	bic.w	r3, r3, #3
341926f4:	f043 0301 	orr.w	r3, r3, #1
341926f8:	81a3      	strh	r3, [r4, #12]
341926fa:	89a3      	ldrh	r3, [r4, #12]
341926fc:	431d      	orrs	r5, r3
341926fe:	81a5      	strh	r5, [r4, #12]
34192700:	e7cf      	b.n	341926a2 <__smakebuf_r+0x18>
	...

34192704 <_fstat_r>:
34192704:	b538      	push	{r3, r4, r5, lr}
34192706:	2300      	movs	r3, #0
34192708:	4d06      	ldr	r5, [pc, #24]	@ (34192724 <_fstat_r+0x20>)
3419270a:	4604      	mov	r4, r0
3419270c:	4608      	mov	r0, r1
3419270e:	4611      	mov	r1, r2
34192710:	602b      	str	r3, [r5, #0]
34192712:	f7ee ff50 	bl	341815b6 <_fstat>
34192716:	1c43      	adds	r3, r0, #1
34192718:	d102      	bne.n	34192720 <_fstat_r+0x1c>
3419271a:	682b      	ldr	r3, [r5, #0]
3419271c:	b103      	cbz	r3, 34192720 <_fstat_r+0x1c>
3419271e:	6023      	str	r3, [r4, #0]
34192720:	bd38      	pop	{r3, r4, r5, pc}
34192722:	bf00      	nop
34192724:	341c05b0 	.word	0x341c05b0

34192728 <_isatty_r>:
34192728:	b538      	push	{r3, r4, r5, lr}
3419272a:	2300      	movs	r3, #0
3419272c:	4d05      	ldr	r5, [pc, #20]	@ (34192744 <_isatty_r+0x1c>)
3419272e:	4604      	mov	r4, r0
34192730:	4608      	mov	r0, r1
34192732:	602b      	str	r3, [r5, #0]
34192734:	f7ee ff4f 	bl	341815d6 <_isatty>
34192738:	1c43      	adds	r3, r0, #1
3419273a:	d102      	bne.n	34192742 <_isatty_r+0x1a>
3419273c:	682b      	ldr	r3, [r5, #0]
3419273e:	b103      	cbz	r3, 34192742 <_isatty_r+0x1a>
34192740:	6023      	str	r3, [r4, #0]
34192742:	bd38      	pop	{r3, r4, r5, pc}
34192744:	341c05b0 	.word	0x341c05b0

34192748 <_sbrk_r>:
34192748:	b538      	push	{r3, r4, r5, lr}
3419274a:	2300      	movs	r3, #0
3419274c:	4d05      	ldr	r5, [pc, #20]	@ (34192764 <_sbrk_r+0x1c>)
3419274e:	4604      	mov	r4, r0
34192750:	4608      	mov	r0, r1
34192752:	602b      	str	r3, [r5, #0]
34192754:	f7ee ff58 	bl	34181608 <_sbrk>
34192758:	1c43      	adds	r3, r0, #1
3419275a:	d102      	bne.n	34192762 <_sbrk_r+0x1a>
3419275c:	682b      	ldr	r3, [r5, #0]
3419275e:	b103      	cbz	r3, 34192762 <_sbrk_r+0x1a>
34192760:	6023      	str	r3, [r4, #0]
34192762:	bd38      	pop	{r3, r4, r5, pc}
34192764:	341c05b0 	.word	0x341c05b0

34192768 <memchr>:
34192768:	b2c9      	uxtb	r1, r1
3419276a:	4603      	mov	r3, r0
3419276c:	4402      	add	r2, r0
3419276e:	b510      	push	{r4, lr}
34192770:	4293      	cmp	r3, r2
34192772:	4618      	mov	r0, r3
34192774:	d101      	bne.n	3419277a <memchr+0x12>
34192776:	2000      	movs	r0, #0
34192778:	e003      	b.n	34192782 <memchr+0x1a>
3419277a:	7804      	ldrb	r4, [r0, #0]
3419277c:	3301      	adds	r3, #1
3419277e:	428c      	cmp	r4, r1
34192780:	d1f6      	bne.n	34192770 <memchr+0x8>
34192782:	bd10      	pop	{r4, pc}

34192784 <_init>:
34192784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34192786:	bf00      	nop
34192788:	bcf8      	pop	{r3, r4, r5, r6, r7}
3419278a:	bc08      	pop	{r3}
3419278c:	469e      	mov	lr, r3
3419278e:	4770      	bx	lr

34192790 <_fini>:
34192790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34192792:	bf00      	nop
34192794:	bcf8      	pop	{r3, r4, r5, r6, r7}
34192796:	bc08      	pop	{r3}
34192798:	469e      	mov	lr, r3
3419279a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

34192a00 <SECURE_SystemCoreClockUpdate>:
34192a00:	e97f e97f 	sg
34192a04:	f7ef b8c4 	b.w	34181b90 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
