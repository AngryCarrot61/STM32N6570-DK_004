
STM32N6570-DK_004_Appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  70100400  70100400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5c8  7010074c  7010074c  0000074c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  7010bd14  7010bd14  0000bd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  7010bd54  7010bd54  0000ce00  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  7010bd54  7010bd54  0000bd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  7010bd5c  7010bd5c  0000ce00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  7010bd5c  7010bd5c  0000bd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  7010bd60  7010bd60  0000bd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  34000000  7010bd64  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noncacheable 00000000  34000068  34000068  0000ce00  2**0
                  CONTENTS
 10 .gnu.sgstubs  00000020  7010bde0  7010bde0  0000cde0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          000002a4  34000068  34000068  00001068  2**2
                  ALLOC
 12 ._user_heap_stack 00003004  3400030c  3400030c  00001068  2**0
                  ALLOC
 13 .ARM.attributes 0000003a  00000000  00000000  0000ce00  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020399  00000000  00000000  0000ce3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002fae  00000000  00000000  0002d1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f30  00000000  00000000  00030188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017fb  00000000  00000000  000320b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005eb6  00000000  00000000  000338b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020058  00000000  00000000  00039769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    002382de  00000000  00000000  000597c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00291a9f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008b20  00000000  00000000  00291ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000057  00000000  00000000  0029a604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

7010074c <__do_global_dtors_aux>:
7010074c:	b510      	push	{r4, lr}
7010074e:	4c05      	ldr	r4, [pc, #20]	@ (70100764 <__do_global_dtors_aux+0x18>)
70100750:	7823      	ldrb	r3, [r4, #0]
70100752:	b933      	cbnz	r3, 70100762 <__do_global_dtors_aux+0x16>
70100754:	4b04      	ldr	r3, [pc, #16]	@ (70100768 <__do_global_dtors_aux+0x1c>)
70100756:	b113      	cbz	r3, 7010075e <__do_global_dtors_aux+0x12>
70100758:	4804      	ldr	r0, [pc, #16]	@ (7010076c <__do_global_dtors_aux+0x20>)
7010075a:	f3af 8000 	nop.w
7010075e:	2301      	movs	r3, #1
70100760:	7023      	strb	r3, [r4, #0]
70100762:	bd10      	pop	{r4, pc}
70100764:	34000068 	.word	0x34000068
70100768:	00000000 	.word	0x00000000
7010076c:	7010bcfc 	.word	0x7010bcfc

70100770 <frame_dummy>:
70100770:	b508      	push	{r3, lr}
70100772:	4b03      	ldr	r3, [pc, #12]	@ (70100780 <frame_dummy+0x10>)
70100774:	b11b      	cbz	r3, 7010077e <frame_dummy+0xe>
70100776:	4903      	ldr	r1, [pc, #12]	@ (70100784 <frame_dummy+0x14>)
70100778:	4803      	ldr	r0, [pc, #12]	@ (70100788 <frame_dummy+0x18>)
7010077a:	f3af 8000 	nop.w
7010077e:	bd08      	pop	{r3, pc}
70100780:	00000000 	.word	0x00000000
70100784:	3400006c 	.word	0x3400006c
70100788:	7010bcfc 	.word	0x7010bcfc

7010078c <__aeabi_uldivmod>:
7010078c:	b953      	cbnz	r3, 701007a4 <__aeabi_uldivmod+0x18>
7010078e:	b94a      	cbnz	r2, 701007a4 <__aeabi_uldivmod+0x18>
70100790:	2900      	cmp	r1, #0
70100792:	bf08      	it	eq
70100794:	2800      	cmpeq	r0, #0
70100796:	bf1c      	itt	ne
70100798:	f04f 31ff 	movne.w	r1, #4294967295
7010079c:	f04f 30ff 	movne.w	r0, #4294967295
701007a0:	f000 b9b0 	b.w	70100b04 <__aeabi_idiv0>
701007a4:	f1ad 0c08 	sub.w	ip, sp, #8
701007a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
701007ac:	f000 f806 	bl	701007bc <__udivmoddi4>
701007b0:	f8dd e004 	ldr.w	lr, [sp, #4]
701007b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
701007b8:	b004      	add	sp, #16
701007ba:	4770      	bx	lr

701007bc <__udivmoddi4>:
701007bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
701007c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
701007c2:	4688      	mov	r8, r1
701007c4:	4604      	mov	r4, r0
701007c6:	468e      	mov	lr, r1
701007c8:	2b00      	cmp	r3, #0
701007ca:	d14a      	bne.n	70100862 <__udivmoddi4+0xa6>
701007cc:	428a      	cmp	r2, r1
701007ce:	4617      	mov	r7, r2
701007d0:	d95f      	bls.n	70100892 <__udivmoddi4+0xd6>
701007d2:	fab2 f682 	clz	r6, r2
701007d6:	b14e      	cbz	r6, 701007ec <__udivmoddi4+0x30>
701007d8:	f1c6 0320 	rsb	r3, r6, #32
701007dc:	fa01 fe06 	lsl.w	lr, r1, r6
701007e0:	40b7      	lsls	r7, r6
701007e2:	40b4      	lsls	r4, r6
701007e4:	fa20 f303 	lsr.w	r3, r0, r3
701007e8:	ea43 0e0e 	orr.w	lr, r3, lr
701007ec:	ea4f 4817 	mov.w	r8, r7, lsr #16
701007f0:	fa1f fc87 	uxth.w	ip, r7
701007f4:	0c23      	lsrs	r3, r4, #16
701007f6:	fbbe f1f8 	udiv	r1, lr, r8
701007fa:	fb08 ee11 	mls	lr, r8, r1, lr
701007fe:	fb01 f20c 	mul.w	r2, r1, ip
70100802:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
70100806:	429a      	cmp	r2, r3
70100808:	d907      	bls.n	7010081a <__udivmoddi4+0x5e>
7010080a:	18fb      	adds	r3, r7, r3
7010080c:	f101 30ff 	add.w	r0, r1, #4294967295
70100810:	d202      	bcs.n	70100818 <__udivmoddi4+0x5c>
70100812:	429a      	cmp	r2, r3
70100814:	f200 8154 	bhi.w	70100ac0 <__udivmoddi4+0x304>
70100818:	4601      	mov	r1, r0
7010081a:	1a9b      	subs	r3, r3, r2
7010081c:	b2a2      	uxth	r2, r4
7010081e:	fbb3 f0f8 	udiv	r0, r3, r8
70100822:	fb08 3310 	mls	r3, r8, r0, r3
70100826:	fb00 fc0c 	mul.w	ip, r0, ip
7010082a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
7010082e:	4594      	cmp	ip, r2
70100830:	d90b      	bls.n	7010084a <__udivmoddi4+0x8e>
70100832:	18ba      	adds	r2, r7, r2
70100834:	f100 33ff 	add.w	r3, r0, #4294967295
70100838:	bf2c      	ite	cs
7010083a:	2401      	movcs	r4, #1
7010083c:	2400      	movcc	r4, #0
7010083e:	4594      	cmp	ip, r2
70100840:	d902      	bls.n	70100848 <__udivmoddi4+0x8c>
70100842:	2c00      	cmp	r4, #0
70100844:	f000 813f 	beq.w	70100ac6 <__udivmoddi4+0x30a>
70100848:	4618      	mov	r0, r3
7010084a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
7010084e:	eba2 020c 	sub.w	r2, r2, ip
70100852:	2100      	movs	r1, #0
70100854:	b11d      	cbz	r5, 7010085e <__udivmoddi4+0xa2>
70100856:	40f2      	lsrs	r2, r6
70100858:	2300      	movs	r3, #0
7010085a:	e9c5 2300 	strd	r2, r3, [r5]
7010085e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
70100862:	428b      	cmp	r3, r1
70100864:	d905      	bls.n	70100872 <__udivmoddi4+0xb6>
70100866:	b10d      	cbz	r5, 7010086c <__udivmoddi4+0xb0>
70100868:	e9c5 0100 	strd	r0, r1, [r5]
7010086c:	2100      	movs	r1, #0
7010086e:	4608      	mov	r0, r1
70100870:	e7f5      	b.n	7010085e <__udivmoddi4+0xa2>
70100872:	fab3 f183 	clz	r1, r3
70100876:	2900      	cmp	r1, #0
70100878:	d14e      	bne.n	70100918 <__udivmoddi4+0x15c>
7010087a:	4543      	cmp	r3, r8
7010087c:	f0c0 8112 	bcc.w	70100aa4 <__udivmoddi4+0x2e8>
70100880:	4282      	cmp	r2, r0
70100882:	f240 810f 	bls.w	70100aa4 <__udivmoddi4+0x2e8>
70100886:	4608      	mov	r0, r1
70100888:	2d00      	cmp	r5, #0
7010088a:	d0e8      	beq.n	7010085e <__udivmoddi4+0xa2>
7010088c:	e9c5 4e00 	strd	r4, lr, [r5]
70100890:	e7e5      	b.n	7010085e <__udivmoddi4+0xa2>
70100892:	2a00      	cmp	r2, #0
70100894:	f000 80ac 	beq.w	701009f0 <__udivmoddi4+0x234>
70100898:	fab2 f682 	clz	r6, r2
7010089c:	2e00      	cmp	r6, #0
7010089e:	f040 80bb 	bne.w	70100a18 <__udivmoddi4+0x25c>
701008a2:	1a8b      	subs	r3, r1, r2
701008a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
701008a8:	b2bc      	uxth	r4, r7
701008aa:	2101      	movs	r1, #1
701008ac:	0c02      	lsrs	r2, r0, #16
701008ae:	b280      	uxth	r0, r0
701008b0:	fbb3 fcfe 	udiv	ip, r3, lr
701008b4:	fb0e 331c 	mls	r3, lr, ip, r3
701008b8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
701008bc:	fb04 f20c 	mul.w	r2, r4, ip
701008c0:	429a      	cmp	r2, r3
701008c2:	d90e      	bls.n	701008e2 <__udivmoddi4+0x126>
701008c4:	18fb      	adds	r3, r7, r3
701008c6:	f10c 38ff 	add.w	r8, ip, #4294967295
701008ca:	bf2c      	ite	cs
701008cc:	f04f 0901 	movcs.w	r9, #1
701008d0:	f04f 0900 	movcc.w	r9, #0
701008d4:	429a      	cmp	r2, r3
701008d6:	d903      	bls.n	701008e0 <__udivmoddi4+0x124>
701008d8:	f1b9 0f00 	cmp.w	r9, #0
701008dc:	f000 80ec 	beq.w	70100ab8 <__udivmoddi4+0x2fc>
701008e0:	46c4      	mov	ip, r8
701008e2:	1a9b      	subs	r3, r3, r2
701008e4:	fbb3 f8fe 	udiv	r8, r3, lr
701008e8:	fb0e 3318 	mls	r3, lr, r8, r3
701008ec:	fb04 f408 	mul.w	r4, r4, r8
701008f0:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
701008f4:	4294      	cmp	r4, r2
701008f6:	d90b      	bls.n	70100910 <__udivmoddi4+0x154>
701008f8:	18ba      	adds	r2, r7, r2
701008fa:	f108 33ff 	add.w	r3, r8, #4294967295
701008fe:	bf2c      	ite	cs
70100900:	2001      	movcs	r0, #1
70100902:	2000      	movcc	r0, #0
70100904:	4294      	cmp	r4, r2
70100906:	d902      	bls.n	7010090e <__udivmoddi4+0x152>
70100908:	2800      	cmp	r0, #0
7010090a:	f000 80d1 	beq.w	70100ab0 <__udivmoddi4+0x2f4>
7010090e:	4698      	mov	r8, r3
70100910:	1b12      	subs	r2, r2, r4
70100912:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
70100916:	e79d      	b.n	70100854 <__udivmoddi4+0x98>
70100918:	f1c1 0620 	rsb	r6, r1, #32
7010091c:	408b      	lsls	r3, r1
7010091e:	fa08 f401 	lsl.w	r4, r8, r1
70100922:	fa00 f901 	lsl.w	r9, r0, r1
70100926:	fa22 f706 	lsr.w	r7, r2, r6
7010092a:	fa28 f806 	lsr.w	r8, r8, r6
7010092e:	408a      	lsls	r2, r1
70100930:	431f      	orrs	r7, r3
70100932:	fa20 f306 	lsr.w	r3, r0, r6
70100936:	0c38      	lsrs	r0, r7, #16
70100938:	4323      	orrs	r3, r4
7010093a:	fa1f fc87 	uxth.w	ip, r7
7010093e:	0c1c      	lsrs	r4, r3, #16
70100940:	fbb8 fef0 	udiv	lr, r8, r0
70100944:	fb00 881e 	mls	r8, r0, lr, r8
70100948:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
7010094c:	fb0e f80c 	mul.w	r8, lr, ip
70100950:	45a0      	cmp	r8, r4
70100952:	d90e      	bls.n	70100972 <__udivmoddi4+0x1b6>
70100954:	193c      	adds	r4, r7, r4
70100956:	f10e 3aff 	add.w	sl, lr, #4294967295
7010095a:	bf2c      	ite	cs
7010095c:	f04f 0b01 	movcs.w	fp, #1
70100960:	f04f 0b00 	movcc.w	fp, #0
70100964:	45a0      	cmp	r8, r4
70100966:	d903      	bls.n	70100970 <__udivmoddi4+0x1b4>
70100968:	f1bb 0f00 	cmp.w	fp, #0
7010096c:	f000 80b8 	beq.w	70100ae0 <__udivmoddi4+0x324>
70100970:	46d6      	mov	lr, sl
70100972:	eba4 0408 	sub.w	r4, r4, r8
70100976:	fa1f f883 	uxth.w	r8, r3
7010097a:	fbb4 f3f0 	udiv	r3, r4, r0
7010097e:	fb00 4413 	mls	r4, r0, r3, r4
70100982:	fb03 fc0c 	mul.w	ip, r3, ip
70100986:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
7010098a:	45a4      	cmp	ip, r4
7010098c:	d90e      	bls.n	701009ac <__udivmoddi4+0x1f0>
7010098e:	193c      	adds	r4, r7, r4
70100990:	f103 30ff 	add.w	r0, r3, #4294967295
70100994:	bf2c      	ite	cs
70100996:	f04f 0801 	movcs.w	r8, #1
7010099a:	f04f 0800 	movcc.w	r8, #0
7010099e:	45a4      	cmp	ip, r4
701009a0:	d903      	bls.n	701009aa <__udivmoddi4+0x1ee>
701009a2:	f1b8 0f00 	cmp.w	r8, #0
701009a6:	f000 809f 	beq.w	70100ae8 <__udivmoddi4+0x32c>
701009aa:	4603      	mov	r3, r0
701009ac:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
701009b0:	eba4 040c 	sub.w	r4, r4, ip
701009b4:	fba0 ec02 	umull	lr, ip, r0, r2
701009b8:	4564      	cmp	r4, ip
701009ba:	4673      	mov	r3, lr
701009bc:	46e0      	mov	r8, ip
701009be:	d302      	bcc.n	701009c6 <__udivmoddi4+0x20a>
701009c0:	d107      	bne.n	701009d2 <__udivmoddi4+0x216>
701009c2:	45f1      	cmp	r9, lr
701009c4:	d205      	bcs.n	701009d2 <__udivmoddi4+0x216>
701009c6:	ebbe 0302 	subs.w	r3, lr, r2
701009ca:	eb6c 0c07 	sbc.w	ip, ip, r7
701009ce:	3801      	subs	r0, #1
701009d0:	46e0      	mov	r8, ip
701009d2:	b15d      	cbz	r5, 701009ec <__udivmoddi4+0x230>
701009d4:	ebb9 0203 	subs.w	r2, r9, r3
701009d8:	eb64 0408 	sbc.w	r4, r4, r8
701009dc:	fa04 f606 	lsl.w	r6, r4, r6
701009e0:	fa22 f301 	lsr.w	r3, r2, r1
701009e4:	40cc      	lsrs	r4, r1
701009e6:	431e      	orrs	r6, r3
701009e8:	e9c5 6400 	strd	r6, r4, [r5]
701009ec:	2100      	movs	r1, #0
701009ee:	e736      	b.n	7010085e <__udivmoddi4+0xa2>
701009f0:	fbb1 fcf2 	udiv	ip, r1, r2
701009f4:	0c01      	lsrs	r1, r0, #16
701009f6:	4614      	mov	r4, r2
701009f8:	b280      	uxth	r0, r0
701009fa:	4696      	mov	lr, r2
701009fc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
70100a00:	2620      	movs	r6, #32
70100a02:	4690      	mov	r8, r2
70100a04:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
70100a08:	4610      	mov	r0, r2
70100a0a:	fbb1 f1f2 	udiv	r1, r1, r2
70100a0e:	eba3 0308 	sub.w	r3, r3, r8
70100a12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
70100a16:	e74b      	b.n	701008b0 <__udivmoddi4+0xf4>
70100a18:	40b7      	lsls	r7, r6
70100a1a:	f1c6 0320 	rsb	r3, r6, #32
70100a1e:	fa01 f206 	lsl.w	r2, r1, r6
70100a22:	fa21 f803 	lsr.w	r8, r1, r3
70100a26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
70100a2a:	fa20 f303 	lsr.w	r3, r0, r3
70100a2e:	b2bc      	uxth	r4, r7
70100a30:	40b0      	lsls	r0, r6
70100a32:	4313      	orrs	r3, r2
70100a34:	0c02      	lsrs	r2, r0, #16
70100a36:	0c19      	lsrs	r1, r3, #16
70100a38:	b280      	uxth	r0, r0
70100a3a:	fbb8 f9fe 	udiv	r9, r8, lr
70100a3e:	fb0e 8819 	mls	r8, lr, r9, r8
70100a42:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
70100a46:	fb09 f804 	mul.w	r8, r9, r4
70100a4a:	4588      	cmp	r8, r1
70100a4c:	d951      	bls.n	70100af2 <__udivmoddi4+0x336>
70100a4e:	1879      	adds	r1, r7, r1
70100a50:	f109 3cff 	add.w	ip, r9, #4294967295
70100a54:	bf2c      	ite	cs
70100a56:	f04f 0a01 	movcs.w	sl, #1
70100a5a:	f04f 0a00 	movcc.w	sl, #0
70100a5e:	4588      	cmp	r8, r1
70100a60:	d902      	bls.n	70100a68 <__udivmoddi4+0x2ac>
70100a62:	f1ba 0f00 	cmp.w	sl, #0
70100a66:	d031      	beq.n	70100acc <__udivmoddi4+0x310>
70100a68:	eba1 0108 	sub.w	r1, r1, r8
70100a6c:	fbb1 f9fe 	udiv	r9, r1, lr
70100a70:	fb09 f804 	mul.w	r8, r9, r4
70100a74:	fb0e 1119 	mls	r1, lr, r9, r1
70100a78:	b29b      	uxth	r3, r3
70100a7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
70100a7e:	4543      	cmp	r3, r8
70100a80:	d235      	bcs.n	70100aee <__udivmoddi4+0x332>
70100a82:	18fb      	adds	r3, r7, r3
70100a84:	f109 31ff 	add.w	r1, r9, #4294967295
70100a88:	bf2c      	ite	cs
70100a8a:	f04f 0a01 	movcs.w	sl, #1
70100a8e:	f04f 0a00 	movcc.w	sl, #0
70100a92:	4543      	cmp	r3, r8
70100a94:	d2bb      	bcs.n	70100a0e <__udivmoddi4+0x252>
70100a96:	f1ba 0f00 	cmp.w	sl, #0
70100a9a:	d1b8      	bne.n	70100a0e <__udivmoddi4+0x252>
70100a9c:	f1a9 0102 	sub.w	r1, r9, #2
70100aa0:	443b      	add	r3, r7
70100aa2:	e7b4      	b.n	70100a0e <__udivmoddi4+0x252>
70100aa4:	1a84      	subs	r4, r0, r2
70100aa6:	eb68 0203 	sbc.w	r2, r8, r3
70100aaa:	2001      	movs	r0, #1
70100aac:	4696      	mov	lr, r2
70100aae:	e6eb      	b.n	70100888 <__udivmoddi4+0xcc>
70100ab0:	443a      	add	r2, r7
70100ab2:	f1a8 0802 	sub.w	r8, r8, #2
70100ab6:	e72b      	b.n	70100910 <__udivmoddi4+0x154>
70100ab8:	f1ac 0c02 	sub.w	ip, ip, #2
70100abc:	443b      	add	r3, r7
70100abe:	e710      	b.n	701008e2 <__udivmoddi4+0x126>
70100ac0:	3902      	subs	r1, #2
70100ac2:	443b      	add	r3, r7
70100ac4:	e6a9      	b.n	7010081a <__udivmoddi4+0x5e>
70100ac6:	443a      	add	r2, r7
70100ac8:	3802      	subs	r0, #2
70100aca:	e6be      	b.n	7010084a <__udivmoddi4+0x8e>
70100acc:	eba7 0808 	sub.w	r8, r7, r8
70100ad0:	f1a9 0c02 	sub.w	ip, r9, #2
70100ad4:	4441      	add	r1, r8
70100ad6:	fbb1 f9fe 	udiv	r9, r1, lr
70100ada:	fb09 f804 	mul.w	r8, r9, r4
70100ade:	e7c9      	b.n	70100a74 <__udivmoddi4+0x2b8>
70100ae0:	f1ae 0e02 	sub.w	lr, lr, #2
70100ae4:	443c      	add	r4, r7
70100ae6:	e744      	b.n	70100972 <__udivmoddi4+0x1b6>
70100ae8:	3b02      	subs	r3, #2
70100aea:	443c      	add	r4, r7
70100aec:	e75e      	b.n	701009ac <__udivmoddi4+0x1f0>
70100aee:	4649      	mov	r1, r9
70100af0:	e78d      	b.n	70100a0e <__udivmoddi4+0x252>
70100af2:	eba1 0108 	sub.w	r1, r1, r8
70100af6:	46cc      	mov	ip, r9
70100af8:	fbb1 f9fe 	udiv	r9, r1, lr
70100afc:	fb09 f804 	mul.w	r8, r9, r4
70100b00:	e7b8      	b.n	70100a74 <__udivmoddi4+0x2b8>
70100b02:	bf00      	nop

70100b04 <__aeabi_idiv0>:
70100b04:	4770      	bx	lr
70100b06:	bf00      	nop

70100b08 <LL_AHB4_GRP1_EnableClock>:
  *         @arg @ref LL_AHB4_GRP1_PERIPH_PWR
  *         @arg @ref LL_AHB4_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
70100b08:	b480      	push	{r7}
70100b0a:	b085      	sub	sp, #20
70100b0c:	af00      	add	r7, sp, #0
70100b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
70100b10:	4a07      	ldr	r2, [pc, #28]	@ (70100b30 <LL_AHB4_GRP1_EnableClock+0x28>)
70100b12:	687b      	ldr	r3, [r7, #4]
70100b14:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
70100b18:	4b05      	ldr	r3, [pc, #20]	@ (70100b30 <LL_AHB4_GRP1_EnableClock+0x28>)
70100b1a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
70100b1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
70100b20:	68fb      	ldr	r3, [r7, #12]
}
70100b22:	bf00      	nop
70100b24:	3714      	adds	r7, #20
70100b26:	46bd      	mov	sp, r7
70100b28:	f85d 7b04 	ldr.w	r7, [sp], #4
70100b2c:	4770      	bx	lr
70100b2e:	bf00      	nop
70100b30:	56028000 	.word	0x56028000

70100b34 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
70100b34:	b580      	push	{r7, lr}
70100b36:	b086      	sub	sp, #24
70100b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
70100b3a:	1d3b      	adds	r3, r7, #4
70100b3c:	2200      	movs	r2, #0
70100b3e:	601a      	str	r2, [r3, #0]
70100b40:	605a      	str	r2, [r3, #4]
70100b42:	609a      	str	r2, [r3, #8]
70100b44:	60da      	str	r2, [r3, #12]
70100b46:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
70100b48:	2004      	movs	r0, #4
70100b4a:	f7ff ffdd 	bl	70100b08 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
70100b4e:	2080      	movs	r0, #128	@ 0x80
70100b50:	f7ff ffda 	bl	70100b08 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
70100b54:	2008      	movs	r0, #8
70100b56:	f7ff ffd7 	bl	70100b08 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
70100b5a:	2002      	movs	r0, #2
70100b5c:	f7ff ffd4 	bl	70100b08 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
70100b60:	2010      	movs	r0, #16
70100b62:	f7ff ffd1 	bl	70100b08 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOO_CLK_ENABLE();
70100b66:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
70100b6a:	f7ff ffcd 	bl	70100b08 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOG_CLK_ENABLE();
70100b6e:	2040      	movs	r0, #64	@ 0x40
70100b70:	f7ff ffca 	bl	70100b08 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
70100b74:	2001      	movs	r0, #1
70100b76:	f7ff ffc7 	bl	70100b08 <LL_AHB4_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
70100b7a:	2200      	movs	r2, #0
70100b7c:	2102      	movs	r1, #2
70100b7e:	4814      	ldr	r0, [pc, #80]	@ (70100bd0 <MX_GPIO_Init+0x9c>)
70100b80:	f001 fa60 	bl	70102044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
70100b84:	2200      	movs	r2, #0
70100b86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
70100b8a:	4812      	ldr	r0, [pc, #72]	@ (70100bd4 <MX_GPIO_Init+0xa0>)
70100b8c:	f001 fa5a 	bl	70102044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
70100b90:	2302      	movs	r3, #2
70100b92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
70100b94:	2301      	movs	r3, #1
70100b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
70100b98:	2300      	movs	r3, #0
70100b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
70100b9c:	2300      	movs	r3, #0
70100b9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
70100ba0:	1d3b      	adds	r3, r7, #4
70100ba2:	4619      	mov	r1, r3
70100ba4:	480a      	ldr	r0, [pc, #40]	@ (70100bd0 <MX_GPIO_Init+0x9c>)
70100ba6:	f001 f89b 	bl	70101ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
70100baa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
70100bae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
70100bb0:	2301      	movs	r3, #1
70100bb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
70100bb4:	2300      	movs	r3, #0
70100bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
70100bb8:	2300      	movs	r3, #0
70100bba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
70100bbc:	1d3b      	adds	r3, r7, #4
70100bbe:	4619      	mov	r1, r3
70100bc0:	4804      	ldr	r0, [pc, #16]	@ (70100bd4 <MX_GPIO_Init+0xa0>)
70100bc2:	f001 f88d 	bl	70101ce0 <HAL_GPIO_Init>

}
70100bc6:	bf00      	nop
70100bc8:	3718      	adds	r7, #24
70100bca:	46bd      	mov	sp, r7
70100bcc:	bd80      	pop	{r7, pc}
70100bce:	bf00      	nop
70100bd0:	56023800 	.word	0x56023800
70100bd4:	56021800 	.word	0x56021800

70100bd8 <LL_AHB3_GRP1_EnableClock>:
{
70100bd8:	b480      	push	{r7}
70100bda:	b085      	sub	sp, #20
70100bdc:	af00      	add	r7, sp, #0
70100bde:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3ENSR, Periphs);
70100be0:	4a07      	ldr	r2, [pc, #28]	@ (70100c00 <LL_AHB3_GRP1_EnableClock+0x28>)
70100be2:	687b      	ldr	r3, [r7, #4]
70100be4:	f8c2 3a58 	str.w	r3, [r2, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
70100be8:	4b05      	ldr	r3, [pc, #20]	@ (70100c00 <LL_AHB3_GRP1_EnableClock+0x28>)
70100bea:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
70100bee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
70100bf0:	68fb      	ldr	r3, [r7, #12]
}
70100bf2:	bf00      	nop
70100bf4:	3714      	adds	r7, #20
70100bf6:	46bd      	mov	sp, r7
70100bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
70100bfc:	4770      	bx	lr
70100bfe:	bf00      	nop
70100c00:	56028000 	.word	0x56028000

70100c04 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
70100c04:	b580      	push	{r7, lr}
70100c06:	b082      	sub	sp, #8
70100c08:	af00      	add	r7, sp, #0
70100c0a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
70100c0c:	1d39      	adds	r1, r7, #4
70100c0e:	f04f 33ff 	mov.w	r3, #4294967295
70100c12:	2201      	movs	r2, #1
70100c14:	4803      	ldr	r0, [pc, #12]	@ (70100c24 <__io_putchar+0x20>)
70100c16:	f009 fe28 	bl	7010a86a <HAL_UART_Transmit>
  return ch;
70100c1a:	687b      	ldr	r3, [r7, #4]
}
70100c1c:	4618      	mov	r0, r3
70100c1e:	3708      	adds	r7, #8
70100c20:	46bd      	mov	sp, r7
70100c22:	bd80      	pop	{r7, pc}
70100c24:	34000128 	.word	0x34000128

70100c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
70100c28:	b580      	push	{r7, lr}
70100c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
70100c2c:	f000 fee3 	bl	701019f6 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
70100c30:	f7ff ff80 	bl	70100b34 <MX_GPIO_Init>
//  MX_I2C1_Init();
//  MX_I2C2_Init();
//  MX_LTDC_Init();
//  MX_SDMMC2_SD_Init();
//  MX_TIM2_Init();
  MX_USART1_UART_Init();
70100c34:	f000 fdfe 	bl	70101834 <MX_USART1_UART_Init>
//  MX_CRC_Init();
//  MX_RNG_Init();
//  MX_TIM3_Init();
//  MX_FileX_Init();
  SystemIsolation_Config();
70100c38:	f000 f824 	bl	70100c84 <SystemIsolation_Config>
  /* USER CODE BEGIN 2 */

  printf("Application running!\n");
70100c3c:	480e      	ldr	r0, [pc, #56]	@ (70100c78 <main+0x50>)
70100c3e:	f00a fcc9 	bl	7010b5d4 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
70100c42:	2102      	movs	r1, #2
70100c44:	480d      	ldr	r0, [pc, #52]	@ (70100c7c <main+0x54>)
70100c46:	f001 fa15 	bl	70102074 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
70100c4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
70100c4e:	480c      	ldr	r0, [pc, #48]	@ (70100c80 <main+0x58>)
70100c50:	f001 fa10 	bl	70102074 <HAL_GPIO_TogglePin>
    HAL_Delay(250);
70100c54:	20fa      	movs	r0, #250	@ 0xfa
70100c56:	f000 ff39 	bl	70101acc <HAL_Delay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
70100c5a:	2102      	movs	r1, #2
70100c5c:	4807      	ldr	r0, [pc, #28]	@ (70100c7c <main+0x54>)
70100c5e:	f001 fa09 	bl	70102074 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
70100c62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
70100c66:	4806      	ldr	r0, [pc, #24]	@ (70100c80 <main+0x58>)
70100c68:	f001 fa04 	bl	70102074 <HAL_GPIO_TogglePin>
    HAL_Delay(750);
70100c6c:	f240 20ee 	movw	r0, #750	@ 0x2ee
70100c70:	f000 ff2c 	bl	70101acc <HAL_Delay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
70100c74:	bf00      	nop
70100c76:	e7e4      	b.n	70100c42 <main+0x1a>
70100c78:	7010bd14 	.word	0x7010bd14
70100c7c:	56023800 	.word	0x56023800
70100c80:	56021800 	.word	0x56021800

70100c84 <SystemIsolation_Config>:
  * @brief RIF Initialization Function
  * @param None
  * @retval None
  */
static void SystemIsolation_Config(void)
{
70100c84:	b580      	push	{r7, lr}
70100c86:	b082      	sub	sp, #8
70100c88:	af00      	add	r7, sp, #0
/* USER CODE BEGIN RIF_Init 0 */

/* USER CODE END RIF_Init 0 */

  /* set all required IPs as secure privileged */
  __HAL_RCC_RIFSC_CLK_ENABLE();
70100c8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
70100c8e:	f7ff ffa3 	bl	70100bd8 <LL_AHB3_GRP1_EnableClock>
  RIMC_MasterConfig_t RIMC_master = {0};
70100c92:	463b      	mov	r3, r7
70100c94:	2200      	movs	r2, #0
70100c96:	601a      	str	r2, [r3, #0]
70100c98:	605a      	str	r2, [r3, #4]
  RIMC_master.MasterCID = RIF_CID_1;
70100c9a:	2302      	movs	r3, #2
70100c9c:	603b      	str	r3, [r7, #0]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
70100c9e:	2303      	movs	r3, #3
70100ca0:	607b      	str	r3, [r7, #4]

  /*RIMC configuration*/
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
70100ca2:	463b      	mov	r3, r7
70100ca4:	4619      	mov	r1, r3
70100ca6:	2008      	movs	r0, #8
70100ca8:	f009 fb3a 	bl	7010a320 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_ETH1, &RIMC_master);
70100cac:	463b      	mov	r3, r7
70100cae:	4619      	mov	r1, r3
70100cb0:	2006      	movs	r0, #6
70100cb2:	f009 fb35 	bl	7010a320 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_GPU2D, &RIMC_master);
70100cb6:	463b      	mov	r3, r7
70100cb8:	4619      	mov	r1, r3
70100cba:	2007      	movs	r0, #7
70100cbc:	f009 fb30 	bl	7010a320 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1, &RIMC_master);
70100cc0:	463b      	mov	r3, r7
70100cc2:	4619      	mov	r1, r3
70100cc4:	200a      	movs	r0, #10
70100cc6:	f009 fb2b 	bl	7010a320 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2, &RIMC_master);
70100cca:	463b      	mov	r3, r7
70100ccc:	4619      	mov	r1, r3
70100cce:	200b      	movs	r0, #11
70100cd0:	f009 fb26 	bl	7010a320 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_SDMMC2, &RIMC_master);
70100cd4:	463b      	mov	r3, r7
70100cd6:	4619      	mov	r1, r3
70100cd8:	2003      	movs	r0, #3
70100cda:	f009 fb21 	bl	7010a320 <HAL_RIF_RIMC_ConfigMasterAttributes>

  /*RISUP configuration*/
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_I2C1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
70100cde:	2103      	movs	r1, #3
70100ce0:	2009      	movs	r0, #9
70100ce2:	f009 fb59 	bl	7010a398 <HAL_RIF_RISC_SetSlaveSecureAttributes>

  /* RIF-Aware IPs Config */

  /* set up GPIO configuration */
  HAL_GPIO_ConfigPinAttributes(GPIOA,GPIO_PIN_0,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100ce6:	f240 3201 	movw	r2, #769	@ 0x301
70100cea:	2101      	movs	r1, #1
70100cec:	48db      	ldr	r0, [pc, #876]	@ (7010105c <SystemIsolation_Config+0x3d8>)
70100cee:	f001 f9db 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOA,GPIO_PIN_1,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100cf2:	f240 3201 	movw	r2, #769	@ 0x301
70100cf6:	2102      	movs	r1, #2
70100cf8:	48d8      	ldr	r0, [pc, #864]	@ (7010105c <SystemIsolation_Config+0x3d8>)
70100cfa:	f001 f9d5 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOA,GPIO_PIN_2,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100cfe:	f240 3201 	movw	r2, #769	@ 0x301
70100d02:	2104      	movs	r1, #4
70100d04:	48d5      	ldr	r0, [pc, #852]	@ (7010105c <SystemIsolation_Config+0x3d8>)
70100d06:	f001 f9cf 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOA,GPIO_PIN_7,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100d0a:	f240 3201 	movw	r2, #769	@ 0x301
70100d0e:	2180      	movs	r1, #128	@ 0x80
70100d10:	48d2      	ldr	r0, [pc, #840]	@ (7010105c <SystemIsolation_Config+0x3d8>)
70100d12:	f001 f9c9 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOA,GPIO_PIN_8,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100d16:	f240 3201 	movw	r2, #769	@ 0x301
70100d1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
70100d1e:	48cf      	ldr	r0, [pc, #828]	@ (7010105c <SystemIsolation_Config+0x3d8>)
70100d20:	f001 f9c2 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOA,GPIO_PIN_11,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100d24:	f240 3201 	movw	r2, #769	@ 0x301
70100d28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
70100d2c:	48cb      	ldr	r0, [pc, #812]	@ (7010105c <SystemIsolation_Config+0x3d8>)
70100d2e:	f001 f9bb 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_0,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100d32:	f240 3201 	movw	r2, #769	@ 0x301
70100d36:	2101      	movs	r1, #1
70100d38:	48c9      	ldr	r0, [pc, #804]	@ (70101060 <SystemIsolation_Config+0x3dc>)
70100d3a:	f001 f9b5 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_2,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100d3e:	f240 3201 	movw	r2, #769	@ 0x301
70100d42:	2104      	movs	r1, #4
70100d44:	48c6      	ldr	r0, [pc, #792]	@ (70101060 <SystemIsolation_Config+0x3dc>)
70100d46:	f001 f9af 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_6,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100d4a:	f240 3201 	movw	r2, #769	@ 0x301
70100d4e:	2140      	movs	r1, #64	@ 0x40
70100d50:	48c3      	ldr	r0, [pc, #780]	@ (70101060 <SystemIsolation_Config+0x3dc>)
70100d52:	f001 f9a9 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_7,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100d56:	f240 3201 	movw	r2, #769	@ 0x301
70100d5a:	2180      	movs	r1, #128	@ 0x80
70100d5c:	48c0      	ldr	r0, [pc, #768]	@ (70101060 <SystemIsolation_Config+0x3dc>)
70100d5e:	f001 f9a3 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_11,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100d62:	f240 3201 	movw	r2, #769	@ 0x301
70100d66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
70100d6a:	48bd      	ldr	r0, [pc, #756]	@ (70101060 <SystemIsolation_Config+0x3dc>)
70100d6c:	f001 f99c 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_12,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100d70:	f240 3201 	movw	r2, #769	@ 0x301
70100d74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
70100d78:	48b9      	ldr	r0, [pc, #740]	@ (70101060 <SystemIsolation_Config+0x3dc>)
70100d7a:	f001 f995 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_13,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100d7e:	f240 3201 	movw	r2, #769	@ 0x301
70100d82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
70100d86:	48b6      	ldr	r0, [pc, #728]	@ (70101060 <SystemIsolation_Config+0x3dc>)
70100d88:	f001 f98e 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_14,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100d8c:	f240 3201 	movw	r2, #769	@ 0x301
70100d90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
70100d94:	48b2      	ldr	r0, [pc, #712]	@ (70101060 <SystemIsolation_Config+0x3dc>)
70100d96:	f001 f987 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_15,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100d9a:	f240 3201 	movw	r2, #769	@ 0x301
70100d9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
70100da2:	48af      	ldr	r0, [pc, #700]	@ (70101060 <SystemIsolation_Config+0x3dc>)
70100da4:	f001 f980 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC,GPIO_PIN_0,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100da8:	f240 3201 	movw	r2, #769	@ 0x301
70100dac:	2101      	movs	r1, #1
70100dae:	48ad      	ldr	r0, [pc, #692]	@ (70101064 <SystemIsolation_Config+0x3e0>)
70100db0:	f001 f97a 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC,GPIO_PIN_1,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100db4:	f240 3201 	movw	r2, #769	@ 0x301
70100db8:	2102      	movs	r1, #2
70100dba:	48aa      	ldr	r0, [pc, #680]	@ (70101064 <SystemIsolation_Config+0x3e0>)
70100dbc:	f001 f974 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC,GPIO_PIN_2,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100dc0:	f240 3201 	movw	r2, #769	@ 0x301
70100dc4:	2104      	movs	r1, #4
70100dc6:	48a7      	ldr	r0, [pc, #668]	@ (70101064 <SystemIsolation_Config+0x3e0>)
70100dc8:	f001 f96e 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC,GPIO_PIN_3,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100dcc:	f240 3201 	movw	r2, #769	@ 0x301
70100dd0:	2108      	movs	r1, #8
70100dd2:	48a4      	ldr	r0, [pc, #656]	@ (70101064 <SystemIsolation_Config+0x3e0>)
70100dd4:	f001 f968 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC,GPIO_PIN_4,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100dd8:	f240 3201 	movw	r2, #769	@ 0x301
70100ddc:	2110      	movs	r1, #16
70100dde:	48a1      	ldr	r0, [pc, #644]	@ (70101064 <SystemIsolation_Config+0x3e0>)
70100de0:	f001 f962 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC,GPIO_PIN_5,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100de4:	f240 3201 	movw	r2, #769	@ 0x301
70100de8:	2120      	movs	r1, #32
70100dea:	489e      	ldr	r0, [pc, #632]	@ (70101064 <SystemIsolation_Config+0x3e0>)
70100dec:	f001 f95c 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC,GPIO_PIN_13,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100df0:	f240 3201 	movw	r2, #769	@ 0x301
70100df4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
70100df8:	489a      	ldr	r0, [pc, #616]	@ (70101064 <SystemIsolation_Config+0x3e0>)
70100dfa:	f001 f955 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOD,GPIO_PIN_4,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100dfe:	f240 3201 	movw	r2, #769	@ 0x301
70100e02:	2110      	movs	r1, #16
70100e04:	4898      	ldr	r0, [pc, #608]	@ (70101068 <SystemIsolation_Config+0x3e4>)
70100e06:	f001 f94f 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOD,GPIO_PIN_8,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100e0a:	f240 3201 	movw	r2, #769	@ 0x301
70100e0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
70100e12:	4895      	ldr	r0, [pc, #596]	@ (70101068 <SystemIsolation_Config+0x3e4>)
70100e14:	f001 f948 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOD,GPIO_PIN_9,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100e18:	f240 3201 	movw	r2, #769	@ 0x301
70100e1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
70100e20:	4891      	ldr	r0, [pc, #580]	@ (70101068 <SystemIsolation_Config+0x3e4>)
70100e22:	f001 f941 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOD,GPIO_PIN_14,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100e26:	f240 3201 	movw	r2, #769	@ 0x301
70100e2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
70100e2e:	488e      	ldr	r0, [pc, #568]	@ (70101068 <SystemIsolation_Config+0x3e4>)
70100e30:	f001 f93a 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOD,GPIO_PIN_15,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100e34:	f240 3201 	movw	r2, #769	@ 0x301
70100e38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
70100e3c:	488a      	ldr	r0, [pc, #552]	@ (70101068 <SystemIsolation_Config+0x3e4>)
70100e3e:	f001 f933 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_2,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100e42:	f240 3201 	movw	r2, #769	@ 0x301
70100e46:	2104      	movs	r1, #4
70100e48:	4888      	ldr	r0, [pc, #544]	@ (7010106c <SystemIsolation_Config+0x3e8>)
70100e4a:	f001 f92d 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_3,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100e4e:	f240 3201 	movw	r2, #769	@ 0x301
70100e52:	2108      	movs	r1, #8
70100e54:	4885      	ldr	r0, [pc, #532]	@ (7010106c <SystemIsolation_Config+0x3e8>)
70100e56:	f001 f927 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_4,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100e5a:	f240 3201 	movw	r2, #769	@ 0x301
70100e5e:	2110      	movs	r1, #16
70100e60:	4882      	ldr	r0, [pc, #520]	@ (7010106c <SystemIsolation_Config+0x3e8>)
70100e62:	f001 f921 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_5,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100e66:	f240 3201 	movw	r2, #769	@ 0x301
70100e6a:	2120      	movs	r1, #32
70100e6c:	487f      	ldr	r0, [pc, #508]	@ (7010106c <SystemIsolation_Config+0x3e8>)
70100e6e:	f001 f91b 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_6,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100e72:	f240 3201 	movw	r2, #769	@ 0x301
70100e76:	2140      	movs	r1, #64	@ 0x40
70100e78:	487c      	ldr	r0, [pc, #496]	@ (7010106c <SystemIsolation_Config+0x3e8>)
70100e7a:	f001 f915 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_7,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100e7e:	f240 3201 	movw	r2, #769	@ 0x301
70100e82:	2180      	movs	r1, #128	@ 0x80
70100e84:	4879      	ldr	r0, [pc, #484]	@ (7010106c <SystemIsolation_Config+0x3e8>)
70100e86:	f001 f90f 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_8,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100e8a:	f240 3201 	movw	r2, #769	@ 0x301
70100e8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
70100e92:	4876      	ldr	r0, [pc, #472]	@ (7010106c <SystemIsolation_Config+0x3e8>)
70100e94:	f001 f908 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_11,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100e98:	f240 3201 	movw	r2, #769	@ 0x301
70100e9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
70100ea0:	4872      	ldr	r0, [pc, #456]	@ (7010106c <SystemIsolation_Config+0x3e8>)
70100ea2:	f001 f901 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG,GPIO_PIN_0,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100ea6:	f240 3201 	movw	r2, #769	@ 0x301
70100eaa:	2101      	movs	r1, #1
70100eac:	4870      	ldr	r0, [pc, #448]	@ (70101070 <SystemIsolation_Config+0x3ec>)
70100eae:	f001 f8fb 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG,GPIO_PIN_1,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100eb2:	f240 3201 	movw	r2, #769	@ 0x301
70100eb6:	2102      	movs	r1, #2
70100eb8:	486d      	ldr	r0, [pc, #436]	@ (70101070 <SystemIsolation_Config+0x3ec>)
70100eba:	f001 f8f5 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG,GPIO_PIN_6,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100ebe:	f240 3201 	movw	r2, #769	@ 0x301
70100ec2:	2140      	movs	r1, #64	@ 0x40
70100ec4:	486a      	ldr	r0, [pc, #424]	@ (70101070 <SystemIsolation_Config+0x3ec>)
70100ec6:	f001 f8ef 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG,GPIO_PIN_7,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100eca:	f240 3201 	movw	r2, #769	@ 0x301
70100ece:	2180      	movs	r1, #128	@ 0x80
70100ed0:	4867      	ldr	r0, [pc, #412]	@ (70101070 <SystemIsolation_Config+0x3ec>)
70100ed2:	f001 f8e9 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG,GPIO_PIN_8,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100ed6:	f240 3201 	movw	r2, #769	@ 0x301
70100eda:	f44f 7180 	mov.w	r1, #256	@ 0x100
70100ede:	4864      	ldr	r0, [pc, #400]	@ (70101070 <SystemIsolation_Config+0x3ec>)
70100ee0:	f001 f8e2 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG,GPIO_PIN_10,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100ee4:	f240 3201 	movw	r2, #769	@ 0x301
70100ee8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
70100eec:	4860      	ldr	r0, [pc, #384]	@ (70101070 <SystemIsolation_Config+0x3ec>)
70100eee:	f001 f8db 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG,GPIO_PIN_11,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100ef2:	f240 3201 	movw	r2, #769	@ 0x301
70100ef6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
70100efa:	485d      	ldr	r0, [pc, #372]	@ (70101070 <SystemIsolation_Config+0x3ec>)
70100efc:	f001 f8d4 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG,GPIO_PIN_12,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f00:	f240 3201 	movw	r2, #769	@ 0x301
70100f04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
70100f08:	4859      	ldr	r0, [pc, #356]	@ (70101070 <SystemIsolation_Config+0x3ec>)
70100f0a:	f001 f8cd 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG,GPIO_PIN_13,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f0e:	f240 3201 	movw	r2, #769	@ 0x301
70100f12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
70100f16:	4856      	ldr	r0, [pc, #344]	@ (70101070 <SystemIsolation_Config+0x3ec>)
70100f18:	f001 f8c6 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG,GPIO_PIN_15,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f1c:	f240 3201 	movw	r2, #769	@ 0x301
70100f20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
70100f24:	4852      	ldr	r0, [pc, #328]	@ (70101070 <SystemIsolation_Config+0x3ec>)
70100f26:	f001 f8bf 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOH,GPIO_PIN_3,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f2a:	f240 3201 	movw	r2, #769	@ 0x301
70100f2e:	2108      	movs	r1, #8
70100f30:	4850      	ldr	r0, [pc, #320]	@ (70101074 <SystemIsolation_Config+0x3f0>)
70100f32:	f001 f8b9 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOH,GPIO_PIN_4,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f36:	f240 3201 	movw	r2, #769	@ 0x301
70100f3a:	2110      	movs	r1, #16
70100f3c:	484d      	ldr	r0, [pc, #308]	@ (70101074 <SystemIsolation_Config+0x3f0>)
70100f3e:	f001 f8b3 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOH,GPIO_PIN_6,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f42:	f240 3201 	movw	r2, #769	@ 0x301
70100f46:	2140      	movs	r1, #64	@ 0x40
70100f48:	484a      	ldr	r0, [pc, #296]	@ (70101074 <SystemIsolation_Config+0x3f0>)
70100f4a:	f001 f8ad 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOH,GPIO_PIN_9,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f4e:	f240 3201 	movw	r2, #769	@ 0x301
70100f52:	f44f 7100 	mov.w	r1, #512	@ 0x200
70100f56:	4847      	ldr	r0, [pc, #284]	@ (70101074 <SystemIsolation_Config+0x3f0>)
70100f58:	f001 f8a6 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_0,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f5c:	f240 3201 	movw	r2, #769	@ 0x301
70100f60:	2101      	movs	r1, #1
70100f62:	4845      	ldr	r0, [pc, #276]	@ (70101078 <SystemIsolation_Config+0x3f4>)
70100f64:	f001 f8a0 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_1,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f68:	f240 3201 	movw	r2, #769	@ 0x301
70100f6c:	2102      	movs	r1, #2
70100f6e:	4842      	ldr	r0, [pc, #264]	@ (70101078 <SystemIsolation_Config+0x3f4>)
70100f70:	f001 f89a 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_2,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f74:	f240 3201 	movw	r2, #769	@ 0x301
70100f78:	2104      	movs	r1, #4
70100f7a:	483f      	ldr	r0, [pc, #252]	@ (70101078 <SystemIsolation_Config+0x3f4>)
70100f7c:	f001 f894 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_3,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f80:	f240 3201 	movw	r2, #769	@ 0x301
70100f84:	2108      	movs	r1, #8
70100f86:	483c      	ldr	r0, [pc, #240]	@ (70101078 <SystemIsolation_Config+0x3f4>)
70100f88:	f001 f88e 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_4,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f8c:	f240 3201 	movw	r2, #769	@ 0x301
70100f90:	2110      	movs	r1, #16
70100f92:	4839      	ldr	r0, [pc, #228]	@ (70101078 <SystemIsolation_Config+0x3f4>)
70100f94:	f001 f888 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_5,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100f98:	f240 3201 	movw	r2, #769	@ 0x301
70100f9c:	2120      	movs	r1, #32
70100f9e:	4836      	ldr	r0, [pc, #216]	@ (70101078 <SystemIsolation_Config+0x3f4>)
70100fa0:	f001 f882 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_6,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100fa4:	f240 3201 	movw	r2, #769	@ 0x301
70100fa8:	2140      	movs	r1, #64	@ 0x40
70100faa:	4833      	ldr	r0, [pc, #204]	@ (70101078 <SystemIsolation_Config+0x3f4>)
70100fac:	f001 f87c 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_8,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100fb0:	f240 3201 	movw	r2, #769	@ 0x301
70100fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
70100fb8:	482f      	ldr	r0, [pc, #188]	@ (70101078 <SystemIsolation_Config+0x3f4>)
70100fba:	f001 f875 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_9,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100fbe:	f240 3201 	movw	r2, #769	@ 0x301
70100fc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
70100fc6:	482c      	ldr	r0, [pc, #176]	@ (70101078 <SystemIsolation_Config+0x3f4>)
70100fc8:	f001 f86e 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_10,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100fcc:	f240 3201 	movw	r2, #769	@ 0x301
70100fd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
70100fd4:	4828      	ldr	r0, [pc, #160]	@ (70101078 <SystemIsolation_Config+0x3f4>)
70100fd6:	f001 f867 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_11,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100fda:	f240 3201 	movw	r2, #769	@ 0x301
70100fde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
70100fe2:	4825      	ldr	r0, [pc, #148]	@ (70101078 <SystemIsolation_Config+0x3f4>)
70100fe4:	f001 f860 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOO,GPIO_PIN_0,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100fe8:	f240 3201 	movw	r2, #769	@ 0x301
70100fec:	2101      	movs	r1, #1
70100fee:	4823      	ldr	r0, [pc, #140]	@ (7010107c <SystemIsolation_Config+0x3f8>)
70100ff0:	f001 f85a 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOO,GPIO_PIN_1,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70100ff4:	f240 3201 	movw	r2, #769	@ 0x301
70100ff8:	2102      	movs	r1, #2
70100ffa:	4820      	ldr	r0, [pc, #128]	@ (7010107c <SystemIsolation_Config+0x3f8>)
70100ffc:	f001 f854 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOO,GPIO_PIN_2,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70101000:	f240 3201 	movw	r2, #769	@ 0x301
70101004:	2104      	movs	r1, #4
70101006:	481d      	ldr	r0, [pc, #116]	@ (7010107c <SystemIsolation_Config+0x3f8>)
70101008:	f001 f84e 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOO,GPIO_PIN_3,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
7010100c:	f240 3201 	movw	r2, #769	@ 0x301
70101010:	2108      	movs	r1, #8
70101012:	481a      	ldr	r0, [pc, #104]	@ (7010107c <SystemIsolation_Config+0x3f8>)
70101014:	f001 f848 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOO,GPIO_PIN_4,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70101018:	f240 3201 	movw	r2, #769	@ 0x301
7010101c:	2110      	movs	r1, #16
7010101e:	4817      	ldr	r0, [pc, #92]	@ (7010107c <SystemIsolation_Config+0x3f8>)
70101020:	f001 f842 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_0,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70101024:	f240 3201 	movw	r2, #769	@ 0x301
70101028:	2101      	movs	r1, #1
7010102a:	4815      	ldr	r0, [pc, #84]	@ (70101080 <SystemIsolation_Config+0x3fc>)
7010102c:	f001 f83c 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_1,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70101030:	f240 3201 	movw	r2, #769	@ 0x301
70101034:	2102      	movs	r1, #2
70101036:	4812      	ldr	r0, [pc, #72]	@ (70101080 <SystemIsolation_Config+0x3fc>)
70101038:	f001 f836 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_2,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
7010103c:	f240 3201 	movw	r2, #769	@ 0x301
70101040:	2104      	movs	r1, #4
70101042:	480f      	ldr	r0, [pc, #60]	@ (70101080 <SystemIsolation_Config+0x3fc>)
70101044:	f001 f830 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_3,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70101048:	f240 3201 	movw	r2, #769	@ 0x301
7010104c:	2108      	movs	r1, #8
7010104e:	480c      	ldr	r0, [pc, #48]	@ (70101080 <SystemIsolation_Config+0x3fc>)
70101050:	f001 f82a 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_4,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70101054:	f240 3201 	movw	r2, #769	@ 0x301
70101058:	2110      	movs	r1, #16
7010105a:	e013      	b.n	70101084 <SystemIsolation_Config+0x400>
7010105c:	56020000 	.word	0x56020000
70101060:	56020400 	.word	0x56020400
70101064:	56020800 	.word	0x56020800
70101068:	56020c00 	.word	0x56020c00
7010106c:	56021000 	.word	0x56021000
70101070:	56021800 	.word	0x56021800
70101074:	56021c00 	.word	0x56021c00
70101078:	56023400 	.word	0x56023400
7010107c:	56023800 	.word	0x56023800
70101080:	56023c00 	.word	0x56023c00
70101084:	4828      	ldr	r0, [pc, #160]	@ (70101128 <SystemIsolation_Config+0x4a4>)
70101086:	f001 f80f 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_5,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
7010108a:	f240 3201 	movw	r2, #769	@ 0x301
7010108e:	2120      	movs	r1, #32
70101090:	4825      	ldr	r0, [pc, #148]	@ (70101128 <SystemIsolation_Config+0x4a4>)
70101092:	f001 f809 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_6,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70101096:	f240 3201 	movw	r2, #769	@ 0x301
7010109a:	2140      	movs	r1, #64	@ 0x40
7010109c:	4822      	ldr	r0, [pc, #136]	@ (70101128 <SystemIsolation_Config+0x4a4>)
7010109e:	f001 f803 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_7,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
701010a2:	f240 3201 	movw	r2, #769	@ 0x301
701010a6:	2180      	movs	r1, #128	@ 0x80
701010a8:	481f      	ldr	r0, [pc, #124]	@ (70101128 <SystemIsolation_Config+0x4a4>)
701010aa:	f000 fffd 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_8,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
701010ae:	f240 3201 	movw	r2, #769	@ 0x301
701010b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
701010b6:	481c      	ldr	r0, [pc, #112]	@ (70101128 <SystemIsolation_Config+0x4a4>)
701010b8:	f000 fff6 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_9,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
701010bc:	f240 3201 	movw	r2, #769	@ 0x301
701010c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
701010c4:	4818      	ldr	r0, [pc, #96]	@ (70101128 <SystemIsolation_Config+0x4a4>)
701010c6:	f000 ffef 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_10,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
701010ca:	f240 3201 	movw	r2, #769	@ 0x301
701010ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
701010d2:	4815      	ldr	r0, [pc, #84]	@ (70101128 <SystemIsolation_Config+0x4a4>)
701010d4:	f000 ffe8 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_11,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
701010d8:	f240 3201 	movw	r2, #769	@ 0x301
701010dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
701010e0:	4811      	ldr	r0, [pc, #68]	@ (70101128 <SystemIsolation_Config+0x4a4>)
701010e2:	f000 ffe1 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_12,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
701010e6:	f240 3201 	movw	r2, #769	@ 0x301
701010ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
701010ee:	480e      	ldr	r0, [pc, #56]	@ (70101128 <SystemIsolation_Config+0x4a4>)
701010f0:	f000 ffda 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_13,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
701010f4:	f240 3201 	movw	r2, #769	@ 0x301
701010f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
701010fc:	480a      	ldr	r0, [pc, #40]	@ (70101128 <SystemIsolation_Config+0x4a4>)
701010fe:	f000 ffd3 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_14,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70101102:	f240 3201 	movw	r2, #769	@ 0x301
70101106:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
7010110a:	4807      	ldr	r0, [pc, #28]	@ (70101128 <SystemIsolation_Config+0x4a4>)
7010110c:	f000 ffcc 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_15,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
70101110:	f240 3201 	movw	r2, #769	@ 0x301
70101114:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
70101118:	4803      	ldr	r0, [pc, #12]	@ (70101128 <SystemIsolation_Config+0x4a4>)
7010111a:	f000 ffc5 	bl	701020a8 <HAL_GPIO_ConfigPinAttributes>
/* USER CODE END RIF_Init 1 */
/* USER CODE BEGIN RIF_Init 2 */

/* USER CODE END RIF_Init 2 */

}
7010111e:	bf00      	nop
70101120:	3708      	adds	r7, #8
70101122:	46bd      	mov	sp, r7
70101124:	bd80      	pop	{r7, pc}
70101126:	bf00      	nop
70101128:	56023c00 	.word	0x56023c00

7010112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
7010112c:	b480      	push	{r7}
7010112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
70101130:	b672      	cpsid	i
}
70101132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
70101134:	bf00      	nop
70101136:	e7fd      	b.n	70101134 <Error_Handler+0x8>

70101138 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
70101138:	b2c0      	uxtb	r0, r0
7010113a:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
7010113e:	b480      	push	{r7}
70101140:	b082      	sub	sp, #8
70101142:	af00      	add	r7, sp, #0
70101144:	4603      	mov	r3, r0
70101146:	6039      	str	r1, [r7, #0]
70101148:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
7010114a:	683b      	ldr	r3, [r7, #0]
7010114c:	2b00      	cmp	r3, #0
7010114e:	d00d      	beq.n	7010116c <__acle_se_SECURE_RegisterCallback+0x34>
  {
    switch(CallbackId)
70101150:	79fb      	ldrb	r3, [r7, #7]
70101152:	2b00      	cmp	r3, #0
70101154:	d002      	beq.n	7010115c <__acle_se_SECURE_RegisterCallback+0x24>
70101156:	2b01      	cmp	r3, #1
70101158:	d004      	beq.n	70101164 <__acle_se_SECURE_RegisterCallback+0x2c>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
7010115a:	e007      	b.n	7010116c <__acle_se_SECURE_RegisterCallback+0x34>
        pSecureFaultCallback = func;
7010115c:	4a09      	ldr	r2, [pc, #36]	@ (70101184 <__acle_se_SECURE_RegisterCallback+0x4c>)
7010115e:	683b      	ldr	r3, [r7, #0]
70101160:	6013      	str	r3, [r2, #0]
        break;
70101162:	e003      	b.n	7010116c <__acle_se_SECURE_RegisterCallback+0x34>
        pSecureErrorCallback = func;
70101164:	4a08      	ldr	r2, [pc, #32]	@ (70101188 <__acle_se_SECURE_RegisterCallback+0x50>)
70101166:	683b      	ldr	r3, [r7, #0]
70101168:	6013      	str	r3, [r2, #0]
        break;
7010116a:	bf00      	nop
    }
  }
}
7010116c:	bf00      	nop
7010116e:	3708      	adds	r7, #8
70101170:	46bd      	mov	sp, r7
70101172:	f85d 7b04 	ldr.w	r7, [sp], #4
70101176:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
7010117a:	e89f 900f 	clrm	{r0, r1, r2, r3, ip, APSR}
7010117e:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
70101182:	4774      	bxns	lr
70101184:	34000084 	.word	0x34000084
70101188:	34000088 	.word	0x34000088

7010118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
7010118c:	b580      	push	{r7, lr}
7010118e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  HAL_PWREx_EnableVddIO2();
70101190:	f000 ffd2 	bl	70102138 <HAL_PWREx_EnableVddIO2>

  HAL_PWREx_EnableVddIO3();
70101194:	f000 ffe0 	bl	70102158 <HAL_PWREx_EnableVddIO3>

  HAL_PWREx_EnableVddIO4();
70101198:	f000 ffee 	bl	70102178 <HAL_PWREx_EnableVddIO4>

  HAL_PWREx_EnableVddIO5();
7010119c:	f000 fffc 	bl	70102198 <HAL_PWREx_EnableVddIO5>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
701011a0:	bf00      	nop
701011a2:	bd80      	pop	{r7, pc}

701011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
701011a4:	b480      	push	{r7}
701011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
701011a8:	bf00      	nop
701011aa:	e7fd      	b.n	701011a8 <NMI_Handler+0x4>

701011ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
701011ac:	b480      	push	{r7}
701011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
701011b0:	bf00      	nop
701011b2:	e7fd      	b.n	701011b0 <HardFault_Handler+0x4>

701011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
701011b4:	b480      	push	{r7}
701011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
701011b8:	bf00      	nop
701011ba:	e7fd      	b.n	701011b8 <MemManage_Handler+0x4>

701011bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
701011bc:	b480      	push	{r7}
701011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
701011c0:	bf00      	nop
701011c2:	e7fd      	b.n	701011c0 <BusFault_Handler+0x4>

701011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
701011c4:	b480      	push	{r7}
701011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
701011c8:	bf00      	nop
701011ca:	e7fd      	b.n	701011c8 <UsageFault_Handler+0x4>

701011cc <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
701011cc:	b480      	push	{r7}
701011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
701011d0:	bf00      	nop
701011d2:	e7fd      	b.n	701011d0 <SecureFault_Handler+0x4>

701011d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
701011d4:	b480      	push	{r7}
701011d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
701011d8:	bf00      	nop
701011da:	46bd      	mov	sp, r7
701011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
701011e0:	4770      	bx	lr

701011e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
701011e2:	b480      	push	{r7}
701011e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
701011e6:	bf00      	nop
701011e8:	46bd      	mov	sp, r7
701011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
701011ee:	4770      	bx	lr

701011f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
701011f0:	b480      	push	{r7}
701011f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
701011f4:	bf00      	nop
701011f6:	46bd      	mov	sp, r7
701011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
701011fc:	4770      	bx	lr

701011fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
701011fe:	b580      	push	{r7, lr}
70101200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
70101202:	f000 fc43 	bl	70101a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
70101206:	bf00      	nop
70101208:	bd80      	pop	{r7, pc}
	...

7010120c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
7010120c:	b580      	push	{r7, lr}
7010120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
70101210:	4802      	ldr	r0, [pc, #8]	@ (7010121c <TIM2_IRQHandler+0x10>)
70101212:	f009 f913 	bl	7010a43c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
70101216:	bf00      	nop
70101218:	bd80      	pop	{r7, pc}
7010121a:	bf00      	nop
7010121c:	34000090 	.word	0x34000090

70101220 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
70101220:	b580      	push	{r7, lr}
70101222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
70101224:	4802      	ldr	r0, [pc, #8]	@ (70101230 <TIM3_IRQHandler+0x10>)
70101226:	f009 f909 	bl	7010a43c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
7010122a:	bf00      	nop
7010122c:	bd80      	pop	{r7, pc}
7010122e:	bf00      	nop
70101230:	340000dc 	.word	0x340000dc

70101234 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
70101234:	b580      	push	{r7, lr}
70101236:	b086      	sub	sp, #24
70101238:	af00      	add	r7, sp, #0
7010123a:	60f8      	str	r0, [r7, #12]
7010123c:	60b9      	str	r1, [r7, #8]
7010123e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
70101240:	2300      	movs	r3, #0
70101242:	617b      	str	r3, [r7, #20]
70101244:	e00a      	b.n	7010125c <_read+0x28>
  {
    *ptr++ = __io_getchar();
70101246:	f3af 8000 	nop.w
7010124a:	4601      	mov	r1, r0
7010124c:	68bb      	ldr	r3, [r7, #8]
7010124e:	1c5a      	adds	r2, r3, #1
70101250:	60ba      	str	r2, [r7, #8]
70101252:	b2ca      	uxtb	r2, r1
70101254:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
70101256:	697b      	ldr	r3, [r7, #20]
70101258:	3301      	adds	r3, #1
7010125a:	617b      	str	r3, [r7, #20]
7010125c:	697a      	ldr	r2, [r7, #20]
7010125e:	687b      	ldr	r3, [r7, #4]
70101260:	429a      	cmp	r2, r3
70101262:	dbf0      	blt.n	70101246 <_read+0x12>
  }

  return len;
70101264:	687b      	ldr	r3, [r7, #4]
}
70101266:	4618      	mov	r0, r3
70101268:	3718      	adds	r7, #24
7010126a:	46bd      	mov	sp, r7
7010126c:	bd80      	pop	{r7, pc}

7010126e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
7010126e:	b580      	push	{r7, lr}
70101270:	b086      	sub	sp, #24
70101272:	af00      	add	r7, sp, #0
70101274:	60f8      	str	r0, [r7, #12]
70101276:	60b9      	str	r1, [r7, #8]
70101278:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
7010127a:	2300      	movs	r3, #0
7010127c:	617b      	str	r3, [r7, #20]
7010127e:	e009      	b.n	70101294 <_write+0x26>
  {
    __io_putchar(*ptr++);
70101280:	68bb      	ldr	r3, [r7, #8]
70101282:	1c5a      	adds	r2, r3, #1
70101284:	60ba      	str	r2, [r7, #8]
70101286:	781b      	ldrb	r3, [r3, #0]
70101288:	4618      	mov	r0, r3
7010128a:	f7ff fcbb 	bl	70100c04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
7010128e:	697b      	ldr	r3, [r7, #20]
70101290:	3301      	adds	r3, #1
70101292:	617b      	str	r3, [r7, #20]
70101294:	697a      	ldr	r2, [r7, #20]
70101296:	687b      	ldr	r3, [r7, #4]
70101298:	429a      	cmp	r2, r3
7010129a:	dbf1      	blt.n	70101280 <_write+0x12>
  }
  return len;
7010129c:	687b      	ldr	r3, [r7, #4]
}
7010129e:	4618      	mov	r0, r3
701012a0:	3718      	adds	r7, #24
701012a2:	46bd      	mov	sp, r7
701012a4:	bd80      	pop	{r7, pc}

701012a6 <_close>:

int _close(int file)
{
701012a6:	b480      	push	{r7}
701012a8:	b083      	sub	sp, #12
701012aa:	af00      	add	r7, sp, #0
701012ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
701012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
701012b2:	4618      	mov	r0, r3
701012b4:	370c      	adds	r7, #12
701012b6:	46bd      	mov	sp, r7
701012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
701012bc:	4770      	bx	lr

701012be <_fstat>:


int _fstat(int file, struct stat *st)
{
701012be:	b480      	push	{r7}
701012c0:	b083      	sub	sp, #12
701012c2:	af00      	add	r7, sp, #0
701012c4:	6078      	str	r0, [r7, #4]
701012c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
701012c8:	683b      	ldr	r3, [r7, #0]
701012ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
701012ce:	605a      	str	r2, [r3, #4]
  return 0;
701012d0:	2300      	movs	r3, #0
}
701012d2:	4618      	mov	r0, r3
701012d4:	370c      	adds	r7, #12
701012d6:	46bd      	mov	sp, r7
701012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
701012dc:	4770      	bx	lr

701012de <_isatty>:

int _isatty(int file)
{
701012de:	b480      	push	{r7}
701012e0:	b083      	sub	sp, #12
701012e2:	af00      	add	r7, sp, #0
701012e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
701012e6:	2301      	movs	r3, #1
}
701012e8:	4618      	mov	r0, r3
701012ea:	370c      	adds	r7, #12
701012ec:	46bd      	mov	sp, r7
701012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
701012f2:	4770      	bx	lr

701012f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
701012f4:	b480      	push	{r7}
701012f6:	b085      	sub	sp, #20
701012f8:	af00      	add	r7, sp, #0
701012fa:	60f8      	str	r0, [r7, #12]
701012fc:	60b9      	str	r1, [r7, #8]
701012fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
70101300:	2300      	movs	r3, #0
}
70101302:	4618      	mov	r0, r3
70101304:	3714      	adds	r7, #20
70101306:	46bd      	mov	sp, r7
70101308:	f85d 7b04 	ldr.w	r7, [sp], #4
7010130c:	4770      	bx	lr
	...

70101310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
70101310:	b580      	push	{r7, lr}
70101312:	b086      	sub	sp, #24
70101314:	af00      	add	r7, sp, #0
70101316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
70101318:	4a14      	ldr	r2, [pc, #80]	@ (7010136c <_sbrk+0x5c>)
7010131a:	4b15      	ldr	r3, [pc, #84]	@ (70101370 <_sbrk+0x60>)
7010131c:	1ad3      	subs	r3, r2, r3
7010131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
70101320:	697b      	ldr	r3, [r7, #20]
70101322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
70101324:	4b13      	ldr	r3, [pc, #76]	@ (70101374 <_sbrk+0x64>)
70101326:	681b      	ldr	r3, [r3, #0]
70101328:	2b00      	cmp	r3, #0
7010132a:	d102      	bne.n	70101332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
7010132c:	4b11      	ldr	r3, [pc, #68]	@ (70101374 <_sbrk+0x64>)
7010132e:	4a12      	ldr	r2, [pc, #72]	@ (70101378 <_sbrk+0x68>)
70101330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
70101332:	4b10      	ldr	r3, [pc, #64]	@ (70101374 <_sbrk+0x64>)
70101334:	681a      	ldr	r2, [r3, #0]
70101336:	687b      	ldr	r3, [r7, #4]
70101338:	4413      	add	r3, r2
7010133a:	693a      	ldr	r2, [r7, #16]
7010133c:	429a      	cmp	r2, r3
7010133e:	d207      	bcs.n	70101350 <_sbrk+0x40>
  {
    errno = ENOMEM;
70101340:	f00a fa76 	bl	7010b830 <__errno>
70101344:	4603      	mov	r3, r0
70101346:	220c      	movs	r2, #12
70101348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
7010134a:	f04f 33ff 	mov.w	r3, #4294967295
7010134e:	e009      	b.n	70101364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
70101350:	4b08      	ldr	r3, [pc, #32]	@ (70101374 <_sbrk+0x64>)
70101352:	681b      	ldr	r3, [r3, #0]
70101354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
70101356:	4b07      	ldr	r3, [pc, #28]	@ (70101374 <_sbrk+0x64>)
70101358:	681a      	ldr	r2, [r3, #0]
7010135a:	687b      	ldr	r3, [r7, #4]
7010135c:	4413      	add	r3, r2
7010135e:	4a05      	ldr	r2, [pc, #20]	@ (70101374 <_sbrk+0x64>)
70101360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
70101362:	68fb      	ldr	r3, [r7, #12]
}
70101364:	4618      	mov	r0, r3
70101366:	3718      	adds	r7, #24
70101368:	46bd      	mov	sp, r7
7010136a:	bd80      	pop	{r7, pc}
7010136c:	34200000 	.word	0x34200000
70101370:	00001000 	.word	0x00001000
70101374:	3400008c 	.word	0x3400008c
70101378:	34000310 	.word	0x34000310

7010137c <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
7010137c:	b480      	push	{r7}
7010137e:	af00      	add	r7, sp, #0
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
70101380:	4b18      	ldr	r3, [pc, #96]	@ (701013e4 <TZ_SAU_Setup+0x68>)
70101382:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
70101386:	4a17      	ldr	r2, [pc, #92]	@ (701013e4 <TZ_SAU_Setup+0x68>)
70101388:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
7010138c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
70101390:	4b15      	ldr	r3, [pc, #84]	@ (701013e8 <TZ_SAU_Setup+0x6c>)
70101392:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
70101394:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
70101398:	4a13      	ldr	r2, [pc, #76]	@ (701013e8 <TZ_SAU_Setup+0x6c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
7010139a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
7010139e:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
701013a0:	4b12      	ldr	r3, [pc, #72]	@ (701013ec <TZ_SAU_Setup+0x70>)
701013a2:	2200      	movs	r2, #0
701013a4:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
701013a8:	4b10      	ldr	r3, [pc, #64]	@ (701013ec <TZ_SAU_Setup+0x70>)
701013aa:	2200      	movs	r2, #0
701013ac:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
701013b0:	4b0e      	ldr	r3, [pc, #56]	@ (701013ec <TZ_SAU_Setup+0x70>)
701013b2:	2200      	movs	r2, #0
701013b4:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
701013b8:	4b0c      	ldr	r3, [pc, #48]	@ (701013ec <TZ_SAU_Setup+0x70>)
701013ba:	2200      	movs	r2, #0
701013bc:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
  #endif

  #if defined (NVIC_INIT_ITNS4) && (NVIC_INIT_ITNS4 == 1U)
    NVIC->ITNS[4] = NVIC_INIT_ITNS4_VAL;
701013c0:	4b0a      	ldr	r3, [pc, #40]	@ (701013ec <TZ_SAU_Setup+0x70>)
701013c2:	2200      	movs	r2, #0
701013c4:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
  #endif

  #if defined (NVIC_INIT_ITNS5) && (NVIC_INIT_ITNS5 == 1U)
    NVIC->ITNS[5] = NVIC_INIT_ITNS5_VAL;
701013c8:	4b08      	ldr	r3, [pc, #32]	@ (701013ec <TZ_SAU_Setup+0x70>)
701013ca:	2200      	movs	r2, #0
701013cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  #endif

  #if defined (NVIC_INIT_ITNS6) && (NVIC_INIT_ITNS6 == 1U)
    NVIC->ITNS[6] = NVIC_INIT_ITNS6_VAL;
701013d0:	4b06      	ldr	r3, [pc, #24]	@ (701013ec <TZ_SAU_Setup+0x70>)
701013d2:	2200      	movs	r2, #0
701013d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
  #endif

}
701013d8:	bf00      	nop
701013da:	46bd      	mov	sp, r7
701013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
701013e0:	4770      	bx	lr
701013e2:	bf00      	nop
701013e4:	e000ed00 	.word	0xe000ed00
701013e8:	e000ef30 	.word	0xe000ef30
701013ec:	e000e100 	.word	0xe000e100

701013f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
701013f0:	b580      	push	{r7, lr}
701013f2:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
701013f4:	f7ff ffc2 	bl	7010137c <TZ_SAU_Setup>

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
701013f8:	4b14      	ldr	r3, [pc, #80]	@ (7010144c <SystemInit+0x5c>)
701013fa:	4a15      	ldr	r2, [pc, #84]	@ (70101450 <SystemInit+0x60>)
701013fc:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
701013fe:	4b15      	ldr	r3, [pc, #84]	@ (70101454 <SystemInit+0x64>)
70101400:	2201      	movs	r2, #1
70101402:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
70101406:	4b13      	ldr	r3, [pc, #76]	@ (70101454 <SystemInit+0x64>)
70101408:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
7010140c:	4b0f      	ldr	r3, [pc, #60]	@ (7010144c <SystemInit+0x5c>)
7010140e:	4a12      	ldr	r2, [pc, #72]	@ (70101458 <SystemInit+0x68>)
70101410:	689b      	ldr	r3, [r3, #8]
70101412:	6113      	str	r3, [r2, #16]
  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
70101414:	4b10      	ldr	r3, [pc, #64]	@ (70101458 <SystemInit+0x68>)
70101416:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
70101418:	4b0e      	ldr	r3, [pc, #56]	@ (70101454 <SystemInit+0x64>)
7010141a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7010141e:	461a      	mov	r2, r3
70101420:	2301      	movs	r3, #1
70101422:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
70101426:	4b09      	ldr	r3, [pc, #36]	@ (7010144c <SystemInit+0x5c>)
70101428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
7010142c:	4a07      	ldr	r2, [pc, #28]	@ (7010144c <SystemInit+0x5c>)
7010142e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
70101432:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
70101436:	4b09      	ldr	r3, [pc, #36]	@ (7010145c <SystemInit+0x6c>)
70101438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
7010143c:	4a07      	ldr	r2, [pc, #28]	@ (7010145c <SystemInit+0x6c>)
7010143e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
70101442:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
70101446:	bf00      	nop
70101448:	bd80      	pop	{r7, pc}
7010144a:	bf00      	nop
7010144c:	e000ed00 	.word	0xe000ed00
70101450:	70100400 	.word	0x70100400
70101454:	56028000 	.word	0x56028000
70101458:	56008000 	.word	0x56008000
7010145c:	e002ed00 	.word	0xe002ed00

70101460 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
70101460:	b480      	push	{r7}
70101462:	b08d      	sub	sp, #52	@ 0x34
70101464:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
70101466:	2300      	movs	r3, #0
70101468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
7010146a:	2300      	movs	r3, #0
7010146c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
7010146e:	2300      	movs	r3, #0
70101470:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
70101472:	2300      	movs	r3, #0
70101474:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
70101476:	2300      	movs	r3, #0
70101478:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
7010147a:	2300      	movs	r3, #0
7010147c:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
7010147e:	4b9b      	ldr	r3, [pc, #620]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
70101480:	6a1b      	ldr	r3, [r3, #32]
70101482:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
70101486:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
7010148a:	d029      	beq.n	701014e0 <SystemCoreClockUpdate+0x80>
7010148c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
70101490:	f200 8180 	bhi.w	70101794 <SystemCoreClockUpdate+0x334>
70101494:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
70101498:	d01f      	beq.n	701014da <SystemCoreClockUpdate+0x7a>
7010149a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
7010149e:	f200 8179 	bhi.w	70101794 <SystemCoreClockUpdate+0x334>
701014a2:	2b00      	cmp	r3, #0
701014a4:	d003      	beq.n	701014ae <SystemCoreClockUpdate+0x4e>
701014a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
701014aa:	d00a      	beq.n	701014c2 <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
701014ac:	e172      	b.n	70101794 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
701014ae:	4b8f      	ldr	r3, [pc, #572]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
701014b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
701014b2:	09db      	lsrs	r3, r3, #7
701014b4:	f003 0303 	and.w	r3, r3, #3
701014b8:	4a8d      	ldr	r2, [pc, #564]	@ (701016f0 <SystemCoreClockUpdate+0x290>)
701014ba:	fa22 f303 	lsr.w	r3, r2, r3
701014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
701014c0:	e169      	b.n	70101796 <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
701014c2:	4b8a      	ldr	r3, [pc, #552]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
701014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
701014c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
701014ca:	2b00      	cmp	r3, #0
701014cc:	d102      	bne.n	701014d4 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
701014ce:	4b89      	ldr	r3, [pc, #548]	@ (701016f4 <SystemCoreClockUpdate+0x294>)
701014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
701014d2:	e160      	b.n	70101796 <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
701014d4:	4b88      	ldr	r3, [pc, #544]	@ (701016f8 <SystemCoreClockUpdate+0x298>)
701014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
701014d8:	e15d      	b.n	70101796 <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
701014da:	4b88      	ldr	r3, [pc, #544]	@ (701016fc <SystemCoreClockUpdate+0x29c>)
701014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
701014de:	e15a      	b.n	70101796 <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
701014e0:	4b82      	ldr	r3, [pc, #520]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
701014e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
701014e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
701014ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701014ee:	d066      	beq.n	701015be <SystemCoreClockUpdate+0x15e>
701014f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701014f4:	f200 8091 	bhi.w	7010161a <SystemCoreClockUpdate+0x1ba>
701014f8:	2b00      	cmp	r3, #0
701014fa:	d003      	beq.n	70101504 <SystemCoreClockUpdate+0xa4>
701014fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70101500:	d02f      	beq.n	70101562 <SystemCoreClockUpdate+0x102>
70101502:	e08a      	b.n	7010161a <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
70101504:	4b79      	ldr	r3, [pc, #484]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
70101506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
7010150a:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
7010150c:	68fb      	ldr	r3, [r7, #12]
7010150e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
70101512:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
70101514:	68fb      	ldr	r3, [r7, #12]
70101516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
7010151a:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
7010151c:	693b      	ldr	r3, [r7, #16]
7010151e:	2b00      	cmp	r3, #0
70101520:	f040 80a9 	bne.w	70101676 <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
70101524:	68fb      	ldr	r3, [r7, #12]
70101526:	0d1b      	lsrs	r3, r3, #20
70101528:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
7010152c:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
7010152e:	68fb      	ldr	r3, [r7, #12]
70101530:	0a1b      	lsrs	r3, r3, #8
70101532:	f3c3 030b 	ubfx	r3, r3, #0, #12
70101536:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
70101538:	4b6c      	ldr	r3, [pc, #432]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
7010153a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7010153e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
70101542:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
70101544:	4b69      	ldr	r3, [pc, #420]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
70101546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
7010154a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
7010154c:	68fb      	ldr	r3, [r7, #12]
7010154e:	0edb      	lsrs	r3, r3, #27
70101550:	f003 0307 	and.w	r3, r3, #7
70101554:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
70101556:	68fb      	ldr	r3, [r7, #12]
70101558:	0e1b      	lsrs	r3, r3, #24
7010155a:	f003 0307 	and.w	r3, r3, #7
7010155e:	61bb      	str	r3, [r7, #24]
      break;
70101560:	e089      	b.n	70101676 <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
70101562:	4b62      	ldr	r3, [pc, #392]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
70101564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
70101568:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
7010156a:	68fb      	ldr	r3, [r7, #12]
7010156c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
70101570:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
70101572:	68fb      	ldr	r3, [r7, #12]
70101574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
70101578:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
7010157a:	693b      	ldr	r3, [r7, #16]
7010157c:	2b00      	cmp	r3, #0
7010157e:	d17c      	bne.n	7010167a <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
70101580:	68fb      	ldr	r3, [r7, #12]
70101582:	0d1b      	lsrs	r3, r3, #20
70101584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
70101588:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
7010158a:	68fb      	ldr	r3, [r7, #12]
7010158c:	0a1b      	lsrs	r3, r3, #8
7010158e:	f3c3 030b 	ubfx	r3, r3, #0, #12
70101592:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
70101594:	4b55      	ldr	r3, [pc, #340]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
70101596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
7010159a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
7010159e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
701015a0:	4b52      	ldr	r3, [pc, #328]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
701015a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
701015a6:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
701015a8:	68fb      	ldr	r3, [r7, #12]
701015aa:	0edb      	lsrs	r3, r3, #27
701015ac:	f003 0307 	and.w	r3, r3, #7
701015b0:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
701015b2:	68fb      	ldr	r3, [r7, #12]
701015b4:	0e1b      	lsrs	r3, r3, #24
701015b6:	f003 0307 	and.w	r3, r3, #7
701015ba:	61bb      	str	r3, [r7, #24]
      break;
701015bc:	e05d      	b.n	7010167a <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
701015be:	4b4b      	ldr	r3, [pc, #300]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
701015c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
701015c4:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
701015c6:	68fb      	ldr	r3, [r7, #12]
701015c8:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
701015cc:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
701015ce:	68fb      	ldr	r3, [r7, #12]
701015d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
701015d4:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
701015d6:	693b      	ldr	r3, [r7, #16]
701015d8:	2b00      	cmp	r3, #0
701015da:	d150      	bne.n	7010167e <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
701015dc:	68fb      	ldr	r3, [r7, #12]
701015de:	0d1b      	lsrs	r3, r3, #20
701015e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
701015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
701015e6:	68fb      	ldr	r3, [r7, #12]
701015e8:	0a1b      	lsrs	r3, r3, #8
701015ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
701015ee:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
701015f0:	4b3e      	ldr	r3, [pc, #248]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
701015f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
701015f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
701015fa:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
701015fc:	4b3b      	ldr	r3, [pc, #236]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
701015fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
70101602:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
70101604:	68fb      	ldr	r3, [r7, #12]
70101606:	0edb      	lsrs	r3, r3, #27
70101608:	f003 0307 	and.w	r3, r3, #7
7010160c:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
7010160e:	68fb      	ldr	r3, [r7, #12]
70101610:	0e1b      	lsrs	r3, r3, #24
70101612:	f003 0307 	and.w	r3, r3, #7
70101616:	61bb      	str	r3, [r7, #24]
      break;
70101618:	e031      	b.n	7010167e <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
7010161a:	4b34      	ldr	r3, [pc, #208]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
7010161c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
70101620:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
70101622:	68fb      	ldr	r3, [r7, #12]
70101624:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
70101628:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
7010162a:	68fb      	ldr	r3, [r7, #12]
7010162c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
70101630:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
70101632:	693b      	ldr	r3, [r7, #16]
70101634:	2b00      	cmp	r3, #0
70101636:	d124      	bne.n	70101682 <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
70101638:	68fb      	ldr	r3, [r7, #12]
7010163a:	0d1b      	lsrs	r3, r3, #20
7010163c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
70101640:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
70101642:	68fb      	ldr	r3, [r7, #12]
70101644:	0a1b      	lsrs	r3, r3, #8
70101646:	f3c3 030b 	ubfx	r3, r3, #0, #12
7010164a:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
7010164c:	4b27      	ldr	r3, [pc, #156]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
7010164e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
70101652:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
70101656:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
70101658:	4b24      	ldr	r3, [pc, #144]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
7010165a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
7010165e:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
70101660:	68fb      	ldr	r3, [r7, #12]
70101662:	0edb      	lsrs	r3, r3, #27
70101664:	f003 0307 	and.w	r3, r3, #7
70101668:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
7010166a:	68fb      	ldr	r3, [r7, #12]
7010166c:	0e1b      	lsrs	r3, r3, #24
7010166e:	f003 0307 	and.w	r3, r3, #7
70101672:	61bb      	str	r3, [r7, #24]
      break;
70101674:	e005      	b.n	70101682 <SystemCoreClockUpdate+0x222>
      break;
70101676:	bf00      	nop
70101678:	e004      	b.n	70101684 <SystemCoreClockUpdate+0x224>
      break;
7010167a:	bf00      	nop
7010167c:	e002      	b.n	70101684 <SystemCoreClockUpdate+0x224>
      break;
7010167e:	bf00      	nop
70101680:	e000      	b.n	70101684 <SystemCoreClockUpdate+0x224>
      break;
70101682:	bf00      	nop
    switch (pllsource)
70101684:	697b      	ldr	r3, [r7, #20]
70101686:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010168a:	d02c      	beq.n	701016e6 <SystemCoreClockUpdate+0x286>
7010168c:	697b      	ldr	r3, [r7, #20]
7010168e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70101692:	d839      	bhi.n	70101708 <SystemCoreClockUpdate+0x2a8>
70101694:	697b      	ldr	r3, [r7, #20]
70101696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010169a:	d021      	beq.n	701016e0 <SystemCoreClockUpdate+0x280>
7010169c:	697b      	ldr	r3, [r7, #20]
7010169e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701016a2:	d831      	bhi.n	70101708 <SystemCoreClockUpdate+0x2a8>
701016a4:	697b      	ldr	r3, [r7, #20]
701016a6:	2b00      	cmp	r3, #0
701016a8:	d004      	beq.n	701016b4 <SystemCoreClockUpdate+0x254>
701016aa:	697b      	ldr	r3, [r7, #20]
701016ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
701016b0:	d00a      	beq.n	701016c8 <SystemCoreClockUpdate+0x268>
      break;
701016b2:	e029      	b.n	70101708 <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
701016b4:	4b0d      	ldr	r3, [pc, #52]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
701016b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
701016b8:	09db      	lsrs	r3, r3, #7
701016ba:	f003 0303 	and.w	r3, r3, #3
701016be:	4a0c      	ldr	r2, [pc, #48]	@ (701016f0 <SystemCoreClockUpdate+0x290>)
701016c0:	fa22 f303 	lsr.w	r3, r2, r3
701016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
701016c6:	e020      	b.n	7010170a <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
701016c8:	4b08      	ldr	r3, [pc, #32]	@ (701016ec <SystemCoreClockUpdate+0x28c>)
701016ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
701016cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
701016d0:	2b00      	cmp	r3, #0
701016d2:	d102      	bne.n	701016da <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
701016d4:	4b07      	ldr	r3, [pc, #28]	@ (701016f4 <SystemCoreClockUpdate+0x294>)
701016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
701016d8:	e017      	b.n	7010170a <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
701016da:	4b07      	ldr	r3, [pc, #28]	@ (701016f8 <SystemCoreClockUpdate+0x298>)
701016dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
701016de:	e014      	b.n	7010170a <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
701016e0:	4b06      	ldr	r3, [pc, #24]	@ (701016fc <SystemCoreClockUpdate+0x29c>)
701016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
701016e4:	e011      	b.n	7010170a <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
701016e6:	4b06      	ldr	r3, [pc, #24]	@ (70101700 <SystemCoreClockUpdate+0x2a0>)
701016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
701016ea:	e00e      	b.n	7010170a <SystemCoreClockUpdate+0x2aa>
701016ec:	56028000 	.word	0x56028000
701016f0:	03d09000 	.word	0x03d09000
701016f4:	003d0900 	.word	0x003d0900
701016f8:	00f42400 	.word	0x00f42400
701016fc:	016e3600 	.word	0x016e3600
70101700:	00bb8000 	.word	0x00bb8000
70101704:	4b800000 	.word	0x4b800000
      break;
70101708:	bf00      	nop
    if (pllbypass == 0U)
7010170a:	693b      	ldr	r3, [r7, #16]
7010170c:	2b00      	cmp	r3, #0
7010170e:	d134      	bne.n	7010177a <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
70101710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70101712:	ee07 3a90 	vmov	s15, r3
70101716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
7010171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7010171c:	ee07 3a90 	vmov	s15, r3
70101720:	eef8 6a67 	vcvt.f32.u32	s13, s15
70101724:	6a3b      	ldr	r3, [r7, #32]
70101726:	ee07 3a90 	vmov	s15, r3
7010172a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
7010172e:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 70101704 <SystemCoreClockUpdate+0x2a4>
70101732:	eec6 7a25 	vdiv.f32	s15, s12, s11
70101736:	ee76 7aa7 	vadd.f32	s15, s13, s15
7010173a:	ee67 6a27 	vmul.f32	s13, s14, s15
7010173e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70101740:	ee07 3a90 	vmov	s15, r3
70101744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
70101748:	eec6 7a87 	vdiv.f32	s15, s13, s14
7010174c:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
70101750:	69fb      	ldr	r3, [r7, #28]
70101752:	ee07 3a90 	vmov	s15, r3
70101756:	eeb8 7a67 	vcvt.f32.u32	s14, s15
7010175a:	69bb      	ldr	r3, [r7, #24]
7010175c:	ee07 3a90 	vmov	s15, r3
70101760:	eef8 7a67 	vcvt.f32.u32	s15, s15
70101764:	ee27 7a27 	vmul.f32	s14, s14, s15
70101768:	edd7 6a02 	vldr	s13, [r7, #8]
7010176c:	eec6 7a87 	vdiv.f32	s15, s13, s14
70101770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
70101774:	ee17 3a90 	vmov	r3, s15
70101778:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
7010177a:	4b0b      	ldr	r3, [pc, #44]	@ (701017a8 <SystemCoreClockUpdate+0x348>)
7010177c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
70101780:	0c1b      	lsrs	r3, r3, #16
70101782:	b2db      	uxtb	r3, r3
70101784:	3301      	adds	r3, #1
70101786:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
70101788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7010178a:	687b      	ldr	r3, [r7, #4]
7010178c:	fbb2 f3f3 	udiv	r3, r2, r3
70101790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
70101792:	e000      	b.n	70101796 <SystemCoreClockUpdate+0x336>
    break;
70101794:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
70101796:	4a05      	ldr	r2, [pc, #20]	@ (701017ac <SystemCoreClockUpdate+0x34c>)
70101798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7010179a:	6013      	str	r3, [r2, #0]
}
7010179c:	bf00      	nop
7010179e:	3734      	adds	r7, #52	@ 0x34
701017a0:	46bd      	mov	sp, r7
701017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
701017a6:	4770      	bx	lr
701017a8:	56028000 	.word	0x56028000
701017ac:	34000000 	.word	0x34000000

701017b0 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
701017b0:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
701017b4:	b588      	push	{r3, r7, lr}
701017b6:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
701017b8:	f7ff fe52 	bl	70101460 <SystemCoreClockUpdate>

  return SystemCoreClock;
701017bc:	4b06      	ldr	r3, [pc, #24]	@ (701017d8 <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
701017be:	681b      	ldr	r3, [r3, #0]
}
701017c0:	4618      	mov	r0, r3
701017c2:	46bd      	mov	sp, r7
701017c4:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
701017c8:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
701017cc:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
701017d0:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
701017d4:	4774      	bxns	lr
701017d6:	bf00      	nop
701017d8:	34000000 	.word	0x34000000

701017dc <LL_AHB4_GRP1_EnableClock>:
{
701017dc:	b480      	push	{r7}
701017de:	b085      	sub	sp, #20
701017e0:	af00      	add	r7, sp, #0
701017e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
701017e4:	4a07      	ldr	r2, [pc, #28]	@ (70101804 <LL_AHB4_GRP1_EnableClock+0x28>)
701017e6:	687b      	ldr	r3, [r7, #4]
701017e8:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
701017ec:	4b05      	ldr	r3, [pc, #20]	@ (70101804 <LL_AHB4_GRP1_EnableClock+0x28>)
701017ee:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
701017f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
701017f4:	68fb      	ldr	r3, [r7, #12]
}
701017f6:	bf00      	nop
701017f8:	3714      	adds	r7, #20
701017fa:	46bd      	mov	sp, r7
701017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
70101800:	4770      	bx	lr
70101802:	bf00      	nop
70101804:	56028000 	.word	0x56028000

70101808 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_UART9
  *         @arg @ref LL_APB2_GRP1_PERIPH_USART10
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
70101808:	b480      	push	{r7}
7010180a:	b085      	sub	sp, #20
7010180c:	af00      	add	r7, sp, #0
7010180e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
70101810:	4a07      	ldr	r2, [pc, #28]	@ (70101830 <LL_APB2_GRP1_EnableClock+0x28>)
70101812:	687b      	ldr	r3, [r7, #4]
70101814:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
70101818:	4b05      	ldr	r3, [pc, #20]	@ (70101830 <LL_APB2_GRP1_EnableClock+0x28>)
7010181a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
7010181e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
70101820:	68fb      	ldr	r3, [r7, #12]
}
70101822:	bf00      	nop
70101824:	3714      	adds	r7, #20
70101826:	46bd      	mov	sp, r7
70101828:	f85d 7b04 	ldr.w	r7, [sp], #4
7010182c:	4770      	bx	lr
7010182e:	bf00      	nop
70101830:	56028000 	.word	0x56028000

70101834 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
70101834:	b580      	push	{r7, lr}
70101836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
70101838:	4b22      	ldr	r3, [pc, #136]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
7010183a:	4a23      	ldr	r2, [pc, #140]	@ (701018c8 <MX_USART1_UART_Init+0x94>)
7010183c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
7010183e:	4b21      	ldr	r3, [pc, #132]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
70101840:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
70101844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
70101846:	4b1f      	ldr	r3, [pc, #124]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
70101848:	2200      	movs	r2, #0
7010184a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
7010184c:	4b1d      	ldr	r3, [pc, #116]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
7010184e:	2200      	movs	r2, #0
70101850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
70101852:	4b1c      	ldr	r3, [pc, #112]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
70101854:	2200      	movs	r2, #0
70101856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
70101858:	4b1a      	ldr	r3, [pc, #104]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
7010185a:	220c      	movs	r2, #12
7010185c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
7010185e:	4b19      	ldr	r3, [pc, #100]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
70101860:	2200      	movs	r2, #0
70101862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
70101864:	4b17      	ldr	r3, [pc, #92]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
70101866:	2200      	movs	r2, #0
70101868:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
7010186a:	4b16      	ldr	r3, [pc, #88]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
7010186c:	2200      	movs	r2, #0
7010186e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
70101870:	4b14      	ldr	r3, [pc, #80]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
70101872:	2200      	movs	r2, #0
70101874:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
70101876:	4b13      	ldr	r3, [pc, #76]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
70101878:	2200      	movs	r2, #0
7010187a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
7010187c:	4811      	ldr	r0, [pc, #68]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
7010187e:	f008 ffa4 	bl	7010a7ca <HAL_UART_Init>
70101882:	4603      	mov	r3, r0
70101884:	2b00      	cmp	r3, #0
70101886:	d001      	beq.n	7010188c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
70101888:	f7ff fc50 	bl	7010112c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
7010188c:	2100      	movs	r1, #0
7010188e:	480d      	ldr	r0, [pc, #52]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
70101890:	f009 fcbe 	bl	7010b210 <HAL_UARTEx_SetTxFifoThreshold>
70101894:	4603      	mov	r3, r0
70101896:	2b00      	cmp	r3, #0
70101898:	d001      	beq.n	7010189e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
7010189a:	f7ff fc47 	bl	7010112c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
7010189e:	2100      	movs	r1, #0
701018a0:	4808      	ldr	r0, [pc, #32]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
701018a2:	f009 fcf3 	bl	7010b28c <HAL_UARTEx_SetRxFifoThreshold>
701018a6:	4603      	mov	r3, r0
701018a8:	2b00      	cmp	r3, #0
701018aa:	d001      	beq.n	701018b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
701018ac:	f7ff fc3e 	bl	7010112c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
701018b0:	4804      	ldr	r0, [pc, #16]	@ (701018c4 <MX_USART1_UART_Init+0x90>)
701018b2:	f009 fc74 	bl	7010b19e <HAL_UARTEx_DisableFifoMode>
701018b6:	4603      	mov	r3, r0
701018b8:	2b00      	cmp	r3, #0
701018ba:	d001      	beq.n	701018c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
701018bc:	f7ff fc36 	bl	7010112c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
701018c0:	bf00      	nop
701018c2:	bd80      	pop	{r7, pc}
701018c4:	34000128 	.word	0x34000128
701018c8:	52001000 	.word	0x52001000

701018cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
701018cc:	b580      	push	{r7, lr}
701018ce:	b0ec      	sub	sp, #432	@ 0x1b0
701018d0:	af00      	add	r7, sp, #0
701018d2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
701018d6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
701018da:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
701018dc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
701018e0:	2200      	movs	r2, #0
701018e2:	601a      	str	r2, [r3, #0]
701018e4:	605a      	str	r2, [r3, #4]
701018e6:	609a      	str	r2, [r3, #8]
701018e8:	60da      	str	r2, [r3, #12]
701018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
701018ec:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
701018f0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
701018f4:	4618      	mov	r0, r3
701018f6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
701018fa:	461a      	mov	r2, r3
701018fc:	2100      	movs	r1, #0
701018fe:	f009 ff49 	bl	7010b794 <memset>
  if(uartHandle->Instance==USART1)
70101902:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
70101906:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
7010190a:	681b      	ldr	r3, [r3, #0]
7010190c:	681b      	ldr	r3, [r3, #0]
7010190e:	4a1f      	ldr	r2, [pc, #124]	@ (7010198c <HAL_UART_MspInit+0xc0>)
70101910:	4293      	cmp	r3, r2
70101912:	d135      	bne.n	70101980 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
70101914:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
70101918:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
7010191c:	f04f 0200 	mov.w	r2, #0
70101920:	f44f 7380 	mov.w	r3, #256	@ 0x100
70101924:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_CLKP;
70101928:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
7010192c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
70101930:	4a17      	ldr	r2, [pc, #92]	@ (70101990 <HAL_UART_MspInit+0xc4>)
70101932:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
70101936:	f107 0308 	add.w	r3, r7, #8
7010193a:	4618      	mov	r0, r3
7010193c:	f002 f844 	bl	701039c8 <HAL_RCCEx_PeriphCLKConfig>
70101940:	4603      	mov	r3, r0
70101942:	2b00      	cmp	r3, #0
70101944:	d001      	beq.n	7010194a <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
70101946:	f7ff fbf1 	bl	7010112c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
7010194a:	2010      	movs	r0, #16
7010194c:	f7ff ff5c 	bl	70101808 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOE_CLK_ENABLE();
70101950:	2010      	movs	r0, #16
70101952:	f7ff ff43 	bl	701017dc <LL_AHB4_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PE5     ------> USART1_TX
    PE6     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
70101956:	2360      	movs	r3, #96	@ 0x60
70101958:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
7010195c:	2302      	movs	r3, #2
7010195e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
70101962:	2300      	movs	r3, #0
70101964:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
70101968:	2300      	movs	r3, #0
7010196a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
7010196e:	2307      	movs	r3, #7
70101970:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
70101974:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
70101978:	4619      	mov	r1, r3
7010197a:	4806      	ldr	r0, [pc, #24]	@ (70101994 <HAL_UART_MspInit+0xc8>)
7010197c:	f000 f9b0 	bl	70101ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
70101980:	bf00      	nop
70101982:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
70101986:	46bd      	mov	sp, r7
70101988:	bd80      	pop	{r7, pc}
7010198a:	bf00      	nop
7010198c:	52001000 	.word	0x52001000
70101990:	07010030 	.word	0x07010030
70101994:	56021000 	.word	0x56021000

70101998 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
70101998:	480f      	ldr	r0, [pc, #60]	@ (701019d8 <LoopForever+0x4>)
  msr   MSPLIM, r0
7010199a:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
7010199e:	480f      	ldr	r0, [pc, #60]	@ (701019dc <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
701019a0:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
701019a2:	f7ff fd25 	bl	701013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
701019a6:	480e      	ldr	r0, [pc, #56]	@ (701019e0 <LoopForever+0xc>)
  ldr r1, =_edata
701019a8:	490e      	ldr	r1, [pc, #56]	@ (701019e4 <LoopForever+0x10>)
  ldr r2, =_sidata
701019aa:	4a0f      	ldr	r2, [pc, #60]	@ (701019e8 <LoopForever+0x14>)
  movs r3, #0
701019ac:	2300      	movs	r3, #0
  b LoopCopyDataInit
701019ae:	e002      	b.n	701019b6 <LoopCopyDataInit>

701019b0 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
701019b0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
701019b2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
701019b4:	3304      	adds	r3, #4

701019b6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
701019b6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
701019b8:	428c      	cmp	r4, r1
  bcc CopyDataInit
701019ba:	d3f9      	bcc.n	701019b0 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
701019bc:	4a0b      	ldr	r2, [pc, #44]	@ (701019ec <LoopForever+0x18>)
  ldr r4, =_ebss
701019be:	4c0c      	ldr	r4, [pc, #48]	@ (701019f0 <LoopForever+0x1c>)
  movs r3, #0
701019c0:	2300      	movs	r3, #0
  b LoopFillZerobss
701019c2:	e001      	b.n	701019c8 <LoopFillZerobss>

701019c4 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
701019c4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
701019c6:	3204      	adds	r2, #4

701019c8 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
701019c8:	42a2      	cmp	r2, r4
  bcc FillZerobss
701019ca:	d3fb      	bcc.n	701019c4 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
701019cc:	f009 ff36 	bl	7010b83c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
701019d0:	f7ff f92a 	bl	70100c28 <main>

701019d4 <LoopForever>:

LoopForever:
  b LoopForever
701019d4:	e7fe      	b.n	701019d4 <LoopForever>
701019d6:	0000      	.short	0x0000
  ldr   r0, =_sstack
701019d8:	341ff000 	.word	0x341ff000
  ldr   r0, =_estack
701019dc:	34200000 	.word	0x34200000
  ldr r0, =_sdata
701019e0:	34000000 	.word	0x34000000
  ldr r1, =_edata
701019e4:	34000068 	.word	0x34000068
  ldr r2, =_sidata
701019e8:	7010bd64 	.word	0x7010bd64
  ldr r2, =_sbss
701019ec:	34000068 	.word	0x34000068
  ldr r4, =_ebss
701019f0:	3400030c 	.word	0x3400030c

701019f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
701019f4:	e7fe      	b.n	701019f4 <ADC1_2_IRQHandler>

701019f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
701019f6:	b580      	push	{r7, lr}
701019f8:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
701019fa:	2003      	movs	r0, #3
701019fc:	f000 f93c 	bl	70101c78 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
70101a00:	f7ff fd2e 	bl	70101460 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
70101a04:	200f      	movs	r0, #15
70101a06:	f000 f80b 	bl	70101a20 <HAL_InitTick>
70101a0a:	4603      	mov	r3, r0
70101a0c:	2b00      	cmp	r3, #0
70101a0e:	d001      	beq.n	70101a14 <HAL_Init+0x1e>
  {
    return HAL_ERROR;
70101a10:	2301      	movs	r3, #1
70101a12:	e002      	b.n	70101a1a <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
70101a14:	f7ff fbba 	bl	7010118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
70101a18:	2300      	movs	r3, #0
}
70101a1a:	4618      	mov	r0, r3
70101a1c:	bd80      	pop	{r7, pc}
	...

70101a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
70101a20:	b580      	push	{r7, lr}
70101a22:	b082      	sub	sp, #8
70101a24:	af00      	add	r7, sp, #0
70101a26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
70101a28:	4b15      	ldr	r3, [pc, #84]	@ (70101a80 <HAL_InitTick+0x60>)
70101a2a:	781b      	ldrb	r3, [r3, #0]
70101a2c:	2b00      	cmp	r3, #0
70101a2e:	d101      	bne.n	70101a34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
70101a30:	2301      	movs	r3, #1
70101a32:	e021      	b.n	70101a78 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
70101a34:	4b13      	ldr	r3, [pc, #76]	@ (70101a84 <HAL_InitTick+0x64>)
70101a36:	681a      	ldr	r2, [r3, #0]
70101a38:	4b11      	ldr	r3, [pc, #68]	@ (70101a80 <HAL_InitTick+0x60>)
70101a3a:	781b      	ldrb	r3, [r3, #0]
70101a3c:	4619      	mov	r1, r3
70101a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
70101a42:	fbb3 f3f1 	udiv	r3, r3, r1
70101a46:	fbb2 f3f3 	udiv	r3, r2, r3
70101a4a:	4618      	mov	r0, r3
70101a4c:	f000 f93c 	bl	70101cc8 <HAL_SYSTICK_Config>
70101a50:	4603      	mov	r3, r0
70101a52:	2b00      	cmp	r3, #0
70101a54:	d001      	beq.n	70101a5a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
70101a56:	2301      	movs	r3, #1
70101a58:	e00e      	b.n	70101a78 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
70101a5a:	687b      	ldr	r3, [r7, #4]
70101a5c:	2b0f      	cmp	r3, #15
70101a5e:	d80a      	bhi.n	70101a76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
70101a60:	2200      	movs	r2, #0
70101a62:	6879      	ldr	r1, [r7, #4]
70101a64:	f04f 30ff 	mov.w	r0, #4294967295
70101a68:	f000 f911 	bl	70101c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
70101a6c:	4a06      	ldr	r2, [pc, #24]	@ (70101a88 <HAL_InitTick+0x68>)
70101a6e:	687b      	ldr	r3, [r7, #4]
70101a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
70101a72:	2300      	movs	r3, #0
70101a74:	e000      	b.n	70101a78 <HAL_InitTick+0x58>
    return HAL_ERROR;
70101a76:	2301      	movs	r3, #1
}
70101a78:	4618      	mov	r0, r3
70101a7a:	3708      	adds	r7, #8
70101a7c:	46bd      	mov	sp, r7
70101a7e:	bd80      	pop	{r7, pc}
70101a80:	34000008 	.word	0x34000008
70101a84:	34000000 	.word	0x34000000
70101a88:	34000004 	.word	0x34000004

70101a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
70101a8c:	b480      	push	{r7}
70101a8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
70101a90:	4b06      	ldr	r3, [pc, #24]	@ (70101aac <HAL_IncTick+0x20>)
70101a92:	781b      	ldrb	r3, [r3, #0]
70101a94:	461a      	mov	r2, r3
70101a96:	4b06      	ldr	r3, [pc, #24]	@ (70101ab0 <HAL_IncTick+0x24>)
70101a98:	681b      	ldr	r3, [r3, #0]
70101a9a:	4413      	add	r3, r2
70101a9c:	4a04      	ldr	r2, [pc, #16]	@ (70101ab0 <HAL_IncTick+0x24>)
70101a9e:	6013      	str	r3, [r2, #0]
}
70101aa0:	bf00      	nop
70101aa2:	46bd      	mov	sp, r7
70101aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
70101aa8:	4770      	bx	lr
70101aaa:	bf00      	nop
70101aac:	34000008 	.word	0x34000008
70101ab0:	340001bc 	.word	0x340001bc

70101ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
70101ab4:	b480      	push	{r7}
70101ab6:	af00      	add	r7, sp, #0
  return uwTick;
70101ab8:	4b03      	ldr	r3, [pc, #12]	@ (70101ac8 <HAL_GetTick+0x14>)
70101aba:	681b      	ldr	r3, [r3, #0]
}
70101abc:	4618      	mov	r0, r3
70101abe:	46bd      	mov	sp, r7
70101ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
70101ac4:	4770      	bx	lr
70101ac6:	bf00      	nop
70101ac8:	340001bc 	.word	0x340001bc

70101acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
70101acc:	b580      	push	{r7, lr}
70101ace:	b084      	sub	sp, #16
70101ad0:	af00      	add	r7, sp, #0
70101ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
70101ad4:	f7ff ffee 	bl	70101ab4 <HAL_GetTick>
70101ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
70101ada:	687b      	ldr	r3, [r7, #4]
70101adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
70101ade:	68fb      	ldr	r3, [r7, #12]
70101ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
70101ae4:	d005      	beq.n	70101af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
70101ae6:	4b0a      	ldr	r3, [pc, #40]	@ (70101b10 <HAL_Delay+0x44>)
70101ae8:	781b      	ldrb	r3, [r3, #0]
70101aea:	461a      	mov	r2, r3
70101aec:	68fb      	ldr	r3, [r7, #12]
70101aee:	4413      	add	r3, r2
70101af0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
70101af2:	bf00      	nop
70101af4:	f7ff ffde 	bl	70101ab4 <HAL_GetTick>
70101af8:	4602      	mov	r2, r0
70101afa:	68bb      	ldr	r3, [r7, #8]
70101afc:	1ad3      	subs	r3, r2, r3
70101afe:	68fa      	ldr	r2, [r7, #12]
70101b00:	429a      	cmp	r2, r3
70101b02:	d8f7      	bhi.n	70101af4 <HAL_Delay+0x28>
  {
  }
}
70101b04:	bf00      	nop
70101b06:	bf00      	nop
70101b08:	3710      	adds	r7, #16
70101b0a:	46bd      	mov	sp, r7
70101b0c:	bd80      	pop	{r7, pc}
70101b0e:	bf00      	nop
70101b10:	34000008 	.word	0x34000008

70101b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
70101b14:	b480      	push	{r7}
70101b16:	b085      	sub	sp, #20
70101b18:	af00      	add	r7, sp, #0
70101b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
70101b1c:	687b      	ldr	r3, [r7, #4]
70101b1e:	f003 0307 	and.w	r3, r3, #7
70101b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
70101b24:	4b0c      	ldr	r3, [pc, #48]	@ (70101b58 <__NVIC_SetPriorityGrouping+0x44>)
70101b26:	68db      	ldr	r3, [r3, #12]
70101b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
70101b2a:	68ba      	ldr	r2, [r7, #8]
70101b2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
70101b30:	4013      	ands	r3, r2
70101b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
70101b34:	68fb      	ldr	r3, [r7, #12]
70101b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
70101b38:	68bb      	ldr	r3, [r7, #8]
70101b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
70101b3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
70101b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70101b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
70101b46:	4a04      	ldr	r2, [pc, #16]	@ (70101b58 <__NVIC_SetPriorityGrouping+0x44>)
70101b48:	68bb      	ldr	r3, [r7, #8]
70101b4a:	60d3      	str	r3, [r2, #12]
}
70101b4c:	bf00      	nop
70101b4e:	3714      	adds	r7, #20
70101b50:	46bd      	mov	sp, r7
70101b52:	f85d 7b04 	ldr.w	r7, [sp], #4
70101b56:	4770      	bx	lr
70101b58:	e000ed00 	.word	0xe000ed00

70101b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
70101b5c:	b480      	push	{r7}
70101b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
70101b60:	4b04      	ldr	r3, [pc, #16]	@ (70101b74 <__NVIC_GetPriorityGrouping+0x18>)
70101b62:	68db      	ldr	r3, [r3, #12]
70101b64:	0a1b      	lsrs	r3, r3, #8
70101b66:	f003 0307 	and.w	r3, r3, #7
}
70101b6a:	4618      	mov	r0, r3
70101b6c:	46bd      	mov	sp, r7
70101b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
70101b72:	4770      	bx	lr
70101b74:	e000ed00 	.word	0xe000ed00

70101b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
70101b78:	b480      	push	{r7}
70101b7a:	b083      	sub	sp, #12
70101b7c:	af00      	add	r7, sp, #0
70101b7e:	4603      	mov	r3, r0
70101b80:	6039      	str	r1, [r7, #0]
70101b82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
70101b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70101b88:	2b00      	cmp	r3, #0
70101b8a:	db0a      	blt.n	70101ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70101b8c:	683b      	ldr	r3, [r7, #0]
70101b8e:	b2da      	uxtb	r2, r3
70101b90:	490c      	ldr	r1, [pc, #48]	@ (70101bc4 <__NVIC_SetPriority+0x4c>)
70101b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70101b96:	0112      	lsls	r2, r2, #4
70101b98:	b2d2      	uxtb	r2, r2
70101b9a:	440b      	add	r3, r1
70101b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
70101ba0:	e00a      	b.n	70101bb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70101ba2:	683b      	ldr	r3, [r7, #0]
70101ba4:	b2da      	uxtb	r2, r3
70101ba6:	4908      	ldr	r1, [pc, #32]	@ (70101bc8 <__NVIC_SetPriority+0x50>)
70101ba8:	88fb      	ldrh	r3, [r7, #6]
70101baa:	f003 030f 	and.w	r3, r3, #15
70101bae:	3b04      	subs	r3, #4
70101bb0:	0112      	lsls	r2, r2, #4
70101bb2:	b2d2      	uxtb	r2, r2
70101bb4:	440b      	add	r3, r1
70101bb6:	761a      	strb	r2, [r3, #24]
}
70101bb8:	bf00      	nop
70101bba:	370c      	adds	r7, #12
70101bbc:	46bd      	mov	sp, r7
70101bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
70101bc2:	4770      	bx	lr
70101bc4:	e000e100 	.word	0xe000e100
70101bc8:	e000ed00 	.word	0xe000ed00

70101bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
70101bcc:	b480      	push	{r7}
70101bce:	b089      	sub	sp, #36	@ 0x24
70101bd0:	af00      	add	r7, sp, #0
70101bd2:	60f8      	str	r0, [r7, #12]
70101bd4:	60b9      	str	r1, [r7, #8]
70101bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
70101bd8:	68fb      	ldr	r3, [r7, #12]
70101bda:	f003 0307 	and.w	r3, r3, #7
70101bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
70101be0:	69fb      	ldr	r3, [r7, #28]
70101be2:	f1c3 0307 	rsb	r3, r3, #7
70101be6:	2b04      	cmp	r3, #4
70101be8:	bf28      	it	cs
70101bea:	2304      	movcs	r3, #4
70101bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
70101bee:	69fb      	ldr	r3, [r7, #28]
70101bf0:	3304      	adds	r3, #4
70101bf2:	2b06      	cmp	r3, #6
70101bf4:	d902      	bls.n	70101bfc <NVIC_EncodePriority+0x30>
70101bf6:	69fb      	ldr	r3, [r7, #28]
70101bf8:	3b03      	subs	r3, #3
70101bfa:	e000      	b.n	70101bfe <NVIC_EncodePriority+0x32>
70101bfc:	2300      	movs	r3, #0
70101bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
70101c00:	f04f 32ff 	mov.w	r2, #4294967295
70101c04:	69bb      	ldr	r3, [r7, #24]
70101c06:	fa02 f303 	lsl.w	r3, r2, r3
70101c0a:	43da      	mvns	r2, r3
70101c0c:	68bb      	ldr	r3, [r7, #8]
70101c0e:	401a      	ands	r2, r3
70101c10:	697b      	ldr	r3, [r7, #20]
70101c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
70101c14:	f04f 31ff 	mov.w	r1, #4294967295
70101c18:	697b      	ldr	r3, [r7, #20]
70101c1a:	fa01 f303 	lsl.w	r3, r1, r3
70101c1e:	43d9      	mvns	r1, r3
70101c20:	687b      	ldr	r3, [r7, #4]
70101c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
70101c24:	4313      	orrs	r3, r2
         );
}
70101c26:	4618      	mov	r0, r3
70101c28:	3724      	adds	r7, #36	@ 0x24
70101c2a:	46bd      	mov	sp, r7
70101c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
70101c30:	4770      	bx	lr
	...

70101c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
70101c34:	b580      	push	{r7, lr}
70101c36:	b082      	sub	sp, #8
70101c38:	af00      	add	r7, sp, #0
70101c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
70101c3c:	687b      	ldr	r3, [r7, #4]
70101c3e:	3b01      	subs	r3, #1
70101c40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
70101c44:	d301      	bcc.n	70101c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
70101c46:	2301      	movs	r3, #1
70101c48:	e00f      	b.n	70101c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
70101c4a:	4a0a      	ldr	r2, [pc, #40]	@ (70101c74 <SysTick_Config+0x40>)
70101c4c:	687b      	ldr	r3, [r7, #4]
70101c4e:	3b01      	subs	r3, #1
70101c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
70101c52:	210f      	movs	r1, #15
70101c54:	f04f 30ff 	mov.w	r0, #4294967295
70101c58:	f7ff ff8e 	bl	70101b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
70101c5c:	4b05      	ldr	r3, [pc, #20]	@ (70101c74 <SysTick_Config+0x40>)
70101c5e:	2200      	movs	r2, #0
70101c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
70101c62:	4b04      	ldr	r3, [pc, #16]	@ (70101c74 <SysTick_Config+0x40>)
70101c64:	2207      	movs	r2, #7
70101c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
70101c68:	2300      	movs	r3, #0
}
70101c6a:	4618      	mov	r0, r3
70101c6c:	3708      	adds	r7, #8
70101c6e:	46bd      	mov	sp, r7
70101c70:	bd80      	pop	{r7, pc}
70101c72:	bf00      	nop
70101c74:	e000e010 	.word	0xe000e010

70101c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
70101c78:	b580      	push	{r7, lr}
70101c7a:	b082      	sub	sp, #8
70101c7c:	af00      	add	r7, sp, #0
70101c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
70101c80:	6878      	ldr	r0, [r7, #4]
70101c82:	f7ff ff47 	bl	70101b14 <__NVIC_SetPriorityGrouping>
}
70101c86:	bf00      	nop
70101c88:	3708      	adds	r7, #8
70101c8a:	46bd      	mov	sp, r7
70101c8c:	bd80      	pop	{r7, pc}

70101c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
70101c8e:	b580      	push	{r7, lr}
70101c90:	b086      	sub	sp, #24
70101c92:	af00      	add	r7, sp, #0
70101c94:	4603      	mov	r3, r0
70101c96:	60b9      	str	r1, [r7, #8]
70101c98:	607a      	str	r2, [r7, #4]
70101c9a:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
70101c9c:	f7ff ff5e 	bl	70101b5c <__NVIC_GetPriorityGrouping>
70101ca0:	4603      	mov	r3, r0
70101ca2:	f003 0307 	and.w	r3, r3, #7
70101ca6:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
70101ca8:	687a      	ldr	r2, [r7, #4]
70101caa:	68b9      	ldr	r1, [r7, #8]
70101cac:	6978      	ldr	r0, [r7, #20]
70101cae:	f7ff ff8d 	bl	70101bcc <NVIC_EncodePriority>
70101cb2:	4602      	mov	r2, r0
70101cb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
70101cb8:	4611      	mov	r1, r2
70101cba:	4618      	mov	r0, r3
70101cbc:	f7ff ff5c 	bl	70101b78 <__NVIC_SetPriority>
}
70101cc0:	bf00      	nop
70101cc2:	3718      	adds	r7, #24
70101cc4:	46bd      	mov	sp, r7
70101cc6:	bd80      	pop	{r7, pc}

70101cc8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
70101cc8:	b580      	push	{r7, lr}
70101cca:	b082      	sub	sp, #8
70101ccc:	af00      	add	r7, sp, #0
70101cce:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
70101cd0:	6878      	ldr	r0, [r7, #4]
70101cd2:	f7ff ffaf 	bl	70101c34 <SysTick_Config>
70101cd6:	4603      	mov	r3, r0
}
70101cd8:	4618      	mov	r0, r3
70101cda:	3708      	adds	r7, #8
70101cdc:	46bd      	mov	sp, r7
70101cde:	bd80      	pop	{r7, pc}

70101ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
70101ce0:	b480      	push	{r7}
70101ce2:	b087      	sub	sp, #28
70101ce4:	af00      	add	r7, sp, #0
70101ce6:	6078      	str	r0, [r7, #4]
70101ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
70101cea:	2300      	movs	r3, #0
70101cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
70101cee:	e180      	b.n	70101ff2 <HAL_GPIO_Init+0x312>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
70101cf0:	683b      	ldr	r3, [r7, #0]
70101cf2:	681a      	ldr	r2, [r3, #0]
70101cf4:	2101      	movs	r1, #1
70101cf6:	697b      	ldr	r3, [r7, #20]
70101cf8:	fa01 f303 	lsl.w	r3, r1, r3
70101cfc:	4013      	ands	r3, r2
70101cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
70101d00:	68fb      	ldr	r3, [r7, #12]
70101d02:	2b00      	cmp	r3, #0
70101d04:	f000 8172 	beq.w	70101fec <HAL_GPIO_Init+0x30c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
70101d08:	683b      	ldr	r3, [r7, #0]
70101d0a:	685b      	ldr	r3, [r3, #4]
70101d0c:	f003 0303 	and.w	r3, r3, #3
70101d10:	2b01      	cmp	r3, #1
70101d12:	d005      	beq.n	70101d20 <HAL_GPIO_Init+0x40>
70101d14:	683b      	ldr	r3, [r7, #0]
70101d16:	685b      	ldr	r3, [r3, #4]
70101d18:	f003 0303 	and.w	r3, r3, #3
70101d1c:	2b02      	cmp	r3, #2
70101d1e:	d130      	bne.n	70101d82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
70101d20:	687b      	ldr	r3, [r7, #4]
70101d22:	689b      	ldr	r3, [r3, #8]
70101d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
70101d26:	697b      	ldr	r3, [r7, #20]
70101d28:	005b      	lsls	r3, r3, #1
70101d2a:	2203      	movs	r2, #3
70101d2c:	fa02 f303 	lsl.w	r3, r2, r3
70101d30:	43db      	mvns	r3, r3
70101d32:	693a      	ldr	r2, [r7, #16]
70101d34:	4013      	ands	r3, r2
70101d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
70101d38:	683b      	ldr	r3, [r7, #0]
70101d3a:	68da      	ldr	r2, [r3, #12]
70101d3c:	697b      	ldr	r3, [r7, #20]
70101d3e:	005b      	lsls	r3, r3, #1
70101d40:	fa02 f303 	lsl.w	r3, r2, r3
70101d44:	693a      	ldr	r2, [r7, #16]
70101d46:	4313      	orrs	r3, r2
70101d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
70101d4a:	687b      	ldr	r3, [r7, #4]
70101d4c:	693a      	ldr	r2, [r7, #16]
70101d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
70101d50:	687b      	ldr	r3, [r7, #4]
70101d52:	685b      	ldr	r3, [r3, #4]
70101d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
70101d56:	2201      	movs	r2, #1
70101d58:	697b      	ldr	r3, [r7, #20]
70101d5a:	fa02 f303 	lsl.w	r3, r2, r3
70101d5e:	43db      	mvns	r3, r3
70101d60:	693a      	ldr	r2, [r7, #16]
70101d62:	4013      	ands	r3, r2
70101d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
70101d66:	683b      	ldr	r3, [r7, #0]
70101d68:	685b      	ldr	r3, [r3, #4]
70101d6a:	091b      	lsrs	r3, r3, #4
70101d6c:	f003 0201 	and.w	r2, r3, #1
70101d70:	697b      	ldr	r3, [r7, #20]
70101d72:	fa02 f303 	lsl.w	r3, r2, r3
70101d76:	693a      	ldr	r2, [r7, #16]
70101d78:	4313      	orrs	r3, r2
70101d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
70101d7c:	687b      	ldr	r3, [r7, #4]
70101d7e:	693a      	ldr	r2, [r7, #16]
70101d80:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
70101d82:	683b      	ldr	r3, [r7, #0]
70101d84:	685b      	ldr	r3, [r3, #4]
70101d86:	f003 0303 	and.w	r3, r3, #3
70101d8a:	2b03      	cmp	r3, #3
70101d8c:	d109      	bne.n	70101da2 <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
70101d8e:	683b      	ldr	r3, [r7, #0]
70101d90:	685b      	ldr	r3, [r3, #4]
70101d92:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
70101d96:	2b03      	cmp	r3, #3
70101d98:	d11b      	bne.n	70101dd2 <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
70101d9a:	683b      	ldr	r3, [r7, #0]
70101d9c:	689b      	ldr	r3, [r3, #8]
70101d9e:	2b01      	cmp	r3, #1
70101da0:	d017      	beq.n	70101dd2 <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
70101da2:	687b      	ldr	r3, [r7, #4]
70101da4:	68db      	ldr	r3, [r3, #12]
70101da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
70101da8:	697b      	ldr	r3, [r7, #20]
70101daa:	005b      	lsls	r3, r3, #1
70101dac:	2203      	movs	r2, #3
70101dae:	fa02 f303 	lsl.w	r3, r2, r3
70101db2:	43db      	mvns	r3, r3
70101db4:	693a      	ldr	r2, [r7, #16]
70101db6:	4013      	ands	r3, r2
70101db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
70101dba:	683b      	ldr	r3, [r7, #0]
70101dbc:	689a      	ldr	r2, [r3, #8]
70101dbe:	697b      	ldr	r3, [r7, #20]
70101dc0:	005b      	lsls	r3, r3, #1
70101dc2:	fa02 f303 	lsl.w	r3, r2, r3
70101dc6:	693a      	ldr	r2, [r7, #16]
70101dc8:	4313      	orrs	r3, r2
70101dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
70101dcc:	687b      	ldr	r3, [r7, #4]
70101dce:	693a      	ldr	r2, [r7, #16]
70101dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
70101dd2:	683b      	ldr	r3, [r7, #0]
70101dd4:	685b      	ldr	r3, [r3, #4]
70101dd6:	f003 0303 	and.w	r3, r3, #3
70101dda:	2b02      	cmp	r3, #2
70101ddc:	d123      	bne.n	70101e26 <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
70101dde:	697b      	ldr	r3, [r7, #20]
70101de0:	08da      	lsrs	r2, r3, #3
70101de2:	687b      	ldr	r3, [r7, #4]
70101de4:	3208      	adds	r2, #8
70101de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70101dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
70101dec:	697b      	ldr	r3, [r7, #20]
70101dee:	f003 0307 	and.w	r3, r3, #7
70101df2:	009b      	lsls	r3, r3, #2
70101df4:	220f      	movs	r2, #15
70101df6:	fa02 f303 	lsl.w	r3, r2, r3
70101dfa:	43db      	mvns	r3, r3
70101dfc:	693a      	ldr	r2, [r7, #16]
70101dfe:	4013      	ands	r3, r2
70101e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
70101e02:	683b      	ldr	r3, [r7, #0]
70101e04:	691a      	ldr	r2, [r3, #16]
70101e06:	697b      	ldr	r3, [r7, #20]
70101e08:	f003 0307 	and.w	r3, r3, #7
70101e0c:	009b      	lsls	r3, r3, #2
70101e0e:	fa02 f303 	lsl.w	r3, r2, r3
70101e12:	693a      	ldr	r2, [r7, #16]
70101e14:	4313      	orrs	r3, r2
70101e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
70101e18:	697b      	ldr	r3, [r7, #20]
70101e1a:	08da      	lsrs	r2, r3, #3
70101e1c:	687b      	ldr	r3, [r7, #4]
70101e1e:	3208      	adds	r2, #8
70101e20:	6939      	ldr	r1, [r7, #16]
70101e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
70101e26:	687b      	ldr	r3, [r7, #4]
70101e28:	681b      	ldr	r3, [r3, #0]
70101e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
70101e2c:	697b      	ldr	r3, [r7, #20]
70101e2e:	005b      	lsls	r3, r3, #1
70101e30:	2203      	movs	r2, #3
70101e32:	fa02 f303 	lsl.w	r3, r2, r3
70101e36:	43db      	mvns	r3, r3
70101e38:	693a      	ldr	r2, [r7, #16]
70101e3a:	4013      	ands	r3, r2
70101e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
70101e3e:	683b      	ldr	r3, [r7, #0]
70101e40:	685b      	ldr	r3, [r3, #4]
70101e42:	f003 0203 	and.w	r2, r3, #3
70101e46:	697b      	ldr	r3, [r7, #20]
70101e48:	005b      	lsls	r3, r3, #1
70101e4a:	fa02 f303 	lsl.w	r3, r2, r3
70101e4e:	693a      	ldr	r2, [r7, #16]
70101e50:	4313      	orrs	r3, r2
70101e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
70101e54:	687b      	ldr	r3, [r7, #4]
70101e56:	693a      	ldr	r2, [r7, #16]
70101e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
70101e5a:	683b      	ldr	r3, [r7, #0]
70101e5c:	685b      	ldr	r3, [r3, #4]
70101e5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
70101e62:	2b00      	cmp	r3, #0
70101e64:	f000 80c2 	beq.w	70101fec <HAL_GPIO_Init+0x30c>
      {
        temp = EXTI->EXTICR[position >> 2u];
70101e68:	4a69      	ldr	r2, [pc, #420]	@ (70102010 <HAL_GPIO_Init+0x330>)
70101e6a:	697b      	ldr	r3, [r7, #20]
70101e6c:	089b      	lsrs	r3, r3, #2
70101e6e:	3318      	adds	r3, #24
70101e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
70101e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
70101e76:	697b      	ldr	r3, [r7, #20]
70101e78:	f003 0303 	and.w	r3, r3, #3
70101e7c:	00db      	lsls	r3, r3, #3
70101e7e:	220f      	movs	r2, #15
70101e80:	fa02 f303 	lsl.w	r3, r2, r3
70101e84:	43db      	mvns	r3, r3
70101e86:	693a      	ldr	r2, [r7, #16]
70101e88:	4013      	ands	r3, r2
70101e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
70101e8c:	687b      	ldr	r3, [r7, #4]
70101e8e:	4a61      	ldr	r2, [pc, #388]	@ (70102014 <HAL_GPIO_Init+0x334>)
70101e90:	4293      	cmp	r3, r2
70101e92:	d043      	beq.n	70101f1c <HAL_GPIO_Init+0x23c>
70101e94:	687b      	ldr	r3, [r7, #4]
70101e96:	4a60      	ldr	r2, [pc, #384]	@ (70102018 <HAL_GPIO_Init+0x338>)
70101e98:	4293      	cmp	r3, r2
70101e9a:	d03d      	beq.n	70101f18 <HAL_GPIO_Init+0x238>
70101e9c:	687b      	ldr	r3, [r7, #4]
70101e9e:	4a5f      	ldr	r2, [pc, #380]	@ (7010201c <HAL_GPIO_Init+0x33c>)
70101ea0:	4293      	cmp	r3, r2
70101ea2:	d037      	beq.n	70101f14 <HAL_GPIO_Init+0x234>
70101ea4:	687b      	ldr	r3, [r7, #4]
70101ea6:	4a5e      	ldr	r2, [pc, #376]	@ (70102020 <HAL_GPIO_Init+0x340>)
70101ea8:	4293      	cmp	r3, r2
70101eaa:	d031      	beq.n	70101f10 <HAL_GPIO_Init+0x230>
70101eac:	687b      	ldr	r3, [r7, #4]
70101eae:	4a5d      	ldr	r2, [pc, #372]	@ (70102024 <HAL_GPIO_Init+0x344>)
70101eb0:	4293      	cmp	r3, r2
70101eb2:	d02b      	beq.n	70101f0c <HAL_GPIO_Init+0x22c>
70101eb4:	687b      	ldr	r3, [r7, #4]
70101eb6:	4a5c      	ldr	r2, [pc, #368]	@ (70102028 <HAL_GPIO_Init+0x348>)
70101eb8:	4293      	cmp	r3, r2
70101eba:	d025      	beq.n	70101f08 <HAL_GPIO_Init+0x228>
70101ebc:	687b      	ldr	r3, [r7, #4]
70101ebe:	4a5b      	ldr	r2, [pc, #364]	@ (7010202c <HAL_GPIO_Init+0x34c>)
70101ec0:	4293      	cmp	r3, r2
70101ec2:	d01f      	beq.n	70101f04 <HAL_GPIO_Init+0x224>
70101ec4:	687b      	ldr	r3, [r7, #4]
70101ec6:	4a5a      	ldr	r2, [pc, #360]	@ (70102030 <HAL_GPIO_Init+0x350>)
70101ec8:	4293      	cmp	r3, r2
70101eca:	d019      	beq.n	70101f00 <HAL_GPIO_Init+0x220>
70101ecc:	687b      	ldr	r3, [r7, #4]
70101ece:	4a59      	ldr	r2, [pc, #356]	@ (70102034 <HAL_GPIO_Init+0x354>)
70101ed0:	4293      	cmp	r3, r2
70101ed2:	d013      	beq.n	70101efc <HAL_GPIO_Init+0x21c>
70101ed4:	687b      	ldr	r3, [r7, #4]
70101ed6:	4a58      	ldr	r2, [pc, #352]	@ (70102038 <HAL_GPIO_Init+0x358>)
70101ed8:	4293      	cmp	r3, r2
70101eda:	d00d      	beq.n	70101ef8 <HAL_GPIO_Init+0x218>
70101edc:	687b      	ldr	r3, [r7, #4]
70101ede:	4a57      	ldr	r2, [pc, #348]	@ (7010203c <HAL_GPIO_Init+0x35c>)
70101ee0:	4293      	cmp	r3, r2
70101ee2:	d007      	beq.n	70101ef4 <HAL_GPIO_Init+0x214>
70101ee4:	687b      	ldr	r3, [r7, #4]
70101ee6:	4a56      	ldr	r2, [pc, #344]	@ (70102040 <HAL_GPIO_Init+0x360>)
70101ee8:	4293      	cmp	r3, r2
70101eea:	d101      	bne.n	70101ef0 <HAL_GPIO_Init+0x210>
70101eec:	230b      	movs	r3, #11
70101eee:	e016      	b.n	70101f1e <HAL_GPIO_Init+0x23e>
70101ef0:	2310      	movs	r3, #16
70101ef2:	e014      	b.n	70101f1e <HAL_GPIO_Init+0x23e>
70101ef4:	230a      	movs	r3, #10
70101ef6:	e012      	b.n	70101f1e <HAL_GPIO_Init+0x23e>
70101ef8:	2309      	movs	r3, #9
70101efa:	e010      	b.n	70101f1e <HAL_GPIO_Init+0x23e>
70101efc:	2308      	movs	r3, #8
70101efe:	e00e      	b.n	70101f1e <HAL_GPIO_Init+0x23e>
70101f00:	2307      	movs	r3, #7
70101f02:	e00c      	b.n	70101f1e <HAL_GPIO_Init+0x23e>
70101f04:	2306      	movs	r3, #6
70101f06:	e00a      	b.n	70101f1e <HAL_GPIO_Init+0x23e>
70101f08:	2305      	movs	r3, #5
70101f0a:	e008      	b.n	70101f1e <HAL_GPIO_Init+0x23e>
70101f0c:	2304      	movs	r3, #4
70101f0e:	e006      	b.n	70101f1e <HAL_GPIO_Init+0x23e>
70101f10:	2303      	movs	r3, #3
70101f12:	e004      	b.n	70101f1e <HAL_GPIO_Init+0x23e>
70101f14:	2302      	movs	r3, #2
70101f16:	e002      	b.n	70101f1e <HAL_GPIO_Init+0x23e>
70101f18:	2301      	movs	r3, #1
70101f1a:	e000      	b.n	70101f1e <HAL_GPIO_Init+0x23e>
70101f1c:	2300      	movs	r3, #0
70101f1e:	697a      	ldr	r2, [r7, #20]
70101f20:	f002 0203 	and.w	r2, r2, #3
70101f24:	00d2      	lsls	r2, r2, #3
70101f26:	4093      	lsls	r3, r2
70101f28:	693a      	ldr	r2, [r7, #16]
70101f2a:	4313      	orrs	r3, r2
70101f2c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
70101f2e:	4938      	ldr	r1, [pc, #224]	@ (70102010 <HAL_GPIO_Init+0x330>)
70101f30:	697b      	ldr	r3, [r7, #20]
70101f32:	089b      	lsrs	r3, r3, #2
70101f34:	3318      	adds	r3, #24
70101f36:	693a      	ldr	r2, [r7, #16]
70101f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
70101f3c:	4b34      	ldr	r3, [pc, #208]	@ (70102010 <HAL_GPIO_Init+0x330>)
70101f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70101f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70101f44:	68fb      	ldr	r3, [r7, #12]
70101f46:	43db      	mvns	r3, r3
70101f48:	693a      	ldr	r2, [r7, #16]
70101f4a:	4013      	ands	r3, r2
70101f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
70101f4e:	683b      	ldr	r3, [r7, #0]
70101f50:	685b      	ldr	r3, [r3, #4]
70101f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70101f56:	2b00      	cmp	r3, #0
70101f58:	d003      	beq.n	70101f62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
70101f5a:	693a      	ldr	r2, [r7, #16]
70101f5c:	68fb      	ldr	r3, [r7, #12]
70101f5e:	4313      	orrs	r3, r2
70101f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
70101f62:	4a2b      	ldr	r2, [pc, #172]	@ (70102010 <HAL_GPIO_Init+0x330>)
70101f64:	693b      	ldr	r3, [r7, #16]
70101f66:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
70101f6a:	4b29      	ldr	r3, [pc, #164]	@ (70102010 <HAL_GPIO_Init+0x330>)
70101f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70101f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70101f72:	68fb      	ldr	r3, [r7, #12]
70101f74:	43db      	mvns	r3, r3
70101f76:	693a      	ldr	r2, [r7, #16]
70101f78:	4013      	ands	r3, r2
70101f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
70101f7c:	683b      	ldr	r3, [r7, #0]
70101f7e:	685b      	ldr	r3, [r3, #4]
70101f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
70101f84:	2b00      	cmp	r3, #0
70101f86:	d003      	beq.n	70101f90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
70101f88:	693a      	ldr	r2, [r7, #16]
70101f8a:	68fb      	ldr	r3, [r7, #12]
70101f8c:	4313      	orrs	r3, r2
70101f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
70101f90:	4a1f      	ldr	r2, [pc, #124]	@ (70102010 <HAL_GPIO_Init+0x330>)
70101f92:	693b      	ldr	r3, [r7, #16]
70101f94:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
70101f98:	4b1d      	ldr	r3, [pc, #116]	@ (70102010 <HAL_GPIO_Init+0x330>)
70101f9a:	681b      	ldr	r3, [r3, #0]
70101f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70101f9e:	68fb      	ldr	r3, [r7, #12]
70101fa0:	43db      	mvns	r3, r3
70101fa2:	693a      	ldr	r2, [r7, #16]
70101fa4:	4013      	ands	r3, r2
70101fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
70101fa8:	683b      	ldr	r3, [r7, #0]
70101faa:	685b      	ldr	r3, [r3, #4]
70101fac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70101fb0:	2b00      	cmp	r3, #0
70101fb2:	d003      	beq.n	70101fbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
70101fb4:	693a      	ldr	r2, [r7, #16]
70101fb6:	68fb      	ldr	r3, [r7, #12]
70101fb8:	4313      	orrs	r3, r2
70101fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
70101fbc:	4a14      	ldr	r2, [pc, #80]	@ (70102010 <HAL_GPIO_Init+0x330>)
70101fbe:	693b      	ldr	r3, [r7, #16]
70101fc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
70101fc2:	4b13      	ldr	r3, [pc, #76]	@ (70102010 <HAL_GPIO_Init+0x330>)
70101fc4:	685b      	ldr	r3, [r3, #4]
70101fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70101fc8:	68fb      	ldr	r3, [r7, #12]
70101fca:	43db      	mvns	r3, r3
70101fcc:	693a      	ldr	r2, [r7, #16]
70101fce:	4013      	ands	r3, r2
70101fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
70101fd2:	683b      	ldr	r3, [r7, #0]
70101fd4:	685b      	ldr	r3, [r3, #4]
70101fd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70101fda:	2b00      	cmp	r3, #0
70101fdc:	d003      	beq.n	70101fe6 <HAL_GPIO_Init+0x306>
        {
          temp |= iocurrent;
70101fde:	693a      	ldr	r2, [r7, #16]
70101fe0:	68fb      	ldr	r3, [r7, #12]
70101fe2:	4313      	orrs	r3, r2
70101fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
70101fe6:	4a0a      	ldr	r2, [pc, #40]	@ (70102010 <HAL_GPIO_Init+0x330>)
70101fe8:	693b      	ldr	r3, [r7, #16]
70101fea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
70101fec:	697b      	ldr	r3, [r7, #20]
70101fee:	3301      	adds	r3, #1
70101ff0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
70101ff2:	683b      	ldr	r3, [r7, #0]
70101ff4:	681a      	ldr	r2, [r3, #0]
70101ff6:	697b      	ldr	r3, [r7, #20]
70101ff8:	fa22 f303 	lsr.w	r3, r2, r3
70101ffc:	2b00      	cmp	r3, #0
70101ffe:	f47f ae77 	bne.w	70101cf0 <HAL_GPIO_Init+0x10>
  }
}
70102002:	bf00      	nop
70102004:	bf00      	nop
70102006:	371c      	adds	r7, #28
70102008:	46bd      	mov	sp, r7
7010200a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010200e:	4770      	bx	lr
70102010:	56025000 	.word	0x56025000
70102014:	56020000 	.word	0x56020000
70102018:	56020400 	.word	0x56020400
7010201c:	56020800 	.word	0x56020800
70102020:	56020c00 	.word	0x56020c00
70102024:	56021000 	.word	0x56021000
70102028:	56021400 	.word	0x56021400
7010202c:	56021800 	.word	0x56021800
70102030:	56021c00 	.word	0x56021c00
70102034:	56023400 	.word	0x56023400
70102038:	56023800 	.word	0x56023800
7010203c:	56023c00 	.word	0x56023c00
70102040:	56024000 	.word	0x56024000

70102044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
70102044:	b480      	push	{r7}
70102046:	b083      	sub	sp, #12
70102048:	af00      	add	r7, sp, #0
7010204a:	6078      	str	r0, [r7, #4]
7010204c:	460b      	mov	r3, r1
7010204e:	807b      	strh	r3, [r7, #2]
70102050:	4613      	mov	r3, r2
70102052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
70102054:	787b      	ldrb	r3, [r7, #1]
70102056:	2b00      	cmp	r3, #0
70102058:	d003      	beq.n	70102062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
7010205a:	887a      	ldrh	r2, [r7, #2]
7010205c:	687b      	ldr	r3, [r7, #4]
7010205e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
70102060:	e002      	b.n	70102068 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
70102062:	887a      	ldrh	r2, [r7, #2]
70102064:	687b      	ldr	r3, [r7, #4]
70102066:	629a      	str	r2, [r3, #40]	@ 0x28
}
70102068:	bf00      	nop
7010206a:	370c      	adds	r7, #12
7010206c:	46bd      	mov	sp, r7
7010206e:	f85d 7b04 	ldr.w	r7, [sp], #4
70102072:	4770      	bx	lr

70102074 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
70102074:	b480      	push	{r7}
70102076:	b085      	sub	sp, #20
70102078:	af00      	add	r7, sp, #0
7010207a:	6078      	str	r0, [r7, #4]
7010207c:	460b      	mov	r3, r1
7010207e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
70102080:	687b      	ldr	r3, [r7, #4]
70102082:	695b      	ldr	r3, [r3, #20]
70102084:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
70102086:	887a      	ldrh	r2, [r7, #2]
70102088:	68fb      	ldr	r3, [r7, #12]
7010208a:	4013      	ands	r3, r2
7010208c:	041a      	lsls	r2, r3, #16
7010208e:	68fb      	ldr	r3, [r7, #12]
70102090:	43d9      	mvns	r1, r3
70102092:	887b      	ldrh	r3, [r7, #2]
70102094:	400b      	ands	r3, r1
70102096:	431a      	orrs	r2, r3
70102098:	687b      	ldr	r3, [r7, #4]
7010209a:	619a      	str	r2, [r3, #24]
}
7010209c:	bf00      	nop
7010209e:	3714      	adds	r7, #20
701020a0:	46bd      	mov	sp, r7
701020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
701020a6:	4770      	bx	lr

701020a8 <HAL_GPIO_ConfigPinAttributes>:
  *            @arg @ref GPIO_PIN_SEC          Secure-only access
  *            @arg @ref GPIO_PIN_NSEC         Secure/Non-secure access
  * @retval None.
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
701020a8:	b480      	push	{r7}
701020aa:	b087      	sub	sp, #28
701020ac:	af00      	add	r7, sp, #0
701020ae:	60f8      	str	r0, [r7, #12]
701020b0:	460b      	mov	r3, r1
701020b2:	607a      	str	r2, [r7, #4]
701020b4:	817b      	strh	r3, [r7, #10]
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

#if defined CPU_IN_SECURE_STATE
  /* Configure the port pins */
  sec = GPIOx->SECCFGR;
701020b6:	68fb      	ldr	r3, [r7, #12]
701020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
701020ba:	617b      	str	r3, [r7, #20]
  if ((PinAttributes & GPIO_PIN_SEC) == GPIO_PIN_SEC)
701020bc:	687a      	ldr	r2, [r7, #4]
701020be:	f240 1301 	movw	r3, #257	@ 0x101
701020c2:	4013      	ands	r3, r2
701020c4:	f240 1201 	movw	r2, #257	@ 0x101
701020c8:	4293      	cmp	r3, r2
701020ca:	d104      	bne.n	701020d6 <HAL_GPIO_ConfigPinAttributes+0x2e>
  {
    sec |= (uint32_t)GPIO_Pin;
701020cc:	897b      	ldrh	r3, [r7, #10]
701020ce:	697a      	ldr	r2, [r7, #20]
701020d0:	4313      	orrs	r3, r2
701020d2:	617b      	str	r3, [r7, #20]
701020d4:	e009      	b.n	701020ea <HAL_GPIO_ConfigPinAttributes+0x42>
  }
  else if ((PinAttributes & GPIO_PIN_NSEC) == GPIO_PIN_NSEC)
701020d6:	687b      	ldr	r3, [r7, #4]
701020d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
701020dc:	2b00      	cmp	r3, #0
701020de:	d004      	beq.n	701020ea <HAL_GPIO_ConfigPinAttributes+0x42>
  {
    sec &= ~((uint32_t)GPIO_Pin);
701020e0:	897b      	ldrh	r3, [r7, #10]
701020e2:	43db      	mvns	r3, r3
701020e4:	697a      	ldr	r2, [r7, #20]
701020e6:	4013      	ands	r3, r2
701020e8:	617b      	str	r3, [r7, #20]
  }
  else
  {
    /* do nothing */
  }
  GPIOx->SECCFGR = sec;
701020ea:	68fb      	ldr	r3, [r7, #12]
701020ec:	697a      	ldr	r2, [r7, #20]
701020ee:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* CPU_IN_SECURE_STATE */

  priv = GPIOx->PRIVCFGR;
701020f0:	68fb      	ldr	r3, [r7, #12]
701020f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
701020f4:	613b      	str	r3, [r7, #16]
  if ((PinAttributes & GPIO_PIN_PRIV) == GPIO_PIN_PRIV)
701020f6:	687a      	ldr	r2, [r7, #4]
701020f8:	f240 2302 	movw	r3, #514	@ 0x202
701020fc:	4013      	ands	r3, r2
701020fe:	f240 2202 	movw	r2, #514	@ 0x202
70102102:	4293      	cmp	r3, r2
70102104:	d104      	bne.n	70102110 <HAL_GPIO_ConfigPinAttributes+0x68>
  {
    priv |= (uint32_t)GPIO_Pin;
70102106:	897b      	ldrh	r3, [r7, #10]
70102108:	693a      	ldr	r2, [r7, #16]
7010210a:	4313      	orrs	r3, r2
7010210c:	613b      	str	r3, [r7, #16]
7010210e:	e009      	b.n	70102124 <HAL_GPIO_ConfigPinAttributes+0x7c>
  }
  else if ((PinAttributes & GPIO_PIN_NPRIV) == GPIO_PIN_NPRIV)
70102110:	687b      	ldr	r3, [r7, #4]
70102112:	f403 7300 	and.w	r3, r3, #512	@ 0x200
70102116:	2b00      	cmp	r3, #0
70102118:	d004      	beq.n	70102124 <HAL_GPIO_ConfigPinAttributes+0x7c>
  {
    priv &= ~((uint32_t)GPIO_Pin);
7010211a:	897b      	ldrh	r3, [r7, #10]
7010211c:	43db      	mvns	r3, r3
7010211e:	693a      	ldr	r2, [r7, #16]
70102120:	4013      	ands	r3, r2
70102122:	613b      	str	r3, [r7, #16]
  else
  {
    /* do nothing */
  }

  GPIOx->PRIVCFGR = priv;
70102124:	68fb      	ldr	r3, [r7, #12]
70102126:	693a      	ldr	r2, [r7, #16]
70102128:	635a      	str	r2, [r3, #52]	@ 0x34
}
7010212a:	bf00      	nop
7010212c:	371c      	adds	r7, #28
7010212e:	46bd      	mov	sp, r7
70102130:	f85d 7b04 	ldr.w	r7, [sp], #4
70102134:	4770      	bx	lr
	...

70102138 <HAL_PWREx_EnableVddIO2>:
  * @brief  Enable VDDIO2 supply valid.
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
70102138:	b480      	push	{r7}
7010213a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
7010213c:	4b05      	ldr	r3, [pc, #20]	@ (70102154 <HAL_PWREx_EnableVddIO2+0x1c>)
7010213e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70102140:	4a04      	ldr	r2, [pc, #16]	@ (70102154 <HAL_PWREx_EnableVddIO2+0x1c>)
70102142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
70102146:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
70102148:	bf00      	nop
7010214a:	46bd      	mov	sp, r7
7010214c:	f85d 7b04 	ldr.w	r7, [sp], #4
70102150:	4770      	bx	lr
70102152:	bf00      	nop
70102154:	56024800 	.word	0x56024800

70102158 <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
70102158:	b480      	push	{r7}
7010215a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
7010215c:	4b05      	ldr	r3, [pc, #20]	@ (70102174 <HAL_PWREx_EnableVddIO3+0x1c>)
7010215e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70102160:	4a04      	ldr	r2, [pc, #16]	@ (70102174 <HAL_PWREx_EnableVddIO3+0x1c>)
70102162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
70102166:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
70102168:	bf00      	nop
7010216a:	46bd      	mov	sp, r7
7010216c:	f85d 7b04 	ldr.w	r7, [sp], #4
70102170:	4770      	bx	lr
70102172:	bf00      	nop
70102174:	56024800 	.word	0x56024800

70102178 <HAL_PWREx_EnableVddIO4>:
  * @brief  Enable VDDIO4 supply valid.
  * @note   Setting this bit is mandatory to use PB[9,8], PC[12:6], and PD[2] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO4(void)
{
70102178:	b480      	push	{r7}
7010217a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
7010217c:	4b05      	ldr	r3, [pc, #20]	@ (70102194 <HAL_PWREx_EnableVddIO4+0x1c>)
7010217e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70102180:	4a04      	ldr	r2, [pc, #16]	@ (70102194 <HAL_PWREx_EnableVddIO4+0x1c>)
70102182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
70102186:	6353      	str	r3, [r2, #52]	@ 0x34
}
70102188:	bf00      	nop
7010218a:	46bd      	mov	sp, r7
7010218c:	f85d 7b04 	ldr.w	r7, [sp], #4
70102190:	4770      	bx	lr
70102192:	bf00      	nop
70102194:	56024800 	.word	0x56024800

70102198 <HAL_PWREx_EnableVddIO5>:
  * @brief  Enable VDDIO5 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO5(void)
{
70102198:	b480      	push	{r7}
7010219a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR2, PWR_SVMCR2_VDDIO5SV);
7010219c:	4b05      	ldr	r3, [pc, #20]	@ (701021b4 <HAL_PWREx_EnableVddIO5+0x1c>)
7010219e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
701021a0:	4a04      	ldr	r2, [pc, #16]	@ (701021b4 <HAL_PWREx_EnableVddIO5+0x1c>)
701021a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
701021a6:	6393      	str	r3, [r2, #56]	@ 0x38
}
701021a8:	bf00      	nop
701021aa:	46bd      	mov	sp, r7
701021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
701021b0:	4770      	bx	lr
701021b2:	bf00      	nop
701021b4:	56024800 	.word	0x56024800

701021b8 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_2
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
701021b8:	b480      	push	{r7}
701021ba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
701021bc:	4b04      	ldr	r3, [pc, #16]	@ (701021d0 <LL_RCC_HSI_GetDivider+0x18>)
701021be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
701021c0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
701021c4:	4618      	mov	r0, r3
701021c6:	46bd      	mov	sp, r7
701021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
701021cc:	4770      	bx	lr
701021ce:	bf00      	nop
701021d0:	56028000 	.word	0x56028000

701021d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
701021d4:	b480      	push	{r7}
701021d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
701021d8:	4b04      	ldr	r3, [pc, #16]	@ (701021ec <LL_RCC_GetSysClkSource+0x18>)
701021da:	6a1b      	ldr	r3, [r3, #32]
701021dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
701021e0:	4618      	mov	r0, r3
701021e2:	46bd      	mov	sp, r7
701021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
701021e8:	4770      	bx	lr
701021ea:	bf00      	nop
701021ec:	56028000 	.word	0x56028000

701021f0 <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
701021f0:	b480      	push	{r7}
701021f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
701021f4:	4b04      	ldr	r3, [pc, #16]	@ (70102208 <LL_RCC_IC2_GetSource+0x18>)
701021f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
701021fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
701021fe:	4618      	mov	r0, r3
70102200:	46bd      	mov	sp, r7
70102202:	f85d 7b04 	ldr.w	r7, [sp], #4
70102206:	4770      	bx	lr
70102208:	56028000 	.word	0x56028000

7010220c <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
7010220c:	b480      	push	{r7}
7010220e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
70102210:	4b05      	ldr	r3, [pc, #20]	@ (70102228 <LL_RCC_IC2_GetDivider+0x1c>)
70102212:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
70102216:	0c1b      	lsrs	r3, r3, #16
70102218:	b2db      	uxtb	r3, r3
7010221a:	3301      	adds	r3, #1
}
7010221c:	4618      	mov	r0, r3
7010221e:	46bd      	mov	sp, r7
70102220:	f85d 7b04 	ldr.w	r7, [sp], #4
70102224:	4770      	bx	lr
70102226:	bf00      	nop
70102228:	56028000 	.word	0x56028000

7010222c <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
7010222c:	b598      	push	{r3, r4, r7, lr}
7010222e:	af00      	add	r7, sp, #0
  return RCC_GetSysClockFreq(LL_RCC_IC2_GetSource(), LL_RCC_IC2_GetDivider());
70102230:	f7ff ffde 	bl	701021f0 <LL_RCC_IC2_GetSource>
70102234:	4604      	mov	r4, r0
70102236:	f7ff ffe9 	bl	7010220c <LL_RCC_IC2_GetDivider>
7010223a:	4603      	mov	r3, r0
7010223c:	4619      	mov	r1, r3
7010223e:	4620      	mov	r0, r4
70102240:	f000 f804 	bl	7010224c <RCC_GetSysClockFreq>
70102244:	4603      	mov	r3, r0
}
70102246:	4618      	mov	r0, r3
70102248:	bd98      	pop	{r3, r4, r7, pc}
	...

7010224c <RCC_GetSysClockFreq>:
  * @param  icx_divider The intermediate clock divider
  *
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreq(uint32_t icx_source, uint32_t icx_divider)
{
7010224c:	b580      	push	{r7, lr}
7010224e:	b084      	sub	sp, #16
70102250:	af00      	add	r7, sp, #0
70102252:	6078      	str	r0, [r7, #4]
70102254:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
70102256:	2300      	movs	r3, #0
70102258:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
7010225a:	f7ff ffbb 	bl	701021d4 <LL_RCC_GetSysClkSource>
7010225e:	4603      	mov	r3, r0
70102260:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70102264:	d026      	beq.n	701022b4 <RCC_GetSysClockFreq+0x68>
70102266:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010226a:	d861      	bhi.n	70102330 <RCC_GetSysClockFreq+0xe4>
7010226c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70102270:	d01d      	beq.n	701022ae <RCC_GetSysClockFreq+0x62>
70102272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70102276:	d85b      	bhi.n	70102330 <RCC_GetSysClockFreq+0xe4>
70102278:	2b00      	cmp	r3, #0
7010227a:	d003      	beq.n	70102284 <RCC_GetSysClockFreq+0x38>
7010227c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70102280:	d009      	beq.n	70102296 <RCC_GetSysClockFreq+0x4a>
      }
      break;

    default:
      /* Unexpected case */
      break;
70102282:	e055      	b.n	70102330 <RCC_GetSysClockFreq+0xe4>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70102284:	f7ff ff98 	bl	701021b8 <LL_RCC_HSI_GetDivider>
70102288:	4603      	mov	r3, r0
7010228a:	09db      	lsrs	r3, r3, #7
7010228c:	4a2b      	ldr	r2, [pc, #172]	@ (7010233c <RCC_GetSysClockFreq+0xf0>)
7010228e:	fa22 f303 	lsr.w	r3, r2, r3
70102292:	60fb      	str	r3, [r7, #12]
      break;
70102294:	e04d      	b.n	70102332 <RCC_GetSysClockFreq+0xe6>
      frequency = RCC_GET_MSI_FREQUENCY();
70102296:	4b2a      	ldr	r3, [pc, #168]	@ (70102340 <RCC_GetSysClockFreq+0xf4>)
70102298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
7010229a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
7010229e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
701022a2:	d101      	bne.n	701022a8 <RCC_GetSysClockFreq+0x5c>
701022a4:	4b27      	ldr	r3, [pc, #156]	@ (70102344 <RCC_GetSysClockFreq+0xf8>)
701022a6:	e000      	b.n	701022aa <RCC_GetSysClockFreq+0x5e>
701022a8:	4b27      	ldr	r3, [pc, #156]	@ (70102348 <RCC_GetSysClockFreq+0xfc>)
701022aa:	60fb      	str	r3, [r7, #12]
      break;
701022ac:	e041      	b.n	70102332 <RCC_GetSysClockFreq+0xe6>
      frequency = HSE_VALUE;
701022ae:	4b27      	ldr	r3, [pc, #156]	@ (7010234c <RCC_GetSysClockFreq+0x100>)
701022b0:	60fb      	str	r3, [r7, #12]
      break;
701022b2:	e03e      	b.n	70102332 <RCC_GetSysClockFreq+0xe6>
      switch (icx_source)
701022b4:	687b      	ldr	r3, [r7, #4]
701022b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701022ba:	d02e      	beq.n	7010231a <RCC_GetSysClockFreq+0xce>
701022bc:	687b      	ldr	r3, [r7, #4]
701022be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701022c2:	d833      	bhi.n	7010232c <RCC_GetSysClockFreq+0xe0>
701022c4:	687b      	ldr	r3, [r7, #4]
701022c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701022ca:	d01d      	beq.n	70102308 <RCC_GetSysClockFreq+0xbc>
701022cc:	687b      	ldr	r3, [r7, #4]
701022ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701022d2:	d82b      	bhi.n	7010232c <RCC_GetSysClockFreq+0xe0>
701022d4:	687b      	ldr	r3, [r7, #4]
701022d6:	2b00      	cmp	r3, #0
701022d8:	d004      	beq.n	701022e4 <RCC_GetSysClockFreq+0x98>
701022da:	687b      	ldr	r3, [r7, #4]
701022dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
701022e0:	d009      	beq.n	701022f6 <RCC_GetSysClockFreq+0xaa>
          break;
701022e2:	e023      	b.n	7010232c <RCC_GetSysClockFreq+0xe0>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
701022e4:	f004 faf0 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
701022e8:	60f8      	str	r0, [r7, #12]
          frequency = frequency / icx_divider;
701022ea:	68fa      	ldr	r2, [r7, #12]
701022ec:	683b      	ldr	r3, [r7, #0]
701022ee:	fbb2 f3f3 	udiv	r3, r2, r3
701022f2:	60fb      	str	r3, [r7, #12]
          break;
701022f4:	e01b      	b.n	7010232e <RCC_GetSysClockFreq+0xe2>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
701022f6:	f004 fb2d 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
701022fa:	60f8      	str	r0, [r7, #12]
          frequency = frequency / icx_divider;
701022fc:	68fa      	ldr	r2, [r7, #12]
701022fe:	683b      	ldr	r3, [r7, #0]
70102300:	fbb2 f3f3 	udiv	r3, r2, r3
70102304:	60fb      	str	r3, [r7, #12]
          break;
70102306:	e012      	b.n	7010232e <RCC_GetSysClockFreq+0xe2>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
70102308:	f004 fb6a 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010230c:	60f8      	str	r0, [r7, #12]
          frequency = frequency / icx_divider;
7010230e:	68fa      	ldr	r2, [r7, #12]
70102310:	683b      	ldr	r3, [r7, #0]
70102312:	fbb2 f3f3 	udiv	r3, r2, r3
70102316:	60fb      	str	r3, [r7, #12]
          break;
70102318:	e009      	b.n	7010232e <RCC_GetSysClockFreq+0xe2>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
7010231a:	f004 fba7 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
7010231e:	60f8      	str	r0, [r7, #12]
          frequency = frequency / icx_divider;
70102320:	68fa      	ldr	r2, [r7, #12]
70102322:	683b      	ldr	r3, [r7, #0]
70102324:	fbb2 f3f3 	udiv	r3, r2, r3
70102328:	60fb      	str	r3, [r7, #12]
          break;
7010232a:	e000      	b.n	7010232e <RCC_GetSysClockFreq+0xe2>
          break;
7010232c:	bf00      	nop
      break;
7010232e:	e000      	b.n	70102332 <RCC_GetSysClockFreq+0xe6>
      break;
70102330:	bf00      	nop
  }

  return frequency;
70102332:	68fb      	ldr	r3, [r7, #12]
}
70102334:	4618      	mov	r0, r3
70102336:	3710      	adds	r7, #16
70102338:	46bd      	mov	sp, r7
7010233a:	bd80      	pop	{r7, pc}
7010233c:	03d09000 	.word	0x03d09000
70102340:	56028000 	.word	0x56028000
70102344:	00f42400 	.word	0x00f42400
70102348:	003d0900 	.word	0x003d0900
7010234c:	016e3600 	.word	0x016e3600

70102350 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
70102350:	b480      	push	{r7}
70102352:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
70102354:	4b05      	ldr	r3, [pc, #20]	@ (7010236c <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
70102356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70102358:	4a04      	ldr	r2, [pc, #16]	@ (7010236c <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
7010235a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
7010235e:	6553      	str	r3, [r2, #84]	@ 0x54
}
70102360:	bf00      	nop
70102362:	46bd      	mov	sp, r7
70102364:	f85d 7b04 	ldr.w	r7, [sp], #4
70102368:	4770      	bx	lr
7010236a:	bf00      	nop
7010236c:	56028000 	.word	0x56028000

70102370 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
70102370:	b480      	push	{r7}
70102372:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
70102374:	4b05      	ldr	r3, [pc, #20]	@ (7010238c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
70102376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70102378:	4a04      	ldr	r2, [pc, #16]	@ (7010238c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
7010237a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7010237e:	6553      	str	r3, [r2, #84]	@ 0x54
}
70102380:	bf00      	nop
70102382:	46bd      	mov	sp, r7
70102384:	f85d 7b04 	ldr.w	r7, [sp], #4
70102388:	4770      	bx	lr
7010238a:	bf00      	nop
7010238c:	56028000 	.word	0x56028000

70102390 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
70102390:	b480      	push	{r7}
70102392:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
70102394:	4b06      	ldr	r3, [pc, #24]	@ (701023b0 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
70102396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70102398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
7010239c:	2b40      	cmp	r3, #64	@ 0x40
7010239e:	d101      	bne.n	701023a4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
701023a0:	2301      	movs	r3, #1
701023a2:	e000      	b.n	701023a6 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
701023a4:	2300      	movs	r3, #0
}
701023a6:	4618      	mov	r0, r3
701023a8:	46bd      	mov	sp, r7
701023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
701023ae:	4770      	bx	lr
701023b0:	56028000 	.word	0x56028000

701023b4 <LL_RCC_HSE_IsReady>:
{
701023b4:	b480      	push	{r7}
701023b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
701023b8:	4b06      	ldr	r3, [pc, #24]	@ (701023d4 <LL_RCC_HSE_IsReady+0x20>)
701023ba:	685b      	ldr	r3, [r3, #4]
701023bc:	f003 0310 	and.w	r3, r3, #16
701023c0:	2b00      	cmp	r3, #0
701023c2:	d001      	beq.n	701023c8 <LL_RCC_HSE_IsReady+0x14>
701023c4:	2301      	movs	r3, #1
701023c6:	e000      	b.n	701023ca <LL_RCC_HSE_IsReady+0x16>
701023c8:	2300      	movs	r3, #0
}
701023ca:	4618      	mov	r0, r3
701023cc:	46bd      	mov	sp, r7
701023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
701023d2:	4770      	bx	lr
701023d4:	56028000 	.word	0x56028000

701023d8 <LL_RCC_HSI_IsReady>:
{
701023d8:	b480      	push	{r7}
701023da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
701023dc:	4b06      	ldr	r3, [pc, #24]	@ (701023f8 <LL_RCC_HSI_IsReady+0x20>)
701023de:	685b      	ldr	r3, [r3, #4]
701023e0:	f003 0308 	and.w	r3, r3, #8
701023e4:	2b00      	cmp	r3, #0
701023e6:	d001      	beq.n	701023ec <LL_RCC_HSI_IsReady+0x14>
701023e8:	2301      	movs	r3, #1
701023ea:	e000      	b.n	701023ee <LL_RCC_HSI_IsReady+0x16>
701023ec:	2300      	movs	r3, #0
}
701023ee:	4618      	mov	r0, r3
701023f0:	46bd      	mov	sp, r7
701023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
701023f6:	4770      	bx	lr
701023f8:	56028000 	.word	0x56028000

701023fc <LL_RCC_HSI_GetDivider>:
{
701023fc:	b480      	push	{r7}
701023fe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
70102400:	4b04      	ldr	r3, [pc, #16]	@ (70102414 <LL_RCC_HSI_GetDivider+0x18>)
70102402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
70102404:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
70102408:	4618      	mov	r0, r3
7010240a:	46bd      	mov	sp, r7
7010240c:	f85d 7b04 	ldr.w	r7, [sp], #4
70102410:	4770      	bx	lr
70102412:	bf00      	nop
70102414:	56028000 	.word	0x56028000

70102418 <LL_RCC_MSI_IsReady>:
{
70102418:	b480      	push	{r7}
7010241a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
7010241c:	4b06      	ldr	r3, [pc, #24]	@ (70102438 <LL_RCC_MSI_IsReady+0x20>)
7010241e:	685b      	ldr	r3, [r3, #4]
70102420:	f003 0304 	and.w	r3, r3, #4
70102424:	2b00      	cmp	r3, #0
70102426:	d001      	beq.n	7010242c <LL_RCC_MSI_IsReady+0x14>
70102428:	2301      	movs	r3, #1
7010242a:	e000      	b.n	7010242e <LL_RCC_MSI_IsReady+0x16>
7010242c:	2300      	movs	r3, #0
}
7010242e:	4618      	mov	r0, r3
70102430:	46bd      	mov	sp, r7
70102432:	f85d 7b04 	ldr.w	r7, [sp], #4
70102436:	4770      	bx	lr
70102438:	56028000 	.word	0x56028000

7010243c <LL_RCC_MSI_GetFrequency>:
{
7010243c:	b480      	push	{r7}
7010243e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
70102440:	4b04      	ldr	r3, [pc, #16]	@ (70102454 <LL_RCC_MSI_GetFrequency+0x18>)
70102442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70102444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
70102448:	4618      	mov	r0, r3
7010244a:	46bd      	mov	sp, r7
7010244c:	f85d 7b04 	ldr.w	r7, [sp], #4
70102450:	4770      	bx	lr
70102452:	bf00      	nop
70102454:	56028000 	.word	0x56028000

70102458 <LL_RCC_LSE_IsReady>:
{
70102458:	b480      	push	{r7}
7010245a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
7010245c:	4b06      	ldr	r3, [pc, #24]	@ (70102478 <LL_RCC_LSE_IsReady+0x20>)
7010245e:	685b      	ldr	r3, [r3, #4]
70102460:	f003 0302 	and.w	r3, r3, #2
70102464:	2b00      	cmp	r3, #0
70102466:	d001      	beq.n	7010246c <LL_RCC_LSE_IsReady+0x14>
70102468:	2301      	movs	r3, #1
7010246a:	e000      	b.n	7010246e <LL_RCC_LSE_IsReady+0x16>
7010246c:	2300      	movs	r3, #0
}
7010246e:	4618      	mov	r0, r3
70102470:	46bd      	mov	sp, r7
70102472:	f85d 7b04 	ldr.w	r7, [sp], #4
70102476:	4770      	bx	lr
70102478:	56028000 	.word	0x56028000

7010247c <LL_RCC_LSI_IsReady>:
{
7010247c:	b480      	push	{r7}
7010247e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
70102480:	4b04      	ldr	r3, [pc, #16]	@ (70102494 <LL_RCC_LSI_IsReady+0x18>)
70102482:	685b      	ldr	r3, [r3, #4]
70102484:	f003 0301 	and.w	r3, r3, #1
}
70102488:	4618      	mov	r0, r3
7010248a:	46bd      	mov	sp, r7
7010248c:	f85d 7b04 	ldr.w	r7, [sp], #4
70102490:	4770      	bx	lr
70102492:	bf00      	nop
70102494:	56028000 	.word	0x56028000

70102498 <LL_RCC_GetAHBPrescaler>:
{
70102498:	b480      	push	{r7}
7010249a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
7010249c:	4b04      	ldr	r3, [pc, #16]	@ (701024b0 <LL_RCC_GetAHBPrescaler+0x18>)
7010249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
701024a0:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
701024a4:	4618      	mov	r0, r3
701024a6:	46bd      	mov	sp, r7
701024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
701024ac:	4770      	bx	lr
701024ae:	bf00      	nop
701024b0:	56028000 	.word	0x56028000

701024b4 <LL_RCC_GetAPB1Prescaler>:
{
701024b4:	b480      	push	{r7}
701024b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
701024b8:	4b04      	ldr	r3, [pc, #16]	@ (701024cc <LL_RCC_GetAPB1Prescaler+0x18>)
701024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
701024bc:	f003 0307 	and.w	r3, r3, #7
}
701024c0:	4618      	mov	r0, r3
701024c2:	46bd      	mov	sp, r7
701024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
701024c8:	4770      	bx	lr
701024ca:	bf00      	nop
701024cc:	56028000 	.word	0x56028000

701024d0 <LL_RCC_GetAPB2Prescaler>:
{
701024d0:	b480      	push	{r7}
701024d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
701024d4:	4b04      	ldr	r3, [pc, #16]	@ (701024e8 <LL_RCC_GetAPB2Prescaler+0x18>)
701024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
701024d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
701024dc:	4618      	mov	r0, r3
701024de:	46bd      	mov	sp, r7
701024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
701024e4:	4770      	bx	lr
701024e6:	bf00      	nop
701024e8:	56028000 	.word	0x56028000

701024ec <LL_RCC_GetAPB4Prescaler>:
{
701024ec:	b480      	push	{r7}
701024ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
701024f0:	4b04      	ldr	r3, [pc, #16]	@ (70102504 <LL_RCC_GetAPB4Prescaler+0x18>)
701024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
701024f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
701024f8:	4618      	mov	r0, r3
701024fa:	46bd      	mov	sp, r7
701024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
70102500:	4770      	bx	lr
70102502:	bf00      	nop
70102504:	56028000 	.word	0x56028000

70102508 <LL_RCC_GetAPB5Prescaler>:
{
70102508:	b480      	push	{r7}
7010250a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
7010250c:	4b04      	ldr	r3, [pc, #16]	@ (70102520 <LL_RCC_GetAPB5Prescaler+0x18>)
7010250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70102510:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
70102514:	4618      	mov	r0, r3
70102516:	46bd      	mov	sp, r7
70102518:	f85d 7b04 	ldr.w	r7, [sp], #4
7010251c:	4770      	bx	lr
7010251e:	bf00      	nop
70102520:	56028000 	.word	0x56028000

70102524 <LL_RCC_SetClockSource>:
{
70102524:	b480      	push	{r7}
70102526:	b085      	sub	sp, #20
70102528:	af00      	add	r7, sp, #0
7010252a:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
7010252c:	687b      	ldr	r3, [r7, #4]
7010252e:	b2da      	uxtb	r2, r3
70102530:	4b10      	ldr	r3, [pc, #64]	@ (70102574 <LL_RCC_SetClockSource+0x50>)
70102532:	4413      	add	r3, r2
70102534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
70102536:	68fb      	ldr	r3, [r7, #12]
70102538:	681a      	ldr	r2, [r3, #0]
7010253a:	687b      	ldr	r3, [r7, #4]
7010253c:	0e19      	lsrs	r1, r3, #24
7010253e:	687b      	ldr	r3, [r7, #4]
70102540:	0a1b      	lsrs	r3, r3, #8
70102542:	f003 031f 	and.w	r3, r3, #31
70102546:	fa01 f303 	lsl.w	r3, r1, r3
7010254a:	43db      	mvns	r3, r3
7010254c:	401a      	ands	r2, r3
7010254e:	687b      	ldr	r3, [r7, #4]
70102550:	0c1b      	lsrs	r3, r3, #16
70102552:	b2d9      	uxtb	r1, r3
70102554:	687b      	ldr	r3, [r7, #4]
70102556:	0a1b      	lsrs	r3, r3, #8
70102558:	f003 031f 	and.w	r3, r3, #31
7010255c:	fa01 f303 	lsl.w	r3, r1, r3
70102560:	431a      	orrs	r2, r3
70102562:	68fb      	ldr	r3, [r7, #12]
70102564:	601a      	str	r2, [r3, #0]
}
70102566:	bf00      	nop
70102568:	3714      	adds	r7, #20
7010256a:	46bd      	mov	sp, r7
7010256c:	f85d 7b04 	ldr.w	r7, [sp], #4
70102570:	4770      	bx	lr
70102572:	bf00      	nop
70102574:	56028144 	.word	0x56028144

70102578 <LL_RCC_GetADCPrescaler>:
{
70102578:	b480      	push	{r7}
7010257a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
7010257c:	4b04      	ldr	r3, [pc, #16]	@ (70102590 <LL_RCC_GetADCPrescaler+0x18>)
7010257e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
70102582:	0a1b      	lsrs	r3, r3, #8
70102584:	b2db      	uxtb	r3, r3
}
70102586:	4618      	mov	r0, r3
70102588:	46bd      	mov	sp, r7
7010258a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010258e:	4770      	bx	lr
70102590:	56028000 	.word	0x56028000

70102594 <LL_RCC_SetADFClockSource>:
{
70102594:	b480      	push	{r7}
70102596:	b083      	sub	sp, #12
70102598:	af00      	add	r7, sp, #0
7010259a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
7010259c:	4b07      	ldr	r3, [pc, #28]	@ (701025bc <LL_RCC_SetADFClockSource+0x28>)
7010259e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
701025a2:	f023 0207 	bic.w	r2, r3, #7
701025a6:	4905      	ldr	r1, [pc, #20]	@ (701025bc <LL_RCC_SetADFClockSource+0x28>)
701025a8:	687b      	ldr	r3, [r7, #4]
701025aa:	4313      	orrs	r3, r2
701025ac:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
701025b0:	bf00      	nop
701025b2:	370c      	adds	r7, #12
701025b4:	46bd      	mov	sp, r7
701025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
701025ba:	4770      	bx	lr
701025bc:	56028000 	.word	0x56028000

701025c0 <LL_RCC_SetCLKPClockSource>:
{
701025c0:	b480      	push	{r7}
701025c2:	b083      	sub	sp, #12
701025c4:	af00      	add	r7, sp, #0
701025c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
701025c8:	4b07      	ldr	r3, [pc, #28]	@ (701025e8 <LL_RCC_SetCLKPClockSource+0x28>)
701025ca:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
701025ce:	f023 0207 	bic.w	r2, r3, #7
701025d2:	4905      	ldr	r1, [pc, #20]	@ (701025e8 <LL_RCC_SetCLKPClockSource+0x28>)
701025d4:	687b      	ldr	r3, [r7, #4]
701025d6:	4313      	orrs	r3, r2
701025d8:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
701025dc:	bf00      	nop
701025de:	370c      	adds	r7, #12
701025e0:	46bd      	mov	sp, r7
701025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
701025e6:	4770      	bx	lr
701025e8:	56028000 	.word	0x56028000

701025ec <LL_RCC_SetDCMIPPClockSource>:
{
701025ec:	b480      	push	{r7}
701025ee:	b083      	sub	sp, #12
701025f0:	af00      	add	r7, sp, #0
701025f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
701025f4:	4b07      	ldr	r3, [pc, #28]	@ (70102614 <LL_RCC_SetDCMIPPClockSource+0x28>)
701025f6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
701025fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
701025fe:	4905      	ldr	r1, [pc, #20]	@ (70102614 <LL_RCC_SetDCMIPPClockSource+0x28>)
70102600:	687b      	ldr	r3, [r7, #4]
70102602:	4313      	orrs	r3, r2
70102604:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
70102608:	bf00      	nop
7010260a:	370c      	adds	r7, #12
7010260c:	46bd      	mov	sp, r7
7010260e:	f85d 7b04 	ldr.w	r7, [sp], #4
70102612:	4770      	bx	lr
70102614:	56028000 	.word	0x56028000

70102618 <LL_RCC_SetETHClockSource>:
{
70102618:	b480      	push	{r7}
7010261a:	b083      	sub	sp, #12
7010261c:	af00      	add	r7, sp, #0
7010261e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
70102620:	4b07      	ldr	r3, [pc, #28]	@ (70102640 <LL_RCC_SetETHClockSource+0x28>)
70102622:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
70102626:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
7010262a:	4905      	ldr	r1, [pc, #20]	@ (70102640 <LL_RCC_SetETHClockSource+0x28>)
7010262c:	687b      	ldr	r3, [r7, #4]
7010262e:	4313      	orrs	r3, r2
70102630:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
70102634:	bf00      	nop
70102636:	370c      	adds	r7, #12
70102638:	46bd      	mov	sp, r7
7010263a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010263e:	4770      	bx	lr
70102640:	56028000 	.word	0x56028000

70102644 <LL_RCC_SetETHPHYInterface>:
{
70102644:	b480      	push	{r7}
70102646:	b083      	sub	sp, #12
70102648:	af00      	add	r7, sp, #0
7010264a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
7010264c:	4b07      	ldr	r3, [pc, #28]	@ (7010266c <LL_RCC_SetETHPHYInterface+0x28>)
7010264e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
70102652:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
70102656:	4905      	ldr	r1, [pc, #20]	@ (7010266c <LL_RCC_SetETHPHYInterface+0x28>)
70102658:	687b      	ldr	r3, [r7, #4]
7010265a:	4313      	orrs	r3, r2
7010265c:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
70102660:	bf00      	nop
70102662:	370c      	adds	r7, #12
70102664:	46bd      	mov	sp, r7
70102666:	f85d 7b04 	ldr.w	r7, [sp], #4
7010266a:	4770      	bx	lr
7010266c:	56028000 	.word	0x56028000

70102670 <LL_RCC_GetETH1PTPDivider>:
{
70102670:	b480      	push	{r7}
70102672:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
70102674:	4b04      	ldr	r3, [pc, #16]	@ (70102688 <LL_RCC_GetETH1PTPDivider+0x18>)
70102676:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
7010267a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
7010267e:	4618      	mov	r0, r3
70102680:	46bd      	mov	sp, r7
70102682:	f85d 7b04 	ldr.w	r7, [sp], #4
70102686:	4770      	bx	lr
70102688:	56028000 	.word	0x56028000

7010268c <LL_RCC_SetETHREFRXClockSource>:
{
7010268c:	b480      	push	{r7}
7010268e:	b083      	sub	sp, #12
70102690:	af00      	add	r7, sp, #0
70102692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
70102694:	4b07      	ldr	r3, [pc, #28]	@ (701026b4 <LL_RCC_SetETHREFRXClockSource+0x28>)
70102696:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
7010269a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
7010269e:	4905      	ldr	r1, [pc, #20]	@ (701026b4 <LL_RCC_SetETHREFRXClockSource+0x28>)
701026a0:	687b      	ldr	r3, [r7, #4]
701026a2:	4313      	orrs	r3, r2
701026a4:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
701026a8:	bf00      	nop
701026aa:	370c      	adds	r7, #12
701026ac:	46bd      	mov	sp, r7
701026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
701026b2:	4770      	bx	lr
701026b4:	56028000 	.word	0x56028000

701026b8 <LL_RCC_SetETHREFTXClockSource>:
{
701026b8:	b480      	push	{r7}
701026ba:	b083      	sub	sp, #12
701026bc:	af00      	add	r7, sp, #0
701026be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
701026c0:	4b07      	ldr	r3, [pc, #28]	@ (701026e0 <LL_RCC_SetETHREFTXClockSource+0x28>)
701026c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
701026c6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
701026ca:	4905      	ldr	r1, [pc, #20]	@ (701026e0 <LL_RCC_SetETHREFTXClockSource+0x28>)
701026cc:	687b      	ldr	r3, [r7, #4]
701026ce:	4313      	orrs	r3, r2
701026d0:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
701026d4:	bf00      	nop
701026d6:	370c      	adds	r7, #12
701026d8:	46bd      	mov	sp, r7
701026da:	f85d 7b04 	ldr.w	r7, [sp], #4
701026de:	4770      	bx	lr
701026e0:	56028000 	.word	0x56028000

701026e4 <LL_RCC_SetFDCANClockSource>:
{
701026e4:	b480      	push	{r7}
701026e6:	b083      	sub	sp, #12
701026e8:	af00      	add	r7, sp, #0
701026ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
701026ec:	4b07      	ldr	r3, [pc, #28]	@ (7010270c <LL_RCC_SetFDCANClockSource+0x28>)
701026ee:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
701026f2:	f023 0203 	bic.w	r2, r3, #3
701026f6:	4905      	ldr	r1, [pc, #20]	@ (7010270c <LL_RCC_SetFDCANClockSource+0x28>)
701026f8:	687b      	ldr	r3, [r7, #4]
701026fa:	4313      	orrs	r3, r2
701026fc:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
70102700:	bf00      	nop
70102702:	370c      	adds	r7, #12
70102704:	46bd      	mov	sp, r7
70102706:	f85d 7b04 	ldr.w	r7, [sp], #4
7010270a:	4770      	bx	lr
7010270c:	56028000 	.word	0x56028000

70102710 <LL_RCC_SetFMCClockSource>:
{
70102710:	b480      	push	{r7}
70102712:	b083      	sub	sp, #12
70102714:	af00      	add	r7, sp, #0
70102716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
70102718:	4b07      	ldr	r3, [pc, #28]	@ (70102738 <LL_RCC_SetFMCClockSource+0x28>)
7010271a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
7010271e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
70102722:	4905      	ldr	r1, [pc, #20]	@ (70102738 <LL_RCC_SetFMCClockSource+0x28>)
70102724:	687b      	ldr	r3, [r7, #4]
70102726:	4313      	orrs	r3, r2
70102728:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
7010272c:	bf00      	nop
7010272e:	370c      	adds	r7, #12
70102730:	46bd      	mov	sp, r7
70102732:	f85d 7b04 	ldr.w	r7, [sp], #4
70102736:	4770      	bx	lr
70102738:	56028000 	.word	0x56028000

7010273c <LL_RCC_SetI2CClockSource>:
{
7010273c:	b580      	push	{r7, lr}
7010273e:	b082      	sub	sp, #8
70102740:	af00      	add	r7, sp, #0
70102742:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
70102744:	6878      	ldr	r0, [r7, #4]
70102746:	f7ff feed 	bl	70102524 <LL_RCC_SetClockSource>
}
7010274a:	bf00      	nop
7010274c:	3708      	adds	r7, #8
7010274e:	46bd      	mov	sp, r7
70102750:	bd80      	pop	{r7, pc}

70102752 <LL_RCC_SetI3CClockSource>:
{
70102752:	b580      	push	{r7, lr}
70102754:	b082      	sub	sp, #8
70102756:	af00      	add	r7, sp, #0
70102758:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
7010275a:	6878      	ldr	r0, [r7, #4]
7010275c:	f7ff fee2 	bl	70102524 <LL_RCC_SetClockSource>
}
70102760:	bf00      	nop
70102762:	3708      	adds	r7, #8
70102764:	46bd      	mov	sp, r7
70102766:	bd80      	pop	{r7, pc}

70102768 <LL_RCC_SetLPTIMClockSource>:
{
70102768:	b580      	push	{r7, lr}
7010276a:	b082      	sub	sp, #8
7010276c:	af00      	add	r7, sp, #0
7010276e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
70102770:	6878      	ldr	r0, [r7, #4]
70102772:	f7ff fed7 	bl	70102524 <LL_RCC_SetClockSource>
}
70102776:	bf00      	nop
70102778:	3708      	adds	r7, #8
7010277a:	46bd      	mov	sp, r7
7010277c:	bd80      	pop	{r7, pc}
	...

70102780 <LL_RCC_SetLPUARTClockSource>:
{
70102780:	b480      	push	{r7}
70102782:	b083      	sub	sp, #12
70102784:	af00      	add	r7, sp, #0
70102786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
70102788:	4b07      	ldr	r3, [pc, #28]	@ (701027a8 <LL_RCC_SetLPUARTClockSource+0x28>)
7010278a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
7010278e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
70102792:	4905      	ldr	r1, [pc, #20]	@ (701027a8 <LL_RCC_SetLPUARTClockSource+0x28>)
70102794:	687b      	ldr	r3, [r7, #4]
70102796:	4313      	orrs	r3, r2
70102798:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
7010279c:	bf00      	nop
7010279e:	370c      	adds	r7, #12
701027a0:	46bd      	mov	sp, r7
701027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
701027a6:	4770      	bx	lr
701027a8:	56028000 	.word	0x56028000

701027ac <LL_RCC_SetLTDCClockSource>:
{
701027ac:	b480      	push	{r7}
701027ae:	b083      	sub	sp, #12
701027b0:	af00      	add	r7, sp, #0
701027b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
701027b4:	4b07      	ldr	r3, [pc, #28]	@ (701027d4 <LL_RCC_SetLTDCClockSource+0x28>)
701027b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
701027ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
701027be:	4905      	ldr	r1, [pc, #20]	@ (701027d4 <LL_RCC_SetLTDCClockSource+0x28>)
701027c0:	687b      	ldr	r3, [r7, #4]
701027c2:	4313      	orrs	r3, r2
701027c4:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
701027c8:	bf00      	nop
701027ca:	370c      	adds	r7, #12
701027cc:	46bd      	mov	sp, r7
701027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
701027d2:	4770      	bx	lr
701027d4:	56028000 	.word	0x56028000

701027d8 <LL_RCC_SetMDFClockSource>:
{
701027d8:	b480      	push	{r7}
701027da:	b083      	sub	sp, #12
701027dc:	af00      	add	r7, sp, #0
701027de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
701027e0:	4b07      	ldr	r3, [pc, #28]	@ (70102800 <LL_RCC_SetMDFClockSource+0x28>)
701027e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
701027e6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
701027ea:	4905      	ldr	r1, [pc, #20]	@ (70102800 <LL_RCC_SetMDFClockSource+0x28>)
701027ec:	687b      	ldr	r3, [r7, #4]
701027ee:	4313      	orrs	r3, r2
701027f0:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
701027f4:	bf00      	nop
701027f6:	370c      	adds	r7, #12
701027f8:	46bd      	mov	sp, r7
701027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
701027fe:	4770      	bx	lr
70102800:	56028000 	.word	0x56028000

70102804 <LL_RCC_SetOTGPHYClockSource>:
{
70102804:	b580      	push	{r7, lr}
70102806:	b082      	sub	sp, #8
70102808:	af00      	add	r7, sp, #0
7010280a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
7010280c:	6878      	ldr	r0, [r7, #4]
7010280e:	f7ff fe89 	bl	70102524 <LL_RCC_SetClockSource>
}
70102812:	bf00      	nop
70102814:	3708      	adds	r7, #8
70102816:	46bd      	mov	sp, r7
70102818:	bd80      	pop	{r7, pc}

7010281a <LL_RCC_SetOTGPHYCKREFClockSource>:
{
7010281a:	b580      	push	{r7, lr}
7010281c:	b082      	sub	sp, #8
7010281e:	af00      	add	r7, sp, #0
70102820:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
70102822:	6878      	ldr	r0, [r7, #4]
70102824:	f7ff fe7e 	bl	70102524 <LL_RCC_SetClockSource>
}
70102828:	bf00      	nop
7010282a:	3708      	adds	r7, #8
7010282c:	46bd      	mov	sp, r7
7010282e:	bd80      	pop	{r7, pc}

70102830 <LL_RCC_SetPSSIClockSource>:
{
70102830:	b480      	push	{r7}
70102832:	b083      	sub	sp, #12
70102834:	af00      	add	r7, sp, #0
70102836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
70102838:	4b07      	ldr	r3, [pc, #28]	@ (70102858 <LL_RCC_SetPSSIClockSource+0x28>)
7010283a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
7010283e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
70102842:	4905      	ldr	r1, [pc, #20]	@ (70102858 <LL_RCC_SetPSSIClockSource+0x28>)
70102844:	687b      	ldr	r3, [r7, #4]
70102846:	4313      	orrs	r3, r2
70102848:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
7010284c:	bf00      	nop
7010284e:	370c      	adds	r7, #12
70102850:	46bd      	mov	sp, r7
70102852:	f85d 7b04 	ldr.w	r7, [sp], #4
70102856:	4770      	bx	lr
70102858:	56028000 	.word	0x56028000

7010285c <LL_RCC_SetSAIClockSource>:
{
7010285c:	b580      	push	{r7, lr}
7010285e:	b082      	sub	sp, #8
70102860:	af00      	add	r7, sp, #0
70102862:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
70102864:	6878      	ldr	r0, [r7, #4]
70102866:	f7ff fe5d 	bl	70102524 <LL_RCC_SetClockSource>
}
7010286a:	bf00      	nop
7010286c:	3708      	adds	r7, #8
7010286e:	46bd      	mov	sp, r7
70102870:	bd80      	pop	{r7, pc}

70102872 <LL_RCC_SetSDMMCClockSource>:
{
70102872:	b580      	push	{r7, lr}
70102874:	b082      	sub	sp, #8
70102876:	af00      	add	r7, sp, #0
70102878:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
7010287a:	6878      	ldr	r0, [r7, #4]
7010287c:	f7ff fe52 	bl	70102524 <LL_RCC_SetClockSource>
}
70102880:	bf00      	nop
70102882:	3708      	adds	r7, #8
70102884:	46bd      	mov	sp, r7
70102886:	bd80      	pop	{r7, pc}

70102888 <LL_RCC_SetSPDIFRXClockSource>:
{
70102888:	b480      	push	{r7}
7010288a:	b083      	sub	sp, #12
7010288c:	af00      	add	r7, sp, #0
7010288e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
70102890:	4b07      	ldr	r3, [pc, #28]	@ (701028b0 <LL_RCC_SetSPDIFRXClockSource+0x28>)
70102892:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
70102896:	f023 0207 	bic.w	r2, r3, #7
7010289a:	4905      	ldr	r1, [pc, #20]	@ (701028b0 <LL_RCC_SetSPDIFRXClockSource+0x28>)
7010289c:	687b      	ldr	r3, [r7, #4]
7010289e:	4313      	orrs	r3, r2
701028a0:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
701028a4:	bf00      	nop
701028a6:	370c      	adds	r7, #12
701028a8:	46bd      	mov	sp, r7
701028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
701028ae:	4770      	bx	lr
701028b0:	56028000 	.word	0x56028000

701028b4 <LL_RCC_SetSPIClockSource>:
{
701028b4:	b580      	push	{r7, lr}
701028b6:	b082      	sub	sp, #8
701028b8:	af00      	add	r7, sp, #0
701028ba:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
701028bc:	6878      	ldr	r0, [r7, #4]
701028be:	f7ff fe31 	bl	70102524 <LL_RCC_SetClockSource>
}
701028c2:	bf00      	nop
701028c4:	3708      	adds	r7, #8
701028c6:	46bd      	mov	sp, r7
701028c8:	bd80      	pop	{r7, pc}

701028ca <LL_RCC_SetUSARTClockSource>:
{
701028ca:	b580      	push	{r7, lr}
701028cc:	b082      	sub	sp, #8
701028ce:	af00      	add	r7, sp, #0
701028d0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
701028d2:	6878      	ldr	r0, [r7, #4]
701028d4:	f7ff fe26 	bl	70102524 <LL_RCC_SetClockSource>
}
701028d8:	bf00      	nop
701028da:	3708      	adds	r7, #8
701028dc:	46bd      	mov	sp, r7
701028de:	bd80      	pop	{r7, pc}

701028e0 <LL_RCC_SetXSPIClockSource>:
{
701028e0:	b580      	push	{r7, lr}
701028e2:	b082      	sub	sp, #8
701028e4:	af00      	add	r7, sp, #0
701028e6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
701028e8:	6878      	ldr	r0, [r7, #4]
701028ea:	f7ff fe1b 	bl	70102524 <LL_RCC_SetClockSource>
}
701028ee:	bf00      	nop
701028f0:	3708      	adds	r7, #8
701028f2:	46bd      	mov	sp, r7
701028f4:	bd80      	pop	{r7, pc}
	...

701028f8 <LL_RCC_GetClockSource>:
{
701028f8:	b480      	push	{r7}
701028fa:	b085      	sub	sp, #20
701028fc:	af00      	add	r7, sp, #0
701028fe:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
70102900:	687b      	ldr	r3, [r7, #4]
70102902:	b2da      	uxtb	r2, r3
70102904:	4b0e      	ldr	r3, [pc, #56]	@ (70102940 <LL_RCC_GetClockSource+0x48>)
70102906:	4413      	add	r3, r2
70102908:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
7010290a:	68fb      	ldr	r3, [r7, #12]
7010290c:	681a      	ldr	r2, [r3, #0]
7010290e:	687b      	ldr	r3, [r7, #4]
70102910:	0e19      	lsrs	r1, r3, #24
70102912:	687b      	ldr	r3, [r7, #4]
70102914:	0a1b      	lsrs	r3, r3, #8
70102916:	f003 031f 	and.w	r3, r3, #31
7010291a:	fa01 f303 	lsl.w	r3, r1, r3
7010291e:	401a      	ands	r2, r3
70102920:	687b      	ldr	r3, [r7, #4]
70102922:	0a1b      	lsrs	r3, r3, #8
70102924:	f003 031f 	and.w	r3, r3, #31
70102928:	fa22 f303 	lsr.w	r3, r2, r3
7010292c:	041a      	lsls	r2, r3, #16
7010292e:	687b      	ldr	r3, [r7, #4]
70102930:	4313      	orrs	r3, r2
}
70102932:	4618      	mov	r0, r3
70102934:	3714      	adds	r7, #20
70102936:	46bd      	mov	sp, r7
70102938:	f85d 7b04 	ldr.w	r7, [sp], #4
7010293c:	4770      	bx	lr
7010293e:	bf00      	nop
70102940:	56028144 	.word	0x56028144

70102944 <LL_RCC_GetADCClockSource>:
{
70102944:	b480      	push	{r7}
70102946:	b083      	sub	sp, #12
70102948:	af00      	add	r7, sp, #0
7010294a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
7010294c:	4b05      	ldr	r3, [pc, #20]	@ (70102964 <LL_RCC_GetADCClockSource+0x20>)
7010294e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
70102952:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
70102956:	4618      	mov	r0, r3
70102958:	370c      	adds	r7, #12
7010295a:	46bd      	mov	sp, r7
7010295c:	f85d 7b04 	ldr.w	r7, [sp], #4
70102960:	4770      	bx	lr
70102962:	bf00      	nop
70102964:	56028000 	.word	0x56028000

70102968 <LL_RCC_GetADFClockSource>:
{
70102968:	b480      	push	{r7}
7010296a:	b083      	sub	sp, #12
7010296c:	af00      	add	r7, sp, #0
7010296e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
70102970:	4b05      	ldr	r3, [pc, #20]	@ (70102988 <LL_RCC_GetADFClockSource+0x20>)
70102972:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
70102976:	f003 0307 	and.w	r3, r3, #7
}
7010297a:	4618      	mov	r0, r3
7010297c:	370c      	adds	r7, #12
7010297e:	46bd      	mov	sp, r7
70102980:	f85d 7b04 	ldr.w	r7, [sp], #4
70102984:	4770      	bx	lr
70102986:	bf00      	nop
70102988:	56028000 	.word	0x56028000

7010298c <LL_RCC_GetCLKPClockSource>:
{
7010298c:	b480      	push	{r7}
7010298e:	b083      	sub	sp, #12
70102990:	af00      	add	r7, sp, #0
70102992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
70102994:	4b05      	ldr	r3, [pc, #20]	@ (701029ac <LL_RCC_GetCLKPClockSource+0x20>)
70102996:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
7010299a:	f003 0307 	and.w	r3, r3, #7
}
7010299e:	4618      	mov	r0, r3
701029a0:	370c      	adds	r7, #12
701029a2:	46bd      	mov	sp, r7
701029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
701029a8:	4770      	bx	lr
701029aa:	bf00      	nop
701029ac:	56028000 	.word	0x56028000

701029b0 <LL_RCC_GetDCMIPPClockSource>:
{
701029b0:	b480      	push	{r7}
701029b2:	b083      	sub	sp, #12
701029b4:	af00      	add	r7, sp, #0
701029b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
701029b8:	4b05      	ldr	r3, [pc, #20]	@ (701029d0 <LL_RCC_GetDCMIPPClockSource+0x20>)
701029ba:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
701029be:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
701029c2:	4618      	mov	r0, r3
701029c4:	370c      	adds	r7, #12
701029c6:	46bd      	mov	sp, r7
701029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
701029cc:	4770      	bx	lr
701029ce:	bf00      	nop
701029d0:	56028000 	.word	0x56028000

701029d4 <LL_RCC_GetETHClockSource>:
{
701029d4:	b480      	push	{r7}
701029d6:	b083      	sub	sp, #12
701029d8:	af00      	add	r7, sp, #0
701029da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
701029dc:	4b05      	ldr	r3, [pc, #20]	@ (701029f4 <LL_RCC_GetETHClockSource+0x20>)
701029de:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
701029e2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
701029e6:	4618      	mov	r0, r3
701029e8:	370c      	adds	r7, #12
701029ea:	46bd      	mov	sp, r7
701029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
701029f0:	4770      	bx	lr
701029f2:	bf00      	nop
701029f4:	56028000 	.word	0x56028000

701029f8 <LL_RCC_GetETHPTPClockSource>:
{
701029f8:	b480      	push	{r7}
701029fa:	b083      	sub	sp, #12
701029fc:	af00      	add	r7, sp, #0
701029fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
70102a00:	4b05      	ldr	r3, [pc, #20]	@ (70102a18 <LL_RCC_GetETHPTPClockSource+0x20>)
70102a02:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
70102a06:	f003 0303 	and.w	r3, r3, #3
}
70102a0a:	4618      	mov	r0, r3
70102a0c:	370c      	adds	r7, #12
70102a0e:	46bd      	mov	sp, r7
70102a10:	f85d 7b04 	ldr.w	r7, [sp], #4
70102a14:	4770      	bx	lr
70102a16:	bf00      	nop
70102a18:	56028000 	.word	0x56028000

70102a1c <LL_RCC_GetFDCANClockSource>:
{
70102a1c:	b480      	push	{r7}
70102a1e:	b083      	sub	sp, #12
70102a20:	af00      	add	r7, sp, #0
70102a22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
70102a24:	4b05      	ldr	r3, [pc, #20]	@ (70102a3c <LL_RCC_GetFDCANClockSource+0x20>)
70102a26:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
70102a2a:	f003 0303 	and.w	r3, r3, #3
}
70102a2e:	4618      	mov	r0, r3
70102a30:	370c      	adds	r7, #12
70102a32:	46bd      	mov	sp, r7
70102a34:	f85d 7b04 	ldr.w	r7, [sp], #4
70102a38:	4770      	bx	lr
70102a3a:	bf00      	nop
70102a3c:	56028000 	.word	0x56028000

70102a40 <LL_RCC_GetFMCClockSource>:
{
70102a40:	b480      	push	{r7}
70102a42:	b083      	sub	sp, #12
70102a44:	af00      	add	r7, sp, #0
70102a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
70102a48:	4b05      	ldr	r3, [pc, #20]	@ (70102a60 <LL_RCC_GetFMCClockSource+0x20>)
70102a4a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
70102a4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
70102a52:	4618      	mov	r0, r3
70102a54:	370c      	adds	r7, #12
70102a56:	46bd      	mov	sp, r7
70102a58:	f85d 7b04 	ldr.w	r7, [sp], #4
70102a5c:	4770      	bx	lr
70102a5e:	bf00      	nop
70102a60:	56028000 	.word	0x56028000

70102a64 <LL_RCC_GetI2CClockSource>:
{
70102a64:	b580      	push	{r7, lr}
70102a66:	b082      	sub	sp, #8
70102a68:	af00      	add	r7, sp, #0
70102a6a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
70102a6c:	6878      	ldr	r0, [r7, #4]
70102a6e:	f7ff ff43 	bl	701028f8 <LL_RCC_GetClockSource>
70102a72:	4603      	mov	r3, r0
}
70102a74:	4618      	mov	r0, r3
70102a76:	3708      	adds	r7, #8
70102a78:	46bd      	mov	sp, r7
70102a7a:	bd80      	pop	{r7, pc}

70102a7c <LL_RCC_GetI3CClockSource>:
{
70102a7c:	b580      	push	{r7, lr}
70102a7e:	b082      	sub	sp, #8
70102a80:	af00      	add	r7, sp, #0
70102a82:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
70102a84:	6878      	ldr	r0, [r7, #4]
70102a86:	f7ff ff37 	bl	701028f8 <LL_RCC_GetClockSource>
70102a8a:	4603      	mov	r3, r0
}
70102a8c:	4618      	mov	r0, r3
70102a8e:	3708      	adds	r7, #8
70102a90:	46bd      	mov	sp, r7
70102a92:	bd80      	pop	{r7, pc}

70102a94 <LL_RCC_GetLPTIMClockSource>:
{
70102a94:	b580      	push	{r7, lr}
70102a96:	b082      	sub	sp, #8
70102a98:	af00      	add	r7, sp, #0
70102a9a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
70102a9c:	6878      	ldr	r0, [r7, #4]
70102a9e:	f7ff ff2b 	bl	701028f8 <LL_RCC_GetClockSource>
70102aa2:	4603      	mov	r3, r0
}
70102aa4:	4618      	mov	r0, r3
70102aa6:	3708      	adds	r7, #8
70102aa8:	46bd      	mov	sp, r7
70102aaa:	bd80      	pop	{r7, pc}

70102aac <LL_RCC_GetLPUARTClockSource>:
{
70102aac:	b480      	push	{r7}
70102aae:	b083      	sub	sp, #12
70102ab0:	af00      	add	r7, sp, #0
70102ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
70102ab4:	4b05      	ldr	r3, [pc, #20]	@ (70102acc <LL_RCC_GetLPUARTClockSource+0x20>)
70102ab6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
70102aba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
70102abe:	4618      	mov	r0, r3
70102ac0:	370c      	adds	r7, #12
70102ac2:	46bd      	mov	sp, r7
70102ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
70102ac8:	4770      	bx	lr
70102aca:	bf00      	nop
70102acc:	56028000 	.word	0x56028000

70102ad0 <LL_RCC_GetLTDCClockSource>:
{
70102ad0:	b480      	push	{r7}
70102ad2:	b083      	sub	sp, #12
70102ad4:	af00      	add	r7, sp, #0
70102ad6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
70102ad8:	4b05      	ldr	r3, [pc, #20]	@ (70102af0 <LL_RCC_GetLTDCClockSource+0x20>)
70102ada:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
70102ade:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
70102ae2:	4618      	mov	r0, r3
70102ae4:	370c      	adds	r7, #12
70102ae6:	46bd      	mov	sp, r7
70102ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
70102aec:	4770      	bx	lr
70102aee:	bf00      	nop
70102af0:	56028000 	.word	0x56028000

70102af4 <LL_RCC_GetMDFClockSource>:
{
70102af4:	b480      	push	{r7}
70102af6:	b083      	sub	sp, #12
70102af8:	af00      	add	r7, sp, #0
70102afa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
70102afc:	4b05      	ldr	r3, [pc, #20]	@ (70102b14 <LL_RCC_GetMDFClockSource+0x20>)
70102afe:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
70102b02:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
70102b06:	4618      	mov	r0, r3
70102b08:	370c      	adds	r7, #12
70102b0a:	46bd      	mov	sp, r7
70102b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
70102b10:	4770      	bx	lr
70102b12:	bf00      	nop
70102b14:	56028000 	.word	0x56028000

70102b18 <LL_RCC_GetPSSIClockSource>:
{
70102b18:	b480      	push	{r7}
70102b1a:	b083      	sub	sp, #12
70102b1c:	af00      	add	r7, sp, #0
70102b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
70102b20:	4b05      	ldr	r3, [pc, #20]	@ (70102b38 <LL_RCC_GetPSSIClockSource+0x20>)
70102b22:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
70102b26:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
70102b2a:	4618      	mov	r0, r3
70102b2c:	370c      	adds	r7, #12
70102b2e:	46bd      	mov	sp, r7
70102b30:	f85d 7b04 	ldr.w	r7, [sp], #4
70102b34:	4770      	bx	lr
70102b36:	bf00      	nop
70102b38:	56028000 	.word	0x56028000

70102b3c <LL_RCC_GetSAIClockSource>:
{
70102b3c:	b580      	push	{r7, lr}
70102b3e:	b082      	sub	sp, #8
70102b40:	af00      	add	r7, sp, #0
70102b42:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
70102b44:	6878      	ldr	r0, [r7, #4]
70102b46:	f7ff fed7 	bl	701028f8 <LL_RCC_GetClockSource>
70102b4a:	4603      	mov	r3, r0
}
70102b4c:	4618      	mov	r0, r3
70102b4e:	3708      	adds	r7, #8
70102b50:	46bd      	mov	sp, r7
70102b52:	bd80      	pop	{r7, pc}

70102b54 <LL_RCC_GetSDMMCClockSource>:
{
70102b54:	b580      	push	{r7, lr}
70102b56:	b082      	sub	sp, #8
70102b58:	af00      	add	r7, sp, #0
70102b5a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
70102b5c:	6878      	ldr	r0, [r7, #4]
70102b5e:	f7ff fecb 	bl	701028f8 <LL_RCC_GetClockSource>
70102b62:	4603      	mov	r3, r0
}
70102b64:	4618      	mov	r0, r3
70102b66:	3708      	adds	r7, #8
70102b68:	46bd      	mov	sp, r7
70102b6a:	bd80      	pop	{r7, pc}

70102b6c <LL_RCC_GetSPDIFRXClockSource>:
{
70102b6c:	b480      	push	{r7}
70102b6e:	b083      	sub	sp, #12
70102b70:	af00      	add	r7, sp, #0
70102b72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
70102b74:	4b05      	ldr	r3, [pc, #20]	@ (70102b8c <LL_RCC_GetSPDIFRXClockSource+0x20>)
70102b76:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
70102b7a:	f003 0307 	and.w	r3, r3, #7
}
70102b7e:	4618      	mov	r0, r3
70102b80:	370c      	adds	r7, #12
70102b82:	46bd      	mov	sp, r7
70102b84:	f85d 7b04 	ldr.w	r7, [sp], #4
70102b88:	4770      	bx	lr
70102b8a:	bf00      	nop
70102b8c:	56028000 	.word	0x56028000

70102b90 <LL_RCC_GetSPIClockSource>:
{
70102b90:	b580      	push	{r7, lr}
70102b92:	b082      	sub	sp, #8
70102b94:	af00      	add	r7, sp, #0
70102b96:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
70102b98:	6878      	ldr	r0, [r7, #4]
70102b9a:	f7ff fead 	bl	701028f8 <LL_RCC_GetClockSource>
70102b9e:	4603      	mov	r3, r0
}
70102ba0:	4618      	mov	r0, r3
70102ba2:	3708      	adds	r7, #8
70102ba4:	46bd      	mov	sp, r7
70102ba6:	bd80      	pop	{r7, pc}

70102ba8 <LL_RCC_GetUSARTClockSource>:
{
70102ba8:	b580      	push	{r7, lr}
70102baa:	b082      	sub	sp, #8
70102bac:	af00      	add	r7, sp, #0
70102bae:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
70102bb0:	6878      	ldr	r0, [r7, #4]
70102bb2:	f7ff fea1 	bl	701028f8 <LL_RCC_GetClockSource>
70102bb6:	4603      	mov	r3, r0
}
70102bb8:	4618      	mov	r0, r3
70102bba:	3708      	adds	r7, #8
70102bbc:	46bd      	mov	sp, r7
70102bbe:	bd80      	pop	{r7, pc}

70102bc0 <LL_RCC_GetUARTClockSource>:
{
70102bc0:	b580      	push	{r7, lr}
70102bc2:	b082      	sub	sp, #8
70102bc4:	af00      	add	r7, sp, #0
70102bc6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
70102bc8:	6878      	ldr	r0, [r7, #4]
70102bca:	f7ff fe95 	bl	701028f8 <LL_RCC_GetClockSource>
70102bce:	4603      	mov	r3, r0
}
70102bd0:	4618      	mov	r0, r3
70102bd2:	3708      	adds	r7, #8
70102bd4:	46bd      	mov	sp, r7
70102bd6:	bd80      	pop	{r7, pc}

70102bd8 <LL_RCC_GetUSBClockSource>:
{
70102bd8:	b580      	push	{r7, lr}
70102bda:	b082      	sub	sp, #8
70102bdc:	af00      	add	r7, sp, #0
70102bde:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
70102be0:	6878      	ldr	r0, [r7, #4]
70102be2:	f7ff fe89 	bl	701028f8 <LL_RCC_GetClockSource>
70102be6:	4603      	mov	r3, r0
}
70102be8:	4618      	mov	r0, r3
70102bea:	3708      	adds	r7, #8
70102bec:	46bd      	mov	sp, r7
70102bee:	bd80      	pop	{r7, pc}

70102bf0 <LL_RCC_GetXSPIClockSource>:
{
70102bf0:	b580      	push	{r7, lr}
70102bf2:	b082      	sub	sp, #8
70102bf4:	af00      	add	r7, sp, #0
70102bf6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
70102bf8:	6878      	ldr	r0, [r7, #4]
70102bfa:	f7ff fe7d 	bl	701028f8 <LL_RCC_GetClockSource>
70102bfe:	4603      	mov	r3, r0
}
70102c00:	4618      	mov	r0, r3
70102c02:	3708      	adds	r7, #8
70102c04:	46bd      	mov	sp, r7
70102c06:	bd80      	pop	{r7, pc}

70102c08 <LL_RCC_SetRTCClockSource>:
{
70102c08:	b480      	push	{r7}
70102c0a:	b083      	sub	sp, #12
70102c0c:	af00      	add	r7, sp, #0
70102c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
70102c10:	4b07      	ldr	r3, [pc, #28]	@ (70102c30 <LL_RCC_SetRTCClockSource+0x28>)
70102c12:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
70102c16:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
70102c1a:	4905      	ldr	r1, [pc, #20]	@ (70102c30 <LL_RCC_SetRTCClockSource+0x28>)
70102c1c:	687b      	ldr	r3, [r7, #4]
70102c1e:	4313      	orrs	r3, r2
70102c20:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
70102c24:	bf00      	nop
70102c26:	370c      	adds	r7, #12
70102c28:	46bd      	mov	sp, r7
70102c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
70102c2e:	4770      	bx	lr
70102c30:	56028000 	.word	0x56028000

70102c34 <LL_RCC_GetRTCClockSource>:
{
70102c34:	b480      	push	{r7}
70102c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
70102c38:	4b04      	ldr	r3, [pc, #16]	@ (70102c4c <LL_RCC_GetRTCClockSource+0x18>)
70102c3a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
70102c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
70102c42:	4618      	mov	r0, r3
70102c44:	46bd      	mov	sp, r7
70102c46:	f85d 7b04 	ldr.w	r7, [sp], #4
70102c4a:	4770      	bx	lr
70102c4c:	56028000 	.word	0x56028000

70102c50 <LL_RCC_SetRTC_HSEPrescaler>:
{
70102c50:	b480      	push	{r7}
70102c52:	b083      	sub	sp, #12
70102c54:	af00      	add	r7, sp, #0
70102c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
70102c58:	4b07      	ldr	r3, [pc, #28]	@ (70102c78 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
70102c5a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
70102c5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
70102c62:	4905      	ldr	r1, [pc, #20]	@ (70102c78 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
70102c64:	687b      	ldr	r3, [r7, #4]
70102c66:	4313      	orrs	r3, r2
70102c68:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
70102c6c:	bf00      	nop
70102c6e:	370c      	adds	r7, #12
70102c70:	46bd      	mov	sp, r7
70102c72:	f85d 7b04 	ldr.w	r7, [sp], #4
70102c76:	4770      	bx	lr
70102c78:	56028000 	.word	0x56028000

70102c7c <LL_RCC_SetTIMPrescaler>:
{
70102c7c:	b480      	push	{r7}
70102c7e:	b083      	sub	sp, #12
70102c80:	af00      	add	r7, sp, #0
70102c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
70102c84:	4b07      	ldr	r3, [pc, #28]	@ (70102ca4 <LL_RCC_SetTIMPrescaler+0x28>)
70102c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70102c88:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
70102c8c:	687b      	ldr	r3, [r7, #4]
70102c8e:	061b      	lsls	r3, r3, #24
70102c90:	4904      	ldr	r1, [pc, #16]	@ (70102ca4 <LL_RCC_SetTIMPrescaler+0x28>)
70102c92:	4313      	orrs	r3, r2
70102c94:	624b      	str	r3, [r1, #36]	@ 0x24
}
70102c96:	bf00      	nop
70102c98:	370c      	adds	r7, #12
70102c9a:	46bd      	mov	sp, r7
70102c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
70102ca0:	4770      	bx	lr
70102ca2:	bf00      	nop
70102ca4:	56028000 	.word	0x56028000

70102ca8 <LL_RCC_GetTIMPrescaler>:
{
70102ca8:	b480      	push	{r7}
70102caa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
70102cac:	4b04      	ldr	r3, [pc, #16]	@ (70102cc0 <LL_RCC_GetTIMPrescaler+0x18>)
70102cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70102cb0:	0e1b      	lsrs	r3, r3, #24
70102cb2:	f003 0303 	and.w	r3, r3, #3
}
70102cb6:	4618      	mov	r0, r3
70102cb8:	46bd      	mov	sp, r7
70102cba:	f85d 7b04 	ldr.w	r7, [sp], #4
70102cbe:	4770      	bx	lr
70102cc0:	56028000 	.word	0x56028000

70102cc4 <LL_RCC_PLL1_GetSource>:
{
70102cc4:	b480      	push	{r7}
70102cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
70102cc8:	4b04      	ldr	r3, [pc, #16]	@ (70102cdc <LL_RCC_PLL1_GetSource+0x18>)
70102cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70102cce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
70102cd2:	4618      	mov	r0, r3
70102cd4:	46bd      	mov	sp, r7
70102cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
70102cda:	4770      	bx	lr
70102cdc:	56028000 	.word	0x56028000

70102ce0 <LL_RCC_PLL1_IsReady>:
{
70102ce0:	b480      	push	{r7}
70102ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
70102ce4:	4b07      	ldr	r3, [pc, #28]	@ (70102d04 <LL_RCC_PLL1_IsReady+0x24>)
70102ce6:	685b      	ldr	r3, [r3, #4]
70102ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70102cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70102cf0:	d101      	bne.n	70102cf6 <LL_RCC_PLL1_IsReady+0x16>
70102cf2:	2301      	movs	r3, #1
70102cf4:	e000      	b.n	70102cf8 <LL_RCC_PLL1_IsReady+0x18>
70102cf6:	2300      	movs	r3, #0
}
70102cf8:	4618      	mov	r0, r3
70102cfa:	46bd      	mov	sp, r7
70102cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
70102d00:	4770      	bx	lr
70102d02:	bf00      	nop
70102d04:	56028000 	.word	0x56028000

70102d08 <LL_RCC_PLL1_IsEnabledBypass>:
{
70102d08:	b480      	push	{r7}
70102d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
70102d0c:	4b07      	ldr	r3, [pc, #28]	@ (70102d2c <LL_RCC_PLL1_IsEnabledBypass+0x24>)
70102d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70102d12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
70102d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
70102d1a:	d101      	bne.n	70102d20 <LL_RCC_PLL1_IsEnabledBypass+0x18>
70102d1c:	2301      	movs	r3, #1
70102d1e:	e000      	b.n	70102d22 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
70102d20:	2300      	movs	r3, #0
}
70102d22:	4618      	mov	r0, r3
70102d24:	46bd      	mov	sp, r7
70102d26:	f85d 7b04 	ldr.w	r7, [sp], #4
70102d2a:	4770      	bx	lr
70102d2c:	56028000 	.word	0x56028000

70102d30 <LL_RCC_PLL1_GetN>:
{
70102d30:	b480      	push	{r7}
70102d32:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
70102d34:	4b05      	ldr	r3, [pc, #20]	@ (70102d4c <LL_RCC_PLL1_GetN+0x1c>)
70102d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70102d3a:	0a1b      	lsrs	r3, r3, #8
70102d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
70102d40:	4618      	mov	r0, r3
70102d42:	46bd      	mov	sp, r7
70102d44:	f85d 7b04 	ldr.w	r7, [sp], #4
70102d48:	4770      	bx	lr
70102d4a:	bf00      	nop
70102d4c:	56028000 	.word	0x56028000

70102d50 <LL_RCC_PLL1_GetM>:
{
70102d50:	b480      	push	{r7}
70102d52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
70102d54:	4b05      	ldr	r3, [pc, #20]	@ (70102d6c <LL_RCC_PLL1_GetM+0x1c>)
70102d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70102d5a:	0d1b      	lsrs	r3, r3, #20
70102d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
70102d60:	4618      	mov	r0, r3
70102d62:	46bd      	mov	sp, r7
70102d64:	f85d 7b04 	ldr.w	r7, [sp], #4
70102d68:	4770      	bx	lr
70102d6a:	bf00      	nop
70102d6c:	56028000 	.word	0x56028000

70102d70 <LL_RCC_PLL1_GetP1>:
{
70102d70:	b480      	push	{r7}
70102d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
70102d74:	4b05      	ldr	r3, [pc, #20]	@ (70102d8c <LL_RCC_PLL1_GetP1+0x1c>)
70102d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70102d7a:	0edb      	lsrs	r3, r3, #27
70102d7c:	f003 0307 	and.w	r3, r3, #7
}
70102d80:	4618      	mov	r0, r3
70102d82:	46bd      	mov	sp, r7
70102d84:	f85d 7b04 	ldr.w	r7, [sp], #4
70102d88:	4770      	bx	lr
70102d8a:	bf00      	nop
70102d8c:	56028000 	.word	0x56028000

70102d90 <LL_RCC_PLL1_GetP2>:
{
70102d90:	b480      	push	{r7}
70102d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
70102d94:	4b05      	ldr	r3, [pc, #20]	@ (70102dac <LL_RCC_PLL1_GetP2+0x1c>)
70102d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70102d9a:	0e1b      	lsrs	r3, r3, #24
70102d9c:	f003 0307 	and.w	r3, r3, #7
}
70102da0:	4618      	mov	r0, r3
70102da2:	46bd      	mov	sp, r7
70102da4:	f85d 7b04 	ldr.w	r7, [sp], #4
70102da8:	4770      	bx	lr
70102daa:	bf00      	nop
70102dac:	56028000 	.word	0x56028000

70102db0 <LL_RCC_PLL1P_IsEnabled>:
{
70102db0:	b480      	push	{r7}
70102db2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
70102db4:	4b07      	ldr	r3, [pc, #28]	@ (70102dd4 <LL_RCC_PLL1P_IsEnabled+0x24>)
70102db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70102dba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
70102dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
70102dc2:	d101      	bne.n	70102dc8 <LL_RCC_PLL1P_IsEnabled+0x18>
70102dc4:	2301      	movs	r3, #1
70102dc6:	e000      	b.n	70102dca <LL_RCC_PLL1P_IsEnabled+0x1a>
70102dc8:	2300      	movs	r3, #0
}
70102dca:	4618      	mov	r0, r3
70102dcc:	46bd      	mov	sp, r7
70102dce:	f85d 7b04 	ldr.w	r7, [sp], #4
70102dd2:	4770      	bx	lr
70102dd4:	56028000 	.word	0x56028000

70102dd8 <LL_RCC_PLL1_GetFRACN>:
{
70102dd8:	b480      	push	{r7}
70102dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
70102ddc:	4b04      	ldr	r3, [pc, #16]	@ (70102df0 <LL_RCC_PLL1_GetFRACN+0x18>)
70102dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70102de2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
70102de6:	4618      	mov	r0, r3
70102de8:	46bd      	mov	sp, r7
70102dea:	f85d 7b04 	ldr.w	r7, [sp], #4
70102dee:	4770      	bx	lr
70102df0:	56028000 	.word	0x56028000

70102df4 <LL_RCC_PLL2_GetSource>:
{
70102df4:	b480      	push	{r7}
70102df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
70102df8:	4b04      	ldr	r3, [pc, #16]	@ (70102e0c <LL_RCC_PLL2_GetSource+0x18>)
70102dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
70102dfe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
70102e02:	4618      	mov	r0, r3
70102e04:	46bd      	mov	sp, r7
70102e06:	f85d 7b04 	ldr.w	r7, [sp], #4
70102e0a:	4770      	bx	lr
70102e0c:	56028000 	.word	0x56028000

70102e10 <LL_RCC_PLL2_IsReady>:
{
70102e10:	b480      	push	{r7}
70102e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
70102e14:	4b07      	ldr	r3, [pc, #28]	@ (70102e34 <LL_RCC_PLL2_IsReady+0x24>)
70102e16:	685b      	ldr	r3, [r3, #4]
70102e18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
70102e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70102e20:	d101      	bne.n	70102e26 <LL_RCC_PLL2_IsReady+0x16>
70102e22:	2301      	movs	r3, #1
70102e24:	e000      	b.n	70102e28 <LL_RCC_PLL2_IsReady+0x18>
70102e26:	2300      	movs	r3, #0
}
70102e28:	4618      	mov	r0, r3
70102e2a:	46bd      	mov	sp, r7
70102e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
70102e30:	4770      	bx	lr
70102e32:	bf00      	nop
70102e34:	56028000 	.word	0x56028000

70102e38 <LL_RCC_PLL2_IsEnabledBypass>:
{
70102e38:	b480      	push	{r7}
70102e3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
70102e3c:	4b07      	ldr	r3, [pc, #28]	@ (70102e5c <LL_RCC_PLL2_IsEnabledBypass+0x24>)
70102e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
70102e42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
70102e46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
70102e4a:	d101      	bne.n	70102e50 <LL_RCC_PLL2_IsEnabledBypass+0x18>
70102e4c:	2301      	movs	r3, #1
70102e4e:	e000      	b.n	70102e52 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
70102e50:	2300      	movs	r3, #0
}
70102e52:	4618      	mov	r0, r3
70102e54:	46bd      	mov	sp, r7
70102e56:	f85d 7b04 	ldr.w	r7, [sp], #4
70102e5a:	4770      	bx	lr
70102e5c:	56028000 	.word	0x56028000

70102e60 <LL_RCC_PLL2_GetN>:
{
70102e60:	b480      	push	{r7}
70102e62:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
70102e64:	4b05      	ldr	r3, [pc, #20]	@ (70102e7c <LL_RCC_PLL2_GetN+0x1c>)
70102e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
70102e6a:	0a1b      	lsrs	r3, r3, #8
70102e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
70102e70:	4618      	mov	r0, r3
70102e72:	46bd      	mov	sp, r7
70102e74:	f85d 7b04 	ldr.w	r7, [sp], #4
70102e78:	4770      	bx	lr
70102e7a:	bf00      	nop
70102e7c:	56028000 	.word	0x56028000

70102e80 <LL_RCC_PLL2_GetM>:
{
70102e80:	b480      	push	{r7}
70102e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
70102e84:	4b05      	ldr	r3, [pc, #20]	@ (70102e9c <LL_RCC_PLL2_GetM+0x1c>)
70102e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
70102e8a:	0d1b      	lsrs	r3, r3, #20
70102e8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
70102e90:	4618      	mov	r0, r3
70102e92:	46bd      	mov	sp, r7
70102e94:	f85d 7b04 	ldr.w	r7, [sp], #4
70102e98:	4770      	bx	lr
70102e9a:	bf00      	nop
70102e9c:	56028000 	.word	0x56028000

70102ea0 <LL_RCC_PLL2_GetP1>:
{
70102ea0:	b480      	push	{r7}
70102ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
70102ea4:	4b05      	ldr	r3, [pc, #20]	@ (70102ebc <LL_RCC_PLL2_GetP1+0x1c>)
70102ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
70102eaa:	0edb      	lsrs	r3, r3, #27
70102eac:	f003 0307 	and.w	r3, r3, #7
}
70102eb0:	4618      	mov	r0, r3
70102eb2:	46bd      	mov	sp, r7
70102eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
70102eb8:	4770      	bx	lr
70102eba:	bf00      	nop
70102ebc:	56028000 	.word	0x56028000

70102ec0 <LL_RCC_PLL2_GetP2>:
{
70102ec0:	b480      	push	{r7}
70102ec2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
70102ec4:	4b05      	ldr	r3, [pc, #20]	@ (70102edc <LL_RCC_PLL2_GetP2+0x1c>)
70102ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
70102eca:	0e1b      	lsrs	r3, r3, #24
70102ecc:	f003 0307 	and.w	r3, r3, #7
}
70102ed0:	4618      	mov	r0, r3
70102ed2:	46bd      	mov	sp, r7
70102ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
70102ed8:	4770      	bx	lr
70102eda:	bf00      	nop
70102edc:	56028000 	.word	0x56028000

70102ee0 <LL_RCC_PLL2P_IsEnabled>:
{
70102ee0:	b480      	push	{r7}
70102ee2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
70102ee4:	4b07      	ldr	r3, [pc, #28]	@ (70102f04 <LL_RCC_PLL2P_IsEnabled+0x24>)
70102ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
70102eea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
70102eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
70102ef2:	d101      	bne.n	70102ef8 <LL_RCC_PLL2P_IsEnabled+0x18>
70102ef4:	2301      	movs	r3, #1
70102ef6:	e000      	b.n	70102efa <LL_RCC_PLL2P_IsEnabled+0x1a>
70102ef8:	2300      	movs	r3, #0
}
70102efa:	4618      	mov	r0, r3
70102efc:	46bd      	mov	sp, r7
70102efe:	f85d 7b04 	ldr.w	r7, [sp], #4
70102f02:	4770      	bx	lr
70102f04:	56028000 	.word	0x56028000

70102f08 <LL_RCC_PLL2_GetFRACN>:
{
70102f08:	b480      	push	{r7}
70102f0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
70102f0c:	4b04      	ldr	r3, [pc, #16]	@ (70102f20 <LL_RCC_PLL2_GetFRACN+0x18>)
70102f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
70102f12:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
70102f16:	4618      	mov	r0, r3
70102f18:	46bd      	mov	sp, r7
70102f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
70102f1e:	4770      	bx	lr
70102f20:	56028000 	.word	0x56028000

70102f24 <LL_RCC_PLL3_GetSource>:
{
70102f24:	b480      	push	{r7}
70102f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
70102f28:	4b04      	ldr	r3, [pc, #16]	@ (70102f3c <LL_RCC_PLL3_GetSource+0x18>)
70102f2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
70102f2e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
70102f32:	4618      	mov	r0, r3
70102f34:	46bd      	mov	sp, r7
70102f36:	f85d 7b04 	ldr.w	r7, [sp], #4
70102f3a:	4770      	bx	lr
70102f3c:	56028000 	.word	0x56028000

70102f40 <LL_RCC_PLL3_IsReady>:
{
70102f40:	b480      	push	{r7}
70102f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
70102f44:	4b07      	ldr	r3, [pc, #28]	@ (70102f64 <LL_RCC_PLL3_IsReady+0x24>)
70102f46:	685b      	ldr	r3, [r3, #4]
70102f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
70102f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
70102f50:	d101      	bne.n	70102f56 <LL_RCC_PLL3_IsReady+0x16>
70102f52:	2301      	movs	r3, #1
70102f54:	e000      	b.n	70102f58 <LL_RCC_PLL3_IsReady+0x18>
70102f56:	2300      	movs	r3, #0
}
70102f58:	4618      	mov	r0, r3
70102f5a:	46bd      	mov	sp, r7
70102f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
70102f60:	4770      	bx	lr
70102f62:	bf00      	nop
70102f64:	56028000 	.word	0x56028000

70102f68 <LL_RCC_PLL3_IsEnabledBypass>:
{
70102f68:	b480      	push	{r7}
70102f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
70102f6c:	4b07      	ldr	r3, [pc, #28]	@ (70102f8c <LL_RCC_PLL3_IsEnabledBypass+0x24>)
70102f6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
70102f72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
70102f76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
70102f7a:	d101      	bne.n	70102f80 <LL_RCC_PLL3_IsEnabledBypass+0x18>
70102f7c:	2301      	movs	r3, #1
70102f7e:	e000      	b.n	70102f82 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
70102f80:	2300      	movs	r3, #0
}
70102f82:	4618      	mov	r0, r3
70102f84:	46bd      	mov	sp, r7
70102f86:	f85d 7b04 	ldr.w	r7, [sp], #4
70102f8a:	4770      	bx	lr
70102f8c:	56028000 	.word	0x56028000

70102f90 <LL_RCC_PLL3_GetN>:
{
70102f90:	b480      	push	{r7}
70102f92:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
70102f94:	4b05      	ldr	r3, [pc, #20]	@ (70102fac <LL_RCC_PLL3_GetN+0x1c>)
70102f96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
70102f9a:	0a1b      	lsrs	r3, r3, #8
70102f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
70102fa0:	4618      	mov	r0, r3
70102fa2:	46bd      	mov	sp, r7
70102fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
70102fa8:	4770      	bx	lr
70102faa:	bf00      	nop
70102fac:	56028000 	.word	0x56028000

70102fb0 <LL_RCC_PLL3_GetM>:
{
70102fb0:	b480      	push	{r7}
70102fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
70102fb4:	4b05      	ldr	r3, [pc, #20]	@ (70102fcc <LL_RCC_PLL3_GetM+0x1c>)
70102fb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
70102fba:	0d1b      	lsrs	r3, r3, #20
70102fbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
70102fc0:	4618      	mov	r0, r3
70102fc2:	46bd      	mov	sp, r7
70102fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
70102fc8:	4770      	bx	lr
70102fca:	bf00      	nop
70102fcc:	56028000 	.word	0x56028000

70102fd0 <LL_RCC_PLL3_GetP1>:
{
70102fd0:	b480      	push	{r7}
70102fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
70102fd4:	4b05      	ldr	r3, [pc, #20]	@ (70102fec <LL_RCC_PLL3_GetP1+0x1c>)
70102fd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
70102fda:	0edb      	lsrs	r3, r3, #27
70102fdc:	f003 0307 	and.w	r3, r3, #7
}
70102fe0:	4618      	mov	r0, r3
70102fe2:	46bd      	mov	sp, r7
70102fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
70102fe8:	4770      	bx	lr
70102fea:	bf00      	nop
70102fec:	56028000 	.word	0x56028000

70102ff0 <LL_RCC_PLL3_GetP2>:
{
70102ff0:	b480      	push	{r7}
70102ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
70102ff4:	4b05      	ldr	r3, [pc, #20]	@ (7010300c <LL_RCC_PLL3_GetP2+0x1c>)
70102ff6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
70102ffa:	0e1b      	lsrs	r3, r3, #24
70102ffc:	f003 0307 	and.w	r3, r3, #7
}
70103000:	4618      	mov	r0, r3
70103002:	46bd      	mov	sp, r7
70103004:	f85d 7b04 	ldr.w	r7, [sp], #4
70103008:	4770      	bx	lr
7010300a:	bf00      	nop
7010300c:	56028000 	.word	0x56028000

70103010 <LL_RCC_PLL3P_IsEnabled>:
{
70103010:	b480      	push	{r7}
70103012:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
70103014:	4b07      	ldr	r3, [pc, #28]	@ (70103034 <LL_RCC_PLL3P_IsEnabled+0x24>)
70103016:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
7010301a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
7010301e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
70103022:	d101      	bne.n	70103028 <LL_RCC_PLL3P_IsEnabled+0x18>
70103024:	2301      	movs	r3, #1
70103026:	e000      	b.n	7010302a <LL_RCC_PLL3P_IsEnabled+0x1a>
70103028:	2300      	movs	r3, #0
}
7010302a:	4618      	mov	r0, r3
7010302c:	46bd      	mov	sp, r7
7010302e:	f85d 7b04 	ldr.w	r7, [sp], #4
70103032:	4770      	bx	lr
70103034:	56028000 	.word	0x56028000

70103038 <LL_RCC_PLL3_GetFRACN>:
{
70103038:	b480      	push	{r7}
7010303a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
7010303c:	4b04      	ldr	r3, [pc, #16]	@ (70103050 <LL_RCC_PLL3_GetFRACN+0x18>)
7010303e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
70103042:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
70103046:	4618      	mov	r0, r3
70103048:	46bd      	mov	sp, r7
7010304a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010304e:	4770      	bx	lr
70103050:	56028000 	.word	0x56028000

70103054 <LL_RCC_PLL4_GetSource>:
{
70103054:	b480      	push	{r7}
70103056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
70103058:	4b04      	ldr	r3, [pc, #16]	@ (7010306c <LL_RCC_PLL4_GetSource+0x18>)
7010305a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
7010305e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
70103062:	4618      	mov	r0, r3
70103064:	46bd      	mov	sp, r7
70103066:	f85d 7b04 	ldr.w	r7, [sp], #4
7010306a:	4770      	bx	lr
7010306c:	56028000 	.word	0x56028000

70103070 <LL_RCC_PLL4_IsReady>:
{
70103070:	b480      	push	{r7}
70103072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
70103074:	4b07      	ldr	r3, [pc, #28]	@ (70103094 <LL_RCC_PLL4_IsReady+0x24>)
70103076:	685b      	ldr	r3, [r3, #4]
70103078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
7010307c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
70103080:	d101      	bne.n	70103086 <LL_RCC_PLL4_IsReady+0x16>
70103082:	2301      	movs	r3, #1
70103084:	e000      	b.n	70103088 <LL_RCC_PLL4_IsReady+0x18>
70103086:	2300      	movs	r3, #0
}
70103088:	4618      	mov	r0, r3
7010308a:	46bd      	mov	sp, r7
7010308c:	f85d 7b04 	ldr.w	r7, [sp], #4
70103090:	4770      	bx	lr
70103092:	bf00      	nop
70103094:	56028000 	.word	0x56028000

70103098 <LL_RCC_PLL4_IsEnabledBypass>:
{
70103098:	b480      	push	{r7}
7010309a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
7010309c:	4b07      	ldr	r3, [pc, #28]	@ (701030bc <LL_RCC_PLL4_IsEnabledBypass+0x24>)
7010309e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
701030a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
701030a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
701030aa:	d101      	bne.n	701030b0 <LL_RCC_PLL4_IsEnabledBypass+0x18>
701030ac:	2301      	movs	r3, #1
701030ae:	e000      	b.n	701030b2 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
701030b0:	2300      	movs	r3, #0
}
701030b2:	4618      	mov	r0, r3
701030b4:	46bd      	mov	sp, r7
701030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
701030ba:	4770      	bx	lr
701030bc:	56028000 	.word	0x56028000

701030c0 <LL_RCC_PLL4_GetN>:
{
701030c0:	b480      	push	{r7}
701030c2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
701030c4:	4b05      	ldr	r3, [pc, #20]	@ (701030dc <LL_RCC_PLL4_GetN+0x1c>)
701030c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
701030ca:	0a1b      	lsrs	r3, r3, #8
701030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
701030d0:	4618      	mov	r0, r3
701030d2:	46bd      	mov	sp, r7
701030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
701030d8:	4770      	bx	lr
701030da:	bf00      	nop
701030dc:	56028000 	.word	0x56028000

701030e0 <LL_RCC_PLL4_GetM>:
{
701030e0:	b480      	push	{r7}
701030e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
701030e4:	4b05      	ldr	r3, [pc, #20]	@ (701030fc <LL_RCC_PLL4_GetM+0x1c>)
701030e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
701030ea:	0d1b      	lsrs	r3, r3, #20
701030ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
701030f0:	4618      	mov	r0, r3
701030f2:	46bd      	mov	sp, r7
701030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
701030f8:	4770      	bx	lr
701030fa:	bf00      	nop
701030fc:	56028000 	.word	0x56028000

70103100 <LL_RCC_PLL4_GetP1>:
{
70103100:	b480      	push	{r7}
70103102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
70103104:	4b05      	ldr	r3, [pc, #20]	@ (7010311c <LL_RCC_PLL4_GetP1+0x1c>)
70103106:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
7010310a:	0edb      	lsrs	r3, r3, #27
7010310c:	f003 0307 	and.w	r3, r3, #7
}
70103110:	4618      	mov	r0, r3
70103112:	46bd      	mov	sp, r7
70103114:	f85d 7b04 	ldr.w	r7, [sp], #4
70103118:	4770      	bx	lr
7010311a:	bf00      	nop
7010311c:	56028000 	.word	0x56028000

70103120 <LL_RCC_PLL4_GetP2>:
{
70103120:	b480      	push	{r7}
70103122:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
70103124:	4b05      	ldr	r3, [pc, #20]	@ (7010313c <LL_RCC_PLL4_GetP2+0x1c>)
70103126:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
7010312a:	0e1b      	lsrs	r3, r3, #24
7010312c:	f003 0307 	and.w	r3, r3, #7
}
70103130:	4618      	mov	r0, r3
70103132:	46bd      	mov	sp, r7
70103134:	f85d 7b04 	ldr.w	r7, [sp], #4
70103138:	4770      	bx	lr
7010313a:	bf00      	nop
7010313c:	56028000 	.word	0x56028000

70103140 <LL_RCC_PLL4P_IsEnabled>:
{
70103140:	b480      	push	{r7}
70103142:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
70103144:	4b07      	ldr	r3, [pc, #28]	@ (70103164 <LL_RCC_PLL4P_IsEnabled+0x24>)
70103146:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
7010314a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
7010314e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
70103152:	d101      	bne.n	70103158 <LL_RCC_PLL4P_IsEnabled+0x18>
70103154:	2301      	movs	r3, #1
70103156:	e000      	b.n	7010315a <LL_RCC_PLL4P_IsEnabled+0x1a>
70103158:	2300      	movs	r3, #0
}
7010315a:	4618      	mov	r0, r3
7010315c:	46bd      	mov	sp, r7
7010315e:	f85d 7b04 	ldr.w	r7, [sp], #4
70103162:	4770      	bx	lr
70103164:	56028000 	.word	0x56028000

70103168 <LL_RCC_PLL4_GetFRACN>:
{
70103168:	b480      	push	{r7}
7010316a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
7010316c:	4b04      	ldr	r3, [pc, #16]	@ (70103180 <LL_RCC_PLL4_GetFRACN+0x18>)
7010316e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
70103172:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
70103176:	4618      	mov	r0, r3
70103178:	46bd      	mov	sp, r7
7010317a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010317e:	4770      	bx	lr
70103180:	56028000 	.word	0x56028000

70103184 <LL_RCC_IC3_Enable>:
  * @brief  Enable IC3
  * @rmtoll DIVENSR       IC3ENS        LL_RCC_IC3_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC3_Enable(void)
{
70103184:	b480      	push	{r7}
70103186:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
70103188:	4b04      	ldr	r3, [pc, #16]	@ (7010319c <LL_RCC_IC3_Enable+0x18>)
7010318a:	2204      	movs	r2, #4
7010318c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103190:	bf00      	nop
70103192:	46bd      	mov	sp, r7
70103194:	f85d 7b04 	ldr.w	r7, [sp], #4
70103198:	4770      	bx	lr
7010319a:	bf00      	nop
7010319c:	56028000 	.word	0x56028000

701031a0 <LL_RCC_IC3_IsEnabled>:
  * @brief  Check if IC3 is enabled
  * @rmtoll DIVENR       IC3EN         LL_RCC_IC3_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC3_IsEnabled(void)
{
701031a0:	b480      	push	{r7}
701031a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
701031a4:	4b07      	ldr	r3, [pc, #28]	@ (701031c4 <LL_RCC_IC3_IsEnabled+0x24>)
701031a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
701031aa:	f003 0304 	and.w	r3, r3, #4
701031ae:	2b04      	cmp	r3, #4
701031b0:	d101      	bne.n	701031b6 <LL_RCC_IC3_IsEnabled+0x16>
701031b2:	2301      	movs	r3, #1
701031b4:	e000      	b.n	701031b8 <LL_RCC_IC3_IsEnabled+0x18>
701031b6:	2300      	movs	r3, #0
}
701031b8:	4618      	mov	r0, r3
701031ba:	46bd      	mov	sp, r7
701031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
701031c0:	4770      	bx	lr
701031c2:	bf00      	nop
701031c4:	56028000 	.word	0x56028000

701031c8 <LL_RCC_IC3_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC3_GetSource(void)
{
701031c8:	b480      	push	{r7}
701031ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
701031cc:	4b04      	ldr	r3, [pc, #16]	@ (701031e0 <LL_RCC_IC3_GetSource+0x18>)
701031ce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
701031d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
701031d6:	4618      	mov	r0, r3
701031d8:	46bd      	mov	sp, r7
701031da:	f85d 7b04 	ldr.w	r7, [sp], #4
701031de:	4770      	bx	lr
701031e0:	56028000 	.word	0x56028000

701031e4 <LL_RCC_IC3_GetDivider>:
  * @brief  Get IC3 divider
  * @rmtoll IC3CFGR      IC3INT        LL_RCC_IC3_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC3_GetDivider(void)
{
701031e4:	b480      	push	{r7}
701031e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
701031e8:	4b05      	ldr	r3, [pc, #20]	@ (70103200 <LL_RCC_IC3_GetDivider+0x1c>)
701031ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
701031ee:	0c1b      	lsrs	r3, r3, #16
701031f0:	b2db      	uxtb	r3, r3
701031f2:	3301      	adds	r3, #1
}
701031f4:	4618      	mov	r0, r3
701031f6:	46bd      	mov	sp, r7
701031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
701031fc:	4770      	bx	lr
701031fe:	bf00      	nop
70103200:	56028000 	.word	0x56028000

70103204 <LL_RCC_IC4_Enable>:
  * @brief  Enable IC4
  * @rmtoll DIVENSR       IC4ENS        LL_RCC_IC4_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC4_Enable(void)
{
70103204:	b480      	push	{r7}
70103206:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
70103208:	4b04      	ldr	r3, [pc, #16]	@ (7010321c <LL_RCC_IC4_Enable+0x18>)
7010320a:	2208      	movs	r2, #8
7010320c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103210:	bf00      	nop
70103212:	46bd      	mov	sp, r7
70103214:	f85d 7b04 	ldr.w	r7, [sp], #4
70103218:	4770      	bx	lr
7010321a:	bf00      	nop
7010321c:	56028000 	.word	0x56028000

70103220 <LL_RCC_IC4_IsEnabled>:
  * @brief  Check if IC4 is enabled
  * @rmtoll DIVENR       IC4EN         LL_RCC_IC4_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC4_IsEnabled(void)
{
70103220:	b480      	push	{r7}
70103222:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
70103224:	4b07      	ldr	r3, [pc, #28]	@ (70103244 <LL_RCC_IC4_IsEnabled+0x24>)
70103226:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
7010322a:	f003 0308 	and.w	r3, r3, #8
7010322e:	2b08      	cmp	r3, #8
70103230:	d101      	bne.n	70103236 <LL_RCC_IC4_IsEnabled+0x16>
70103232:	2301      	movs	r3, #1
70103234:	e000      	b.n	70103238 <LL_RCC_IC4_IsEnabled+0x18>
70103236:	2300      	movs	r3, #0
}
70103238:	4618      	mov	r0, r3
7010323a:	46bd      	mov	sp, r7
7010323c:	f85d 7b04 	ldr.w	r7, [sp], #4
70103240:	4770      	bx	lr
70103242:	bf00      	nop
70103244:	56028000 	.word	0x56028000

70103248 <LL_RCC_IC4_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC4_GetSource(void)
{
70103248:	b480      	push	{r7}
7010324a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
7010324c:	4b04      	ldr	r3, [pc, #16]	@ (70103260 <LL_RCC_IC4_GetSource+0x18>)
7010324e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
70103252:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
70103256:	4618      	mov	r0, r3
70103258:	46bd      	mov	sp, r7
7010325a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010325e:	4770      	bx	lr
70103260:	56028000 	.word	0x56028000

70103264 <LL_RCC_IC4_GetDivider>:
  * @brief  Get IC4 divider
  * @rmtoll IC4CFGR      IC4INT        LL_RCC_IC4_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC4_GetDivider(void)
{
70103264:	b480      	push	{r7}
70103266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
70103268:	4b05      	ldr	r3, [pc, #20]	@ (70103280 <LL_RCC_IC4_GetDivider+0x1c>)
7010326a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
7010326e:	0c1b      	lsrs	r3, r3, #16
70103270:	b2db      	uxtb	r3, r3
70103272:	3301      	adds	r3, #1
}
70103274:	4618      	mov	r0, r3
70103276:	46bd      	mov	sp, r7
70103278:	f85d 7b04 	ldr.w	r7, [sp], #4
7010327c:	4770      	bx	lr
7010327e:	bf00      	nop
70103280:	56028000 	.word	0x56028000

70103284 <LL_RCC_IC5_Enable>:
  * @brief  Enable IC5
  * @rmtoll DIVENSR       IC5ENS        LL_RCC_IC5_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC5_Enable(void)
{
70103284:	b480      	push	{r7}
70103286:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
70103288:	4b04      	ldr	r3, [pc, #16]	@ (7010329c <LL_RCC_IC5_Enable+0x18>)
7010328a:	2210      	movs	r2, #16
7010328c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103290:	bf00      	nop
70103292:	46bd      	mov	sp, r7
70103294:	f85d 7b04 	ldr.w	r7, [sp], #4
70103298:	4770      	bx	lr
7010329a:	bf00      	nop
7010329c:	56028000 	.word	0x56028000

701032a0 <LL_RCC_IC5_IsEnabled>:
  * @brief  Check if IC5 is enabled
  * @rmtoll DIVENR       IC5EN         LL_RCC_IC5_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC5_IsEnabled(void)
{
701032a0:	b480      	push	{r7}
701032a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
701032a4:	4b07      	ldr	r3, [pc, #28]	@ (701032c4 <LL_RCC_IC5_IsEnabled+0x24>)
701032a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
701032aa:	f003 0310 	and.w	r3, r3, #16
701032ae:	2b10      	cmp	r3, #16
701032b0:	d101      	bne.n	701032b6 <LL_RCC_IC5_IsEnabled+0x16>
701032b2:	2301      	movs	r3, #1
701032b4:	e000      	b.n	701032b8 <LL_RCC_IC5_IsEnabled+0x18>
701032b6:	2300      	movs	r3, #0
}
701032b8:	4618      	mov	r0, r3
701032ba:	46bd      	mov	sp, r7
701032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
701032c0:	4770      	bx	lr
701032c2:	bf00      	nop
701032c4:	56028000 	.word	0x56028000

701032c8 <LL_RCC_IC5_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC5_GetSource(void)
{
701032c8:	b480      	push	{r7}
701032ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
701032cc:	4b04      	ldr	r3, [pc, #16]	@ (701032e0 <LL_RCC_IC5_GetSource+0x18>)
701032ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
701032d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
701032d6:	4618      	mov	r0, r3
701032d8:	46bd      	mov	sp, r7
701032da:	f85d 7b04 	ldr.w	r7, [sp], #4
701032de:	4770      	bx	lr
701032e0:	56028000 	.word	0x56028000

701032e4 <LL_RCC_IC5_GetDivider>:
  * @brief  Get IC5 divider
  * @rmtoll IC5CFGR      IC5INT        LL_RCC_IC5_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC5_GetDivider(void)
{
701032e4:	b480      	push	{r7}
701032e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
701032e8:	4b05      	ldr	r3, [pc, #20]	@ (70103300 <LL_RCC_IC5_GetDivider+0x1c>)
701032ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
701032ee:	0c1b      	lsrs	r3, r3, #16
701032f0:	b2db      	uxtb	r3, r3
701032f2:	3301      	adds	r3, #1
}
701032f4:	4618      	mov	r0, r3
701032f6:	46bd      	mov	sp, r7
701032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
701032fc:	4770      	bx	lr
701032fe:	bf00      	nop
70103300:	56028000 	.word	0x56028000

70103304 <LL_RCC_IC7_Enable>:
  * @brief  Enable IC7
  * @rmtoll DIVENSR       IC7ENS        LL_RCC_IC7_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC7_Enable(void)
{
70103304:	b480      	push	{r7}
70103306:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
70103308:	4b04      	ldr	r3, [pc, #16]	@ (7010331c <LL_RCC_IC7_Enable+0x18>)
7010330a:	2240      	movs	r2, #64	@ 0x40
7010330c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103310:	bf00      	nop
70103312:	46bd      	mov	sp, r7
70103314:	f85d 7b04 	ldr.w	r7, [sp], #4
70103318:	4770      	bx	lr
7010331a:	bf00      	nop
7010331c:	56028000 	.word	0x56028000

70103320 <LL_RCC_IC7_IsEnabled>:
  * @brief  Check if IC7 is enabled
  * @rmtoll DIVENR       IC7EN         LL_RCC_IC7_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC7_IsEnabled(void)
{
70103320:	b480      	push	{r7}
70103322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
70103324:	4b07      	ldr	r3, [pc, #28]	@ (70103344 <LL_RCC_IC7_IsEnabled+0x24>)
70103326:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
7010332a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
7010332e:	2b40      	cmp	r3, #64	@ 0x40
70103330:	d101      	bne.n	70103336 <LL_RCC_IC7_IsEnabled+0x16>
70103332:	2301      	movs	r3, #1
70103334:	e000      	b.n	70103338 <LL_RCC_IC7_IsEnabled+0x18>
70103336:	2300      	movs	r3, #0
}
70103338:	4618      	mov	r0, r3
7010333a:	46bd      	mov	sp, r7
7010333c:	f85d 7b04 	ldr.w	r7, [sp], #4
70103340:	4770      	bx	lr
70103342:	bf00      	nop
70103344:	56028000 	.word	0x56028000

70103348 <LL_RCC_IC7_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC7_GetSource(void)
{
70103348:	b480      	push	{r7}
7010334a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
7010334c:	4b04      	ldr	r3, [pc, #16]	@ (70103360 <LL_RCC_IC7_GetSource+0x18>)
7010334e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
70103352:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
70103356:	4618      	mov	r0, r3
70103358:	46bd      	mov	sp, r7
7010335a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010335e:	4770      	bx	lr
70103360:	56028000 	.word	0x56028000

70103364 <LL_RCC_IC7_GetDivider>:
  * @brief  Get IC7 divider
  * @rmtoll IC7CFGR      IC7INT        LL_RCC_IC7_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC7_GetDivider(void)
{
70103364:	b480      	push	{r7}
70103366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
70103368:	4b05      	ldr	r3, [pc, #20]	@ (70103380 <LL_RCC_IC7_GetDivider+0x1c>)
7010336a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
7010336e:	0c1b      	lsrs	r3, r3, #16
70103370:	b2db      	uxtb	r3, r3
70103372:	3301      	adds	r3, #1
}
70103374:	4618      	mov	r0, r3
70103376:	46bd      	mov	sp, r7
70103378:	f85d 7b04 	ldr.w	r7, [sp], #4
7010337c:	4770      	bx	lr
7010337e:	bf00      	nop
70103380:	56028000 	.word	0x56028000

70103384 <LL_RCC_IC8_Enable>:
  * @brief  Enable IC8
  * @rmtoll DIVENSR       IC8ENS        LL_RCC_IC8_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC8_Enable(void)
{
70103384:	b480      	push	{r7}
70103386:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
70103388:	4b04      	ldr	r3, [pc, #16]	@ (7010339c <LL_RCC_IC8_Enable+0x18>)
7010338a:	2280      	movs	r2, #128	@ 0x80
7010338c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103390:	bf00      	nop
70103392:	46bd      	mov	sp, r7
70103394:	f85d 7b04 	ldr.w	r7, [sp], #4
70103398:	4770      	bx	lr
7010339a:	bf00      	nop
7010339c:	56028000 	.word	0x56028000

701033a0 <LL_RCC_IC8_IsEnabled>:
  * @brief  Check if IC8 is enabled
  * @rmtoll DIVENR       IC8EN         LL_RCC_IC8_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC8_IsEnabled(void)
{
701033a0:	b480      	push	{r7}
701033a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
701033a4:	4b07      	ldr	r3, [pc, #28]	@ (701033c4 <LL_RCC_IC8_IsEnabled+0x24>)
701033a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
701033aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
701033ae:	2b80      	cmp	r3, #128	@ 0x80
701033b0:	d101      	bne.n	701033b6 <LL_RCC_IC8_IsEnabled+0x16>
701033b2:	2301      	movs	r3, #1
701033b4:	e000      	b.n	701033b8 <LL_RCC_IC8_IsEnabled+0x18>
701033b6:	2300      	movs	r3, #0
}
701033b8:	4618      	mov	r0, r3
701033ba:	46bd      	mov	sp, r7
701033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
701033c0:	4770      	bx	lr
701033c2:	bf00      	nop
701033c4:	56028000 	.word	0x56028000

701033c8 <LL_RCC_IC8_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC8_GetSource(void)
{
701033c8:	b480      	push	{r7}
701033ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
701033cc:	4b04      	ldr	r3, [pc, #16]	@ (701033e0 <LL_RCC_IC8_GetSource+0x18>)
701033ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
701033d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
701033d6:	4618      	mov	r0, r3
701033d8:	46bd      	mov	sp, r7
701033da:	f85d 7b04 	ldr.w	r7, [sp], #4
701033de:	4770      	bx	lr
701033e0:	56028000 	.word	0x56028000

701033e4 <LL_RCC_IC8_GetDivider>:
  * @brief  Get IC8 divider
  * @rmtoll IC8CFGR      IC8INT        LL_RCC_IC8_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC8_GetDivider(void)
{
701033e4:	b480      	push	{r7}
701033e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
701033e8:	4b05      	ldr	r3, [pc, #20]	@ (70103400 <LL_RCC_IC8_GetDivider+0x1c>)
701033ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
701033ee:	0c1b      	lsrs	r3, r3, #16
701033f0:	b2db      	uxtb	r3, r3
701033f2:	3301      	adds	r3, #1
}
701033f4:	4618      	mov	r0, r3
701033f6:	46bd      	mov	sp, r7
701033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
701033fc:	4770      	bx	lr
701033fe:	bf00      	nop
70103400:	56028000 	.word	0x56028000

70103404 <LL_RCC_IC9_Enable>:
  * @brief  Enable IC9
  * @rmtoll DIVENSR       IC9ENS        LL_RCC_IC9_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC9_Enable(void)
{
70103404:	b480      	push	{r7}
70103406:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
70103408:	4b04      	ldr	r3, [pc, #16]	@ (7010341c <LL_RCC_IC9_Enable+0x18>)
7010340a:	f44f 7280 	mov.w	r2, #256	@ 0x100
7010340e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103412:	bf00      	nop
70103414:	46bd      	mov	sp, r7
70103416:	f85d 7b04 	ldr.w	r7, [sp], #4
7010341a:	4770      	bx	lr
7010341c:	56028000 	.word	0x56028000

70103420 <LL_RCC_IC9_IsEnabled>:
  * @brief  Check if IC9 is enabled
  * @rmtoll DIVENR       IC9EN         LL_RCC_IC9_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC9_IsEnabled(void)
{
70103420:	b480      	push	{r7}
70103422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
70103424:	4b07      	ldr	r3, [pc, #28]	@ (70103444 <LL_RCC_IC9_IsEnabled+0x24>)
70103426:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
7010342a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
7010342e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70103432:	d101      	bne.n	70103438 <LL_RCC_IC9_IsEnabled+0x18>
70103434:	2301      	movs	r3, #1
70103436:	e000      	b.n	7010343a <LL_RCC_IC9_IsEnabled+0x1a>
70103438:	2300      	movs	r3, #0
}
7010343a:	4618      	mov	r0, r3
7010343c:	46bd      	mov	sp, r7
7010343e:	f85d 7b04 	ldr.w	r7, [sp], #4
70103442:	4770      	bx	lr
70103444:	56028000 	.word	0x56028000

70103448 <LL_RCC_IC9_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC9_GetSource(void)
{
70103448:	b480      	push	{r7}
7010344a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
7010344c:	4b04      	ldr	r3, [pc, #16]	@ (70103460 <LL_RCC_IC9_GetSource+0x18>)
7010344e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70103452:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
70103456:	4618      	mov	r0, r3
70103458:	46bd      	mov	sp, r7
7010345a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010345e:	4770      	bx	lr
70103460:	56028000 	.word	0x56028000

70103464 <LL_RCC_IC9_GetDivider>:
  * @brief  Get IC9 divider
  * @rmtoll IC9CFGR      IC9INT        LL_RCC_IC9_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC9_GetDivider(void)
{
70103464:	b480      	push	{r7}
70103466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
70103468:	4b05      	ldr	r3, [pc, #20]	@ (70103480 <LL_RCC_IC9_GetDivider+0x1c>)
7010346a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
7010346e:	0c1b      	lsrs	r3, r3, #16
70103470:	b2db      	uxtb	r3, r3
70103472:	3301      	adds	r3, #1
}
70103474:	4618      	mov	r0, r3
70103476:	46bd      	mov	sp, r7
70103478:	f85d 7b04 	ldr.w	r7, [sp], #4
7010347c:	4770      	bx	lr
7010347e:	bf00      	nop
70103480:	56028000 	.word	0x56028000

70103484 <LL_RCC_IC10_Enable>:
  * @brief  Enable IC10
  * @rmtoll DIVENSR       IC10ENS        LL_RCC_IC10_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC10_Enable(void)
{
70103484:	b480      	push	{r7}
70103486:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
70103488:	4b04      	ldr	r3, [pc, #16]	@ (7010349c <LL_RCC_IC10_Enable+0x18>)
7010348a:	f44f 7200 	mov.w	r2, #512	@ 0x200
7010348e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103492:	bf00      	nop
70103494:	46bd      	mov	sp, r7
70103496:	f85d 7b04 	ldr.w	r7, [sp], #4
7010349a:	4770      	bx	lr
7010349c:	56028000 	.word	0x56028000

701034a0 <LL_RCC_IC10_IsEnabled>:
  * @brief  Check if IC10 is enabled
  * @rmtoll DIVENR       IC10EN         LL_RCC_IC10_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC10_IsEnabled(void)
{
701034a0:	b480      	push	{r7}
701034a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
701034a4:	4b07      	ldr	r3, [pc, #28]	@ (701034c4 <LL_RCC_IC10_IsEnabled+0x24>)
701034a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
701034aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
701034ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
701034b2:	d101      	bne.n	701034b8 <LL_RCC_IC10_IsEnabled+0x18>
701034b4:	2301      	movs	r3, #1
701034b6:	e000      	b.n	701034ba <LL_RCC_IC10_IsEnabled+0x1a>
701034b8:	2300      	movs	r3, #0
}
701034ba:	4618      	mov	r0, r3
701034bc:	46bd      	mov	sp, r7
701034be:	f85d 7b04 	ldr.w	r7, [sp], #4
701034c2:	4770      	bx	lr
701034c4:	56028000 	.word	0x56028000

701034c8 <LL_RCC_IC10_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC10_GetSource(void)
{
701034c8:	b480      	push	{r7}
701034ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
701034cc:	4b04      	ldr	r3, [pc, #16]	@ (701034e0 <LL_RCC_IC10_GetSource+0x18>)
701034ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
701034d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
701034d6:	4618      	mov	r0, r3
701034d8:	46bd      	mov	sp, r7
701034da:	f85d 7b04 	ldr.w	r7, [sp], #4
701034de:	4770      	bx	lr
701034e0:	56028000 	.word	0x56028000

701034e4 <LL_RCC_IC10_GetDivider>:
  * @brief  Get IC10 divider
  * @rmtoll IC10CFGR      IC10INT        LL_RCC_IC10_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC10_GetDivider(void)
{
701034e4:	b480      	push	{r7}
701034e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
701034e8:	4b05      	ldr	r3, [pc, #20]	@ (70103500 <LL_RCC_IC10_GetDivider+0x1c>)
701034ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
701034ee:	0c1b      	lsrs	r3, r3, #16
701034f0:	b2db      	uxtb	r3, r3
701034f2:	3301      	adds	r3, #1
}
701034f4:	4618      	mov	r0, r3
701034f6:	46bd      	mov	sp, r7
701034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
701034fc:	4770      	bx	lr
701034fe:	bf00      	nop
70103500:	56028000 	.word	0x56028000

70103504 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
70103504:	b480      	push	{r7}
70103506:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
70103508:	4b04      	ldr	r3, [pc, #16]	@ (7010351c <LL_RCC_IC12_Enable+0x18>)
7010350a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
7010350e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103512:	bf00      	nop
70103514:	46bd      	mov	sp, r7
70103516:	f85d 7b04 	ldr.w	r7, [sp], #4
7010351a:	4770      	bx	lr
7010351c:	56028000 	.word	0x56028000

70103520 <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
70103520:	b480      	push	{r7}
70103522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
70103524:	4b07      	ldr	r3, [pc, #28]	@ (70103544 <LL_RCC_IC12_IsEnabled+0x24>)
70103526:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
7010352a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
7010352e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
70103532:	d101      	bne.n	70103538 <LL_RCC_IC12_IsEnabled+0x18>
70103534:	2301      	movs	r3, #1
70103536:	e000      	b.n	7010353a <LL_RCC_IC12_IsEnabled+0x1a>
70103538:	2300      	movs	r3, #0
}
7010353a:	4618      	mov	r0, r3
7010353c:	46bd      	mov	sp, r7
7010353e:	f85d 7b04 	ldr.w	r7, [sp], #4
70103542:	4770      	bx	lr
70103544:	56028000 	.word	0x56028000

70103548 <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
70103548:	b480      	push	{r7}
7010354a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
7010354c:	4b04      	ldr	r3, [pc, #16]	@ (70103560 <LL_RCC_IC12_GetSource+0x18>)
7010354e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
70103552:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
70103556:	4618      	mov	r0, r3
70103558:	46bd      	mov	sp, r7
7010355a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010355e:	4770      	bx	lr
70103560:	56028000 	.word	0x56028000

70103564 <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
70103564:	b480      	push	{r7}
70103566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
70103568:	4b05      	ldr	r3, [pc, #20]	@ (70103580 <LL_RCC_IC12_GetDivider+0x1c>)
7010356a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
7010356e:	0c1b      	lsrs	r3, r3, #16
70103570:	b2db      	uxtb	r3, r3
70103572:	3301      	adds	r3, #1
}
70103574:	4618      	mov	r0, r3
70103576:	46bd      	mov	sp, r7
70103578:	f85d 7b04 	ldr.w	r7, [sp], #4
7010357c:	4770      	bx	lr
7010357e:	bf00      	nop
70103580:	56028000 	.word	0x56028000

70103584 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
70103584:	b480      	push	{r7}
70103586:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
70103588:	4b04      	ldr	r3, [pc, #16]	@ (7010359c <LL_RCC_IC13_Enable+0x18>)
7010358a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
7010358e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103592:	bf00      	nop
70103594:	46bd      	mov	sp, r7
70103596:	f85d 7b04 	ldr.w	r7, [sp], #4
7010359a:	4770      	bx	lr
7010359c:	56028000 	.word	0x56028000

701035a0 <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
701035a0:	b480      	push	{r7}
701035a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
701035a4:	4b07      	ldr	r3, [pc, #28]	@ (701035c4 <LL_RCC_IC13_IsEnabled+0x24>)
701035a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
701035aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
701035ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
701035b2:	d101      	bne.n	701035b8 <LL_RCC_IC13_IsEnabled+0x18>
701035b4:	2301      	movs	r3, #1
701035b6:	e000      	b.n	701035ba <LL_RCC_IC13_IsEnabled+0x1a>
701035b8:	2300      	movs	r3, #0
}
701035ba:	4618      	mov	r0, r3
701035bc:	46bd      	mov	sp, r7
701035be:	f85d 7b04 	ldr.w	r7, [sp], #4
701035c2:	4770      	bx	lr
701035c4:	56028000 	.word	0x56028000

701035c8 <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
701035c8:	b480      	push	{r7}
701035ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
701035cc:	4b04      	ldr	r3, [pc, #16]	@ (701035e0 <LL_RCC_IC13_GetSource+0x18>)
701035ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
701035d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
701035d6:	4618      	mov	r0, r3
701035d8:	46bd      	mov	sp, r7
701035da:	f85d 7b04 	ldr.w	r7, [sp], #4
701035de:	4770      	bx	lr
701035e0:	56028000 	.word	0x56028000

701035e4 <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
701035e4:	b480      	push	{r7}
701035e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
701035e8:	4b05      	ldr	r3, [pc, #20]	@ (70103600 <LL_RCC_IC13_GetDivider+0x1c>)
701035ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
701035ee:	0c1b      	lsrs	r3, r3, #16
701035f0:	b2db      	uxtb	r3, r3
701035f2:	3301      	adds	r3, #1
}
701035f4:	4618      	mov	r0, r3
701035f6:	46bd      	mov	sp, r7
701035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
701035fc:	4770      	bx	lr
701035fe:	bf00      	nop
70103600:	56028000 	.word	0x56028000

70103604 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
70103604:	b480      	push	{r7}
70103606:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
70103608:	4b04      	ldr	r3, [pc, #16]	@ (7010361c <LL_RCC_IC14_Enable+0x18>)
7010360a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
7010360e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103612:	bf00      	nop
70103614:	46bd      	mov	sp, r7
70103616:	f85d 7b04 	ldr.w	r7, [sp], #4
7010361a:	4770      	bx	lr
7010361c:	56028000 	.word	0x56028000

70103620 <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
70103620:	b480      	push	{r7}
70103622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
70103624:	4b07      	ldr	r3, [pc, #28]	@ (70103644 <LL_RCC_IC14_IsEnabled+0x24>)
70103626:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
7010362a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
7010362e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70103632:	d101      	bne.n	70103638 <LL_RCC_IC14_IsEnabled+0x18>
70103634:	2301      	movs	r3, #1
70103636:	e000      	b.n	7010363a <LL_RCC_IC14_IsEnabled+0x1a>
70103638:	2300      	movs	r3, #0
}
7010363a:	4618      	mov	r0, r3
7010363c:	46bd      	mov	sp, r7
7010363e:	f85d 7b04 	ldr.w	r7, [sp], #4
70103642:	4770      	bx	lr
70103644:	56028000 	.word	0x56028000

70103648 <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
70103648:	b480      	push	{r7}
7010364a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
7010364c:	4b04      	ldr	r3, [pc, #16]	@ (70103660 <LL_RCC_IC14_GetSource+0x18>)
7010364e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
70103652:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
70103656:	4618      	mov	r0, r3
70103658:	46bd      	mov	sp, r7
7010365a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010365e:	4770      	bx	lr
70103660:	56028000 	.word	0x56028000

70103664 <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
70103664:	b480      	push	{r7}
70103666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
70103668:	4b05      	ldr	r3, [pc, #20]	@ (70103680 <LL_RCC_IC14_GetDivider+0x1c>)
7010366a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
7010366e:	0c1b      	lsrs	r3, r3, #16
70103670:	b2db      	uxtb	r3, r3
70103672:	3301      	adds	r3, #1
}
70103674:	4618      	mov	r0, r3
70103676:	46bd      	mov	sp, r7
70103678:	f85d 7b04 	ldr.w	r7, [sp], #4
7010367c:	4770      	bx	lr
7010367e:	bf00      	nop
70103680:	56028000 	.word	0x56028000

70103684 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
70103684:	b480      	push	{r7}
70103686:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
70103688:	4b04      	ldr	r3, [pc, #16]	@ (7010369c <LL_RCC_IC15_Enable+0x18>)
7010368a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
7010368e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103692:	bf00      	nop
70103694:	46bd      	mov	sp, r7
70103696:	f85d 7b04 	ldr.w	r7, [sp], #4
7010369a:	4770      	bx	lr
7010369c:	56028000 	.word	0x56028000

701036a0 <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
701036a0:	b480      	push	{r7}
701036a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
701036a4:	4b07      	ldr	r3, [pc, #28]	@ (701036c4 <LL_RCC_IC15_IsEnabled+0x24>)
701036a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
701036aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
701036ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
701036b2:	d101      	bne.n	701036b8 <LL_RCC_IC15_IsEnabled+0x18>
701036b4:	2301      	movs	r3, #1
701036b6:	e000      	b.n	701036ba <LL_RCC_IC15_IsEnabled+0x1a>
701036b8:	2300      	movs	r3, #0
}
701036ba:	4618      	mov	r0, r3
701036bc:	46bd      	mov	sp, r7
701036be:	f85d 7b04 	ldr.w	r7, [sp], #4
701036c2:	4770      	bx	lr
701036c4:	56028000 	.word	0x56028000

701036c8 <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
701036c8:	b480      	push	{r7}
701036ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
701036cc:	4b04      	ldr	r3, [pc, #16]	@ (701036e0 <LL_RCC_IC15_GetSource+0x18>)
701036ce:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
701036d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
701036d6:	4618      	mov	r0, r3
701036d8:	46bd      	mov	sp, r7
701036da:	f85d 7b04 	ldr.w	r7, [sp], #4
701036de:	4770      	bx	lr
701036e0:	56028000 	.word	0x56028000

701036e4 <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
701036e4:	b480      	push	{r7}
701036e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
701036e8:	4b05      	ldr	r3, [pc, #20]	@ (70103700 <LL_RCC_IC15_GetDivider+0x1c>)
701036ea:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
701036ee:	0c1b      	lsrs	r3, r3, #16
701036f0:	b2db      	uxtb	r3, r3
701036f2:	3301      	adds	r3, #1
}
701036f4:	4618      	mov	r0, r3
701036f6:	46bd      	mov	sp, r7
701036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
701036fc:	4770      	bx	lr
701036fe:	bf00      	nop
70103700:	56028000 	.word	0x56028000

70103704 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
70103704:	b480      	push	{r7}
70103706:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
70103708:	4b04      	ldr	r3, [pc, #16]	@ (7010371c <LL_RCC_IC16_Enable+0x18>)
7010370a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
7010370e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103712:	bf00      	nop
70103714:	46bd      	mov	sp, r7
70103716:	f85d 7b04 	ldr.w	r7, [sp], #4
7010371a:	4770      	bx	lr
7010371c:	56028000 	.word	0x56028000

70103720 <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
70103720:	b480      	push	{r7}
70103722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
70103724:	4b07      	ldr	r3, [pc, #28]	@ (70103744 <LL_RCC_IC16_IsEnabled+0x24>)
70103726:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
7010372a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
7010372e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
70103732:	d101      	bne.n	70103738 <LL_RCC_IC16_IsEnabled+0x18>
70103734:	2301      	movs	r3, #1
70103736:	e000      	b.n	7010373a <LL_RCC_IC16_IsEnabled+0x1a>
70103738:	2300      	movs	r3, #0
}
7010373a:	4618      	mov	r0, r3
7010373c:	46bd      	mov	sp, r7
7010373e:	f85d 7b04 	ldr.w	r7, [sp], #4
70103742:	4770      	bx	lr
70103744:	56028000 	.word	0x56028000

70103748 <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
70103748:	b480      	push	{r7}
7010374a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
7010374c:	4b04      	ldr	r3, [pc, #16]	@ (70103760 <LL_RCC_IC16_GetSource+0x18>)
7010374e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
70103752:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
70103756:	4618      	mov	r0, r3
70103758:	46bd      	mov	sp, r7
7010375a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010375e:	4770      	bx	lr
70103760:	56028000 	.word	0x56028000

70103764 <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
70103764:	b480      	push	{r7}
70103766:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
70103768:	4b05      	ldr	r3, [pc, #20]	@ (70103780 <LL_RCC_IC16_GetDivider+0x1c>)
7010376a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
7010376e:	0c1b      	lsrs	r3, r3, #16
70103770:	b2db      	uxtb	r3, r3
70103772:	3301      	adds	r3, #1
}
70103774:	4618      	mov	r0, r3
70103776:	46bd      	mov	sp, r7
70103778:	f85d 7b04 	ldr.w	r7, [sp], #4
7010377c:	4770      	bx	lr
7010377e:	bf00      	nop
70103780:	56028000 	.word	0x56028000

70103784 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
70103784:	b480      	push	{r7}
70103786:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
70103788:	4b04      	ldr	r3, [pc, #16]	@ (7010379c <LL_RCC_IC17_Enable+0x18>)
7010378a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
7010378e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103792:	bf00      	nop
70103794:	46bd      	mov	sp, r7
70103796:	f85d 7b04 	ldr.w	r7, [sp], #4
7010379a:	4770      	bx	lr
7010379c:	56028000 	.word	0x56028000

701037a0 <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
701037a0:	b480      	push	{r7}
701037a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
701037a4:	4b07      	ldr	r3, [pc, #28]	@ (701037c4 <LL_RCC_IC17_IsEnabled+0x24>)
701037a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
701037aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
701037ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
701037b2:	d101      	bne.n	701037b8 <LL_RCC_IC17_IsEnabled+0x18>
701037b4:	2301      	movs	r3, #1
701037b6:	e000      	b.n	701037ba <LL_RCC_IC17_IsEnabled+0x1a>
701037b8:	2300      	movs	r3, #0
}
701037ba:	4618      	mov	r0, r3
701037bc:	46bd      	mov	sp, r7
701037be:	f85d 7b04 	ldr.w	r7, [sp], #4
701037c2:	4770      	bx	lr
701037c4:	56028000 	.word	0x56028000

701037c8 <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
701037c8:	b480      	push	{r7}
701037ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
701037cc:	4b04      	ldr	r3, [pc, #16]	@ (701037e0 <LL_RCC_IC17_GetSource+0x18>)
701037ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
701037d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
701037d6:	4618      	mov	r0, r3
701037d8:	46bd      	mov	sp, r7
701037da:	f85d 7b04 	ldr.w	r7, [sp], #4
701037de:	4770      	bx	lr
701037e0:	56028000 	.word	0x56028000

701037e4 <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
701037e4:	b480      	push	{r7}
701037e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
701037e8:	4b05      	ldr	r3, [pc, #20]	@ (70103800 <LL_RCC_IC17_GetDivider+0x1c>)
701037ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
701037ee:	0c1b      	lsrs	r3, r3, #16
701037f0:	b2db      	uxtb	r3, r3
701037f2:	3301      	adds	r3, #1
}
701037f4:	4618      	mov	r0, r3
701037f6:	46bd      	mov	sp, r7
701037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
701037fc:	4770      	bx	lr
701037fe:	bf00      	nop
70103800:	56028000 	.word	0x56028000

70103804 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
70103804:	b480      	push	{r7}
70103806:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
70103808:	4b04      	ldr	r3, [pc, #16]	@ (7010381c <LL_RCC_IC18_Enable+0x18>)
7010380a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
7010380e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103812:	bf00      	nop
70103814:	46bd      	mov	sp, r7
70103816:	f85d 7b04 	ldr.w	r7, [sp], #4
7010381a:	4770      	bx	lr
7010381c:	56028000 	.word	0x56028000

70103820 <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
70103820:	b480      	push	{r7}
70103822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
70103824:	4b07      	ldr	r3, [pc, #28]	@ (70103844 <LL_RCC_IC18_IsEnabled+0x24>)
70103826:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
7010382a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
7010382e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70103832:	d101      	bne.n	70103838 <LL_RCC_IC18_IsEnabled+0x18>
70103834:	2301      	movs	r3, #1
70103836:	e000      	b.n	7010383a <LL_RCC_IC18_IsEnabled+0x1a>
70103838:	2300      	movs	r3, #0
}
7010383a:	4618      	mov	r0, r3
7010383c:	46bd      	mov	sp, r7
7010383e:	f85d 7b04 	ldr.w	r7, [sp], #4
70103842:	4770      	bx	lr
70103844:	56028000 	.word	0x56028000

70103848 <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
70103848:	b480      	push	{r7}
7010384a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
7010384c:	4b04      	ldr	r3, [pc, #16]	@ (70103860 <LL_RCC_IC18_GetSource+0x18>)
7010384e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
70103852:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
70103856:	4618      	mov	r0, r3
70103858:	46bd      	mov	sp, r7
7010385a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010385e:	4770      	bx	lr
70103860:	56028000 	.word	0x56028000

70103864 <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
70103864:	b480      	push	{r7}
70103866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
70103868:	4b05      	ldr	r3, [pc, #20]	@ (70103880 <LL_RCC_IC18_GetDivider+0x1c>)
7010386a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
7010386e:	0c1b      	lsrs	r3, r3, #16
70103870:	b2db      	uxtb	r3, r3
70103872:	3301      	adds	r3, #1
}
70103874:	4618      	mov	r0, r3
70103876:	46bd      	mov	sp, r7
70103878:	f85d 7b04 	ldr.w	r7, [sp], #4
7010387c:	4770      	bx	lr
7010387e:	bf00      	nop
70103880:	56028000 	.word	0x56028000

70103884 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
70103884:	b480      	push	{r7}
70103886:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
70103888:	4b04      	ldr	r3, [pc, #16]	@ (7010389c <LL_RCC_IC19_Enable+0x18>)
7010388a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
7010388e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103892:	bf00      	nop
70103894:	46bd      	mov	sp, r7
70103896:	f85d 7b04 	ldr.w	r7, [sp], #4
7010389a:	4770      	bx	lr
7010389c:	56028000 	.word	0x56028000

701038a0 <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
701038a0:	b480      	push	{r7}
701038a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
701038a4:	4b07      	ldr	r3, [pc, #28]	@ (701038c4 <LL_RCC_IC19_IsEnabled+0x24>)
701038a6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
701038aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
701038ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
701038b2:	d101      	bne.n	701038b8 <LL_RCC_IC19_IsEnabled+0x18>
701038b4:	2301      	movs	r3, #1
701038b6:	e000      	b.n	701038ba <LL_RCC_IC19_IsEnabled+0x1a>
701038b8:	2300      	movs	r3, #0
}
701038ba:	4618      	mov	r0, r3
701038bc:	46bd      	mov	sp, r7
701038be:	f85d 7b04 	ldr.w	r7, [sp], #4
701038c2:	4770      	bx	lr
701038c4:	56028000 	.word	0x56028000

701038c8 <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
701038c8:	b480      	push	{r7}
701038ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
701038cc:	4b04      	ldr	r3, [pc, #16]	@ (701038e0 <LL_RCC_IC19_GetSource+0x18>)
701038ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
701038d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
701038d6:	4618      	mov	r0, r3
701038d8:	46bd      	mov	sp, r7
701038da:	f85d 7b04 	ldr.w	r7, [sp], #4
701038de:	4770      	bx	lr
701038e0:	56028000 	.word	0x56028000

701038e4 <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
701038e4:	b480      	push	{r7}
701038e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
701038e8:	4b05      	ldr	r3, [pc, #20]	@ (70103900 <LL_RCC_IC19_GetDivider+0x1c>)
701038ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
701038ee:	0c1b      	lsrs	r3, r3, #16
701038f0:	b2db      	uxtb	r3, r3
701038f2:	3301      	adds	r3, #1
}
701038f4:	4618      	mov	r0, r3
701038f6:	46bd      	mov	sp, r7
701038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
701038fc:	4770      	bx	lr
701038fe:	bf00      	nop
70103900:	56028000 	.word	0x56028000

70103904 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
70103904:	b480      	push	{r7}
70103906:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
70103908:	4b04      	ldr	r3, [pc, #16]	@ (7010391c <LL_RCC_IC20_Enable+0x18>)
7010390a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
7010390e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
70103912:	bf00      	nop
70103914:	46bd      	mov	sp, r7
70103916:	f85d 7b04 	ldr.w	r7, [sp], #4
7010391a:	4770      	bx	lr
7010391c:	56028000 	.word	0x56028000

70103920 <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
70103920:	b480      	push	{r7}
70103922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
70103924:	4b07      	ldr	r3, [pc, #28]	@ (70103944 <LL_RCC_IC20_IsEnabled+0x24>)
70103926:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
7010392a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
7010392e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
70103932:	d101      	bne.n	70103938 <LL_RCC_IC20_IsEnabled+0x18>
70103934:	2301      	movs	r3, #1
70103936:	e000      	b.n	7010393a <LL_RCC_IC20_IsEnabled+0x1a>
70103938:	2300      	movs	r3, #0
}
7010393a:	4618      	mov	r0, r3
7010393c:	46bd      	mov	sp, r7
7010393e:	f85d 7b04 	ldr.w	r7, [sp], #4
70103942:	4770      	bx	lr
70103944:	56028000 	.word	0x56028000

70103948 <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
70103948:	b480      	push	{r7}
7010394a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
7010394c:	4b04      	ldr	r3, [pc, #16]	@ (70103960 <LL_RCC_IC20_GetSource+0x18>)
7010394e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
70103952:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
70103956:	4618      	mov	r0, r3
70103958:	46bd      	mov	sp, r7
7010395a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010395e:	4770      	bx	lr
70103960:	56028000 	.word	0x56028000

70103964 <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
70103964:	b480      	push	{r7}
70103966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
70103968:	4b05      	ldr	r3, [pc, #20]	@ (70103980 <LL_RCC_IC20_GetDivider+0x1c>)
7010396a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
7010396e:	0c1b      	lsrs	r3, r3, #16
70103970:	b2db      	uxtb	r3, r3
70103972:	3301      	adds	r3, #1
}
70103974:	4618      	mov	r0, r3
70103976:	46bd      	mov	sp, r7
70103978:	f85d 7b04 	ldr.w	r7, [sp], #4
7010397c:	4770      	bx	lr
7010397e:	bf00      	nop
70103980:	56028000 	.word	0x56028000

70103984 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
70103984:	b480      	push	{r7}
70103986:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
70103988:	4b04      	ldr	r3, [pc, #16]	@ (7010399c <LL_RCC_CLKP_Enable+0x18>)
7010398a:	2240      	movs	r2, #64	@ 0x40
7010398c:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
70103990:	bf00      	nop
70103992:	46bd      	mov	sp, r7
70103994:	f85d 7b04 	ldr.w	r7, [sp], #4
70103998:	4770      	bx	lr
7010399a:	bf00      	nop
7010399c:	56028000 	.word	0x56028000

701039a0 <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
701039a0:	b480      	push	{r7}
701039a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
701039a4:	4b07      	ldr	r3, [pc, #28]	@ (701039c4 <LL_RCC_CLKP_IsEnabled+0x24>)
701039a6:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
701039aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
701039ae:	2b40      	cmp	r3, #64	@ 0x40
701039b0:	d101      	bne.n	701039b6 <LL_RCC_CLKP_IsEnabled+0x16>
701039b2:	2301      	movs	r3, #1
701039b4:	e000      	b.n	701039b8 <LL_RCC_CLKP_IsEnabled+0x18>
701039b6:	2300      	movs	r3, #0
}
701039b8:	4618      	mov	r0, r3
701039ba:	46bd      	mov	sp, r7
701039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
701039c0:	4770      	bx	lr
701039c2:	bf00      	nop
701039c4:	56028000 	.word	0x56028000

701039c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
701039c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
701039cc:	b0f2      	sub	sp, #456	@ 0x1c8
701039ce:	af00      	add	r7, sp, #0
701039d0:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
701039d4:	2300      	movs	r3, #0
701039d6:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
701039da:	2300      	movs	r3, #0
701039dc:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
701039e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
701039e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
701039ec:	2500      	movs	r5, #0
701039ee:	ea54 0305 	orrs.w	r3, r4, r5
701039f2:	d06c      	beq.n	70103ace <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
701039f4:	f7ff f91e 	bl	70102c34 <LL_RCC_GetRTCClockSource>
701039f8:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
701039fc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
70103a00:	2b00      	cmp	r3, #0
70103a02:	d018      	beq.n	70103a36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
70103a04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103a08:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
70103a0c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
70103a10:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
70103a14:	4293      	cmp	r3, r2
70103a16:	d00e      	beq.n	70103a36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
70103a18:	4bc3      	ldr	r3, [pc, #780]	@ (70103d28 <HAL_RCCEx_PeriphCLKConfig+0x360>)
70103a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70103a1c:	4ac2      	ldr	r2, [pc, #776]	@ (70103d28 <HAL_RCCEx_PeriphCLKConfig+0x360>)
70103a1e:	f043 0301 	orr.w	r3, r3, #1
70103a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
70103a24:	4bc0      	ldr	r3, [pc, #768]	@ (70103d28 <HAL_RCCEx_PeriphCLKConfig+0x360>)
70103a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70103a28:	f003 0301 	and.w	r3, r3, #1
70103a2c:	2b00      	cmp	r3, #0
70103a2e:	d102      	bne.n	70103a36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        ret = HAL_ERROR;
70103a30:	2301      	movs	r3, #1
70103a32:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
70103a36:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
70103a3a:	2b00      	cmp	r3, #0
70103a3c:	d143      	bne.n	70103ac6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
70103a3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103a42:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
70103a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70103a4a:	d117      	bne.n	70103a7c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
70103a4c:	f7fe f832 	bl	70101ab4 <HAL_GetTick>
70103a50:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
70103a54:	e00d      	b.n	70103a72 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
70103a56:	f7fe f82d 	bl	70101ab4 <HAL_GetTick>
70103a5a:	4602      	mov	r2, r0
70103a5c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
70103a60:	1ad2      	subs	r2, r2, r3
70103a62:	f241 3388 	movw	r3, #5000	@ 0x1388
70103a66:	429a      	cmp	r2, r3
70103a68:	d903      	bls.n	70103a72 <HAL_RCCEx_PeriphCLKConfig+0xaa>
          {
            ret = HAL_TIMEOUT;
70103a6a:	2303      	movs	r3, #3
70103a6c:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
            break;
70103a70:	e004      	b.n	70103a7c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        while (LL_RCC_LSE_IsReady() == 0U)
70103a72:	f7fe fcf1 	bl	70102458 <LL_RCC_LSE_IsReady>
70103a76:	4603      	mov	r3, r0
70103a78:	2b00      	cmp	r3, #0
70103a7a:	d0ec      	beq.n	70103a56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          }
        }
      }

      if (ret == HAL_OK)
70103a7c:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
70103a80:	2b00      	cmp	r3, #0
70103a82:	d11b      	bne.n	70103abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
70103a84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103a88:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
70103a8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
70103a90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70103a94:	d108      	bne.n	70103aa8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
70103a96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103a9a:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
70103a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
70103aa2:	4618      	mov	r0, r3
70103aa4:	f7ff f8d4 	bl	70102c50 <LL_RCC_SetRTC_HSEPrescaler>
70103aa8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103aac:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
70103ab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
70103ab4:	4618      	mov	r0, r3
70103ab6:	f7ff f8a7 	bl	70102c08 <LL_RCC_SetRTCClockSource>
70103aba:	e008      	b.n	70103ace <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
      else
      {
        /* set overall return value */
        status = ret;
70103abc:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
70103ac0:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
70103ac4:	e003      	b.n	70103ace <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
70103ac6:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
70103aca:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
70103ace:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
70103ad6:	f002 0804 	and.w	r8, r2, #4
70103ada:	f04f 0900 	mov.w	r9, #0
70103ade:	ea58 0309 	orrs.w	r3, r8, r9
70103ae2:	f000 809b 	beq.w	70103c1c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
70103ae6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103aea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
70103aee:	2b04      	cmp	r3, #4
70103af0:	d116      	bne.n	70103b20 <HAL_RCCEx_PeriphCLKConfig+0x158>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
70103af2:	4b8e      	ldr	r3, [pc, #568]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103af4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
70103af8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103afc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103b00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103b04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
70103b06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70103b0c:	3b01      	subs	r3, #1
70103b0e:	041b      	lsls	r3, r3, #16
70103b10:	4313      	orrs	r3, r2
70103b12:	4a86      	ldr	r2, [pc, #536]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103b14:	430b      	orrs	r3, r1
70103b16:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
70103b1a:	f7ff fbb3 	bl	70103284 <LL_RCC_IC5_Enable>
70103b1e:	e076      	b.n	70103c0e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
70103b20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103b24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
70103b28:	2b05      	cmp	r3, #5
70103b2a:	d116      	bne.n	70103b5a <HAL_RCCEx_PeriphCLKConfig+0x192>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
70103b2c:	4b7f      	ldr	r3, [pc, #508]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
70103b32:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103b36:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103b3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103b3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
70103b40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70103b46:	3b01      	subs	r3, #1
70103b48:	041b      	lsls	r3, r3, #16
70103b4a:	4313      	orrs	r3, r2
70103b4c:	4a77      	ldr	r2, [pc, #476]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103b4e:	430b      	orrs	r3, r1
70103b50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
70103b54:	f7ff fc96 	bl	70103484 <LL_RCC_IC10_Enable>
70103b58:	e059      	b.n	70103c0e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
70103b5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103b5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
70103b62:	2b06      	cmp	r3, #6
70103b64:	d116      	bne.n	70103b94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
70103b66:	4b71      	ldr	r3, [pc, #452]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103b68:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
70103b6c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103b70:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103b74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103b78:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
70103b7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103b7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70103b80:	3b01      	subs	r3, #1
70103b82:	041b      	lsls	r3, r3, #16
70103b84:	4313      	orrs	r3, r2
70103b86:	4a69      	ldr	r2, [pc, #420]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103b88:	430b      	orrs	r3, r1
70103b8a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
70103b8e:	f7ff fd79 	bl	70103684 <LL_RCC_IC15_Enable>
70103b92:	e03c      	b.n	70103c0e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
70103b94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103b98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
70103b9c:	2b03      	cmp	r3, #3
70103b9e:	d118      	bne.n	70103bd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
70103ba0:	4b62      	ldr	r3, [pc, #392]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103ba2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
70103ba6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103baa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103bae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103bb2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
70103bb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
70103bbe:	3b01      	subs	r3, #1
70103bc0:	041b      	lsls	r3, r3, #16
70103bc2:	4313      	orrs	r3, r2
70103bc4:	4a59      	ldr	r2, [pc, #356]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103bc6:	430b      	orrs	r3, r1
70103bc8:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
70103bcc:	f7ff fe5a 	bl	70103884 <LL_RCC_IC19_Enable>
70103bd0:	e01d      	b.n	70103c0e <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
70103bd2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103bd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
70103bda:	2b07      	cmp	r3, #7
70103bdc:	d117      	bne.n	70103c0e <HAL_RCCEx_PeriphCLKConfig+0x246>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
70103bde:	4b53      	ldr	r3, [pc, #332]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103be0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
70103be4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103be8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103bec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103bf0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
70103bf4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103bf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
70103bfc:	3b01      	subs	r3, #1
70103bfe:	041b      	lsls	r3, r3, #16
70103c00:	4313      	orrs	r3, r2
70103c02:	4a4a      	ldr	r2, [pc, #296]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103c04:	430b      	orrs	r3, r1
70103c06:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
70103c0a:	f7ff fe7b 	bl	70103904 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
70103c0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103c12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
70103c16:	4618      	mov	r0, r3
70103c18:	f7fe fcd2 	bl	701025c0 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
70103c1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103c20:	e9d3 2300 	ldrd	r2, r3, [r3]
70103c24:	f04f 0a00 	mov.w	sl, #0
70103c28:	f403 0b80 	and.w	fp, r3, #4194304	@ 0x400000
70103c2c:	ea5a 030b 	orrs.w	r3, sl, fp
70103c30:	d04b      	beq.n	70103cca <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
70103c32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103c36:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
70103c3a:	4b3d      	ldr	r3, [pc, #244]	@ (70103d30 <HAL_RCCEx_PeriphCLKConfig+0x368>)
70103c3c:	429a      	cmp	r2, r3
70103c3e:	d116      	bne.n	70103c6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
70103c40:	4b3a      	ldr	r3, [pc, #232]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103c42:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
70103c46:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103c4a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103c4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103c52:	699a      	ldr	r2, [r3, #24]
70103c54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103c58:	69db      	ldr	r3, [r3, #28]
70103c5a:	3b01      	subs	r3, #1
70103c5c:	041b      	lsls	r3, r3, #16
70103c5e:	4313      	orrs	r3, r2
70103c60:	4a32      	ldr	r2, [pc, #200]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103c62:	430b      	orrs	r3, r1
70103c64:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
70103c68:	f7ff fa8c 	bl	70103184 <LL_RCC_IC3_Enable>
70103c6c:	e026      	b.n	70103cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
70103c6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103c72:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
70103c76:	4b2f      	ldr	r3, [pc, #188]	@ (70103d34 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
70103c78:	429a      	cmp	r2, r3
70103c7a:	d116      	bne.n	70103caa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
70103c7c:	4b2b      	ldr	r3, [pc, #172]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103c7e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
70103c82:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103c86:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103c8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103c8e:	6a1a      	ldr	r2, [r3, #32]
70103c90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70103c96:	3b01      	subs	r3, #1
70103c98:	041b      	lsls	r3, r3, #16
70103c9a:	4313      	orrs	r3, r2
70103c9c:	4a23      	ldr	r2, [pc, #140]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103c9e:	430b      	orrs	r3, r1
70103ca0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
70103ca4:	f7ff faae 	bl	70103204 <LL_RCC_IC4_Enable>
70103ca8:	e008      	b.n	70103cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
70103caa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103cae:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
70103cb2:	4b21      	ldr	r3, [pc, #132]	@ (70103d38 <HAL_RCCEx_PeriphCLKConfig+0x370>)
70103cb4:	429a      	cmp	r2, r3
70103cb6:	d101      	bne.n	70103cbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      LL_RCC_CLKP_Enable();
70103cb8:	f7ff fe64 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
70103cbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103cc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
70103cc4:	4618      	mov	r0, r3
70103cc6:	f7fe fe0b 	bl	701028e0 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
70103cca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103cce:	e9d3 2300 	ldrd	r2, r3, [r3]
70103cd2:	2100      	movs	r1, #0
70103cd4:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
70103cd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
70103cdc:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
70103ce0:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
70103ce4:	4603      	mov	r3, r0
70103ce6:	460a      	mov	r2, r1
70103ce8:	4313      	orrs	r3, r2
70103cea:	d057      	beq.n	70103d9c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
70103cec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103cf0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
70103cf4:	4b11      	ldr	r3, [pc, #68]	@ (70103d3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
70103cf6:	429a      	cmp	r2, r3
70103cf8:	d122      	bne.n	70103d40 <HAL_RCCEx_PeriphCLKConfig+0x378>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
70103cfa:	4b0c      	ldr	r3, [pc, #48]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103cfc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
70103d00:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103d04:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103d08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103d0c:	699a      	ldr	r2, [r3, #24]
70103d0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103d12:	69db      	ldr	r3, [r3, #28]
70103d14:	3b01      	subs	r3, #1
70103d16:	041b      	lsls	r3, r3, #16
70103d18:	4313      	orrs	r3, r2
70103d1a:	4a04      	ldr	r2, [pc, #16]	@ (70103d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
70103d1c:	430b      	orrs	r3, r1
70103d1e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
70103d22:	f7ff fa2f 	bl	70103184 <LL_RCC_IC3_Enable>
70103d26:	e032      	b.n	70103d8e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
70103d28:	56024800 	.word	0x56024800
70103d2c:	56028000 	.word	0x56028000
70103d30:	03020014 	.word	0x03020014
70103d34:	03030014 	.word	0x03030014
70103d38:	03010014 	.word	0x03010014
70103d3c:	03020414 	.word	0x03020414
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
70103d40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103d44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
70103d48:	4bc5      	ldr	r3, [pc, #788]	@ (70104060 <HAL_RCCEx_PeriphCLKConfig+0x698>)
70103d4a:	429a      	cmp	r2, r3
70103d4c:	d116      	bne.n	70103d7c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
70103d4e:	4bc5      	ldr	r3, [pc, #788]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103d50:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
70103d54:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103d58:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103d5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103d60:	6a1a      	ldr	r2, [r3, #32]
70103d62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70103d68:	3b01      	subs	r3, #1
70103d6a:	041b      	lsls	r3, r3, #16
70103d6c:	4313      	orrs	r3, r2
70103d6e:	4abd      	ldr	r2, [pc, #756]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103d70:	430b      	orrs	r3, r1
70103d72:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
70103d76:	f7ff fa45 	bl	70103204 <LL_RCC_IC4_Enable>
70103d7a:	e008      	b.n	70103d8e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
70103d7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103d80:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
70103d84:	4bb8      	ldr	r3, [pc, #736]	@ (70104068 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
70103d86:	429a      	cmp	r2, r3
70103d88:	d101      	bne.n	70103d8e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    {
      LL_RCC_CLKP_Enable();
70103d8a:	f7ff fdfb 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
70103d8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103d92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
70103d96:	4618      	mov	r0, r3
70103d98:	f7fe fda2 	bl	701028e0 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
70103d9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103da0:	e9d3 2300 	ldrd	r2, r3, [r3]
70103da4:	2100      	movs	r1, #0
70103da6:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
70103daa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
70103dae:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
70103db2:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
70103db6:	4603      	mov	r3, r0
70103db8:	460a      	mov	r2, r1
70103dba:	4313      	orrs	r3, r2
70103dbc:	d04b      	beq.n	70103e56 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
70103dbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103dc2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
70103dc6:	4ba9      	ldr	r3, [pc, #676]	@ (7010406c <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
70103dc8:	429a      	cmp	r2, r3
70103dca:	d116      	bne.n	70103dfa <HAL_RCCEx_PeriphCLKConfig+0x432>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
70103dcc:	4ba5      	ldr	r3, [pc, #660]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103dce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
70103dd2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103dd6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103dda:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103dde:	699a      	ldr	r2, [r3, #24]
70103de0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103de4:	69db      	ldr	r3, [r3, #28]
70103de6:	3b01      	subs	r3, #1
70103de8:	041b      	lsls	r3, r3, #16
70103dea:	4313      	orrs	r3, r2
70103dec:	4a9d      	ldr	r2, [pc, #628]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103dee:	430b      	orrs	r3, r1
70103df0:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
70103df4:	f7ff f9c6 	bl	70103184 <LL_RCC_IC3_Enable>
70103df8:	e026      	b.n	70103e48 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
70103dfa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103dfe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
70103e02:	4b9b      	ldr	r3, [pc, #620]	@ (70104070 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
70103e04:	429a      	cmp	r2, r3
70103e06:	d116      	bne.n	70103e36 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
70103e08:	4b96      	ldr	r3, [pc, #600]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103e0a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
70103e0e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103e12:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103e16:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103e1a:	6a1a      	ldr	r2, [r3, #32]
70103e1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70103e22:	3b01      	subs	r3, #1
70103e24:	041b      	lsls	r3, r3, #16
70103e26:	4313      	orrs	r3, r2
70103e28:	4a8e      	ldr	r2, [pc, #568]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103e2a:	430b      	orrs	r3, r1
70103e2c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
70103e30:	f7ff f9e8 	bl	70103204 <LL_RCC_IC4_Enable>
70103e34:	e008      	b.n	70103e48 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
70103e36:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103e3a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
70103e3e:	4b8d      	ldr	r3, [pc, #564]	@ (70104074 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
70103e40:	429a      	cmp	r2, r3
70103e42:	d101      	bne.n	70103e48 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      LL_RCC_CLKP_Enable();
70103e44:	f7ff fd9e 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
70103e48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103e4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
70103e50:	4618      	mov	r0, r3
70103e52:	f7fe fd45 	bl	701028e0 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
70103e56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
70103e5e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
70103e62:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
70103e66:	2300      	movs	r3, #0
70103e68:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
70103e6c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
70103e70:	4603      	mov	r3, r0
70103e72:	460a      	mov	r2, r1
70103e74:	4313      	orrs	r3, r2
70103e76:	d048      	beq.n	70103f0a <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
70103e78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103e7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
70103e80:	2b20      	cmp	r3, #32
70103e82:	d116      	bne.n	70103eb2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
70103e84:	4b77      	ldr	r3, [pc, #476]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103e86:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
70103e8a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103e8e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103e92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103e96:	699a      	ldr	r2, [r3, #24]
70103e98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103e9c:	69db      	ldr	r3, [r3, #28]
70103e9e:	3b01      	subs	r3, #1
70103ea0:	041b      	lsls	r3, r3, #16
70103ea2:	4313      	orrs	r3, r2
70103ea4:	4a6f      	ldr	r2, [pc, #444]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103ea6:	430b      	orrs	r3, r1
70103ea8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
70103eac:	f7ff f96a 	bl	70103184 <LL_RCC_IC3_Enable>
70103eb0:	e024      	b.n	70103efc <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
70103eb2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103eb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
70103eba:	2b30      	cmp	r3, #48	@ 0x30
70103ebc:	d116      	bne.n	70103eec <HAL_RCCEx_PeriphCLKConfig+0x524>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
70103ebe:	4b69      	ldr	r3, [pc, #420]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103ec0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
70103ec4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103ec8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103ecc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103ed0:	6a1a      	ldr	r2, [r3, #32]
70103ed2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70103ed8:	3b01      	subs	r3, #1
70103eda:	041b      	lsls	r3, r3, #16
70103edc:	4313      	orrs	r3, r2
70103ede:	4a61      	ldr	r2, [pc, #388]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103ee0:	430b      	orrs	r3, r1
70103ee2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
70103ee6:	f7ff f98d 	bl	70103204 <LL_RCC_IC4_Enable>
70103eea:	e007      	b.n	70103efc <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
70103eec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103ef0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
70103ef4:	2b10      	cmp	r3, #16
70103ef6:	d101      	bne.n	70103efc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      LL_RCC_CLKP_Enable();
70103ef8:	f7ff fd44 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
70103efc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103f00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
70103f04:	4618      	mov	r0, r3
70103f06:	f7fe fc03 	bl	70102710 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
70103f0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
70103f12:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
70103f16:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
70103f1a:	2300      	movs	r3, #0
70103f1c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
70103f20:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
70103f24:	4603      	mov	r3, r0
70103f26:	460a      	mov	r2, r1
70103f28:	4313      	orrs	r3, r2
70103f2a:	d04b      	beq.n	70103fc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
70103f2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103f30:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
70103f34:	4b50      	ldr	r3, [pc, #320]	@ (70104078 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
70103f36:	429a      	cmp	r2, r3
70103f38:	d116      	bne.n	70103f68 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
70103f3a:	4b4a      	ldr	r3, [pc, #296]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103f3c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
70103f40:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103f44:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103f48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103f4c:	6a1a      	ldr	r2, [r3, #32]
70103f4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70103f54:	3b01      	subs	r3, #1
70103f56:	041b      	lsls	r3, r3, #16
70103f58:	4313      	orrs	r3, r2
70103f5a:	4a42      	ldr	r2, [pc, #264]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103f5c:	430b      	orrs	r3, r1
70103f5e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
70103f62:	f7ff f94f 	bl	70103204 <LL_RCC_IC4_Enable>
70103f66:	e026      	b.n	70103fb6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
70103f68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103f6c:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
70103f70:	4b42      	ldr	r3, [pc, #264]	@ (7010407c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
70103f72:	429a      	cmp	r2, r3
70103f74:	d116      	bne.n	70103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
70103f76:	4b3b      	ldr	r3, [pc, #236]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103f78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
70103f7c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103f80:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70103f84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103f88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
70103f8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70103f90:	3b01      	subs	r3, #1
70103f92:	041b      	lsls	r3, r3, #16
70103f94:	4313      	orrs	r3, r2
70103f96:	4a33      	ldr	r2, [pc, #204]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103f98:	430b      	orrs	r3, r1
70103f9a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
70103f9e:	f7ff f971 	bl	70103284 <LL_RCC_IC5_Enable>
70103fa2:	e008      	b.n	70103fb6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
70103fa4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103fa8:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
70103fac:	4b34      	ldr	r3, [pc, #208]	@ (70104080 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
70103fae:	429a      	cmp	r2, r3
70103fb0:	d101      	bne.n	70103fb6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      LL_RCC_CLKP_Enable();
70103fb2:	f7ff fce7 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
70103fb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103fba:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
70103fbe:	4618      	mov	r0, r3
70103fc0:	f7fe fc57 	bl	70102872 <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
70103fc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
70103fcc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
70103fd0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
70103fd4:	2300      	movs	r3, #0
70103fd6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
70103fda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
70103fde:	4603      	mov	r3, r0
70103fe0:	460a      	mov	r2, r1
70103fe2:	4313      	orrs	r3, r2
70103fe4:	d062      	beq.n	701040ac <HAL_RCCEx_PeriphCLKConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
70103fe6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70103fea:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
70103fee:	4b25      	ldr	r3, [pc, #148]	@ (70104084 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
70103ff0:	429a      	cmp	r2, r3
70103ff2:	d116      	bne.n	70104022 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
70103ff4:	4b1b      	ldr	r3, [pc, #108]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70103ff6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
70103ffa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70103ffe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104002:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104006:	6a1a      	ldr	r2, [r3, #32]
70104008:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7010400e:	3b01      	subs	r3, #1
70104010:	041b      	lsls	r3, r3, #16
70104012:	4313      	orrs	r3, r2
70104014:	4a13      	ldr	r2, [pc, #76]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70104016:	430b      	orrs	r3, r1
70104018:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
7010401c:	f7ff f8f2 	bl	70103204 <LL_RCC_IC4_Enable>
70104020:	e03d      	b.n	7010409e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
70104022:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104026:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
7010402a:	4b17      	ldr	r3, [pc, #92]	@ (70104088 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
7010402c:	429a      	cmp	r2, r3
7010402e:	d12d      	bne.n	7010408c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
70104030:	4b0c      	ldr	r3, [pc, #48]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70104032:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
70104036:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
7010403a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
7010403e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104042:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
70104044:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7010404a:	3b01      	subs	r3, #1
7010404c:	041b      	lsls	r3, r3, #16
7010404e:	4313      	orrs	r3, r2
70104050:	4a04      	ldr	r2, [pc, #16]	@ (70104064 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
70104052:	430b      	orrs	r3, r1
70104054:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
70104058:	f7ff f914 	bl	70103284 <LL_RCC_IC5_Enable>
7010405c:	e01f      	b.n	7010409e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
7010405e:	bf00      	nop
70104060:	03030414 	.word	0x03030414
70104064:	56028000 	.word	0x56028000
70104068:	03010414 	.word	0x03010414
7010406c:	03020814 	.word	0x03020814
70104070:	03030814 	.word	0x03030814
70104074:	03010814 	.word	0x03010814
70104078:	0302001c 	.word	0x0302001c
7010407c:	0303001c 	.word	0x0303001c
70104080:	0301001c 	.word	0x0301001c
70104084:	0302041c 	.word	0x0302041c
70104088:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
7010408c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104090:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
70104094:	4bb3      	ldr	r3, [pc, #716]	@ (70104364 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
70104096:	429a      	cmp	r2, r3
70104098:	d101      	bne.n	7010409e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      LL_RCC_CLKP_Enable();
7010409a:	f7ff fc73 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
7010409e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701040a2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
701040a6:	4618      	mov	r0, r3
701040a8:	f7fe fbe3 	bl	70102872 <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
701040ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
701040b4:	f002 0301 	and.w	r3, r2, #1
701040b8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
701040bc:	2300      	movs	r3, #0
701040be:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
701040c2:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
701040c6:	4603      	mov	r3, r0
701040c8:	460a      	mov	r2, r1
701040ca:	4313      	orrs	r3, r2
701040cc:	d057      	beq.n	7010417e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
701040ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701040d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
701040d6:	2b20      	cmp	r3, #32
701040d8:	d116      	bne.n	70104108 <HAL_RCCEx_PeriphCLKConfig+0x740>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
701040da:	4ba3      	ldr	r3, [pc, #652]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
701040dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
701040e0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701040e4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701040e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701040ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
701040ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701040f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
701040f4:	3b01      	subs	r3, #1
701040f6:	041b      	lsls	r3, r3, #16
701040f8:	4313      	orrs	r3, r2
701040fa:	4a9b      	ldr	r2, [pc, #620]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
701040fc:	430b      	orrs	r3, r1
701040fe:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
70104102:	f7ff f8ff 	bl	70103304 <LL_RCC_IC7_Enable>
70104106:	e024      	b.n	70104152 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
70104108:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010410c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
70104110:	2b30      	cmp	r3, #48	@ 0x30
70104112:	d116      	bne.n	70104142 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
70104114:	4b94      	ldr	r3, [pc, #592]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
70104116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
7010411a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
7010411e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104122:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
70104128:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
7010412e:	3b01      	subs	r3, #1
70104130:	041b      	lsls	r3, r3, #16
70104132:	4313      	orrs	r3, r2
70104134:	4a8c      	ldr	r2, [pc, #560]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
70104136:	430b      	orrs	r3, r1
70104138:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
7010413c:	f7ff f922 	bl	70103384 <LL_RCC_IC8_Enable>
70104140:	e007      	b.n	70104152 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
70104142:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104146:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
7010414a:	2b10      	cmp	r3, #16
7010414c:	d101      	bne.n	70104152 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      LL_RCC_CLKP_Enable();
7010414e:	f7ff fc19 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
70104152:	4b85      	ldr	r3, [pc, #532]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
70104154:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
70104158:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
7010415c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
70104160:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104164:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
70104168:	3b01      	subs	r3, #1
7010416a:	021a      	lsls	r2, r3, #8
7010416c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104170:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
70104174:	4313      	orrs	r3, r2
70104176:	4a7c      	ldr	r2, [pc, #496]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
70104178:	430b      	orrs	r3, r1
7010417a:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
7010417e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104182:	e9d3 2300 	ldrd	r2, r3, [r3]
70104186:	f002 0302 	and.w	r3, r2, #2
7010418a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
7010418e:	2300      	movs	r3, #0
70104190:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
70104194:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
70104198:	4603      	mov	r3, r0
7010419a:	460a      	mov	r2, r1
7010419c:	4313      	orrs	r3, r2
7010419e:	d048      	beq.n	70104232 <HAL_RCCEx_PeriphCLKConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
701041a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701041a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
701041a8:	2b02      	cmp	r3, #2
701041aa:	d116      	bne.n	701041da <HAL_RCCEx_PeriphCLKConfig+0x812>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
701041ac:	4b6e      	ldr	r3, [pc, #440]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
701041ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
701041b2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701041b6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701041ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701041be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
701041c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701041c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
701041c6:	3b01      	subs	r3, #1
701041c8:	041b      	lsls	r3, r3, #16
701041ca:	4313      	orrs	r3, r2
701041cc:	4a66      	ldr	r2, [pc, #408]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
701041ce:	430b      	orrs	r3, r1
701041d0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
701041d4:	f7ff f896 	bl	70103304 <LL_RCC_IC7_Enable>
701041d8:	e024      	b.n	70104224 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
701041da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701041de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
701041e2:	2b03      	cmp	r3, #3
701041e4:	d116      	bne.n	70104214 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
701041e6:	4b60      	ldr	r3, [pc, #384]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
701041e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
701041ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701041f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701041f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701041f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
701041fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701041fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70104200:	3b01      	subs	r3, #1
70104202:	041b      	lsls	r3, r3, #16
70104204:	4313      	orrs	r3, r2
70104206:	4a58      	ldr	r2, [pc, #352]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
70104208:	430b      	orrs	r3, r1
7010420a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
7010420e:	f7ff f8b9 	bl	70103384 <LL_RCC_IC8_Enable>
70104212:	e007      	b.n	70104224 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
70104214:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104218:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
7010421c:	2b01      	cmp	r3, #1
7010421e:	d101      	bne.n	70104224 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      LL_RCC_CLKP_Enable();
70104220:	f7ff fbb0 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
70104224:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104228:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
7010422c:	4618      	mov	r0, r3
7010422e:	f7fe f9b1 	bl	70102594 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
70104232:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104236:	e9d3 2300 	ldrd	r2, r3, [r3]
7010423a:	f002 0308 	and.w	r3, r2, #8
7010423e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
70104242:	2300      	movs	r3, #0
70104244:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
70104248:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
7010424c:	4603      	mov	r3, r0
7010424e:	460a      	mov	r2, r1
70104250:	4313      	orrs	r3, r2
70104252:	d017      	beq.n	70104284 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
70104254:	4b44      	ldr	r3, [pc, #272]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
70104256:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
7010425a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
7010425e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104262:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104266:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
7010426a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
70104272:	3b01      	subs	r3, #1
70104274:	041b      	lsls	r3, r3, #16
70104276:	4313      	orrs	r3, r2
70104278:	4a3b      	ldr	r2, [pc, #236]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
7010427a:	430b      	orrs	r3, r1
7010427c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
70104280:	f7ff fac0 	bl	70103804 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
70104284:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104288:	e9d3 2300 	ldrd	r2, r3, [r3]
7010428c:	f002 0310 	and.w	r3, r2, #16
70104290:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
70104294:	2300      	movs	r3, #0
70104296:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
7010429a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
7010429e:	4603      	mov	r3, r0
701042a0:	460a      	mov	r2, r1
701042a2:	4313      	orrs	r3, r2
701042a4:	d02f      	beq.n	70104306 <HAL_RCCEx_PeriphCLKConfig+0x93e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
701042a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701042aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
701042ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
701042b2:	d118      	bne.n	701042e6 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
701042b4:	4b2c      	ldr	r3, [pc, #176]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
701042b6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
701042ba:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701042be:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701042c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701042c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
701042ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701042ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
701042d2:	3b01      	subs	r3, #1
701042d4:	041b      	lsls	r3, r3, #16
701042d6:	4313      	orrs	r3, r2
701042d8:	4a23      	ldr	r2, [pc, #140]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
701042da:	430b      	orrs	r3, r1
701042dc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
701042e0:	f7ff fa50 	bl	70103784 <LL_RCC_IC17_Enable>
701042e4:	e008      	b.n	701042f8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
701042e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701042ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
701042ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
701042f2:	d101      	bne.n	701042f8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      LL_RCC_CLKP_Enable();
701042f4:	f7ff fb46 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
701042f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701042fc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
70104300:	4618      	mov	r0, r3
70104302:	f7fe f973 	bl	701025ec <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
70104306:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010430a:	e9d3 2300 	ldrd	r2, r3, [r3]
7010430e:	f002 0320 	and.w	r3, r2, #32
70104312:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
70104316:	2300      	movs	r3, #0
70104318:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
7010431c:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
70104320:	4603      	mov	r3, r0
70104322:	460a      	mov	r2, r1
70104324:	4313      	orrs	r3, r2
70104326:	d031      	beq.n	7010438c <HAL_RCCEx_PeriphCLKConfig+0x9c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
70104328:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010432c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
70104330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70104334:	d11a      	bne.n	7010436c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
70104336:	4b0c      	ldr	r3, [pc, #48]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
70104338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
7010433c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104340:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104344:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104348:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
7010434a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010434e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
70104350:	3b01      	subs	r3, #1
70104352:	041b      	lsls	r3, r3, #16
70104354:	4313      	orrs	r3, r2
70104356:	4a04      	ldr	r2, [pc, #16]	@ (70104368 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
70104358:	430b      	orrs	r3, r1
7010435a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
7010435e:	f7ff f8d1 	bl	70103504 <LL_RCC_IC12_Enable>
70104362:	e00c      	b.n	7010437e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
70104364:	0301041c 	.word	0x0301041c
70104368:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
7010436c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104370:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
70104374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
70104378:	d101      	bne.n	7010437e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      LL_RCC_CLKP_Enable();
7010437a:	f7ff fb03 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
7010437e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104382:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
70104386:	4618      	mov	r0, r3
70104388:	f7fe f946 	bl	70102618 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
7010438c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104390:	e9d3 2300 	ldrd	r2, r3, [r3]
70104394:	f002 0340 	and.w	r3, r2, #64	@ 0x40
70104398:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
7010439c:	2300      	movs	r3, #0
7010439e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
701043a2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
701043a6:	4603      	mov	r3, r0
701043a8:	460a      	mov	r2, r1
701043aa:	4313      	orrs	r3, r2
701043ac:	d006      	beq.n	701043bc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
701043ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701043b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
701043b6:	4618      	mov	r0, r3
701043b8:	f7fe f944 	bl	70102644 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
701043bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
701043c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
701043c8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
701043cc:	2300      	movs	r3, #0
701043ce:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
701043d2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
701043d6:	4603      	mov	r3, r0
701043d8:	460a      	mov	r2, r1
701043da:	4313      	orrs	r3, r2
701043dc:	d006      	beq.n	701043ec <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
701043de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701043e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
701043e6:	4618      	mov	r0, r3
701043e8:	f7fe f950 	bl	7010268c <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
701043ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
701043f4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
701043f8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
701043fc:	2300      	movs	r3, #0
701043fe:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
70104402:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
70104406:	4603      	mov	r3, r0
70104408:	460a      	mov	r2, r1
7010440a:	4313      	orrs	r3, r2
7010440c:	d006      	beq.n	7010441c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
7010440e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104412:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
70104416:	4618      	mov	r0, r3
70104418:	f7fe f94e 	bl	701026b8 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
7010441c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104420:	e9d3 2300 	ldrd	r2, r3, [r3]
70104424:	f402 7300 	and.w	r3, r2, #512	@ 0x200
70104428:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
7010442c:	2300      	movs	r3, #0
7010442e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
70104432:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
70104436:	4603      	mov	r3, r0
70104438:	460a      	mov	r2, r1
7010443a:	4313      	orrs	r3, r2
7010443c:	d038      	beq.n	701044b0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
7010443e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104442:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
70104446:	2b02      	cmp	r3, #2
70104448:	d116      	bne.n	70104478 <HAL_RCCEx_PeriphCLKConfig+0xab0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
7010444a:	4bbc      	ldr	r3, [pc, #752]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
7010444c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
70104450:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104454:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104458:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010445c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
7010445e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70104464:	3b01      	subs	r3, #1
70104466:	041b      	lsls	r3, r3, #16
70104468:	4313      	orrs	r3, r2
7010446a:	4ab4      	ldr	r2, [pc, #720]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
7010446c:	430b      	orrs	r3, r1
7010446e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
70104472:	f7ff f887 	bl	70103584 <LL_RCC_IC13_Enable>
70104476:	e007      	b.n	70104488 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
70104478:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010447c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
70104480:	2b01      	cmp	r3, #1
70104482:	d101      	bne.n	70104488 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    {
      LL_RCC_CLKP_Enable();
70104484:	f7ff fa7e 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
70104488:	4bac      	ldr	r3, [pc, #688]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
7010448a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
7010448e:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
70104492:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
7010449a:	3b01      	subs	r3, #1
7010449c:	011a      	lsls	r2, r3, #4
7010449e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701044a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
701044a6:	4313      	orrs	r3, r2
701044a8:	4aa4      	ldr	r2, [pc, #656]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
701044aa:	430b      	orrs	r3, r1
701044ac:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
701044b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
701044b8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
701044bc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
701044c0:	2300      	movs	r3, #0
701044c2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
701044c6:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
701044ca:	4603      	mov	r3, r0
701044cc:	460a      	mov	r2, r1
701044ce:	4313      	orrs	r3, r2
701044d0:	d02d      	beq.n	7010452e <HAL_RCCEx_PeriphCLKConfig+0xb66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
701044d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701044d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
701044da:	2b02      	cmp	r3, #2
701044dc:	d118      	bne.n	70104510 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
701044de:	4b97      	ldr	r3, [pc, #604]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
701044e0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
701044e4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701044e8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701044ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701044f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
701044f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701044f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
701044fc:	3b01      	subs	r3, #1
701044fe:	041b      	lsls	r3, r3, #16
70104500:	4313      	orrs	r3, r2
70104502:	4a8e      	ldr	r2, [pc, #568]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
70104504:	430b      	orrs	r3, r1
70104506:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
7010450a:	f7ff f9bb 	bl	70103884 <LL_RCC_IC19_Enable>
7010450e:	e007      	b.n	70104520 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
70104510:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104514:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70104518:	2b01      	cmp	r3, #1
7010451a:	d101      	bne.n	70104520 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
      LL_RCC_CLKP_Enable();
7010451c:	f7ff fa32 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
70104520:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104524:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70104528:	4618      	mov	r0, r3
7010452a:	f7fe f8db 	bl	701026e4 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
7010452e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104532:	e9d3 2300 	ldrd	r2, r3, [r3]
70104536:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
7010453a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
7010453e:	2300      	movs	r3, #0
70104540:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
70104544:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
70104548:	4603      	mov	r3, r0
7010454a:	460a      	mov	r2, r1
7010454c:	4313      	orrs	r3, r2
7010454e:	d04b      	beq.n	701045e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
70104550:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104554:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
70104558:	4b79      	ldr	r3, [pc, #484]	@ (70104740 <HAL_RCCEx_PeriphCLKConfig+0xd78>)
7010455a:	429a      	cmp	r2, r3
7010455c:	d116      	bne.n	7010458c <HAL_RCCEx_PeriphCLKConfig+0xbc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
7010455e:	4b77      	ldr	r3, [pc, #476]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
70104560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
70104564:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104568:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
7010456c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104570:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
70104572:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70104578:	3b01      	subs	r3, #1
7010457a:	041b      	lsls	r3, r3, #16
7010457c:	4313      	orrs	r3, r2
7010457e:	4a6f      	ldr	r2, [pc, #444]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
70104580:	430b      	orrs	r3, r1
70104582:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
70104586:	f7fe ff7d 	bl	70103484 <LL_RCC_IC10_Enable>
7010458a:	e026      	b.n	701045da <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
7010458c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104590:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
70104594:	4b6b      	ldr	r3, [pc, #428]	@ (70104744 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
70104596:	429a      	cmp	r2, r3
70104598:	d116      	bne.n	701045c8 <HAL_RCCEx_PeriphCLKConfig+0xc00>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
7010459a:	4b68      	ldr	r3, [pc, #416]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
7010459c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
701045a0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701045a4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701045a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701045ac:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
701045ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701045b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
701045b4:	3b01      	subs	r3, #1
701045b6:	041b      	lsls	r3, r3, #16
701045b8:	4313      	orrs	r3, r2
701045ba:	4a60      	ldr	r2, [pc, #384]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
701045bc:	430b      	orrs	r3, r1
701045be:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
701045c2:	f7ff f85f 	bl	70103684 <LL_RCC_IC15_Enable>
701045c6:	e008      	b.n	701045da <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
701045c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701045cc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
701045d0:	4b5d      	ldr	r3, [pc, #372]	@ (70104748 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
701045d2:	429a      	cmp	r2, r3
701045d4:	d101      	bne.n	701045da <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      LL_RCC_CLKP_Enable();
701045d6:	f7ff f9d5 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
701045da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701045de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
701045e2:	4618      	mov	r0, r3
701045e4:	f7fe f8aa 	bl	7010273c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
701045e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
701045f0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
701045f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
701045f8:	2300      	movs	r3, #0
701045fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
701045fe:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
70104602:	4603      	mov	r3, r0
70104604:	460a      	mov	r2, r1
70104606:	4313      	orrs	r3, r2
70104608:	d04b      	beq.n	701046a2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
7010460a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010460e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
70104612:	4b4e      	ldr	r3, [pc, #312]	@ (7010474c <HAL_RCCEx_PeriphCLKConfig+0xd84>)
70104614:	429a      	cmp	r2, r3
70104616:	d116      	bne.n	70104646 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
70104618:	4b48      	ldr	r3, [pc, #288]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
7010461a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
7010461e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104622:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104626:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010462a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
7010462c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70104632:	3b01      	subs	r3, #1
70104634:	041b      	lsls	r3, r3, #16
70104636:	4313      	orrs	r3, r2
70104638:	4a40      	ldr	r2, [pc, #256]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
7010463a:	430b      	orrs	r3, r1
7010463c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
70104640:	f7fe ff20 	bl	70103484 <LL_RCC_IC10_Enable>
70104644:	e026      	b.n	70104694 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
70104646:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010464a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
7010464e:	4b40      	ldr	r3, [pc, #256]	@ (70104750 <HAL_RCCEx_PeriphCLKConfig+0xd88>)
70104650:	429a      	cmp	r2, r3
70104652:	d116      	bne.n	70104682 <HAL_RCCEx_PeriphCLKConfig+0xcba>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
70104654:	4b39      	ldr	r3, [pc, #228]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
70104656:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
7010465a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
7010465e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104662:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104666:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
70104668:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010466c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7010466e:	3b01      	subs	r3, #1
70104670:	041b      	lsls	r3, r3, #16
70104672:	4313      	orrs	r3, r2
70104674:	4a31      	ldr	r2, [pc, #196]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
70104676:	430b      	orrs	r3, r1
70104678:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
7010467c:	f7ff f802 	bl	70103684 <LL_RCC_IC15_Enable>
70104680:	e008      	b.n	70104694 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
70104682:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104686:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
7010468a:	4b32      	ldr	r3, [pc, #200]	@ (70104754 <HAL_RCCEx_PeriphCLKConfig+0xd8c>)
7010468c:	429a      	cmp	r2, r3
7010468e:	d101      	bne.n	70104694 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      LL_RCC_CLKP_Enable();
70104690:	f7ff f978 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
70104694:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104698:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
7010469c:	4618      	mov	r0, r3
7010469e:	f7fe f84d 	bl	7010273c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
701046a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
701046aa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
701046ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
701046b2:	2300      	movs	r3, #0
701046b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
701046b8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
701046bc:	4603      	mov	r3, r0
701046be:	460a      	mov	r2, r1
701046c0:	4313      	orrs	r3, r2
701046c2:	d05d      	beq.n	70104780 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
701046c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701046c8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
701046cc:	4b22      	ldr	r3, [pc, #136]	@ (70104758 <HAL_RCCEx_PeriphCLKConfig+0xd90>)
701046ce:	429a      	cmp	r2, r3
701046d0:	d116      	bne.n	70104700 <HAL_RCCEx_PeriphCLKConfig+0xd38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
701046d2:	4b1a      	ldr	r3, [pc, #104]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
701046d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
701046d8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701046dc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701046e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701046e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
701046e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701046ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
701046ec:	3b01      	subs	r3, #1
701046ee:	041b      	lsls	r3, r3, #16
701046f0:	4313      	orrs	r3, r2
701046f2:	4a12      	ldr	r2, [pc, #72]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
701046f4:	430b      	orrs	r3, r1
701046f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
701046fa:	f7fe fec3 	bl	70103484 <LL_RCC_IC10_Enable>
701046fe:	e038      	b.n	70104772 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
70104700:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104704:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
70104708:	4b14      	ldr	r3, [pc, #80]	@ (7010475c <HAL_RCCEx_PeriphCLKConfig+0xd94>)
7010470a:	429a      	cmp	r2, r3
7010470c:	d128      	bne.n	70104760 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
7010470e:	4b0b      	ldr	r3, [pc, #44]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
70104710:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
70104714:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104718:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
7010471c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104720:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
70104722:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104726:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70104728:	3b01      	subs	r3, #1
7010472a:	041b      	lsls	r3, r3, #16
7010472c:	4313      	orrs	r3, r2
7010472e:	4a03      	ldr	r2, [pc, #12]	@ (7010473c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
70104730:	430b      	orrs	r3, r1
70104732:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
70104736:	f7fe ffa5 	bl	70103684 <LL_RCC_IC15_Enable>
7010473a:	e01a      	b.n	70104772 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
7010473c:	56028000 	.word	0x56028000
70104740:	0702000c 	.word	0x0702000c
70104744:	0703000c 	.word	0x0703000c
70104748:	0701000c 	.word	0x0701000c
7010474c:	0702040c 	.word	0x0702040c
70104750:	0703040c 	.word	0x0703040c
70104754:	0701040c 	.word	0x0701040c
70104758:	0702080c 	.word	0x0702080c
7010475c:	0703080c 	.word	0x0703080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
70104760:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104764:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
70104768:	4bc8      	ldr	r3, [pc, #800]	@ (70104a8c <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
7010476a:	429a      	cmp	r2, r3
7010476c:	d101      	bne.n	70104772 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      LL_RCC_CLKP_Enable();
7010476e:	f7ff f909 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
70104772:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
7010477a:	4618      	mov	r0, r3
7010477c:	f7fd ffde 	bl	7010273c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
70104780:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104784:	e9d3 2300 	ldrd	r2, r3, [r3]
70104788:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
7010478c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
70104790:	2300      	movs	r3, #0
70104792:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
70104796:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
7010479a:	4603      	mov	r3, r0
7010479c:	460a      	mov	r2, r1
7010479e:	4313      	orrs	r3, r2
701047a0:	d04b      	beq.n	7010483a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
701047a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701047a6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
701047aa:	4bb9      	ldr	r3, [pc, #740]	@ (70104a90 <HAL_RCCEx_PeriphCLKConfig+0x10c8>)
701047ac:	429a      	cmp	r2, r3
701047ae:	d116      	bne.n	701047de <HAL_RCCEx_PeriphCLKConfig+0xe16>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
701047b0:	4bb8      	ldr	r3, [pc, #736]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
701047b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
701047b6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701047ba:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701047be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701047c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
701047c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701047c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
701047ca:	3b01      	subs	r3, #1
701047cc:	041b      	lsls	r3, r3, #16
701047ce:	4313      	orrs	r3, r2
701047d0:	4ab0      	ldr	r2, [pc, #704]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
701047d2:	430b      	orrs	r3, r1
701047d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
701047d8:	f7fe fe54 	bl	70103484 <LL_RCC_IC10_Enable>
701047dc:	e026      	b.n	7010482c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
701047de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701047e2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
701047e6:	4bac      	ldr	r3, [pc, #688]	@ (70104a98 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
701047e8:	429a      	cmp	r2, r3
701047ea:	d116      	bne.n	7010481a <HAL_RCCEx_PeriphCLKConfig+0xe52>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
701047ec:	4ba9      	ldr	r3, [pc, #676]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
701047ee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
701047f2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701047f6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701047fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701047fe:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
70104800:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70104806:	3b01      	subs	r3, #1
70104808:	041b      	lsls	r3, r3, #16
7010480a:	4313      	orrs	r3, r2
7010480c:	4aa1      	ldr	r2, [pc, #644]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
7010480e:	430b      	orrs	r3, r1
70104810:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
70104814:	f7fe ff36 	bl	70103684 <LL_RCC_IC15_Enable>
70104818:	e008      	b.n	7010482c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
7010481a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010481e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
70104822:	4b9e      	ldr	r3, [pc, #632]	@ (70104a9c <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
70104824:	429a      	cmp	r2, r3
70104826:	d101      	bne.n	7010482c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      LL_RCC_CLKP_Enable();
70104828:	f7ff f8ac 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
7010482c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
70104834:	4618      	mov	r0, r3
70104836:	f7fd ff81 	bl	7010273c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
7010483a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010483e:	e9d3 2300 	ldrd	r2, r3, [r3]
70104842:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
70104846:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
7010484a:	2300      	movs	r3, #0
7010484c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
70104850:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
70104854:	4603      	mov	r3, r0
70104856:	460a      	mov	r2, r1
70104858:	4313      	orrs	r3, r2
7010485a:	d04b      	beq.n	701048f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
7010485c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104860:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
70104864:	4b8e      	ldr	r3, [pc, #568]	@ (70104aa0 <HAL_RCCEx_PeriphCLKConfig+0x10d8>)
70104866:	429a      	cmp	r2, r3
70104868:	d116      	bne.n	70104898 <HAL_RCCEx_PeriphCLKConfig+0xed0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
7010486a:	4b8a      	ldr	r3, [pc, #552]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
7010486c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
70104870:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104874:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104878:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010487c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
7010487e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70104884:	3b01      	subs	r3, #1
70104886:	041b      	lsls	r3, r3, #16
70104888:	4313      	orrs	r3, r2
7010488a:	4a82      	ldr	r2, [pc, #520]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
7010488c:	430b      	orrs	r3, r1
7010488e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
70104892:	f7fe fdf7 	bl	70103484 <LL_RCC_IC10_Enable>
70104896:	e026      	b.n	701048e6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
70104898:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010489c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
701048a0:	4b80      	ldr	r3, [pc, #512]	@ (70104aa4 <HAL_RCCEx_PeriphCLKConfig+0x10dc>)
701048a2:	429a      	cmp	r2, r3
701048a4:	d116      	bne.n	701048d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
701048a6:	4b7b      	ldr	r3, [pc, #492]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
701048a8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
701048ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701048b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701048b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701048b8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
701048ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701048be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
701048c0:	3b01      	subs	r3, #1
701048c2:	041b      	lsls	r3, r3, #16
701048c4:	4313      	orrs	r3, r2
701048c6:	4a73      	ldr	r2, [pc, #460]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
701048c8:	430b      	orrs	r3, r1
701048ca:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
701048ce:	f7fe fed9 	bl	70103684 <LL_RCC_IC15_Enable>
701048d2:	e008      	b.n	701048e6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
701048d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701048d8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
701048dc:	4b72      	ldr	r3, [pc, #456]	@ (70104aa8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
701048de:	429a      	cmp	r2, r3
701048e0:	d101      	bne.n	701048e6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    {
      LL_RCC_CLKP_Enable();
701048e2:	f7ff f84f 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
701048e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701048ea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
701048ee:	4618      	mov	r0, r3
701048f0:	f7fd ff2f 	bl	70102752 <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
701048f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
701048fc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
70104900:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
70104904:	2300      	movs	r3, #0
70104906:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
7010490a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
7010490e:	4603      	mov	r3, r0
70104910:	460a      	mov	r2, r1
70104912:	4313      	orrs	r3, r2
70104914:	d04b      	beq.n	701049ae <HAL_RCCEx_PeriphCLKConfig+0xfe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
70104916:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010491a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
7010491e:	4b63      	ldr	r3, [pc, #396]	@ (70104aac <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
70104920:	429a      	cmp	r2, r3
70104922:	d116      	bne.n	70104952 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
70104924:	4b5b      	ldr	r3, [pc, #364]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
70104926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
7010492a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
7010492e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104932:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104936:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
70104938:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010493c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
7010493e:	3b01      	subs	r3, #1
70104940:	041b      	lsls	r3, r3, #16
70104942:	4313      	orrs	r3, r2
70104944:	4a53      	ldr	r2, [pc, #332]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
70104946:	430b      	orrs	r3, r1
70104948:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
7010494c:	f7fe fd9a 	bl	70103484 <LL_RCC_IC10_Enable>
70104950:	e026      	b.n	701049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
70104952:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104956:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
7010495a:	4b55      	ldr	r3, [pc, #340]	@ (70104ab0 <HAL_RCCEx_PeriphCLKConfig+0x10e8>)
7010495c:	429a      	cmp	r2, r3
7010495e:	d116      	bne.n	7010498e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
70104960:	4b4c      	ldr	r3, [pc, #304]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
70104962:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
70104966:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
7010496a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
7010496e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104972:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
70104974:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
7010497a:	3b01      	subs	r3, #1
7010497c:	041b      	lsls	r3, r3, #16
7010497e:	4313      	orrs	r3, r2
70104980:	4a44      	ldr	r2, [pc, #272]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
70104982:	430b      	orrs	r3, r1
70104984:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
70104988:	f7fe fe7c 	bl	70103684 <LL_RCC_IC15_Enable>
7010498c:	e008      	b.n	701049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
7010498e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104992:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
70104996:	4b47      	ldr	r3, [pc, #284]	@ (70104ab4 <HAL_RCCEx_PeriphCLKConfig+0x10ec>)
70104998:	429a      	cmp	r2, r3
7010499a:	d101      	bne.n	701049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    {
      LL_RCC_CLKP_Enable();
7010499c:	f7fe fff2 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
701049a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701049a4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
701049a8:	4618      	mov	r0, r3
701049aa:	f7fd fed2 	bl	70102752 <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
701049ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
701049b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
701049ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
701049be:	2300      	movs	r3, #0
701049c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
701049c4:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
701049c8:	4603      	mov	r3, r0
701049ca:	460a      	mov	r2, r1
701049cc:	4313      	orrs	r3, r2
701049ce:	d02d      	beq.n	70104a2c <HAL_RCCEx_PeriphCLKConfig+0x1064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
701049d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701049d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
701049d8:	4b37      	ldr	r3, [pc, #220]	@ (70104ab8 <HAL_RCCEx_PeriphCLKConfig+0x10f0>)
701049da:	429a      	cmp	r2, r3
701049dc:	d116      	bne.n	70104a0c <HAL_RCCEx_PeriphCLKConfig+0x1044>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
701049de:	4b2d      	ldr	r3, [pc, #180]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
701049e0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
701049e4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701049e8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701049ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701049f0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
701049f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701049f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
701049f8:	3b01      	subs	r3, #1
701049fa:	041b      	lsls	r3, r3, #16
701049fc:	4313      	orrs	r3, r2
701049fe:	4a25      	ldr	r2, [pc, #148]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
70104a00:	430b      	orrs	r3, r1
70104a02:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
70104a06:	f7fe fe3d 	bl	70103684 <LL_RCC_IC15_Enable>
70104a0a:	e008      	b.n	70104a1e <HAL_RCCEx_PeriphCLKConfig+0x1056>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
70104a0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104a10:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
70104a14:	4b29      	ldr	r3, [pc, #164]	@ (70104abc <HAL_RCCEx_PeriphCLKConfig+0x10f4>)
70104a16:	429a      	cmp	r2, r3
70104a18:	d101      	bne.n	70104a1e <HAL_RCCEx_PeriphCLKConfig+0x1056>
    {
      LL_RCC_CLKP_Enable();
70104a1a:	f7fe ffb3 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
70104a1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104a22:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
70104a26:	4618      	mov	r0, r3
70104a28:	f7fd fe9e 	bl	70102768 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
70104a2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104a30:	e9d3 2300 	ldrd	r2, r3, [r3]
70104a34:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
70104a38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
70104a3c:	2300      	movs	r3, #0
70104a3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
70104a42:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
70104a46:	4603      	mov	r3, r0
70104a48:	460a      	mov	r2, r1
70104a4a:	4313      	orrs	r3, r2
70104a4c:	d04a      	beq.n	70104ae4 <HAL_RCCEx_PeriphCLKConfig+0x111c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
70104a4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104a52:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
70104a56:	4b1a      	ldr	r3, [pc, #104]	@ (70104ac0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>)
70104a58:	429a      	cmp	r2, r3
70104a5a:	d133      	bne.n	70104ac4 <HAL_RCCEx_PeriphCLKConfig+0x10fc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
70104a5c:	4b0d      	ldr	r3, [pc, #52]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
70104a5e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
70104a62:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104a66:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104a6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104a6e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
70104a70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104a74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70104a76:	3b01      	subs	r3, #1
70104a78:	041b      	lsls	r3, r3, #16
70104a7a:	4313      	orrs	r3, r2
70104a7c:	4a05      	ldr	r2, [pc, #20]	@ (70104a94 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
70104a7e:	430b      	orrs	r3, r1
70104a80:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
70104a84:	f7fe fdfe 	bl	70103684 <LL_RCC_IC15_Enable>
70104a88:	e025      	b.n	70104ad6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
70104a8a:	bf00      	nop
70104a8c:	0701080c 	.word	0x0701080c
70104a90:	07020c0c 	.word	0x07020c0c
70104a94:	56028000 	.word	0x56028000
70104a98:	07030c0c 	.word	0x07030c0c
70104a9c:	07010c0c 	.word	0x07010c0c
70104aa0:	0702100c 	.word	0x0702100c
70104aa4:	0703100c 	.word	0x0703100c
70104aa8:	0701100c 	.word	0x0701100c
70104aac:	0702140c 	.word	0x0702140c
70104ab0:	0703140c 	.word	0x0703140c
70104ab4:	0701140c 	.word	0x0701140c
70104ab8:	0702082c 	.word	0x0702082c
70104abc:	0701082c 	.word	0x0701082c
70104ac0:	07020c2c 	.word	0x07020c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
70104ac4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ac8:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
70104acc:	4bca      	ldr	r3, [pc, #808]	@ (70104df8 <HAL_RCCEx_PeriphCLKConfig+0x1430>)
70104ace:	429a      	cmp	r2, r3
70104ad0:	d101      	bne.n	70104ad6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      LL_RCC_CLKP_Enable();
70104ad2:	f7fe ff57 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
70104ad6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ada:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
70104ade:	4618      	mov	r0, r3
70104ae0:	f7fd fe42 	bl	70102768 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
70104ae4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
70104aec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
70104af0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
70104af4:	2300      	movs	r3, #0
70104af6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
70104afa:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
70104afe:	4603      	mov	r3, r0
70104b00:	460a      	mov	r2, r1
70104b02:	4313      	orrs	r3, r2
70104b04:	d02d      	beq.n	70104b62 <HAL_RCCEx_PeriphCLKConfig+0x119a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
70104b06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104b0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
70104b0e:	4bbb      	ldr	r3, [pc, #748]	@ (70104dfc <HAL_RCCEx_PeriphCLKConfig+0x1434>)
70104b10:	429a      	cmp	r2, r3
70104b12:	d116      	bne.n	70104b42 <HAL_RCCEx_PeriphCLKConfig+0x117a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
70104b14:	4bba      	ldr	r3, [pc, #744]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104b16:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
70104b1a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104b1e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104b22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104b26:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
70104b28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104b2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70104b2e:	3b01      	subs	r3, #1
70104b30:	041b      	lsls	r3, r3, #16
70104b32:	4313      	orrs	r3, r2
70104b34:	4ab2      	ldr	r2, [pc, #712]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104b36:	430b      	orrs	r3, r1
70104b38:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
70104b3c:	f7fe fda2 	bl	70103684 <LL_RCC_IC15_Enable>
70104b40:	e008      	b.n	70104b54 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
70104b42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104b46:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
70104b4a:	4bae      	ldr	r3, [pc, #696]	@ (70104e04 <HAL_RCCEx_PeriphCLKConfig+0x143c>)
70104b4c:	429a      	cmp	r2, r3
70104b4e:	d101      	bne.n	70104b54 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    {
      LL_RCC_CLKP_Enable();
70104b50:	f7fe ff18 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
70104b54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104b58:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
70104b5c:	4618      	mov	r0, r3
70104b5e:	f7fd fe03 	bl	70102768 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
70104b62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104b66:	e9d3 2300 	ldrd	r2, r3, [r3]
70104b6a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
70104b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
70104b72:	2300      	movs	r3, #0
70104b74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
70104b78:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
70104b7c:	4603      	mov	r3, r0
70104b7e:	460a      	mov	r2, r1
70104b80:	4313      	orrs	r3, r2
70104b82:	d02d      	beq.n	70104be0 <HAL_RCCEx_PeriphCLKConfig+0x1218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
70104b84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104b88:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
70104b8c:	4b9e      	ldr	r3, [pc, #632]	@ (70104e08 <HAL_RCCEx_PeriphCLKConfig+0x1440>)
70104b8e:	429a      	cmp	r2, r3
70104b90:	d116      	bne.n	70104bc0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
70104b92:	4b9b      	ldr	r3, [pc, #620]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104b94:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
70104b98:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104b9c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104ba0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ba4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
70104ba6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104baa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70104bac:	3b01      	subs	r3, #1
70104bae:	041b      	lsls	r3, r3, #16
70104bb0:	4313      	orrs	r3, r2
70104bb2:	4a93      	ldr	r2, [pc, #588]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104bb4:	430b      	orrs	r3, r1
70104bb6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
70104bba:	f7fe fd63 	bl	70103684 <LL_RCC_IC15_Enable>
70104bbe:	e008      	b.n	70104bd2 <HAL_RCCEx_PeriphCLKConfig+0x120a>
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
70104bc0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104bc4:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
70104bc8:	4b90      	ldr	r3, [pc, #576]	@ (70104e0c <HAL_RCCEx_PeriphCLKConfig+0x1444>)
70104bca:	429a      	cmp	r2, r3
70104bcc:	d101      	bne.n	70104bd2 <HAL_RCCEx_PeriphCLKConfig+0x120a>
    {
      LL_RCC_CLKP_Enable();
70104bce:	f7fe fed9 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
70104bd2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104bd6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
70104bda:	4618      	mov	r0, r3
70104bdc:	f7fd fdc4 	bl	70102768 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
70104be0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104be4:	e9d3 2300 	ldrd	r2, r3, [r3]
70104be8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
70104bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
70104bf0:	2300      	movs	r3, #0
70104bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
70104bf6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
70104bfa:	4603      	mov	r3, r0
70104bfc:	460a      	mov	r2, r1
70104bfe:	4313      	orrs	r3, r2
70104c00:	d02d      	beq.n	70104c5e <HAL_RCCEx_PeriphCLKConfig+0x1296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
70104c02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104c06:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
70104c0a:	4b81      	ldr	r3, [pc, #516]	@ (70104e10 <HAL_RCCEx_PeriphCLKConfig+0x1448>)
70104c0c:	429a      	cmp	r2, r3
70104c0e:	d116      	bne.n	70104c3e <HAL_RCCEx_PeriphCLKConfig+0x1276>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
70104c10:	4b7b      	ldr	r3, [pc, #492]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104c12:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
70104c16:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104c1a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104c1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104c22:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
70104c24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70104c2a:	3b01      	subs	r3, #1
70104c2c:	041b      	lsls	r3, r3, #16
70104c2e:	4313      	orrs	r3, r2
70104c30:	4a73      	ldr	r2, [pc, #460]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104c32:	430b      	orrs	r3, r1
70104c34:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
70104c38:	f7fe fd24 	bl	70103684 <LL_RCC_IC15_Enable>
70104c3c:	e008      	b.n	70104c50 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
70104c3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104c42:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
70104c46:	4b73      	ldr	r3, [pc, #460]	@ (70104e14 <HAL_RCCEx_PeriphCLKConfig+0x144c>)
70104c48:	429a      	cmp	r2, r3
70104c4a:	d101      	bne.n	70104c50 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    {
      LL_RCC_CLKP_Enable();
70104c4c:	f7fe fe9a 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
70104c50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104c54:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
70104c58:	4618      	mov	r0, r3
70104c5a:	f7fd fd85 	bl	70102768 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
70104c5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104c62:	e9d3 2300 	ldrd	r2, r3, [r3]
70104c66:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
70104c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
70104c6e:	2300      	movs	r3, #0
70104c70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
70104c74:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
70104c78:	4603      	mov	r3, r0
70104c7a:	460a      	mov	r2, r1
70104c7c:	4313      	orrs	r3, r2
70104c7e:	d04b      	beq.n	70104d18 <HAL_RCCEx_PeriphCLKConfig+0x1350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
70104c80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104c84:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
70104c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70104c8c:	d116      	bne.n	70104cbc <HAL_RCCEx_PeriphCLKConfig+0x12f4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
70104c8e:	4b5c      	ldr	r3, [pc, #368]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104c90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70104c94:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104c98:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104c9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ca0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
70104ca2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70104ca8:	3b01      	subs	r3, #1
70104caa:	041b      	lsls	r3, r3, #16
70104cac:	4313      	orrs	r3, r2
70104cae:	4a54      	ldr	r2, [pc, #336]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104cb0:	430b      	orrs	r3, r1
70104cb2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
70104cb6:	f7fe fba5 	bl	70103404 <LL_RCC_IC9_Enable>
70104cba:	e026      	b.n	70104d0a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
70104cbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104cc0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
70104cc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70104cc8:	d116      	bne.n	70104cf8 <HAL_RCCEx_PeriphCLKConfig+0x1330>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
70104cca:	4b4d      	ldr	r3, [pc, #308]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104ccc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
70104cd0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104cd4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104cd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104cdc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
70104cde:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ce2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70104ce4:	3b01      	subs	r3, #1
70104ce6:	041b      	lsls	r3, r3, #16
70104ce8:	4313      	orrs	r3, r2
70104cea:	4a45      	ldr	r2, [pc, #276]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104cec:	430b      	orrs	r3, r1
70104cee:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
70104cf2:	f7fe fc87 	bl	70103604 <LL_RCC_IC14_Enable>
70104cf6:	e008      	b.n	70104d0a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
70104cf8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104cfc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
70104d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70104d04:	d101      	bne.n	70104d0a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    {
      LL_RCC_CLKP_Enable();
70104d06:	f7fe fe3d 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
70104d0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104d0e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
70104d12:	4618      	mov	r0, r3
70104d14:	f7fd fd34 	bl	70102780 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
70104d18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
70104d20:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
70104d24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
70104d28:	2300      	movs	r3, #0
70104d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
70104d2e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
70104d32:	4603      	mov	r3, r0
70104d34:	460a      	mov	r2, r1
70104d36:	4313      	orrs	r3, r2
70104d38:	d02f      	beq.n	70104d9a <HAL_RCCEx_PeriphCLKConfig+0x13d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
70104d3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104d3e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
70104d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
70104d46:	d118      	bne.n	70104d7a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
70104d48:	4b2d      	ldr	r3, [pc, #180]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104d4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
70104d4e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104d52:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104d56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104d5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
70104d5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70104d66:	3b01      	subs	r3, #1
70104d68:	041b      	lsls	r3, r3, #16
70104d6a:	4313      	orrs	r3, r2
70104d6c:	4a24      	ldr	r2, [pc, #144]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104d6e:	430b      	orrs	r3, r1
70104d70:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
70104d74:	f7fe fcc6 	bl	70103704 <LL_RCC_IC16_Enable>
70104d78:	e008      	b.n	70104d8c <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
70104d7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104d7e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
70104d82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
70104d86:	d101      	bne.n	70104d8c <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    {
      LL_RCC_CLKP_Enable();
70104d88:	f7fe fdfc 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
70104d8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104d90:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
70104d94:	4618      	mov	r0, r3
70104d96:	f7fd fd09 	bl	701027ac <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
70104d9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
70104da2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
70104da6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
70104daa:	2300      	movs	r3, #0
70104dac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
70104db0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
70104db4:	4603      	mov	r3, r0
70104db6:	460a      	mov	r2, r1
70104db8:	4313      	orrs	r3, r2
70104dba:	d05b      	beq.n	70104e74 <HAL_RCCEx_PeriphCLKConfig+0x14ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
70104dbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104dc0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
70104dc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70104dc8:	d126      	bne.n	70104e18 <HAL_RCCEx_PeriphCLKConfig+0x1450>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
70104dca:	4b0d      	ldr	r3, [pc, #52]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104dcc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
70104dd0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104dd4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104dd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
70104dde:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70104de4:	3b01      	subs	r3, #1
70104de6:	041b      	lsls	r3, r3, #16
70104de8:	4313      	orrs	r3, r2
70104dea:	4a05      	ldr	r2, [pc, #20]	@ (70104e00 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
70104dec:	430b      	orrs	r3, r1
70104dee:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
70104df2:	f7fe fa87 	bl	70103304 <LL_RCC_IC7_Enable>
70104df6:	e036      	b.n	70104e66 <HAL_RCCEx_PeriphCLKConfig+0x149e>
70104df8:	07010c2c 	.word	0x07010c2c
70104dfc:	0702102c 	.word	0x0702102c
70104e00:	56028000 	.word	0x56028000
70104e04:	0701102c 	.word	0x0701102c
70104e08:	0702142c 	.word	0x0702142c
70104e0c:	0701142c 	.word	0x0701142c
70104e10:	0702182c 	.word	0x0702182c
70104e14:	0701182c 	.word	0x0701182c
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
70104e18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104e1c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
70104e20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
70104e24:	d116      	bne.n	70104e54 <HAL_RCCEx_PeriphCLKConfig+0x148c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
70104e26:	4bb5      	ldr	r3, [pc, #724]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
70104e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
70104e2c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104e30:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104e34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104e38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
70104e3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70104e40:	3b01      	subs	r3, #1
70104e42:	041b      	lsls	r3, r3, #16
70104e44:	4313      	orrs	r3, r2
70104e46:	4aad      	ldr	r2, [pc, #692]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
70104e48:	430b      	orrs	r3, r1
70104e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
70104e4e:	f7fe fa99 	bl	70103384 <LL_RCC_IC8_Enable>
70104e52:	e008      	b.n	70104e66 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
70104e54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104e58:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
70104e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
70104e60:	d101      	bne.n	70104e66 <HAL_RCCEx_PeriphCLKConfig+0x149e>
    {
      LL_RCC_CLKP_Enable();
70104e62:	f7fe fd8f 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
70104e66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104e6a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
70104e6e:	4618      	mov	r0, r3
70104e70:	f7fd fcb2 	bl	701027d8 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
70104e74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104e78:	e9d3 2300 	ldrd	r2, r3, [r3]
70104e7c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
70104e80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
70104e84:	2300      	movs	r3, #0
70104e86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
70104e8a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
70104e8e:	4603      	mov	r3, r0
70104e90:	460a      	mov	r2, r1
70104e92:	4313      	orrs	r3, r2
70104e94:	d02d      	beq.n	70104ef2 <HAL_RCCEx_PeriphCLKConfig+0x152a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
70104e96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104e9a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
70104e9e:	2b20      	cmp	r3, #32
70104ea0:	d118      	bne.n	70104ed4 <HAL_RCCEx_PeriphCLKConfig+0x150c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
70104ea2:	4b96      	ldr	r3, [pc, #600]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
70104ea4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
70104ea8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104eac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104eb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104eb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
70104eb8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
70104ec0:	3b01      	subs	r3, #1
70104ec2:	041b      	lsls	r3, r3, #16
70104ec4:	4313      	orrs	r3, r2
70104ec6:	4a8d      	ldr	r2, [pc, #564]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
70104ec8:	430b      	orrs	r3, r1
70104eca:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
70104ece:	f7fe fd19 	bl	70103904 <LL_RCC_IC20_Enable>
70104ed2:	e007      	b.n	70104ee4 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
70104ed4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ed8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
70104edc:	2b10      	cmp	r3, #16
70104ede:	d101      	bne.n	70104ee4 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    {
      LL_RCC_CLKP_Enable();
70104ee0:	f7fe fd50 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
70104ee4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ee8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
70104eec:	4618      	mov	r0, r3
70104eee:	f7fd fc9f 	bl	70102830 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
70104ef2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
70104efa:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
70104efe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
70104f02:	2300      	movs	r3, #0
70104f04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
70104f08:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
70104f0c:	4603      	mov	r3, r0
70104f0e:	460a      	mov	r2, r1
70104f10:	4313      	orrs	r3, r2
70104f12:	d04b      	beq.n	70104fac <HAL_RCCEx_PeriphCLKConfig+0x15e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
70104f14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104f18:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
70104f1c:	4b78      	ldr	r3, [pc, #480]	@ (70105100 <HAL_RCCEx_PeriphCLKConfig+0x1738>)
70104f1e:	429a      	cmp	r2, r3
70104f20:	d116      	bne.n	70104f50 <HAL_RCCEx_PeriphCLKConfig+0x1588>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
70104f22:	4b76      	ldr	r3, [pc, #472]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
70104f24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
70104f28:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104f2c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104f30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
70104f36:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70104f3c:	3b01      	subs	r3, #1
70104f3e:	041b      	lsls	r3, r3, #16
70104f40:	4313      	orrs	r3, r2
70104f42:	4a6e      	ldr	r2, [pc, #440]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
70104f44:	430b      	orrs	r3, r1
70104f46:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
70104f4a:	f7fe f9db 	bl	70103304 <LL_RCC_IC7_Enable>
70104f4e:	e026      	b.n	70104f9e <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
70104f50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104f54:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
70104f58:	4b6a      	ldr	r3, [pc, #424]	@ (70105104 <HAL_RCCEx_PeriphCLKConfig+0x173c>)
70104f5a:	429a      	cmp	r2, r3
70104f5c:	d116      	bne.n	70104f8c <HAL_RCCEx_PeriphCLKConfig+0x15c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
70104f5e:	4b67      	ldr	r3, [pc, #412]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
70104f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
70104f64:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104f68:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104f6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104f70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
70104f72:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70104f78:	3b01      	subs	r3, #1
70104f7a:	041b      	lsls	r3, r3, #16
70104f7c:	4313      	orrs	r3, r2
70104f7e:	4a5f      	ldr	r2, [pc, #380]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
70104f80:	430b      	orrs	r3, r1
70104f82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
70104f86:	f7fe f9fd 	bl	70103384 <LL_RCC_IC8_Enable>
70104f8a:	e008      	b.n	70104f9e <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
70104f8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104f90:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
70104f94:	4b5c      	ldr	r3, [pc, #368]	@ (70105108 <HAL_RCCEx_PeriphCLKConfig+0x1740>)
70104f96:	429a      	cmp	r2, r3
70104f98:	d101      	bne.n	70104f9e <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    {
      LL_RCC_CLKP_Enable();
70104f9a:	f7fe fcf3 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
70104f9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104fa2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
70104fa6:	4618      	mov	r0, r3
70104fa8:	f7fd fc58 	bl	7010285c <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
70104fac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
70104fb4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
70104fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
70104fbc:	2300      	movs	r3, #0
70104fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
70104fc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
70104fc6:	4603      	mov	r3, r0
70104fc8:	460a      	mov	r2, r1
70104fca:	4313      	orrs	r3, r2
70104fcc:	d04b      	beq.n	70105066 <HAL_RCCEx_PeriphCLKConfig+0x169e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
70104fce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104fd2:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
70104fd6:	4b4d      	ldr	r3, [pc, #308]	@ (7010510c <HAL_RCCEx_PeriphCLKConfig+0x1744>)
70104fd8:	429a      	cmp	r2, r3
70104fda:	d116      	bne.n	7010500a <HAL_RCCEx_PeriphCLKConfig+0x1642>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
70104fdc:	4b47      	ldr	r3, [pc, #284]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
70104fde:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
70104fe2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70104fe6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70104fea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104fee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
70104ff0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70104ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70104ff6:	3b01      	subs	r3, #1
70104ff8:	041b      	lsls	r3, r3, #16
70104ffa:	4313      	orrs	r3, r2
70104ffc:	4a3f      	ldr	r2, [pc, #252]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
70104ffe:	430b      	orrs	r3, r1
70105000:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
70105004:	f7fe f97e 	bl	70103304 <LL_RCC_IC7_Enable>
70105008:	e026      	b.n	70105058 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
7010500a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010500e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
70105012:	4b3f      	ldr	r3, [pc, #252]	@ (70105110 <HAL_RCCEx_PeriphCLKConfig+0x1748>)
70105014:	429a      	cmp	r2, r3
70105016:	d116      	bne.n	70105046 <HAL_RCCEx_PeriphCLKConfig+0x167e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
70105018:	4b38      	ldr	r3, [pc, #224]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
7010501a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
7010501e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105022:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105026:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010502a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
7010502c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70105032:	3b01      	subs	r3, #1
70105034:	041b      	lsls	r3, r3, #16
70105036:	4313      	orrs	r3, r2
70105038:	4a30      	ldr	r2, [pc, #192]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
7010503a:	430b      	orrs	r3, r1
7010503c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
70105040:	f7fe f9a0 	bl	70103384 <LL_RCC_IC8_Enable>
70105044:	e008      	b.n	70105058 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
70105046:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010504a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
7010504e:	4b31      	ldr	r3, [pc, #196]	@ (70105114 <HAL_RCCEx_PeriphCLKConfig+0x174c>)
70105050:	429a      	cmp	r2, r3
70105052:	d101      	bne.n	70105058 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    {
      LL_RCC_CLKP_Enable();
70105054:	f7fe fc96 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
70105058:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010505c:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
70105060:	4618      	mov	r0, r3
70105062:	f7fd fbfb 	bl	7010285c <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
70105066:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010506a:	e9d3 2300 	ldrd	r2, r3, [r3]
7010506e:	2100      	movs	r1, #0
70105070:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
70105074:	f003 0301 	and.w	r3, r3, #1
70105078:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
7010507c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
70105080:	4603      	mov	r3, r0
70105082:	460a      	mov	r2, r1
70105084:	4313      	orrs	r3, r2
70105086:	d056      	beq.n	70105136 <HAL_RCCEx_PeriphCLKConfig+0x176e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
70105088:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010508c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
70105090:	2b02      	cmp	r3, #2
70105092:	d116      	bne.n	701050c2 <HAL_RCCEx_PeriphCLKConfig+0x16fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
70105094:	4b19      	ldr	r3, [pc, #100]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
70105096:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
7010509a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
7010509e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701050a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701050a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
701050a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701050ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
701050ae:	3b01      	subs	r3, #1
701050b0:	041b      	lsls	r3, r3, #16
701050b2:	4313      	orrs	r3, r2
701050b4:	4a11      	ldr	r2, [pc, #68]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
701050b6:	430b      	orrs	r3, r1
701050b8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
701050bc:	f7fe f922 	bl	70103304 <LL_RCC_IC7_Enable>
701050c0:	e032      	b.n	70105128 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
701050c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701050c6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
701050ca:	2b03      	cmp	r3, #3
701050cc:	d124      	bne.n	70105118 <HAL_RCCEx_PeriphCLKConfig+0x1750>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
701050ce:	4b0b      	ldr	r3, [pc, #44]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
701050d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
701050d4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701050d8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701050dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701050e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
701050e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701050e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
701050e8:	3b01      	subs	r3, #1
701050ea:	041b      	lsls	r3, r3, #16
701050ec:	4313      	orrs	r3, r2
701050ee:	4a03      	ldr	r2, [pc, #12]	@ (701050fc <HAL_RCCEx_PeriphCLKConfig+0x1734>)
701050f0:	430b      	orrs	r3, r1
701050f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
701050f6:	f7fe f945 	bl	70103384 <LL_RCC_IC8_Enable>
701050fa:	e015      	b.n	70105128 <HAL_RCCEx_PeriphCLKConfig+0x1760>
701050fc:	56028000 	.word	0x56028000
70105100:	07021418 	.word	0x07021418
70105104:	07031418 	.word	0x07031418
70105108:	07011418 	.word	0x07011418
7010510c:	07021818 	.word	0x07021818
70105110:	07031818 	.word	0x07031818
70105114:	07011818 	.word	0x07011818
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
70105118:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010511c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
70105120:	2b01      	cmp	r3, #1
70105122:	d101      	bne.n	70105128 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    {
      LL_RCC_CLKP_Enable();
70105124:	f7fe fc2e 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
70105128:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010512c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
70105130:	4618      	mov	r0, r3
70105132:	f7fd fba9 	bl	70102888 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
70105136:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010513a:	e9d3 2300 	ldrd	r2, r3, [r3]
7010513e:	2100      	movs	r1, #0
70105140:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
70105144:	f003 0302 	and.w	r3, r3, #2
70105148:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
7010514c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
70105150:	4603      	mov	r3, r0
70105152:	460a      	mov	r2, r1
70105154:	4313      	orrs	r3, r2
70105156:	d04b      	beq.n	701051f0 <HAL_RCCEx_PeriphCLKConfig+0x1828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
70105158:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010515c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
70105160:	4bc6      	ldr	r3, [pc, #792]	@ (7010547c <HAL_RCCEx_PeriphCLKConfig+0x1ab4>)
70105162:	429a      	cmp	r2, r3
70105164:	d116      	bne.n	70105194 <HAL_RCCEx_PeriphCLKConfig+0x17cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
70105166:	4bc6      	ldr	r3, [pc, #792]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
70105168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
7010516c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105170:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105174:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105178:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
7010517a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010517e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70105180:	3b01      	subs	r3, #1
70105182:	041b      	lsls	r3, r3, #16
70105184:	4313      	orrs	r3, r2
70105186:	4abe      	ldr	r2, [pc, #760]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
70105188:	430b      	orrs	r3, r1
7010518a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
7010518e:	f7fe f8f9 	bl	70103384 <LL_RCC_IC8_Enable>
70105192:	e026      	b.n	701051e2 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
70105194:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105198:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
7010519c:	4bb9      	ldr	r3, [pc, #740]	@ (70105484 <HAL_RCCEx_PeriphCLKConfig+0x1abc>)
7010519e:	429a      	cmp	r2, r3
701051a0:	d116      	bne.n	701051d0 <HAL_RCCEx_PeriphCLKConfig+0x1808>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
701051a2:	4bb7      	ldr	r3, [pc, #732]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
701051a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
701051a8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701051ac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701051b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701051b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
701051b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701051ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
701051bc:	3b01      	subs	r3, #1
701051be:	041b      	lsls	r3, r3, #16
701051c0:	4313      	orrs	r3, r2
701051c2:	4aaf      	ldr	r2, [pc, #700]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
701051c4:	430b      	orrs	r3, r1
701051c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
701051ca:	f7fe f91b 	bl	70103404 <LL_RCC_IC9_Enable>
701051ce:	e008      	b.n	701051e2 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
701051d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701051d4:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
701051d8:	4bab      	ldr	r3, [pc, #684]	@ (70105488 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>)
701051da:	429a      	cmp	r2, r3
701051dc:	d101      	bne.n	701051e2 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    {
      LL_RCC_CLKP_Enable();
701051de:	f7fe fbd1 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
701051e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701051e6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
701051ea:	4618      	mov	r0, r3
701051ec:	f7fd fb62 	bl	701028b4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
701051f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
701051f8:	2100      	movs	r1, #0
701051fa:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
701051fe:	f003 0304 	and.w	r3, r3, #4
70105202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
70105206:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
7010520a:	4603      	mov	r3, r0
7010520c:	460a      	mov	r2, r1
7010520e:	4313      	orrs	r3, r2
70105210:	d04b      	beq.n	701052aa <HAL_RCCEx_PeriphCLKConfig+0x18e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
70105212:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105216:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
7010521a:	4b9c      	ldr	r3, [pc, #624]	@ (7010548c <HAL_RCCEx_PeriphCLKConfig+0x1ac4>)
7010521c:	429a      	cmp	r2, r3
7010521e:	d116      	bne.n	7010524e <HAL_RCCEx_PeriphCLKConfig+0x1886>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
70105220:	4b97      	ldr	r3, [pc, #604]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
70105222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
70105226:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
7010522a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
7010522e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105232:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
70105234:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
7010523a:	3b01      	subs	r3, #1
7010523c:	041b      	lsls	r3, r3, #16
7010523e:	4313      	orrs	r3, r2
70105240:	4a8f      	ldr	r2, [pc, #572]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
70105242:	430b      	orrs	r3, r1
70105244:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
70105248:	f7fe f89c 	bl	70103384 <LL_RCC_IC8_Enable>
7010524c:	e026      	b.n	7010529c <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
7010524e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105252:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
70105256:	4b8e      	ldr	r3, [pc, #568]	@ (70105490 <HAL_RCCEx_PeriphCLKConfig+0x1ac8>)
70105258:	429a      	cmp	r2, r3
7010525a:	d116      	bne.n	7010528a <HAL_RCCEx_PeriphCLKConfig+0x18c2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
7010525c:	4b88      	ldr	r3, [pc, #544]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
7010525e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70105262:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105266:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
7010526a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010526e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
70105270:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70105276:	3b01      	subs	r3, #1
70105278:	041b      	lsls	r3, r3, #16
7010527a:	4313      	orrs	r3, r2
7010527c:	4a80      	ldr	r2, [pc, #512]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
7010527e:	430b      	orrs	r3, r1
70105280:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
70105284:	f7fe f8be 	bl	70103404 <LL_RCC_IC9_Enable>
70105288:	e008      	b.n	7010529c <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
7010528a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010528e:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
70105292:	4b80      	ldr	r3, [pc, #512]	@ (70105494 <HAL_RCCEx_PeriphCLKConfig+0x1acc>)
70105294:	429a      	cmp	r2, r3
70105296:	d101      	bne.n	7010529c <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    {
      LL_RCC_CLKP_Enable();
70105298:	f7fe fb74 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
7010529c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701052a0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
701052a4:	4618      	mov	r0, r3
701052a6:	f7fd fb05 	bl	701028b4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
701052aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
701052b2:	2100      	movs	r1, #0
701052b4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
701052b8:	f003 0308 	and.w	r3, r3, #8
701052bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
701052c0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
701052c4:	4603      	mov	r3, r0
701052c6:	460a      	mov	r2, r1
701052c8:	4313      	orrs	r3, r2
701052ca:	d04b      	beq.n	70105364 <HAL_RCCEx_PeriphCLKConfig+0x199c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
701052cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701052d0:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
701052d4:	4b70      	ldr	r3, [pc, #448]	@ (70105498 <HAL_RCCEx_PeriphCLKConfig+0x1ad0>)
701052d6:	429a      	cmp	r2, r3
701052d8:	d116      	bne.n	70105308 <HAL_RCCEx_PeriphCLKConfig+0x1940>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
701052da:	4b69      	ldr	r3, [pc, #420]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
701052dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
701052e0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701052e4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701052e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701052ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
701052ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701052f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
701052f4:	3b01      	subs	r3, #1
701052f6:	041b      	lsls	r3, r3, #16
701052f8:	4313      	orrs	r3, r2
701052fa:	4a61      	ldr	r2, [pc, #388]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
701052fc:	430b      	orrs	r3, r1
701052fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
70105302:	f7fe f83f 	bl	70103384 <LL_RCC_IC8_Enable>
70105306:	e026      	b.n	70105356 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
70105308:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010530c:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
70105310:	4b62      	ldr	r3, [pc, #392]	@ (7010549c <HAL_RCCEx_PeriphCLKConfig+0x1ad4>)
70105312:	429a      	cmp	r2, r3
70105314:	d116      	bne.n	70105344 <HAL_RCCEx_PeriphCLKConfig+0x197c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
70105316:	4b5a      	ldr	r3, [pc, #360]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
70105318:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
7010531c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105320:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105324:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105328:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
7010532a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010532e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70105330:	3b01      	subs	r3, #1
70105332:	041b      	lsls	r3, r3, #16
70105334:	4313      	orrs	r3, r2
70105336:	4a52      	ldr	r2, [pc, #328]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
70105338:	430b      	orrs	r3, r1
7010533a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
7010533e:	f7fe f861 	bl	70103404 <LL_RCC_IC9_Enable>
70105342:	e008      	b.n	70105356 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
70105344:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105348:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
7010534c:	4b54      	ldr	r3, [pc, #336]	@ (701054a0 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>)
7010534e:	429a      	cmp	r2, r3
70105350:	d101      	bne.n	70105356 <HAL_RCCEx_PeriphCLKConfig+0x198e>
    {
      LL_RCC_CLKP_Enable();
70105352:	f7fe fb17 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
70105356:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010535a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
7010535e:	4618      	mov	r0, r3
70105360:	f7fd faa8 	bl	701028b4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
70105364:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105368:	e9d3 2300 	ldrd	r2, r3, [r3]
7010536c:	2100      	movs	r1, #0
7010536e:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
70105372:	f003 0310 	and.w	r3, r3, #16
70105376:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
7010537a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
7010537e:	4603      	mov	r3, r0
70105380:	460a      	mov	r2, r1
70105382:	4313      	orrs	r3, r2
70105384:	d04b      	beq.n	7010541e <HAL_RCCEx_PeriphCLKConfig+0x1a56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
70105386:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010538a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
7010538e:	4b45      	ldr	r3, [pc, #276]	@ (701054a4 <HAL_RCCEx_PeriphCLKConfig+0x1adc>)
70105390:	429a      	cmp	r2, r3
70105392:	d116      	bne.n	701053c2 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
70105394:	4b3a      	ldr	r3, [pc, #232]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
70105396:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
7010539a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
7010539e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701053a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701053a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
701053a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701053ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
701053ae:	3b01      	subs	r3, #1
701053b0:	041b      	lsls	r3, r3, #16
701053b2:	4313      	orrs	r3, r2
701053b4:	4a32      	ldr	r2, [pc, #200]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
701053b6:	430b      	orrs	r3, r1
701053b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
701053bc:	f7fe f822 	bl	70103404 <LL_RCC_IC9_Enable>
701053c0:	e026      	b.n	70105410 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
701053c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701053c6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
701053ca:	4b37      	ldr	r3, [pc, #220]	@ (701054a8 <HAL_RCCEx_PeriphCLKConfig+0x1ae0>)
701053cc:	429a      	cmp	r2, r3
701053ce:	d116      	bne.n	701053fe <HAL_RCCEx_PeriphCLKConfig+0x1a36>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
701053d0:	4b2b      	ldr	r3, [pc, #172]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
701053d2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
701053d6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701053da:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701053de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701053e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
701053e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701053e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
701053ea:	3b01      	subs	r3, #1
701053ec:	041b      	lsls	r3, r3, #16
701053ee:	4313      	orrs	r3, r2
701053f0:	4a23      	ldr	r2, [pc, #140]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
701053f2:	430b      	orrs	r3, r1
701053f4:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
701053f8:	f7fe f904 	bl	70103604 <LL_RCC_IC14_Enable>
701053fc:	e008      	b.n	70105410 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
701053fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105402:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
70105406:	4b29      	ldr	r3, [pc, #164]	@ (701054ac <HAL_RCCEx_PeriphCLKConfig+0x1ae4>)
70105408:	429a      	cmp	r2, r3
7010540a:	d101      	bne.n	70105410 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    {
      LL_RCC_CLKP_Enable();
7010540c:	f7fe faba 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
70105410:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105414:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70105418:	4618      	mov	r0, r3
7010541a:	f7fd fa4b 	bl	701028b4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
7010541e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105422:	e9d3 2300 	ldrd	r2, r3, [r3]
70105426:	2100      	movs	r1, #0
70105428:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
7010542c:	f003 0320 	and.w	r3, r3, #32
70105430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
70105434:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
70105438:	4603      	mov	r3, r0
7010543a:	460a      	mov	r2, r1
7010543c:	4313      	orrs	r3, r2
7010543e:	d067      	beq.n	70105510 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
70105440:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105444:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
70105448:	4b19      	ldr	r3, [pc, #100]	@ (701054b0 <HAL_RCCEx_PeriphCLKConfig+0x1ae8>)
7010544a:	429a      	cmp	r2, r3
7010544c:	d132      	bne.n	701054b4 <HAL_RCCEx_PeriphCLKConfig+0x1aec>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
7010544e:	4b0c      	ldr	r3, [pc, #48]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
70105450:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70105454:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105458:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
7010545c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105460:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
70105462:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70105468:	3b01      	subs	r3, #1
7010546a:	041b      	lsls	r3, r3, #16
7010546c:	4313      	orrs	r3, r2
7010546e:	4a04      	ldr	r2, [pc, #16]	@ (70105480 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
70105470:	430b      	orrs	r3, r1
70105472:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
70105476:	f7fd ffc5 	bl	70103404 <LL_RCC_IC9_Enable>
7010547a:	e042      	b.n	70105502 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
7010547c:	07020420 	.word	0x07020420
70105480:	56028000 	.word	0x56028000
70105484:	07030420 	.word	0x07030420
70105488:	07010420 	.word	0x07010420
7010548c:	07020820 	.word	0x07020820
70105490:	07030820 	.word	0x07030820
70105494:	07010820 	.word	0x07010820
70105498:	07020c20 	.word	0x07020c20
7010549c:	07030c20 	.word	0x07030c20
701054a0:	07010c20 	.word	0x07010c20
701054a4:	07021020 	.word	0x07021020
701054a8:	07031020 	.word	0x07031020
701054ac:	07011020 	.word	0x07011020
701054b0:	07021420 	.word	0x07021420
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
701054b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701054b8:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
701054bc:	4bc2      	ldr	r3, [pc, #776]	@ (701057c8 <HAL_RCCEx_PeriphCLKConfig+0x1e00>)
701054be:	429a      	cmp	r2, r3
701054c0:	d116      	bne.n	701054f0 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
701054c2:	4bc2      	ldr	r3, [pc, #776]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
701054c4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
701054c8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701054cc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701054d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701054d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
701054d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701054da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
701054dc:	3b01      	subs	r3, #1
701054de:	041b      	lsls	r3, r3, #16
701054e0:	4313      	orrs	r3, r2
701054e2:	4aba      	ldr	r2, [pc, #744]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
701054e4:	430b      	orrs	r3, r1
701054e6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
701054ea:	f7fe f88b 	bl	70103604 <LL_RCC_IC14_Enable>
701054ee:	e008      	b.n	70105502 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
701054f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701054f4:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
701054f8:	4bb5      	ldr	r3, [pc, #724]	@ (701057d0 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
701054fa:	429a      	cmp	r2, r3
701054fc:	d101      	bne.n	70105502 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    {
      LL_RCC_CLKP_Enable();
701054fe:	f7fe fa41 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
70105502:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105506:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
7010550a:	4618      	mov	r0, r3
7010550c:	f7fd f9d2 	bl	701028b4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
70105510:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105514:	e9d3 2300 	ldrd	r2, r3, [r3]
70105518:	2100      	movs	r1, #0
7010551a:	67b9      	str	r1, [r7, #120]	@ 0x78
7010551c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
70105520:	67fb      	str	r3, [r7, #124]	@ 0x7c
70105522:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
70105526:	4603      	mov	r3, r0
70105528:	460a      	mov	r2, r1
7010552a:	4313      	orrs	r3, r2
7010552c:	d04b      	beq.n	701055c6 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
7010552e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105532:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
70105536:	4ba7      	ldr	r3, [pc, #668]	@ (701057d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
70105538:	429a      	cmp	r2, r3
7010553a:	d116      	bne.n	7010556a <HAL_RCCEx_PeriphCLKConfig+0x1ba2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
7010553c:	4ba3      	ldr	r3, [pc, #652]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
7010553e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
70105542:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105546:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
7010554a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010554e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
70105550:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70105556:	3b01      	subs	r3, #1
70105558:	041b      	lsls	r3, r3, #16
7010555a:	4313      	orrs	r3, r2
7010555c:	4a9b      	ldr	r2, [pc, #620]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
7010555e:	430b      	orrs	r3, r1
70105560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
70105564:	f7fd ff0e 	bl	70103384 <LL_RCC_IC8_Enable>
70105568:	e026      	b.n	701055b8 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
7010556a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010556e:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
70105572:	4b99      	ldr	r3, [pc, #612]	@ (701057d8 <HAL_RCCEx_PeriphCLKConfig+0x1e10>)
70105574:	429a      	cmp	r2, r3
70105576:	d116      	bne.n	701055a6 <HAL_RCCEx_PeriphCLKConfig+0x1bde>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
70105578:	4b94      	ldr	r3, [pc, #592]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
7010557a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
7010557e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105582:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105586:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010558a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
7010558c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70105592:	3b01      	subs	r3, #1
70105594:	041b      	lsls	r3, r3, #16
70105596:	4313      	orrs	r3, r2
70105598:	4a8c      	ldr	r2, [pc, #560]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
7010559a:	430b      	orrs	r3, r1
7010559c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
701055a0:	f7fd ff30 	bl	70103404 <LL_RCC_IC9_Enable>
701055a4:	e008      	b.n	701055b8 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
701055a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701055aa:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
701055ae:	4b8b      	ldr	r3, [pc, #556]	@ (701057dc <HAL_RCCEx_PeriphCLKConfig+0x1e14>)
701055b0:	429a      	cmp	r2, r3
701055b2:	d101      	bne.n	701055b8 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    {
      LL_RCC_CLKP_Enable();
701055b4:	f7fe f9e6 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
701055b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701055bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
701055c0:	4618      	mov	r0, r3
701055c2:	f7fd f977 	bl	701028b4 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
701055c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
701055ce:	2100      	movs	r1, #0
701055d0:	6739      	str	r1, [r7, #112]	@ 0x70
701055d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
701055d6:	677b      	str	r3, [r7, #116]	@ 0x74
701055d8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
701055dc:	4603      	mov	r3, r0
701055de:	460a      	mov	r2, r1
701055e0:	4313      	orrs	r3, r2
701055e2:	d04b      	beq.n	7010567c <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
701055e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701055e8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
701055ec:	4b7c      	ldr	r3, [pc, #496]	@ (701057e0 <HAL_RCCEx_PeriphCLKConfig+0x1e18>)
701055ee:	429a      	cmp	r2, r3
701055f0:	d116      	bne.n	70105620 <HAL_RCCEx_PeriphCLKConfig+0x1c58>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
701055f2:	4b76      	ldr	r3, [pc, #472]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
701055f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
701055f8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701055fc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105600:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105604:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
70105606:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010560a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
7010560c:	3b01      	subs	r3, #1
7010560e:	041b      	lsls	r3, r3, #16
70105610:	4313      	orrs	r3, r2
70105612:	4a6e      	ldr	r2, [pc, #440]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
70105614:	430b      	orrs	r3, r1
70105616:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
7010561a:	f7fd fef3 	bl	70103404 <LL_RCC_IC9_Enable>
7010561e:	e026      	b.n	7010566e <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
70105620:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105624:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
70105628:	4b6e      	ldr	r3, [pc, #440]	@ (701057e4 <HAL_RCCEx_PeriphCLKConfig+0x1e1c>)
7010562a:	429a      	cmp	r2, r3
7010562c:	d116      	bne.n	7010565c <HAL_RCCEx_PeriphCLKConfig+0x1c94>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
7010562e:	4b67      	ldr	r3, [pc, #412]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
70105630:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
70105634:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105638:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
7010563c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105640:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
70105642:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70105648:	3b01      	subs	r3, #1
7010564a:	041b      	lsls	r3, r3, #16
7010564c:	4313      	orrs	r3, r2
7010564e:	4a5f      	ldr	r2, [pc, #380]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
70105650:	430b      	orrs	r3, r1
70105652:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
70105656:	f7fd ffd5 	bl	70103604 <LL_RCC_IC14_Enable>
7010565a:	e008      	b.n	7010566e <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
7010565c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105660:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
70105664:	4b60      	ldr	r3, [pc, #384]	@ (701057e8 <HAL_RCCEx_PeriphCLKConfig+0x1e20>)
70105666:	429a      	cmp	r2, r3
70105668:	d101      	bne.n	7010566e <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    {
      LL_RCC_CLKP_Enable();
7010566a:	f7fe f98b 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
7010566e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105672:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
70105676:	4618      	mov	r0, r3
70105678:	f7fd f927 	bl	701028ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
7010567c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105680:	e9d3 2300 	ldrd	r2, r3, [r3]
70105684:	2100      	movs	r1, #0
70105686:	66b9      	str	r1, [r7, #104]	@ 0x68
70105688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
7010568c:	66fb      	str	r3, [r7, #108]	@ 0x6c
7010568e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
70105692:	4603      	mov	r3, r0
70105694:	460a      	mov	r2, r1
70105696:	4313      	orrs	r3, r2
70105698:	d04b      	beq.n	70105732 <HAL_RCCEx_PeriphCLKConfig+0x1d6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
7010569a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010569e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
701056a2:	4b52      	ldr	r3, [pc, #328]	@ (701057ec <HAL_RCCEx_PeriphCLKConfig+0x1e24>)
701056a4:	429a      	cmp	r2, r3
701056a6:	d116      	bne.n	701056d6 <HAL_RCCEx_PeriphCLKConfig+0x1d0e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
701056a8:	4b48      	ldr	r3, [pc, #288]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
701056aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
701056ae:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701056b2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701056b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701056ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
701056bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701056c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
701056c2:	3b01      	subs	r3, #1
701056c4:	041b      	lsls	r3, r3, #16
701056c6:	4313      	orrs	r3, r2
701056c8:	4a40      	ldr	r2, [pc, #256]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
701056ca:	430b      	orrs	r3, r1
701056cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
701056d0:	f7fd fe98 	bl	70103404 <LL_RCC_IC9_Enable>
701056d4:	e026      	b.n	70105724 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
701056d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701056da:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
701056de:	4b44      	ldr	r3, [pc, #272]	@ (701057f0 <HAL_RCCEx_PeriphCLKConfig+0x1e28>)
701056e0:	429a      	cmp	r2, r3
701056e2:	d116      	bne.n	70105712 <HAL_RCCEx_PeriphCLKConfig+0x1d4a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
701056e4:	4b39      	ldr	r3, [pc, #228]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
701056e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
701056ea:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701056ee:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701056f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701056f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
701056f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701056fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
701056fe:	3b01      	subs	r3, #1
70105700:	041b      	lsls	r3, r3, #16
70105702:	4313      	orrs	r3, r2
70105704:	4a31      	ldr	r2, [pc, #196]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
70105706:	430b      	orrs	r3, r1
70105708:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
7010570c:	f7fd ff7a 	bl	70103604 <LL_RCC_IC14_Enable>
70105710:	e008      	b.n	70105724 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
70105712:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105716:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
7010571a:	4b36      	ldr	r3, [pc, #216]	@ (701057f4 <HAL_RCCEx_PeriphCLKConfig+0x1e2c>)
7010571c:	429a      	cmp	r2, r3
7010571e:	d101      	bne.n	70105724 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    {
      LL_RCC_CLKP_Enable();
70105720:	f7fe f930 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
70105724:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105728:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
7010572c:	4618      	mov	r0, r3
7010572e:	f7fd f8cc 	bl	701028ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
70105732:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105736:	e9d3 2300 	ldrd	r2, r3, [r3]
7010573a:	2100      	movs	r1, #0
7010573c:	6639      	str	r1, [r7, #96]	@ 0x60
7010573e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
70105742:	667b      	str	r3, [r7, #100]	@ 0x64
70105744:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
70105748:	4603      	mov	r3, r0
7010574a:	460a      	mov	r2, r1
7010574c:	4313      	orrs	r3, r2
7010574e:	d067      	beq.n	70105820 <HAL_RCCEx_PeriphCLKConfig+0x1e58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
70105750:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105754:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
70105758:	4b27      	ldr	r3, [pc, #156]	@ (701057f8 <HAL_RCCEx_PeriphCLKConfig+0x1e30>)
7010575a:	429a      	cmp	r2, r3
7010575c:	d116      	bne.n	7010578c <HAL_RCCEx_PeriphCLKConfig+0x1dc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
7010575e:	4b1b      	ldr	r3, [pc, #108]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
70105760:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70105764:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105768:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
7010576c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105770:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
70105772:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70105778:	3b01      	subs	r3, #1
7010577a:	041b      	lsls	r3, r3, #16
7010577c:	4313      	orrs	r3, r2
7010577e:	4a13      	ldr	r2, [pc, #76]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
70105780:	430b      	orrs	r3, r1
70105782:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
70105786:	f7fd fe3d 	bl	70103404 <LL_RCC_IC9_Enable>
7010578a:	e042      	b.n	70105812 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
7010578c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105790:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
70105794:	4b19      	ldr	r3, [pc, #100]	@ (701057fc <HAL_RCCEx_PeriphCLKConfig+0x1e34>)
70105796:	429a      	cmp	r2, r3
70105798:	d132      	bne.n	70105800 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
7010579a:	4b0c      	ldr	r3, [pc, #48]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
7010579c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
701057a0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701057a4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701057a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701057ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
701057ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701057b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
701057b4:	3b01      	subs	r3, #1
701057b6:	041b      	lsls	r3, r3, #16
701057b8:	4313      	orrs	r3, r2
701057ba:	4a04      	ldr	r2, [pc, #16]	@ (701057cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
701057bc:	430b      	orrs	r3, r1
701057be:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
701057c2:	f7fd ff1f 	bl	70103604 <LL_RCC_IC14_Enable>
701057c6:	e024      	b.n	70105812 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
701057c8:	07031420 	.word	0x07031420
701057cc:	56028000 	.word	0x56028000
701057d0:	07011420 	.word	0x07011420
701057d4:	07021820 	.word	0x07021820
701057d8:	07031820 	.word	0x07031820
701057dc:	07011820 	.word	0x07011820
701057e0:	07020030 	.word	0x07020030
701057e4:	07030030 	.word	0x07030030
701057e8:	07010030 	.word	0x07010030
701057ec:	07020430 	.word	0x07020430
701057f0:	07030430 	.word	0x07030430
701057f4:	07010430 	.word	0x07010430
701057f8:	07020830 	.word	0x07020830
701057fc:	07030830 	.word	0x07030830
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
70105800:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105804:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
70105808:	4bb3      	ldr	r3, [pc, #716]	@ (70105ad8 <HAL_RCCEx_PeriphCLKConfig+0x2110>)
7010580a:	429a      	cmp	r2, r3
7010580c:	d101      	bne.n	70105812 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    {
      LL_RCC_CLKP_Enable();
7010580e:	f7fe f8b9 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
70105812:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105816:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
7010581a:	4618      	mov	r0, r3
7010581c:	f7fd f855 	bl	701028ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
70105820:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105824:	e9d3 2300 	ldrd	r2, r3, [r3]
70105828:	2100      	movs	r1, #0
7010582a:	65b9      	str	r1, [r7, #88]	@ 0x58
7010582c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
70105830:	65fb      	str	r3, [r7, #92]	@ 0x5c
70105832:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
70105836:	4603      	mov	r3, r0
70105838:	460a      	mov	r2, r1
7010583a:	4313      	orrs	r3, r2
7010583c:	d04b      	beq.n	701058d6 <HAL_RCCEx_PeriphCLKConfig+0x1f0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
7010583e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105842:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
70105846:	4ba5      	ldr	r3, [pc, #660]	@ (70105adc <HAL_RCCEx_PeriphCLKConfig+0x2114>)
70105848:	429a      	cmp	r2, r3
7010584a:	d116      	bne.n	7010587a <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
7010584c:	4ba4      	ldr	r3, [pc, #656]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
7010584e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70105852:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105856:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
7010585a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010585e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
70105860:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70105866:	3b01      	subs	r3, #1
70105868:	041b      	lsls	r3, r3, #16
7010586a:	4313      	orrs	r3, r2
7010586c:	4a9c      	ldr	r2, [pc, #624]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
7010586e:	430b      	orrs	r3, r1
70105870:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
70105874:	f7fd fdc6 	bl	70103404 <LL_RCC_IC9_Enable>
70105878:	e026      	b.n	701058c8 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
7010587a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010587e:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
70105882:	4b98      	ldr	r3, [pc, #608]	@ (70105ae4 <HAL_RCCEx_PeriphCLKConfig+0x211c>)
70105884:	429a      	cmp	r2, r3
70105886:	d116      	bne.n	701058b6 <HAL_RCCEx_PeriphCLKConfig+0x1eee>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
70105888:	4b95      	ldr	r3, [pc, #596]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
7010588a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
7010588e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105892:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105896:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010589a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
7010589c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701058a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
701058a2:	3b01      	subs	r3, #1
701058a4:	041b      	lsls	r3, r3, #16
701058a6:	4313      	orrs	r3, r2
701058a8:	4a8d      	ldr	r2, [pc, #564]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
701058aa:	430b      	orrs	r3, r1
701058ac:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
701058b0:	f7fd fea8 	bl	70103604 <LL_RCC_IC14_Enable>
701058b4:	e008      	b.n	701058c8 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
701058b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701058ba:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
701058be:	4b8a      	ldr	r3, [pc, #552]	@ (70105ae8 <HAL_RCCEx_PeriphCLKConfig+0x2120>)
701058c0:	429a      	cmp	r2, r3
701058c2:	d101      	bne.n	701058c8 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    {
      LL_RCC_CLKP_Enable();
701058c4:	f7fe f85e 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
701058c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701058cc:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
701058d0:	4618      	mov	r0, r3
701058d2:	f7fc fffa 	bl	701028ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
701058d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701058da:	e9d3 2300 	ldrd	r2, r3, [r3]
701058de:	2100      	movs	r1, #0
701058e0:	6539      	str	r1, [r7, #80]	@ 0x50
701058e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
701058e6:	657b      	str	r3, [r7, #84]	@ 0x54
701058e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
701058ec:	4603      	mov	r3, r0
701058ee:	460a      	mov	r2, r1
701058f0:	4313      	orrs	r3, r2
701058f2:	d04b      	beq.n	7010598c <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
701058f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701058f8:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
701058fc:	4b7b      	ldr	r3, [pc, #492]	@ (70105aec <HAL_RCCEx_PeriphCLKConfig+0x2124>)
701058fe:	429a      	cmp	r2, r3
70105900:	d116      	bne.n	70105930 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
70105902:	4b77      	ldr	r3, [pc, #476]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
70105904:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70105908:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
7010590c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105910:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105914:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
70105916:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
7010591a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
7010591c:	3b01      	subs	r3, #1
7010591e:	041b      	lsls	r3, r3, #16
70105920:	4313      	orrs	r3, r2
70105922:	4a6f      	ldr	r2, [pc, #444]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
70105924:	430b      	orrs	r3, r1
70105926:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
7010592a:	f7fd fd6b 	bl	70103404 <LL_RCC_IC9_Enable>
7010592e:	e026      	b.n	7010597e <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
70105930:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105934:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
70105938:	4b6d      	ldr	r3, [pc, #436]	@ (70105af0 <HAL_RCCEx_PeriphCLKConfig+0x2128>)
7010593a:	429a      	cmp	r2, r3
7010593c:	d116      	bne.n	7010596c <HAL_RCCEx_PeriphCLKConfig+0x1fa4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
7010593e:	4b68      	ldr	r3, [pc, #416]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
70105940:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
70105944:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105948:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
7010594c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105950:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
70105952:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70105958:	3b01      	subs	r3, #1
7010595a:	041b      	lsls	r3, r3, #16
7010595c:	4313      	orrs	r3, r2
7010595e:	4a60      	ldr	r2, [pc, #384]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
70105960:	430b      	orrs	r3, r1
70105962:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
70105966:	f7fd fe4d 	bl	70103604 <LL_RCC_IC14_Enable>
7010596a:	e008      	b.n	7010597e <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
7010596c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105970:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
70105974:	4b5f      	ldr	r3, [pc, #380]	@ (70105af4 <HAL_RCCEx_PeriphCLKConfig+0x212c>)
70105976:	429a      	cmp	r2, r3
70105978:	d101      	bne.n	7010597e <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    {
      LL_RCC_CLKP_Enable();
7010597a:	f7fe f803 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
7010597e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105982:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
70105986:	4618      	mov	r0, r3
70105988:	f7fc ff9f 	bl	701028ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
7010598c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105990:	e9d3 2300 	ldrd	r2, r3, [r3]
70105994:	2100      	movs	r1, #0
70105996:	64b9      	str	r1, [r7, #72]	@ 0x48
70105998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
7010599c:	64fb      	str	r3, [r7, #76]	@ 0x4c
7010599e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
701059a2:	4603      	mov	r3, r0
701059a4:	460a      	mov	r2, r1
701059a6:	4313      	orrs	r3, r2
701059a8:	d04b      	beq.n	70105a42 <HAL_RCCEx_PeriphCLKConfig+0x207a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
701059aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701059ae:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
701059b2:	4b51      	ldr	r3, [pc, #324]	@ (70105af8 <HAL_RCCEx_PeriphCLKConfig+0x2130>)
701059b4:	429a      	cmp	r2, r3
701059b6:	d116      	bne.n	701059e6 <HAL_RCCEx_PeriphCLKConfig+0x201e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
701059b8:	4b49      	ldr	r3, [pc, #292]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
701059ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
701059be:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701059c2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
701059c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701059ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
701059cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701059d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
701059d2:	3b01      	subs	r3, #1
701059d4:	041b      	lsls	r3, r3, #16
701059d6:	4313      	orrs	r3, r2
701059d8:	4a41      	ldr	r2, [pc, #260]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
701059da:	430b      	orrs	r3, r1
701059dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
701059e0:	f7fd fd10 	bl	70103404 <LL_RCC_IC9_Enable>
701059e4:	e026      	b.n	70105a34 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
701059e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
701059ea:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
701059ee:	4b43      	ldr	r3, [pc, #268]	@ (70105afc <HAL_RCCEx_PeriphCLKConfig+0x2134>)
701059f0:	429a      	cmp	r2, r3
701059f2:	d116      	bne.n	70105a22 <HAL_RCCEx_PeriphCLKConfig+0x205a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
701059f4:	4b3a      	ldr	r3, [pc, #232]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
701059f6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
701059fa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
701059fe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105a02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105a06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
70105a08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70105a0e:	3b01      	subs	r3, #1
70105a10:	041b      	lsls	r3, r3, #16
70105a12:	4313      	orrs	r3, r2
70105a14:	4a32      	ldr	r2, [pc, #200]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
70105a16:	430b      	orrs	r3, r1
70105a18:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
70105a1c:	f7fd fdf2 	bl	70103604 <LL_RCC_IC14_Enable>
70105a20:	e008      	b.n	70105a34 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
70105a22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105a26:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
70105a2a:	4b35      	ldr	r3, [pc, #212]	@ (70105b00 <HAL_RCCEx_PeriphCLKConfig+0x2138>)
70105a2c:	429a      	cmp	r2, r3
70105a2e:	d101      	bne.n	70105a34 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    {
      LL_RCC_CLKP_Enable();
70105a30:	f7fd ffa8 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
70105a34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105a38:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
70105a3c:	4618      	mov	r0, r3
70105a3e:	f7fc ff44 	bl	701028ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
70105a42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105a46:	e9d3 2300 	ldrd	r2, r3, [r3]
70105a4a:	2100      	movs	r1, #0
70105a4c:	6439      	str	r1, [r7, #64]	@ 0x40
70105a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
70105a52:	647b      	str	r3, [r7, #68]	@ 0x44
70105a54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
70105a58:	4603      	mov	r3, r0
70105a5a:	460a      	mov	r2, r1
70105a5c:	4313      	orrs	r3, r2
70105a5e:	d065      	beq.n	70105b2c <HAL_RCCEx_PeriphCLKConfig+0x2164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
70105a60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105a64:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
70105a68:	4b26      	ldr	r3, [pc, #152]	@ (70105b04 <HAL_RCCEx_PeriphCLKConfig+0x213c>)
70105a6a:	429a      	cmp	r2, r3
70105a6c:	d116      	bne.n	70105a9c <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
70105a6e:	4b1c      	ldr	r3, [pc, #112]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
70105a70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70105a74:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105a78:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105a7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105a80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
70105a82:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70105a88:	3b01      	subs	r3, #1
70105a8a:	041b      	lsls	r3, r3, #16
70105a8c:	4313      	orrs	r3, r2
70105a8e:	4a14      	ldr	r2, [pc, #80]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
70105a90:	430b      	orrs	r3, r1
70105a92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
70105a96:	f7fd fcb5 	bl	70103404 <LL_RCC_IC9_Enable>
70105a9a:	e040      	b.n	70105b1e <HAL_RCCEx_PeriphCLKConfig+0x2156>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
70105a9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105aa0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
70105aa4:	4b18      	ldr	r3, [pc, #96]	@ (70105b08 <HAL_RCCEx_PeriphCLKConfig+0x2140>)
70105aa6:	429a      	cmp	r2, r3
70105aa8:	d130      	bne.n	70105b0c <HAL_RCCEx_PeriphCLKConfig+0x2144>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
70105aaa:	4b0d      	ldr	r3, [pc, #52]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
70105aac:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
70105ab0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105ab4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105ab8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105abc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
70105abe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70105ac4:	3b01      	subs	r3, #1
70105ac6:	041b      	lsls	r3, r3, #16
70105ac8:	4313      	orrs	r3, r2
70105aca:	4a05      	ldr	r2, [pc, #20]	@ (70105ae0 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
70105acc:	430b      	orrs	r3, r1
70105ace:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
70105ad2:	f7fd fd97 	bl	70103604 <LL_RCC_IC14_Enable>
70105ad6:	e022      	b.n	70105b1e <HAL_RCCEx_PeriphCLKConfig+0x2156>
70105ad8:	07010830 	.word	0x07010830
70105adc:	07020c30 	.word	0x07020c30
70105ae0:	56028000 	.word	0x56028000
70105ae4:	07030c30 	.word	0x07030c30
70105ae8:	07010c30 	.word	0x07010c30
70105aec:	07021030 	.word	0x07021030
70105af0:	07031030 	.word	0x07031030
70105af4:	07011030 	.word	0x07011030
70105af8:	07021430 	.word	0x07021430
70105afc:	07031430 	.word	0x07031430
70105b00:	07011430 	.word	0x07011430
70105b04:	07021830 	.word	0x07021830
70105b08:	07031830 	.word	0x07031830
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
70105b0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105b10:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
70105b14:	4bc8      	ldr	r3, [pc, #800]	@ (70105e38 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
70105b16:	429a      	cmp	r2, r3
70105b18:	d101      	bne.n	70105b1e <HAL_RCCEx_PeriphCLKConfig+0x2156>
    {
      LL_RCC_CLKP_Enable();
70105b1a:	f7fd ff33 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
70105b1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105b22:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
70105b26:	4618      	mov	r0, r3
70105b28:	f7fc fecf 	bl	701028ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
70105b2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105b30:	e9d3 2300 	ldrd	r2, r3, [r3]
70105b34:	2100      	movs	r1, #0
70105b36:	63b9      	str	r1, [r7, #56]	@ 0x38
70105b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70105b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
70105b3e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
70105b42:	4603      	mov	r3, r0
70105b44:	460a      	mov	r2, r1
70105b46:	4313      	orrs	r3, r2
70105b48:	d04b      	beq.n	70105be2 <HAL_RCCEx_PeriphCLKConfig+0x221a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
70105b4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105b4e:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
70105b52:	4bba      	ldr	r3, [pc, #744]	@ (70105e3c <HAL_RCCEx_PeriphCLKConfig+0x2474>)
70105b54:	429a      	cmp	r2, r3
70105b56:	d116      	bne.n	70105b86 <HAL_RCCEx_PeriphCLKConfig+0x21be>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
70105b58:	4bb9      	ldr	r3, [pc, #740]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105b5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70105b5e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105b62:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105b66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105b6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
70105b6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70105b72:	3b01      	subs	r3, #1
70105b74:	041b      	lsls	r3, r3, #16
70105b76:	4313      	orrs	r3, r2
70105b78:	4ab1      	ldr	r2, [pc, #708]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105b7a:	430b      	orrs	r3, r1
70105b7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
70105b80:	f7fd fc40 	bl	70103404 <LL_RCC_IC9_Enable>
70105b84:	e026      	b.n	70105bd4 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
70105b86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105b8a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
70105b8e:	4bad      	ldr	r3, [pc, #692]	@ (70105e44 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
70105b90:	429a      	cmp	r2, r3
70105b92:	d116      	bne.n	70105bc2 <HAL_RCCEx_PeriphCLKConfig+0x21fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
70105b94:	4baa      	ldr	r3, [pc, #680]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105b96:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
70105b9a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105b9e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105ba2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105ba6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
70105ba8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70105bae:	3b01      	subs	r3, #1
70105bb0:	041b      	lsls	r3, r3, #16
70105bb2:	4313      	orrs	r3, r2
70105bb4:	4aa2      	ldr	r2, [pc, #648]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105bb6:	430b      	orrs	r3, r1
70105bb8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
70105bbc:	f7fd fd22 	bl	70103604 <LL_RCC_IC14_Enable>
70105bc0:	e008      	b.n	70105bd4 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
70105bc2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105bc6:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
70105bca:	4b9f      	ldr	r3, [pc, #636]	@ (70105e48 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
70105bcc:	429a      	cmp	r2, r3
70105bce:	d101      	bne.n	70105bd4 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    {
      LL_RCC_CLKP_Enable();
70105bd0:	f7fd fed8 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
70105bd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105bd8:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
70105bdc:	4618      	mov	r0, r3
70105bde:	f7fc fe74 	bl	701028ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
70105be2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105be6:	e9d3 2300 	ldrd	r2, r3, [r3]
70105bea:	2100      	movs	r1, #0
70105bec:	6339      	str	r1, [r7, #48]	@ 0x30
70105bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70105bf2:	637b      	str	r3, [r7, #52]	@ 0x34
70105bf4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
70105bf8:	4603      	mov	r3, r0
70105bfa:	460a      	mov	r2, r1
70105bfc:	4313      	orrs	r3, r2
70105bfe:	d04b      	beq.n	70105c98 <HAL_RCCEx_PeriphCLKConfig+0x22d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
70105c00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105c04:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
70105c08:	4a90      	ldr	r2, [pc, #576]	@ (70105e4c <HAL_RCCEx_PeriphCLKConfig+0x2484>)
70105c0a:	4293      	cmp	r3, r2
70105c0c:	d116      	bne.n	70105c3c <HAL_RCCEx_PeriphCLKConfig+0x2274>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
70105c0e:	4b8c      	ldr	r3, [pc, #560]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105c10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70105c14:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105c18:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105c1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105c20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
70105c22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70105c28:	3b01      	subs	r3, #1
70105c2a:	041b      	lsls	r3, r3, #16
70105c2c:	4313      	orrs	r3, r2
70105c2e:	4a84      	ldr	r2, [pc, #528]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105c30:	430b      	orrs	r3, r1
70105c32:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
70105c36:	f7fd fbe5 	bl	70103404 <LL_RCC_IC9_Enable>
70105c3a:	e026      	b.n	70105c8a <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
70105c3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105c40:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
70105c44:	4a82      	ldr	r2, [pc, #520]	@ (70105e50 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
70105c46:	4293      	cmp	r3, r2
70105c48:	d116      	bne.n	70105c78 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
70105c4a:	4b7d      	ldr	r3, [pc, #500]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105c4c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
70105c50:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
70105c54:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
70105c58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105c5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
70105c5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70105c64:	3b01      	subs	r3, #1
70105c66:	041b      	lsls	r3, r3, #16
70105c68:	4313      	orrs	r3, r2
70105c6a:	4a75      	ldr	r2, [pc, #468]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105c6c:	430b      	orrs	r3, r1
70105c6e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
70105c72:	f7fd fcc7 	bl	70103604 <LL_RCC_IC14_Enable>
70105c76:	e008      	b.n	70105c8a <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
70105c78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105c7c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
70105c80:	4a74      	ldr	r2, [pc, #464]	@ (70105e54 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
70105c82:	4293      	cmp	r3, r2
70105c84:	d101      	bne.n	70105c8a <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    {
      LL_RCC_CLKP_Enable();
70105c86:	f7fd fe7d 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
70105c8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105c8e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
70105c92:	4618      	mov	r0, r3
70105c94:	f7fc fe19 	bl	701028ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
70105c98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
70105ca0:	2100      	movs	r1, #0
70105ca2:	62b9      	str	r1, [r7, #40]	@ 0x28
70105ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
70105ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
70105caa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
70105cae:	4603      	mov	r3, r0
70105cb0:	460a      	mov	r2, r1
70105cb2:	4313      	orrs	r3, r2
70105cb4:	d04b      	beq.n	70105d4e <HAL_RCCEx_PeriphCLKConfig+0x2386>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
70105cb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105cba:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
70105cbe:	4a66      	ldr	r2, [pc, #408]	@ (70105e58 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
70105cc0:	4293      	cmp	r3, r2
70105cc2:	d116      	bne.n	70105cf2 <HAL_RCCEx_PeriphCLKConfig+0x232a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
70105cc4:	4b5e      	ldr	r3, [pc, #376]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105cc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
70105cca:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
70105cce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
70105cd2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
70105cd6:	6c91      	ldr	r1, [r2, #72]	@ 0x48
70105cd8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
70105cdc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
70105cde:	3a01      	subs	r2, #1
70105ce0:	0412      	lsls	r2, r2, #16
70105ce2:	430a      	orrs	r2, r1
70105ce4:	4956      	ldr	r1, [pc, #344]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105ce6:	4313      	orrs	r3, r2
70105ce8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
70105cec:	f7fd fb8a 	bl	70103404 <LL_RCC_IC9_Enable>
70105cf0:	e026      	b.n	70105d40 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
70105cf2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105cf6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
70105cfa:	4a58      	ldr	r2, [pc, #352]	@ (70105e5c <HAL_RCCEx_PeriphCLKConfig+0x2494>)
70105cfc:	4293      	cmp	r3, r2
70105cfe:	d116      	bne.n	70105d2e <HAL_RCCEx_PeriphCLKConfig+0x2366>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
70105d00:	4b4f      	ldr	r3, [pc, #316]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105d02:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
70105d06:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
70105d0a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
70105d0e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
70105d12:	6f11      	ldr	r1, [r2, #112]	@ 0x70
70105d14:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
70105d18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
70105d1a:	3a01      	subs	r2, #1
70105d1c:	0412      	lsls	r2, r2, #16
70105d1e:	430a      	orrs	r2, r1
70105d20:	4947      	ldr	r1, [pc, #284]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105d22:	4313      	orrs	r3, r2
70105d24:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
70105d28:	f7fd fc6c 	bl	70103604 <LL_RCC_IC14_Enable>
70105d2c:	e008      	b.n	70105d40 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
70105d2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105d32:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
70105d36:	4a4a      	ldr	r2, [pc, #296]	@ (70105e60 <HAL_RCCEx_PeriphCLKConfig+0x2498>)
70105d38:	4293      	cmp	r3, r2
70105d3a:	d101      	bne.n	70105d40 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    {
      LL_RCC_CLKP_Enable();
70105d3c:	f7fd fe22 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
70105d40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105d44:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
70105d48:	4618      	mov	r0, r3
70105d4a:	f7fc fdbe 	bl	701028ca <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
70105d4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105d52:	e9d3 2300 	ldrd	r2, r3, [r3]
70105d56:	2100      	movs	r1, #0
70105d58:	6239      	str	r1, [r7, #32]
70105d5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
70105d5e:	627b      	str	r3, [r7, #36]	@ 0x24
70105d60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
70105d64:	4603      	mov	r3, r0
70105d66:	460a      	mov	r2, r1
70105d68:	4313      	orrs	r3, r2
70105d6a:	d014      	beq.n	70105d96 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
70105d6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105d70:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
70105d74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
70105d78:	4618      	mov	r0, r3
70105d7a:	f7fc fd4e 	bl	7010281a <LL_RCC_SetOTGPHYCKREFClockSource>
70105d7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105d82:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
70105d86:	0fdb      	lsrs	r3, r3, #31
70105d88:	2b01      	cmp	r3, #1
70105d8a:	d102      	bne.n	70105d92 <HAL_RCCEx_PeriphCLKConfig+0x23ca>
70105d8c:	f7fc faf0 	bl	70102370 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
70105d90:	e001      	b.n	70105d96 <HAL_RCCEx_PeriphCLKConfig+0x23ce>
70105d92:	f7fc fadd 	bl	70102350 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
70105d96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
70105d9e:	2100      	movs	r1, #0
70105da0:	61b9      	str	r1, [r7, #24]
70105da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70105da6:	61fb      	str	r3, [r7, #28]
70105da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
70105dac:	4603      	mov	r3, r0
70105dae:	460a      	mov	r2, r1
70105db0:	4313      	orrs	r3, r2
70105db2:	d014      	beq.n	70105dde <HAL_RCCEx_PeriphCLKConfig+0x2416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
70105db4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105db8:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
70105dbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
70105dc0:	4618      	mov	r0, r3
70105dc2:	f7fc fd2a 	bl	7010281a <LL_RCC_SetOTGPHYCKREFClockSource>
70105dc6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105dca:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
70105dce:	0fdb      	lsrs	r3, r3, #31
70105dd0:	2b01      	cmp	r3, #1
70105dd2:	d102      	bne.n	70105dda <HAL_RCCEx_PeriphCLKConfig+0x2412>
70105dd4:	f7fc facc 	bl	70102370 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
70105dd8:	e001      	b.n	70105dde <HAL_RCCEx_PeriphCLKConfig+0x2416>
70105dda:	f7fc fab9 	bl	70102350 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
70105dde:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105de2:	e9d3 2300 	ldrd	r2, r3, [r3]
70105de6:	2100      	movs	r1, #0
70105de8:	6139      	str	r1, [r7, #16]
70105dea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
70105dee:	617b      	str	r3, [r7, #20]
70105df0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
70105df4:	4603      	mov	r3, r0
70105df6:	460a      	mov	r2, r1
70105df8:	4313      	orrs	r3, r2
70105dfa:	d053      	beq.n	70105ea4 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
70105dfc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105e00:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
70105e04:	4a17      	ldr	r2, [pc, #92]	@ (70105e64 <HAL_RCCEx_PeriphCLKConfig+0x249c>)
70105e06:	4293      	cmp	r3, r2
70105e08:	d12e      	bne.n	70105e68 <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
70105e0a:	4b0d      	ldr	r3, [pc, #52]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105e0c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
70105e10:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
70105e14:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
70105e18:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
70105e1c:	6f91      	ldr	r1, [r2, #120]	@ 0x78
70105e1e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
70105e22:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
70105e24:	3a01      	subs	r2, #1
70105e26:	0412      	lsls	r2, r2, #16
70105e28:	430a      	orrs	r2, r1
70105e2a:	4905      	ldr	r1, [pc, #20]	@ (70105e40 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
70105e2c:	4313      	orrs	r3, r2
70105e2e:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
70105e32:	f7fd fc27 	bl	70103684 <LL_RCC_IC15_Enable>
70105e36:	e020      	b.n	70105e7a <HAL_RCCEx_PeriphCLKConfig+0x24b2>
70105e38:	07011830 	.word	0x07011830
70105e3c:	07021c30 	.word	0x07021c30
70105e40:	56028000 	.word	0x56028000
70105e44:	07031c30 	.word	0x07031c30
70105e48:	07011c30 	.word	0x07011c30
70105e4c:	07020034 	.word	0x07020034
70105e50:	07030034 	.word	0x07030034
70105e54:	07010034 	.word	0x07010034
70105e58:	07020434 	.word	0x07020434
70105e5c:	07030434 	.word	0x07030434
70105e60:	07010434 	.word	0x07010434
70105e64:	03020c14 	.word	0x03020c14
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
70105e68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105e6c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
70105e70:	4a43      	ldr	r2, [pc, #268]	@ (70105f80 <HAL_RCCEx_PeriphCLKConfig+0x25b8>)
70105e72:	4293      	cmp	r3, r2
70105e74:	d101      	bne.n	70105e7a <HAL_RCCEx_PeriphCLKConfig+0x24b2>
    {
      LL_RCC_CLKP_Enable();
70105e76:	f7fd fd85 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
70105e7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105e7e:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
70105e82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
70105e86:	4618      	mov	r0, r3
70105e88:	f7fc fcbc 	bl	70102804 <LL_RCC_SetOTGPHYClockSource>
70105e8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105e90:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
70105e94:	0fdb      	lsrs	r3, r3, #31
70105e96:	2b01      	cmp	r3, #1
70105e98:	d102      	bne.n	70105ea0 <HAL_RCCEx_PeriphCLKConfig+0x24d8>
70105e9a:	f7fc fa69 	bl	70102370 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
70105e9e:	e001      	b.n	70105ea4 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
70105ea0:	f7fc fa56 	bl	70102350 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
70105ea4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
70105eac:	2100      	movs	r1, #0
70105eae:	60b9      	str	r1, [r7, #8]
70105eb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70105eb4:	60fb      	str	r3, [r7, #12]
70105eb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
70105eba:	4603      	mov	r3, r0
70105ebc:	460a      	mov	r2, r1
70105ebe:	4313      	orrs	r3, r2
70105ec0:	d03b      	beq.n	70105f3a <HAL_RCCEx_PeriphCLKConfig+0x2572>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
70105ec2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105ec6:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
70105eca:	4a2e      	ldr	r2, [pc, #184]	@ (70105f84 <HAL_RCCEx_PeriphCLKConfig+0x25bc>)
70105ecc:	4293      	cmp	r3, r2
70105ece:	d116      	bne.n	70105efe <HAL_RCCEx_PeriphCLKConfig+0x2536>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
70105ed0:	4b2d      	ldr	r3, [pc, #180]	@ (70105f88 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
70105ed2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
70105ed6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
70105eda:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
70105ede:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
70105ee2:	6f91      	ldr	r1, [r2, #120]	@ 0x78
70105ee4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
70105ee8:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
70105eea:	3a01      	subs	r2, #1
70105eec:	0412      	lsls	r2, r2, #16
70105eee:	430a      	orrs	r2, r1
70105ef0:	4925      	ldr	r1, [pc, #148]	@ (70105f88 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
70105ef2:	4313      	orrs	r3, r2
70105ef4:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
70105ef8:	f7fd fbc4 	bl	70103684 <LL_RCC_IC15_Enable>
70105efc:	e008      	b.n	70105f10 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
70105efe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105f02:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
70105f06:	4a21      	ldr	r2, [pc, #132]	@ (70105f8c <HAL_RCCEx_PeriphCLKConfig+0x25c4>)
70105f08:	4293      	cmp	r3, r2
70105f0a:	d101      	bne.n	70105f10 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    {
      LL_RCC_CLKP_Enable();
70105f0c:	f7fd fd3a 	bl	70103984 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
70105f10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105f14:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
70105f18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
70105f1c:	4618      	mov	r0, r3
70105f1e:	f7fc fc71 	bl	70102804 <LL_RCC_SetOTGPHYClockSource>
70105f22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105f26:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
70105f2a:	0fdb      	lsrs	r3, r3, #31
70105f2c:	2b01      	cmp	r3, #1
70105f2e:	d102      	bne.n	70105f36 <HAL_RCCEx_PeriphCLKConfig+0x256e>
70105f30:	f7fc fa1e 	bl	70102370 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
70105f34:	e001      	b.n	70105f3a <HAL_RCCEx_PeriphCLKConfig+0x2572>
70105f36:	f7fc fa0b 	bl	70102350 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
70105f3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
70105f42:	2100      	movs	r1, #0
70105f44:	6039      	str	r1, [r7, #0]
70105f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70105f4a:	607b      	str	r3, [r7, #4]
70105f4c:	e9d7 0100 	ldrd	r0, r1, [r7]
70105f50:	4603      	mov	r3, r0
70105f52:	460a      	mov	r2, r1
70105f54:	4313      	orrs	r3, r2
70105f56:	d006      	beq.n	70105f66 <HAL_RCCEx_PeriphCLKConfig+0x259e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
70105f58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
70105f5c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
70105f60:	4618      	mov	r0, r3
70105f62:	f7fc fe8b 	bl	70102c7c <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
70105f66:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
70105f6a:	2b00      	cmp	r3, #0
70105f6c:	d101      	bne.n	70105f72 <HAL_RCCEx_PeriphCLKConfig+0x25aa>
  {
    return HAL_OK;
70105f6e:	2300      	movs	r3, #0
70105f70:	e000      	b.n	70105f74 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
  }
  return HAL_ERROR;
70105f72:	2301      	movs	r3, #1
}
70105f74:	4618      	mov	r0, r3
70105f76:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
70105f7a:	46bd      	mov	sp, r7
70105f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
70105f80:	03010c14 	.word	0x03010c14
70105f84:	03021414 	.word	0x03021414
70105f88:	56028000 	.word	0x56028000
70105f8c:	03011414 	.word	0x03011414

70105f90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
70105f90:	b590      	push	{r4, r7, lr}
70105f92:	b085      	sub	sp, #20
70105f94:	af00      	add	r7, sp, #0
70105f96:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
70105f9a:	2100      	movs	r1, #0
70105f9c:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
70105f9e:	e9d7 0100 	ldrd	r0, r1, [r7]
70105fa2:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
70105fa6:	ea50 0104 	orrs.w	r1, r0, r4
70105faa:	f000 8436 	beq.w	7010681a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
70105fae:	e9d7 0100 	ldrd	r0, r1, [r7]
70105fb2:	2801      	cmp	r0, #1
70105fb4:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
70105fb8:	f080 8434 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70105fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
70105fc0:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
70105fc4:	ea50 0104 	orrs.w	r1, r0, r4
70105fc8:	f000 8422 	beq.w	70106810 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
70105fcc:	e9d7 0100 	ldrd	r0, r1, [r7]
70105fd0:	2801      	cmp	r0, #1
70105fd2:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
70105fd6:	f080 8425 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70105fda:	e9d7 0100 	ldrd	r0, r1, [r7]
70105fde:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
70105fe2:	ea50 0104 	orrs.w	r1, r0, r4
70105fe6:	f000 840e 	beq.w	70106806 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
70105fea:	e9d7 0100 	ldrd	r0, r1, [r7]
70105fee:	2801      	cmp	r0, #1
70105ff0:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
70105ff4:	f080 8416 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70105ff8:	e9d7 0100 	ldrd	r0, r1, [r7]
70105ffc:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
70106000:	ea50 0104 	orrs.w	r1, r0, r4
70106004:	f000 83fa 	beq.w	701067fc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
70106008:	e9d7 0100 	ldrd	r0, r1, [r7]
7010600c:	2801      	cmp	r0, #1
7010600e:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
70106012:	f080 8407 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106016:	e9d7 0100 	ldrd	r0, r1, [r7]
7010601a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
7010601e:	ea50 0104 	orrs.w	r1, r0, r4
70106022:	f000 83e6 	beq.w	701067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
70106026:	e9d7 0100 	ldrd	r0, r1, [r7]
7010602a:	2801      	cmp	r0, #1
7010602c:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
70106030:	f080 83f8 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106034:	e9d7 0100 	ldrd	r0, r1, [r7]
70106038:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
7010603c:	ea50 0104 	orrs.w	r1, r0, r4
70106040:	f000 83d2 	beq.w	701067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
70106044:	e9d7 0100 	ldrd	r0, r1, [r7]
70106048:	2801      	cmp	r0, #1
7010604a:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
7010604e:	f080 83e9 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106052:	e9d7 0100 	ldrd	r0, r1, [r7]
70106056:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
7010605a:	ea50 0104 	orrs.w	r1, r0, r4
7010605e:	f000 83be 	beq.w	701067de <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
70106062:	e9d7 0100 	ldrd	r0, r1, [r7]
70106066:	2801      	cmp	r0, #1
70106068:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
7010606c:	f080 83da 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106070:	e9d7 0100 	ldrd	r0, r1, [r7]
70106074:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
70106078:	ea50 0104 	orrs.w	r1, r0, r4
7010607c:	f000 83aa 	beq.w	701067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
70106080:	e9d7 0100 	ldrd	r0, r1, [r7]
70106084:	2801      	cmp	r0, #1
70106086:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
7010608a:	f080 83cb 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
7010608e:	e9d7 0100 	ldrd	r0, r1, [r7]
70106092:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
70106096:	ea50 0104 	orrs.w	r1, r0, r4
7010609a:	f000 8396 	beq.w	701067ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
7010609e:	e9d7 0100 	ldrd	r0, r1, [r7]
701060a2:	2801      	cmp	r0, #1
701060a4:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
701060a8:	f080 83bc 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701060ac:	e9d7 0100 	ldrd	r0, r1, [r7]
701060b0:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
701060b4:	ea50 0104 	orrs.w	r1, r0, r4
701060b8:	f000 8382 	beq.w	701067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
701060bc:	e9d7 0100 	ldrd	r0, r1, [r7]
701060c0:	2801      	cmp	r0, #1
701060c2:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
701060c6:	f080 83ad 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701060ca:	e9d7 0100 	ldrd	r0, r1, [r7]
701060ce:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
701060d2:	ea50 0104 	orrs.w	r1, r0, r4
701060d6:	f000 836e 	beq.w	701067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
701060da:	e9d7 0100 	ldrd	r0, r1, [r7]
701060de:	2801      	cmp	r0, #1
701060e0:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
701060e4:	f080 839e 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701060e8:	e9d7 0100 	ldrd	r0, r1, [r7]
701060ec:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
701060f0:	ea50 0104 	orrs.w	r1, r0, r4
701060f4:	f000 835a 	beq.w	701067ac <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
701060f8:	e9d7 0100 	ldrd	r0, r1, [r7]
701060fc:	2801      	cmp	r0, #1
701060fe:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
70106102:	f080 838f 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106106:	e9d7 0100 	ldrd	r0, r1, [r7]
7010610a:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
7010610e:	ea50 0104 	orrs.w	r1, r0, r4
70106112:	f000 8346 	beq.w	701067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
70106116:	e9d7 0100 	ldrd	r0, r1, [r7]
7010611a:	2801      	cmp	r0, #1
7010611c:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
70106120:	f080 8380 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106124:	e9d7 0100 	ldrd	r0, r1, [r7]
70106128:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
7010612c:	ea50 0104 	orrs.w	r1, r0, r4
70106130:	f000 8332 	beq.w	70106798 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
70106134:	e9d7 0100 	ldrd	r0, r1, [r7]
70106138:	2801      	cmp	r0, #1
7010613a:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
7010613e:	f080 8371 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106142:	e9d7 0100 	ldrd	r0, r1, [r7]
70106146:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
7010614a:	ea50 0104 	orrs.w	r1, r0, r4
7010614e:	f000 831e 	beq.w	7010678e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
70106152:	e9d7 0100 	ldrd	r0, r1, [r7]
70106156:	2801      	cmp	r0, #1
70106158:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
7010615c:	f080 8362 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106160:	e9d7 0100 	ldrd	r0, r1, [r7]
70106164:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
70106168:	ea50 0104 	orrs.w	r1, r0, r4
7010616c:	f000 830a 	beq.w	70106784 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
70106170:	e9d7 0100 	ldrd	r0, r1, [r7]
70106174:	2801      	cmp	r0, #1
70106176:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
7010617a:	f080 8353 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
7010617e:	e9d7 0100 	ldrd	r0, r1, [r7]
70106182:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
70106186:	ea50 0104 	orrs.w	r1, r0, r4
7010618a:	f000 82f6 	beq.w	7010677a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
7010618e:	e9d7 0100 	ldrd	r0, r1, [r7]
70106192:	2801      	cmp	r0, #1
70106194:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
70106198:	f080 8344 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
7010619c:	e9d7 0100 	ldrd	r0, r1, [r7]
701061a0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
701061a4:	ea50 0104 	orrs.w	r1, r0, r4
701061a8:	f000 82e2 	beq.w	70106770 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
701061ac:	e9d7 0100 	ldrd	r0, r1, [r7]
701061b0:	2801      	cmp	r0, #1
701061b2:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
701061b6:	f080 8335 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701061ba:	e9d7 0100 	ldrd	r0, r1, [r7]
701061be:	f1a1 0420 	sub.w	r4, r1, #32
701061c2:	ea50 0104 	orrs.w	r1, r0, r4
701061c6:	f000 82ce 	beq.w	70106766 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
701061ca:	e9d7 0100 	ldrd	r0, r1, [r7]
701061ce:	2801      	cmp	r0, #1
701061d0:	f171 0120 	sbcs.w	r1, r1, #32
701061d4:	f080 8326 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701061d8:	e9d7 0100 	ldrd	r0, r1, [r7]
701061dc:	f1a1 0410 	sub.w	r4, r1, #16
701061e0:	ea50 0104 	orrs.w	r1, r0, r4
701061e4:	f000 82ba 	beq.w	7010675c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
701061e8:	e9d7 0100 	ldrd	r0, r1, [r7]
701061ec:	2801      	cmp	r0, #1
701061ee:	f171 0110 	sbcs.w	r1, r1, #16
701061f2:	f080 8317 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701061f6:	e9d7 0100 	ldrd	r0, r1, [r7]
701061fa:	f1a1 0408 	sub.w	r4, r1, #8
701061fe:	ea50 0104 	orrs.w	r1, r0, r4
70106202:	f000 82a6 	beq.w	70106752 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
70106206:	e9d7 0100 	ldrd	r0, r1, [r7]
7010620a:	2801      	cmp	r0, #1
7010620c:	f171 0108 	sbcs.w	r1, r1, #8
70106210:	f080 8308 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106214:	e9d7 0100 	ldrd	r0, r1, [r7]
70106218:	1f0c      	subs	r4, r1, #4
7010621a:	ea50 0104 	orrs.w	r1, r0, r4
7010621e:	f000 8293 	beq.w	70106748 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
70106222:	e9d7 0100 	ldrd	r0, r1, [r7]
70106226:	2801      	cmp	r0, #1
70106228:	f171 0104 	sbcs.w	r1, r1, #4
7010622c:	f080 82fa 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106230:	e9d7 0100 	ldrd	r0, r1, [r7]
70106234:	1e8c      	subs	r4, r1, #2
70106236:	ea50 0104 	orrs.w	r1, r0, r4
7010623a:	f000 8280 	beq.w	7010673e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
7010623e:	e9d7 0100 	ldrd	r0, r1, [r7]
70106242:	2801      	cmp	r0, #1
70106244:	f171 0102 	sbcs.w	r1, r1, #2
70106248:	f080 82ec 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
7010624c:	e9d7 0100 	ldrd	r0, r1, [r7]
70106250:	1e4c      	subs	r4, r1, #1
70106252:	ea50 0104 	orrs.w	r1, r0, r4
70106256:	f000 826d 	beq.w	70106734 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
7010625a:	e9d7 0100 	ldrd	r0, r1, [r7]
7010625e:	2801      	cmp	r0, #1
70106260:	f171 0101 	sbcs.w	r1, r1, #1
70106264:	f080 82de 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106268:	e9d7 0100 	ldrd	r0, r1, [r7]
7010626c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
70106270:	4321      	orrs	r1, r4
70106272:	f000 825a 	beq.w	7010672a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
70106276:	e9d7 0100 	ldrd	r0, r1, [r7]
7010627a:	4cda      	ldr	r4, [pc, #872]	@ (701065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
7010627c:	42a0      	cmp	r0, r4
7010627e:	f171 0100 	sbcs.w	r1, r1, #0
70106282:	f080 82cf 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106286:	e9d7 0100 	ldrd	r0, r1, [r7]
7010628a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
7010628e:	4321      	orrs	r1, r4
70106290:	f000 8246 	beq.w	70106720 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
70106294:	e9d7 0100 	ldrd	r0, r1, [r7]
70106298:	4cd3      	ldr	r4, [pc, #844]	@ (701065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
7010629a:	42a0      	cmp	r0, r4
7010629c:	f171 0100 	sbcs.w	r1, r1, #0
701062a0:	f080 82c0 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701062a4:	e9d7 0100 	ldrd	r0, r1, [r7]
701062a8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
701062ac:	4321      	orrs	r1, r4
701062ae:	f000 8232 	beq.w	70106716 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
701062b2:	e9d7 0100 	ldrd	r0, r1, [r7]
701062b6:	4ccd      	ldr	r4, [pc, #820]	@ (701065ec <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
701062b8:	42a0      	cmp	r0, r4
701062ba:	f171 0100 	sbcs.w	r1, r1, #0
701062be:	f080 82b1 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701062c2:	e9d7 0100 	ldrd	r0, r1, [r7]
701062c6:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
701062ca:	4321      	orrs	r1, r4
701062cc:	f000 821e 	beq.w	7010670c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
701062d0:	e9d7 0100 	ldrd	r0, r1, [r7]
701062d4:	4cc6      	ldr	r4, [pc, #792]	@ (701065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
701062d6:	42a0      	cmp	r0, r4
701062d8:	f171 0100 	sbcs.w	r1, r1, #0
701062dc:	f080 82a2 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701062e0:	e9d7 0100 	ldrd	r0, r1, [r7]
701062e4:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
701062e8:	4321      	orrs	r1, r4
701062ea:	f000 820b 	beq.w	70106704 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
701062ee:	e9d7 0100 	ldrd	r0, r1, [r7]
701062f2:	4cc0      	ldr	r4, [pc, #768]	@ (701065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
701062f4:	42a0      	cmp	r0, r4
701062f6:	f171 0100 	sbcs.w	r1, r1, #0
701062fa:	f080 8293 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701062fe:	e9d7 0100 	ldrd	r0, r1, [r7]
70106302:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
70106306:	4321      	orrs	r1, r4
70106308:	f000 81f7 	beq.w	701066fa <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
7010630c:	e9d7 0100 	ldrd	r0, r1, [r7]
70106310:	4cb9      	ldr	r4, [pc, #740]	@ (701065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
70106312:	42a0      	cmp	r0, r4
70106314:	f171 0100 	sbcs.w	r1, r1, #0
70106318:	f080 8284 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
7010631c:	e9d7 0100 	ldrd	r0, r1, [r7]
70106320:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
70106324:	4321      	orrs	r1, r4
70106326:	f000 81e2 	beq.w	701066ee <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
7010632a:	e9d7 0100 	ldrd	r0, r1, [r7]
7010632e:	4cb3      	ldr	r4, [pc, #716]	@ (701065fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
70106330:	42a0      	cmp	r0, r4
70106332:	f171 0100 	sbcs.w	r1, r1, #0
70106336:	f080 8275 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
7010633a:	e9d7 0100 	ldrd	r0, r1, [r7]
7010633e:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
70106342:	4321      	orrs	r1, r4
70106344:	f000 81cd 	beq.w	701066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
70106348:	e9d7 0100 	ldrd	r0, r1, [r7]
7010634c:	4cac      	ldr	r4, [pc, #688]	@ (70106600 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
7010634e:	42a0      	cmp	r0, r4
70106350:	f171 0100 	sbcs.w	r1, r1, #0
70106354:	f080 8266 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106358:	e9d7 0100 	ldrd	r0, r1, [r7]
7010635c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
70106360:	4321      	orrs	r1, r4
70106362:	f000 81b8 	beq.w	701066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
70106366:	e9d7 0100 	ldrd	r0, r1, [r7]
7010636a:	4ca6      	ldr	r4, [pc, #664]	@ (70106604 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
7010636c:	42a0      	cmp	r0, r4
7010636e:	f171 0100 	sbcs.w	r1, r1, #0
70106372:	f080 8257 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106376:	e9d7 0100 	ldrd	r0, r1, [r7]
7010637a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
7010637e:	4321      	orrs	r1, r4
70106380:	f000 81a4 	beq.w	701066cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
70106384:	e9d7 0100 	ldrd	r0, r1, [r7]
70106388:	4c9f      	ldr	r4, [pc, #636]	@ (70106608 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
7010638a:	42a0      	cmp	r0, r4
7010638c:	f171 0100 	sbcs.w	r1, r1, #0
70106390:	f080 8248 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106394:	e9d7 0100 	ldrd	r0, r1, [r7]
70106398:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
7010639c:	4321      	orrs	r1, r4
7010639e:	f000 8190 	beq.w	701066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
701063a2:	e9d7 0100 	ldrd	r0, r1, [r7]
701063a6:	4c99      	ldr	r4, [pc, #612]	@ (7010660c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
701063a8:	42a0      	cmp	r0, r4
701063aa:	f171 0100 	sbcs.w	r1, r1, #0
701063ae:	f080 8239 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701063b2:	e9d7 0100 	ldrd	r0, r1, [r7]
701063b6:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
701063ba:	4321      	orrs	r1, r4
701063bc:	f000 817c 	beq.w	701066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
701063c0:	e9d7 0100 	ldrd	r0, r1, [r7]
701063c4:	4c92      	ldr	r4, [pc, #584]	@ (70106610 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
701063c6:	42a0      	cmp	r0, r4
701063c8:	f171 0100 	sbcs.w	r1, r1, #0
701063cc:	f080 822a 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701063d0:	e9d7 0100 	ldrd	r0, r1, [r7]
701063d4:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
701063d8:	4321      	orrs	r1, r4
701063da:	f000 8168 	beq.w	701066ae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
701063de:	e9d7 0100 	ldrd	r0, r1, [r7]
701063e2:	4c8c      	ldr	r4, [pc, #560]	@ (70106614 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
701063e4:	42a0      	cmp	r0, r4
701063e6:	f171 0100 	sbcs.w	r1, r1, #0
701063ea:	f080 821b 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701063ee:	e9d7 0100 	ldrd	r0, r1, [r7]
701063f2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
701063f6:	4321      	orrs	r1, r4
701063f8:	f000 8154 	beq.w	701066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
701063fc:	e9d7 0100 	ldrd	r0, r1, [r7]
70106400:	4c85      	ldr	r4, [pc, #532]	@ (70106618 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
70106402:	42a0      	cmp	r0, r4
70106404:	f171 0100 	sbcs.w	r1, r1, #0
70106408:	f080 820c 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
7010640c:	e9d7 0100 	ldrd	r0, r1, [r7]
70106410:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
70106414:	4321      	orrs	r1, r4
70106416:	f000 8140 	beq.w	7010669a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
7010641a:	e9d7 0100 	ldrd	r0, r1, [r7]
7010641e:	4c7f      	ldr	r4, [pc, #508]	@ (7010661c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
70106420:	42a0      	cmp	r0, r4
70106422:	f171 0100 	sbcs.w	r1, r1, #0
70106426:	f080 81fd 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
7010642a:	e9d7 0100 	ldrd	r0, r1, [r7]
7010642e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
70106432:	4321      	orrs	r1, r4
70106434:	f000 812c 	beq.w	70106690 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
70106438:	e9d7 0100 	ldrd	r0, r1, [r7]
7010643c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
70106440:	f171 0100 	sbcs.w	r1, r1, #0
70106444:	f080 81ee 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106448:	e9d7 0100 	ldrd	r0, r1, [r7]
7010644c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
70106450:	4321      	orrs	r1, r4
70106452:	f000 8118 	beq.w	70106686 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
70106456:	e9d7 0100 	ldrd	r0, r1, [r7]
7010645a:	f248 0401 	movw	r4, #32769	@ 0x8001
7010645e:	42a0      	cmp	r0, r4
70106460:	f171 0100 	sbcs.w	r1, r1, #0
70106464:	f080 81de 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106468:	e9d7 0100 	ldrd	r0, r1, [r7]
7010646c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
70106470:	4321      	orrs	r1, r4
70106472:	f000 8103 	beq.w	7010667c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
70106476:	e9d7 0100 	ldrd	r0, r1, [r7]
7010647a:	f244 0401 	movw	r4, #16385	@ 0x4001
7010647e:	42a0      	cmp	r0, r4
70106480:	f171 0100 	sbcs.w	r1, r1, #0
70106484:	f080 81ce 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106488:	e9d7 0100 	ldrd	r0, r1, [r7]
7010648c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
70106490:	4321      	orrs	r1, r4
70106492:	f000 80ee 	beq.w	70106672 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
70106496:	e9d7 0100 	ldrd	r0, r1, [r7]
7010649a:	f242 0401 	movw	r4, #8193	@ 0x2001
7010649e:	42a0      	cmp	r0, r4
701064a0:	f171 0100 	sbcs.w	r1, r1, #0
701064a4:	f080 81be 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701064a8:	e9d7 0100 	ldrd	r0, r1, [r7]
701064ac:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
701064b0:	4321      	orrs	r1, r4
701064b2:	f000 80d9 	beq.w	70106668 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
701064b6:	e9d7 0100 	ldrd	r0, r1, [r7]
701064ba:	f241 0401 	movw	r4, #4097	@ 0x1001
701064be:	42a0      	cmp	r0, r4
701064c0:	f171 0100 	sbcs.w	r1, r1, #0
701064c4:	f080 81ae 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701064c8:	e9d7 0100 	ldrd	r0, r1, [r7]
701064cc:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
701064d0:	4321      	orrs	r1, r4
701064d2:	f000 80c4 	beq.w	7010665e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
701064d6:	e9d7 0100 	ldrd	r0, r1, [r7]
701064da:	f640 0401 	movw	r4, #2049	@ 0x801
701064de:	42a0      	cmp	r0, r4
701064e0:	f171 0100 	sbcs.w	r1, r1, #0
701064e4:	f080 819e 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
701064e8:	e9d7 0100 	ldrd	r0, r1, [r7]
701064ec:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
701064f0:	4321      	orrs	r1, r4
701064f2:	f000 80af 	beq.w	70106654 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
701064f6:	e9d7 0100 	ldrd	r0, r1, [r7]
701064fa:	f240 4401 	movw	r4, #1025	@ 0x401
701064fe:	42a0      	cmp	r0, r4
70106500:	f171 0100 	sbcs.w	r1, r1, #0
70106504:	f080 818e 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106508:	e9d7 0100 	ldrd	r0, r1, [r7]
7010650c:	2821      	cmp	r0, #33	@ 0x21
7010650e:	f171 0100 	sbcs.w	r1, r1, #0
70106512:	d255      	bcs.n	701065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
70106514:	e9d7 0100 	ldrd	r0, r1, [r7]
70106518:	4301      	orrs	r1, r0
7010651a:	f000 8183 	beq.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
7010651e:	e9d7 0100 	ldrd	r0, r1, [r7]
70106522:	1e42      	subs	r2, r0, #1
70106524:	f141 33ff 	adc.w	r3, r1, #4294967295
70106528:	2a20      	cmp	r2, #32
7010652a:	f173 0100 	sbcs.w	r1, r3, #0
7010652e:	f080 8179 	bcs.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106532:	2a1f      	cmp	r2, #31
70106534:	f200 8176 	bhi.w	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
70106538:	a101      	add	r1, pc, #4	@ (adr r1, 70106540 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
7010653a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
7010653e:	bf00      	nop
70106540:	701065cf 	.word	0x701065cf
70106544:	701065d9 	.word	0x701065d9
70106548:	70106825 	.word	0x70106825
7010654c:	70106629 	.word	0x70106629
70106550:	70106825 	.word	0x70106825
70106554:	70106825 	.word	0x70106825
70106558:	70106825 	.word	0x70106825
7010655c:	70106621 	.word	0x70106621
70106560:	70106825 	.word	0x70106825
70106564:	70106825 	.word	0x70106825
70106568:	70106825 	.word	0x70106825
7010656c:	70106825 	.word	0x70106825
70106570:	70106825 	.word	0x70106825
70106574:	70106825 	.word	0x70106825
70106578:	70106825 	.word	0x70106825
7010657c:	70106633 	.word	0x70106633
70106580:	70106825 	.word	0x70106825
70106584:	70106825 	.word	0x70106825
70106588:	70106825 	.word	0x70106825
7010658c:	70106825 	.word	0x70106825
70106590:	70106825 	.word	0x70106825
70106594:	70106825 	.word	0x70106825
70106598:	70106825 	.word	0x70106825
7010659c:	70106825 	.word	0x70106825
701065a0:	70106825 	.word	0x70106825
701065a4:	70106825 	.word	0x70106825
701065a8:	70106825 	.word	0x70106825
701065ac:	70106825 	.word	0x70106825
701065b0:	70106825 	.word	0x70106825
701065b4:	70106825 	.word	0x70106825
701065b8:	70106825 	.word	0x70106825
701065bc:	7010663f 	.word	0x7010663f
701065c0:	e9d7 2300 	ldrd	r2, r3, [r7]
701065c4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
701065c8:	430b      	orrs	r3, r1
701065ca:	d03e      	beq.n	7010664a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
701065cc:	e12a      	b.n	70106824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
701065ce:	2070      	movs	r0, #112	@ 0x70
701065d0:	f000 fb90 	bl	70106cf4 <RCCEx_GetADCCLKFreq>
701065d4:	60f8      	str	r0, [r7, #12]
      break;
701065d6:	e126      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
701065d8:	2007      	movs	r0, #7
701065da:	f000 fc8d 	bl	70106ef8 <RCCEx_GetADFCLKFreq>
701065de:	60f8      	str	r0, [r7, #12]
      break;
701065e0:	e121      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
701065e2:	bf00      	nop
701065e4:	80000001 	.word	0x80000001
701065e8:	40000001 	.word	0x40000001
701065ec:	20000001 	.word	0x20000001
701065f0:	10000001 	.word	0x10000001
701065f4:	08000001 	.word	0x08000001
701065f8:	04000001 	.word	0x04000001
701065fc:	02000001 	.word	0x02000001
70106600:	01000001 	.word	0x01000001
70106604:	00800001 	.word	0x00800001
70106608:	00400001 	.word	0x00400001
7010660c:	00200001 	.word	0x00200001
70106610:	00100001 	.word	0x00100001
70106614:	00080001 	.word	0x00080001
70106618:	00040001 	.word	0x00040001
7010661c:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
70106620:	f000 ff0c 	bl	7010743c <RCCEx_GetCSICLKFreq>
70106624:	60f8      	str	r0, [r7, #12]
      break;
70106626:	e0fe      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70106628:	2007      	movs	r0, #7
7010662a:	f000 fd51 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
7010662e:	60f8      	str	r0, [r7, #12]
      break;
70106630:	e0f9      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
70106632:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
70106636:	f000 ff4d 	bl	701074d4 <RCCEx_GetDCMIPPCLKFreq>
7010663a:	60f8      	str	r0, [r7, #12]
      break;
7010663c:	e0f3      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
7010663e:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
70106642:	f000 ffd1 	bl	701075e8 <RCCEx_GetETH1CLKFreq>
70106646:	60f8      	str	r0, [r7, #12]
      break;
70106648:	e0ed      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
7010664a:	2003      	movs	r0, #3
7010664c:	f001 f84c 	bl	701076e8 <RCCEx_GetETH1PTPCLKFreq>
70106650:	60f8      	str	r0, [r7, #12]
      break;
70106652:	e0e8      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
70106654:	2003      	movs	r0, #3
70106656:	f001 f8cb 	bl	701077f0 <RCCEx_GetFDCANCLKFreq>
7010665a:	60f8      	str	r0, [r7, #12]
      break;
7010665c:	e0e3      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
7010665e:	2030      	movs	r0, #48	@ 0x30
70106660:	f001 f946 	bl	701078f0 <RCCEx_GetFMCCLKFreq>
70106664:	60f8      	str	r0, [r7, #12]
      break;
70106666:	e0de      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
70106668:	4871      	ldr	r0, [pc, #452]	@ (70106830 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
7010666a:	f001 f9f9 	bl	70107a60 <RCCEx_GetI2CCLKFreq>
7010666e:	60f8      	str	r0, [r7, #12]
      break;
70106670:	e0d9      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
70106672:	4870      	ldr	r0, [pc, #448]	@ (70106834 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
70106674:	f001 f9f4 	bl	70107a60 <RCCEx_GetI2CCLKFreq>
70106678:	60f8      	str	r0, [r7, #12]
      break;
7010667a:	e0d4      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
7010667c:	486e      	ldr	r0, [pc, #440]	@ (70106838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
7010667e:	f001 f9ef 	bl	70107a60 <RCCEx_GetI2CCLKFreq>
70106682:	60f8      	str	r0, [r7, #12]
      break;
70106684:	e0cf      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
70106686:	486d      	ldr	r0, [pc, #436]	@ (7010683c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
70106688:	f001 f9ea 	bl	70107a60 <RCCEx_GetI2CCLKFreq>
7010668c:	60f8      	str	r0, [r7, #12]
      break;
7010668e:	e0ca      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
70106690:	486b      	ldr	r0, [pc, #428]	@ (70106840 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
70106692:	f001 fb8d 	bl	70107db0 <RCCEx_GetI3CCLKFreq>
70106696:	60f8      	str	r0, [r7, #12]
      break;
70106698:	e0c5      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
7010669a:	486a      	ldr	r0, [pc, #424]	@ (70106844 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
7010669c:	f001 fb88 	bl	70107db0 <RCCEx_GetI3CCLKFreq>
701066a0:	60f8      	str	r0, [r7, #12]
      break;
701066a2:	e0c0      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
701066a4:	4868      	ldr	r0, [pc, #416]	@ (70106848 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
701066a6:	f001 fcb7 	bl	70108018 <RCCEx_GetLPTIMCLKFreq>
701066aa:	60f8      	str	r0, [r7, #12]
      break;
701066ac:	e0bb      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
701066ae:	4867      	ldr	r0, [pc, #412]	@ (7010684c <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
701066b0:	f001 fcb2 	bl	70108018 <RCCEx_GetLPTIMCLKFreq>
701066b4:	60f8      	str	r0, [r7, #12]
      break;
701066b6:	e0b6      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
701066b8:	4865      	ldr	r0, [pc, #404]	@ (70106850 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
701066ba:	f001 fcad 	bl	70108018 <RCCEx_GetLPTIMCLKFreq>
701066be:	60f8      	str	r0, [r7, #12]
      break;
701066c0:	e0b1      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
701066c2:	4864      	ldr	r0, [pc, #400]	@ (70106854 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
701066c4:	f001 fca8 	bl	70108018 <RCCEx_GetLPTIMCLKFreq>
701066c8:	60f8      	str	r0, [r7, #12]
      break;
701066ca:	e0ac      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
701066cc:	4862      	ldr	r0, [pc, #392]	@ (70106858 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
701066ce:	f001 fca3 	bl	70108018 <RCCEx_GetLPTIMCLKFreq>
701066d2:	60f8      	str	r0, [r7, #12]
      break;
701066d4:	e0a7      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
701066d6:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
701066da:	f001 fe47 	bl	7010836c <RCCEx_GetLPUARTCLKFreq>
701066de:	60f8      	str	r0, [r7, #12]
      break;
701066e0:	e0a1      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
701066e2:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
701066e6:	f001 ff43 	bl	70108570 <RCCEx_GetLTDCCLKFreq>
701066ea:	60f8      	str	r0, [r7, #12]
      break;
701066ec:	e09b      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
701066ee:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
701066f2:	f001 ffc7 	bl	70108684 <RCCEx_GetMDFCLKFreq>
701066f6:	60f8      	str	r0, [r7, #12]
      break;
701066f8:	e095      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
701066fa:	2030      	movs	r0, #48	@ 0x30
701066fc:	f002 f8cc 	bl	70108898 <RCCEx_GetPSSICLKFreq>
70106700:	60f8      	str	r0, [r7, #12]
      break;
70106702:	e090      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
70106704:	f002 f94a 	bl	7010899c <RCCEx_GetRTCCLKFreq>
70106708:	60f8      	str	r0, [r7, #12]
      break;
7010670a:	e08c      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
7010670c:	4853      	ldr	r0, [pc, #332]	@ (7010685c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
7010670e:	f002 f997 	bl	70108a40 <RCCEx_GetSAICLKFreq>
70106712:	60f8      	str	r0, [r7, #12]
      break;
70106714:	e087      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
70106716:	4852      	ldr	r0, [pc, #328]	@ (70106860 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
70106718:	f002 f992 	bl	70108a40 <RCCEx_GetSAICLKFreq>
7010671c:	60f8      	str	r0, [r7, #12]
      break;
7010671e:	e082      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
70106720:	4850      	ldr	r0, [pc, #320]	@ (70106864 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
70106722:	f002 faf3 	bl	70108d0c <RCCEx_GetSDMMCCLKFreq>
70106726:	60f8      	str	r0, [r7, #12]
      break;
70106728:	e07d      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
7010672a:	484f      	ldr	r0, [pc, #316]	@ (70106868 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
7010672c:	f002 faee 	bl	70108d0c <RCCEx_GetSDMMCCLKFreq>
70106730:	60f8      	str	r0, [r7, #12]
      break;
70106732:	e078      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
70106734:	2007      	movs	r0, #7
70106736:	f002 fbd3 	bl	70108ee0 <RCCEx_GetSPDIFRXCLKFreq>
7010673a:	60f8      	str	r0, [r7, #12]
      break;
7010673c:	e073      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
7010673e:	484b      	ldr	r0, [pc, #300]	@ (7010686c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
70106740:	f002 fcb2 	bl	701090a8 <RCCEx_GetSPICLKFreq>
70106744:	60f8      	str	r0, [r7, #12]
      break;
70106746:	e06e      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
70106748:	4849      	ldr	r0, [pc, #292]	@ (70106870 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
7010674a:	f002 fcad 	bl	701090a8 <RCCEx_GetSPICLKFreq>
7010674e:	60f8      	str	r0, [r7, #12]
      break;
70106750:	e069      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
70106752:	4848      	ldr	r0, [pc, #288]	@ (70106874 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
70106754:	f002 fca8 	bl	701090a8 <RCCEx_GetSPICLKFreq>
70106758:	60f8      	str	r0, [r7, #12]
      break;
7010675a:	e064      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
7010675c:	4846      	ldr	r0, [pc, #280]	@ (70106878 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
7010675e:	f002 fca3 	bl	701090a8 <RCCEx_GetSPICLKFreq>
70106762:	60f8      	str	r0, [r7, #12]
      break;
70106764:	e05f      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
70106766:	4845      	ldr	r0, [pc, #276]	@ (7010687c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
70106768:	f002 fc9e 	bl	701090a8 <RCCEx_GetSPICLKFreq>
7010676c:	60f8      	str	r0, [r7, #12]
      break;
7010676e:	e05a      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
70106770:	4843      	ldr	r0, [pc, #268]	@ (70106880 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
70106772:	f002 fc99 	bl	701090a8 <RCCEx_GetSPICLKFreq>
70106776:	60f8      	str	r0, [r7, #12]
      break;
70106778:	e055      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
7010677a:	4842      	ldr	r0, [pc, #264]	@ (70106884 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
7010677c:	f003 f990 	bl	70109aa0 <RCCEx_GetUSARTCLKFreq>
70106780:	60f8      	str	r0, [r7, #12]
      break;
70106782:	e050      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
70106784:	4840      	ldr	r0, [pc, #256]	@ (70106888 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
70106786:	f003 f98b 	bl	70109aa0 <RCCEx_GetUSARTCLKFreq>
7010678a:	60f8      	str	r0, [r7, #12]
      break;
7010678c:	e04b      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
7010678e:	483f      	ldr	r0, [pc, #252]	@ (7010688c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
70106790:	f003 f986 	bl	70109aa0 <RCCEx_GetUSARTCLKFreq>
70106794:	60f8      	str	r0, [r7, #12]
      break;
70106796:	e046      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
70106798:	483d      	ldr	r0, [pc, #244]	@ (70106890 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
7010679a:	f002 ff57 	bl	7010964c <RCCEx_GetUARTCLKFreq>
7010679e:	60f8      	str	r0, [r7, #12]
      break;
701067a0:	e041      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
701067a2:	483c      	ldr	r0, [pc, #240]	@ (70106894 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
701067a4:	f002 ff52 	bl	7010964c <RCCEx_GetUARTCLKFreq>
701067a8:	60f8      	str	r0, [r7, #12]
      break;
701067aa:	e03c      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
701067ac:	483a      	ldr	r0, [pc, #232]	@ (70106898 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
701067ae:	f003 f977 	bl	70109aa0 <RCCEx_GetUSARTCLKFreq>
701067b2:	60f8      	str	r0, [r7, #12]
      break;
701067b4:	e037      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
701067b6:	4839      	ldr	r0, [pc, #228]	@ (7010689c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
701067b8:	f002 ff48 	bl	7010964c <RCCEx_GetUARTCLKFreq>
701067bc:	60f8      	str	r0, [r7, #12]
      break;
701067be:	e032      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
701067c0:	4837      	ldr	r0, [pc, #220]	@ (701068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
701067c2:	f002 ff43 	bl	7010964c <RCCEx_GetUARTCLKFreq>
701067c6:	60f8      	str	r0, [r7, #12]
      break;
701067c8:	e02d      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
701067ca:	4836      	ldr	r0, [pc, #216]	@ (701068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
701067cc:	f002 ff3e 	bl	7010964c <RCCEx_GetUARTCLKFreq>
701067d0:	60f8      	str	r0, [r7, #12]
      break;
701067d2:	e028      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
701067d4:	4834      	ldr	r0, [pc, #208]	@ (701068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
701067d6:	f003 f963 	bl	70109aa0 <RCCEx_GetUSARTCLKFreq>
701067da:	60f8      	str	r0, [r7, #12]
      break;
701067dc:	e023      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
701067de:	4833      	ldr	r0, [pc, #204]	@ (701068ac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
701067e0:	f003 fc3e 	bl	7010a060 <RCCEx_GetOTGPHYCKREFCLKFreq>
701067e4:	60f8      	str	r0, [r7, #12]
      break;
701067e6:	e01e      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
701067e8:	4831      	ldr	r0, [pc, #196]	@ (701068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
701067ea:	f003 fb83 	bl	70109ef4 <RCCEx_GetOTGPHYCLKFreq>
701067ee:	60f8      	str	r0, [r7, #12]
      break;
701067f0:	e019      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
701067f2:	4830      	ldr	r0, [pc, #192]	@ (701068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
701067f4:	f003 fc34 	bl	7010a060 <RCCEx_GetOTGPHYCKREFCLKFreq>
701067f8:	60f8      	str	r0, [r7, #12]
      break;
701067fa:	e014      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
701067fc:	482e      	ldr	r0, [pc, #184]	@ (701068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
701067fe:	f003 fb79 	bl	70109ef4 <RCCEx_GetOTGPHYCLKFreq>
70106802:	60f8      	str	r0, [r7, #12]
      break;
70106804:	e00f      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
70106806:	482d      	ldr	r0, [pc, #180]	@ (701068bc <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
70106808:	f003 fc7a 	bl	7010a100 <RCCEx_GetXSPICLKFreq>
7010680c:	60f8      	str	r0, [r7, #12]
      break;
7010680e:	e00a      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
70106810:	482b      	ldr	r0, [pc, #172]	@ (701068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
70106812:	f003 fc75 	bl	7010a100 <RCCEx_GetXSPICLKFreq>
70106816:	60f8      	str	r0, [r7, #12]
      break;
70106818:	e005      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
7010681a:	482a      	ldr	r0, [pc, #168]	@ (701068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
7010681c:	f003 fc70 	bl	7010a100 <RCCEx_GetXSPICLKFreq>
70106820:	60f8      	str	r0, [r7, #12]
      break;
70106822:	e000      	b.n	70106826 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
70106824:	bf00      	nop
  }

  return frequency;
70106826:	68fb      	ldr	r3, [r7, #12]
}
70106828:	4618      	mov	r0, r3
7010682a:	3714      	adds	r7, #20
7010682c:	46bd      	mov	sp, r7
7010682e:	bd90      	pop	{r4, r7, pc}
70106830:	0700000c 	.word	0x0700000c
70106834:	0700040c 	.word	0x0700040c
70106838:	0700080c 	.word	0x0700080c
7010683c:	07000c0c 	.word	0x07000c0c
70106840:	0700100c 	.word	0x0700100c
70106844:	0700140c 	.word	0x0700140c
70106848:	0700082c 	.word	0x0700082c
7010684c:	07000c2c 	.word	0x07000c2c
70106850:	0700102c 	.word	0x0700102c
70106854:	0700142c 	.word	0x0700142c
70106858:	0700182c 	.word	0x0700182c
7010685c:	07001418 	.word	0x07001418
70106860:	07001818 	.word	0x07001818
70106864:	0300001c 	.word	0x0300001c
70106868:	0300041c 	.word	0x0300041c
7010686c:	07000420 	.word	0x07000420
70106870:	07000820 	.word	0x07000820
70106874:	07000c20 	.word	0x07000c20
70106878:	07001020 	.word	0x07001020
7010687c:	07001420 	.word	0x07001420
70106880:	07001820 	.word	0x07001820
70106884:	07000030 	.word	0x07000030
70106888:	07000430 	.word	0x07000430
7010688c:	07000830 	.word	0x07000830
70106890:	07000c30 	.word	0x07000c30
70106894:	07001030 	.word	0x07001030
70106898:	07001430 	.word	0x07001430
7010689c:	07001830 	.word	0x07001830
701068a0:	07001c30 	.word	0x07001c30
701068a4:	07000034 	.word	0x07000034
701068a8:	07000434 	.word	0x07000434
701068ac:	01001014 	.word	0x01001014
701068b0:	03000c14 	.word	0x03000c14
701068b4:	01001814 	.word	0x01001814
701068b8:	03001414 	.word	0x03001414
701068bc:	03000014 	.word	0x03000014
701068c0:	03000414 	.word	0x03000414
701068c4:	03000814 	.word	0x03000814

701068c8 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
701068c8:	b5f0      	push	{r4, r5, r6, r7, lr}
701068ca:	b087      	sub	sp, #28
701068cc:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
701068ce:	2300      	movs	r3, #0
701068d0:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
701068d2:	f7fc fa05 	bl	70102ce0 <LL_RCC_PLL1_IsReady>
701068d6:	4603      	mov	r3, r0
701068d8:	2b00      	cmp	r3, #0
701068da:	d02a      	beq.n	70106932 <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
701068dc:	f7fc fa68 	bl	70102db0 <LL_RCC_PLL1P_IsEnabled>
701068e0:	4603      	mov	r3, r0
701068e2:	2b00      	cmp	r3, #0
701068e4:	d031      	beq.n	7010694a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
701068e6:	f7fc f9ed 	bl	70102cc4 <LL_RCC_PLL1_GetSource>
701068ea:	4603      	mov	r3, r0
701068ec:	4618      	mov	r0, r3
701068ee:	f000 f957 	bl	70106ba0 <RCCEx_GetPLLSourceFreq>
701068f2:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
701068f4:	68bb      	ldr	r3, [r7, #8]
701068f6:	2b00      	cmp	r3, #0
701068f8:	d027      	beq.n	7010694a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
      {
        divm = LL_RCC_PLL1_GetM();
701068fa:	f7fc fa29 	bl	70102d50 <LL_RCC_PLL1_GetM>
701068fe:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
70106900:	687b      	ldr	r3, [r7, #4]
70106902:	2b00      	cmp	r3, #0
70106904:	d021      	beq.n	7010694a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
70106906:	f7fc fa13 	bl	70102d30 <LL_RCC_PLL1_GetN>
7010690a:	4605      	mov	r5, r0
7010690c:	f7fc fa64 	bl	70102dd8 <LL_RCC_PLL1_GetFRACN>
70106910:	4606      	mov	r6, r0
70106912:	f7fc fa2d 	bl	70102d70 <LL_RCC_PLL1_GetP1>
70106916:	4604      	mov	r4, r0
70106918:	f7fc fa3a 	bl	70102d90 <LL_RCC_PLL1_GetP2>
7010691c:	4603      	mov	r3, r0
7010691e:	9301      	str	r3, [sp, #4]
70106920:	9400      	str	r4, [sp, #0]
70106922:	4633      	mov	r3, r6
70106924:	462a      	mov	r2, r5
70106926:	6879      	ldr	r1, [r7, #4]
70106928:	68b8      	ldr	r0, [r7, #8]
7010692a:	f000 f997 	bl	70106c5c <RCCEx_CalcPLLFreq>
7010692e:	60f8      	str	r0, [r7, #12]
70106930:	e00b      	b.n	7010694a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
70106932:	f7fc f9e9 	bl	70102d08 <LL_RCC_PLL1_IsEnabledBypass>
70106936:	4603      	mov	r3, r0
70106938:	2b00      	cmp	r3, #0
7010693a:	d006      	beq.n	7010694a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
7010693c:	f7fc f9c2 	bl	70102cc4 <LL_RCC_PLL1_GetSource>
70106940:	4603      	mov	r3, r0
70106942:	4618      	mov	r0, r3
70106944:	f000 f92c 	bl	70106ba0 <RCCEx_GetPLLSourceFreq>
70106948:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
7010694a:	68fb      	ldr	r3, [r7, #12]
}
7010694c:	4618      	mov	r0, r3
7010694e:	3714      	adds	r7, #20
70106950:	46bd      	mov	sp, r7
70106952:	bdf0      	pop	{r4, r5, r6, r7, pc}

70106954 <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
70106954:	b5f0      	push	{r4, r5, r6, r7, lr}
70106956:	b087      	sub	sp, #28
70106958:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
7010695a:	2300      	movs	r3, #0
7010695c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
7010695e:	f7fc fa57 	bl	70102e10 <LL_RCC_PLL2_IsReady>
70106962:	4603      	mov	r3, r0
70106964:	2b00      	cmp	r3, #0
70106966:	d02a      	beq.n	701069be <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
70106968:	f7fc faba 	bl	70102ee0 <LL_RCC_PLL2P_IsEnabled>
7010696c:	4603      	mov	r3, r0
7010696e:	2b00      	cmp	r3, #0
70106970:	d031      	beq.n	701069d6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
70106972:	f7fc fa3f 	bl	70102df4 <LL_RCC_PLL2_GetSource>
70106976:	4603      	mov	r3, r0
70106978:	4618      	mov	r0, r3
7010697a:	f000 f911 	bl	70106ba0 <RCCEx_GetPLLSourceFreq>
7010697e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
70106980:	68bb      	ldr	r3, [r7, #8]
70106982:	2b00      	cmp	r3, #0
70106984:	d027      	beq.n	701069d6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
      {

        divm = LL_RCC_PLL2_GetM();
70106986:	f7fc fa7b 	bl	70102e80 <LL_RCC_PLL2_GetM>
7010698a:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
7010698c:	687b      	ldr	r3, [r7, #4]
7010698e:	2b00      	cmp	r3, #0
70106990:	d021      	beq.n	701069d6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
70106992:	f7fc fa65 	bl	70102e60 <LL_RCC_PLL2_GetN>
70106996:	4605      	mov	r5, r0
70106998:	f7fc fab6 	bl	70102f08 <LL_RCC_PLL2_GetFRACN>
7010699c:	4606      	mov	r6, r0
7010699e:	f7fc fa7f 	bl	70102ea0 <LL_RCC_PLL2_GetP1>
701069a2:	4604      	mov	r4, r0
701069a4:	f7fc fa8c 	bl	70102ec0 <LL_RCC_PLL2_GetP2>
701069a8:	4603      	mov	r3, r0
701069aa:	9301      	str	r3, [sp, #4]
701069ac:	9400      	str	r4, [sp, #0]
701069ae:	4633      	mov	r3, r6
701069b0:	462a      	mov	r2, r5
701069b2:	6879      	ldr	r1, [r7, #4]
701069b4:	68b8      	ldr	r0, [r7, #8]
701069b6:	f000 f951 	bl	70106c5c <RCCEx_CalcPLLFreq>
701069ba:	60f8      	str	r0, [r7, #12]
701069bc:	e00b      	b.n	701069d6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
701069be:	f7fc fa3b 	bl	70102e38 <LL_RCC_PLL2_IsEnabledBypass>
701069c2:	4603      	mov	r3, r0
701069c4:	2b00      	cmp	r3, #0
701069c6:	d006      	beq.n	701069d6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
701069c8:	f7fc fa14 	bl	70102df4 <LL_RCC_PLL2_GetSource>
701069cc:	4603      	mov	r3, r0
701069ce:	4618      	mov	r0, r3
701069d0:	f000 f8e6 	bl	70106ba0 <RCCEx_GetPLLSourceFreq>
701069d4:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
701069d6:	68fb      	ldr	r3, [r7, #12]
}
701069d8:	4618      	mov	r0, r3
701069da:	3714      	adds	r7, #20
701069dc:	46bd      	mov	sp, r7
701069de:	bdf0      	pop	{r4, r5, r6, r7, pc}

701069e0 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
701069e0:	b5f0      	push	{r4, r5, r6, r7, lr}
701069e2:	b087      	sub	sp, #28
701069e4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
701069e6:	2300      	movs	r3, #0
701069e8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
701069ea:	f7fc faa9 	bl	70102f40 <LL_RCC_PLL3_IsReady>
701069ee:	4603      	mov	r3, r0
701069f0:	2b00      	cmp	r3, #0
701069f2:	d02a      	beq.n	70106a4a <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
701069f4:	f7fc fb0c 	bl	70103010 <LL_RCC_PLL3P_IsEnabled>
701069f8:	4603      	mov	r3, r0
701069fa:	2b00      	cmp	r3, #0
701069fc:	d031      	beq.n	70106a62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
701069fe:	f7fc fa91 	bl	70102f24 <LL_RCC_PLL3_GetSource>
70106a02:	4603      	mov	r3, r0
70106a04:	4618      	mov	r0, r3
70106a06:	f000 f8cb 	bl	70106ba0 <RCCEx_GetPLLSourceFreq>
70106a0a:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
70106a0c:	68bb      	ldr	r3, [r7, #8]
70106a0e:	2b00      	cmp	r3, #0
70106a10:	d027      	beq.n	70106a62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
      {
        divm = LL_RCC_PLL3_GetM();
70106a12:	f7fc facd 	bl	70102fb0 <LL_RCC_PLL3_GetM>
70106a16:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
70106a18:	687b      	ldr	r3, [r7, #4]
70106a1a:	2b00      	cmp	r3, #0
70106a1c:	d021      	beq.n	70106a62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
70106a1e:	f7fc fab7 	bl	70102f90 <LL_RCC_PLL3_GetN>
70106a22:	4605      	mov	r5, r0
70106a24:	f7fc fb08 	bl	70103038 <LL_RCC_PLL3_GetFRACN>
70106a28:	4606      	mov	r6, r0
70106a2a:	f7fc fad1 	bl	70102fd0 <LL_RCC_PLL3_GetP1>
70106a2e:	4604      	mov	r4, r0
70106a30:	f7fc fade 	bl	70102ff0 <LL_RCC_PLL3_GetP2>
70106a34:	4603      	mov	r3, r0
70106a36:	9301      	str	r3, [sp, #4]
70106a38:	9400      	str	r4, [sp, #0]
70106a3a:	4633      	mov	r3, r6
70106a3c:	462a      	mov	r2, r5
70106a3e:	6879      	ldr	r1, [r7, #4]
70106a40:	68b8      	ldr	r0, [r7, #8]
70106a42:	f000 f90b 	bl	70106c5c <RCCEx_CalcPLLFreq>
70106a46:	60f8      	str	r0, [r7, #12]
70106a48:	e00b      	b.n	70106a62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
70106a4a:	f7fc fa8d 	bl	70102f68 <LL_RCC_PLL3_IsEnabledBypass>
70106a4e:	4603      	mov	r3, r0
70106a50:	2b00      	cmp	r3, #0
70106a52:	d006      	beq.n	70106a62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
70106a54:	f7fc fa66 	bl	70102f24 <LL_RCC_PLL3_GetSource>
70106a58:	4603      	mov	r3, r0
70106a5a:	4618      	mov	r0, r3
70106a5c:	f000 f8a0 	bl	70106ba0 <RCCEx_GetPLLSourceFreq>
70106a60:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
70106a62:	68fb      	ldr	r3, [r7, #12]
}
70106a64:	4618      	mov	r0, r3
70106a66:	3714      	adds	r7, #20
70106a68:	46bd      	mov	sp, r7
70106a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

70106a6c <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
70106a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
70106a6e:	b087      	sub	sp, #28
70106a70:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
70106a72:	2300      	movs	r3, #0
70106a74:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
70106a76:	f7fc fafb 	bl	70103070 <LL_RCC_PLL4_IsReady>
70106a7a:	4603      	mov	r3, r0
70106a7c:	2b00      	cmp	r3, #0
70106a7e:	d02a      	beq.n	70106ad6 <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
70106a80:	f7fc fb5e 	bl	70103140 <LL_RCC_PLL4P_IsEnabled>
70106a84:	4603      	mov	r3, r0
70106a86:	2b00      	cmp	r3, #0
70106a88:	d031      	beq.n	70106aee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
70106a8a:	f7fc fae3 	bl	70103054 <LL_RCC_PLL4_GetSource>
70106a8e:	4603      	mov	r3, r0
70106a90:	4618      	mov	r0, r3
70106a92:	f000 f885 	bl	70106ba0 <RCCEx_GetPLLSourceFreq>
70106a96:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
70106a98:	68bb      	ldr	r3, [r7, #8]
70106a9a:	2b00      	cmp	r3, #0
70106a9c:	d027      	beq.n	70106aee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
      {

        divm = LL_RCC_PLL4_GetM();
70106a9e:	f7fc fb1f 	bl	701030e0 <LL_RCC_PLL4_GetM>
70106aa2:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
70106aa4:	687b      	ldr	r3, [r7, #4]
70106aa6:	2b00      	cmp	r3, #0
70106aa8:	d021      	beq.n	70106aee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
70106aaa:	f7fc fb09 	bl	701030c0 <LL_RCC_PLL4_GetN>
70106aae:	4605      	mov	r5, r0
70106ab0:	f7fc fb5a 	bl	70103168 <LL_RCC_PLL4_GetFRACN>
70106ab4:	4606      	mov	r6, r0
70106ab6:	f7fc fb23 	bl	70103100 <LL_RCC_PLL4_GetP1>
70106aba:	4604      	mov	r4, r0
70106abc:	f7fc fb30 	bl	70103120 <LL_RCC_PLL4_GetP2>
70106ac0:	4603      	mov	r3, r0
70106ac2:	9301      	str	r3, [sp, #4]
70106ac4:	9400      	str	r4, [sp, #0]
70106ac6:	4633      	mov	r3, r6
70106ac8:	462a      	mov	r2, r5
70106aca:	6879      	ldr	r1, [r7, #4]
70106acc:	68b8      	ldr	r0, [r7, #8]
70106ace:	f000 f8c5 	bl	70106c5c <RCCEx_CalcPLLFreq>
70106ad2:	60f8      	str	r0, [r7, #12]
70106ad4:	e00b      	b.n	70106aee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
70106ad6:	f7fc fadf 	bl	70103098 <LL_RCC_PLL4_IsEnabledBypass>
70106ada:	4603      	mov	r3, r0
70106adc:	2b00      	cmp	r3, #0
70106ade:	d006      	beq.n	70106aee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
70106ae0:	f7fc fab8 	bl	70103054 <LL_RCC_PLL4_GetSource>
70106ae4:	4603      	mov	r3, r0
70106ae6:	4618      	mov	r0, r3
70106ae8:	f000 f85a 	bl	70106ba0 <RCCEx_GetPLLSourceFreq>
70106aec:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
70106aee:	68fb      	ldr	r3, [r7, #12]
}
70106af0:	4618      	mov	r0, r3
70106af2:	3714      	adds	r7, #20
70106af4:	46bd      	mov	sp, r7
70106af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

70106af8 <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
70106af8:	b580      	push	{r7, lr}
70106afa:	b082      	sub	sp, #8
70106afc:	af00      	add	r7, sp, #0
70106afe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
70106b00:	f7fb fcca 	bl	70102498 <LL_RCC_GetAHBPrescaler>
70106b04:	4603      	mov	r3, r0
70106b06:	0d1b      	lsrs	r3, r3, #20
70106b08:	f003 0307 	and.w	r3, r3, #7
70106b0c:	687a      	ldr	r2, [r7, #4]
70106b0e:	fa22 f303 	lsr.w	r3, r2, r3
}
70106b12:	4618      	mov	r0, r3
70106b14:	3708      	adds	r7, #8
70106b16:	46bd      	mov	sp, r7
70106b18:	bd80      	pop	{r7, pc}

70106b1a <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
70106b1a:	b580      	push	{r7, lr}
70106b1c:	b082      	sub	sp, #8
70106b1e:	af00      	add	r7, sp, #0
70106b20:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
70106b22:	f7fb fcc7 	bl	701024b4 <LL_RCC_GetAPB1Prescaler>
70106b26:	4603      	mov	r3, r0
70106b28:	f003 0307 	and.w	r3, r3, #7
70106b2c:	687a      	ldr	r2, [r7, #4]
70106b2e:	fa22 f303 	lsr.w	r3, r2, r3
}
70106b32:	4618      	mov	r0, r3
70106b34:	3708      	adds	r7, #8
70106b36:	46bd      	mov	sp, r7
70106b38:	bd80      	pop	{r7, pc}

70106b3a <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
70106b3a:	b580      	push	{r7, lr}
70106b3c:	b082      	sub	sp, #8
70106b3e:	af00      	add	r7, sp, #0
70106b40:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
70106b42:	f7fb fcc5 	bl	701024d0 <LL_RCC_GetAPB2Prescaler>
70106b46:	4603      	mov	r3, r0
70106b48:	091b      	lsrs	r3, r3, #4
70106b4a:	f003 0307 	and.w	r3, r3, #7
70106b4e:	687a      	ldr	r2, [r7, #4]
70106b50:	fa22 f303 	lsr.w	r3, r2, r3
}
70106b54:	4618      	mov	r0, r3
70106b56:	3708      	adds	r7, #8
70106b58:	46bd      	mov	sp, r7
70106b5a:	bd80      	pop	{r7, pc}

70106b5c <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
70106b5c:	b580      	push	{r7, lr}
70106b5e:	b082      	sub	sp, #8
70106b60:	af00      	add	r7, sp, #0
70106b62:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
70106b64:	f7fb fcc2 	bl	701024ec <LL_RCC_GetAPB4Prescaler>
70106b68:	4603      	mov	r3, r0
70106b6a:	0b1b      	lsrs	r3, r3, #12
70106b6c:	f003 0307 	and.w	r3, r3, #7
70106b70:	687a      	ldr	r2, [r7, #4]
70106b72:	fa22 f303 	lsr.w	r3, r2, r3
}
70106b76:	4618      	mov	r0, r3
70106b78:	3708      	adds	r7, #8
70106b7a:	46bd      	mov	sp, r7
70106b7c:	bd80      	pop	{r7, pc}

70106b7e <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
70106b7e:	b580      	push	{r7, lr}
70106b80:	b082      	sub	sp, #8
70106b82:	af00      	add	r7, sp, #0
70106b84:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
70106b86:	f7fb fcbf 	bl	70102508 <LL_RCC_GetAPB5Prescaler>
70106b8a:	4603      	mov	r3, r0
70106b8c:	0c1b      	lsrs	r3, r3, #16
70106b8e:	f003 0307 	and.w	r3, r3, #7
70106b92:	687a      	ldr	r2, [r7, #4]
70106b94:	fa22 f303 	lsr.w	r3, r2, r3
}
70106b98:	4618      	mov	r0, r3
70106b9a:	3708      	adds	r7, #8
70106b9c:	46bd      	mov	sp, r7
70106b9e:	bd80      	pop	{r7, pc}

70106ba0 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
70106ba0:	b580      	push	{r7, lr}
70106ba2:	b084      	sub	sp, #16
70106ba4:	af00      	add	r7, sp, #0
70106ba6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
70106ba8:	2300      	movs	r3, #0
70106baa:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
70106bac:	687b      	ldr	r3, [r7, #4]
70106bae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70106bb2:	d039      	beq.n	70106c28 <RCCEx_GetPLLSourceFreq+0x88>
70106bb4:	687b      	ldr	r3, [r7, #4]
70106bb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70106bba:	d838      	bhi.n	70106c2e <RCCEx_GetPLLSourceFreq+0x8e>
70106bbc:	687b      	ldr	r3, [r7, #4]
70106bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70106bc2:	d029      	beq.n	70106c18 <RCCEx_GetPLLSourceFreq+0x78>
70106bc4:	687b      	ldr	r3, [r7, #4]
70106bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70106bca:	d830      	bhi.n	70106c2e <RCCEx_GetPLLSourceFreq+0x8e>
70106bcc:	687b      	ldr	r3, [r7, #4]
70106bce:	2b00      	cmp	r3, #0
70106bd0:	d004      	beq.n	70106bdc <RCCEx_GetPLLSourceFreq+0x3c>
70106bd2:	687b      	ldr	r3, [r7, #4]
70106bd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70106bd8:	d00e      	beq.n	70106bf8 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
70106bda:	e028      	b.n	70106c2e <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
70106bdc:	f7fb fbfc 	bl	701023d8 <LL_RCC_HSI_IsReady>
70106be0:	4603      	mov	r3, r0
70106be2:	2b00      	cmp	r3, #0
70106be4:	d025      	beq.n	70106c32 <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70106be6:	f7fb fc09 	bl	701023fc <LL_RCC_HSI_GetDivider>
70106bea:	4603      	mov	r3, r0
70106bec:	09db      	lsrs	r3, r3, #7
70106bee:	4a16      	ldr	r2, [pc, #88]	@ (70106c48 <RCCEx_GetPLLSourceFreq+0xa8>)
70106bf0:	fa22 f303 	lsr.w	r3, r2, r3
70106bf4:	60fb      	str	r3, [r7, #12]
      break;
70106bf6:	e01c      	b.n	70106c32 <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
70106bf8:	f7fb fc0e 	bl	70102418 <LL_RCC_MSI_IsReady>
70106bfc:	4603      	mov	r3, r0
70106bfe:	2b00      	cmp	r3, #0
70106c00:	d019      	beq.n	70106c36 <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
70106c02:	f7fb fc1b 	bl	7010243c <LL_RCC_MSI_GetFrequency>
70106c06:	4603      	mov	r3, r0
70106c08:	2b00      	cmp	r3, #0
70106c0a:	d102      	bne.n	70106c12 <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
70106c0c:	4b0f      	ldr	r3, [pc, #60]	@ (70106c4c <RCCEx_GetPLLSourceFreq+0xac>)
70106c0e:	60fb      	str	r3, [r7, #12]
      break;
70106c10:	e011      	b.n	70106c36 <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
70106c12:	4b0f      	ldr	r3, [pc, #60]	@ (70106c50 <RCCEx_GetPLLSourceFreq+0xb0>)
70106c14:	60fb      	str	r3, [r7, #12]
      break;
70106c16:	e00e      	b.n	70106c36 <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
70106c18:	f7fb fbcc 	bl	701023b4 <LL_RCC_HSE_IsReady>
70106c1c:	4603      	mov	r3, r0
70106c1e:	2b00      	cmp	r3, #0
70106c20:	d00b      	beq.n	70106c3a <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
70106c22:	4b0c      	ldr	r3, [pc, #48]	@ (70106c54 <RCCEx_GetPLLSourceFreq+0xb4>)
70106c24:	60fb      	str	r3, [r7, #12]
      break;
70106c26:	e008      	b.n	70106c3a <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
70106c28:	4b0b      	ldr	r3, [pc, #44]	@ (70106c58 <RCCEx_GetPLLSourceFreq+0xb8>)
70106c2a:	60fb      	str	r3, [r7, #12]
      break;
70106c2c:	e006      	b.n	70106c3c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
70106c2e:	bf00      	nop
70106c30:	e004      	b.n	70106c3c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
70106c32:	bf00      	nop
70106c34:	e002      	b.n	70106c3c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
70106c36:	bf00      	nop
70106c38:	e000      	b.n	70106c3c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
70106c3a:	bf00      	nop
  }

  return pllinputfreq;
70106c3c:	68fb      	ldr	r3, [r7, #12]
}
70106c3e:	4618      	mov	r0, r3
70106c40:	3710      	adds	r7, #16
70106c42:	46bd      	mov	sp, r7
70106c44:	bd80      	pop	{r7, pc}
70106c46:	bf00      	nop
70106c48:	03d09000 	.word	0x03d09000
70106c4c:	003d0900 	.word	0x003d0900
70106c50:	00f42400 	.word	0x00f42400
70106c54:	016e3600 	.word	0x016e3600
70106c58:	00bb8000 	.word	0x00bb8000

70106c5c <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
70106c5c:	b480      	push	{r7}
70106c5e:	b087      	sub	sp, #28
70106c60:	af00      	add	r7, sp, #0
70106c62:	60f8      	str	r0, [r7, #12]
70106c64:	60b9      	str	r1, [r7, #8]
70106c66:	607a      	str	r2, [r7, #4]
70106c68:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
70106c6a:	68fb      	ldr	r3, [r7, #12]
70106c6c:	ee07 3a90 	vmov	s15, r3
70106c70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
70106c74:	687b      	ldr	r3, [r7, #4]
70106c76:	ee07 3a90 	vmov	s15, r3
70106c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
70106c7e:	683b      	ldr	r3, [r7, #0]
70106c80:	ee07 3a90 	vmov	s15, r3
70106c84:	eeb8 6a67 	vcvt.f32.u32	s12, s15
70106c88:	eddf 5a19 	vldr	s11, [pc, #100]	@ 70106cf0 <RCCEx_CalcPLLFreq+0x94>
70106c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
70106c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
70106c94:	ee67 6a27 	vmul.f32	s13, s14, s15
70106c98:	68bb      	ldr	r3, [r7, #8]
70106c9a:	ee07 3a90 	vmov	s15, r3
70106c9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
70106ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
70106ca6:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
70106caa:	6a3b      	ldr	r3, [r7, #32]
70106cac:	ee07 3a90 	vmov	s15, r3
70106cb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
70106cb4:	edd7 6a05 	vldr	s13, [r7, #20]
70106cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
70106cbc:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
70106cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70106cc2:	ee07 3a90 	vmov	s15, r3
70106cc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
70106cca:	edd7 6a05 	vldr	s13, [r7, #20]
70106cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
70106cd2:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
70106cd6:	edd7 7a05 	vldr	s15, [r7, #20]
70106cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
70106cde:	ee17 3a90 	vmov	r3, s15
}
70106ce2:	4618      	mov	r0, r3
70106ce4:	371c      	adds	r7, #28
70106ce6:	46bd      	mov	sp, r7
70106ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
70106cec:	4770      	bx	lr
70106cee:	bf00      	nop
70106cf0:	4b800000 	.word	0x4b800000

70106cf4 <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
70106cf4:	b590      	push	{r4, r7, lr}
70106cf6:	b085      	sub	sp, #20
70106cf8:	af00      	add	r7, sp, #0
70106cfa:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
70106cfc:	2300      	movs	r3, #0
70106cfe:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
70106d00:	6878      	ldr	r0, [r7, #4]
70106d02:	f7fb fe1f 	bl	70102944 <LL_RCC_GetADCClockSource>
70106d06:	4603      	mov	r3, r0
70106d08:	2b70      	cmp	r3, #112	@ 0x70
70106d0a:	f000 80d1 	beq.w	70106eb0 <RCCEx_GetADCCLKFreq+0x1bc>
70106d0e:	2b70      	cmp	r3, #112	@ 0x70
70106d10:	f200 80d8 	bhi.w	70106ec4 <RCCEx_GetADCCLKFreq+0x1d0>
70106d14:	2b60      	cmp	r3, #96	@ 0x60
70106d16:	f000 80c8 	beq.w	70106eaa <RCCEx_GetADCCLKFreq+0x1b6>
70106d1a:	2b60      	cmp	r3, #96	@ 0x60
70106d1c:	f200 80d2 	bhi.w	70106ec4 <RCCEx_GetADCCLKFreq+0x1d0>
70106d20:	2b50      	cmp	r3, #80	@ 0x50
70106d22:	f000 80ac 	beq.w	70106e7e <RCCEx_GetADCCLKFreq+0x18a>
70106d26:	2b50      	cmp	r3, #80	@ 0x50
70106d28:	f200 80cc 	bhi.w	70106ec4 <RCCEx_GetADCCLKFreq+0x1d0>
70106d2c:	2b40      	cmp	r3, #64	@ 0x40
70106d2e:	f000 80b4 	beq.w	70106e9a <RCCEx_GetADCCLKFreq+0x1a6>
70106d32:	2b40      	cmp	r3, #64	@ 0x40
70106d34:	f200 80c6 	bhi.w	70106ec4 <RCCEx_GetADCCLKFreq+0x1d0>
70106d38:	2b30      	cmp	r3, #48	@ 0x30
70106d3a:	d05d      	beq.n	70106df8 <RCCEx_GetADCCLKFreq+0x104>
70106d3c:	2b30      	cmp	r3, #48	@ 0x30
70106d3e:	f200 80c1 	bhi.w	70106ec4 <RCCEx_GetADCCLKFreq+0x1d0>
70106d42:	2b20      	cmp	r3, #32
70106d44:	d014      	beq.n	70106d70 <RCCEx_GetADCCLKFreq+0x7c>
70106d46:	2b20      	cmp	r3, #32
70106d48:	f200 80bc 	bhi.w	70106ec4 <RCCEx_GetADCCLKFreq+0x1d0>
70106d4c:	2b00      	cmp	r3, #0
70106d4e:	d002      	beq.n	70106d56 <RCCEx_GetADCCLKFreq+0x62>
70106d50:	2b10      	cmp	r3, #16
70106d52:	d008      	beq.n	70106d66 <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
70106d54:	e0b6      	b.n	70106ec4 <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
70106d56:	f7fb fa69 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70106d5a:	4603      	mov	r3, r0
70106d5c:	4618      	mov	r0, r3
70106d5e:	f7ff fecb 	bl	70106af8 <RCCEx_GetHCLKFreq>
70106d62:	60f8      	str	r0, [r7, #12]
      break;
70106d64:	e0b7      	b.n	70106ed6 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70106d66:	2007      	movs	r0, #7
70106d68:	f000 f9b2 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70106d6c:	60f8      	str	r0, [r7, #12]
      break;
70106d6e:	e0b2      	b.n	70106ed6 <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
70106d70:	f7fc fad6 	bl	70103320 <LL_RCC_IC7_IsEnabled>
70106d74:	4603      	mov	r3, r0
70106d76:	2b00      	cmp	r3, #0
70106d78:	f000 80a6 	beq.w	70106ec8 <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
70106d7c:	f7fc faf2 	bl	70103364 <LL_RCC_IC7_GetDivider>
70106d80:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
70106d82:	f7fc fae1 	bl	70103348 <LL_RCC_IC7_GetSource>
70106d86:	4603      	mov	r3, r0
70106d88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70106d8c:	d029      	beq.n	70106de2 <RCCEx_GetADCCLKFreq+0xee>
70106d8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70106d92:	d82f      	bhi.n	70106df4 <RCCEx_GetADCCLKFreq+0x100>
70106d94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70106d98:	d01a      	beq.n	70106dd0 <RCCEx_GetADCCLKFreq+0xdc>
70106d9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70106d9e:	d829      	bhi.n	70106df4 <RCCEx_GetADCCLKFreq+0x100>
70106da0:	2b00      	cmp	r3, #0
70106da2:	d003      	beq.n	70106dac <RCCEx_GetADCCLKFreq+0xb8>
70106da4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70106da8:	d009      	beq.n	70106dbe <RCCEx_GetADCCLKFreq+0xca>
            break;
70106daa:	e023      	b.n	70106df4 <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70106dac:	f7ff fd8c 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70106db0:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
70106db2:	68fa      	ldr	r2, [r7, #12]
70106db4:	68bb      	ldr	r3, [r7, #8]
70106db6:	fbb2 f3f3 	udiv	r3, r2, r3
70106dba:	60fb      	str	r3, [r7, #12]
            break;
70106dbc:	e01b      	b.n	70106df6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70106dbe:	f7ff fdc9 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70106dc2:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
70106dc4:	68fa      	ldr	r2, [r7, #12]
70106dc6:	68bb      	ldr	r3, [r7, #8]
70106dc8:	fbb2 f3f3 	udiv	r3, r2, r3
70106dcc:	60fb      	str	r3, [r7, #12]
            break;
70106dce:	e012      	b.n	70106df6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70106dd0:	f7ff fe06 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70106dd4:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
70106dd6:	68fa      	ldr	r2, [r7, #12]
70106dd8:	68bb      	ldr	r3, [r7, #8]
70106dda:	fbb2 f3f3 	udiv	r3, r2, r3
70106dde:	60fb      	str	r3, [r7, #12]
            break;
70106de0:	e009      	b.n	70106df6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70106de2:	f7ff fe43 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70106de6:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
70106de8:	68fa      	ldr	r2, [r7, #12]
70106dea:	68bb      	ldr	r3, [r7, #8]
70106dec:	fbb2 f3f3 	udiv	r3, r2, r3
70106df0:	60fb      	str	r3, [r7, #12]
            break;
70106df2:	e000      	b.n	70106df6 <RCCEx_GetADCCLKFreq+0x102>
            break;
70106df4:	bf00      	nop
      break;
70106df6:	e067      	b.n	70106ec8 <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
70106df8:	f7fc fad2 	bl	701033a0 <LL_RCC_IC8_IsEnabled>
70106dfc:	4603      	mov	r3, r0
70106dfe:	2b00      	cmp	r3, #0
70106e00:	d064      	beq.n	70106ecc <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
70106e02:	f7fc faef 	bl	701033e4 <LL_RCC_IC8_GetDivider>
70106e06:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
70106e08:	f7fc fade 	bl	701033c8 <LL_RCC_IC8_GetSource>
70106e0c:	4603      	mov	r3, r0
70106e0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70106e12:	d029      	beq.n	70106e68 <RCCEx_GetADCCLKFreq+0x174>
70106e14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70106e18:	d82f      	bhi.n	70106e7a <RCCEx_GetADCCLKFreq+0x186>
70106e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70106e1e:	d01a      	beq.n	70106e56 <RCCEx_GetADCCLKFreq+0x162>
70106e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70106e24:	d829      	bhi.n	70106e7a <RCCEx_GetADCCLKFreq+0x186>
70106e26:	2b00      	cmp	r3, #0
70106e28:	d003      	beq.n	70106e32 <RCCEx_GetADCCLKFreq+0x13e>
70106e2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70106e2e:	d009      	beq.n	70106e44 <RCCEx_GetADCCLKFreq+0x150>
            break;
70106e30:	e023      	b.n	70106e7a <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70106e32:	f7ff fd49 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70106e36:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
70106e38:	68fa      	ldr	r2, [r7, #12]
70106e3a:	68bb      	ldr	r3, [r7, #8]
70106e3c:	fbb2 f3f3 	udiv	r3, r2, r3
70106e40:	60fb      	str	r3, [r7, #12]
            break;
70106e42:	e01b      	b.n	70106e7c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70106e44:	f7ff fd86 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70106e48:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
70106e4a:	68fa      	ldr	r2, [r7, #12]
70106e4c:	68bb      	ldr	r3, [r7, #8]
70106e4e:	fbb2 f3f3 	udiv	r3, r2, r3
70106e52:	60fb      	str	r3, [r7, #12]
            break;
70106e54:	e012      	b.n	70106e7c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70106e56:	f7ff fdc3 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70106e5a:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
70106e5c:	68fa      	ldr	r2, [r7, #12]
70106e5e:	68bb      	ldr	r3, [r7, #8]
70106e60:	fbb2 f3f3 	udiv	r3, r2, r3
70106e64:	60fb      	str	r3, [r7, #12]
            break;
70106e66:	e009      	b.n	70106e7c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70106e68:	f7ff fe00 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70106e6c:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
70106e6e:	68fa      	ldr	r2, [r7, #12]
70106e70:	68bb      	ldr	r3, [r7, #8]
70106e72:	fbb2 f3f3 	udiv	r3, r2, r3
70106e76:	60fb      	str	r3, [r7, #12]
            break;
70106e78:	e000      	b.n	70106e7c <RCCEx_GetADCCLKFreq+0x188>
            break;
70106e7a:	bf00      	nop
      break;
70106e7c:	e026      	b.n	70106ecc <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
70106e7e:	f7fb faab 	bl	701023d8 <LL_RCC_HSI_IsReady>
70106e82:	4603      	mov	r3, r0
70106e84:	2b00      	cmp	r3, #0
70106e86:	d023      	beq.n	70106ed0 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70106e88:	f7fb fab8 	bl	701023fc <LL_RCC_HSI_GetDivider>
70106e8c:	4603      	mov	r3, r0
70106e8e:	09db      	lsrs	r3, r3, #7
70106e90:	4a16      	ldr	r2, [pc, #88]	@ (70106eec <RCCEx_GetADCCLKFreq+0x1f8>)
70106e92:	fa22 f303 	lsr.w	r3, r2, r3
70106e96:	60fb      	str	r3, [r7, #12]
      break;
70106e98:	e01a      	b.n	70106ed0 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
70106e9a:	f7fb fabd 	bl	70102418 <LL_RCC_MSI_IsReady>
70106e9e:	4603      	mov	r3, r0
70106ea0:	2b00      	cmp	r3, #0
70106ea2:	d017      	beq.n	70106ed4 <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
70106ea4:	4b12      	ldr	r3, [pc, #72]	@ (70106ef0 <RCCEx_GetADCCLKFreq+0x1fc>)
70106ea6:	60fb      	str	r3, [r7, #12]
      break;
70106ea8:	e014      	b.n	70106ed4 <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
70106eaa:	4b12      	ldr	r3, [pc, #72]	@ (70106ef4 <RCCEx_GetADCCLKFreq+0x200>)
70106eac:	60fb      	str	r3, [r7, #12]
      break;
70106eae:	e012      	b.n	70106ed6 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
70106eb0:	f7fb f9bc 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70106eb4:	4604      	mov	r4, r0
70106eb6:	f7fb fef7 	bl	70102ca8 <LL_RCC_GetTIMPrescaler>
70106eba:	4603      	mov	r3, r0
70106ebc:	fa24 f303 	lsr.w	r3, r4, r3
70106ec0:	60fb      	str	r3, [r7, #12]
      break;
70106ec2:	e008      	b.n	70106ed6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
70106ec4:	bf00      	nop
70106ec6:	e006      	b.n	70106ed6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
70106ec8:	bf00      	nop
70106eca:	e004      	b.n	70106ed6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
70106ecc:	bf00      	nop
70106ece:	e002      	b.n	70106ed6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
70106ed0:	bf00      	nop
70106ed2:	e000      	b.n	70106ed6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
70106ed4:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
70106ed6:	f7fb fb4f 	bl	70102578 <LL_RCC_GetADCPrescaler>
70106eda:	4603      	mov	r3, r0
70106edc:	3301      	adds	r3, #1
70106ede:	68fa      	ldr	r2, [r7, #12]
70106ee0:	fbb2 f3f3 	udiv	r3, r2, r3
}
70106ee4:	4618      	mov	r0, r3
70106ee6:	3714      	adds	r7, #20
70106ee8:	46bd      	mov	sp, r7
70106eea:	bd90      	pop	{r4, r7, pc}
70106eec:	03d09000 	.word	0x03d09000
70106ef0:	003d0900 	.word	0x003d0900
70106ef4:	00bb8000 	.word	0x00bb8000

70106ef8 <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
70106ef8:	b590      	push	{r4, r7, lr}
70106efa:	b085      	sub	sp, #20
70106efc:	af00      	add	r7, sp, #0
70106efe:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
70106f00:	2300      	movs	r3, #0
70106f02:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
70106f04:	6878      	ldr	r0, [r7, #4]
70106f06:	f7fb fd2f 	bl	70102968 <LL_RCC_GetADFClockSource>
70106f0a:	4603      	mov	r3, r0
70106f0c:	2b07      	cmp	r3, #7
70106f0e:	f200 80ca 	bhi.w	701070a6 <RCCEx_GetADFCLKFreq+0x1ae>
70106f12:	a201      	add	r2, pc, #4	@ (adr r2, 70106f18 <RCCEx_GetADFCLKFreq+0x20>)
70106f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70106f18:	70106f39 	.word	0x70106f39
70106f1c:	70106f49 	.word	0x70106f49
70106f20:	70106f53 	.word	0x70106f53
70106f24:	70106fdb 	.word	0x70106fdb
70106f28:	7010707d 	.word	0x7010707d
70106f2c:	70107061 	.word	0x70107061
70106f30:	7010708d 	.word	0x7010708d
70106f34:	70107093 	.word	0x70107093
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
70106f38:	f7fb f978 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70106f3c:	4603      	mov	r3, r0
70106f3e:	4618      	mov	r0, r3
70106f40:	f7ff fdda 	bl	70106af8 <RCCEx_GetHCLKFreq>
70106f44:	60f8      	str	r0, [r7, #12]
      break;
70106f46:	e0b7      	b.n	701070b8 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70106f48:	2007      	movs	r0, #7
70106f4a:	f000 f8c1 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70106f4e:	60f8      	str	r0, [r7, #12]
      break;
70106f50:	e0b2      	b.n	701070b8 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
70106f52:	f7fc f9e5 	bl	70103320 <LL_RCC_IC7_IsEnabled>
70106f56:	4603      	mov	r3, r0
70106f58:	2b00      	cmp	r3, #0
70106f5a:	f000 80a6 	beq.w	701070aa <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
70106f5e:	f7fc fa01 	bl	70103364 <LL_RCC_IC7_GetDivider>
70106f62:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
70106f64:	f7fc f9f0 	bl	70103348 <LL_RCC_IC7_GetSource>
70106f68:	4603      	mov	r3, r0
70106f6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70106f6e:	d029      	beq.n	70106fc4 <RCCEx_GetADFCLKFreq+0xcc>
70106f70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70106f74:	d82f      	bhi.n	70106fd6 <RCCEx_GetADFCLKFreq+0xde>
70106f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70106f7a:	d01a      	beq.n	70106fb2 <RCCEx_GetADFCLKFreq+0xba>
70106f7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70106f80:	d829      	bhi.n	70106fd6 <RCCEx_GetADFCLKFreq+0xde>
70106f82:	2b00      	cmp	r3, #0
70106f84:	d003      	beq.n	70106f8e <RCCEx_GetADFCLKFreq+0x96>
70106f86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70106f8a:	d009      	beq.n	70106fa0 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70106f8c:	e023      	b.n	70106fd6 <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70106f8e:	f7ff fc9b 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70106f92:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
70106f94:	68fa      	ldr	r2, [r7, #12]
70106f96:	68bb      	ldr	r3, [r7, #8]
70106f98:	fbb2 f3f3 	udiv	r3, r2, r3
70106f9c:	60fb      	str	r3, [r7, #12]
            break;
70106f9e:	e01b      	b.n	70106fd8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70106fa0:	f7ff fcd8 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70106fa4:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
70106fa6:	68fa      	ldr	r2, [r7, #12]
70106fa8:	68bb      	ldr	r3, [r7, #8]
70106faa:	fbb2 f3f3 	udiv	r3, r2, r3
70106fae:	60fb      	str	r3, [r7, #12]
            break;
70106fb0:	e012      	b.n	70106fd8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70106fb2:	f7ff fd15 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70106fb6:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
70106fb8:	68fa      	ldr	r2, [r7, #12]
70106fba:	68bb      	ldr	r3, [r7, #8]
70106fbc:	fbb2 f3f3 	udiv	r3, r2, r3
70106fc0:	60fb      	str	r3, [r7, #12]
            break;
70106fc2:	e009      	b.n	70106fd8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70106fc4:	f7ff fd52 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70106fc8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
70106fca:	68fa      	ldr	r2, [r7, #12]
70106fcc:	68bb      	ldr	r3, [r7, #8]
70106fce:	fbb2 f3f3 	udiv	r3, r2, r3
70106fd2:	60fb      	str	r3, [r7, #12]
            break;
70106fd4:	e000      	b.n	70106fd8 <RCCEx_GetADFCLKFreq+0xe0>
            break;
70106fd6:	bf00      	nop
        }
      }
      break;
70106fd8:	e067      	b.n	701070aa <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
70106fda:	f7fc f9e1 	bl	701033a0 <LL_RCC_IC8_IsEnabled>
70106fde:	4603      	mov	r3, r0
70106fe0:	2b00      	cmp	r3, #0
70106fe2:	d064      	beq.n	701070ae <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
70106fe4:	f7fc f9fe 	bl	701033e4 <LL_RCC_IC8_GetDivider>
70106fe8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
70106fea:	f7fc f9ed 	bl	701033c8 <LL_RCC_IC8_GetSource>
70106fee:	4603      	mov	r3, r0
70106ff0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70106ff4:	d029      	beq.n	7010704a <RCCEx_GetADFCLKFreq+0x152>
70106ff6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70106ffa:	d82f      	bhi.n	7010705c <RCCEx_GetADFCLKFreq+0x164>
70106ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107000:	d01a      	beq.n	70107038 <RCCEx_GetADFCLKFreq+0x140>
70107002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107006:	d829      	bhi.n	7010705c <RCCEx_GetADFCLKFreq+0x164>
70107008:	2b00      	cmp	r3, #0
7010700a:	d003      	beq.n	70107014 <RCCEx_GetADFCLKFreq+0x11c>
7010700c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70107010:	d009      	beq.n	70107026 <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70107012:	e023      	b.n	7010705c <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70107014:	f7ff fc58 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70107018:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
7010701a:	68fa      	ldr	r2, [r7, #12]
7010701c:	68bb      	ldr	r3, [r7, #8]
7010701e:	fbb2 f3f3 	udiv	r3, r2, r3
70107022:	60fb      	str	r3, [r7, #12]
            break;
70107024:	e01b      	b.n	7010705e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70107026:	f7ff fc95 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
7010702a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
7010702c:	68fa      	ldr	r2, [r7, #12]
7010702e:	68bb      	ldr	r3, [r7, #8]
70107030:	fbb2 f3f3 	udiv	r3, r2, r3
70107034:	60fb      	str	r3, [r7, #12]
            break;
70107036:	e012      	b.n	7010705e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70107038:	f7ff fcd2 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010703c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
7010703e:	68fa      	ldr	r2, [r7, #12]
70107040:	68bb      	ldr	r3, [r7, #8]
70107042:	fbb2 f3f3 	udiv	r3, r2, r3
70107046:	60fb      	str	r3, [r7, #12]
            break;
70107048:	e009      	b.n	7010705e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
7010704a:	f7ff fd0f 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
7010704e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
70107050:	68fa      	ldr	r2, [r7, #12]
70107052:	68bb      	ldr	r3, [r7, #8]
70107054:	fbb2 f3f3 	udiv	r3, r2, r3
70107058:	60fb      	str	r3, [r7, #12]
            break;
7010705a:	e000      	b.n	7010705e <RCCEx_GetADFCLKFreq+0x166>
            break;
7010705c:	bf00      	nop
        }
      }
      break;
7010705e:	e026      	b.n	701070ae <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
70107060:	f7fb f9ba 	bl	701023d8 <LL_RCC_HSI_IsReady>
70107064:	4603      	mov	r3, r0
70107066:	2b00      	cmp	r3, #0
70107068:	d023      	beq.n	701070b2 <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
7010706a:	f7fb f9c7 	bl	701023fc <LL_RCC_HSI_GetDivider>
7010706e:	4603      	mov	r3, r0
70107070:	09db      	lsrs	r3, r3, #7
70107072:	4a14      	ldr	r2, [pc, #80]	@ (701070c4 <RCCEx_GetADFCLKFreq+0x1cc>)
70107074:	fa22 f303 	lsr.w	r3, r2, r3
70107078:	60fb      	str	r3, [r7, #12]
      }
      break;
7010707a:	e01a      	b.n	701070b2 <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
7010707c:	f7fb f9cc 	bl	70102418 <LL_RCC_MSI_IsReady>
70107080:	4603      	mov	r3, r0
70107082:	2b00      	cmp	r3, #0
70107084:	d017      	beq.n	701070b6 <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
70107086:	4b10      	ldr	r3, [pc, #64]	@ (701070c8 <RCCEx_GetADFCLKFreq+0x1d0>)
70107088:	60fb      	str	r3, [r7, #12]
      }
      break;
7010708a:	e014      	b.n	701070b6 <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
7010708c:	4b0f      	ldr	r3, [pc, #60]	@ (701070cc <RCCEx_GetADFCLKFreq+0x1d4>)
7010708e:	60fb      	str	r3, [r7, #12]
      break;
70107090:	e012      	b.n	701070b8 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
70107092:	f7fb f8cb 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70107096:	4604      	mov	r4, r0
70107098:	f7fb fe06 	bl	70102ca8 <LL_RCC_GetTIMPrescaler>
7010709c:	4603      	mov	r3, r0
7010709e:	fa24 f303 	lsr.w	r3, r4, r3
701070a2:	60fb      	str	r3, [r7, #12]
      break;
701070a4:	e008      	b.n	701070b8 <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
701070a6:	bf00      	nop
701070a8:	e006      	b.n	701070b8 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
701070aa:	bf00      	nop
701070ac:	e004      	b.n	701070b8 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
701070ae:	bf00      	nop
701070b0:	e002      	b.n	701070b8 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
701070b2:	bf00      	nop
701070b4:	e000      	b.n	701070b8 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
701070b6:	bf00      	nop
  }

  return adf_frequency;
701070b8:	68fb      	ldr	r3, [r7, #12]
}
701070ba:	4618      	mov	r0, r3
701070bc:	3714      	adds	r7, #20
701070be:	46bd      	mov	sp, r7
701070c0:	bd90      	pop	{r4, r7, pc}
701070c2:	bf00      	nop
701070c4:	03d09000 	.word	0x03d09000
701070c8:	003d0900 	.word	0x003d0900
701070cc:	00bb8000 	.word	0x00bb8000

701070d0 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
701070d0:	b580      	push	{r7, lr}
701070d2:	b084      	sub	sp, #16
701070d4:	af00      	add	r7, sp, #0
701070d6:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
701070d8:	2300      	movs	r3, #0
701070da:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
701070dc:	f7fc fc60 	bl	701039a0 <LL_RCC_CLKP_IsEnabled>
701070e0:	4603      	mov	r3, r0
701070e2:	2b01      	cmp	r3, #1
701070e4:	f040 81a5 	bne.w	70107432 <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
701070e8:	6878      	ldr	r0, [r7, #4]
701070ea:	f7fb fc4f 	bl	7010298c <LL_RCC_GetCLKPClockSource>
701070ee:	4603      	mov	r3, r0
701070f0:	2b07      	cmp	r3, #7
701070f2:	f200 818d 	bhi.w	70107410 <RCCEx_GetCLKPCLKFreq+0x340>
701070f6:	a201      	add	r2, pc, #4	@ (adr r2, 701070fc <RCCEx_GetCLKPCLKFreq+0x2c>)
701070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
701070fc:	7010711d 	.word	0x7010711d
70107100:	7010713b 	.word	0x7010713b
70107104:	7010714d 	.word	0x7010714d
70107108:	701072f7 	.word	0x701072f7
7010710c:	7010715f 	.word	0x7010715f
70107110:	701071e7 	.word	0x701071e7
70107114:	7010726f 	.word	0x7010726f
70107118:	7010737f 	.word	0x7010737f
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
7010711c:	f7fb f95c 	bl	701023d8 <LL_RCC_HSI_IsReady>
70107120:	4603      	mov	r3, r0
70107122:	2b00      	cmp	r3, #0
70107124:	f000 8176 	beq.w	70107414 <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70107128:	f7fb f968 	bl	701023fc <LL_RCC_HSI_GetDivider>
7010712c:	4603      	mov	r3, r0
7010712e:	09db      	lsrs	r3, r3, #7
70107130:	4aa1      	ldr	r2, [pc, #644]	@ (701073b8 <RCCEx_GetCLKPCLKFreq+0x2e8>)
70107132:	fa22 f303 	lsr.w	r3, r2, r3
70107136:	60fb      	str	r3, [r7, #12]
        }
        break;
70107138:	e16c      	b.n	70107414 <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
7010713a:	f7fb f96d 	bl	70102418 <LL_RCC_MSI_IsReady>
7010713e:	4603      	mov	r3, r0
70107140:	2b00      	cmp	r3, #0
70107142:	f000 8169 	beq.w	70107418 <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
70107146:	4b9d      	ldr	r3, [pc, #628]	@ (701073bc <RCCEx_GetCLKPCLKFreq+0x2ec>)
70107148:	60fb      	str	r3, [r7, #12]
        }
        break;
7010714a:	e165      	b.n	70107418 <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
7010714c:	f7fb f932 	bl	701023b4 <LL_RCC_HSE_IsReady>
70107150:	4603      	mov	r3, r0
70107152:	2b00      	cmp	r3, #0
70107154:	f000 8162 	beq.w	7010741c <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
70107158:	4b99      	ldr	r3, [pc, #612]	@ (701073c0 <RCCEx_GetCLKPCLKFreq+0x2f0>)
7010715a:	60fb      	str	r3, [r7, #12]
        }
        break;
7010715c:	e15e      	b.n	7010741c <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
7010715e:	f7fc f89f 	bl	701032a0 <LL_RCC_IC5_IsEnabled>
70107162:	4603      	mov	r3, r0
70107164:	2b00      	cmp	r3, #0
70107166:	f000 815b 	beq.w	70107420 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
7010716a:	f7fc f8bb 	bl	701032e4 <LL_RCC_IC5_GetDivider>
7010716e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
70107170:	f7fc f8aa 	bl	701032c8 <LL_RCC_IC5_GetSource>
70107174:	4603      	mov	r3, r0
70107176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010717a:	d029      	beq.n	701071d0 <RCCEx_GetCLKPCLKFreq+0x100>
7010717c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107180:	d82f      	bhi.n	701071e2 <RCCEx_GetCLKPCLKFreq+0x112>
70107182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107186:	d01a      	beq.n	701071be <RCCEx_GetCLKPCLKFreq+0xee>
70107188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010718c:	d829      	bhi.n	701071e2 <RCCEx_GetCLKPCLKFreq+0x112>
7010718e:	2b00      	cmp	r3, #0
70107190:	d003      	beq.n	7010719a <RCCEx_GetCLKPCLKFreq+0xca>
70107192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70107196:	d009      	beq.n	701071ac <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
70107198:	e023      	b.n	701071e2 <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
7010719a:	f7ff fb95 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
7010719e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
701071a0:	68fa      	ldr	r2, [r7, #12]
701071a2:	68bb      	ldr	r3, [r7, #8]
701071a4:	fbb2 f3f3 	udiv	r3, r2, r3
701071a8:	60fb      	str	r3, [r7, #12]
              break;
701071aa:	e01b      	b.n	701071e4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
701071ac:	f7ff fbd2 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
701071b0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
701071b2:	68fa      	ldr	r2, [r7, #12]
701071b4:	68bb      	ldr	r3, [r7, #8]
701071b6:	fbb2 f3f3 	udiv	r3, r2, r3
701071ba:	60fb      	str	r3, [r7, #12]
              break;
701071bc:	e012      	b.n	701071e4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
701071be:	f7ff fc0f 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
701071c2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
701071c4:	68fa      	ldr	r2, [r7, #12]
701071c6:	68bb      	ldr	r3, [r7, #8]
701071c8:	fbb2 f3f3 	udiv	r3, r2, r3
701071cc:	60fb      	str	r3, [r7, #12]
              break;
701071ce:	e009      	b.n	701071e4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
701071d0:	f7ff fc4c 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701071d4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
701071d6:	68fa      	ldr	r2, [r7, #12]
701071d8:	68bb      	ldr	r3, [r7, #8]
701071da:	fbb2 f3f3 	udiv	r3, r2, r3
701071de:	60fb      	str	r3, [r7, #12]
              break;
701071e0:	e000      	b.n	701071e4 <RCCEx_GetCLKPCLKFreq+0x114>
              break;
701071e2:	bf00      	nop
          }
        }
        break;
701071e4:	e11c      	b.n	70107420 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
701071e6:	f7fc f95b 	bl	701034a0 <LL_RCC_IC10_IsEnabled>
701071ea:	4603      	mov	r3, r0
701071ec:	2b00      	cmp	r3, #0
701071ee:	f000 8119 	beq.w	70107424 <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
701071f2:	f7fc f977 	bl	701034e4 <LL_RCC_IC10_GetDivider>
701071f6:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
701071f8:	f7fc f966 	bl	701034c8 <LL_RCC_IC10_GetSource>
701071fc:	4603      	mov	r3, r0
701071fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107202:	d029      	beq.n	70107258 <RCCEx_GetCLKPCLKFreq+0x188>
70107204:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107208:	d82f      	bhi.n	7010726a <RCCEx_GetCLKPCLKFreq+0x19a>
7010720a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010720e:	d01a      	beq.n	70107246 <RCCEx_GetCLKPCLKFreq+0x176>
70107210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107214:	d829      	bhi.n	7010726a <RCCEx_GetCLKPCLKFreq+0x19a>
70107216:	2b00      	cmp	r3, #0
70107218:	d003      	beq.n	70107222 <RCCEx_GetCLKPCLKFreq+0x152>
7010721a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
7010721e:	d009      	beq.n	70107234 <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
70107220:	e023      	b.n	7010726a <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70107222:	f7ff fb51 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70107226:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
70107228:	68fa      	ldr	r2, [r7, #12]
7010722a:	68bb      	ldr	r3, [r7, #8]
7010722c:	fbb2 f3f3 	udiv	r3, r2, r3
70107230:	60fb      	str	r3, [r7, #12]
              break;
70107232:	e01b      	b.n	7010726c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70107234:	f7ff fb8e 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70107238:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
7010723a:	68fa      	ldr	r2, [r7, #12]
7010723c:	68bb      	ldr	r3, [r7, #8]
7010723e:	fbb2 f3f3 	udiv	r3, r2, r3
70107242:	60fb      	str	r3, [r7, #12]
              break;
70107244:	e012      	b.n	7010726c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70107246:	f7ff fbcb 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010724a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
7010724c:	68fa      	ldr	r2, [r7, #12]
7010724e:	68bb      	ldr	r3, [r7, #8]
70107250:	fbb2 f3f3 	udiv	r3, r2, r3
70107254:	60fb      	str	r3, [r7, #12]
              break;
70107256:	e009      	b.n	7010726c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70107258:	f7ff fc08 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
7010725c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
7010725e:	68fa      	ldr	r2, [r7, #12]
70107260:	68bb      	ldr	r3, [r7, #8]
70107262:	fbb2 f3f3 	udiv	r3, r2, r3
70107266:	60fb      	str	r3, [r7, #12]
              break;
70107268:	e000      	b.n	7010726c <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
7010726a:	bf00      	nop
          }
        }
        break;
7010726c:	e0da      	b.n	70107424 <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
7010726e:	f7fc fa17 	bl	701036a0 <LL_RCC_IC15_IsEnabled>
70107272:	4603      	mov	r3, r0
70107274:	2b00      	cmp	r3, #0
70107276:	f000 80d7 	beq.w	70107428 <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
7010727a:	f7fc fa33 	bl	701036e4 <LL_RCC_IC15_GetDivider>
7010727e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
70107280:	f7fc fa22 	bl	701036c8 <LL_RCC_IC15_GetSource>
70107284:	4603      	mov	r3, r0
70107286:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010728a:	d029      	beq.n	701072e0 <RCCEx_GetCLKPCLKFreq+0x210>
7010728c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107290:	d82f      	bhi.n	701072f2 <RCCEx_GetCLKPCLKFreq+0x222>
70107292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107296:	d01a      	beq.n	701072ce <RCCEx_GetCLKPCLKFreq+0x1fe>
70107298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010729c:	d829      	bhi.n	701072f2 <RCCEx_GetCLKPCLKFreq+0x222>
7010729e:	2b00      	cmp	r3, #0
701072a0:	d003      	beq.n	701072aa <RCCEx_GetCLKPCLKFreq+0x1da>
701072a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
701072a6:	d009      	beq.n	701072bc <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
701072a8:	e023      	b.n	701072f2 <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
701072aa:	f7ff fb0d 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
701072ae:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
701072b0:	68fa      	ldr	r2, [r7, #12]
701072b2:	68bb      	ldr	r3, [r7, #8]
701072b4:	fbb2 f3f3 	udiv	r3, r2, r3
701072b8:	60fb      	str	r3, [r7, #12]
              break;
701072ba:	e01b      	b.n	701072f4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
701072bc:	f7ff fb4a 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
701072c0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
701072c2:	68fa      	ldr	r2, [r7, #12]
701072c4:	68bb      	ldr	r3, [r7, #8]
701072c6:	fbb2 f3f3 	udiv	r3, r2, r3
701072ca:	60fb      	str	r3, [r7, #12]
              break;
701072cc:	e012      	b.n	701072f4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
701072ce:	f7ff fb87 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
701072d2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
701072d4:	68fa      	ldr	r2, [r7, #12]
701072d6:	68bb      	ldr	r3, [r7, #8]
701072d8:	fbb2 f3f3 	udiv	r3, r2, r3
701072dc:	60fb      	str	r3, [r7, #12]
              break;
701072de:	e009      	b.n	701072f4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
701072e0:	f7ff fbc4 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701072e4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
701072e6:	68fa      	ldr	r2, [r7, #12]
701072e8:	68bb      	ldr	r3, [r7, #8]
701072ea:	fbb2 f3f3 	udiv	r3, r2, r3
701072ee:	60fb      	str	r3, [r7, #12]
              break;
701072f0:	e000      	b.n	701072f4 <RCCEx_GetCLKPCLKFreq+0x224>
              break;
701072f2:	bf00      	nop
          }
        }
        break;
701072f4:	e098      	b.n	70107428 <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
701072f6:	f7fc fad3 	bl	701038a0 <LL_RCC_IC19_IsEnabled>
701072fa:	4603      	mov	r3, r0
701072fc:	2b00      	cmp	r3, #0
701072fe:	f000 8095 	beq.w	7010742c <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
70107302:	f7fc faef 	bl	701038e4 <LL_RCC_IC19_GetDivider>
70107306:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
70107308:	f7fc fade 	bl	701038c8 <LL_RCC_IC19_GetSource>
7010730c:	4603      	mov	r3, r0
7010730e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107312:	d029      	beq.n	70107368 <RCCEx_GetCLKPCLKFreq+0x298>
70107314:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107318:	d82f      	bhi.n	7010737a <RCCEx_GetCLKPCLKFreq+0x2aa>
7010731a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010731e:	d01a      	beq.n	70107356 <RCCEx_GetCLKPCLKFreq+0x286>
70107320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107324:	d829      	bhi.n	7010737a <RCCEx_GetCLKPCLKFreq+0x2aa>
70107326:	2b00      	cmp	r3, #0
70107328:	d003      	beq.n	70107332 <RCCEx_GetCLKPCLKFreq+0x262>
7010732a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
7010732e:	d009      	beq.n	70107344 <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
70107330:	e023      	b.n	7010737a <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70107332:	f7ff fac9 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70107336:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
70107338:	68fa      	ldr	r2, [r7, #12]
7010733a:	68bb      	ldr	r3, [r7, #8]
7010733c:	fbb2 f3f3 	udiv	r3, r2, r3
70107340:	60fb      	str	r3, [r7, #12]
              break;
70107342:	e01b      	b.n	7010737c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70107344:	f7ff fb06 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70107348:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
7010734a:	68fa      	ldr	r2, [r7, #12]
7010734c:	68bb      	ldr	r3, [r7, #8]
7010734e:	fbb2 f3f3 	udiv	r3, r2, r3
70107352:	60fb      	str	r3, [r7, #12]
              break;
70107354:	e012      	b.n	7010737c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70107356:	f7ff fb43 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010735a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
7010735c:	68fa      	ldr	r2, [r7, #12]
7010735e:	68bb      	ldr	r3, [r7, #8]
70107360:	fbb2 f3f3 	udiv	r3, r2, r3
70107364:	60fb      	str	r3, [r7, #12]
              break;
70107366:	e009      	b.n	7010737c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70107368:	f7ff fb80 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
7010736c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
7010736e:	68fa      	ldr	r2, [r7, #12]
70107370:	68bb      	ldr	r3, [r7, #8]
70107372:	fbb2 f3f3 	udiv	r3, r2, r3
70107376:	60fb      	str	r3, [r7, #12]
              break;
70107378:	e000      	b.n	7010737c <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
7010737a:	bf00      	nop
          }
        }
        break;
7010737c:	e056      	b.n	7010742c <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
7010737e:	f7fc facf 	bl	70103920 <LL_RCC_IC20_IsEnabled>
70107382:	4603      	mov	r3, r0
70107384:	2b00      	cmp	r3, #0
70107386:	d053      	beq.n	70107430 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
70107388:	f7fc faec 	bl	70103964 <LL_RCC_IC20_GetDivider>
7010738c:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
7010738e:	f7fc fadb 	bl	70103948 <LL_RCC_IC20_GetSource>
70107392:	4603      	mov	r3, r0
70107394:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107398:	d02f      	beq.n	701073fa <RCCEx_GetCLKPCLKFreq+0x32a>
7010739a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010739e:	d835      	bhi.n	7010740c <RCCEx_GetCLKPCLKFreq+0x33c>
701073a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701073a4:	d020      	beq.n	701073e8 <RCCEx_GetCLKPCLKFreq+0x318>
701073a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701073aa:	d82f      	bhi.n	7010740c <RCCEx_GetCLKPCLKFreq+0x33c>
701073ac:	2b00      	cmp	r3, #0
701073ae:	d009      	beq.n	701073c4 <RCCEx_GetCLKPCLKFreq+0x2f4>
701073b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
701073b4:	d00f      	beq.n	701073d6 <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
701073b6:	e029      	b.n	7010740c <RCCEx_GetCLKPCLKFreq+0x33c>
701073b8:	03d09000 	.word	0x03d09000
701073bc:	003d0900 	.word	0x003d0900
701073c0:	016e3600 	.word	0x016e3600
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
701073c4:	f7ff fa80 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
701073c8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
701073ca:	68fa      	ldr	r2, [r7, #12]
701073cc:	68bb      	ldr	r3, [r7, #8]
701073ce:	fbb2 f3f3 	udiv	r3, r2, r3
701073d2:	60fb      	str	r3, [r7, #12]
              break;
701073d4:	e01b      	b.n	7010740e <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
701073d6:	f7ff fabd 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
701073da:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
701073dc:	68fa      	ldr	r2, [r7, #12]
701073de:	68bb      	ldr	r3, [r7, #8]
701073e0:	fbb2 f3f3 	udiv	r3, r2, r3
701073e4:	60fb      	str	r3, [r7, #12]
              break;
701073e6:	e012      	b.n	7010740e <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
701073e8:	f7ff fafa 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
701073ec:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
701073ee:	68fa      	ldr	r2, [r7, #12]
701073f0:	68bb      	ldr	r3, [r7, #8]
701073f2:	fbb2 f3f3 	udiv	r3, r2, r3
701073f6:	60fb      	str	r3, [r7, #12]
              break;
701073f8:	e009      	b.n	7010740e <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
701073fa:	f7ff fb37 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701073fe:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
70107400:	68fa      	ldr	r2, [r7, #12]
70107402:	68bb      	ldr	r3, [r7, #8]
70107404:	fbb2 f3f3 	udiv	r3, r2, r3
70107408:	60fb      	str	r3, [r7, #12]
              break;
7010740a:	e000      	b.n	7010740e <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
7010740c:	bf00      	nop
          }
        }
        break;
7010740e:	e00f      	b.n	70107430 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
70107410:	bf00      	nop
70107412:	e00e      	b.n	70107432 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
70107414:	bf00      	nop
70107416:	e00c      	b.n	70107432 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
70107418:	bf00      	nop
7010741a:	e00a      	b.n	70107432 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
7010741c:	bf00      	nop
7010741e:	e008      	b.n	70107432 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
70107420:	bf00      	nop
70107422:	e006      	b.n	70107432 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
70107424:	bf00      	nop
70107426:	e004      	b.n	70107432 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
70107428:	bf00      	nop
7010742a:	e002      	b.n	70107432 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
7010742c:	bf00      	nop
7010742e:	e000      	b.n	70107432 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
70107430:	bf00      	nop
    }
  }

  return clkp_frequency;
70107432:	68fb      	ldr	r3, [r7, #12]
}
70107434:	4618      	mov	r0, r3
70107436:	3710      	adds	r7, #16
70107438:	46bd      	mov	sp, r7
7010743a:	bd80      	pop	{r7, pc}

7010743c <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
7010743c:	b580      	push	{r7, lr}
7010743e:	b082      	sub	sp, #8
70107440:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
70107442:	2300      	movs	r3, #0
70107444:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
70107446:	f7fc f9eb 	bl	70103820 <LL_RCC_IC18_IsEnabled>
7010744a:	4603      	mov	r3, r0
7010744c:	2b00      	cmp	r3, #0
7010744e:	d03c      	beq.n	701074ca <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
70107450:	f7fc fa08 	bl	70103864 <LL_RCC_IC18_GetDivider>
70107454:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
70107456:	f7fc f9f7 	bl	70103848 <LL_RCC_IC18_GetSource>
7010745a:	4603      	mov	r3, r0
7010745c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107460:	d029      	beq.n	701074b6 <RCCEx_GetCSICLKFreq+0x7a>
70107462:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107466:	d82f      	bhi.n	701074c8 <RCCEx_GetCSICLKFreq+0x8c>
70107468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010746c:	d01a      	beq.n	701074a4 <RCCEx_GetCSICLKFreq+0x68>
7010746e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107472:	d829      	bhi.n	701074c8 <RCCEx_GetCSICLKFreq+0x8c>
70107474:	2b00      	cmp	r3, #0
70107476:	d003      	beq.n	70107480 <RCCEx_GetCSICLKFreq+0x44>
70107478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
7010747c:	d009      	beq.n	70107492 <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
7010747e:	e023      	b.n	701074c8 <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70107480:	f7ff fa22 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70107484:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
70107486:	687a      	ldr	r2, [r7, #4]
70107488:	683b      	ldr	r3, [r7, #0]
7010748a:	fbb2 f3f3 	udiv	r3, r2, r3
7010748e:	607b      	str	r3, [r7, #4]
        break;
70107490:	e01b      	b.n	701074ca <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70107492:	f7ff fa5f 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70107496:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
70107498:	687a      	ldr	r2, [r7, #4]
7010749a:	683b      	ldr	r3, [r7, #0]
7010749c:	fbb2 f3f3 	udiv	r3, r2, r3
701074a0:	607b      	str	r3, [r7, #4]
        break;
701074a2:	e012      	b.n	701074ca <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
701074a4:	f7ff fa9c 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
701074a8:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
701074aa:	687a      	ldr	r2, [r7, #4]
701074ac:	683b      	ldr	r3, [r7, #0]
701074ae:	fbb2 f3f3 	udiv	r3, r2, r3
701074b2:	607b      	str	r3, [r7, #4]
        break;
701074b4:	e009      	b.n	701074ca <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
701074b6:	f7ff fad9 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701074ba:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
701074bc:	687a      	ldr	r2, [r7, #4]
701074be:	683b      	ldr	r3, [r7, #0]
701074c0:	fbb2 f3f3 	udiv	r3, r2, r3
701074c4:	607b      	str	r3, [r7, #4]
        break;
701074c6:	e000      	b.n	701074ca <RCCEx_GetCSICLKFreq+0x8e>
        break;
701074c8:	bf00      	nop
    }
  }

  return clkp_frequency;
701074ca:	687b      	ldr	r3, [r7, #4]
}
701074cc:	4618      	mov	r0, r3
701074ce:	3708      	adds	r7, #8
701074d0:	46bd      	mov	sp, r7
701074d2:	bd80      	pop	{r7, pc}

701074d4 <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
701074d4:	b580      	push	{r7, lr}
701074d6:	b084      	sub	sp, #16
701074d8:	af00      	add	r7, sp, #0
701074da:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
701074dc:	2300      	movs	r3, #0
701074de:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
701074e0:	6878      	ldr	r0, [r7, #4]
701074e2:	f7fb fa65 	bl	701029b0 <LL_RCC_GetDCMIPPClockSource>
701074e6:	4603      	mov	r3, r0
701074e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
701074ec:	d062      	beq.n	701075b4 <RCCEx_GetDCMIPPCLKFreq+0xe0>
701074ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
701074f2:	d86d      	bhi.n	701075d0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
701074f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
701074f8:	d019      	beq.n	7010752e <RCCEx_GetDCMIPPCLKFreq+0x5a>
701074fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
701074fe:	d867      	bhi.n	701075d0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
70107500:	2b00      	cmp	r3, #0
70107502:	d003      	beq.n	7010750c <RCCEx_GetDCMIPPCLKFreq+0x38>
70107504:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
70107508:	d00c      	beq.n	70107524 <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
7010750a:	e061      	b.n	701075d0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
7010750c:	f7fa fe8e 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70107510:	4603      	mov	r3, r0
70107512:	4618      	mov	r0, r3
70107514:	f7ff faf0 	bl	70106af8 <RCCEx_GetHCLKFreq>
70107518:	4603      	mov	r3, r0
7010751a:	4618      	mov	r0, r3
7010751c:	f7ff fb2f 	bl	70106b7e <RCCEx_GetPCLK5Freq>
70107520:	60f8      	str	r0, [r7, #12]
      break;
70107522:	e05a      	b.n	701075da <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70107524:	2007      	movs	r0, #7
70107526:	f7ff fdd3 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
7010752a:	60f8      	str	r0, [r7, #12]
      break;
7010752c:	e055      	b.n	701075da <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
7010752e:	f7fc f937 	bl	701037a0 <LL_RCC_IC17_IsEnabled>
70107532:	4603      	mov	r3, r0
70107534:	2b00      	cmp	r3, #0
70107536:	d04d      	beq.n	701075d4 <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
70107538:	f7fc f954 	bl	701037e4 <LL_RCC_IC17_GetDivider>
7010753c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
7010753e:	f7fc f943 	bl	701037c8 <LL_RCC_IC17_GetSource>
70107542:	4603      	mov	r3, r0
70107544:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107548:	d029      	beq.n	7010759e <RCCEx_GetDCMIPPCLKFreq+0xca>
7010754a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010754e:	d82f      	bhi.n	701075b0 <RCCEx_GetDCMIPPCLKFreq+0xdc>
70107550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107554:	d01a      	beq.n	7010758c <RCCEx_GetDCMIPPCLKFreq+0xb8>
70107556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010755a:	d829      	bhi.n	701075b0 <RCCEx_GetDCMIPPCLKFreq+0xdc>
7010755c:	2b00      	cmp	r3, #0
7010755e:	d003      	beq.n	70107568 <RCCEx_GetDCMIPPCLKFreq+0x94>
70107560:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70107564:	d009      	beq.n	7010757a <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
70107566:	e023      	b.n	701075b0 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70107568:	f7ff f9ae 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
7010756c:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
7010756e:	68fa      	ldr	r2, [r7, #12]
70107570:	68bb      	ldr	r3, [r7, #8]
70107572:	fbb2 f3f3 	udiv	r3, r2, r3
70107576:	60fb      	str	r3, [r7, #12]
            break;
70107578:	e01b      	b.n	701075b2 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
7010757a:	f7ff f9eb 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
7010757e:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
70107580:	68fa      	ldr	r2, [r7, #12]
70107582:	68bb      	ldr	r3, [r7, #8]
70107584:	fbb2 f3f3 	udiv	r3, r2, r3
70107588:	60fb      	str	r3, [r7, #12]
            break;
7010758a:	e012      	b.n	701075b2 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
7010758c:	f7ff fa28 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70107590:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
70107592:	68fa      	ldr	r2, [r7, #12]
70107594:	68bb      	ldr	r3, [r7, #8]
70107596:	fbb2 f3f3 	udiv	r3, r2, r3
7010759a:	60fb      	str	r3, [r7, #12]
            break;
7010759c:	e009      	b.n	701075b2 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
7010759e:	f7ff fa65 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701075a2:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
701075a4:	68fa      	ldr	r2, [r7, #12]
701075a6:	68bb      	ldr	r3, [r7, #8]
701075a8:	fbb2 f3f3 	udiv	r3, r2, r3
701075ac:	60fb      	str	r3, [r7, #12]
            break;
701075ae:	e000      	b.n	701075b2 <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
701075b0:	bf00      	nop
      break;
701075b2:	e00f      	b.n	701075d4 <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
701075b4:	f7fa ff10 	bl	701023d8 <LL_RCC_HSI_IsReady>
701075b8:	4603      	mov	r3, r0
701075ba:	2b00      	cmp	r3, #0
701075bc:	d00c      	beq.n	701075d8 <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
701075be:	f7fa ff1d 	bl	701023fc <LL_RCC_HSI_GetDivider>
701075c2:	4603      	mov	r3, r0
701075c4:	09db      	lsrs	r3, r3, #7
701075c6:	4a07      	ldr	r2, [pc, #28]	@ (701075e4 <RCCEx_GetDCMIPPCLKFreq+0x110>)
701075c8:	fa22 f303 	lsr.w	r3, r2, r3
701075cc:	60fb      	str	r3, [r7, #12]
      break;
701075ce:	e003      	b.n	701075d8 <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
701075d0:	bf00      	nop
701075d2:	e002      	b.n	701075da <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
701075d4:	bf00      	nop
701075d6:	e000      	b.n	701075da <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
701075d8:	bf00      	nop
  }

  return dcmipp_frequency;
701075da:	68fb      	ldr	r3, [r7, #12]
}
701075dc:	4618      	mov	r0, r3
701075de:	3710      	adds	r7, #16
701075e0:	46bd      	mov	sp, r7
701075e2:	bd80      	pop	{r7, pc}
701075e4:	03d09000 	.word	0x03d09000

701075e8 <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
701075e8:	b580      	push	{r7, lr}
701075ea:	b084      	sub	sp, #16
701075ec:	af00      	add	r7, sp, #0
701075ee:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
701075f0:	2300      	movs	r3, #0
701075f2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
701075f4:	6878      	ldr	r0, [r7, #4]
701075f6:	f7fb f9ed 	bl	701029d4 <LL_RCC_GetETHClockSource>
701075fa:	4603      	mov	r3, r0
701075fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
70107600:	d05e      	beq.n	701076c0 <RCCEx_GetETH1CLKFreq+0xd8>
70107602:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
70107606:	d863      	bhi.n	701076d0 <RCCEx_GetETH1CLKFreq+0xe8>
70107608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
7010760c:	d015      	beq.n	7010763a <RCCEx_GetETH1CLKFreq+0x52>
7010760e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70107612:	d85d      	bhi.n	701076d0 <RCCEx_GetETH1CLKFreq+0xe8>
70107614:	2b00      	cmp	r3, #0
70107616:	d003      	beq.n	70107620 <RCCEx_GetETH1CLKFreq+0x38>
70107618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
7010761c:	d008      	beq.n	70107630 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
7010761e:	e057      	b.n	701076d0 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
70107620:	f7fa fe04 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70107624:	4603      	mov	r3, r0
70107626:	4618      	mov	r0, r3
70107628:	f7ff fa66 	bl	70106af8 <RCCEx_GetHCLKFreq>
7010762c:	60f8      	str	r0, [r7, #12]
      break;
7010762e:	e054      	b.n	701076da <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70107630:	2007      	movs	r0, #7
70107632:	f7ff fd4d 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70107636:	60f8      	str	r0, [r7, #12]
      break;
70107638:	e04f      	b.n	701076da <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
7010763a:	f7fb ff71 	bl	70103520 <LL_RCC_IC12_IsEnabled>
7010763e:	4603      	mov	r3, r0
70107640:	2b00      	cmp	r3, #0
70107642:	d047      	beq.n	701076d4 <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
70107644:	f7fb ff8e 	bl	70103564 <LL_RCC_IC12_GetDivider>
70107648:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
7010764a:	f7fb ff7d 	bl	70103548 <LL_RCC_IC12_GetSource>
7010764e:	4603      	mov	r3, r0
70107650:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107654:	d029      	beq.n	701076aa <RCCEx_GetETH1CLKFreq+0xc2>
70107656:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010765a:	d82f      	bhi.n	701076bc <RCCEx_GetETH1CLKFreq+0xd4>
7010765c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107660:	d01a      	beq.n	70107698 <RCCEx_GetETH1CLKFreq+0xb0>
70107662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107666:	d829      	bhi.n	701076bc <RCCEx_GetETH1CLKFreq+0xd4>
70107668:	2b00      	cmp	r3, #0
7010766a:	d003      	beq.n	70107674 <RCCEx_GetETH1CLKFreq+0x8c>
7010766c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70107670:	d009      	beq.n	70107686 <RCCEx_GetETH1CLKFreq+0x9e>
            break;
70107672:	e023      	b.n	701076bc <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70107674:	f7ff f928 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70107678:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
7010767a:	68fa      	ldr	r2, [r7, #12]
7010767c:	68bb      	ldr	r3, [r7, #8]
7010767e:	fbb2 f3f3 	udiv	r3, r2, r3
70107682:	60fb      	str	r3, [r7, #12]
            break;
70107684:	e01b      	b.n	701076be <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70107686:	f7ff f965 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
7010768a:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
7010768c:	68fa      	ldr	r2, [r7, #12]
7010768e:	68bb      	ldr	r3, [r7, #8]
70107690:	fbb2 f3f3 	udiv	r3, r2, r3
70107694:	60fb      	str	r3, [r7, #12]
            break;
70107696:	e012      	b.n	701076be <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70107698:	f7ff f9a2 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010769c:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
7010769e:	68fa      	ldr	r2, [r7, #12]
701076a0:	68bb      	ldr	r3, [r7, #8]
701076a2:	fbb2 f3f3 	udiv	r3, r2, r3
701076a6:	60fb      	str	r3, [r7, #12]
            break;
701076a8:	e009      	b.n	701076be <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
701076aa:	f7ff f9df 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701076ae:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
701076b0:	68fa      	ldr	r2, [r7, #12]
701076b2:	68bb      	ldr	r3, [r7, #8]
701076b4:	fbb2 f3f3 	udiv	r3, r2, r3
701076b8:	60fb      	str	r3, [r7, #12]
            break;
701076ba:	e000      	b.n	701076be <RCCEx_GetETH1CLKFreq+0xd6>
            break;
701076bc:	bf00      	nop
      break;
701076be:	e009      	b.n	701076d4 <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
701076c0:	f7fa fe78 	bl	701023b4 <LL_RCC_HSE_IsReady>
701076c4:	4603      	mov	r3, r0
701076c6:	2b00      	cmp	r3, #0
701076c8:	d006      	beq.n	701076d8 <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
701076ca:	4b06      	ldr	r3, [pc, #24]	@ (701076e4 <RCCEx_GetETH1CLKFreq+0xfc>)
701076cc:	60fb      	str	r3, [r7, #12]
      break;
701076ce:	e003      	b.n	701076d8 <RCCEx_GetETH1CLKFreq+0xf0>
      break;
701076d0:	bf00      	nop
701076d2:	e002      	b.n	701076da <RCCEx_GetETH1CLKFreq+0xf2>
      break;
701076d4:	bf00      	nop
701076d6:	e000      	b.n	701076da <RCCEx_GetETH1CLKFreq+0xf2>
      break;
701076d8:	bf00      	nop
  }

  return eth1_frequency;
701076da:	68fb      	ldr	r3, [r7, #12]
}
701076dc:	4618      	mov	r0, r3
701076de:	3710      	adds	r7, #16
701076e0:	46bd      	mov	sp, r7
701076e2:	bd80      	pop	{r7, pc}
701076e4:	016e3600 	.word	0x016e3600

701076e8 <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
701076e8:	b580      	push	{r7, lr}
701076ea:	b084      	sub	sp, #16
701076ec:	af00      	add	r7, sp, #0
701076ee:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
701076f0:	2300      	movs	r3, #0
701076f2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
701076f4:	6878      	ldr	r0, [r7, #4]
701076f6:	f7fb f97f 	bl	701029f8 <LL_RCC_GetETHPTPClockSource>
701076fa:	4603      	mov	r3, r0
701076fc:	2b03      	cmp	r3, #3
701076fe:	d863      	bhi.n	701077c8 <RCCEx_GetETH1PTPCLKFreq+0xe0>
70107700:	a201      	add	r2, pc, #4	@ (adr r2, 70107708 <RCCEx_GetETH1PTPCLKFreq+0x20>)
70107702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70107706:	bf00      	nop
70107708:	70107719 	.word	0x70107719
7010770c:	70107729 	.word	0x70107729
70107710:	70107733 	.word	0x70107733
70107714:	701077b9 	.word	0x701077b9
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
70107718:	f7fa fd88 	bl	7010222c <HAL_RCC_GetSysClockFreq>
7010771c:	4603      	mov	r3, r0
7010771e:	4618      	mov	r0, r3
70107720:	f7ff f9ea 	bl	70106af8 <RCCEx_GetHCLKFreq>
70107724:	60f8      	str	r0, [r7, #12]
      break;
70107726:	e054      	b.n	701077d2 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70107728:	2007      	movs	r0, #7
7010772a:	f7ff fcd1 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
7010772e:	60f8      	str	r0, [r7, #12]
      break;
70107730:	e04f      	b.n	701077d2 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
70107732:	f7fb ff35 	bl	701035a0 <LL_RCC_IC13_IsEnabled>
70107736:	4603      	mov	r3, r0
70107738:	2b00      	cmp	r3, #0
7010773a:	d047      	beq.n	701077cc <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
7010773c:	f7fb ff52 	bl	701035e4 <LL_RCC_IC13_GetDivider>
70107740:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
70107742:	f7fb ff41 	bl	701035c8 <LL_RCC_IC13_GetSource>
70107746:	4603      	mov	r3, r0
70107748:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010774c:	d029      	beq.n	701077a2 <RCCEx_GetETH1PTPCLKFreq+0xba>
7010774e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107752:	d82f      	bhi.n	701077b4 <RCCEx_GetETH1PTPCLKFreq+0xcc>
70107754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107758:	d01a      	beq.n	70107790 <RCCEx_GetETH1PTPCLKFreq+0xa8>
7010775a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010775e:	d829      	bhi.n	701077b4 <RCCEx_GetETH1PTPCLKFreq+0xcc>
70107760:	2b00      	cmp	r3, #0
70107762:	d003      	beq.n	7010776c <RCCEx_GetETH1PTPCLKFreq+0x84>
70107764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70107768:	d009      	beq.n	7010777e <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
7010776a:	e023      	b.n	701077b4 <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
7010776c:	f7ff f8ac 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70107770:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
70107772:	68fa      	ldr	r2, [r7, #12]
70107774:	68bb      	ldr	r3, [r7, #8]
70107776:	fbb2 f3f3 	udiv	r3, r2, r3
7010777a:	60fb      	str	r3, [r7, #12]
            break;
7010777c:	e01b      	b.n	701077b6 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
7010777e:	f7ff f8e9 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70107782:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
70107784:	68fa      	ldr	r2, [r7, #12]
70107786:	68bb      	ldr	r3, [r7, #8]
70107788:	fbb2 f3f3 	udiv	r3, r2, r3
7010778c:	60fb      	str	r3, [r7, #12]
            break;
7010778e:	e012      	b.n	701077b6 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70107790:	f7ff f926 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70107794:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
70107796:	68fa      	ldr	r2, [r7, #12]
70107798:	68bb      	ldr	r3, [r7, #8]
7010779a:	fbb2 f3f3 	udiv	r3, r2, r3
7010779e:	60fb      	str	r3, [r7, #12]
            break;
701077a0:	e009      	b.n	701077b6 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
701077a2:	f7ff f963 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701077a6:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
701077a8:	68fa      	ldr	r2, [r7, #12]
701077aa:	68bb      	ldr	r3, [r7, #8]
701077ac:	fbb2 f3f3 	udiv	r3, r2, r3
701077b0:	60fb      	str	r3, [r7, #12]
            break;
701077b2:	e000      	b.n	701077b6 <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
701077b4:	bf00      	nop
        }
      }
      break;
701077b6:	e009      	b.n	701077cc <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
701077b8:	f7fa fdfc 	bl	701023b4 <LL_RCC_HSE_IsReady>
701077bc:	4603      	mov	r3, r0
701077be:	2b00      	cmp	r3, #0
701077c0:	d006      	beq.n	701077d0 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
701077c2:	4b0a      	ldr	r3, [pc, #40]	@ (701077ec <RCCEx_GetETH1PTPCLKFreq+0x104>)
701077c4:	60fb      	str	r3, [r7, #12]
      }
      break;
701077c6:	e003      	b.n	701077d0 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
701077c8:	bf00      	nop
701077ca:	e002      	b.n	701077d2 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
701077cc:	bf00      	nop
701077ce:	e000      	b.n	701077d2 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
701077d0:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
701077d2:	f7fa ff4d 	bl	70102670 <LL_RCC_GetETH1PTPDivider>
701077d6:	4603      	mov	r3, r0
701077d8:	091b      	lsrs	r3, r3, #4
701077da:	3301      	adds	r3, #1
701077dc:	68fa      	ldr	r2, [r7, #12]
701077de:	fbb2 f3f3 	udiv	r3, r2, r3
}
701077e2:	4618      	mov	r0, r3
701077e4:	3710      	adds	r7, #16
701077e6:	46bd      	mov	sp, r7
701077e8:	bd80      	pop	{r7, pc}
701077ea:	bf00      	nop
701077ec:	016e3600 	.word	0x016e3600

701077f0 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
701077f0:	b580      	push	{r7, lr}
701077f2:	b084      	sub	sp, #16
701077f4:	af00      	add	r7, sp, #0
701077f6:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
701077f8:	2300      	movs	r3, #0
701077fa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
701077fc:	6878      	ldr	r0, [r7, #4]
701077fe:	f7fb f90d 	bl	70102a1c <LL_RCC_GetFDCANClockSource>
70107802:	4603      	mov	r3, r0
70107804:	2b03      	cmp	r3, #3
70107806:	d867      	bhi.n	701078d8 <RCCEx_GetFDCANCLKFreq+0xe8>
70107808:	a201      	add	r2, pc, #4	@ (adr r2, 70107810 <RCCEx_GetFDCANCLKFreq+0x20>)
7010780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
7010780e:	bf00      	nop
70107810:	70107821 	.word	0x70107821
70107814:	70107839 	.word	0x70107839
70107818:	70107843 	.word	0x70107843
7010781c:	701078c9 	.word	0x701078c9
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
70107820:	f7fa fd04 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70107824:	4603      	mov	r3, r0
70107826:	4618      	mov	r0, r3
70107828:	f7ff f966 	bl	70106af8 <RCCEx_GetHCLKFreq>
7010782c:	4603      	mov	r3, r0
7010782e:	4618      	mov	r0, r3
70107830:	f7ff f973 	bl	70106b1a <RCCEx_GetPCLK1Freq>
70107834:	60f8      	str	r0, [r7, #12]
      break;
70107836:	e054      	b.n	701078e2 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70107838:	2007      	movs	r0, #7
7010783a:	f7ff fc49 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
7010783e:	60f8      	str	r0, [r7, #12]
      break;
70107840:	e04f      	b.n	701078e2 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
70107842:	f7fc f82d 	bl	701038a0 <LL_RCC_IC19_IsEnabled>
70107846:	4603      	mov	r3, r0
70107848:	2b00      	cmp	r3, #0
7010784a:	d047      	beq.n	701078dc <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
7010784c:	f7fc f84a 	bl	701038e4 <LL_RCC_IC19_GetDivider>
70107850:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
70107852:	f7fc f839 	bl	701038c8 <LL_RCC_IC19_GetSource>
70107856:	4603      	mov	r3, r0
70107858:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010785c:	d029      	beq.n	701078b2 <RCCEx_GetFDCANCLKFreq+0xc2>
7010785e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107862:	d82f      	bhi.n	701078c4 <RCCEx_GetFDCANCLKFreq+0xd4>
70107864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107868:	d01a      	beq.n	701078a0 <RCCEx_GetFDCANCLKFreq+0xb0>
7010786a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010786e:	d829      	bhi.n	701078c4 <RCCEx_GetFDCANCLKFreq+0xd4>
70107870:	2b00      	cmp	r3, #0
70107872:	d003      	beq.n	7010787c <RCCEx_GetFDCANCLKFreq+0x8c>
70107874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70107878:	d009      	beq.n	7010788e <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
7010787a:	e023      	b.n	701078c4 <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
7010787c:	f7ff f824 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70107880:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
70107882:	68fa      	ldr	r2, [r7, #12]
70107884:	68bb      	ldr	r3, [r7, #8]
70107886:	fbb2 f3f3 	udiv	r3, r2, r3
7010788a:	60fb      	str	r3, [r7, #12]
            break;
7010788c:	e01b      	b.n	701078c6 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
7010788e:	f7ff f861 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70107892:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
70107894:	68fa      	ldr	r2, [r7, #12]
70107896:	68bb      	ldr	r3, [r7, #8]
70107898:	fbb2 f3f3 	udiv	r3, r2, r3
7010789c:	60fb      	str	r3, [r7, #12]
            break;
7010789e:	e012      	b.n	701078c6 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
701078a0:	f7ff f89e 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
701078a4:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
701078a6:	68fa      	ldr	r2, [r7, #12]
701078a8:	68bb      	ldr	r3, [r7, #8]
701078aa:	fbb2 f3f3 	udiv	r3, r2, r3
701078ae:	60fb      	str	r3, [r7, #12]
            break;
701078b0:	e009      	b.n	701078c6 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
701078b2:	f7ff f8db 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701078b6:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
701078b8:	68fa      	ldr	r2, [r7, #12]
701078ba:	68bb      	ldr	r3, [r7, #8]
701078bc:	fbb2 f3f3 	udiv	r3, r2, r3
701078c0:	60fb      	str	r3, [r7, #12]
            break;
701078c2:	e000      	b.n	701078c6 <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
701078c4:	bf00      	nop
        }
      }
      break;
701078c6:	e009      	b.n	701078dc <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
701078c8:	f7fa fd74 	bl	701023b4 <LL_RCC_HSE_IsReady>
701078cc:	4603      	mov	r3, r0
701078ce:	2b00      	cmp	r3, #0
701078d0:	d006      	beq.n	701078e0 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
701078d2:	4b06      	ldr	r3, [pc, #24]	@ (701078ec <RCCEx_GetFDCANCLKFreq+0xfc>)
701078d4:	60fb      	str	r3, [r7, #12]
      }
      break;
701078d6:	e003      	b.n	701078e0 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
701078d8:	bf00      	nop
701078da:	e002      	b.n	701078e2 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
701078dc:	bf00      	nop
701078de:	e000      	b.n	701078e2 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
701078e0:	bf00      	nop
  }

  return fdcan_frequency;
701078e2:	68fb      	ldr	r3, [r7, #12]
}
701078e4:	4618      	mov	r0, r3
701078e6:	3710      	adds	r7, #16
701078e8:	46bd      	mov	sp, r7
701078ea:	bd80      	pop	{r7, pc}
701078ec:	016e3600 	.word	0x016e3600

701078f0 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
701078f0:	b580      	push	{r7, lr}
701078f2:	b084      	sub	sp, #16
701078f4:	af00      	add	r7, sp, #0
701078f6:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
701078f8:	2300      	movs	r3, #0
701078fa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
701078fc:	6878      	ldr	r0, [r7, #4]
701078fe:	f7fb f89f 	bl	70102a40 <LL_RCC_GetFMCClockSource>
70107902:	4603      	mov	r3, r0
70107904:	2b30      	cmp	r3, #48	@ 0x30
70107906:	d05d      	beq.n	701079c4 <RCCEx_GetFMCCLKFreq+0xd4>
70107908:	2b30      	cmp	r3, #48	@ 0x30
7010790a:	f200 809e 	bhi.w	70107a4a <RCCEx_GetFMCCLKFreq+0x15a>
7010790e:	2b20      	cmp	r3, #32
70107910:	d014      	beq.n	7010793c <RCCEx_GetFMCCLKFreq+0x4c>
70107912:	2b20      	cmp	r3, #32
70107914:	f200 8099 	bhi.w	70107a4a <RCCEx_GetFMCCLKFreq+0x15a>
70107918:	2b00      	cmp	r3, #0
7010791a:	d002      	beq.n	70107922 <RCCEx_GetFMCCLKFreq+0x32>
7010791c:	2b10      	cmp	r3, #16
7010791e:	d008      	beq.n	70107932 <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
70107920:	e093      	b.n	70107a4a <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
70107922:	f7fa fc83 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70107926:	4603      	mov	r3, r0
70107928:	4618      	mov	r0, r3
7010792a:	f7ff f8e5 	bl	70106af8 <RCCEx_GetHCLKFreq>
7010792e:	60f8      	str	r0, [r7, #12]
      break;
70107930:	e090      	b.n	70107a54 <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70107932:	2007      	movs	r0, #7
70107934:	f7ff fbcc 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70107938:	60f8      	str	r0, [r7, #12]
      break;
7010793a:	e08b      	b.n	70107a54 <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
7010793c:	f7fb fc30 	bl	701031a0 <LL_RCC_IC3_IsEnabled>
70107940:	4603      	mov	r3, r0
70107942:	2b00      	cmp	r3, #0
70107944:	f000 8083 	beq.w	70107a4e <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
70107948:	f7fb fc4c 	bl	701031e4 <LL_RCC_IC3_GetDivider>
7010794c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
7010794e:	f7fb fc3b 	bl	701031c8 <LL_RCC_IC3_GetSource>
70107952:	4603      	mov	r3, r0
70107954:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107958:	d029      	beq.n	701079ae <RCCEx_GetFMCCLKFreq+0xbe>
7010795a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010795e:	d82f      	bhi.n	701079c0 <RCCEx_GetFMCCLKFreq+0xd0>
70107960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107964:	d01a      	beq.n	7010799c <RCCEx_GetFMCCLKFreq+0xac>
70107966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010796a:	d829      	bhi.n	701079c0 <RCCEx_GetFMCCLKFreq+0xd0>
7010796c:	2b00      	cmp	r3, #0
7010796e:	d003      	beq.n	70107978 <RCCEx_GetFMCCLKFreq+0x88>
70107970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70107974:	d009      	beq.n	7010798a <RCCEx_GetFMCCLKFreq+0x9a>
            break;
70107976:	e023      	b.n	701079c0 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70107978:	f7fe ffa6 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
7010797c:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
7010797e:	68fa      	ldr	r2, [r7, #12]
70107980:	68bb      	ldr	r3, [r7, #8]
70107982:	fbb2 f3f3 	udiv	r3, r2, r3
70107986:	60fb      	str	r3, [r7, #12]
            break;
70107988:	e01b      	b.n	701079c2 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
7010798a:	f7fe ffe3 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
7010798e:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
70107990:	68fa      	ldr	r2, [r7, #12]
70107992:	68bb      	ldr	r3, [r7, #8]
70107994:	fbb2 f3f3 	udiv	r3, r2, r3
70107998:	60fb      	str	r3, [r7, #12]
            break;
7010799a:	e012      	b.n	701079c2 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
7010799c:	f7ff f820 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
701079a0:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
701079a2:	68fa      	ldr	r2, [r7, #12]
701079a4:	68bb      	ldr	r3, [r7, #8]
701079a6:	fbb2 f3f3 	udiv	r3, r2, r3
701079aa:	60fb      	str	r3, [r7, #12]
            break;
701079ac:	e009      	b.n	701079c2 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
701079ae:	f7ff f85d 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701079b2:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
701079b4:	68fa      	ldr	r2, [r7, #12]
701079b6:	68bb      	ldr	r3, [r7, #8]
701079b8:	fbb2 f3f3 	udiv	r3, r2, r3
701079bc:	60fb      	str	r3, [r7, #12]
            break;
701079be:	e000      	b.n	701079c2 <RCCEx_GetFMCCLKFreq+0xd2>
            break;
701079c0:	bf00      	nop
      break;
701079c2:	e044      	b.n	70107a4e <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
701079c4:	f7fb fc2c 	bl	70103220 <LL_RCC_IC4_IsEnabled>
701079c8:	4603      	mov	r3, r0
701079ca:	2b00      	cmp	r3, #0
701079cc:	d041      	beq.n	70107a52 <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
701079ce:	f7fb fc49 	bl	70103264 <LL_RCC_IC4_GetDivider>
701079d2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
701079d4:	f7fb fc38 	bl	70103248 <LL_RCC_IC4_GetSource>
701079d8:	4603      	mov	r3, r0
701079da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701079de:	d029      	beq.n	70107a34 <RCCEx_GetFMCCLKFreq+0x144>
701079e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701079e4:	d82f      	bhi.n	70107a46 <RCCEx_GetFMCCLKFreq+0x156>
701079e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701079ea:	d01a      	beq.n	70107a22 <RCCEx_GetFMCCLKFreq+0x132>
701079ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701079f0:	d829      	bhi.n	70107a46 <RCCEx_GetFMCCLKFreq+0x156>
701079f2:	2b00      	cmp	r3, #0
701079f4:	d003      	beq.n	701079fe <RCCEx_GetFMCCLKFreq+0x10e>
701079f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
701079fa:	d009      	beq.n	70107a10 <RCCEx_GetFMCCLKFreq+0x120>
            break;
701079fc:	e023      	b.n	70107a46 <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
701079fe:	f7fe ff63 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70107a02:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
70107a04:	68fa      	ldr	r2, [r7, #12]
70107a06:	68bb      	ldr	r3, [r7, #8]
70107a08:	fbb2 f3f3 	udiv	r3, r2, r3
70107a0c:	60fb      	str	r3, [r7, #12]
            break;
70107a0e:	e01b      	b.n	70107a48 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70107a10:	f7fe ffa0 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70107a14:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
70107a16:	68fa      	ldr	r2, [r7, #12]
70107a18:	68bb      	ldr	r3, [r7, #8]
70107a1a:	fbb2 f3f3 	udiv	r3, r2, r3
70107a1e:	60fb      	str	r3, [r7, #12]
            break;
70107a20:	e012      	b.n	70107a48 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70107a22:	f7fe ffdd 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70107a26:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
70107a28:	68fa      	ldr	r2, [r7, #12]
70107a2a:	68bb      	ldr	r3, [r7, #8]
70107a2c:	fbb2 f3f3 	udiv	r3, r2, r3
70107a30:	60fb      	str	r3, [r7, #12]
            break;
70107a32:	e009      	b.n	70107a48 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70107a34:	f7ff f81a 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70107a38:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
70107a3a:	68fa      	ldr	r2, [r7, #12]
70107a3c:	68bb      	ldr	r3, [r7, #8]
70107a3e:	fbb2 f3f3 	udiv	r3, r2, r3
70107a42:	60fb      	str	r3, [r7, #12]
            break;
70107a44:	e000      	b.n	70107a48 <RCCEx_GetFMCCLKFreq+0x158>
            break;
70107a46:	bf00      	nop
      break;
70107a48:	e003      	b.n	70107a52 <RCCEx_GetFMCCLKFreq+0x162>
      break;
70107a4a:	bf00      	nop
70107a4c:	e002      	b.n	70107a54 <RCCEx_GetFMCCLKFreq+0x164>
      break;
70107a4e:	bf00      	nop
70107a50:	e000      	b.n	70107a54 <RCCEx_GetFMCCLKFreq+0x164>
      break;
70107a52:	bf00      	nop
  }

  return fmc_frequency;
70107a54:	68fb      	ldr	r3, [r7, #12]
}
70107a56:	4618      	mov	r0, r3
70107a58:	3710      	adds	r7, #16
70107a5a:	46bd      	mov	sp, r7
70107a5c:	bd80      	pop	{r7, pc}
	...

70107a60 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
70107a60:	b580      	push	{r7, lr}
70107a62:	b084      	sub	sp, #16
70107a64:	af00      	add	r7, sp, #0
70107a66:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
70107a68:	2300      	movs	r3, #0
70107a6a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
70107a6c:	6878      	ldr	r0, [r7, #4]
70107a6e:	f7fa fff9 	bl	70102a64 <LL_RCC_GetI2CClockSource>
70107a72:	4603      	mov	r3, r0
70107a74:	4aa2      	ldr	r2, [pc, #648]	@ (70107d00 <RCCEx_GetI2CCLKFreq+0x2a0>)
70107a76:	4293      	cmp	r3, r2
70107a78:	f000 8172 	beq.w	70107d60 <RCCEx_GetI2CCLKFreq+0x300>
70107a7c:	4aa0      	ldr	r2, [pc, #640]	@ (70107d00 <RCCEx_GetI2CCLKFreq+0x2a0>)
70107a7e:	4293      	cmp	r3, r2
70107a80:	f200 8184 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107a84:	4a9f      	ldr	r2, [pc, #636]	@ (70107d04 <RCCEx_GetI2CCLKFreq+0x2a4>)
70107a86:	4293      	cmp	r3, r2
70107a88:	f000 816a 	beq.w	70107d60 <RCCEx_GetI2CCLKFreq+0x300>
70107a8c:	4a9d      	ldr	r2, [pc, #628]	@ (70107d04 <RCCEx_GetI2CCLKFreq+0x2a4>)
70107a8e:	4293      	cmp	r3, r2
70107a90:	f200 817c 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107a94:	4a9c      	ldr	r2, [pc, #624]	@ (70107d08 <RCCEx_GetI2CCLKFreq+0x2a8>)
70107a96:	4293      	cmp	r3, r2
70107a98:	f000 8162 	beq.w	70107d60 <RCCEx_GetI2CCLKFreq+0x300>
70107a9c:	4a9a      	ldr	r2, [pc, #616]	@ (70107d08 <RCCEx_GetI2CCLKFreq+0x2a8>)
70107a9e:	4293      	cmp	r3, r2
70107aa0:	f200 8174 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107aa4:	4a99      	ldr	r2, [pc, #612]	@ (70107d0c <RCCEx_GetI2CCLKFreq+0x2ac>)
70107aa6:	4293      	cmp	r3, r2
70107aa8:	f000 815a 	beq.w	70107d60 <RCCEx_GetI2CCLKFreq+0x300>
70107aac:	4a97      	ldr	r2, [pc, #604]	@ (70107d0c <RCCEx_GetI2CCLKFreq+0x2ac>)
70107aae:	4293      	cmp	r3, r2
70107ab0:	f200 816c 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107ab4:	4a96      	ldr	r2, [pc, #600]	@ (70107d10 <RCCEx_GetI2CCLKFreq+0x2b0>)
70107ab6:	4293      	cmp	r3, r2
70107ab8:	f000 8160 	beq.w	70107d7c <RCCEx_GetI2CCLKFreq+0x31c>
70107abc:	4a94      	ldr	r2, [pc, #592]	@ (70107d10 <RCCEx_GetI2CCLKFreq+0x2b0>)
70107abe:	4293      	cmp	r3, r2
70107ac0:	f200 8164 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107ac4:	4a93      	ldr	r2, [pc, #588]	@ (70107d14 <RCCEx_GetI2CCLKFreq+0x2b4>)
70107ac6:	4293      	cmp	r3, r2
70107ac8:	f000 8158 	beq.w	70107d7c <RCCEx_GetI2CCLKFreq+0x31c>
70107acc:	4a91      	ldr	r2, [pc, #580]	@ (70107d14 <RCCEx_GetI2CCLKFreq+0x2b4>)
70107ace:	4293      	cmp	r3, r2
70107ad0:	f200 815c 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107ad4:	4a90      	ldr	r2, [pc, #576]	@ (70107d18 <RCCEx_GetI2CCLKFreq+0x2b8>)
70107ad6:	4293      	cmp	r3, r2
70107ad8:	f000 8150 	beq.w	70107d7c <RCCEx_GetI2CCLKFreq+0x31c>
70107adc:	4a8e      	ldr	r2, [pc, #568]	@ (70107d18 <RCCEx_GetI2CCLKFreq+0x2b8>)
70107ade:	4293      	cmp	r3, r2
70107ae0:	f200 8154 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107ae4:	4a8d      	ldr	r2, [pc, #564]	@ (70107d1c <RCCEx_GetI2CCLKFreq+0x2bc>)
70107ae6:	4293      	cmp	r3, r2
70107ae8:	f000 8148 	beq.w	70107d7c <RCCEx_GetI2CCLKFreq+0x31c>
70107aec:	4a8b      	ldr	r2, [pc, #556]	@ (70107d1c <RCCEx_GetI2CCLKFreq+0x2bc>)
70107aee:	4293      	cmp	r3, r2
70107af0:	f200 814c 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107af4:	4a8a      	ldr	r2, [pc, #552]	@ (70107d20 <RCCEx_GetI2CCLKFreq+0x2c0>)
70107af6:	4293      	cmp	r3, r2
70107af8:	f000 80be 	beq.w	70107c78 <RCCEx_GetI2CCLKFreq+0x218>
70107afc:	4a88      	ldr	r2, [pc, #544]	@ (70107d20 <RCCEx_GetI2CCLKFreq+0x2c0>)
70107afe:	4293      	cmp	r3, r2
70107b00:	f200 8144 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107b04:	4a87      	ldr	r2, [pc, #540]	@ (70107d24 <RCCEx_GetI2CCLKFreq+0x2c4>)
70107b06:	4293      	cmp	r3, r2
70107b08:	f000 80b6 	beq.w	70107c78 <RCCEx_GetI2CCLKFreq+0x218>
70107b0c:	4a85      	ldr	r2, [pc, #532]	@ (70107d24 <RCCEx_GetI2CCLKFreq+0x2c4>)
70107b0e:	4293      	cmp	r3, r2
70107b10:	f200 813c 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107b14:	4a84      	ldr	r2, [pc, #528]	@ (70107d28 <RCCEx_GetI2CCLKFreq+0x2c8>)
70107b16:	4293      	cmp	r3, r2
70107b18:	f000 80ae 	beq.w	70107c78 <RCCEx_GetI2CCLKFreq+0x218>
70107b1c:	4a82      	ldr	r2, [pc, #520]	@ (70107d28 <RCCEx_GetI2CCLKFreq+0x2c8>)
70107b1e:	4293      	cmp	r3, r2
70107b20:	f200 8134 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107b24:	4a81      	ldr	r2, [pc, #516]	@ (70107d2c <RCCEx_GetI2CCLKFreq+0x2cc>)
70107b26:	4293      	cmp	r3, r2
70107b28:	f000 80a6 	beq.w	70107c78 <RCCEx_GetI2CCLKFreq+0x218>
70107b2c:	4a7f      	ldr	r2, [pc, #508]	@ (70107d2c <RCCEx_GetI2CCLKFreq+0x2cc>)
70107b2e:	4293      	cmp	r3, r2
70107b30:	f200 812c 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107b34:	4a7e      	ldr	r2, [pc, #504]	@ (70107d30 <RCCEx_GetI2CCLKFreq+0x2d0>)
70107b36:	4293      	cmp	r3, r2
70107b38:	d05a      	beq.n	70107bf0 <RCCEx_GetI2CCLKFreq+0x190>
70107b3a:	4a7d      	ldr	r2, [pc, #500]	@ (70107d30 <RCCEx_GetI2CCLKFreq+0x2d0>)
70107b3c:	4293      	cmp	r3, r2
70107b3e:	f200 8125 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107b42:	4a7c      	ldr	r2, [pc, #496]	@ (70107d34 <RCCEx_GetI2CCLKFreq+0x2d4>)
70107b44:	4293      	cmp	r3, r2
70107b46:	d053      	beq.n	70107bf0 <RCCEx_GetI2CCLKFreq+0x190>
70107b48:	4a7a      	ldr	r2, [pc, #488]	@ (70107d34 <RCCEx_GetI2CCLKFreq+0x2d4>)
70107b4a:	4293      	cmp	r3, r2
70107b4c:	f200 811e 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107b50:	4a79      	ldr	r2, [pc, #484]	@ (70107d38 <RCCEx_GetI2CCLKFreq+0x2d8>)
70107b52:	4293      	cmp	r3, r2
70107b54:	d04c      	beq.n	70107bf0 <RCCEx_GetI2CCLKFreq+0x190>
70107b56:	4a78      	ldr	r2, [pc, #480]	@ (70107d38 <RCCEx_GetI2CCLKFreq+0x2d8>)
70107b58:	4293      	cmp	r3, r2
70107b5a:	f200 8117 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107b5e:	4a77      	ldr	r2, [pc, #476]	@ (70107d3c <RCCEx_GetI2CCLKFreq+0x2dc>)
70107b60:	4293      	cmp	r3, r2
70107b62:	d045      	beq.n	70107bf0 <RCCEx_GetI2CCLKFreq+0x190>
70107b64:	4a75      	ldr	r2, [pc, #468]	@ (70107d3c <RCCEx_GetI2CCLKFreq+0x2dc>)
70107b66:	4293      	cmp	r3, r2
70107b68:	f200 8110 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107b6c:	4a74      	ldr	r2, [pc, #464]	@ (70107d40 <RCCEx_GetI2CCLKFreq+0x2e0>)
70107b6e:	4293      	cmp	r3, r2
70107b70:	d039      	beq.n	70107be6 <RCCEx_GetI2CCLKFreq+0x186>
70107b72:	4a73      	ldr	r2, [pc, #460]	@ (70107d40 <RCCEx_GetI2CCLKFreq+0x2e0>)
70107b74:	4293      	cmp	r3, r2
70107b76:	f200 8109 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107b7a:	4a72      	ldr	r2, [pc, #456]	@ (70107d44 <RCCEx_GetI2CCLKFreq+0x2e4>)
70107b7c:	4293      	cmp	r3, r2
70107b7e:	d032      	beq.n	70107be6 <RCCEx_GetI2CCLKFreq+0x186>
70107b80:	4a70      	ldr	r2, [pc, #448]	@ (70107d44 <RCCEx_GetI2CCLKFreq+0x2e4>)
70107b82:	4293      	cmp	r3, r2
70107b84:	f200 8102 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107b88:	4a6f      	ldr	r2, [pc, #444]	@ (70107d48 <RCCEx_GetI2CCLKFreq+0x2e8>)
70107b8a:	4293      	cmp	r3, r2
70107b8c:	d02b      	beq.n	70107be6 <RCCEx_GetI2CCLKFreq+0x186>
70107b8e:	4a6e      	ldr	r2, [pc, #440]	@ (70107d48 <RCCEx_GetI2CCLKFreq+0x2e8>)
70107b90:	4293      	cmp	r3, r2
70107b92:	f200 80fb 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107b96:	4a6d      	ldr	r2, [pc, #436]	@ (70107d4c <RCCEx_GetI2CCLKFreq+0x2ec>)
70107b98:	4293      	cmp	r3, r2
70107b9a:	d024      	beq.n	70107be6 <RCCEx_GetI2CCLKFreq+0x186>
70107b9c:	4a6b      	ldr	r2, [pc, #428]	@ (70107d4c <RCCEx_GetI2CCLKFreq+0x2ec>)
70107b9e:	4293      	cmp	r3, r2
70107ba0:	f200 80f4 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107ba4:	4a6a      	ldr	r2, [pc, #424]	@ (70107d50 <RCCEx_GetI2CCLKFreq+0x2f0>)
70107ba6:	4293      	cmp	r3, r2
70107ba8:	d011      	beq.n	70107bce <RCCEx_GetI2CCLKFreq+0x16e>
70107baa:	4a69      	ldr	r2, [pc, #420]	@ (70107d50 <RCCEx_GetI2CCLKFreq+0x2f0>)
70107bac:	4293      	cmp	r3, r2
70107bae:	f200 80ed 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107bb2:	4a68      	ldr	r2, [pc, #416]	@ (70107d54 <RCCEx_GetI2CCLKFreq+0x2f4>)
70107bb4:	4293      	cmp	r3, r2
70107bb6:	d00a      	beq.n	70107bce <RCCEx_GetI2CCLKFreq+0x16e>
70107bb8:	4a66      	ldr	r2, [pc, #408]	@ (70107d54 <RCCEx_GetI2CCLKFreq+0x2f4>)
70107bba:	4293      	cmp	r3, r2
70107bbc:	f200 80e6 	bhi.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
70107bc0:	4a65      	ldr	r2, [pc, #404]	@ (70107d58 <RCCEx_GetI2CCLKFreq+0x2f8>)
70107bc2:	4293      	cmp	r3, r2
70107bc4:	d003      	beq.n	70107bce <RCCEx_GetI2CCLKFreq+0x16e>
70107bc6:	4a65      	ldr	r2, [pc, #404]	@ (70107d5c <RCCEx_GetI2CCLKFreq+0x2fc>)
70107bc8:	4293      	cmp	r3, r2
70107bca:	f040 80df 	bne.w	70107d8c <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
70107bce:	f7fa fb2d 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70107bd2:	4603      	mov	r3, r0
70107bd4:	4618      	mov	r0, r3
70107bd6:	f7fe ff8f 	bl	70106af8 <RCCEx_GetHCLKFreq>
70107bda:	4603      	mov	r3, r0
70107bdc:	4618      	mov	r0, r3
70107bde:	f7fe ff9c 	bl	70106b1a <RCCEx_GetPCLK1Freq>
70107be2:	60f8      	str	r0, [r7, #12]
      break;
70107be4:	e0db      	b.n	70107d9e <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70107be6:	2007      	movs	r0, #7
70107be8:	f7ff fa72 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70107bec:	60f8      	str	r0, [r7, #12]
      break;
70107bee:	e0d6      	b.n	70107d9e <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
70107bf0:	f7fb fc56 	bl	701034a0 <LL_RCC_IC10_IsEnabled>
70107bf4:	4603      	mov	r3, r0
70107bf6:	2b00      	cmp	r3, #0
70107bf8:	f000 80ca 	beq.w	70107d90 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
70107bfc:	f7fb fc72 	bl	701034e4 <LL_RCC_IC10_GetDivider>
70107c00:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
70107c02:	f7fb fc61 	bl	701034c8 <LL_RCC_IC10_GetSource>
70107c06:	4603      	mov	r3, r0
70107c08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107c0c:	d029      	beq.n	70107c62 <RCCEx_GetI2CCLKFreq+0x202>
70107c0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107c12:	d82f      	bhi.n	70107c74 <RCCEx_GetI2CCLKFreq+0x214>
70107c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107c18:	d01a      	beq.n	70107c50 <RCCEx_GetI2CCLKFreq+0x1f0>
70107c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107c1e:	d829      	bhi.n	70107c74 <RCCEx_GetI2CCLKFreq+0x214>
70107c20:	2b00      	cmp	r3, #0
70107c22:	d003      	beq.n	70107c2c <RCCEx_GetI2CCLKFreq+0x1cc>
70107c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70107c28:	d009      	beq.n	70107c3e <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70107c2a:	e023      	b.n	70107c74 <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70107c2c:	f7fe fe4c 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70107c30:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
70107c32:	68fa      	ldr	r2, [r7, #12]
70107c34:	68bb      	ldr	r3, [r7, #8]
70107c36:	fbb2 f3f3 	udiv	r3, r2, r3
70107c3a:	60fb      	str	r3, [r7, #12]
            break;
70107c3c:	e01b      	b.n	70107c76 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70107c3e:	f7fe fe89 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70107c42:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
70107c44:	68fa      	ldr	r2, [r7, #12]
70107c46:	68bb      	ldr	r3, [r7, #8]
70107c48:	fbb2 f3f3 	udiv	r3, r2, r3
70107c4c:	60fb      	str	r3, [r7, #12]
            break;
70107c4e:	e012      	b.n	70107c76 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70107c50:	f7fe fec6 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70107c54:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
70107c56:	68fa      	ldr	r2, [r7, #12]
70107c58:	68bb      	ldr	r3, [r7, #8]
70107c5a:	fbb2 f3f3 	udiv	r3, r2, r3
70107c5e:	60fb      	str	r3, [r7, #12]
            break;
70107c60:	e009      	b.n	70107c76 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70107c62:	f7fe ff03 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70107c66:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
70107c68:	68fa      	ldr	r2, [r7, #12]
70107c6a:	68bb      	ldr	r3, [r7, #8]
70107c6c:	fbb2 f3f3 	udiv	r3, r2, r3
70107c70:	60fb      	str	r3, [r7, #12]
            break;
70107c72:	e000      	b.n	70107c76 <RCCEx_GetI2CCLKFreq+0x216>
            break;
70107c74:	bf00      	nop
        }
      }
      break;
70107c76:	e08b      	b.n	70107d90 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
70107c78:	f7fb fd12 	bl	701036a0 <LL_RCC_IC15_IsEnabled>
70107c7c:	4603      	mov	r3, r0
70107c7e:	2b00      	cmp	r3, #0
70107c80:	f000 8088 	beq.w	70107d94 <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
70107c84:	f7fb fd2e 	bl	701036e4 <LL_RCC_IC15_GetDivider>
70107c88:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
70107c8a:	f7fb fd1d 	bl	701036c8 <LL_RCC_IC15_GetSource>
70107c8e:	4603      	mov	r3, r0
70107c90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107c94:	d029      	beq.n	70107cea <RCCEx_GetI2CCLKFreq+0x28a>
70107c96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107c9a:	d82f      	bhi.n	70107cfc <RCCEx_GetI2CCLKFreq+0x29c>
70107c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107ca0:	d01a      	beq.n	70107cd8 <RCCEx_GetI2CCLKFreq+0x278>
70107ca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107ca6:	d829      	bhi.n	70107cfc <RCCEx_GetI2CCLKFreq+0x29c>
70107ca8:	2b00      	cmp	r3, #0
70107caa:	d003      	beq.n	70107cb4 <RCCEx_GetI2CCLKFreq+0x254>
70107cac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70107cb0:	d009      	beq.n	70107cc6 <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70107cb2:	e023      	b.n	70107cfc <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70107cb4:	f7fe fe08 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70107cb8:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
70107cba:	68fa      	ldr	r2, [r7, #12]
70107cbc:	68bb      	ldr	r3, [r7, #8]
70107cbe:	fbb2 f3f3 	udiv	r3, r2, r3
70107cc2:	60fb      	str	r3, [r7, #12]
            break;
70107cc4:	e01b      	b.n	70107cfe <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70107cc6:	f7fe fe45 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70107cca:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
70107ccc:	68fa      	ldr	r2, [r7, #12]
70107cce:	68bb      	ldr	r3, [r7, #8]
70107cd0:	fbb2 f3f3 	udiv	r3, r2, r3
70107cd4:	60fb      	str	r3, [r7, #12]
            break;
70107cd6:	e012      	b.n	70107cfe <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70107cd8:	f7fe fe82 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70107cdc:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
70107cde:	68fa      	ldr	r2, [r7, #12]
70107ce0:	68bb      	ldr	r3, [r7, #8]
70107ce2:	fbb2 f3f3 	udiv	r3, r2, r3
70107ce6:	60fb      	str	r3, [r7, #12]
            break;
70107ce8:	e009      	b.n	70107cfe <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70107cea:	f7fe febf 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70107cee:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
70107cf0:	68fa      	ldr	r2, [r7, #12]
70107cf2:	68bb      	ldr	r3, [r7, #8]
70107cf4:	fbb2 f3f3 	udiv	r3, r2, r3
70107cf8:	60fb      	str	r3, [r7, #12]
            break;
70107cfa:	e000      	b.n	70107cfe <RCCEx_GetI2CCLKFreq+0x29e>
            break;
70107cfc:	bf00      	nop
        }
      }
      break;
70107cfe:	e049      	b.n	70107d94 <RCCEx_GetI2CCLKFreq+0x334>
70107d00:	07050c0c 	.word	0x07050c0c
70107d04:	0705080c 	.word	0x0705080c
70107d08:	0705040c 	.word	0x0705040c
70107d0c:	0705000c 	.word	0x0705000c
70107d10:	07040c0c 	.word	0x07040c0c
70107d14:	0704080c 	.word	0x0704080c
70107d18:	0704040c 	.word	0x0704040c
70107d1c:	0704000c 	.word	0x0704000c
70107d20:	07030c0c 	.word	0x07030c0c
70107d24:	0703080c 	.word	0x0703080c
70107d28:	0703040c 	.word	0x0703040c
70107d2c:	0703000c 	.word	0x0703000c
70107d30:	07020c0c 	.word	0x07020c0c
70107d34:	0702080c 	.word	0x0702080c
70107d38:	0702040c 	.word	0x0702040c
70107d3c:	0702000c 	.word	0x0702000c
70107d40:	07010c0c 	.word	0x07010c0c
70107d44:	0701080c 	.word	0x0701080c
70107d48:	0701040c 	.word	0x0701040c
70107d4c:	0701000c 	.word	0x0701000c
70107d50:	07000c0c 	.word	0x07000c0c
70107d54:	0700080c 	.word	0x0700080c
70107d58:	0700000c 	.word	0x0700000c
70107d5c:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
70107d60:	f7fa fb3a 	bl	701023d8 <LL_RCC_HSI_IsReady>
70107d64:	4603      	mov	r3, r0
70107d66:	2b00      	cmp	r3, #0
70107d68:	d016      	beq.n	70107d98 <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70107d6a:	f7fa fb47 	bl	701023fc <LL_RCC_HSI_GetDivider>
70107d6e:	4603      	mov	r3, r0
70107d70:	09db      	lsrs	r3, r3, #7
70107d72:	4a0d      	ldr	r2, [pc, #52]	@ (70107da8 <RCCEx_GetI2CCLKFreq+0x348>)
70107d74:	fa22 f303 	lsr.w	r3, r2, r3
70107d78:	60fb      	str	r3, [r7, #12]
      }
      break;
70107d7a:	e00d      	b.n	70107d98 <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
70107d7c:	f7fa fb4c 	bl	70102418 <LL_RCC_MSI_IsReady>
70107d80:	4603      	mov	r3, r0
70107d82:	2b00      	cmp	r3, #0
70107d84:	d00a      	beq.n	70107d9c <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
70107d86:	4b09      	ldr	r3, [pc, #36]	@ (70107dac <RCCEx_GetI2CCLKFreq+0x34c>)
70107d88:	60fb      	str	r3, [r7, #12]
      }
      break;
70107d8a:	e007      	b.n	70107d9c <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
70107d8c:	bf00      	nop
70107d8e:	e006      	b.n	70107d9e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
70107d90:	bf00      	nop
70107d92:	e004      	b.n	70107d9e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
70107d94:	bf00      	nop
70107d96:	e002      	b.n	70107d9e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
70107d98:	bf00      	nop
70107d9a:	e000      	b.n	70107d9e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
70107d9c:	bf00      	nop
  }

  return i2c_frequency;
70107d9e:	68fb      	ldr	r3, [r7, #12]
}
70107da0:	4618      	mov	r0, r3
70107da2:	3710      	adds	r7, #16
70107da4:	46bd      	mov	sp, r7
70107da6:	bd80      	pop	{r7, pc}
70107da8:	03d09000 	.word	0x03d09000
70107dac:	003d0900 	.word	0x003d0900

70107db0 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
70107db0:	b580      	push	{r7, lr}
70107db2:	b084      	sub	sp, #16
70107db4:	af00      	add	r7, sp, #0
70107db6:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
70107db8:	2300      	movs	r3, #0
70107dba:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
70107dbc:	6878      	ldr	r0, [r7, #4]
70107dbe:	f7fa fe5d 	bl	70102a7c <LL_RCC_GetI3CClockSource>
70107dc2:	4603      	mov	r3, r0
70107dc4:	4a86      	ldr	r2, [pc, #536]	@ (70107fe0 <RCCEx_GetI3CCLKFreq+0x230>)
70107dc6:	4293      	cmp	r3, r2
70107dc8:	f000 80e6 	beq.w	70107f98 <RCCEx_GetI3CCLKFreq+0x1e8>
70107dcc:	4a84      	ldr	r2, [pc, #528]	@ (70107fe0 <RCCEx_GetI3CCLKFreq+0x230>)
70107dce:	4293      	cmp	r3, r2
70107dd0:	f200 80f8 	bhi.w	70107fc4 <RCCEx_GetI3CCLKFreq+0x214>
70107dd4:	4a83      	ldr	r2, [pc, #524]	@ (70107fe4 <RCCEx_GetI3CCLKFreq+0x234>)
70107dd6:	4293      	cmp	r3, r2
70107dd8:	f000 80de 	beq.w	70107f98 <RCCEx_GetI3CCLKFreq+0x1e8>
70107ddc:	4a81      	ldr	r2, [pc, #516]	@ (70107fe4 <RCCEx_GetI3CCLKFreq+0x234>)
70107dde:	4293      	cmp	r3, r2
70107de0:	f200 80f0 	bhi.w	70107fc4 <RCCEx_GetI3CCLKFreq+0x214>
70107de4:	4a80      	ldr	r2, [pc, #512]	@ (70107fe8 <RCCEx_GetI3CCLKFreq+0x238>)
70107de6:	4293      	cmp	r3, r2
70107de8:	f000 80e4 	beq.w	70107fb4 <RCCEx_GetI3CCLKFreq+0x204>
70107dec:	4a7e      	ldr	r2, [pc, #504]	@ (70107fe8 <RCCEx_GetI3CCLKFreq+0x238>)
70107dee:	4293      	cmp	r3, r2
70107df0:	f200 80e8 	bhi.w	70107fc4 <RCCEx_GetI3CCLKFreq+0x214>
70107df4:	4a7d      	ldr	r2, [pc, #500]	@ (70107fec <RCCEx_GetI3CCLKFreq+0x23c>)
70107df6:	4293      	cmp	r3, r2
70107df8:	f000 80dc 	beq.w	70107fb4 <RCCEx_GetI3CCLKFreq+0x204>
70107dfc:	4a7b      	ldr	r2, [pc, #492]	@ (70107fec <RCCEx_GetI3CCLKFreq+0x23c>)
70107dfe:	4293      	cmp	r3, r2
70107e00:	f200 80e0 	bhi.w	70107fc4 <RCCEx_GetI3CCLKFreq+0x214>
70107e04:	4a7a      	ldr	r2, [pc, #488]	@ (70107ff0 <RCCEx_GetI3CCLKFreq+0x240>)
70107e06:	4293      	cmp	r3, r2
70107e08:	f000 8083 	beq.w	70107f12 <RCCEx_GetI3CCLKFreq+0x162>
70107e0c:	4a78      	ldr	r2, [pc, #480]	@ (70107ff0 <RCCEx_GetI3CCLKFreq+0x240>)
70107e0e:	4293      	cmp	r3, r2
70107e10:	f200 80d8 	bhi.w	70107fc4 <RCCEx_GetI3CCLKFreq+0x214>
70107e14:	4a77      	ldr	r2, [pc, #476]	@ (70107ff4 <RCCEx_GetI3CCLKFreq+0x244>)
70107e16:	4293      	cmp	r3, r2
70107e18:	d07b      	beq.n	70107f12 <RCCEx_GetI3CCLKFreq+0x162>
70107e1a:	4a76      	ldr	r2, [pc, #472]	@ (70107ff4 <RCCEx_GetI3CCLKFreq+0x244>)
70107e1c:	4293      	cmp	r3, r2
70107e1e:	f200 80d1 	bhi.w	70107fc4 <RCCEx_GetI3CCLKFreq+0x214>
70107e22:	4a75      	ldr	r2, [pc, #468]	@ (70107ff8 <RCCEx_GetI3CCLKFreq+0x248>)
70107e24:	4293      	cmp	r3, r2
70107e26:	d030      	beq.n	70107e8a <RCCEx_GetI3CCLKFreq+0xda>
70107e28:	4a73      	ldr	r2, [pc, #460]	@ (70107ff8 <RCCEx_GetI3CCLKFreq+0x248>)
70107e2a:	4293      	cmp	r3, r2
70107e2c:	f200 80ca 	bhi.w	70107fc4 <RCCEx_GetI3CCLKFreq+0x214>
70107e30:	4a72      	ldr	r2, [pc, #456]	@ (70107ffc <RCCEx_GetI3CCLKFreq+0x24c>)
70107e32:	4293      	cmp	r3, r2
70107e34:	d029      	beq.n	70107e8a <RCCEx_GetI3CCLKFreq+0xda>
70107e36:	4a71      	ldr	r2, [pc, #452]	@ (70107ffc <RCCEx_GetI3CCLKFreq+0x24c>)
70107e38:	4293      	cmp	r3, r2
70107e3a:	f200 80c3 	bhi.w	70107fc4 <RCCEx_GetI3CCLKFreq+0x214>
70107e3e:	4a70      	ldr	r2, [pc, #448]	@ (70108000 <RCCEx_GetI3CCLKFreq+0x250>)
70107e40:	4293      	cmp	r3, r2
70107e42:	d01d      	beq.n	70107e80 <RCCEx_GetI3CCLKFreq+0xd0>
70107e44:	4a6e      	ldr	r2, [pc, #440]	@ (70108000 <RCCEx_GetI3CCLKFreq+0x250>)
70107e46:	4293      	cmp	r3, r2
70107e48:	f200 80bc 	bhi.w	70107fc4 <RCCEx_GetI3CCLKFreq+0x214>
70107e4c:	4a6d      	ldr	r2, [pc, #436]	@ (70108004 <RCCEx_GetI3CCLKFreq+0x254>)
70107e4e:	4293      	cmp	r3, r2
70107e50:	d016      	beq.n	70107e80 <RCCEx_GetI3CCLKFreq+0xd0>
70107e52:	4a6c      	ldr	r2, [pc, #432]	@ (70108004 <RCCEx_GetI3CCLKFreq+0x254>)
70107e54:	4293      	cmp	r3, r2
70107e56:	f200 80b5 	bhi.w	70107fc4 <RCCEx_GetI3CCLKFreq+0x214>
70107e5a:	4a6b      	ldr	r2, [pc, #428]	@ (70108008 <RCCEx_GetI3CCLKFreq+0x258>)
70107e5c:	4293      	cmp	r3, r2
70107e5e:	d003      	beq.n	70107e68 <RCCEx_GetI3CCLKFreq+0xb8>
70107e60:	4a6a      	ldr	r2, [pc, #424]	@ (7010800c <RCCEx_GetI3CCLKFreq+0x25c>)
70107e62:	4293      	cmp	r3, r2
70107e64:	f040 80ae 	bne.w	70107fc4 <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
70107e68:	f7fa f9e0 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70107e6c:	4603      	mov	r3, r0
70107e6e:	4618      	mov	r0, r3
70107e70:	f7fe fe42 	bl	70106af8 <RCCEx_GetHCLKFreq>
70107e74:	4603      	mov	r3, r0
70107e76:	4618      	mov	r0, r3
70107e78:	f7fe fe4f 	bl	70106b1a <RCCEx_GetPCLK1Freq>
70107e7c:	60f8      	str	r0, [r7, #12]
      break;
70107e7e:	e0aa      	b.n	70107fd6 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70107e80:	2007      	movs	r0, #7
70107e82:	f7ff f925 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70107e86:	60f8      	str	r0, [r7, #12]
      break;
70107e88:	e0a5      	b.n	70107fd6 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
70107e8a:	f7fb fb09 	bl	701034a0 <LL_RCC_IC10_IsEnabled>
70107e8e:	4603      	mov	r3, r0
70107e90:	2b00      	cmp	r3, #0
70107e92:	f000 8099 	beq.w	70107fc8 <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
70107e96:	f7fb fb25 	bl	701034e4 <LL_RCC_IC10_GetDivider>
70107e9a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
70107e9c:	f7fb fb14 	bl	701034c8 <LL_RCC_IC10_GetSource>
70107ea0:	4603      	mov	r3, r0
70107ea2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107ea6:	d029      	beq.n	70107efc <RCCEx_GetI3CCLKFreq+0x14c>
70107ea8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107eac:	d82f      	bhi.n	70107f0e <RCCEx_GetI3CCLKFreq+0x15e>
70107eae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107eb2:	d01a      	beq.n	70107eea <RCCEx_GetI3CCLKFreq+0x13a>
70107eb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107eb8:	d829      	bhi.n	70107f0e <RCCEx_GetI3CCLKFreq+0x15e>
70107eba:	2b00      	cmp	r3, #0
70107ebc:	d003      	beq.n	70107ec6 <RCCEx_GetI3CCLKFreq+0x116>
70107ebe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70107ec2:	d009      	beq.n	70107ed8 <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70107ec4:	e023      	b.n	70107f0e <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70107ec6:	f7fe fcff 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70107eca:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
70107ecc:	68fa      	ldr	r2, [r7, #12]
70107ece:	68bb      	ldr	r3, [r7, #8]
70107ed0:	fbb2 f3f3 	udiv	r3, r2, r3
70107ed4:	60fb      	str	r3, [r7, #12]
            break;
70107ed6:	e01b      	b.n	70107f10 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70107ed8:	f7fe fd3c 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70107edc:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
70107ede:	68fa      	ldr	r2, [r7, #12]
70107ee0:	68bb      	ldr	r3, [r7, #8]
70107ee2:	fbb2 f3f3 	udiv	r3, r2, r3
70107ee6:	60fb      	str	r3, [r7, #12]
            break;
70107ee8:	e012      	b.n	70107f10 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70107eea:	f7fe fd79 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70107eee:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
70107ef0:	68fa      	ldr	r2, [r7, #12]
70107ef2:	68bb      	ldr	r3, [r7, #8]
70107ef4:	fbb2 f3f3 	udiv	r3, r2, r3
70107ef8:	60fb      	str	r3, [r7, #12]
            break;
70107efa:	e009      	b.n	70107f10 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70107efc:	f7fe fdb6 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70107f00:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
70107f02:	68fa      	ldr	r2, [r7, #12]
70107f04:	68bb      	ldr	r3, [r7, #8]
70107f06:	fbb2 f3f3 	udiv	r3, r2, r3
70107f0a:	60fb      	str	r3, [r7, #12]
            break;
70107f0c:	e000      	b.n	70107f10 <RCCEx_GetI3CCLKFreq+0x160>
            break;
70107f0e:	bf00      	nop
        }
      }
      break;
70107f10:	e05a      	b.n	70107fc8 <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
70107f12:	f7fb fbc5 	bl	701036a0 <LL_RCC_IC15_IsEnabled>
70107f16:	4603      	mov	r3, r0
70107f18:	2b00      	cmp	r3, #0
70107f1a:	d057      	beq.n	70107fcc <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
70107f1c:	f7fb fbe2 	bl	701036e4 <LL_RCC_IC15_GetDivider>
70107f20:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
70107f22:	f7fb fbd1 	bl	701036c8 <LL_RCC_IC15_GetSource>
70107f26:	4603      	mov	r3, r0
70107f28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107f2c:	d029      	beq.n	70107f82 <RCCEx_GetI3CCLKFreq+0x1d2>
70107f2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70107f32:	d82f      	bhi.n	70107f94 <RCCEx_GetI3CCLKFreq+0x1e4>
70107f34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107f38:	d01a      	beq.n	70107f70 <RCCEx_GetI3CCLKFreq+0x1c0>
70107f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70107f3e:	d829      	bhi.n	70107f94 <RCCEx_GetI3CCLKFreq+0x1e4>
70107f40:	2b00      	cmp	r3, #0
70107f42:	d003      	beq.n	70107f4c <RCCEx_GetI3CCLKFreq+0x19c>
70107f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70107f48:	d009      	beq.n	70107f5e <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70107f4a:	e023      	b.n	70107f94 <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70107f4c:	f7fe fcbc 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70107f50:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
70107f52:	68fa      	ldr	r2, [r7, #12]
70107f54:	68bb      	ldr	r3, [r7, #8]
70107f56:	fbb2 f3f3 	udiv	r3, r2, r3
70107f5a:	60fb      	str	r3, [r7, #12]
            break;
70107f5c:	e01b      	b.n	70107f96 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70107f5e:	f7fe fcf9 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70107f62:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
70107f64:	68fa      	ldr	r2, [r7, #12]
70107f66:	68bb      	ldr	r3, [r7, #8]
70107f68:	fbb2 f3f3 	udiv	r3, r2, r3
70107f6c:	60fb      	str	r3, [r7, #12]
            break;
70107f6e:	e012      	b.n	70107f96 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70107f70:	f7fe fd36 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70107f74:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
70107f76:	68fa      	ldr	r2, [r7, #12]
70107f78:	68bb      	ldr	r3, [r7, #8]
70107f7a:	fbb2 f3f3 	udiv	r3, r2, r3
70107f7e:	60fb      	str	r3, [r7, #12]
            break;
70107f80:	e009      	b.n	70107f96 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70107f82:	f7fe fd73 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70107f86:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
70107f88:	68fa      	ldr	r2, [r7, #12]
70107f8a:	68bb      	ldr	r3, [r7, #8]
70107f8c:	fbb2 f3f3 	udiv	r3, r2, r3
70107f90:	60fb      	str	r3, [r7, #12]
            break;
70107f92:	e000      	b.n	70107f96 <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
70107f94:	bf00      	nop
        }
      }
      break;
70107f96:	e019      	b.n	70107fcc <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
70107f98:	f7fa fa1e 	bl	701023d8 <LL_RCC_HSI_IsReady>
70107f9c:	4603      	mov	r3, r0
70107f9e:	2b00      	cmp	r3, #0
70107fa0:	d016      	beq.n	70107fd0 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70107fa2:	f7fa fa2b 	bl	701023fc <LL_RCC_HSI_GetDivider>
70107fa6:	4603      	mov	r3, r0
70107fa8:	09db      	lsrs	r3, r3, #7
70107faa:	4a19      	ldr	r2, [pc, #100]	@ (70108010 <RCCEx_GetI3CCLKFreq+0x260>)
70107fac:	fa22 f303 	lsr.w	r3, r2, r3
70107fb0:	60fb      	str	r3, [r7, #12]
      }
      break;
70107fb2:	e00d      	b.n	70107fd0 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
70107fb4:	f7fa fa30 	bl	70102418 <LL_RCC_MSI_IsReady>
70107fb8:	4603      	mov	r3, r0
70107fba:	2b00      	cmp	r3, #0
70107fbc:	d00a      	beq.n	70107fd4 <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
70107fbe:	4b15      	ldr	r3, [pc, #84]	@ (70108014 <RCCEx_GetI3CCLKFreq+0x264>)
70107fc0:	60fb      	str	r3, [r7, #12]
      }
      break;
70107fc2:	e007      	b.n	70107fd4 <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
70107fc4:	bf00      	nop
70107fc6:	e006      	b.n	70107fd6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
70107fc8:	bf00      	nop
70107fca:	e004      	b.n	70107fd6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
70107fcc:	bf00      	nop
70107fce:	e002      	b.n	70107fd6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
70107fd0:	bf00      	nop
70107fd2:	e000      	b.n	70107fd6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
70107fd4:	bf00      	nop
  }

  return i3c_frequency;
70107fd6:	68fb      	ldr	r3, [r7, #12]
}
70107fd8:	4618      	mov	r0, r3
70107fda:	3710      	adds	r7, #16
70107fdc:	46bd      	mov	sp, r7
70107fde:	bd80      	pop	{r7, pc}
70107fe0:	0705140c 	.word	0x0705140c
70107fe4:	0705100c 	.word	0x0705100c
70107fe8:	0704140c 	.word	0x0704140c
70107fec:	0704100c 	.word	0x0704100c
70107ff0:	0703140c 	.word	0x0703140c
70107ff4:	0703100c 	.word	0x0703100c
70107ff8:	0702140c 	.word	0x0702140c
70107ffc:	0702100c 	.word	0x0702100c
70108000:	0701140c 	.word	0x0701140c
70108004:	0701100c 	.word	0x0701100c
70108008:	0700100c 	.word	0x0700100c
7010800c:	0700140c 	.word	0x0700140c
70108010:	03d09000 	.word	0x03d09000
70108014:	003d0900 	.word	0x003d0900

70108018 <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
70108018:	b590      	push	{r4, r7, lr}
7010801a:	b085      	sub	sp, #20
7010801c:	af00      	add	r7, sp, #0
7010801e:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
70108020:	2300      	movs	r3, #0
70108022:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
70108024:	6878      	ldr	r0, [r7, #4]
70108026:	f7fa fd35 	bl	70102a94 <LL_RCC_GetLPTIMClockSource>
7010802a:	4603      	mov	r3, r0
7010802c:	4aa1      	ldr	r2, [pc, #644]	@ (701082b4 <RCCEx_GetLPTIMCLKFreq+0x29c>)
7010802e:	4293      	cmp	r3, r2
70108030:	f000 8185 	beq.w	7010833e <RCCEx_GetLPTIMCLKFreq+0x326>
70108034:	4a9f      	ldr	r2, [pc, #636]	@ (701082b4 <RCCEx_GetLPTIMCLKFreq+0x29c>)
70108036:	4293      	cmp	r3, r2
70108038:	f200 818b 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010803c:	4a9e      	ldr	r2, [pc, #632]	@ (701082b8 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
7010803e:	4293      	cmp	r3, r2
70108040:	f000 817d 	beq.w	7010833e <RCCEx_GetLPTIMCLKFreq+0x326>
70108044:	4a9c      	ldr	r2, [pc, #624]	@ (701082b8 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
70108046:	4293      	cmp	r3, r2
70108048:	f200 8183 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010804c:	4a9b      	ldr	r2, [pc, #620]	@ (701082bc <RCCEx_GetLPTIMCLKFreq+0x2a4>)
7010804e:	4293      	cmp	r3, r2
70108050:	f000 8175 	beq.w	7010833e <RCCEx_GetLPTIMCLKFreq+0x326>
70108054:	4a99      	ldr	r2, [pc, #612]	@ (701082bc <RCCEx_GetLPTIMCLKFreq+0x2a4>)
70108056:	4293      	cmp	r3, r2
70108058:	f200 817b 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010805c:	4a98      	ldr	r2, [pc, #608]	@ (701082c0 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
7010805e:	4293      	cmp	r3, r2
70108060:	f000 816d 	beq.w	7010833e <RCCEx_GetLPTIMCLKFreq+0x326>
70108064:	4a96      	ldr	r2, [pc, #600]	@ (701082c0 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
70108066:	4293      	cmp	r3, r2
70108068:	f200 8173 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010806c:	4a95      	ldr	r2, [pc, #596]	@ (701082c4 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
7010806e:	4293      	cmp	r3, r2
70108070:	f000 8165 	beq.w	7010833e <RCCEx_GetLPTIMCLKFreq+0x326>
70108074:	4a93      	ldr	r2, [pc, #588]	@ (701082c4 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
70108076:	4293      	cmp	r3, r2
70108078:	f200 816b 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010807c:	4a92      	ldr	r2, [pc, #584]	@ (701082c8 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
7010807e:	4293      	cmp	r3, r2
70108080:	f000 8154 	beq.w	7010832c <RCCEx_GetLPTIMCLKFreq+0x314>
70108084:	4a90      	ldr	r2, [pc, #576]	@ (701082c8 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
70108086:	4293      	cmp	r3, r2
70108088:	f200 8163 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010808c:	4a8f      	ldr	r2, [pc, #572]	@ (701082cc <RCCEx_GetLPTIMCLKFreq+0x2b4>)
7010808e:	4293      	cmp	r3, r2
70108090:	f000 814c 	beq.w	7010832c <RCCEx_GetLPTIMCLKFreq+0x314>
70108094:	4a8d      	ldr	r2, [pc, #564]	@ (701082cc <RCCEx_GetLPTIMCLKFreq+0x2b4>)
70108096:	4293      	cmp	r3, r2
70108098:	f200 815b 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010809c:	4a8c      	ldr	r2, [pc, #560]	@ (701082d0 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
7010809e:	4293      	cmp	r3, r2
701080a0:	f000 8144 	beq.w	7010832c <RCCEx_GetLPTIMCLKFreq+0x314>
701080a4:	4a8a      	ldr	r2, [pc, #552]	@ (701082d0 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
701080a6:	4293      	cmp	r3, r2
701080a8:	f200 8153 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
701080ac:	4a89      	ldr	r2, [pc, #548]	@ (701082d4 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
701080ae:	4293      	cmp	r3, r2
701080b0:	f000 813c 	beq.w	7010832c <RCCEx_GetLPTIMCLKFreq+0x314>
701080b4:	4a87      	ldr	r2, [pc, #540]	@ (701082d4 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
701080b6:	4293      	cmp	r3, r2
701080b8:	f200 814b 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
701080bc:	4a86      	ldr	r2, [pc, #536]	@ (701082d8 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
701080be:	4293      	cmp	r3, r2
701080c0:	f000 8134 	beq.w	7010832c <RCCEx_GetLPTIMCLKFreq+0x314>
701080c4:	4a84      	ldr	r2, [pc, #528]	@ (701082d8 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
701080c6:	4293      	cmp	r3, r2
701080c8:	f200 8143 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
701080cc:	4a83      	ldr	r2, [pc, #524]	@ (701082dc <RCCEx_GetLPTIMCLKFreq+0x2c4>)
701080ce:	4293      	cmp	r3, r2
701080d0:	f000 80e7 	beq.w	701082a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
701080d4:	4a81      	ldr	r2, [pc, #516]	@ (701082dc <RCCEx_GetLPTIMCLKFreq+0x2c4>)
701080d6:	4293      	cmp	r3, r2
701080d8:	f200 813b 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
701080dc:	4a80      	ldr	r2, [pc, #512]	@ (701082e0 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
701080de:	4293      	cmp	r3, r2
701080e0:	f000 80df 	beq.w	701082a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
701080e4:	4a7e      	ldr	r2, [pc, #504]	@ (701082e0 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
701080e6:	4293      	cmp	r3, r2
701080e8:	f200 8133 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
701080ec:	4a7d      	ldr	r2, [pc, #500]	@ (701082e4 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
701080ee:	4293      	cmp	r3, r2
701080f0:	f000 80d7 	beq.w	701082a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
701080f4:	4a7b      	ldr	r2, [pc, #492]	@ (701082e4 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
701080f6:	4293      	cmp	r3, r2
701080f8:	f200 812b 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
701080fc:	4a7a      	ldr	r2, [pc, #488]	@ (701082e8 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
701080fe:	4293      	cmp	r3, r2
70108100:	f000 80cf 	beq.w	701082a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
70108104:	4a78      	ldr	r2, [pc, #480]	@ (701082e8 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
70108106:	4293      	cmp	r3, r2
70108108:	f200 8123 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010810c:	4a77      	ldr	r2, [pc, #476]	@ (701082ec <RCCEx_GetLPTIMCLKFreq+0x2d4>)
7010810e:	4293      	cmp	r3, r2
70108110:	f000 80c7 	beq.w	701082a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
70108114:	4a75      	ldr	r2, [pc, #468]	@ (701082ec <RCCEx_GetLPTIMCLKFreq+0x2d4>)
70108116:	4293      	cmp	r3, r2
70108118:	f200 811b 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010811c:	4a74      	ldr	r2, [pc, #464]	@ (701082f0 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
7010811e:	4293      	cmp	r3, r2
70108120:	d07b      	beq.n	7010821a <RCCEx_GetLPTIMCLKFreq+0x202>
70108122:	4a73      	ldr	r2, [pc, #460]	@ (701082f0 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
70108124:	4293      	cmp	r3, r2
70108126:	f200 8114 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010812a:	4a72      	ldr	r2, [pc, #456]	@ (701082f4 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
7010812c:	4293      	cmp	r3, r2
7010812e:	d074      	beq.n	7010821a <RCCEx_GetLPTIMCLKFreq+0x202>
70108130:	4a70      	ldr	r2, [pc, #448]	@ (701082f4 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
70108132:	4293      	cmp	r3, r2
70108134:	f200 810d 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
70108138:	4a6f      	ldr	r2, [pc, #444]	@ (701082f8 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
7010813a:	4293      	cmp	r3, r2
7010813c:	d06d      	beq.n	7010821a <RCCEx_GetLPTIMCLKFreq+0x202>
7010813e:	4a6e      	ldr	r2, [pc, #440]	@ (701082f8 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
70108140:	4293      	cmp	r3, r2
70108142:	f200 8106 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
70108146:	4a6d      	ldr	r2, [pc, #436]	@ (701082fc <RCCEx_GetLPTIMCLKFreq+0x2e4>)
70108148:	4293      	cmp	r3, r2
7010814a:	d066      	beq.n	7010821a <RCCEx_GetLPTIMCLKFreq+0x202>
7010814c:	4a6b      	ldr	r2, [pc, #428]	@ (701082fc <RCCEx_GetLPTIMCLKFreq+0x2e4>)
7010814e:	4293      	cmp	r3, r2
70108150:	f200 80ff 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
70108154:	4a6a      	ldr	r2, [pc, #424]	@ (70108300 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
70108156:	4293      	cmp	r3, r2
70108158:	d05f      	beq.n	7010821a <RCCEx_GetLPTIMCLKFreq+0x202>
7010815a:	4a69      	ldr	r2, [pc, #420]	@ (70108300 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
7010815c:	4293      	cmp	r3, r2
7010815e:	f200 80f8 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
70108162:	4a68      	ldr	r2, [pc, #416]	@ (70108304 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
70108164:	4293      	cmp	r3, r2
70108166:	d053      	beq.n	70108210 <RCCEx_GetLPTIMCLKFreq+0x1f8>
70108168:	4a66      	ldr	r2, [pc, #408]	@ (70108304 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
7010816a:	4293      	cmp	r3, r2
7010816c:	f200 80f1 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
70108170:	4a65      	ldr	r2, [pc, #404]	@ (70108308 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
70108172:	4293      	cmp	r3, r2
70108174:	d04c      	beq.n	70108210 <RCCEx_GetLPTIMCLKFreq+0x1f8>
70108176:	4a64      	ldr	r2, [pc, #400]	@ (70108308 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
70108178:	4293      	cmp	r3, r2
7010817a:	f200 80ea 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010817e:	4a63      	ldr	r2, [pc, #396]	@ (7010830c <RCCEx_GetLPTIMCLKFreq+0x2f4>)
70108180:	4293      	cmp	r3, r2
70108182:	d045      	beq.n	70108210 <RCCEx_GetLPTIMCLKFreq+0x1f8>
70108184:	4a61      	ldr	r2, [pc, #388]	@ (7010830c <RCCEx_GetLPTIMCLKFreq+0x2f4>)
70108186:	4293      	cmp	r3, r2
70108188:	f200 80e3 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010818c:	4a60      	ldr	r2, [pc, #384]	@ (70108310 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
7010818e:	4293      	cmp	r3, r2
70108190:	d03e      	beq.n	70108210 <RCCEx_GetLPTIMCLKFreq+0x1f8>
70108192:	4a5f      	ldr	r2, [pc, #380]	@ (70108310 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
70108194:	4293      	cmp	r3, r2
70108196:	f200 80dc 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
7010819a:	4a5e      	ldr	r2, [pc, #376]	@ (70108314 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
7010819c:	4293      	cmp	r3, r2
7010819e:	d037      	beq.n	70108210 <RCCEx_GetLPTIMCLKFreq+0x1f8>
701081a0:	4a5c      	ldr	r2, [pc, #368]	@ (70108314 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
701081a2:	4293      	cmp	r3, r2
701081a4:	f200 80d5 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
701081a8:	4a5b      	ldr	r2, [pc, #364]	@ (70108318 <RCCEx_GetLPTIMCLKFreq+0x300>)
701081aa:	4293      	cmp	r3, r2
701081ac:	d024      	beq.n	701081f8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
701081ae:	4a5a      	ldr	r2, [pc, #360]	@ (70108318 <RCCEx_GetLPTIMCLKFreq+0x300>)
701081b0:	4293      	cmp	r3, r2
701081b2:	f200 80ce 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
701081b6:	4a59      	ldr	r2, [pc, #356]	@ (7010831c <RCCEx_GetLPTIMCLKFreq+0x304>)
701081b8:	4293      	cmp	r3, r2
701081ba:	d01d      	beq.n	701081f8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
701081bc:	4a57      	ldr	r2, [pc, #348]	@ (7010831c <RCCEx_GetLPTIMCLKFreq+0x304>)
701081be:	4293      	cmp	r3, r2
701081c0:	f200 80c7 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
701081c4:	4a56      	ldr	r2, [pc, #344]	@ (70108320 <RCCEx_GetLPTIMCLKFreq+0x308>)
701081c6:	4293      	cmp	r3, r2
701081c8:	d016      	beq.n	701081f8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
701081ca:	4a55      	ldr	r2, [pc, #340]	@ (70108320 <RCCEx_GetLPTIMCLKFreq+0x308>)
701081cc:	4293      	cmp	r3, r2
701081ce:	f200 80c0 	bhi.w	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
701081d2:	4a54      	ldr	r2, [pc, #336]	@ (70108324 <RCCEx_GetLPTIMCLKFreq+0x30c>)
701081d4:	4293      	cmp	r3, r2
701081d6:	d003      	beq.n	701081e0 <RCCEx_GetLPTIMCLKFreq+0x1c8>
701081d8:	4a53      	ldr	r2, [pc, #332]	@ (70108328 <RCCEx_GetLPTIMCLKFreq+0x310>)
701081da:	4293      	cmp	r3, r2
701081dc:	d00c      	beq.n	701081f8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
701081de:	e0b8      	b.n	70108352 <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
701081e0:	f7fa f824 	bl	7010222c <HAL_RCC_GetSysClockFreq>
701081e4:	4603      	mov	r3, r0
701081e6:	4618      	mov	r0, r3
701081e8:	f7fe fc86 	bl	70106af8 <RCCEx_GetHCLKFreq>
701081ec:	4603      	mov	r3, r0
701081ee:	4618      	mov	r0, r3
701081f0:	f7fe fc93 	bl	70106b1a <RCCEx_GetPCLK1Freq>
701081f4:	60f8      	str	r0, [r7, #12]
      break;
701081f6:	e0b3      	b.n	70108360 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
701081f8:	f7fa f818 	bl	7010222c <HAL_RCC_GetSysClockFreq>
701081fc:	4603      	mov	r3, r0
701081fe:	4618      	mov	r0, r3
70108200:	f7fe fc7a 	bl	70106af8 <RCCEx_GetHCLKFreq>
70108204:	4603      	mov	r3, r0
70108206:	4618      	mov	r0, r3
70108208:	f7fe fca8 	bl	70106b5c <RCCEx_GetPCLK4Freq>
7010820c:	60f8      	str	r0, [r7, #12]
      break;
7010820e:	e0a7      	b.n	70108360 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70108210:	2007      	movs	r0, #7
70108212:	f7fe ff5d 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70108216:	60f8      	str	r0, [r7, #12]
      break;
70108218:	e0a2      	b.n	70108360 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
7010821a:	f7fb fa41 	bl	701036a0 <LL_RCC_IC15_IsEnabled>
7010821e:	4603      	mov	r3, r0
70108220:	2b00      	cmp	r3, #0
70108222:	f000 8098 	beq.w	70108356 <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
70108226:	f7fb fa5d 	bl	701036e4 <LL_RCC_IC15_GetDivider>
7010822a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
7010822c:	f7fb fa4c 	bl	701036c8 <LL_RCC_IC15_GetSource>
70108230:	4603      	mov	r3, r0
70108232:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108236:	d029      	beq.n	7010828c <RCCEx_GetLPTIMCLKFreq+0x274>
70108238:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010823c:	d82f      	bhi.n	7010829e <RCCEx_GetLPTIMCLKFreq+0x286>
7010823e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108242:	d01a      	beq.n	7010827a <RCCEx_GetLPTIMCLKFreq+0x262>
70108244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108248:	d829      	bhi.n	7010829e <RCCEx_GetLPTIMCLKFreq+0x286>
7010824a:	2b00      	cmp	r3, #0
7010824c:	d003      	beq.n	70108256 <RCCEx_GetLPTIMCLKFreq+0x23e>
7010824e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70108252:	d009      	beq.n	70108268 <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
70108254:	e023      	b.n	7010829e <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70108256:	f7fe fb37 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
7010825a:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
7010825c:	68fa      	ldr	r2, [r7, #12]
7010825e:	68bb      	ldr	r3, [r7, #8]
70108260:	fbb2 f3f3 	udiv	r3, r2, r3
70108264:	60fb      	str	r3, [r7, #12]
            break;
70108266:	e01b      	b.n	701082a0 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70108268:	f7fe fb74 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
7010826c:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
7010826e:	68fa      	ldr	r2, [r7, #12]
70108270:	68bb      	ldr	r3, [r7, #8]
70108272:	fbb2 f3f3 	udiv	r3, r2, r3
70108276:	60fb      	str	r3, [r7, #12]
            break;
70108278:	e012      	b.n	701082a0 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
7010827a:	f7fe fbb1 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010827e:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
70108280:	68fa      	ldr	r2, [r7, #12]
70108282:	68bb      	ldr	r3, [r7, #8]
70108284:	fbb2 f3f3 	udiv	r3, r2, r3
70108288:	60fb      	str	r3, [r7, #12]
            break;
7010828a:	e009      	b.n	701082a0 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
7010828c:	f7fe fbee 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70108290:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
70108292:	68fa      	ldr	r2, [r7, #12]
70108294:	68bb      	ldr	r3, [r7, #8]
70108296:	fbb2 f3f3 	udiv	r3, r2, r3
7010829a:	60fb      	str	r3, [r7, #12]
            break;
7010829c:	e000      	b.n	701082a0 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
7010829e:	bf00      	nop
      break;
701082a0:	e059      	b.n	70108356 <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
701082a2:	f7fa f8d9 	bl	70102458 <LL_RCC_LSE_IsReady>
701082a6:	4603      	mov	r3, r0
701082a8:	2b00      	cmp	r3, #0
701082aa:	d056      	beq.n	7010835a <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
701082ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
701082b0:	60fb      	str	r3, [r7, #12]
      break;
701082b2:	e052      	b.n	7010835a <RCCEx_GetLPTIMCLKFreq+0x342>
701082b4:	0705182c 	.word	0x0705182c
701082b8:	0705142c 	.word	0x0705142c
701082bc:	0705102c 	.word	0x0705102c
701082c0:	07050c2c 	.word	0x07050c2c
701082c4:	0705082c 	.word	0x0705082c
701082c8:	0704182c 	.word	0x0704182c
701082cc:	0704142c 	.word	0x0704142c
701082d0:	0704102c 	.word	0x0704102c
701082d4:	07040c2c 	.word	0x07040c2c
701082d8:	0704082c 	.word	0x0704082c
701082dc:	0703182c 	.word	0x0703182c
701082e0:	0703142c 	.word	0x0703142c
701082e4:	0703102c 	.word	0x0703102c
701082e8:	07030c2c 	.word	0x07030c2c
701082ec:	0703082c 	.word	0x0703082c
701082f0:	0702182c 	.word	0x0702182c
701082f4:	0702142c 	.word	0x0702142c
701082f8:	0702102c 	.word	0x0702102c
701082fc:	07020c2c 	.word	0x07020c2c
70108300:	0702082c 	.word	0x0702082c
70108304:	0701182c 	.word	0x0701182c
70108308:	0701142c 	.word	0x0701142c
7010830c:	0701102c 	.word	0x0701102c
70108310:	07010c2c 	.word	0x07010c2c
70108314:	0701082c 	.word	0x0701082c
70108318:	0700182c 	.word	0x0700182c
7010831c:	0700142c 	.word	0x0700142c
70108320:	0700102c 	.word	0x0700102c
70108324:	0700082c 	.word	0x0700082c
70108328:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
7010832c:	f7fa f8a6 	bl	7010247c <LL_RCC_LSI_IsReady>
70108330:	4603      	mov	r3, r0
70108332:	2b00      	cmp	r3, #0
70108334:	d013      	beq.n	7010835e <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
70108336:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
7010833a:	60fb      	str	r3, [r7, #12]
      break;
7010833c:	e00f      	b.n	7010835e <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
7010833e:	f7f9 ff75 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70108342:	4604      	mov	r4, r0
70108344:	f7fa fcb0 	bl	70102ca8 <LL_RCC_GetTIMPrescaler>
70108348:	4603      	mov	r3, r0
7010834a:	fa24 f303 	lsr.w	r3, r4, r3
7010834e:	60fb      	str	r3, [r7, #12]
      break;
70108350:	e006      	b.n	70108360 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
70108352:	bf00      	nop
70108354:	e004      	b.n	70108360 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
70108356:	bf00      	nop
70108358:	e002      	b.n	70108360 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
7010835a:	bf00      	nop
7010835c:	e000      	b.n	70108360 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
7010835e:	bf00      	nop
  }

  return lptim_frequency;
70108360:	68fb      	ldr	r3, [r7, #12]
}
70108362:	4618      	mov	r0, r3
70108364:	3714      	adds	r7, #20
70108366:	46bd      	mov	sp, r7
70108368:	bd90      	pop	{r4, r7, pc}
7010836a:	bf00      	nop

7010836c <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
7010836c:	b580      	push	{r7, lr}
7010836e:	b084      	sub	sp, #16
70108370:	af00      	add	r7, sp, #0
70108372:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
70108374:	2300      	movs	r3, #0
70108376:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
70108378:	6878      	ldr	r0, [r7, #4]
7010837a:	f7fa fb97 	bl	70102aac <LL_RCC_GetLPUARTClockSource>
7010837e:	4603      	mov	r3, r0
70108380:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
70108384:	f000 80c0 	beq.w	70108508 <RCCEx_GetLPUARTCLKFreq+0x19c>
70108388:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
7010838c:	f200 80db 	bhi.w	70108546 <RCCEx_GetLPUARTCLKFreq+0x1da>
70108390:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
70108394:	f000 80c6 	beq.w	70108524 <RCCEx_GetLPUARTCLKFreq+0x1b8>
70108398:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
7010839c:	f200 80d3 	bhi.w	70108546 <RCCEx_GetLPUARTCLKFreq+0x1da>
701083a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
701083a4:	f000 80c6 	beq.w	70108534 <RCCEx_GetLPUARTCLKFreq+0x1c8>
701083a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
701083ac:	f200 80cb 	bhi.w	70108546 <RCCEx_GetLPUARTCLKFreq+0x1da>
701083b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
701083b4:	d065      	beq.n	70108482 <RCCEx_GetLPUARTCLKFreq+0x116>
701083b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
701083ba:	f200 80c4 	bhi.w	70108546 <RCCEx_GetLPUARTCLKFreq+0x1da>
701083be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
701083c2:	d01a      	beq.n	701083fa <RCCEx_GetLPUARTCLKFreq+0x8e>
701083c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
701083c8:	f200 80bd 	bhi.w	70108546 <RCCEx_GetLPUARTCLKFreq+0x1da>
701083cc:	2b00      	cmp	r3, #0
701083ce:	d003      	beq.n	701083d8 <RCCEx_GetLPUARTCLKFreq+0x6c>
701083d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
701083d4:	d00c      	beq.n	701083f0 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
701083d6:	e0b6      	b.n	70108546 <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
701083d8:	f7f9 ff28 	bl	7010222c <HAL_RCC_GetSysClockFreq>
701083dc:	4603      	mov	r3, r0
701083de:	4618      	mov	r0, r3
701083e0:	f7fe fb8a 	bl	70106af8 <RCCEx_GetHCLKFreq>
701083e4:	4603      	mov	r3, r0
701083e6:	4618      	mov	r0, r3
701083e8:	f7fe fbb8 	bl	70106b5c <RCCEx_GetPCLK4Freq>
701083ec:	60f8      	str	r0, [r7, #12]
      break;
701083ee:	e0b5      	b.n	7010855c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
701083f0:	2007      	movs	r0, #7
701083f2:	f7fe fe6d 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
701083f6:	60f8      	str	r0, [r7, #12]
      break;
701083f8:	e0b0      	b.n	7010855c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
701083fa:	f7fb f811 	bl	70103420 <LL_RCC_IC9_IsEnabled>
701083fe:	4603      	mov	r3, r0
70108400:	2b00      	cmp	r3, #0
70108402:	f000 80a2 	beq.w	7010854a <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
70108406:	f7fb f82d 	bl	70103464 <LL_RCC_IC9_GetDivider>
7010840a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
7010840c:	f7fb f81c 	bl	70103448 <LL_RCC_IC9_GetSource>
70108410:	4603      	mov	r3, r0
70108412:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108416:	d029      	beq.n	7010846c <RCCEx_GetLPUARTCLKFreq+0x100>
70108418:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010841c:	d82f      	bhi.n	7010847e <RCCEx_GetLPUARTCLKFreq+0x112>
7010841e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108422:	d01a      	beq.n	7010845a <RCCEx_GetLPUARTCLKFreq+0xee>
70108424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108428:	d829      	bhi.n	7010847e <RCCEx_GetLPUARTCLKFreq+0x112>
7010842a:	2b00      	cmp	r3, #0
7010842c:	d003      	beq.n	70108436 <RCCEx_GetLPUARTCLKFreq+0xca>
7010842e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70108432:	d009      	beq.n	70108448 <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
70108434:	e023      	b.n	7010847e <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70108436:	f7fe fa47 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
7010843a:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
7010843c:	68fa      	ldr	r2, [r7, #12]
7010843e:	68bb      	ldr	r3, [r7, #8]
70108440:	fbb2 f3f3 	udiv	r3, r2, r3
70108444:	60fb      	str	r3, [r7, #12]
            break;
70108446:	e01b      	b.n	70108480 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70108448:	f7fe fa84 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
7010844c:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
7010844e:	68fa      	ldr	r2, [r7, #12]
70108450:	68bb      	ldr	r3, [r7, #8]
70108452:	fbb2 f3f3 	udiv	r3, r2, r3
70108456:	60fb      	str	r3, [r7, #12]
            break;
70108458:	e012      	b.n	70108480 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
7010845a:	f7fe fac1 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010845e:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
70108460:	68fa      	ldr	r2, [r7, #12]
70108462:	68bb      	ldr	r3, [r7, #8]
70108464:	fbb2 f3f3 	udiv	r3, r2, r3
70108468:	60fb      	str	r3, [r7, #12]
            break;
7010846a:	e009      	b.n	70108480 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
7010846c:	f7fe fafe 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70108470:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
70108472:	68fa      	ldr	r2, [r7, #12]
70108474:	68bb      	ldr	r3, [r7, #8]
70108476:	fbb2 f3f3 	udiv	r3, r2, r3
7010847a:	60fb      	str	r3, [r7, #12]
            break;
7010847c:	e000      	b.n	70108480 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
7010847e:	bf00      	nop
      break;
70108480:	e063      	b.n	7010854a <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
70108482:	f7fb f8cd 	bl	70103620 <LL_RCC_IC14_IsEnabled>
70108486:	4603      	mov	r3, r0
70108488:	2b00      	cmp	r3, #0
7010848a:	d060      	beq.n	7010854e <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
7010848c:	f7fb f8ea 	bl	70103664 <LL_RCC_IC14_GetDivider>
70108490:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
70108492:	f7fb f8d9 	bl	70103648 <LL_RCC_IC14_GetSource>
70108496:	4603      	mov	r3, r0
70108498:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010849c:	d029      	beq.n	701084f2 <RCCEx_GetLPUARTCLKFreq+0x186>
7010849e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701084a2:	d82f      	bhi.n	70108504 <RCCEx_GetLPUARTCLKFreq+0x198>
701084a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701084a8:	d01a      	beq.n	701084e0 <RCCEx_GetLPUARTCLKFreq+0x174>
701084aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701084ae:	d829      	bhi.n	70108504 <RCCEx_GetLPUARTCLKFreq+0x198>
701084b0:	2b00      	cmp	r3, #0
701084b2:	d003      	beq.n	701084bc <RCCEx_GetLPUARTCLKFreq+0x150>
701084b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
701084b8:	d009      	beq.n	701084ce <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
701084ba:	e023      	b.n	70108504 <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
701084bc:	f7fe fa04 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
701084c0:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
701084c2:	68fa      	ldr	r2, [r7, #12]
701084c4:	68bb      	ldr	r3, [r7, #8]
701084c6:	fbb2 f3f3 	udiv	r3, r2, r3
701084ca:	60fb      	str	r3, [r7, #12]
            break;
701084cc:	e01b      	b.n	70108506 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
701084ce:	f7fe fa41 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
701084d2:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
701084d4:	68fa      	ldr	r2, [r7, #12]
701084d6:	68bb      	ldr	r3, [r7, #8]
701084d8:	fbb2 f3f3 	udiv	r3, r2, r3
701084dc:	60fb      	str	r3, [r7, #12]
            break;
701084de:	e012      	b.n	70108506 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
701084e0:	f7fe fa7e 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
701084e4:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
701084e6:	68fa      	ldr	r2, [r7, #12]
701084e8:	68bb      	ldr	r3, [r7, #8]
701084ea:	fbb2 f3f3 	udiv	r3, r2, r3
701084ee:	60fb      	str	r3, [r7, #12]
            break;
701084f0:	e009      	b.n	70108506 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
701084f2:	f7fe fabb 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701084f6:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
701084f8:	68fa      	ldr	r2, [r7, #12]
701084fa:	68bb      	ldr	r3, [r7, #8]
701084fc:	fbb2 f3f3 	udiv	r3, r2, r3
70108500:	60fb      	str	r3, [r7, #12]
            break;
70108502:	e000      	b.n	70108506 <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
70108504:	bf00      	nop
      break;
70108506:	e022      	b.n	7010854e <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
70108508:	f7f9 ff66 	bl	701023d8 <LL_RCC_HSI_IsReady>
7010850c:	4603      	mov	r3, r0
7010850e:	2b00      	cmp	r3, #0
70108510:	d01f      	beq.n	70108552 <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70108512:	f7f9 ff73 	bl	701023fc <LL_RCC_HSI_GetDivider>
70108516:	4603      	mov	r3, r0
70108518:	09db      	lsrs	r3, r3, #7
7010851a:	4a13      	ldr	r2, [pc, #76]	@ (70108568 <RCCEx_GetLPUARTCLKFreq+0x1fc>)
7010851c:	fa22 f303 	lsr.w	r3, r2, r3
70108520:	60fb      	str	r3, [r7, #12]
      break;
70108522:	e016      	b.n	70108552 <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
70108524:	f7f9 ff78 	bl	70102418 <LL_RCC_MSI_IsReady>
70108528:	4603      	mov	r3, r0
7010852a:	2b00      	cmp	r3, #0
7010852c:	d013      	beq.n	70108556 <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
7010852e:	4b0f      	ldr	r3, [pc, #60]	@ (7010856c <RCCEx_GetLPUARTCLKFreq+0x200>)
70108530:	60fb      	str	r3, [r7, #12]
      break;
70108532:	e010      	b.n	70108556 <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
70108534:	f7f9 ff90 	bl	70102458 <LL_RCC_LSE_IsReady>
70108538:	4603      	mov	r3, r0
7010853a:	2b00      	cmp	r3, #0
7010853c:	d00d      	beq.n	7010855a <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
7010853e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
70108542:	60fb      	str	r3, [r7, #12]
      break;
70108544:	e009      	b.n	7010855a <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
70108546:	bf00      	nop
70108548:	e008      	b.n	7010855c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
7010854a:	bf00      	nop
7010854c:	e006      	b.n	7010855c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
7010854e:	bf00      	nop
70108550:	e004      	b.n	7010855c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
70108552:	bf00      	nop
70108554:	e002      	b.n	7010855c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
70108556:	bf00      	nop
70108558:	e000      	b.n	7010855c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
7010855a:	bf00      	nop
  }

  return lpuart_frequency;
7010855c:	68fb      	ldr	r3, [r7, #12]
}
7010855e:	4618      	mov	r0, r3
70108560:	3710      	adds	r7, #16
70108562:	46bd      	mov	sp, r7
70108564:	bd80      	pop	{r7, pc}
70108566:	bf00      	nop
70108568:	03d09000 	.word	0x03d09000
7010856c:	003d0900 	.word	0x003d0900

70108570 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
70108570:	b580      	push	{r7, lr}
70108572:	b084      	sub	sp, #16
70108574:	af00      	add	r7, sp, #0
70108576:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
70108578:	2300      	movs	r3, #0
7010857a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
7010857c:	6878      	ldr	r0, [r7, #4]
7010857e:	f7fa faa7 	bl	70102ad0 <LL_RCC_GetLTDCClockSource>
70108582:	4603      	mov	r3, r0
70108584:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
70108588:	d062      	beq.n	70108650 <RCCEx_GetLTDCCLKFreq+0xe0>
7010858a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
7010858e:	d86d      	bhi.n	7010866c <RCCEx_GetLTDCCLKFreq+0xfc>
70108590:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
70108594:	d019      	beq.n	701085ca <RCCEx_GetLTDCCLKFreq+0x5a>
70108596:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
7010859a:	d867      	bhi.n	7010866c <RCCEx_GetLTDCCLKFreq+0xfc>
7010859c:	2b00      	cmp	r3, #0
7010859e:	d003      	beq.n	701085a8 <RCCEx_GetLTDCCLKFreq+0x38>
701085a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
701085a4:	d00c      	beq.n	701085c0 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
701085a6:	e061      	b.n	7010866c <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
701085a8:	f7f9 fe40 	bl	7010222c <HAL_RCC_GetSysClockFreq>
701085ac:	4603      	mov	r3, r0
701085ae:	4618      	mov	r0, r3
701085b0:	f7fe faa2 	bl	70106af8 <RCCEx_GetHCLKFreq>
701085b4:	4603      	mov	r3, r0
701085b6:	4618      	mov	r0, r3
701085b8:	f7fe fae1 	bl	70106b7e <RCCEx_GetPCLK5Freq>
701085bc:	60f8      	str	r0, [r7, #12]
      break;
701085be:	e05a      	b.n	70108676 <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
701085c0:	2007      	movs	r0, #7
701085c2:	f7fe fd85 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
701085c6:	60f8      	str	r0, [r7, #12]
      break;
701085c8:	e055      	b.n	70108676 <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
701085ca:	f7fb f8a9 	bl	70103720 <LL_RCC_IC16_IsEnabled>
701085ce:	4603      	mov	r3, r0
701085d0:	2b00      	cmp	r3, #0
701085d2:	d04d      	beq.n	70108670 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
701085d4:	f7fb f8c6 	bl	70103764 <LL_RCC_IC16_GetDivider>
701085d8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
701085da:	f7fb f8b5 	bl	70103748 <LL_RCC_IC16_GetSource>
701085de:	4603      	mov	r3, r0
701085e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701085e4:	d029      	beq.n	7010863a <RCCEx_GetLTDCCLKFreq+0xca>
701085e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701085ea:	d82f      	bhi.n	7010864c <RCCEx_GetLTDCCLKFreq+0xdc>
701085ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701085f0:	d01a      	beq.n	70108628 <RCCEx_GetLTDCCLKFreq+0xb8>
701085f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701085f6:	d829      	bhi.n	7010864c <RCCEx_GetLTDCCLKFreq+0xdc>
701085f8:	2b00      	cmp	r3, #0
701085fa:	d003      	beq.n	70108604 <RCCEx_GetLTDCCLKFreq+0x94>
701085fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70108600:	d009      	beq.n	70108616 <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
70108602:	e023      	b.n	7010864c <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70108604:	f7fe f960 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70108608:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
7010860a:	68fa      	ldr	r2, [r7, #12]
7010860c:	68bb      	ldr	r3, [r7, #8]
7010860e:	fbb2 f3f3 	udiv	r3, r2, r3
70108612:	60fb      	str	r3, [r7, #12]
            break;
70108614:	e01b      	b.n	7010864e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70108616:	f7fe f99d 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
7010861a:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
7010861c:	68fa      	ldr	r2, [r7, #12]
7010861e:	68bb      	ldr	r3, [r7, #8]
70108620:	fbb2 f3f3 	udiv	r3, r2, r3
70108624:	60fb      	str	r3, [r7, #12]
            break;
70108626:	e012      	b.n	7010864e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70108628:	f7fe f9da 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010862c:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
7010862e:	68fa      	ldr	r2, [r7, #12]
70108630:	68bb      	ldr	r3, [r7, #8]
70108632:	fbb2 f3f3 	udiv	r3, r2, r3
70108636:	60fb      	str	r3, [r7, #12]
            break;
70108638:	e009      	b.n	7010864e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
7010863a:	f7fe fa17 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
7010863e:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
70108640:	68fa      	ldr	r2, [r7, #12]
70108642:	68bb      	ldr	r3, [r7, #8]
70108644:	fbb2 f3f3 	udiv	r3, r2, r3
70108648:	60fb      	str	r3, [r7, #12]
            break;
7010864a:	e000      	b.n	7010864e <RCCEx_GetLTDCCLKFreq+0xde>
            break;
7010864c:	bf00      	nop
      break;
7010864e:	e00f      	b.n	70108670 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
70108650:	f7f9 fec2 	bl	701023d8 <LL_RCC_HSI_IsReady>
70108654:	4603      	mov	r3, r0
70108656:	2b00      	cmp	r3, #0
70108658:	d00c      	beq.n	70108674 <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
7010865a:	f7f9 fecf 	bl	701023fc <LL_RCC_HSI_GetDivider>
7010865e:	4603      	mov	r3, r0
70108660:	09db      	lsrs	r3, r3, #7
70108662:	4a07      	ldr	r2, [pc, #28]	@ (70108680 <RCCEx_GetLTDCCLKFreq+0x110>)
70108664:	fa22 f303 	lsr.w	r3, r2, r3
70108668:	60fb      	str	r3, [r7, #12]
      break;
7010866a:	e003      	b.n	70108674 <RCCEx_GetLTDCCLKFreq+0x104>
      break;
7010866c:	bf00      	nop
7010866e:	e002      	b.n	70108676 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
70108670:	bf00      	nop
70108672:	e000      	b.n	70108676 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
70108674:	bf00      	nop
  }

  return ltdc_frequency;
70108676:	68fb      	ldr	r3, [r7, #12]
}
70108678:	4618      	mov	r0, r3
7010867a:	3710      	adds	r7, #16
7010867c:	46bd      	mov	sp, r7
7010867e:	bd80      	pop	{r7, pc}
70108680:	03d09000 	.word	0x03d09000

70108684 <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
70108684:	b590      	push	{r4, r7, lr}
70108686:	b085      	sub	sp, #20
70108688:	af00      	add	r7, sp, #0
7010868a:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
7010868c:	2300      	movs	r3, #0
7010868e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
70108690:	6878      	ldr	r0, [r7, #4]
70108692:	f7fa fa2f 	bl	70102af4 <LL_RCC_GetMDFClockSource>
70108696:	4603      	mov	r3, r0
70108698:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
7010869c:	f000 80dd 	beq.w	7010885a <RCCEx_GetMDFCLKFreq+0x1d6>
701086a0:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
701086a4:	f200 80e3 	bhi.w	7010886e <RCCEx_GetMDFCLKFreq+0x1ea>
701086a8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
701086ac:	f000 80d2 	beq.w	70108854 <RCCEx_GetMDFCLKFreq+0x1d0>
701086b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
701086b4:	f200 80db 	bhi.w	7010886e <RCCEx_GetMDFCLKFreq+0x1ea>
701086b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
701086bc:	f000 80b4 	beq.w	70108828 <RCCEx_GetMDFCLKFreq+0x1a4>
701086c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
701086c4:	f200 80d3 	bhi.w	7010886e <RCCEx_GetMDFCLKFreq+0x1ea>
701086c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
701086cc:	f000 80ba 	beq.w	70108844 <RCCEx_GetMDFCLKFreq+0x1c0>
701086d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
701086d4:	f200 80cb 	bhi.w	7010886e <RCCEx_GetMDFCLKFreq+0x1ea>
701086d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
701086dc:	d061      	beq.n	701087a2 <RCCEx_GetMDFCLKFreq+0x11e>
701086de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
701086e2:	f200 80c4 	bhi.w	7010886e <RCCEx_GetMDFCLKFreq+0x1ea>
701086e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
701086ea:	d016      	beq.n	7010871a <RCCEx_GetMDFCLKFreq+0x96>
701086ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
701086f0:	f200 80bd 	bhi.w	7010886e <RCCEx_GetMDFCLKFreq+0x1ea>
701086f4:	2b00      	cmp	r3, #0
701086f6:	d003      	beq.n	70108700 <RCCEx_GetMDFCLKFreq+0x7c>
701086f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
701086fc:	d008      	beq.n	70108710 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
701086fe:	e0b6      	b.n	7010886e <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
70108700:	f7f9 fd94 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70108704:	4603      	mov	r3, r0
70108706:	4618      	mov	r0, r3
70108708:	f7fe f9f6 	bl	70106af8 <RCCEx_GetHCLKFreq>
7010870c:	60f8      	str	r0, [r7, #12]
      break;
7010870e:	e0b7      	b.n	70108880 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70108710:	2007      	movs	r0, #7
70108712:	f7fe fcdd 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70108716:	60f8      	str	r0, [r7, #12]
      break;
70108718:	e0b2      	b.n	70108880 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
7010871a:	f7fa fe01 	bl	70103320 <LL_RCC_IC7_IsEnabled>
7010871e:	4603      	mov	r3, r0
70108720:	2b00      	cmp	r3, #0
70108722:	f000 80a6 	beq.w	70108872 <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
70108726:	f7fa fe1d 	bl	70103364 <LL_RCC_IC7_GetDivider>
7010872a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
7010872c:	f7fa fe0c 	bl	70103348 <LL_RCC_IC7_GetSource>
70108730:	4603      	mov	r3, r0
70108732:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108736:	d029      	beq.n	7010878c <RCCEx_GetMDFCLKFreq+0x108>
70108738:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010873c:	d82f      	bhi.n	7010879e <RCCEx_GetMDFCLKFreq+0x11a>
7010873e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108742:	d01a      	beq.n	7010877a <RCCEx_GetMDFCLKFreq+0xf6>
70108744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108748:	d829      	bhi.n	7010879e <RCCEx_GetMDFCLKFreq+0x11a>
7010874a:	2b00      	cmp	r3, #0
7010874c:	d003      	beq.n	70108756 <RCCEx_GetMDFCLKFreq+0xd2>
7010874e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70108752:	d009      	beq.n	70108768 <RCCEx_GetMDFCLKFreq+0xe4>
            break;
70108754:	e023      	b.n	7010879e <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70108756:	f7fe f8b7 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
7010875a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
7010875c:	68fa      	ldr	r2, [r7, #12]
7010875e:	68bb      	ldr	r3, [r7, #8]
70108760:	fbb2 f3f3 	udiv	r3, r2, r3
70108764:	60fb      	str	r3, [r7, #12]
            break;
70108766:	e01b      	b.n	701087a0 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70108768:	f7fe f8f4 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
7010876c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
7010876e:	68fa      	ldr	r2, [r7, #12]
70108770:	68bb      	ldr	r3, [r7, #8]
70108772:	fbb2 f3f3 	udiv	r3, r2, r3
70108776:	60fb      	str	r3, [r7, #12]
            break;
70108778:	e012      	b.n	701087a0 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
7010877a:	f7fe f931 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010877e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
70108780:	68fa      	ldr	r2, [r7, #12]
70108782:	68bb      	ldr	r3, [r7, #8]
70108784:	fbb2 f3f3 	udiv	r3, r2, r3
70108788:	60fb      	str	r3, [r7, #12]
            break;
7010878a:	e009      	b.n	701087a0 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
7010878c:	f7fe f96e 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70108790:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
70108792:	68fa      	ldr	r2, [r7, #12]
70108794:	68bb      	ldr	r3, [r7, #8]
70108796:	fbb2 f3f3 	udiv	r3, r2, r3
7010879a:	60fb      	str	r3, [r7, #12]
            break;
7010879c:	e000      	b.n	701087a0 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
7010879e:	bf00      	nop
      break;
701087a0:	e067      	b.n	70108872 <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
701087a2:	f7fa fdfd 	bl	701033a0 <LL_RCC_IC8_IsEnabled>
701087a6:	4603      	mov	r3, r0
701087a8:	2b00      	cmp	r3, #0
701087aa:	d064      	beq.n	70108876 <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
701087ac:	f7fa fe1a 	bl	701033e4 <LL_RCC_IC8_GetDivider>
701087b0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
701087b2:	f7fa fe09 	bl	701033c8 <LL_RCC_IC8_GetSource>
701087b6:	4603      	mov	r3, r0
701087b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701087bc:	d029      	beq.n	70108812 <RCCEx_GetMDFCLKFreq+0x18e>
701087be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701087c2:	d82f      	bhi.n	70108824 <RCCEx_GetMDFCLKFreq+0x1a0>
701087c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701087c8:	d01a      	beq.n	70108800 <RCCEx_GetMDFCLKFreq+0x17c>
701087ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701087ce:	d829      	bhi.n	70108824 <RCCEx_GetMDFCLKFreq+0x1a0>
701087d0:	2b00      	cmp	r3, #0
701087d2:	d003      	beq.n	701087dc <RCCEx_GetMDFCLKFreq+0x158>
701087d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
701087d8:	d009      	beq.n	701087ee <RCCEx_GetMDFCLKFreq+0x16a>
            break;
701087da:	e023      	b.n	70108824 <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
701087dc:	f7fe f874 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
701087e0:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
701087e2:	68fa      	ldr	r2, [r7, #12]
701087e4:	68bb      	ldr	r3, [r7, #8]
701087e6:	fbb2 f3f3 	udiv	r3, r2, r3
701087ea:	60fb      	str	r3, [r7, #12]
            break;
701087ec:	e01b      	b.n	70108826 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
701087ee:	f7fe f8b1 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
701087f2:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
701087f4:	68fa      	ldr	r2, [r7, #12]
701087f6:	68bb      	ldr	r3, [r7, #8]
701087f8:	fbb2 f3f3 	udiv	r3, r2, r3
701087fc:	60fb      	str	r3, [r7, #12]
            break;
701087fe:	e012      	b.n	70108826 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70108800:	f7fe f8ee 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70108804:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
70108806:	68fa      	ldr	r2, [r7, #12]
70108808:	68bb      	ldr	r3, [r7, #8]
7010880a:	fbb2 f3f3 	udiv	r3, r2, r3
7010880e:	60fb      	str	r3, [r7, #12]
            break;
70108810:	e009      	b.n	70108826 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70108812:	f7fe f92b 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70108816:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
70108818:	68fa      	ldr	r2, [r7, #12]
7010881a:	68bb      	ldr	r3, [r7, #8]
7010881c:	fbb2 f3f3 	udiv	r3, r2, r3
70108820:	60fb      	str	r3, [r7, #12]
            break;
70108822:	e000      	b.n	70108826 <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
70108824:	bf00      	nop
      break;
70108826:	e026      	b.n	70108876 <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
70108828:	f7f9 fdd6 	bl	701023d8 <LL_RCC_HSI_IsReady>
7010882c:	4603      	mov	r3, r0
7010882e:	2b00      	cmp	r3, #0
70108830:	d023      	beq.n	7010887a <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70108832:	f7f9 fde3 	bl	701023fc <LL_RCC_HSI_GetDivider>
70108836:	4603      	mov	r3, r0
70108838:	09db      	lsrs	r3, r3, #7
7010883a:	4a14      	ldr	r2, [pc, #80]	@ (7010888c <RCCEx_GetMDFCLKFreq+0x208>)
7010883c:	fa22 f303 	lsr.w	r3, r2, r3
70108840:	60fb      	str	r3, [r7, #12]
      break;
70108842:	e01a      	b.n	7010887a <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
70108844:	f7f9 fde8 	bl	70102418 <LL_RCC_MSI_IsReady>
70108848:	4603      	mov	r3, r0
7010884a:	2b00      	cmp	r3, #0
7010884c:	d017      	beq.n	7010887e <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
7010884e:	4b10      	ldr	r3, [pc, #64]	@ (70108890 <RCCEx_GetMDFCLKFreq+0x20c>)
70108850:	60fb      	str	r3, [r7, #12]
      break;
70108852:	e014      	b.n	7010887e <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
70108854:	4b0f      	ldr	r3, [pc, #60]	@ (70108894 <RCCEx_GetMDFCLKFreq+0x210>)
70108856:	60fb      	str	r3, [r7, #12]
      break;
70108858:	e012      	b.n	70108880 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
7010885a:	f7f9 fce7 	bl	7010222c <HAL_RCC_GetSysClockFreq>
7010885e:	4604      	mov	r4, r0
70108860:	f7fa fa22 	bl	70102ca8 <LL_RCC_GetTIMPrescaler>
70108864:	4603      	mov	r3, r0
70108866:	fa24 f303 	lsr.w	r3, r4, r3
7010886a:	60fb      	str	r3, [r7, #12]
      break;
7010886c:	e008      	b.n	70108880 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
7010886e:	bf00      	nop
70108870:	e006      	b.n	70108880 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
70108872:	bf00      	nop
70108874:	e004      	b.n	70108880 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
70108876:	bf00      	nop
70108878:	e002      	b.n	70108880 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
7010887a:	bf00      	nop
7010887c:	e000      	b.n	70108880 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
7010887e:	bf00      	nop
  }

  return adf_frequency;
70108880:	68fb      	ldr	r3, [r7, #12]
}
70108882:	4618      	mov	r0, r3
70108884:	3714      	adds	r7, #20
70108886:	46bd      	mov	sp, r7
70108888:	bd90      	pop	{r4, r7, pc}
7010888a:	bf00      	nop
7010888c:	03d09000 	.word	0x03d09000
70108890:	003d0900 	.word	0x003d0900
70108894:	00bb8000 	.word	0x00bb8000

70108898 <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
70108898:	b580      	push	{r7, lr}
7010889a:	b084      	sub	sp, #16
7010889c:	af00      	add	r7, sp, #0
7010889e:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
701088a0:	2300      	movs	r3, #0
701088a2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
701088a4:	6878      	ldr	r0, [r7, #4]
701088a6:	f7fa f937 	bl	70102b18 <LL_RCC_GetPSSIClockSource>
701088aa:	4603      	mov	r3, r0
701088ac:	2b30      	cmp	r3, #48	@ 0x30
701088ae:	d05a      	beq.n	70108966 <RCCEx_GetPSSICLKFreq+0xce>
701088b0:	2b30      	cmp	r3, #48	@ 0x30
701088b2:	d866      	bhi.n	70108982 <RCCEx_GetPSSICLKFreq+0xea>
701088b4:	2b20      	cmp	r3, #32
701088b6:	d013      	beq.n	701088e0 <RCCEx_GetPSSICLKFreq+0x48>
701088b8:	2b20      	cmp	r3, #32
701088ba:	d862      	bhi.n	70108982 <RCCEx_GetPSSICLKFreq+0xea>
701088bc:	2b00      	cmp	r3, #0
701088be:	d002      	beq.n	701088c6 <RCCEx_GetPSSICLKFreq+0x2e>
701088c0:	2b10      	cmp	r3, #16
701088c2:	d008      	beq.n	701088d6 <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
701088c4:	e05d      	b.n	70108982 <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
701088c6:	f7f9 fcb1 	bl	7010222c <HAL_RCC_GetSysClockFreq>
701088ca:	4603      	mov	r3, r0
701088cc:	4618      	mov	r0, r3
701088ce:	f7fe f913 	bl	70106af8 <RCCEx_GetHCLKFreq>
701088d2:	60f8      	str	r0, [r7, #12]
      break;
701088d4:	e05a      	b.n	7010898c <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
701088d6:	2007      	movs	r0, #7
701088d8:	f7fe fbfa 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
701088dc:	60f8      	str	r0, [r7, #12]
      break;
701088de:	e055      	b.n	7010898c <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
701088e0:	f7fb f81e 	bl	70103920 <LL_RCC_IC20_IsEnabled>
701088e4:	4603      	mov	r3, r0
701088e6:	2b00      	cmp	r3, #0
701088e8:	d04d      	beq.n	70108986 <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
701088ea:	f7fb f83b 	bl	70103964 <LL_RCC_IC20_GetDivider>
701088ee:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
701088f0:	f7fb f82a 	bl	70103948 <LL_RCC_IC20_GetSource>
701088f4:	4603      	mov	r3, r0
701088f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701088fa:	d029      	beq.n	70108950 <RCCEx_GetPSSICLKFreq+0xb8>
701088fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108900:	d82f      	bhi.n	70108962 <RCCEx_GetPSSICLKFreq+0xca>
70108902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108906:	d01a      	beq.n	7010893e <RCCEx_GetPSSICLKFreq+0xa6>
70108908:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010890c:	d829      	bhi.n	70108962 <RCCEx_GetPSSICLKFreq+0xca>
7010890e:	2b00      	cmp	r3, #0
70108910:	d003      	beq.n	7010891a <RCCEx_GetPSSICLKFreq+0x82>
70108912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70108916:	d009      	beq.n	7010892c <RCCEx_GetPSSICLKFreq+0x94>
            break;
70108918:	e023      	b.n	70108962 <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
7010891a:	f7fd ffd5 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
7010891e:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
70108920:	68fa      	ldr	r2, [r7, #12]
70108922:	68bb      	ldr	r3, [r7, #8]
70108924:	fbb2 f3f3 	udiv	r3, r2, r3
70108928:	60fb      	str	r3, [r7, #12]
            break;
7010892a:	e01b      	b.n	70108964 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
7010892c:	f7fe f812 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70108930:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
70108932:	68fa      	ldr	r2, [r7, #12]
70108934:	68bb      	ldr	r3, [r7, #8]
70108936:	fbb2 f3f3 	udiv	r3, r2, r3
7010893a:	60fb      	str	r3, [r7, #12]
            break;
7010893c:	e012      	b.n	70108964 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
7010893e:	f7fe f84f 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70108942:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
70108944:	68fa      	ldr	r2, [r7, #12]
70108946:	68bb      	ldr	r3, [r7, #8]
70108948:	fbb2 f3f3 	udiv	r3, r2, r3
7010894c:	60fb      	str	r3, [r7, #12]
            break;
7010894e:	e009      	b.n	70108964 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70108950:	f7fe f88c 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70108954:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
70108956:	68fa      	ldr	r2, [r7, #12]
70108958:	68bb      	ldr	r3, [r7, #8]
7010895a:	fbb2 f3f3 	udiv	r3, r2, r3
7010895e:	60fb      	str	r3, [r7, #12]
            break;
70108960:	e000      	b.n	70108964 <RCCEx_GetPSSICLKFreq+0xcc>
            break;
70108962:	bf00      	nop
      break;
70108964:	e00f      	b.n	70108986 <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
70108966:	f7f9 fd37 	bl	701023d8 <LL_RCC_HSI_IsReady>
7010896a:	4603      	mov	r3, r0
7010896c:	2b00      	cmp	r3, #0
7010896e:	d00c      	beq.n	7010898a <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70108970:	f7f9 fd44 	bl	701023fc <LL_RCC_HSI_GetDivider>
70108974:	4603      	mov	r3, r0
70108976:	09db      	lsrs	r3, r3, #7
70108978:	4a07      	ldr	r2, [pc, #28]	@ (70108998 <RCCEx_GetPSSICLKFreq+0x100>)
7010897a:	fa22 f303 	lsr.w	r3, r2, r3
7010897e:	60fb      	str	r3, [r7, #12]
      break;
70108980:	e003      	b.n	7010898a <RCCEx_GetPSSICLKFreq+0xf2>
      break;
70108982:	bf00      	nop
70108984:	e002      	b.n	7010898c <RCCEx_GetPSSICLKFreq+0xf4>
      break;
70108986:	bf00      	nop
70108988:	e000      	b.n	7010898c <RCCEx_GetPSSICLKFreq+0xf4>
      break;
7010898a:	bf00      	nop
  }

  return pssi_frequency;
7010898c:	68fb      	ldr	r3, [r7, #12]
}
7010898e:	4618      	mov	r0, r3
70108990:	3710      	adds	r7, #16
70108992:	46bd      	mov	sp, r7
70108994:	bd80      	pop	{r7, pc}
70108996:	bf00      	nop
70108998:	03d09000 	.word	0x03d09000

7010899c <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
7010899c:	b580      	push	{r7, lr}
7010899e:	b082      	sub	sp, #8
701089a0:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
701089a2:	2300      	movs	r3, #0
701089a4:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
701089a6:	f7fa f945 	bl	70102c34 <LL_RCC_GetRTCClockSource>
701089aa:	4603      	mov	r3, r0
701089ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
701089b0:	d020      	beq.n	701089f4 <RCCEx_GetRTCCLKFreq+0x58>
701089b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
701089b6:	d830      	bhi.n	70108a1a <RCCEx_GetRTCCLKFreq+0x7e>
701089b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
701089bc:	d011      	beq.n	701089e2 <RCCEx_GetRTCCLKFreq+0x46>
701089be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
701089c2:	d82a      	bhi.n	70108a1a <RCCEx_GetRTCCLKFreq+0x7e>
701089c4:	2b00      	cmp	r3, #0
701089c6:	d02a      	beq.n	70108a1e <RCCEx_GetRTCCLKFreq+0x82>
701089c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
701089cc:	d000      	beq.n	701089d0 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
701089ce:	e024      	b.n	70108a1a <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
701089d0:	f7f9 fd42 	bl	70102458 <LL_RCC_LSE_IsReady>
701089d4:	4603      	mov	r3, r0
701089d6:	2b00      	cmp	r3, #0
701089d8:	d023      	beq.n	70108a22 <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
701089da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
701089de:	607b      	str	r3, [r7, #4]
      break;
701089e0:	e01f      	b.n	70108a22 <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
701089e2:	f7f9 fd4b 	bl	7010247c <LL_RCC_LSI_IsReady>
701089e6:	4603      	mov	r3, r0
701089e8:	2b00      	cmp	r3, #0
701089ea:	d01c      	beq.n	70108a26 <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
701089ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
701089f0:	607b      	str	r3, [r7, #4]
      break;
701089f2:	e018      	b.n	70108a26 <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
701089f4:	f7f9 fcde 	bl	701023b4 <LL_RCC_HSE_IsReady>
701089f8:	4603      	mov	r3, r0
701089fa:	2b00      	cmp	r3, #0
701089fc:	d015      	beq.n	70108a2a <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
701089fe:	4b0e      	ldr	r3, [pc, #56]	@ (70108a38 <RCCEx_GetRTCCLKFreq+0x9c>)
70108a00:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
70108a04:	0b1b      	lsrs	r3, r3, #12
70108a06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
70108a0a:	3301      	adds	r3, #1
70108a0c:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
70108a0e:	4a0b      	ldr	r2, [pc, #44]	@ (70108a3c <RCCEx_GetRTCCLKFreq+0xa0>)
70108a10:	683b      	ldr	r3, [r7, #0]
70108a12:	fbb2 f3f3 	udiv	r3, r2, r3
70108a16:	607b      	str	r3, [r7, #4]
      break;
70108a18:	e007      	b.n	70108a2a <RCCEx_GetRTCCLKFreq+0x8e>
      break;
70108a1a:	bf00      	nop
70108a1c:	e006      	b.n	70108a2c <RCCEx_GetRTCCLKFreq+0x90>
      break;
70108a1e:	bf00      	nop
70108a20:	e004      	b.n	70108a2c <RCCEx_GetRTCCLKFreq+0x90>
      break;
70108a22:	bf00      	nop
70108a24:	e002      	b.n	70108a2c <RCCEx_GetRTCCLKFreq+0x90>
      break;
70108a26:	bf00      	nop
70108a28:	e000      	b.n	70108a2c <RCCEx_GetRTCCLKFreq+0x90>
      break;
70108a2a:	bf00      	nop
  }

  return rtc_frequency;
70108a2c:	687b      	ldr	r3, [r7, #4]
}
70108a2e:	4618      	mov	r0, r3
70108a30:	3708      	adds	r7, #8
70108a32:	46bd      	mov	sp, r7
70108a34:	bd80      	pop	{r7, pc}
70108a36:	bf00      	nop
70108a38:	56028000 	.word	0x56028000
70108a3c:	016e3600 	.word	0x016e3600

70108a40 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
70108a40:	b580      	push	{r7, lr}
70108a42:	b084      	sub	sp, #16
70108a44:	af00      	add	r7, sp, #0
70108a46:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
70108a48:	2300      	movs	r3, #0
70108a4a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
70108a4c:	6878      	ldr	r0, [r7, #4]
70108a4e:	f7fa f875 	bl	70102b3c <LL_RCC_GetSAIClockSource>
70108a52:	4603      	mov	r3, r0
70108a54:	4a9a      	ldr	r2, [pc, #616]	@ (70108cc0 <RCCEx_GetSAICLKFreq+0x280>)
70108a56:	4293      	cmp	r3, r2
70108a58:	f000 811f 	beq.w	70108c9a <RCCEx_GetSAICLKFreq+0x25a>
70108a5c:	4a98      	ldr	r2, [pc, #608]	@ (70108cc0 <RCCEx_GetSAICLKFreq+0x280>)
70108a5e:	4293      	cmp	r3, r2
70108a60:	f200 8120 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108a64:	4a97      	ldr	r2, [pc, #604]	@ (70108cc4 <RCCEx_GetSAICLKFreq+0x284>)
70108a66:	4293      	cmp	r3, r2
70108a68:	f000 8117 	beq.w	70108c9a <RCCEx_GetSAICLKFreq+0x25a>
70108a6c:	4a95      	ldr	r2, [pc, #596]	@ (70108cc4 <RCCEx_GetSAICLKFreq+0x284>)
70108a6e:	4293      	cmp	r3, r2
70108a70:	f200 8118 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108a74:	4a94      	ldr	r2, [pc, #592]	@ (70108cc8 <RCCEx_GetSAICLKFreq+0x288>)
70108a76:	4293      	cmp	r3, r2
70108a78:	f000 810c 	beq.w	70108c94 <RCCEx_GetSAICLKFreq+0x254>
70108a7c:	4a92      	ldr	r2, [pc, #584]	@ (70108cc8 <RCCEx_GetSAICLKFreq+0x288>)
70108a7e:	4293      	cmp	r3, r2
70108a80:	f200 8110 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108a84:	4a91      	ldr	r2, [pc, #580]	@ (70108ccc <RCCEx_GetSAICLKFreq+0x28c>)
70108a86:	4293      	cmp	r3, r2
70108a88:	f000 8104 	beq.w	70108c94 <RCCEx_GetSAICLKFreq+0x254>
70108a8c:	4a8f      	ldr	r2, [pc, #572]	@ (70108ccc <RCCEx_GetSAICLKFreq+0x28c>)
70108a8e:	4293      	cmp	r3, r2
70108a90:	f200 8108 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108a94:	4a8e      	ldr	r2, [pc, #568]	@ (70108cd0 <RCCEx_GetSAICLKFreq+0x290>)
70108a96:	4293      	cmp	r3, r2
70108a98:	f000 80e6 	beq.w	70108c68 <RCCEx_GetSAICLKFreq+0x228>
70108a9c:	4a8c      	ldr	r2, [pc, #560]	@ (70108cd0 <RCCEx_GetSAICLKFreq+0x290>)
70108a9e:	4293      	cmp	r3, r2
70108aa0:	f200 8100 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108aa4:	4a8b      	ldr	r2, [pc, #556]	@ (70108cd4 <RCCEx_GetSAICLKFreq+0x294>)
70108aa6:	4293      	cmp	r3, r2
70108aa8:	f000 80de 	beq.w	70108c68 <RCCEx_GetSAICLKFreq+0x228>
70108aac:	4a89      	ldr	r2, [pc, #548]	@ (70108cd4 <RCCEx_GetSAICLKFreq+0x294>)
70108aae:	4293      	cmp	r3, r2
70108ab0:	f200 80f8 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108ab4:	4a88      	ldr	r2, [pc, #544]	@ (70108cd8 <RCCEx_GetSAICLKFreq+0x298>)
70108ab6:	4293      	cmp	r3, r2
70108ab8:	f000 80e4 	beq.w	70108c84 <RCCEx_GetSAICLKFreq+0x244>
70108abc:	4a86      	ldr	r2, [pc, #536]	@ (70108cd8 <RCCEx_GetSAICLKFreq+0x298>)
70108abe:	4293      	cmp	r3, r2
70108ac0:	f200 80f0 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108ac4:	4a85      	ldr	r2, [pc, #532]	@ (70108cdc <RCCEx_GetSAICLKFreq+0x29c>)
70108ac6:	4293      	cmp	r3, r2
70108ac8:	f000 80dc 	beq.w	70108c84 <RCCEx_GetSAICLKFreq+0x244>
70108acc:	4a83      	ldr	r2, [pc, #524]	@ (70108cdc <RCCEx_GetSAICLKFreq+0x29c>)
70108ace:	4293      	cmp	r3, r2
70108ad0:	f200 80e8 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108ad4:	4a82      	ldr	r2, [pc, #520]	@ (70108ce0 <RCCEx_GetSAICLKFreq+0x2a0>)
70108ad6:	4293      	cmp	r3, r2
70108ad8:	f000 8083 	beq.w	70108be2 <RCCEx_GetSAICLKFreq+0x1a2>
70108adc:	4a80      	ldr	r2, [pc, #512]	@ (70108ce0 <RCCEx_GetSAICLKFreq+0x2a0>)
70108ade:	4293      	cmp	r3, r2
70108ae0:	f200 80e0 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108ae4:	4a7f      	ldr	r2, [pc, #508]	@ (70108ce4 <RCCEx_GetSAICLKFreq+0x2a4>)
70108ae6:	4293      	cmp	r3, r2
70108ae8:	d07b      	beq.n	70108be2 <RCCEx_GetSAICLKFreq+0x1a2>
70108aea:	4a7e      	ldr	r2, [pc, #504]	@ (70108ce4 <RCCEx_GetSAICLKFreq+0x2a4>)
70108aec:	4293      	cmp	r3, r2
70108aee:	f200 80d9 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108af2:	4a7d      	ldr	r2, [pc, #500]	@ (70108ce8 <RCCEx_GetSAICLKFreq+0x2a8>)
70108af4:	4293      	cmp	r3, r2
70108af6:	d030      	beq.n	70108b5a <RCCEx_GetSAICLKFreq+0x11a>
70108af8:	4a7b      	ldr	r2, [pc, #492]	@ (70108ce8 <RCCEx_GetSAICLKFreq+0x2a8>)
70108afa:	4293      	cmp	r3, r2
70108afc:	f200 80d2 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108b00:	4a7a      	ldr	r2, [pc, #488]	@ (70108cec <RCCEx_GetSAICLKFreq+0x2ac>)
70108b02:	4293      	cmp	r3, r2
70108b04:	d029      	beq.n	70108b5a <RCCEx_GetSAICLKFreq+0x11a>
70108b06:	4a79      	ldr	r2, [pc, #484]	@ (70108cec <RCCEx_GetSAICLKFreq+0x2ac>)
70108b08:	4293      	cmp	r3, r2
70108b0a:	f200 80cb 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108b0e:	4a78      	ldr	r2, [pc, #480]	@ (70108cf0 <RCCEx_GetSAICLKFreq+0x2b0>)
70108b10:	4293      	cmp	r3, r2
70108b12:	d01d      	beq.n	70108b50 <RCCEx_GetSAICLKFreq+0x110>
70108b14:	4a76      	ldr	r2, [pc, #472]	@ (70108cf0 <RCCEx_GetSAICLKFreq+0x2b0>)
70108b16:	4293      	cmp	r3, r2
70108b18:	f200 80c4 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108b1c:	4a75      	ldr	r2, [pc, #468]	@ (70108cf4 <RCCEx_GetSAICLKFreq+0x2b4>)
70108b1e:	4293      	cmp	r3, r2
70108b20:	d016      	beq.n	70108b50 <RCCEx_GetSAICLKFreq+0x110>
70108b22:	4a74      	ldr	r2, [pc, #464]	@ (70108cf4 <RCCEx_GetSAICLKFreq+0x2b4>)
70108b24:	4293      	cmp	r3, r2
70108b26:	f200 80bd 	bhi.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
70108b2a:	4a73      	ldr	r2, [pc, #460]	@ (70108cf8 <RCCEx_GetSAICLKFreq+0x2b8>)
70108b2c:	4293      	cmp	r3, r2
70108b2e:	d003      	beq.n	70108b38 <RCCEx_GetSAICLKFreq+0xf8>
70108b30:	4a72      	ldr	r2, [pc, #456]	@ (70108cfc <RCCEx_GetSAICLKFreq+0x2bc>)
70108b32:	4293      	cmp	r3, r2
70108b34:	f040 80b6 	bne.w	70108ca4 <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
70108b38:	f7f9 fb78 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70108b3c:	4603      	mov	r3, r0
70108b3e:	4618      	mov	r0, r3
70108b40:	f7fd ffda 	bl	70106af8 <RCCEx_GetHCLKFreq>
70108b44:	4603      	mov	r3, r0
70108b46:	4618      	mov	r0, r3
70108b48:	f7fd fff7 	bl	70106b3a <RCCEx_GetPCLK2Freq>
70108b4c:	60f8      	str	r0, [r7, #12]
      break;
70108b4e:	e0b2      	b.n	70108cb6 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70108b50:	2007      	movs	r0, #7
70108b52:	f7fe fabd 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70108b56:	60f8      	str	r0, [r7, #12]
      break;
70108b58:	e0ad      	b.n	70108cb6 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
70108b5a:	f7fa fbe1 	bl	70103320 <LL_RCC_IC7_IsEnabled>
70108b5e:	4603      	mov	r3, r0
70108b60:	2b00      	cmp	r3, #0
70108b62:	f000 80a1 	beq.w	70108ca8 <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
70108b66:	f7fa fbfd 	bl	70103364 <LL_RCC_IC7_GetDivider>
70108b6a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
70108b6c:	f7fa fbec 	bl	70103348 <LL_RCC_IC7_GetSource>
70108b70:	4603      	mov	r3, r0
70108b72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108b76:	d029      	beq.n	70108bcc <RCCEx_GetSAICLKFreq+0x18c>
70108b78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108b7c:	d82f      	bhi.n	70108bde <RCCEx_GetSAICLKFreq+0x19e>
70108b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108b82:	d01a      	beq.n	70108bba <RCCEx_GetSAICLKFreq+0x17a>
70108b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108b88:	d829      	bhi.n	70108bde <RCCEx_GetSAICLKFreq+0x19e>
70108b8a:	2b00      	cmp	r3, #0
70108b8c:	d003      	beq.n	70108b96 <RCCEx_GetSAICLKFreq+0x156>
70108b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70108b92:	d009      	beq.n	70108ba8 <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70108b94:	e023      	b.n	70108bde <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70108b96:	f7fd fe97 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70108b9a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
70108b9c:	68fa      	ldr	r2, [r7, #12]
70108b9e:	68bb      	ldr	r3, [r7, #8]
70108ba0:	fbb2 f3f3 	udiv	r3, r2, r3
70108ba4:	60fb      	str	r3, [r7, #12]
            break;
70108ba6:	e01b      	b.n	70108be0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70108ba8:	f7fd fed4 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70108bac:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
70108bae:	68fa      	ldr	r2, [r7, #12]
70108bb0:	68bb      	ldr	r3, [r7, #8]
70108bb2:	fbb2 f3f3 	udiv	r3, r2, r3
70108bb6:	60fb      	str	r3, [r7, #12]
            break;
70108bb8:	e012      	b.n	70108be0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70108bba:	f7fd ff11 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70108bbe:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
70108bc0:	68fa      	ldr	r2, [r7, #12]
70108bc2:	68bb      	ldr	r3, [r7, #8]
70108bc4:	fbb2 f3f3 	udiv	r3, r2, r3
70108bc8:	60fb      	str	r3, [r7, #12]
            break;
70108bca:	e009      	b.n	70108be0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70108bcc:	f7fd ff4e 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70108bd0:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
70108bd2:	68fa      	ldr	r2, [r7, #12]
70108bd4:	68bb      	ldr	r3, [r7, #8]
70108bd6:	fbb2 f3f3 	udiv	r3, r2, r3
70108bda:	60fb      	str	r3, [r7, #12]
            break;
70108bdc:	e000      	b.n	70108be0 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
70108bde:	bf00      	nop
        }
      }
      break;
70108be0:	e062      	b.n	70108ca8 <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
70108be2:	f7fa fbdd 	bl	701033a0 <LL_RCC_IC8_IsEnabled>
70108be6:	4603      	mov	r3, r0
70108be8:	2b00      	cmp	r3, #0
70108bea:	d05f      	beq.n	70108cac <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
70108bec:	f7fa fbfa 	bl	701033e4 <LL_RCC_IC8_GetDivider>
70108bf0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
70108bf2:	f7fa fbe9 	bl	701033c8 <LL_RCC_IC8_GetSource>
70108bf6:	4603      	mov	r3, r0
70108bf8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108bfc:	d029      	beq.n	70108c52 <RCCEx_GetSAICLKFreq+0x212>
70108bfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108c02:	d82f      	bhi.n	70108c64 <RCCEx_GetSAICLKFreq+0x224>
70108c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108c08:	d01a      	beq.n	70108c40 <RCCEx_GetSAICLKFreq+0x200>
70108c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108c0e:	d829      	bhi.n	70108c64 <RCCEx_GetSAICLKFreq+0x224>
70108c10:	2b00      	cmp	r3, #0
70108c12:	d003      	beq.n	70108c1c <RCCEx_GetSAICLKFreq+0x1dc>
70108c14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70108c18:	d009      	beq.n	70108c2e <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70108c1a:	e023      	b.n	70108c64 <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70108c1c:	f7fd fe54 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70108c20:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
70108c22:	68fa      	ldr	r2, [r7, #12]
70108c24:	68bb      	ldr	r3, [r7, #8]
70108c26:	fbb2 f3f3 	udiv	r3, r2, r3
70108c2a:	60fb      	str	r3, [r7, #12]
            break;
70108c2c:	e01b      	b.n	70108c66 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70108c2e:	f7fd fe91 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70108c32:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
70108c34:	68fa      	ldr	r2, [r7, #12]
70108c36:	68bb      	ldr	r3, [r7, #8]
70108c38:	fbb2 f3f3 	udiv	r3, r2, r3
70108c3c:	60fb      	str	r3, [r7, #12]
            break;
70108c3e:	e012      	b.n	70108c66 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70108c40:	f7fd fece 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70108c44:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
70108c46:	68fa      	ldr	r2, [r7, #12]
70108c48:	68bb      	ldr	r3, [r7, #8]
70108c4a:	fbb2 f3f3 	udiv	r3, r2, r3
70108c4e:	60fb      	str	r3, [r7, #12]
            break;
70108c50:	e009      	b.n	70108c66 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70108c52:	f7fd ff0b 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70108c56:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
70108c58:	68fa      	ldr	r2, [r7, #12]
70108c5a:	68bb      	ldr	r3, [r7, #8]
70108c5c:	fbb2 f3f3 	udiv	r3, r2, r3
70108c60:	60fb      	str	r3, [r7, #12]
            break;
70108c62:	e000      	b.n	70108c66 <RCCEx_GetSAICLKFreq+0x226>
            break;
70108c64:	bf00      	nop
        }
      }
      break;
70108c66:	e021      	b.n	70108cac <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
70108c68:	f7f9 fbb6 	bl	701023d8 <LL_RCC_HSI_IsReady>
70108c6c:	4603      	mov	r3, r0
70108c6e:	2b00      	cmp	r3, #0
70108c70:	d01e      	beq.n	70108cb0 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70108c72:	f7f9 fbc3 	bl	701023fc <LL_RCC_HSI_GetDivider>
70108c76:	4603      	mov	r3, r0
70108c78:	09db      	lsrs	r3, r3, #7
70108c7a:	4a21      	ldr	r2, [pc, #132]	@ (70108d00 <RCCEx_GetSAICLKFreq+0x2c0>)
70108c7c:	fa22 f303 	lsr.w	r3, r2, r3
70108c80:	60fb      	str	r3, [r7, #12]
      }
      break;
70108c82:	e015      	b.n	70108cb0 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
70108c84:	f7f9 fbc8 	bl	70102418 <LL_RCC_MSI_IsReady>
70108c88:	4603      	mov	r3, r0
70108c8a:	2b00      	cmp	r3, #0
70108c8c:	d012      	beq.n	70108cb4 <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
70108c8e:	4b1d      	ldr	r3, [pc, #116]	@ (70108d04 <RCCEx_GetSAICLKFreq+0x2c4>)
70108c90:	60fb      	str	r3, [r7, #12]
      }
      break;
70108c92:	e00f      	b.n	70108cb4 <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
70108c94:	4b1c      	ldr	r3, [pc, #112]	@ (70108d08 <RCCEx_GetSAICLKFreq+0x2c8>)
70108c96:	60fb      	str	r3, [r7, #12]
      break;
70108c98:	e00d      	b.n	70108cb6 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
70108c9a:	2007      	movs	r0, #7
70108c9c:	f000 f920 	bl	70108ee0 <RCCEx_GetSPDIFRXCLKFreq>
70108ca0:	60f8      	str	r0, [r7, #12]
      break;
70108ca2:	e008      	b.n	70108cb6 <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
70108ca4:	bf00      	nop
70108ca6:	e006      	b.n	70108cb6 <RCCEx_GetSAICLKFreq+0x276>
      break;
70108ca8:	bf00      	nop
70108caa:	e004      	b.n	70108cb6 <RCCEx_GetSAICLKFreq+0x276>
      break;
70108cac:	bf00      	nop
70108cae:	e002      	b.n	70108cb6 <RCCEx_GetSAICLKFreq+0x276>
      break;
70108cb0:	bf00      	nop
70108cb2:	e000      	b.n	70108cb6 <RCCEx_GetSAICLKFreq+0x276>
      break;
70108cb4:	bf00      	nop
  }

  return sai_frequency;
70108cb6:	68fb      	ldr	r3, [r7, #12]
}
70108cb8:	4618      	mov	r0, r3
70108cba:	3710      	adds	r7, #16
70108cbc:	46bd      	mov	sp, r7
70108cbe:	bd80      	pop	{r7, pc}
70108cc0:	07071818 	.word	0x07071818
70108cc4:	07071418 	.word	0x07071418
70108cc8:	07061818 	.word	0x07061818
70108ccc:	07061418 	.word	0x07061418
70108cd0:	07051818 	.word	0x07051818
70108cd4:	07051418 	.word	0x07051418
70108cd8:	07041818 	.word	0x07041818
70108cdc:	07041418 	.word	0x07041418
70108ce0:	07031818 	.word	0x07031818
70108ce4:	07031418 	.word	0x07031418
70108ce8:	07021818 	.word	0x07021818
70108cec:	07021418 	.word	0x07021418
70108cf0:	07011818 	.word	0x07011818
70108cf4:	07011418 	.word	0x07011418
70108cf8:	07001418 	.word	0x07001418
70108cfc:	07001818 	.word	0x07001818
70108d00:	03d09000 	.word	0x03d09000
70108d04:	003d0900 	.word	0x003d0900
70108d08:	00bb8000 	.word	0x00bb8000

70108d0c <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
70108d0c:	b580      	push	{r7, lr}
70108d0e:	b084      	sub	sp, #16
70108d10:	af00      	add	r7, sp, #0
70108d12:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
70108d14:	2300      	movs	r3, #0
70108d16:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
70108d18:	6878      	ldr	r0, [r7, #4]
70108d1a:	f7f9 ff1b 	bl	70102b54 <LL_RCC_GetSDMMCClockSource>
70108d1e:	4603      	mov	r3, r0
70108d20:	4a67      	ldr	r2, [pc, #412]	@ (70108ec0 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
70108d22:	4293      	cmp	r3, r2
70108d24:	d07e      	beq.n	70108e24 <RCCEx_GetSDMMCCLKFreq+0x118>
70108d26:	4a66      	ldr	r2, [pc, #408]	@ (70108ec0 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
70108d28:	4293      	cmp	r3, r2
70108d2a:	f200 80be 	bhi.w	70108eaa <RCCEx_GetSDMMCCLKFreq+0x19e>
70108d2e:	4a65      	ldr	r2, [pc, #404]	@ (70108ec4 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
70108d30:	4293      	cmp	r3, r2
70108d32:	d077      	beq.n	70108e24 <RCCEx_GetSDMMCCLKFreq+0x118>
70108d34:	4a63      	ldr	r2, [pc, #396]	@ (70108ec4 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
70108d36:	4293      	cmp	r3, r2
70108d38:	f200 80b7 	bhi.w	70108eaa <RCCEx_GetSDMMCCLKFreq+0x19e>
70108d3c:	4a62      	ldr	r2, [pc, #392]	@ (70108ec8 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
70108d3e:	4293      	cmp	r3, r2
70108d40:	d02c      	beq.n	70108d9c <RCCEx_GetSDMMCCLKFreq+0x90>
70108d42:	4a61      	ldr	r2, [pc, #388]	@ (70108ec8 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
70108d44:	4293      	cmp	r3, r2
70108d46:	f200 80b0 	bhi.w	70108eaa <RCCEx_GetSDMMCCLKFreq+0x19e>
70108d4a:	4a60      	ldr	r2, [pc, #384]	@ (70108ecc <RCCEx_GetSDMMCCLKFreq+0x1c0>)
70108d4c:	4293      	cmp	r3, r2
70108d4e:	d025      	beq.n	70108d9c <RCCEx_GetSDMMCCLKFreq+0x90>
70108d50:	4a5e      	ldr	r2, [pc, #376]	@ (70108ecc <RCCEx_GetSDMMCCLKFreq+0x1c0>)
70108d52:	4293      	cmp	r3, r2
70108d54:	f200 80a9 	bhi.w	70108eaa <RCCEx_GetSDMMCCLKFreq+0x19e>
70108d58:	4a5d      	ldr	r2, [pc, #372]	@ (70108ed0 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
70108d5a:	4293      	cmp	r3, r2
70108d5c:	d019      	beq.n	70108d92 <RCCEx_GetSDMMCCLKFreq+0x86>
70108d5e:	4a5c      	ldr	r2, [pc, #368]	@ (70108ed0 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
70108d60:	4293      	cmp	r3, r2
70108d62:	f200 80a2 	bhi.w	70108eaa <RCCEx_GetSDMMCCLKFreq+0x19e>
70108d66:	4a5b      	ldr	r2, [pc, #364]	@ (70108ed4 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
70108d68:	4293      	cmp	r3, r2
70108d6a:	d012      	beq.n	70108d92 <RCCEx_GetSDMMCCLKFreq+0x86>
70108d6c:	4a59      	ldr	r2, [pc, #356]	@ (70108ed4 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
70108d6e:	4293      	cmp	r3, r2
70108d70:	f200 809b 	bhi.w	70108eaa <RCCEx_GetSDMMCCLKFreq+0x19e>
70108d74:	4a58      	ldr	r2, [pc, #352]	@ (70108ed8 <RCCEx_GetSDMMCCLKFreq+0x1cc>)
70108d76:	4293      	cmp	r3, r2
70108d78:	d003      	beq.n	70108d82 <RCCEx_GetSDMMCCLKFreq+0x76>
70108d7a:	4a58      	ldr	r2, [pc, #352]	@ (70108edc <RCCEx_GetSDMMCCLKFreq+0x1d0>)
70108d7c:	4293      	cmp	r3, r2
70108d7e:	f040 8094 	bne.w	70108eaa <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
70108d82:	f7f9 fa53 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70108d86:	4603      	mov	r3, r0
70108d88:	4618      	mov	r0, r3
70108d8a:	f7fd feb5 	bl	70106af8 <RCCEx_GetHCLKFreq>
70108d8e:	60f8      	str	r0, [r7, #12]
      break;
70108d90:	e090      	b.n	70108eb4 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70108d92:	2007      	movs	r0, #7
70108d94:	f7fe f99c 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70108d98:	60f8      	str	r0, [r7, #12]
      break;
70108d9a:	e08b      	b.n	70108eb4 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
70108d9c:	f7fa fa40 	bl	70103220 <LL_RCC_IC4_IsEnabled>
70108da0:	4603      	mov	r3, r0
70108da2:	2b00      	cmp	r3, #0
70108da4:	f000 8083 	beq.w	70108eae <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
70108da8:	f7fa fa5c 	bl	70103264 <LL_RCC_IC4_GetDivider>
70108dac:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
70108dae:	f7fa fa4b 	bl	70103248 <LL_RCC_IC4_GetSource>
70108db2:	4603      	mov	r3, r0
70108db4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108db8:	d029      	beq.n	70108e0e <RCCEx_GetSDMMCCLKFreq+0x102>
70108dba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108dbe:	d82f      	bhi.n	70108e20 <RCCEx_GetSDMMCCLKFreq+0x114>
70108dc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108dc4:	d01a      	beq.n	70108dfc <RCCEx_GetSDMMCCLKFreq+0xf0>
70108dc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108dca:	d829      	bhi.n	70108e20 <RCCEx_GetSDMMCCLKFreq+0x114>
70108dcc:	2b00      	cmp	r3, #0
70108dce:	d003      	beq.n	70108dd8 <RCCEx_GetSDMMCCLKFreq+0xcc>
70108dd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70108dd4:	d009      	beq.n	70108dea <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70108dd6:	e023      	b.n	70108e20 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70108dd8:	f7fd fd76 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70108ddc:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
70108dde:	68fa      	ldr	r2, [r7, #12]
70108de0:	68bb      	ldr	r3, [r7, #8]
70108de2:	fbb2 f3f3 	udiv	r3, r2, r3
70108de6:	60fb      	str	r3, [r7, #12]
            break;
70108de8:	e01b      	b.n	70108e22 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70108dea:	f7fd fdb3 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70108dee:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
70108df0:	68fa      	ldr	r2, [r7, #12]
70108df2:	68bb      	ldr	r3, [r7, #8]
70108df4:	fbb2 f3f3 	udiv	r3, r2, r3
70108df8:	60fb      	str	r3, [r7, #12]
            break;
70108dfa:	e012      	b.n	70108e22 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70108dfc:	f7fd fdf0 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70108e00:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
70108e02:	68fa      	ldr	r2, [r7, #12]
70108e04:	68bb      	ldr	r3, [r7, #8]
70108e06:	fbb2 f3f3 	udiv	r3, r2, r3
70108e0a:	60fb      	str	r3, [r7, #12]
            break;
70108e0c:	e009      	b.n	70108e22 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70108e0e:	f7fd fe2d 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70108e12:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
70108e14:	68fa      	ldr	r2, [r7, #12]
70108e16:	68bb      	ldr	r3, [r7, #8]
70108e18:	fbb2 f3f3 	udiv	r3, r2, r3
70108e1c:	60fb      	str	r3, [r7, #12]
            break;
70108e1e:	e000      	b.n	70108e22 <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
70108e20:	bf00      	nop
        }
      }
      break;
70108e22:	e044      	b.n	70108eae <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
70108e24:	f7fa fa3c 	bl	701032a0 <LL_RCC_IC5_IsEnabled>
70108e28:	4603      	mov	r3, r0
70108e2a:	2b00      	cmp	r3, #0
70108e2c:	d041      	beq.n	70108eb2 <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
70108e2e:	f7fa fa59 	bl	701032e4 <LL_RCC_IC5_GetDivider>
70108e32:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
70108e34:	f7fa fa48 	bl	701032c8 <LL_RCC_IC5_GetSource>
70108e38:	4603      	mov	r3, r0
70108e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108e3e:	d029      	beq.n	70108e94 <RCCEx_GetSDMMCCLKFreq+0x188>
70108e40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108e44:	d82f      	bhi.n	70108ea6 <RCCEx_GetSDMMCCLKFreq+0x19a>
70108e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108e4a:	d01a      	beq.n	70108e82 <RCCEx_GetSDMMCCLKFreq+0x176>
70108e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108e50:	d829      	bhi.n	70108ea6 <RCCEx_GetSDMMCCLKFreq+0x19a>
70108e52:	2b00      	cmp	r3, #0
70108e54:	d003      	beq.n	70108e5e <RCCEx_GetSDMMCCLKFreq+0x152>
70108e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70108e5a:	d009      	beq.n	70108e70 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70108e5c:	e023      	b.n	70108ea6 <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70108e5e:	f7fd fd33 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70108e62:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
70108e64:	68fa      	ldr	r2, [r7, #12]
70108e66:	68bb      	ldr	r3, [r7, #8]
70108e68:	fbb2 f3f3 	udiv	r3, r2, r3
70108e6c:	60fb      	str	r3, [r7, #12]
            break;
70108e6e:	e01b      	b.n	70108ea8 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70108e70:	f7fd fd70 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70108e74:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
70108e76:	68fa      	ldr	r2, [r7, #12]
70108e78:	68bb      	ldr	r3, [r7, #8]
70108e7a:	fbb2 f3f3 	udiv	r3, r2, r3
70108e7e:	60fb      	str	r3, [r7, #12]
            break;
70108e80:	e012      	b.n	70108ea8 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70108e82:	f7fd fdad 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70108e86:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
70108e88:	68fa      	ldr	r2, [r7, #12]
70108e8a:	68bb      	ldr	r3, [r7, #8]
70108e8c:	fbb2 f3f3 	udiv	r3, r2, r3
70108e90:	60fb      	str	r3, [r7, #12]
            break;
70108e92:	e009      	b.n	70108ea8 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70108e94:	f7fd fdea 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70108e98:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
70108e9a:	68fa      	ldr	r2, [r7, #12]
70108e9c:	68bb      	ldr	r3, [r7, #8]
70108e9e:	fbb2 f3f3 	udiv	r3, r2, r3
70108ea2:	60fb      	str	r3, [r7, #12]
            break;
70108ea4:	e000      	b.n	70108ea8 <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
70108ea6:	bf00      	nop
        }
      }
      break;
70108ea8:	e003      	b.n	70108eb2 <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
70108eaa:	bf00      	nop
70108eac:	e002      	b.n	70108eb4 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
70108eae:	bf00      	nop
70108eb0:	e000      	b.n	70108eb4 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
70108eb2:	bf00      	nop
  }

  return sdmmc_frequency;
70108eb4:	68fb      	ldr	r3, [r7, #12]
}
70108eb6:	4618      	mov	r0, r3
70108eb8:	3710      	adds	r7, #16
70108eba:	46bd      	mov	sp, r7
70108ebc:	bd80      	pop	{r7, pc}
70108ebe:	bf00      	nop
70108ec0:	0303041c 	.word	0x0303041c
70108ec4:	0303001c 	.word	0x0303001c
70108ec8:	0302041c 	.word	0x0302041c
70108ecc:	0302001c 	.word	0x0302001c
70108ed0:	0301041c 	.word	0x0301041c
70108ed4:	0301001c 	.word	0x0301001c
70108ed8:	0300001c 	.word	0x0300001c
70108edc:	0300041c 	.word	0x0300041c

70108ee0 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
70108ee0:	b580      	push	{r7, lr}
70108ee2:	b084      	sub	sp, #16
70108ee4:	af00      	add	r7, sp, #0
70108ee6:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
70108ee8:	2300      	movs	r3, #0
70108eea:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
70108eec:	6878      	ldr	r0, [r7, #4]
70108eee:	f7f9 fe3d 	bl	70102b6c <LL_RCC_GetSPDIFRXClockSource>
70108ef2:	4603      	mov	r3, r0
70108ef4:	2b06      	cmp	r3, #6
70108ef6:	f200 80c2 	bhi.w	7010907e <RCCEx_GetSPDIFRXCLKFreq+0x19e>
70108efa:	a201      	add	r2, pc, #4	@ (adr r2, 70108f00 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
70108efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70108f00:	70108f1d 	.word	0x70108f1d
70108f04:	70108f35 	.word	0x70108f35
70108f08:	70108f3f 	.word	0x70108f3f
70108f0c:	70108fc7 	.word	0x70108fc7
70108f10:	70109069 	.word	0x70109069
70108f14:	7010904d 	.word	0x7010904d
70108f18:	70109079 	.word	0x70109079
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
70108f1c:	f7f9 f986 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70108f20:	4603      	mov	r3, r0
70108f22:	4618      	mov	r0, r3
70108f24:	f7fd fde8 	bl	70106af8 <RCCEx_GetHCLKFreq>
70108f28:	4603      	mov	r3, r0
70108f2a:	4618      	mov	r0, r3
70108f2c:	f7fd fdf5 	bl	70106b1a <RCCEx_GetPCLK1Freq>
70108f30:	60f8      	str	r0, [r7, #12]
      break;
70108f32:	e0ad      	b.n	70109090 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70108f34:	2007      	movs	r0, #7
70108f36:	f7fe f8cb 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70108f3a:	60f8      	str	r0, [r7, #12]
      break;
70108f3c:	e0a8      	b.n	70109090 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
70108f3e:	f7fa f9ef 	bl	70103320 <LL_RCC_IC7_IsEnabled>
70108f42:	4603      	mov	r3, r0
70108f44:	2b00      	cmp	r3, #0
70108f46:	f000 809c 	beq.w	70109082 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
70108f4a:	f7fa fa0b 	bl	70103364 <LL_RCC_IC7_GetDivider>
70108f4e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
70108f50:	f7fa f9fa 	bl	70103348 <LL_RCC_IC7_GetSource>
70108f54:	4603      	mov	r3, r0
70108f56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108f5a:	d029      	beq.n	70108fb0 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
70108f5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108f60:	d82f      	bhi.n	70108fc2 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
70108f62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108f66:	d01a      	beq.n	70108f9e <RCCEx_GetSPDIFRXCLKFreq+0xbe>
70108f68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108f6c:	d829      	bhi.n	70108fc2 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
70108f6e:	2b00      	cmp	r3, #0
70108f70:	d003      	beq.n	70108f7a <RCCEx_GetSPDIFRXCLKFreq+0x9a>
70108f72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70108f76:	d009      	beq.n	70108f8c <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70108f78:	e023      	b.n	70108fc2 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70108f7a:	f7fd fca5 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70108f7e:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
70108f80:	68fa      	ldr	r2, [r7, #12]
70108f82:	68bb      	ldr	r3, [r7, #8]
70108f84:	fbb2 f3f3 	udiv	r3, r2, r3
70108f88:	60fb      	str	r3, [r7, #12]
            break;
70108f8a:	e01b      	b.n	70108fc4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70108f8c:	f7fd fce2 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70108f90:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
70108f92:	68fa      	ldr	r2, [r7, #12]
70108f94:	68bb      	ldr	r3, [r7, #8]
70108f96:	fbb2 f3f3 	udiv	r3, r2, r3
70108f9a:	60fb      	str	r3, [r7, #12]
            break;
70108f9c:	e012      	b.n	70108fc4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70108f9e:	f7fd fd1f 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70108fa2:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
70108fa4:	68fa      	ldr	r2, [r7, #12]
70108fa6:	68bb      	ldr	r3, [r7, #8]
70108fa8:	fbb2 f3f3 	udiv	r3, r2, r3
70108fac:	60fb      	str	r3, [r7, #12]
            break;
70108fae:	e009      	b.n	70108fc4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70108fb0:	f7fd fd5c 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70108fb4:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
70108fb6:	68fa      	ldr	r2, [r7, #12]
70108fb8:	68bb      	ldr	r3, [r7, #8]
70108fba:	fbb2 f3f3 	udiv	r3, r2, r3
70108fbe:	60fb      	str	r3, [r7, #12]
            break;
70108fc0:	e000      	b.n	70108fc4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
70108fc2:	bf00      	nop
        }
      }
      break;
70108fc4:	e05d      	b.n	70109082 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
70108fc6:	f7fa f9eb 	bl	701033a0 <LL_RCC_IC8_IsEnabled>
70108fca:	4603      	mov	r3, r0
70108fcc:	2b00      	cmp	r3, #0
70108fce:	d05a      	beq.n	70109086 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
70108fd0:	f7fa fa08 	bl	701033e4 <LL_RCC_IC8_GetDivider>
70108fd4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
70108fd6:	f7fa f9f7 	bl	701033c8 <LL_RCC_IC8_GetSource>
70108fda:	4603      	mov	r3, r0
70108fdc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108fe0:	d029      	beq.n	70109036 <RCCEx_GetSPDIFRXCLKFreq+0x156>
70108fe2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70108fe6:	d82f      	bhi.n	70109048 <RCCEx_GetSPDIFRXCLKFreq+0x168>
70108fe8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108fec:	d01a      	beq.n	70109024 <RCCEx_GetSPDIFRXCLKFreq+0x144>
70108fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70108ff2:	d829      	bhi.n	70109048 <RCCEx_GetSPDIFRXCLKFreq+0x168>
70108ff4:	2b00      	cmp	r3, #0
70108ff6:	d003      	beq.n	70109000 <RCCEx_GetSPDIFRXCLKFreq+0x120>
70108ff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70108ffc:	d009      	beq.n	70109012 <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70108ffe:	e023      	b.n	70109048 <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70109000:	f7fd fc62 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70109004:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
70109006:	68fa      	ldr	r2, [r7, #12]
70109008:	68bb      	ldr	r3, [r7, #8]
7010900a:	fbb2 f3f3 	udiv	r3, r2, r3
7010900e:	60fb      	str	r3, [r7, #12]
            break;
70109010:	e01b      	b.n	7010904a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70109012:	f7fd fc9f 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70109016:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
70109018:	68fa      	ldr	r2, [r7, #12]
7010901a:	68bb      	ldr	r3, [r7, #8]
7010901c:	fbb2 f3f3 	udiv	r3, r2, r3
70109020:	60fb      	str	r3, [r7, #12]
            break;
70109022:	e012      	b.n	7010904a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70109024:	f7fd fcdc 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70109028:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
7010902a:	68fa      	ldr	r2, [r7, #12]
7010902c:	68bb      	ldr	r3, [r7, #8]
7010902e:	fbb2 f3f3 	udiv	r3, r2, r3
70109032:	60fb      	str	r3, [r7, #12]
            break;
70109034:	e009      	b.n	7010904a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70109036:	f7fd fd19 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
7010903a:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
7010903c:	68fa      	ldr	r2, [r7, #12]
7010903e:	68bb      	ldr	r3, [r7, #8]
70109040:	fbb2 f3f3 	udiv	r3, r2, r3
70109044:	60fb      	str	r3, [r7, #12]
            break;
70109046:	e000      	b.n	7010904a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
70109048:	bf00      	nop
        }
      }
      break;
7010904a:	e01c      	b.n	70109086 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
7010904c:	f7f9 f9c4 	bl	701023d8 <LL_RCC_HSI_IsReady>
70109050:	4603      	mov	r3, r0
70109052:	2b00      	cmp	r3, #0
70109054:	d019      	beq.n	7010908a <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70109056:	f7f9 f9d1 	bl	701023fc <LL_RCC_HSI_GetDivider>
7010905a:	4603      	mov	r3, r0
7010905c:	09db      	lsrs	r3, r3, #7
7010905e:	4a0f      	ldr	r2, [pc, #60]	@ (7010909c <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
70109060:	fa22 f303 	lsr.w	r3, r2, r3
70109064:	60fb      	str	r3, [r7, #12]
      }
      break;
70109066:	e010      	b.n	7010908a <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
70109068:	f7f9 f9d6 	bl	70102418 <LL_RCC_MSI_IsReady>
7010906c:	4603      	mov	r3, r0
7010906e:	2b00      	cmp	r3, #0
70109070:	d00d      	beq.n	7010908e <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
70109072:	4b0b      	ldr	r3, [pc, #44]	@ (701090a0 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
70109074:	60fb      	str	r3, [r7, #12]
      }
      break;
70109076:	e00a      	b.n	7010908e <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
70109078:	4b0a      	ldr	r3, [pc, #40]	@ (701090a4 <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
7010907a:	60fb      	str	r3, [r7, #12]
      break;
7010907c:	e008      	b.n	70109090 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
7010907e:	bf00      	nop
70109080:	e006      	b.n	70109090 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
70109082:	bf00      	nop
70109084:	e004      	b.n	70109090 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
70109086:	bf00      	nop
70109088:	e002      	b.n	70109090 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
7010908a:	bf00      	nop
7010908c:	e000      	b.n	70109090 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
7010908e:	bf00      	nop
  }

  return spdifrx_frequency;
70109090:	68fb      	ldr	r3, [r7, #12]
}
70109092:	4618      	mov	r0, r3
70109094:	3710      	adds	r7, #16
70109096:	46bd      	mov	sp, r7
70109098:	bd80      	pop	{r7, pc}
7010909a:	bf00      	nop
7010909c:	03d09000 	.word	0x03d09000
701090a0:	003d0900 	.word	0x003d0900
701090a4:	00bb8000 	.word	0x00bb8000

701090a8 <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
701090a8:	b580      	push	{r7, lr}
701090aa:	b084      	sub	sp, #16
701090ac:	af00      	add	r7, sp, #0
701090ae:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
701090b0:	2300      	movs	r3, #0
701090b2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
701090b4:	6878      	ldr	r0, [r7, #4]
701090b6:	f7f9 fd6b 	bl	70102b90 <LL_RCC_GetSPIClockSource>
701090ba:	4603      	mov	r3, r0
701090bc:	4aa7      	ldr	r2, [pc, #668]	@ (7010935c <RCCEx_GetSPICLKFreq+0x2b4>)
701090be:	4293      	cmp	r3, r2
701090c0:	f000 829e 	beq.w	70109600 <RCCEx_GetSPICLKFreq+0x558>
701090c4:	4aa5      	ldr	r2, [pc, #660]	@ (7010935c <RCCEx_GetSPICLKFreq+0x2b4>)
701090c6:	4293      	cmp	r3, r2
701090c8:	f200 82a5 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701090cc:	4aa4      	ldr	r2, [pc, #656]	@ (70109360 <RCCEx_GetSPICLKFreq+0x2b8>)
701090ce:	4293      	cmp	r3, r2
701090d0:	f000 8299 	beq.w	70109606 <RCCEx_GetSPICLKFreq+0x55e>
701090d4:	4aa2      	ldr	r2, [pc, #648]	@ (70109360 <RCCEx_GetSPICLKFreq+0x2b8>)
701090d6:	4293      	cmp	r3, r2
701090d8:	f200 829d 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701090dc:	4aa1      	ldr	r2, [pc, #644]	@ (70109364 <RCCEx_GetSPICLKFreq+0x2bc>)
701090de:	4293      	cmp	r3, r2
701090e0:	f000 8291 	beq.w	70109606 <RCCEx_GetSPICLKFreq+0x55e>
701090e4:	4a9f      	ldr	r2, [pc, #636]	@ (70109364 <RCCEx_GetSPICLKFreq+0x2bc>)
701090e6:	4293      	cmp	r3, r2
701090e8:	f200 8295 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701090ec:	4a9e      	ldr	r2, [pc, #632]	@ (70109368 <RCCEx_GetSPICLKFreq+0x2c0>)
701090ee:	4293      	cmp	r3, r2
701090f0:	f000 8286 	beq.w	70109600 <RCCEx_GetSPICLKFreq+0x558>
701090f4:	4a9c      	ldr	r2, [pc, #624]	@ (70109368 <RCCEx_GetSPICLKFreq+0x2c0>)
701090f6:	4293      	cmp	r3, r2
701090f8:	f200 828d 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701090fc:	4a9b      	ldr	r2, [pc, #620]	@ (7010936c <RCCEx_GetSPICLKFreq+0x2c4>)
701090fe:	4293      	cmp	r3, r2
70109100:	f000 827e 	beq.w	70109600 <RCCEx_GetSPICLKFreq+0x558>
70109104:	4a99      	ldr	r2, [pc, #612]	@ (7010936c <RCCEx_GetSPICLKFreq+0x2c4>)
70109106:	4293      	cmp	r3, r2
70109108:	f200 8285 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010910c:	4a98      	ldr	r2, [pc, #608]	@ (70109370 <RCCEx_GetSPICLKFreq+0x2c8>)
7010910e:	4293      	cmp	r3, r2
70109110:	f000 8276 	beq.w	70109600 <RCCEx_GetSPICLKFreq+0x558>
70109114:	4a96      	ldr	r2, [pc, #600]	@ (70109370 <RCCEx_GetSPICLKFreq+0x2c8>)
70109116:	4293      	cmp	r3, r2
70109118:	f200 827d 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010911c:	4a95      	ldr	r2, [pc, #596]	@ (70109374 <RCCEx_GetSPICLKFreq+0x2cc>)
7010911e:	4293      	cmp	r3, r2
70109120:	f000 8258 	beq.w	701095d4 <RCCEx_GetSPICLKFreq+0x52c>
70109124:	4a93      	ldr	r2, [pc, #588]	@ (70109374 <RCCEx_GetSPICLKFreq+0x2cc>)
70109126:	4293      	cmp	r3, r2
70109128:	f200 8275 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010912c:	4a92      	ldr	r2, [pc, #584]	@ (70109378 <RCCEx_GetSPICLKFreq+0x2d0>)
7010912e:	4293      	cmp	r3, r2
70109130:	f000 8250 	beq.w	701095d4 <RCCEx_GetSPICLKFreq+0x52c>
70109134:	4a90      	ldr	r2, [pc, #576]	@ (70109378 <RCCEx_GetSPICLKFreq+0x2d0>)
70109136:	4293      	cmp	r3, r2
70109138:	f200 826d 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010913c:	4a8f      	ldr	r2, [pc, #572]	@ (7010937c <RCCEx_GetSPICLKFreq+0x2d4>)
7010913e:	4293      	cmp	r3, r2
70109140:	f000 8248 	beq.w	701095d4 <RCCEx_GetSPICLKFreq+0x52c>
70109144:	4a8d      	ldr	r2, [pc, #564]	@ (7010937c <RCCEx_GetSPICLKFreq+0x2d4>)
70109146:	4293      	cmp	r3, r2
70109148:	f200 8265 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010914c:	4a8c      	ldr	r2, [pc, #560]	@ (70109380 <RCCEx_GetSPICLKFreq+0x2d8>)
7010914e:	4293      	cmp	r3, r2
70109150:	f000 8240 	beq.w	701095d4 <RCCEx_GetSPICLKFreq+0x52c>
70109154:	4a8a      	ldr	r2, [pc, #552]	@ (70109380 <RCCEx_GetSPICLKFreq+0x2d8>)
70109156:	4293      	cmp	r3, r2
70109158:	f200 825d 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010915c:	4a89      	ldr	r2, [pc, #548]	@ (70109384 <RCCEx_GetSPICLKFreq+0x2dc>)
7010915e:	4293      	cmp	r3, r2
70109160:	f000 8238 	beq.w	701095d4 <RCCEx_GetSPICLKFreq+0x52c>
70109164:	4a87      	ldr	r2, [pc, #540]	@ (70109384 <RCCEx_GetSPICLKFreq+0x2dc>)
70109166:	4293      	cmp	r3, r2
70109168:	f200 8255 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010916c:	4a86      	ldr	r2, [pc, #536]	@ (70109388 <RCCEx_GetSPICLKFreq+0x2e0>)
7010916e:	4293      	cmp	r3, r2
70109170:	f000 8230 	beq.w	701095d4 <RCCEx_GetSPICLKFreq+0x52c>
70109174:	4a84      	ldr	r2, [pc, #528]	@ (70109388 <RCCEx_GetSPICLKFreq+0x2e0>)
70109176:	4293      	cmp	r3, r2
70109178:	f200 824d 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010917c:	4a83      	ldr	r2, [pc, #524]	@ (7010938c <RCCEx_GetSPICLKFreq+0x2e4>)
7010917e:	4293      	cmp	r3, r2
70109180:	f000 8236 	beq.w	701095f0 <RCCEx_GetSPICLKFreq+0x548>
70109184:	4a81      	ldr	r2, [pc, #516]	@ (7010938c <RCCEx_GetSPICLKFreq+0x2e4>)
70109186:	4293      	cmp	r3, r2
70109188:	f200 8245 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010918c:	4a80      	ldr	r2, [pc, #512]	@ (70109390 <RCCEx_GetSPICLKFreq+0x2e8>)
7010918e:	4293      	cmp	r3, r2
70109190:	f000 822e 	beq.w	701095f0 <RCCEx_GetSPICLKFreq+0x548>
70109194:	4a7e      	ldr	r2, [pc, #504]	@ (70109390 <RCCEx_GetSPICLKFreq+0x2e8>)
70109196:	4293      	cmp	r3, r2
70109198:	f200 823d 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010919c:	4a7d      	ldr	r2, [pc, #500]	@ (70109394 <RCCEx_GetSPICLKFreq+0x2ec>)
7010919e:	4293      	cmp	r3, r2
701091a0:	f000 8226 	beq.w	701095f0 <RCCEx_GetSPICLKFreq+0x548>
701091a4:	4a7b      	ldr	r2, [pc, #492]	@ (70109394 <RCCEx_GetSPICLKFreq+0x2ec>)
701091a6:	4293      	cmp	r3, r2
701091a8:	f200 8235 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701091ac:	4a7a      	ldr	r2, [pc, #488]	@ (70109398 <RCCEx_GetSPICLKFreq+0x2f0>)
701091ae:	4293      	cmp	r3, r2
701091b0:	f000 821e 	beq.w	701095f0 <RCCEx_GetSPICLKFreq+0x548>
701091b4:	4a78      	ldr	r2, [pc, #480]	@ (70109398 <RCCEx_GetSPICLKFreq+0x2f0>)
701091b6:	4293      	cmp	r3, r2
701091b8:	f200 822d 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701091bc:	4a77      	ldr	r2, [pc, #476]	@ (7010939c <RCCEx_GetSPICLKFreq+0x2f4>)
701091be:	4293      	cmp	r3, r2
701091c0:	f000 8216 	beq.w	701095f0 <RCCEx_GetSPICLKFreq+0x548>
701091c4:	4a75      	ldr	r2, [pc, #468]	@ (7010939c <RCCEx_GetSPICLKFreq+0x2f4>)
701091c6:	4293      	cmp	r3, r2
701091c8:	f200 8225 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701091cc:	4a74      	ldr	r2, [pc, #464]	@ (701093a0 <RCCEx_GetSPICLKFreq+0x2f8>)
701091ce:	4293      	cmp	r3, r2
701091d0:	f000 820e 	beq.w	701095f0 <RCCEx_GetSPICLKFreq+0x548>
701091d4:	4a72      	ldr	r2, [pc, #456]	@ (701093a0 <RCCEx_GetSPICLKFreq+0x2f8>)
701091d6:	4293      	cmp	r3, r2
701091d8:	f200 821d 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701091dc:	4a71      	ldr	r2, [pc, #452]	@ (701093a4 <RCCEx_GetSPICLKFreq+0x2fc>)
701091de:	4293      	cmp	r3, r2
701091e0:	f000 8171 	beq.w	701094c6 <RCCEx_GetSPICLKFreq+0x41e>
701091e4:	4a6f      	ldr	r2, [pc, #444]	@ (701093a4 <RCCEx_GetSPICLKFreq+0x2fc>)
701091e6:	4293      	cmp	r3, r2
701091e8:	f200 8215 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701091ec:	4a6e      	ldr	r2, [pc, #440]	@ (701093a8 <RCCEx_GetSPICLKFreq+0x300>)
701091ee:	4293      	cmp	r3, r2
701091f0:	f000 81ad 	beq.w	7010954e <RCCEx_GetSPICLKFreq+0x4a6>
701091f4:	4a6c      	ldr	r2, [pc, #432]	@ (701093a8 <RCCEx_GetSPICLKFreq+0x300>)
701091f6:	4293      	cmp	r3, r2
701091f8:	f200 820d 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701091fc:	4a6b      	ldr	r2, [pc, #428]	@ (701093ac <RCCEx_GetSPICLKFreq+0x304>)
701091fe:	4293      	cmp	r3, r2
70109200:	f000 81a5 	beq.w	7010954e <RCCEx_GetSPICLKFreq+0x4a6>
70109204:	4a69      	ldr	r2, [pc, #420]	@ (701093ac <RCCEx_GetSPICLKFreq+0x304>)
70109206:	4293      	cmp	r3, r2
70109208:	f200 8205 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010920c:	4a68      	ldr	r2, [pc, #416]	@ (701093b0 <RCCEx_GetSPICLKFreq+0x308>)
7010920e:	4293      	cmp	r3, r2
70109210:	f000 8159 	beq.w	701094c6 <RCCEx_GetSPICLKFreq+0x41e>
70109214:	4a66      	ldr	r2, [pc, #408]	@ (701093b0 <RCCEx_GetSPICLKFreq+0x308>)
70109216:	4293      	cmp	r3, r2
70109218:	f200 81fd 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010921c:	4a65      	ldr	r2, [pc, #404]	@ (701093b4 <RCCEx_GetSPICLKFreq+0x30c>)
7010921e:	4293      	cmp	r3, r2
70109220:	f000 8151 	beq.w	701094c6 <RCCEx_GetSPICLKFreq+0x41e>
70109224:	4a63      	ldr	r2, [pc, #396]	@ (701093b4 <RCCEx_GetSPICLKFreq+0x30c>)
70109226:	4293      	cmp	r3, r2
70109228:	f200 81f5 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010922c:	4a62      	ldr	r2, [pc, #392]	@ (701093b8 <RCCEx_GetSPICLKFreq+0x310>)
7010922e:	4293      	cmp	r3, r2
70109230:	f000 8149 	beq.w	701094c6 <RCCEx_GetSPICLKFreq+0x41e>
70109234:	4a60      	ldr	r2, [pc, #384]	@ (701093b8 <RCCEx_GetSPICLKFreq+0x310>)
70109236:	4293      	cmp	r3, r2
70109238:	f200 81ed 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010923c:	4a5f      	ldr	r2, [pc, #380]	@ (701093bc <RCCEx_GetSPICLKFreq+0x314>)
7010923e:	4293      	cmp	r3, r2
70109240:	f000 80fd 	beq.w	7010943e <RCCEx_GetSPICLKFreq+0x396>
70109244:	4a5d      	ldr	r2, [pc, #372]	@ (701093bc <RCCEx_GetSPICLKFreq+0x314>)
70109246:	4293      	cmp	r3, r2
70109248:	f200 81e5 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010924c:	4a5c      	ldr	r2, [pc, #368]	@ (701093c0 <RCCEx_GetSPICLKFreq+0x318>)
7010924e:	4293      	cmp	r3, r2
70109250:	f000 8139 	beq.w	701094c6 <RCCEx_GetSPICLKFreq+0x41e>
70109254:	4a5a      	ldr	r2, [pc, #360]	@ (701093c0 <RCCEx_GetSPICLKFreq+0x318>)
70109256:	4293      	cmp	r3, r2
70109258:	f200 81dd 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010925c:	4a59      	ldr	r2, [pc, #356]	@ (701093c4 <RCCEx_GetSPICLKFreq+0x31c>)
7010925e:	4293      	cmp	r3, r2
70109260:	f000 8131 	beq.w	701094c6 <RCCEx_GetSPICLKFreq+0x41e>
70109264:	4a57      	ldr	r2, [pc, #348]	@ (701093c4 <RCCEx_GetSPICLKFreq+0x31c>)
70109266:	4293      	cmp	r3, r2
70109268:	f200 81d5 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010926c:	4a56      	ldr	r2, [pc, #344]	@ (701093c8 <RCCEx_GetSPICLKFreq+0x320>)
7010926e:	4293      	cmp	r3, r2
70109270:	f000 80e5 	beq.w	7010943e <RCCEx_GetSPICLKFreq+0x396>
70109274:	4a54      	ldr	r2, [pc, #336]	@ (701093c8 <RCCEx_GetSPICLKFreq+0x320>)
70109276:	4293      	cmp	r3, r2
70109278:	f200 81cd 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010927c:	4a53      	ldr	r2, [pc, #332]	@ (701093cc <RCCEx_GetSPICLKFreq+0x324>)
7010927e:	4293      	cmp	r3, r2
70109280:	f000 80dd 	beq.w	7010943e <RCCEx_GetSPICLKFreq+0x396>
70109284:	4a51      	ldr	r2, [pc, #324]	@ (701093cc <RCCEx_GetSPICLKFreq+0x324>)
70109286:	4293      	cmp	r3, r2
70109288:	f200 81c5 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010928c:	4a50      	ldr	r2, [pc, #320]	@ (701093d0 <RCCEx_GetSPICLKFreq+0x328>)
7010928e:	4293      	cmp	r3, r2
70109290:	f000 80d5 	beq.w	7010943e <RCCEx_GetSPICLKFreq+0x396>
70109294:	4a4e      	ldr	r2, [pc, #312]	@ (701093d0 <RCCEx_GetSPICLKFreq+0x328>)
70109296:	4293      	cmp	r3, r2
70109298:	f200 81bd 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010929c:	4a4d      	ldr	r2, [pc, #308]	@ (701093d4 <RCCEx_GetSPICLKFreq+0x32c>)
7010929e:	4293      	cmp	r3, r2
701092a0:	f000 80c8 	beq.w	70109434 <RCCEx_GetSPICLKFreq+0x38c>
701092a4:	4a4b      	ldr	r2, [pc, #300]	@ (701093d4 <RCCEx_GetSPICLKFreq+0x32c>)
701092a6:	4293      	cmp	r3, r2
701092a8:	f200 81b5 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701092ac:	4a4a      	ldr	r2, [pc, #296]	@ (701093d8 <RCCEx_GetSPICLKFreq+0x330>)
701092ae:	4293      	cmp	r3, r2
701092b0:	f000 80c0 	beq.w	70109434 <RCCEx_GetSPICLKFreq+0x38c>
701092b4:	4a48      	ldr	r2, [pc, #288]	@ (701093d8 <RCCEx_GetSPICLKFreq+0x330>)
701092b6:	4293      	cmp	r3, r2
701092b8:	f200 81ad 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701092bc:	4a47      	ldr	r2, [pc, #284]	@ (701093dc <RCCEx_GetSPICLKFreq+0x334>)
701092be:	4293      	cmp	r3, r2
701092c0:	f000 80b8 	beq.w	70109434 <RCCEx_GetSPICLKFreq+0x38c>
701092c4:	4a45      	ldr	r2, [pc, #276]	@ (701093dc <RCCEx_GetSPICLKFreq+0x334>)
701092c6:	4293      	cmp	r3, r2
701092c8:	f200 81a5 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701092cc:	4a44      	ldr	r2, [pc, #272]	@ (701093e0 <RCCEx_GetSPICLKFreq+0x338>)
701092ce:	4293      	cmp	r3, r2
701092d0:	f000 80b0 	beq.w	70109434 <RCCEx_GetSPICLKFreq+0x38c>
701092d4:	4a42      	ldr	r2, [pc, #264]	@ (701093e0 <RCCEx_GetSPICLKFreq+0x338>)
701092d6:	4293      	cmp	r3, r2
701092d8:	f200 819d 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701092dc:	4a41      	ldr	r2, [pc, #260]	@ (701093e4 <RCCEx_GetSPICLKFreq+0x33c>)
701092de:	4293      	cmp	r3, r2
701092e0:	f000 80a8 	beq.w	70109434 <RCCEx_GetSPICLKFreq+0x38c>
701092e4:	4a3f      	ldr	r2, [pc, #252]	@ (701093e4 <RCCEx_GetSPICLKFreq+0x33c>)
701092e6:	4293      	cmp	r3, r2
701092e8:	f200 8195 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701092ec:	4a3e      	ldr	r2, [pc, #248]	@ (701093e8 <RCCEx_GetSPICLKFreq+0x340>)
701092ee:	4293      	cmp	r3, r2
701092f0:	f000 80a0 	beq.w	70109434 <RCCEx_GetSPICLKFreq+0x38c>
701092f4:	4a3c      	ldr	r2, [pc, #240]	@ (701093e8 <RCCEx_GetSPICLKFreq+0x340>)
701092f6:	4293      	cmp	r3, r2
701092f8:	f200 818d 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
701092fc:	4a3b      	ldr	r2, [pc, #236]	@ (701093ec <RCCEx_GetSPICLKFreq+0x344>)
701092fe:	4293      	cmp	r3, r2
70109300:	f000 808c 	beq.w	7010941c <RCCEx_GetSPICLKFreq+0x374>
70109304:	4a39      	ldr	r2, [pc, #228]	@ (701093ec <RCCEx_GetSPICLKFreq+0x344>)
70109306:	4293      	cmp	r3, r2
70109308:	f200 8185 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010930c:	4a38      	ldr	r2, [pc, #224]	@ (701093f0 <RCCEx_GetSPICLKFreq+0x348>)
7010930e:	4293      	cmp	r3, r2
70109310:	d078      	beq.n	70109404 <RCCEx_GetSPICLKFreq+0x35c>
70109312:	4a37      	ldr	r2, [pc, #220]	@ (701093f0 <RCCEx_GetSPICLKFreq+0x348>)
70109314:	4293      	cmp	r3, r2
70109316:	f200 817e 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
7010931a:	4a36      	ldr	r2, [pc, #216]	@ (701093f4 <RCCEx_GetSPICLKFreq+0x34c>)
7010931c:	4293      	cmp	r3, r2
7010931e:	d071      	beq.n	70109404 <RCCEx_GetSPICLKFreq+0x35c>
70109320:	4a34      	ldr	r2, [pc, #208]	@ (701093f4 <RCCEx_GetSPICLKFreq+0x34c>)
70109322:	4293      	cmp	r3, r2
70109324:	f200 8177 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
70109328:	4a33      	ldr	r2, [pc, #204]	@ (701093f8 <RCCEx_GetSPICLKFreq+0x350>)
7010932a:	4293      	cmp	r3, r2
7010932c:	d00a      	beq.n	70109344 <RCCEx_GetSPICLKFreq+0x29c>
7010932e:	4a32      	ldr	r2, [pc, #200]	@ (701093f8 <RCCEx_GetSPICLKFreq+0x350>)
70109330:	4293      	cmp	r3, r2
70109332:	f200 8170 	bhi.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
70109336:	4a31      	ldr	r2, [pc, #196]	@ (701093fc <RCCEx_GetSPICLKFreq+0x354>)
70109338:	4293      	cmp	r3, r2
7010933a:	d063      	beq.n	70109404 <RCCEx_GetSPICLKFreq+0x35c>
7010933c:	4a30      	ldr	r2, [pc, #192]	@ (70109400 <RCCEx_GetSPICLKFreq+0x358>)
7010933e:	4293      	cmp	r3, r2
70109340:	f040 8169 	bne.w	70109616 <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
70109344:	f7f8 ff72 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70109348:	4603      	mov	r3, r0
7010934a:	4618      	mov	r0, r3
7010934c:	f7fd fbd4 	bl	70106af8 <RCCEx_GetHCLKFreq>
70109350:	4603      	mov	r3, r0
70109352:	4618      	mov	r0, r3
70109354:	f7fd fbe1 	bl	70106b1a <RCCEx_GetPCLK1Freq>
70109358:	60f8      	str	r0, [r7, #12]
      break;
7010935a:	e169      	b.n	70109630 <RCCEx_GetSPICLKFreq+0x588>
7010935c:	07061820 	.word	0x07061820
70109360:	07061420 	.word	0x07061420
70109364:	07061020 	.word	0x07061020
70109368:	07060c20 	.word	0x07060c20
7010936c:	07060820 	.word	0x07060820
70109370:	07060420 	.word	0x07060420
70109374:	07051820 	.word	0x07051820
70109378:	07051420 	.word	0x07051420
7010937c:	07051020 	.word	0x07051020
70109380:	07050c20 	.word	0x07050c20
70109384:	07050820 	.word	0x07050820
70109388:	07050420 	.word	0x07050420
7010938c:	07041820 	.word	0x07041820
70109390:	07041420 	.word	0x07041420
70109394:	07041020 	.word	0x07041020
70109398:	07040c20 	.word	0x07040c20
7010939c:	07040820 	.word	0x07040820
701093a0:	07040420 	.word	0x07040420
701093a4:	07031820 	.word	0x07031820
701093a8:	07031420 	.word	0x07031420
701093ac:	07031020 	.word	0x07031020
701093b0:	07030c20 	.word	0x07030c20
701093b4:	07030820 	.word	0x07030820
701093b8:	07030420 	.word	0x07030420
701093bc:	07021820 	.word	0x07021820
701093c0:	07021420 	.word	0x07021420
701093c4:	07021020 	.word	0x07021020
701093c8:	07020c20 	.word	0x07020c20
701093cc:	07020820 	.word	0x07020820
701093d0:	07020420 	.word	0x07020420
701093d4:	07011820 	.word	0x07011820
701093d8:	07011420 	.word	0x07011420
701093dc:	07011020 	.word	0x07011020
701093e0:	07010c20 	.word	0x07010c20
701093e4:	07010820 	.word	0x07010820
701093e8:	07010420 	.word	0x07010420
701093ec:	07001820 	.word	0x07001820
701093f0:	07001420 	.word	0x07001420
701093f4:	07001020 	.word	0x07001020
701093f8:	07000c20 	.word	0x07000c20
701093fc:	07000420 	.word	0x07000420
70109400:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
70109404:	f7f8 ff12 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70109408:	4603      	mov	r3, r0
7010940a:	4618      	mov	r0, r3
7010940c:	f7fd fb74 	bl	70106af8 <RCCEx_GetHCLKFreq>
70109410:	4603      	mov	r3, r0
70109412:	4618      	mov	r0, r3
70109414:	f7fd fb91 	bl	70106b3a <RCCEx_GetPCLK2Freq>
70109418:	60f8      	str	r0, [r7, #12]
      break;
7010941a:	e109      	b.n	70109630 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
7010941c:	f7f8 ff06 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70109420:	4603      	mov	r3, r0
70109422:	4618      	mov	r0, r3
70109424:	f7fd fb68 	bl	70106af8 <RCCEx_GetHCLKFreq>
70109428:	4603      	mov	r3, r0
7010942a:	4618      	mov	r0, r3
7010942c:	f7fd fb96 	bl	70106b5c <RCCEx_GetPCLK4Freq>
70109430:	60f8      	str	r0, [r7, #12]
      break;
70109432:	e0fd      	b.n	70109630 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70109434:	2007      	movs	r0, #7
70109436:	f7fd fe4b 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
7010943a:	60f8      	str	r0, [r7, #12]
      break;
7010943c:	e0f8      	b.n	70109630 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
7010943e:	f7f9 ffaf 	bl	701033a0 <LL_RCC_IC8_IsEnabled>
70109442:	4603      	mov	r3, r0
70109444:	2b00      	cmp	r3, #0
70109446:	f000 80e8 	beq.w	7010961a <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
7010944a:	f7f9 ffcb 	bl	701033e4 <LL_RCC_IC8_GetDivider>
7010944e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
70109450:	f7f9 ffba 	bl	701033c8 <LL_RCC_IC8_GetSource>
70109454:	4603      	mov	r3, r0
70109456:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010945a:	d029      	beq.n	701094b0 <RCCEx_GetSPICLKFreq+0x408>
7010945c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70109460:	d82f      	bhi.n	701094c2 <RCCEx_GetSPICLKFreq+0x41a>
70109462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70109466:	d01a      	beq.n	7010949e <RCCEx_GetSPICLKFreq+0x3f6>
70109468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010946c:	d829      	bhi.n	701094c2 <RCCEx_GetSPICLKFreq+0x41a>
7010946e:	2b00      	cmp	r3, #0
70109470:	d003      	beq.n	7010947a <RCCEx_GetSPICLKFreq+0x3d2>
70109472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70109476:	d009      	beq.n	7010948c <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70109478:	e023      	b.n	701094c2 <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
7010947a:	f7fd fa25 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
7010947e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
70109480:	68fa      	ldr	r2, [r7, #12]
70109482:	68bb      	ldr	r3, [r7, #8]
70109484:	fbb2 f3f3 	udiv	r3, r2, r3
70109488:	60fb      	str	r3, [r7, #12]
            break;
7010948a:	e01b      	b.n	701094c4 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
7010948c:	f7fd fa62 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70109490:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
70109492:	68fa      	ldr	r2, [r7, #12]
70109494:	68bb      	ldr	r3, [r7, #8]
70109496:	fbb2 f3f3 	udiv	r3, r2, r3
7010949a:	60fb      	str	r3, [r7, #12]
            break;
7010949c:	e012      	b.n	701094c4 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
7010949e:	f7fd fa9f 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
701094a2:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
701094a4:	68fa      	ldr	r2, [r7, #12]
701094a6:	68bb      	ldr	r3, [r7, #8]
701094a8:	fbb2 f3f3 	udiv	r3, r2, r3
701094ac:	60fb      	str	r3, [r7, #12]
            break;
701094ae:	e009      	b.n	701094c4 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
701094b0:	f7fd fadc 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701094b4:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
701094b6:	68fa      	ldr	r2, [r7, #12]
701094b8:	68bb      	ldr	r3, [r7, #8]
701094ba:	fbb2 f3f3 	udiv	r3, r2, r3
701094be:	60fb      	str	r3, [r7, #12]
            break;
701094c0:	e000      	b.n	701094c4 <RCCEx_GetSPICLKFreq+0x41c>
            break;
701094c2:	bf00      	nop
        }
      }
      break;
701094c4:	e0a9      	b.n	7010961a <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
701094c6:	f7f9 ffab 	bl	70103420 <LL_RCC_IC9_IsEnabled>
701094ca:	4603      	mov	r3, r0
701094cc:	2b00      	cmp	r3, #0
701094ce:	f000 80a6 	beq.w	7010961e <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
701094d2:	f7f9 ffc7 	bl	70103464 <LL_RCC_IC9_GetDivider>
701094d6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
701094d8:	f7f9 ffb6 	bl	70103448 <LL_RCC_IC9_GetSource>
701094dc:	4603      	mov	r3, r0
701094de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701094e2:	d029      	beq.n	70109538 <RCCEx_GetSPICLKFreq+0x490>
701094e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701094e8:	d82f      	bhi.n	7010954a <RCCEx_GetSPICLKFreq+0x4a2>
701094ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701094ee:	d01a      	beq.n	70109526 <RCCEx_GetSPICLKFreq+0x47e>
701094f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701094f4:	d829      	bhi.n	7010954a <RCCEx_GetSPICLKFreq+0x4a2>
701094f6:	2b00      	cmp	r3, #0
701094f8:	d003      	beq.n	70109502 <RCCEx_GetSPICLKFreq+0x45a>
701094fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
701094fe:	d009      	beq.n	70109514 <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70109500:	e023      	b.n	7010954a <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70109502:	f7fd f9e1 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70109506:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
70109508:	68fa      	ldr	r2, [r7, #12]
7010950a:	68bb      	ldr	r3, [r7, #8]
7010950c:	fbb2 f3f3 	udiv	r3, r2, r3
70109510:	60fb      	str	r3, [r7, #12]
            break;
70109512:	e01b      	b.n	7010954c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70109514:	f7fd fa1e 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70109518:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
7010951a:	68fa      	ldr	r2, [r7, #12]
7010951c:	68bb      	ldr	r3, [r7, #8]
7010951e:	fbb2 f3f3 	udiv	r3, r2, r3
70109522:	60fb      	str	r3, [r7, #12]
            break;
70109524:	e012      	b.n	7010954c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70109526:	f7fd fa5b 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010952a:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
7010952c:	68fa      	ldr	r2, [r7, #12]
7010952e:	68bb      	ldr	r3, [r7, #8]
70109530:	fbb2 f3f3 	udiv	r3, r2, r3
70109534:	60fb      	str	r3, [r7, #12]
            break;
70109536:	e009      	b.n	7010954c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70109538:	f7fd fa98 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
7010953c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
7010953e:	68fa      	ldr	r2, [r7, #12]
70109540:	68bb      	ldr	r3, [r7, #8]
70109542:	fbb2 f3f3 	udiv	r3, r2, r3
70109546:	60fb      	str	r3, [r7, #12]
            break;
70109548:	e000      	b.n	7010954c <RCCEx_GetSPICLKFreq+0x4a4>
            break;
7010954a:	bf00      	nop
        }
      }
      break;
7010954c:	e067      	b.n	7010961e <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
7010954e:	f7fa f867 	bl	70103620 <LL_RCC_IC14_IsEnabled>
70109552:	4603      	mov	r3, r0
70109554:	2b00      	cmp	r3, #0
70109556:	d064      	beq.n	70109622 <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
70109558:	f7fa f884 	bl	70103664 <LL_RCC_IC14_GetDivider>
7010955c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
7010955e:	f7fa f873 	bl	70103648 <LL_RCC_IC14_GetSource>
70109562:	4603      	mov	r3, r0
70109564:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70109568:	d029      	beq.n	701095be <RCCEx_GetSPICLKFreq+0x516>
7010956a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010956e:	d82f      	bhi.n	701095d0 <RCCEx_GetSPICLKFreq+0x528>
70109570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70109574:	d01a      	beq.n	701095ac <RCCEx_GetSPICLKFreq+0x504>
70109576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010957a:	d829      	bhi.n	701095d0 <RCCEx_GetSPICLKFreq+0x528>
7010957c:	2b00      	cmp	r3, #0
7010957e:	d003      	beq.n	70109588 <RCCEx_GetSPICLKFreq+0x4e0>
70109580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70109584:	d009      	beq.n	7010959a <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
70109586:	e023      	b.n	701095d0 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70109588:	f7fd f99e 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
7010958c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
7010958e:	68fa      	ldr	r2, [r7, #12]
70109590:	68bb      	ldr	r3, [r7, #8]
70109592:	fbb2 f3f3 	udiv	r3, r2, r3
70109596:	60fb      	str	r3, [r7, #12]
            break;
70109598:	e01b      	b.n	701095d2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
7010959a:	f7fd f9db 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
7010959e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
701095a0:	68fa      	ldr	r2, [r7, #12]
701095a2:	68bb      	ldr	r3, [r7, #8]
701095a4:	fbb2 f3f3 	udiv	r3, r2, r3
701095a8:	60fb      	str	r3, [r7, #12]
            break;
701095aa:	e012      	b.n	701095d2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
701095ac:	f7fd fa18 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
701095b0:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
701095b2:	68fa      	ldr	r2, [r7, #12]
701095b4:	68bb      	ldr	r3, [r7, #8]
701095b6:	fbb2 f3f3 	udiv	r3, r2, r3
701095ba:	60fb      	str	r3, [r7, #12]
            break;
701095bc:	e009      	b.n	701095d2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
701095be:	f7fd fa55 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701095c2:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
701095c4:	68fa      	ldr	r2, [r7, #12]
701095c6:	68bb      	ldr	r3, [r7, #8]
701095c8:	fbb2 f3f3 	udiv	r3, r2, r3
701095cc:	60fb      	str	r3, [r7, #12]
            break;
701095ce:	e000      	b.n	701095d2 <RCCEx_GetSPICLKFreq+0x52a>
            break;
701095d0:	bf00      	nop
        }
      }
      break;
701095d2:	e026      	b.n	70109622 <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
701095d4:	f7f8 ff00 	bl	701023d8 <LL_RCC_HSI_IsReady>
701095d8:	4603      	mov	r3, r0
701095da:	2b00      	cmp	r3, #0
701095dc:	d023      	beq.n	70109626 <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
701095de:	f7f8 ff0d 	bl	701023fc <LL_RCC_HSI_GetDivider>
701095e2:	4603      	mov	r3, r0
701095e4:	09db      	lsrs	r3, r3, #7
701095e6:	4a15      	ldr	r2, [pc, #84]	@ (7010963c <RCCEx_GetSPICLKFreq+0x594>)
701095e8:	fa22 f303 	lsr.w	r3, r2, r3
701095ec:	60fb      	str	r3, [r7, #12]
      }
      break;
701095ee:	e01a      	b.n	70109626 <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
701095f0:	f7f8 ff12 	bl	70102418 <LL_RCC_MSI_IsReady>
701095f4:	4603      	mov	r3, r0
701095f6:	2b00      	cmp	r3, #0
701095f8:	d017      	beq.n	7010962a <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
701095fa:	4b11      	ldr	r3, [pc, #68]	@ (70109640 <RCCEx_GetSPICLKFreq+0x598>)
701095fc:	60fb      	str	r3, [r7, #12]
      }
      break;
701095fe:	e014      	b.n	7010962a <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
70109600:	4b10      	ldr	r3, [pc, #64]	@ (70109644 <RCCEx_GetSPICLKFreq+0x59c>)
70109602:	60fb      	str	r3, [r7, #12]
      break;
70109604:	e014      	b.n	70109630 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
70109606:	f7f8 fed5 	bl	701023b4 <LL_RCC_HSE_IsReady>
7010960a:	4603      	mov	r3, r0
7010960c:	2b00      	cmp	r3, #0
7010960e:	d00e      	beq.n	7010962e <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
70109610:	4b0d      	ldr	r3, [pc, #52]	@ (70109648 <RCCEx_GetSPICLKFreq+0x5a0>)
70109612:	60fb      	str	r3, [r7, #12]
      }
      break;
70109614:	e00b      	b.n	7010962e <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
70109616:	bf00      	nop
70109618:	e00a      	b.n	70109630 <RCCEx_GetSPICLKFreq+0x588>
      break;
7010961a:	bf00      	nop
7010961c:	e008      	b.n	70109630 <RCCEx_GetSPICLKFreq+0x588>
      break;
7010961e:	bf00      	nop
70109620:	e006      	b.n	70109630 <RCCEx_GetSPICLKFreq+0x588>
      break;
70109622:	bf00      	nop
70109624:	e004      	b.n	70109630 <RCCEx_GetSPICLKFreq+0x588>
      break;
70109626:	bf00      	nop
70109628:	e002      	b.n	70109630 <RCCEx_GetSPICLKFreq+0x588>
      break;
7010962a:	bf00      	nop
7010962c:	e000      	b.n	70109630 <RCCEx_GetSPICLKFreq+0x588>
      break;
7010962e:	bf00      	nop
  }

  return spi_frequency;
70109630:	68fb      	ldr	r3, [r7, #12]
}
70109632:	4618      	mov	r0, r3
70109634:	3710      	adds	r7, #16
70109636:	46bd      	mov	sp, r7
70109638:	bd80      	pop	{r7, pc}
7010963a:	bf00      	nop
7010963c:	03d09000 	.word	0x03d09000
70109640:	003d0900 	.word	0x003d0900
70109644:	00bb8000 	.word	0x00bb8000
70109648:	016e3600 	.word	0x016e3600

7010964c <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
7010964c:	b580      	push	{r7, lr}
7010964e:	b084      	sub	sp, #16
70109650:	af00      	add	r7, sp, #0
70109652:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
70109654:	2300      	movs	r3, #0
70109656:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
70109658:	6878      	ldr	r0, [r7, #4]
7010965a:	f7f9 fab1 	bl	70102bc0 <LL_RCC_GetUARTClockSource>
7010965e:	4603      	mov	r3, r0
70109660:	4aa2      	ldr	r2, [pc, #648]	@ (701098ec <RCCEx_GetUARTCLKFreq+0x2a0>)
70109662:	4293      	cmp	r3, r2
70109664:	f000 81e8 	beq.w	70109a38 <RCCEx_GetUARTCLKFreq+0x3ec>
70109668:	4aa0      	ldr	r2, [pc, #640]	@ (701098ec <RCCEx_GetUARTCLKFreq+0x2a0>)
7010966a:	4293      	cmp	r3, r2
7010966c:	f200 8203 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109670:	4a9f      	ldr	r2, [pc, #636]	@ (701098f0 <RCCEx_GetUARTCLKFreq+0x2a4>)
70109672:	4293      	cmp	r3, r2
70109674:	f000 81e0 	beq.w	70109a38 <RCCEx_GetUARTCLKFreq+0x3ec>
70109678:	4a9d      	ldr	r2, [pc, #628]	@ (701098f0 <RCCEx_GetUARTCLKFreq+0x2a4>)
7010967a:	4293      	cmp	r3, r2
7010967c:	f200 81fb 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109680:	4a9c      	ldr	r2, [pc, #624]	@ (701098f4 <RCCEx_GetUARTCLKFreq+0x2a8>)
70109682:	4293      	cmp	r3, r2
70109684:	f000 81d8 	beq.w	70109a38 <RCCEx_GetUARTCLKFreq+0x3ec>
70109688:	4a9a      	ldr	r2, [pc, #616]	@ (701098f4 <RCCEx_GetUARTCLKFreq+0x2a8>)
7010968a:	4293      	cmp	r3, r2
7010968c:	f200 81f3 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109690:	4a99      	ldr	r2, [pc, #612]	@ (701098f8 <RCCEx_GetUARTCLKFreq+0x2ac>)
70109692:	4293      	cmp	r3, r2
70109694:	f000 81d0 	beq.w	70109a38 <RCCEx_GetUARTCLKFreq+0x3ec>
70109698:	4a97      	ldr	r2, [pc, #604]	@ (701098f8 <RCCEx_GetUARTCLKFreq+0x2ac>)
7010969a:	4293      	cmp	r3, r2
7010969c:	f200 81eb 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701096a0:	4a96      	ldr	r2, [pc, #600]	@ (701098fc <RCCEx_GetUARTCLKFreq+0x2b0>)
701096a2:	4293      	cmp	r3, r2
701096a4:	f000 81c8 	beq.w	70109a38 <RCCEx_GetUARTCLKFreq+0x3ec>
701096a8:	4a94      	ldr	r2, [pc, #592]	@ (701098fc <RCCEx_GetUARTCLKFreq+0x2b0>)
701096aa:	4293      	cmp	r3, r2
701096ac:	f200 81e3 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701096b0:	4a93      	ldr	r2, [pc, #588]	@ (70109900 <RCCEx_GetUARTCLKFreq+0x2b4>)
701096b2:	4293      	cmp	r3, r2
701096b4:	f000 81ce 	beq.w	70109a54 <RCCEx_GetUARTCLKFreq+0x408>
701096b8:	4a91      	ldr	r2, [pc, #580]	@ (70109900 <RCCEx_GetUARTCLKFreq+0x2b4>)
701096ba:	4293      	cmp	r3, r2
701096bc:	f200 81db 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701096c0:	4a90      	ldr	r2, [pc, #576]	@ (70109904 <RCCEx_GetUARTCLKFreq+0x2b8>)
701096c2:	4293      	cmp	r3, r2
701096c4:	f000 81c6 	beq.w	70109a54 <RCCEx_GetUARTCLKFreq+0x408>
701096c8:	4a8e      	ldr	r2, [pc, #568]	@ (70109904 <RCCEx_GetUARTCLKFreq+0x2b8>)
701096ca:	4293      	cmp	r3, r2
701096cc:	f200 81d3 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701096d0:	4a8d      	ldr	r2, [pc, #564]	@ (70109908 <RCCEx_GetUARTCLKFreq+0x2bc>)
701096d2:	4293      	cmp	r3, r2
701096d4:	f000 81be 	beq.w	70109a54 <RCCEx_GetUARTCLKFreq+0x408>
701096d8:	4a8b      	ldr	r2, [pc, #556]	@ (70109908 <RCCEx_GetUARTCLKFreq+0x2bc>)
701096da:	4293      	cmp	r3, r2
701096dc:	f200 81cb 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701096e0:	4a8a      	ldr	r2, [pc, #552]	@ (7010990c <RCCEx_GetUARTCLKFreq+0x2c0>)
701096e2:	4293      	cmp	r3, r2
701096e4:	f000 81b6 	beq.w	70109a54 <RCCEx_GetUARTCLKFreq+0x408>
701096e8:	4a88      	ldr	r2, [pc, #544]	@ (7010990c <RCCEx_GetUARTCLKFreq+0x2c0>)
701096ea:	4293      	cmp	r3, r2
701096ec:	f200 81c3 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701096f0:	4a87      	ldr	r2, [pc, #540]	@ (70109910 <RCCEx_GetUARTCLKFreq+0x2c4>)
701096f2:	4293      	cmp	r3, r2
701096f4:	f000 81ae 	beq.w	70109a54 <RCCEx_GetUARTCLKFreq+0x408>
701096f8:	4a85      	ldr	r2, [pc, #532]	@ (70109910 <RCCEx_GetUARTCLKFreq+0x2c4>)
701096fa:	4293      	cmp	r3, r2
701096fc:	f200 81bb 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109700:	4a84      	ldr	r2, [pc, #528]	@ (70109914 <RCCEx_GetUARTCLKFreq+0x2c8>)
70109702:	4293      	cmp	r3, r2
70109704:	f000 81ae 	beq.w	70109a64 <RCCEx_GetUARTCLKFreq+0x418>
70109708:	4a82      	ldr	r2, [pc, #520]	@ (70109914 <RCCEx_GetUARTCLKFreq+0x2c8>)
7010970a:	4293      	cmp	r3, r2
7010970c:	f200 81b3 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109710:	4a81      	ldr	r2, [pc, #516]	@ (70109918 <RCCEx_GetUARTCLKFreq+0x2cc>)
70109712:	4293      	cmp	r3, r2
70109714:	f000 81a6 	beq.w	70109a64 <RCCEx_GetUARTCLKFreq+0x418>
70109718:	4a7f      	ldr	r2, [pc, #508]	@ (70109918 <RCCEx_GetUARTCLKFreq+0x2cc>)
7010971a:	4293      	cmp	r3, r2
7010971c:	f200 81ab 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109720:	4a7e      	ldr	r2, [pc, #504]	@ (7010991c <RCCEx_GetUARTCLKFreq+0x2d0>)
70109722:	4293      	cmp	r3, r2
70109724:	f000 819e 	beq.w	70109a64 <RCCEx_GetUARTCLKFreq+0x418>
70109728:	4a7c      	ldr	r2, [pc, #496]	@ (7010991c <RCCEx_GetUARTCLKFreq+0x2d0>)
7010972a:	4293      	cmp	r3, r2
7010972c:	f200 81a3 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109730:	4a7b      	ldr	r2, [pc, #492]	@ (70109920 <RCCEx_GetUARTCLKFreq+0x2d4>)
70109732:	4293      	cmp	r3, r2
70109734:	f000 8196 	beq.w	70109a64 <RCCEx_GetUARTCLKFreq+0x418>
70109738:	4a79      	ldr	r2, [pc, #484]	@ (70109920 <RCCEx_GetUARTCLKFreq+0x2d4>)
7010973a:	4293      	cmp	r3, r2
7010973c:	f200 819b 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109740:	4a78      	ldr	r2, [pc, #480]	@ (70109924 <RCCEx_GetUARTCLKFreq+0x2d8>)
70109742:	4293      	cmp	r3, r2
70109744:	f000 818e 	beq.w	70109a64 <RCCEx_GetUARTCLKFreq+0x418>
70109748:	4a76      	ldr	r2, [pc, #472]	@ (70109924 <RCCEx_GetUARTCLKFreq+0x2d8>)
7010974a:	4293      	cmp	r3, r2
7010974c:	f200 8193 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109750:	4a75      	ldr	r2, [pc, #468]	@ (70109928 <RCCEx_GetUARTCLKFreq+0x2dc>)
70109752:	4293      	cmp	r3, r2
70109754:	f000 812d 	beq.w	701099b2 <RCCEx_GetUARTCLKFreq+0x366>
70109758:	4a73      	ldr	r2, [pc, #460]	@ (70109928 <RCCEx_GetUARTCLKFreq+0x2dc>)
7010975a:	4293      	cmp	r3, r2
7010975c:	f200 818b 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109760:	4a72      	ldr	r2, [pc, #456]	@ (7010992c <RCCEx_GetUARTCLKFreq+0x2e0>)
70109762:	4293      	cmp	r3, r2
70109764:	f000 8125 	beq.w	701099b2 <RCCEx_GetUARTCLKFreq+0x366>
70109768:	4a70      	ldr	r2, [pc, #448]	@ (7010992c <RCCEx_GetUARTCLKFreq+0x2e0>)
7010976a:	4293      	cmp	r3, r2
7010976c:	f200 8183 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109770:	4a6f      	ldr	r2, [pc, #444]	@ (70109930 <RCCEx_GetUARTCLKFreq+0x2e4>)
70109772:	4293      	cmp	r3, r2
70109774:	f000 811d 	beq.w	701099b2 <RCCEx_GetUARTCLKFreq+0x366>
70109778:	4a6d      	ldr	r2, [pc, #436]	@ (70109930 <RCCEx_GetUARTCLKFreq+0x2e4>)
7010977a:	4293      	cmp	r3, r2
7010977c:	f200 817b 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109780:	4a6c      	ldr	r2, [pc, #432]	@ (70109934 <RCCEx_GetUARTCLKFreq+0x2e8>)
70109782:	4293      	cmp	r3, r2
70109784:	f000 8115 	beq.w	701099b2 <RCCEx_GetUARTCLKFreq+0x366>
70109788:	4a6a      	ldr	r2, [pc, #424]	@ (70109934 <RCCEx_GetUARTCLKFreq+0x2e8>)
7010978a:	4293      	cmp	r3, r2
7010978c:	f200 8173 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109790:	4a69      	ldr	r2, [pc, #420]	@ (70109938 <RCCEx_GetUARTCLKFreq+0x2ec>)
70109792:	4293      	cmp	r3, r2
70109794:	f000 810d 	beq.w	701099b2 <RCCEx_GetUARTCLKFreq+0x366>
70109798:	4a67      	ldr	r2, [pc, #412]	@ (70109938 <RCCEx_GetUARTCLKFreq+0x2ec>)
7010979a:	4293      	cmp	r3, r2
7010979c:	f200 816b 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701097a0:	4a66      	ldr	r2, [pc, #408]	@ (7010993c <RCCEx_GetUARTCLKFreq+0x2f0>)
701097a2:	4293      	cmp	r3, r2
701097a4:	d07b      	beq.n	7010989e <RCCEx_GetUARTCLKFreq+0x252>
701097a6:	4a65      	ldr	r2, [pc, #404]	@ (7010993c <RCCEx_GetUARTCLKFreq+0x2f0>)
701097a8:	4293      	cmp	r3, r2
701097aa:	f200 8164 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701097ae:	4a64      	ldr	r2, [pc, #400]	@ (70109940 <RCCEx_GetUARTCLKFreq+0x2f4>)
701097b0:	4293      	cmp	r3, r2
701097b2:	d074      	beq.n	7010989e <RCCEx_GetUARTCLKFreq+0x252>
701097b4:	4a62      	ldr	r2, [pc, #392]	@ (70109940 <RCCEx_GetUARTCLKFreq+0x2f4>)
701097b6:	4293      	cmp	r3, r2
701097b8:	f200 815d 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701097bc:	4a61      	ldr	r2, [pc, #388]	@ (70109944 <RCCEx_GetUARTCLKFreq+0x2f8>)
701097be:	4293      	cmp	r3, r2
701097c0:	d06d      	beq.n	7010989e <RCCEx_GetUARTCLKFreq+0x252>
701097c2:	4a60      	ldr	r2, [pc, #384]	@ (70109944 <RCCEx_GetUARTCLKFreq+0x2f8>)
701097c4:	4293      	cmp	r3, r2
701097c6:	f200 8156 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701097ca:	4a5f      	ldr	r2, [pc, #380]	@ (70109948 <RCCEx_GetUARTCLKFreq+0x2fc>)
701097cc:	4293      	cmp	r3, r2
701097ce:	d066      	beq.n	7010989e <RCCEx_GetUARTCLKFreq+0x252>
701097d0:	4a5d      	ldr	r2, [pc, #372]	@ (70109948 <RCCEx_GetUARTCLKFreq+0x2fc>)
701097d2:	4293      	cmp	r3, r2
701097d4:	f200 814f 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701097d8:	4a5c      	ldr	r2, [pc, #368]	@ (7010994c <RCCEx_GetUARTCLKFreq+0x300>)
701097da:	4293      	cmp	r3, r2
701097dc:	d05f      	beq.n	7010989e <RCCEx_GetUARTCLKFreq+0x252>
701097de:	4a5b      	ldr	r2, [pc, #364]	@ (7010994c <RCCEx_GetUARTCLKFreq+0x300>)
701097e0:	4293      	cmp	r3, r2
701097e2:	f200 8148 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701097e6:	4a5a      	ldr	r2, [pc, #360]	@ (70109950 <RCCEx_GetUARTCLKFreq+0x304>)
701097e8:	4293      	cmp	r3, r2
701097ea:	d053      	beq.n	70109894 <RCCEx_GetUARTCLKFreq+0x248>
701097ec:	4a58      	ldr	r2, [pc, #352]	@ (70109950 <RCCEx_GetUARTCLKFreq+0x304>)
701097ee:	4293      	cmp	r3, r2
701097f0:	f200 8141 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
701097f4:	4a57      	ldr	r2, [pc, #348]	@ (70109954 <RCCEx_GetUARTCLKFreq+0x308>)
701097f6:	4293      	cmp	r3, r2
701097f8:	d04c      	beq.n	70109894 <RCCEx_GetUARTCLKFreq+0x248>
701097fa:	4a56      	ldr	r2, [pc, #344]	@ (70109954 <RCCEx_GetUARTCLKFreq+0x308>)
701097fc:	4293      	cmp	r3, r2
701097fe:	f200 813a 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109802:	4a55      	ldr	r2, [pc, #340]	@ (70109958 <RCCEx_GetUARTCLKFreq+0x30c>)
70109804:	4293      	cmp	r3, r2
70109806:	d045      	beq.n	70109894 <RCCEx_GetUARTCLKFreq+0x248>
70109808:	4a53      	ldr	r2, [pc, #332]	@ (70109958 <RCCEx_GetUARTCLKFreq+0x30c>)
7010980a:	4293      	cmp	r3, r2
7010980c:	f200 8133 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109810:	4a52      	ldr	r2, [pc, #328]	@ (7010995c <RCCEx_GetUARTCLKFreq+0x310>)
70109812:	4293      	cmp	r3, r2
70109814:	d03e      	beq.n	70109894 <RCCEx_GetUARTCLKFreq+0x248>
70109816:	4a51      	ldr	r2, [pc, #324]	@ (7010995c <RCCEx_GetUARTCLKFreq+0x310>)
70109818:	4293      	cmp	r3, r2
7010981a:	f200 812c 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
7010981e:	4a50      	ldr	r2, [pc, #320]	@ (70109960 <RCCEx_GetUARTCLKFreq+0x314>)
70109820:	4293      	cmp	r3, r2
70109822:	d037      	beq.n	70109894 <RCCEx_GetUARTCLKFreq+0x248>
70109824:	4a4e      	ldr	r2, [pc, #312]	@ (70109960 <RCCEx_GetUARTCLKFreq+0x314>)
70109826:	4293      	cmp	r3, r2
70109828:	f200 8125 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
7010982c:	4a4d      	ldr	r2, [pc, #308]	@ (70109964 <RCCEx_GetUARTCLKFreq+0x318>)
7010982e:	4293      	cmp	r3, r2
70109830:	d018      	beq.n	70109864 <RCCEx_GetUARTCLKFreq+0x218>
70109832:	4a4c      	ldr	r2, [pc, #304]	@ (70109964 <RCCEx_GetUARTCLKFreq+0x318>)
70109834:	4293      	cmp	r3, r2
70109836:	f200 811e 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
7010983a:	4a4b      	ldr	r2, [pc, #300]	@ (70109968 <RCCEx_GetUARTCLKFreq+0x31c>)
7010983c:	4293      	cmp	r3, r2
7010983e:	d011      	beq.n	70109864 <RCCEx_GetUARTCLKFreq+0x218>
70109840:	4a49      	ldr	r2, [pc, #292]	@ (70109968 <RCCEx_GetUARTCLKFreq+0x31c>)
70109842:	4293      	cmp	r3, r2
70109844:	f200 8117 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109848:	4a48      	ldr	r2, [pc, #288]	@ (7010996c <RCCEx_GetUARTCLKFreq+0x320>)
7010984a:	4293      	cmp	r3, r2
7010984c:	d00a      	beq.n	70109864 <RCCEx_GetUARTCLKFreq+0x218>
7010984e:	4a47      	ldr	r2, [pc, #284]	@ (7010996c <RCCEx_GetUARTCLKFreq+0x320>)
70109850:	4293      	cmp	r3, r2
70109852:	f200 8110 	bhi.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
70109856:	4a46      	ldr	r2, [pc, #280]	@ (70109970 <RCCEx_GetUARTCLKFreq+0x324>)
70109858:	4293      	cmp	r3, r2
7010985a:	d00f      	beq.n	7010987c <RCCEx_GetUARTCLKFreq+0x230>
7010985c:	4a45      	ldr	r2, [pc, #276]	@ (70109974 <RCCEx_GetUARTCLKFreq+0x328>)
7010985e:	4293      	cmp	r3, r2
70109860:	f040 8109 	bne.w	70109a76 <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
70109864:	f7f8 fce2 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70109868:	4603      	mov	r3, r0
7010986a:	4618      	mov	r0, r3
7010986c:	f7fd f944 	bl	70106af8 <RCCEx_GetHCLKFreq>
70109870:	4603      	mov	r3, r0
70109872:	4618      	mov	r0, r3
70109874:	f7fd f951 	bl	70106b1a <RCCEx_GetPCLK1Freq>
70109878:	60f8      	str	r0, [r7, #12]
      break;
7010987a:	e107      	b.n	70109a8c <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
7010987c:	f7f8 fcd6 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70109880:	4603      	mov	r3, r0
70109882:	4618      	mov	r0, r3
70109884:	f7fd f938 	bl	70106af8 <RCCEx_GetHCLKFreq>
70109888:	4603      	mov	r3, r0
7010988a:	4618      	mov	r0, r3
7010988c:	f7fd f955 	bl	70106b3a <RCCEx_GetPCLK2Freq>
70109890:	60f8      	str	r0, [r7, #12]
      break;
70109892:	e0fb      	b.n	70109a8c <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70109894:	2007      	movs	r0, #7
70109896:	f7fd fc1b 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
7010989a:	60f8      	str	r0, [r7, #12]
      break;
7010989c:	e0f6      	b.n	70109a8c <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
7010989e:	f7f9 fdbf 	bl	70103420 <LL_RCC_IC9_IsEnabled>
701098a2:	4603      	mov	r3, r0
701098a4:	2b00      	cmp	r3, #0
701098a6:	f000 80e8 	beq.w	70109a7a <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
701098aa:	f7f9 fddb 	bl	70103464 <LL_RCC_IC9_GetDivider>
701098ae:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
701098b0:	f7f9 fdca 	bl	70103448 <LL_RCC_IC9_GetSource>
701098b4:	4603      	mov	r3, r0
701098b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701098ba:	d06f      	beq.n	7010999c <RCCEx_GetUARTCLKFreq+0x350>
701098bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701098c0:	d875      	bhi.n	701099ae <RCCEx_GetUARTCLKFreq+0x362>
701098c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701098c6:	d060      	beq.n	7010998a <RCCEx_GetUARTCLKFreq+0x33e>
701098c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701098cc:	d86f      	bhi.n	701099ae <RCCEx_GetUARTCLKFreq+0x362>
701098ce:	2b00      	cmp	r3, #0
701098d0:	d003      	beq.n	701098da <RCCEx_GetUARTCLKFreq+0x28e>
701098d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
701098d6:	d04f      	beq.n	70109978 <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
701098d8:	e069      	b.n	701099ae <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
701098da:	f7fc fff5 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
701098de:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
701098e0:	68fa      	ldr	r2, [r7, #12]
701098e2:	68bb      	ldr	r3, [r7, #8]
701098e4:	fbb2 f3f3 	udiv	r3, r2, r3
701098e8:	60fb      	str	r3, [r7, #12]
            break;
701098ea:	e061      	b.n	701099b0 <RCCEx_GetUARTCLKFreq+0x364>
701098ec:	07061c30 	.word	0x07061c30
701098f0:	07061830 	.word	0x07061830
701098f4:	07061030 	.word	0x07061030
701098f8:	07060c30 	.word	0x07060c30
701098fc:	07060034 	.word	0x07060034
70109900:	07051c30 	.word	0x07051c30
70109904:	07051830 	.word	0x07051830
70109908:	07051030 	.word	0x07051030
7010990c:	07050c30 	.word	0x07050c30
70109910:	07050034 	.word	0x07050034
70109914:	07041c30 	.word	0x07041c30
70109918:	07041830 	.word	0x07041830
7010991c:	07041030 	.word	0x07041030
70109920:	07040c30 	.word	0x07040c30
70109924:	07040034 	.word	0x07040034
70109928:	07031c30 	.word	0x07031c30
7010992c:	07031830 	.word	0x07031830
70109930:	07031030 	.word	0x07031030
70109934:	07030c30 	.word	0x07030c30
70109938:	07030034 	.word	0x07030034
7010993c:	07021c30 	.word	0x07021c30
70109940:	07021830 	.word	0x07021830
70109944:	07021030 	.word	0x07021030
70109948:	07020c30 	.word	0x07020c30
7010994c:	07020034 	.word	0x07020034
70109950:	07011c30 	.word	0x07011c30
70109954:	07011830 	.word	0x07011830
70109958:	07011030 	.word	0x07011030
7010995c:	07010c30 	.word	0x07010c30
70109960:	07010034 	.word	0x07010034
70109964:	07001c30 	.word	0x07001c30
70109968:	07001830 	.word	0x07001830
7010996c:	07001030 	.word	0x07001030
70109970:	07000034 	.word	0x07000034
70109974:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70109978:	f7fc ffec 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
7010997c:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
7010997e:	68fa      	ldr	r2, [r7, #12]
70109980:	68bb      	ldr	r3, [r7, #8]
70109982:	fbb2 f3f3 	udiv	r3, r2, r3
70109986:	60fb      	str	r3, [r7, #12]
            break;
70109988:	e012      	b.n	701099b0 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
7010998a:	f7fd f829 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010998e:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
70109990:	68fa      	ldr	r2, [r7, #12]
70109992:	68bb      	ldr	r3, [r7, #8]
70109994:	fbb2 f3f3 	udiv	r3, r2, r3
70109998:	60fb      	str	r3, [r7, #12]
            break;
7010999a:	e009      	b.n	701099b0 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
7010999c:	f7fd f866 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
701099a0:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
701099a2:	68fa      	ldr	r2, [r7, #12]
701099a4:	68bb      	ldr	r3, [r7, #8]
701099a6:	fbb2 f3f3 	udiv	r3, r2, r3
701099aa:	60fb      	str	r3, [r7, #12]
            break;
701099ac:	e000      	b.n	701099b0 <RCCEx_GetUARTCLKFreq+0x364>
            break;
701099ae:	bf00      	nop
        }
      }
      break;
701099b0:	e063      	b.n	70109a7a <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
701099b2:	f7f9 fe35 	bl	70103620 <LL_RCC_IC14_IsEnabled>
701099b6:	4603      	mov	r3, r0
701099b8:	2b00      	cmp	r3, #0
701099ba:	d060      	beq.n	70109a7e <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
701099bc:	f7f9 fe52 	bl	70103664 <LL_RCC_IC14_GetDivider>
701099c0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
701099c2:	f7f9 fe41 	bl	70103648 <LL_RCC_IC14_GetSource>
701099c6:	4603      	mov	r3, r0
701099c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701099cc:	d029      	beq.n	70109a22 <RCCEx_GetUARTCLKFreq+0x3d6>
701099ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
701099d2:	d82f      	bhi.n	70109a34 <RCCEx_GetUARTCLKFreq+0x3e8>
701099d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701099d8:	d01a      	beq.n	70109a10 <RCCEx_GetUARTCLKFreq+0x3c4>
701099da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
701099de:	d829      	bhi.n	70109a34 <RCCEx_GetUARTCLKFreq+0x3e8>
701099e0:	2b00      	cmp	r3, #0
701099e2:	d003      	beq.n	701099ec <RCCEx_GetUARTCLKFreq+0x3a0>
701099e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
701099e8:	d009      	beq.n	701099fe <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
701099ea:	e023      	b.n	70109a34 <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
701099ec:	f7fc ff6c 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
701099f0:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
701099f2:	68fa      	ldr	r2, [r7, #12]
701099f4:	68bb      	ldr	r3, [r7, #8]
701099f6:	fbb2 f3f3 	udiv	r3, r2, r3
701099fa:	60fb      	str	r3, [r7, #12]
            break;
701099fc:	e01b      	b.n	70109a36 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
701099fe:	f7fc ffa9 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70109a02:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
70109a04:	68fa      	ldr	r2, [r7, #12]
70109a06:	68bb      	ldr	r3, [r7, #8]
70109a08:	fbb2 f3f3 	udiv	r3, r2, r3
70109a0c:	60fb      	str	r3, [r7, #12]
            break;
70109a0e:	e012      	b.n	70109a36 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70109a10:	f7fc ffe6 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70109a14:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
70109a16:	68fa      	ldr	r2, [r7, #12]
70109a18:	68bb      	ldr	r3, [r7, #8]
70109a1a:	fbb2 f3f3 	udiv	r3, r2, r3
70109a1e:	60fb      	str	r3, [r7, #12]
            break;
70109a20:	e009      	b.n	70109a36 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70109a22:	f7fd f823 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70109a26:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
70109a28:	68fa      	ldr	r2, [r7, #12]
70109a2a:	68bb      	ldr	r3, [r7, #8]
70109a2c:	fbb2 f3f3 	udiv	r3, r2, r3
70109a30:	60fb      	str	r3, [r7, #12]
            break;
70109a32:	e000      	b.n	70109a36 <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
70109a34:	bf00      	nop
        }
      }
      break;
70109a36:	e022      	b.n	70109a7e <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
70109a38:	f7f8 fcce 	bl	701023d8 <LL_RCC_HSI_IsReady>
70109a3c:	4603      	mov	r3, r0
70109a3e:	2b00      	cmp	r3, #0
70109a40:	d01f      	beq.n	70109a82 <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70109a42:	f7f8 fcdb 	bl	701023fc <LL_RCC_HSI_GetDivider>
70109a46:	4603      	mov	r3, r0
70109a48:	09db      	lsrs	r3, r3, #7
70109a4a:	4a13      	ldr	r2, [pc, #76]	@ (70109a98 <RCCEx_GetUARTCLKFreq+0x44c>)
70109a4c:	fa22 f303 	lsr.w	r3, r2, r3
70109a50:	60fb      	str	r3, [r7, #12]
      }
      break;
70109a52:	e016      	b.n	70109a82 <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
70109a54:	f7f8 fce0 	bl	70102418 <LL_RCC_MSI_IsReady>
70109a58:	4603      	mov	r3, r0
70109a5a:	2b00      	cmp	r3, #0
70109a5c:	d013      	beq.n	70109a86 <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
70109a5e:	4b0f      	ldr	r3, [pc, #60]	@ (70109a9c <RCCEx_GetUARTCLKFreq+0x450>)
70109a60:	60fb      	str	r3, [r7, #12]
      }
      break;
70109a62:	e010      	b.n	70109a86 <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
70109a64:	f7f8 fcf8 	bl	70102458 <LL_RCC_LSE_IsReady>
70109a68:	4603      	mov	r3, r0
70109a6a:	2b00      	cmp	r3, #0
70109a6c:	d00d      	beq.n	70109a8a <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
70109a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
70109a72:	60fb      	str	r3, [r7, #12]
      }
      break;
70109a74:	e009      	b.n	70109a8a <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
70109a76:	bf00      	nop
70109a78:	e008      	b.n	70109a8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
70109a7a:	bf00      	nop
70109a7c:	e006      	b.n	70109a8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
70109a7e:	bf00      	nop
70109a80:	e004      	b.n	70109a8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
70109a82:	bf00      	nop
70109a84:	e002      	b.n	70109a8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
70109a86:	bf00      	nop
70109a88:	e000      	b.n	70109a8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
70109a8a:	bf00      	nop
  }

  return uart_frequency;
70109a8c:	68fb      	ldr	r3, [r7, #12]
}
70109a8e:	4618      	mov	r0, r3
70109a90:	3710      	adds	r7, #16
70109a92:	46bd      	mov	sp, r7
70109a94:	bd80      	pop	{r7, pc}
70109a96:	bf00      	nop
70109a98:	03d09000 	.word	0x03d09000
70109a9c:	003d0900 	.word	0x003d0900

70109aa0 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
70109aa0:	b580      	push	{r7, lr}
70109aa2:	b084      	sub	sp, #16
70109aa4:	af00      	add	r7, sp, #0
70109aa6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
70109aa8:	2300      	movs	r3, #0
70109aaa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
70109aac:	6878      	ldr	r0, [r7, #4]
70109aae:	f7f9 f87b 	bl	70102ba8 <LL_RCC_GetUSARTClockSource>
70109ab2:	4603      	mov	r3, r0
70109ab4:	4aa2      	ldr	r2, [pc, #648]	@ (70109d40 <RCCEx_GetUSARTCLKFreq+0x2a0>)
70109ab6:	4293      	cmp	r3, r2
70109ab8:	f000 81e8 	beq.w	70109e8c <RCCEx_GetUSARTCLKFreq+0x3ec>
70109abc:	4aa0      	ldr	r2, [pc, #640]	@ (70109d40 <RCCEx_GetUSARTCLKFreq+0x2a0>)
70109abe:	4293      	cmp	r3, r2
70109ac0:	f200 8203 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109ac4:	4a9f      	ldr	r2, [pc, #636]	@ (70109d44 <RCCEx_GetUSARTCLKFreq+0x2a4>)
70109ac6:	4293      	cmp	r3, r2
70109ac8:	f000 81e0 	beq.w	70109e8c <RCCEx_GetUSARTCLKFreq+0x3ec>
70109acc:	4a9d      	ldr	r2, [pc, #628]	@ (70109d44 <RCCEx_GetUSARTCLKFreq+0x2a4>)
70109ace:	4293      	cmp	r3, r2
70109ad0:	f200 81fb 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109ad4:	4a9c      	ldr	r2, [pc, #624]	@ (70109d48 <RCCEx_GetUSARTCLKFreq+0x2a8>)
70109ad6:	4293      	cmp	r3, r2
70109ad8:	f000 81d8 	beq.w	70109e8c <RCCEx_GetUSARTCLKFreq+0x3ec>
70109adc:	4a9a      	ldr	r2, [pc, #616]	@ (70109d48 <RCCEx_GetUSARTCLKFreq+0x2a8>)
70109ade:	4293      	cmp	r3, r2
70109ae0:	f200 81f3 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109ae4:	4a99      	ldr	r2, [pc, #612]	@ (70109d4c <RCCEx_GetUSARTCLKFreq+0x2ac>)
70109ae6:	4293      	cmp	r3, r2
70109ae8:	f000 81d0 	beq.w	70109e8c <RCCEx_GetUSARTCLKFreq+0x3ec>
70109aec:	4a97      	ldr	r2, [pc, #604]	@ (70109d4c <RCCEx_GetUSARTCLKFreq+0x2ac>)
70109aee:	4293      	cmp	r3, r2
70109af0:	f200 81eb 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109af4:	4a96      	ldr	r2, [pc, #600]	@ (70109d50 <RCCEx_GetUSARTCLKFreq+0x2b0>)
70109af6:	4293      	cmp	r3, r2
70109af8:	f000 81c8 	beq.w	70109e8c <RCCEx_GetUSARTCLKFreq+0x3ec>
70109afc:	4a94      	ldr	r2, [pc, #592]	@ (70109d50 <RCCEx_GetUSARTCLKFreq+0x2b0>)
70109afe:	4293      	cmp	r3, r2
70109b00:	f200 81e3 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109b04:	4a93      	ldr	r2, [pc, #588]	@ (70109d54 <RCCEx_GetUSARTCLKFreq+0x2b4>)
70109b06:	4293      	cmp	r3, r2
70109b08:	f000 81ce 	beq.w	70109ea8 <RCCEx_GetUSARTCLKFreq+0x408>
70109b0c:	4a91      	ldr	r2, [pc, #580]	@ (70109d54 <RCCEx_GetUSARTCLKFreq+0x2b4>)
70109b0e:	4293      	cmp	r3, r2
70109b10:	f200 81db 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109b14:	4a90      	ldr	r2, [pc, #576]	@ (70109d58 <RCCEx_GetUSARTCLKFreq+0x2b8>)
70109b16:	4293      	cmp	r3, r2
70109b18:	f000 81c6 	beq.w	70109ea8 <RCCEx_GetUSARTCLKFreq+0x408>
70109b1c:	4a8e      	ldr	r2, [pc, #568]	@ (70109d58 <RCCEx_GetUSARTCLKFreq+0x2b8>)
70109b1e:	4293      	cmp	r3, r2
70109b20:	f200 81d3 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109b24:	4a8d      	ldr	r2, [pc, #564]	@ (70109d5c <RCCEx_GetUSARTCLKFreq+0x2bc>)
70109b26:	4293      	cmp	r3, r2
70109b28:	f000 81be 	beq.w	70109ea8 <RCCEx_GetUSARTCLKFreq+0x408>
70109b2c:	4a8b      	ldr	r2, [pc, #556]	@ (70109d5c <RCCEx_GetUSARTCLKFreq+0x2bc>)
70109b2e:	4293      	cmp	r3, r2
70109b30:	f200 81cb 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109b34:	4a8a      	ldr	r2, [pc, #552]	@ (70109d60 <RCCEx_GetUSARTCLKFreq+0x2c0>)
70109b36:	4293      	cmp	r3, r2
70109b38:	f000 81b6 	beq.w	70109ea8 <RCCEx_GetUSARTCLKFreq+0x408>
70109b3c:	4a88      	ldr	r2, [pc, #544]	@ (70109d60 <RCCEx_GetUSARTCLKFreq+0x2c0>)
70109b3e:	4293      	cmp	r3, r2
70109b40:	f200 81c3 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109b44:	4a87      	ldr	r2, [pc, #540]	@ (70109d64 <RCCEx_GetUSARTCLKFreq+0x2c4>)
70109b46:	4293      	cmp	r3, r2
70109b48:	f000 81ae 	beq.w	70109ea8 <RCCEx_GetUSARTCLKFreq+0x408>
70109b4c:	4a85      	ldr	r2, [pc, #532]	@ (70109d64 <RCCEx_GetUSARTCLKFreq+0x2c4>)
70109b4e:	4293      	cmp	r3, r2
70109b50:	f200 81bb 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109b54:	4a84      	ldr	r2, [pc, #528]	@ (70109d68 <RCCEx_GetUSARTCLKFreq+0x2c8>)
70109b56:	4293      	cmp	r3, r2
70109b58:	f000 81ae 	beq.w	70109eb8 <RCCEx_GetUSARTCLKFreq+0x418>
70109b5c:	4a82      	ldr	r2, [pc, #520]	@ (70109d68 <RCCEx_GetUSARTCLKFreq+0x2c8>)
70109b5e:	4293      	cmp	r3, r2
70109b60:	f200 81b3 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109b64:	4a81      	ldr	r2, [pc, #516]	@ (70109d6c <RCCEx_GetUSARTCLKFreq+0x2cc>)
70109b66:	4293      	cmp	r3, r2
70109b68:	f000 81a6 	beq.w	70109eb8 <RCCEx_GetUSARTCLKFreq+0x418>
70109b6c:	4a7f      	ldr	r2, [pc, #508]	@ (70109d6c <RCCEx_GetUSARTCLKFreq+0x2cc>)
70109b6e:	4293      	cmp	r3, r2
70109b70:	f200 81ab 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109b74:	4a7e      	ldr	r2, [pc, #504]	@ (70109d70 <RCCEx_GetUSARTCLKFreq+0x2d0>)
70109b76:	4293      	cmp	r3, r2
70109b78:	f000 819e 	beq.w	70109eb8 <RCCEx_GetUSARTCLKFreq+0x418>
70109b7c:	4a7c      	ldr	r2, [pc, #496]	@ (70109d70 <RCCEx_GetUSARTCLKFreq+0x2d0>)
70109b7e:	4293      	cmp	r3, r2
70109b80:	f200 81a3 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109b84:	4a7b      	ldr	r2, [pc, #492]	@ (70109d74 <RCCEx_GetUSARTCLKFreq+0x2d4>)
70109b86:	4293      	cmp	r3, r2
70109b88:	f000 8196 	beq.w	70109eb8 <RCCEx_GetUSARTCLKFreq+0x418>
70109b8c:	4a79      	ldr	r2, [pc, #484]	@ (70109d74 <RCCEx_GetUSARTCLKFreq+0x2d4>)
70109b8e:	4293      	cmp	r3, r2
70109b90:	f200 819b 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109b94:	4a78      	ldr	r2, [pc, #480]	@ (70109d78 <RCCEx_GetUSARTCLKFreq+0x2d8>)
70109b96:	4293      	cmp	r3, r2
70109b98:	f000 818e 	beq.w	70109eb8 <RCCEx_GetUSARTCLKFreq+0x418>
70109b9c:	4a76      	ldr	r2, [pc, #472]	@ (70109d78 <RCCEx_GetUSARTCLKFreq+0x2d8>)
70109b9e:	4293      	cmp	r3, r2
70109ba0:	f200 8193 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109ba4:	4a75      	ldr	r2, [pc, #468]	@ (70109d7c <RCCEx_GetUSARTCLKFreq+0x2dc>)
70109ba6:	4293      	cmp	r3, r2
70109ba8:	f000 812d 	beq.w	70109e06 <RCCEx_GetUSARTCLKFreq+0x366>
70109bac:	4a73      	ldr	r2, [pc, #460]	@ (70109d7c <RCCEx_GetUSARTCLKFreq+0x2dc>)
70109bae:	4293      	cmp	r3, r2
70109bb0:	f200 818b 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109bb4:	4a72      	ldr	r2, [pc, #456]	@ (70109d80 <RCCEx_GetUSARTCLKFreq+0x2e0>)
70109bb6:	4293      	cmp	r3, r2
70109bb8:	f000 8125 	beq.w	70109e06 <RCCEx_GetUSARTCLKFreq+0x366>
70109bbc:	4a70      	ldr	r2, [pc, #448]	@ (70109d80 <RCCEx_GetUSARTCLKFreq+0x2e0>)
70109bbe:	4293      	cmp	r3, r2
70109bc0:	f200 8183 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109bc4:	4a6f      	ldr	r2, [pc, #444]	@ (70109d84 <RCCEx_GetUSARTCLKFreq+0x2e4>)
70109bc6:	4293      	cmp	r3, r2
70109bc8:	f000 811d 	beq.w	70109e06 <RCCEx_GetUSARTCLKFreq+0x366>
70109bcc:	4a6d      	ldr	r2, [pc, #436]	@ (70109d84 <RCCEx_GetUSARTCLKFreq+0x2e4>)
70109bce:	4293      	cmp	r3, r2
70109bd0:	f200 817b 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109bd4:	4a6c      	ldr	r2, [pc, #432]	@ (70109d88 <RCCEx_GetUSARTCLKFreq+0x2e8>)
70109bd6:	4293      	cmp	r3, r2
70109bd8:	f000 8115 	beq.w	70109e06 <RCCEx_GetUSARTCLKFreq+0x366>
70109bdc:	4a6a      	ldr	r2, [pc, #424]	@ (70109d88 <RCCEx_GetUSARTCLKFreq+0x2e8>)
70109bde:	4293      	cmp	r3, r2
70109be0:	f200 8173 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109be4:	4a69      	ldr	r2, [pc, #420]	@ (70109d8c <RCCEx_GetUSARTCLKFreq+0x2ec>)
70109be6:	4293      	cmp	r3, r2
70109be8:	f000 810d 	beq.w	70109e06 <RCCEx_GetUSARTCLKFreq+0x366>
70109bec:	4a67      	ldr	r2, [pc, #412]	@ (70109d8c <RCCEx_GetUSARTCLKFreq+0x2ec>)
70109bee:	4293      	cmp	r3, r2
70109bf0:	f200 816b 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109bf4:	4a66      	ldr	r2, [pc, #408]	@ (70109d90 <RCCEx_GetUSARTCLKFreq+0x2f0>)
70109bf6:	4293      	cmp	r3, r2
70109bf8:	d07b      	beq.n	70109cf2 <RCCEx_GetUSARTCLKFreq+0x252>
70109bfa:	4a65      	ldr	r2, [pc, #404]	@ (70109d90 <RCCEx_GetUSARTCLKFreq+0x2f0>)
70109bfc:	4293      	cmp	r3, r2
70109bfe:	f200 8164 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109c02:	4a64      	ldr	r2, [pc, #400]	@ (70109d94 <RCCEx_GetUSARTCLKFreq+0x2f4>)
70109c04:	4293      	cmp	r3, r2
70109c06:	d074      	beq.n	70109cf2 <RCCEx_GetUSARTCLKFreq+0x252>
70109c08:	4a62      	ldr	r2, [pc, #392]	@ (70109d94 <RCCEx_GetUSARTCLKFreq+0x2f4>)
70109c0a:	4293      	cmp	r3, r2
70109c0c:	f200 815d 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109c10:	4a61      	ldr	r2, [pc, #388]	@ (70109d98 <RCCEx_GetUSARTCLKFreq+0x2f8>)
70109c12:	4293      	cmp	r3, r2
70109c14:	d06d      	beq.n	70109cf2 <RCCEx_GetUSARTCLKFreq+0x252>
70109c16:	4a60      	ldr	r2, [pc, #384]	@ (70109d98 <RCCEx_GetUSARTCLKFreq+0x2f8>)
70109c18:	4293      	cmp	r3, r2
70109c1a:	f200 8156 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109c1e:	4a5f      	ldr	r2, [pc, #380]	@ (70109d9c <RCCEx_GetUSARTCLKFreq+0x2fc>)
70109c20:	4293      	cmp	r3, r2
70109c22:	d066      	beq.n	70109cf2 <RCCEx_GetUSARTCLKFreq+0x252>
70109c24:	4a5d      	ldr	r2, [pc, #372]	@ (70109d9c <RCCEx_GetUSARTCLKFreq+0x2fc>)
70109c26:	4293      	cmp	r3, r2
70109c28:	f200 814f 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109c2c:	4a5c      	ldr	r2, [pc, #368]	@ (70109da0 <RCCEx_GetUSARTCLKFreq+0x300>)
70109c2e:	4293      	cmp	r3, r2
70109c30:	d05f      	beq.n	70109cf2 <RCCEx_GetUSARTCLKFreq+0x252>
70109c32:	4a5b      	ldr	r2, [pc, #364]	@ (70109da0 <RCCEx_GetUSARTCLKFreq+0x300>)
70109c34:	4293      	cmp	r3, r2
70109c36:	f200 8148 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109c3a:	4a5a      	ldr	r2, [pc, #360]	@ (70109da4 <RCCEx_GetUSARTCLKFreq+0x304>)
70109c3c:	4293      	cmp	r3, r2
70109c3e:	d053      	beq.n	70109ce8 <RCCEx_GetUSARTCLKFreq+0x248>
70109c40:	4a58      	ldr	r2, [pc, #352]	@ (70109da4 <RCCEx_GetUSARTCLKFreq+0x304>)
70109c42:	4293      	cmp	r3, r2
70109c44:	f200 8141 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109c48:	4a57      	ldr	r2, [pc, #348]	@ (70109da8 <RCCEx_GetUSARTCLKFreq+0x308>)
70109c4a:	4293      	cmp	r3, r2
70109c4c:	d04c      	beq.n	70109ce8 <RCCEx_GetUSARTCLKFreq+0x248>
70109c4e:	4a56      	ldr	r2, [pc, #344]	@ (70109da8 <RCCEx_GetUSARTCLKFreq+0x308>)
70109c50:	4293      	cmp	r3, r2
70109c52:	f200 813a 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109c56:	4a55      	ldr	r2, [pc, #340]	@ (70109dac <RCCEx_GetUSARTCLKFreq+0x30c>)
70109c58:	4293      	cmp	r3, r2
70109c5a:	d045      	beq.n	70109ce8 <RCCEx_GetUSARTCLKFreq+0x248>
70109c5c:	4a53      	ldr	r2, [pc, #332]	@ (70109dac <RCCEx_GetUSARTCLKFreq+0x30c>)
70109c5e:	4293      	cmp	r3, r2
70109c60:	f200 8133 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109c64:	4a52      	ldr	r2, [pc, #328]	@ (70109db0 <RCCEx_GetUSARTCLKFreq+0x310>)
70109c66:	4293      	cmp	r3, r2
70109c68:	d03e      	beq.n	70109ce8 <RCCEx_GetUSARTCLKFreq+0x248>
70109c6a:	4a51      	ldr	r2, [pc, #324]	@ (70109db0 <RCCEx_GetUSARTCLKFreq+0x310>)
70109c6c:	4293      	cmp	r3, r2
70109c6e:	f200 812c 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109c72:	4a50      	ldr	r2, [pc, #320]	@ (70109db4 <RCCEx_GetUSARTCLKFreq+0x314>)
70109c74:	4293      	cmp	r3, r2
70109c76:	d037      	beq.n	70109ce8 <RCCEx_GetUSARTCLKFreq+0x248>
70109c78:	4a4e      	ldr	r2, [pc, #312]	@ (70109db4 <RCCEx_GetUSARTCLKFreq+0x314>)
70109c7a:	4293      	cmp	r3, r2
70109c7c:	f200 8125 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109c80:	4a4d      	ldr	r2, [pc, #308]	@ (70109db8 <RCCEx_GetUSARTCLKFreq+0x318>)
70109c82:	4293      	cmp	r3, r2
70109c84:	d018      	beq.n	70109cb8 <RCCEx_GetUSARTCLKFreq+0x218>
70109c86:	4a4c      	ldr	r2, [pc, #304]	@ (70109db8 <RCCEx_GetUSARTCLKFreq+0x318>)
70109c88:	4293      	cmp	r3, r2
70109c8a:	f200 811e 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109c8e:	4a4b      	ldr	r2, [pc, #300]	@ (70109dbc <RCCEx_GetUSARTCLKFreq+0x31c>)
70109c90:	4293      	cmp	r3, r2
70109c92:	d01d      	beq.n	70109cd0 <RCCEx_GetUSARTCLKFreq+0x230>
70109c94:	4a49      	ldr	r2, [pc, #292]	@ (70109dbc <RCCEx_GetUSARTCLKFreq+0x31c>)
70109c96:	4293      	cmp	r3, r2
70109c98:	f200 8117 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109c9c:	4a48      	ldr	r2, [pc, #288]	@ (70109dc0 <RCCEx_GetUSARTCLKFreq+0x320>)
70109c9e:	4293      	cmp	r3, r2
70109ca0:	d00a      	beq.n	70109cb8 <RCCEx_GetUSARTCLKFreq+0x218>
70109ca2:	4a47      	ldr	r2, [pc, #284]	@ (70109dc0 <RCCEx_GetUSARTCLKFreq+0x320>)
70109ca4:	4293      	cmp	r3, r2
70109ca6:	f200 8110 	bhi.w	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
70109caa:	4a46      	ldr	r2, [pc, #280]	@ (70109dc4 <RCCEx_GetUSARTCLKFreq+0x324>)
70109cac:	4293      	cmp	r3, r2
70109cae:	d003      	beq.n	70109cb8 <RCCEx_GetUSARTCLKFreq+0x218>
70109cb0:	4a45      	ldr	r2, [pc, #276]	@ (70109dc8 <RCCEx_GetUSARTCLKFreq+0x328>)
70109cb2:	4293      	cmp	r3, r2
70109cb4:	d00c      	beq.n	70109cd0 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
70109cb6:	e108      	b.n	70109eca <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
70109cb8:	f7f8 fab8 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70109cbc:	4603      	mov	r3, r0
70109cbe:	4618      	mov	r0, r3
70109cc0:	f7fc ff1a 	bl	70106af8 <RCCEx_GetHCLKFreq>
70109cc4:	4603      	mov	r3, r0
70109cc6:	4618      	mov	r0, r3
70109cc8:	f7fc ff37 	bl	70106b3a <RCCEx_GetPCLK2Freq>
70109ccc:	60f8      	str	r0, [r7, #12]
      break;
70109cce:	e107      	b.n	70109ee0 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
70109cd0:	f7f8 faac 	bl	7010222c <HAL_RCC_GetSysClockFreq>
70109cd4:	4603      	mov	r3, r0
70109cd6:	4618      	mov	r0, r3
70109cd8:	f7fc ff0e 	bl	70106af8 <RCCEx_GetHCLKFreq>
70109cdc:	4603      	mov	r3, r0
70109cde:	4618      	mov	r0, r3
70109ce0:	f7fc ff1b 	bl	70106b1a <RCCEx_GetPCLK1Freq>
70109ce4:	60f8      	str	r0, [r7, #12]
      break;
70109ce6:	e0fb      	b.n	70109ee0 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70109ce8:	2007      	movs	r0, #7
70109cea:	f7fd f9f1 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70109cee:	60f8      	str	r0, [r7, #12]
      break;
70109cf0:	e0f6      	b.n	70109ee0 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
70109cf2:	f7f9 fb95 	bl	70103420 <LL_RCC_IC9_IsEnabled>
70109cf6:	4603      	mov	r3, r0
70109cf8:	2b00      	cmp	r3, #0
70109cfa:	f000 80e8 	beq.w	70109ece <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
70109cfe:	f7f9 fbb1 	bl	70103464 <LL_RCC_IC9_GetDivider>
70109d02:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
70109d04:	f7f9 fba0 	bl	70103448 <LL_RCC_IC9_GetSource>
70109d08:	4603      	mov	r3, r0
70109d0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70109d0e:	d06f      	beq.n	70109df0 <RCCEx_GetUSARTCLKFreq+0x350>
70109d10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70109d14:	d875      	bhi.n	70109e02 <RCCEx_GetUSARTCLKFreq+0x362>
70109d16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70109d1a:	d060      	beq.n	70109dde <RCCEx_GetUSARTCLKFreq+0x33e>
70109d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70109d20:	d86f      	bhi.n	70109e02 <RCCEx_GetUSARTCLKFreq+0x362>
70109d22:	2b00      	cmp	r3, #0
70109d24:	d003      	beq.n	70109d2e <RCCEx_GetUSARTCLKFreq+0x28e>
70109d26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70109d2a:	d04f      	beq.n	70109dcc <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
70109d2c:	e069      	b.n	70109e02 <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70109d2e:	f7fc fdcb 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70109d32:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
70109d34:	68fa      	ldr	r2, [r7, #12]
70109d36:	68bb      	ldr	r3, [r7, #8]
70109d38:	fbb2 f3f3 	udiv	r3, r2, r3
70109d3c:	60fb      	str	r3, [r7, #12]
            break;
70109d3e:	e061      	b.n	70109e04 <RCCEx_GetUSARTCLKFreq+0x364>
70109d40:	07061430 	.word	0x07061430
70109d44:	07060830 	.word	0x07060830
70109d48:	07060434 	.word	0x07060434
70109d4c:	07060430 	.word	0x07060430
70109d50:	07060030 	.word	0x07060030
70109d54:	07051430 	.word	0x07051430
70109d58:	07050830 	.word	0x07050830
70109d5c:	07050434 	.word	0x07050434
70109d60:	07050430 	.word	0x07050430
70109d64:	07050030 	.word	0x07050030
70109d68:	07041430 	.word	0x07041430
70109d6c:	07040830 	.word	0x07040830
70109d70:	07040434 	.word	0x07040434
70109d74:	07040430 	.word	0x07040430
70109d78:	07040030 	.word	0x07040030
70109d7c:	07031430 	.word	0x07031430
70109d80:	07030830 	.word	0x07030830
70109d84:	07030434 	.word	0x07030434
70109d88:	07030430 	.word	0x07030430
70109d8c:	07030030 	.word	0x07030030
70109d90:	07021430 	.word	0x07021430
70109d94:	07020830 	.word	0x07020830
70109d98:	07020434 	.word	0x07020434
70109d9c:	07020430 	.word	0x07020430
70109da0:	07020030 	.word	0x07020030
70109da4:	07011430 	.word	0x07011430
70109da8:	07010830 	.word	0x07010830
70109dac:	07010434 	.word	0x07010434
70109db0:	07010430 	.word	0x07010430
70109db4:	07010030 	.word	0x07010030
70109db8:	07001430 	.word	0x07001430
70109dbc:	07000830 	.word	0x07000830
70109dc0:	07000434 	.word	0x07000434
70109dc4:	07000030 	.word	0x07000030
70109dc8:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70109dcc:	f7fc fdc2 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70109dd0:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
70109dd2:	68fa      	ldr	r2, [r7, #12]
70109dd4:	68bb      	ldr	r3, [r7, #8]
70109dd6:	fbb2 f3f3 	udiv	r3, r2, r3
70109dda:	60fb      	str	r3, [r7, #12]
            break;
70109ddc:	e012      	b.n	70109e04 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70109dde:	f7fc fdff 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70109de2:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
70109de4:	68fa      	ldr	r2, [r7, #12]
70109de6:	68bb      	ldr	r3, [r7, #8]
70109de8:	fbb2 f3f3 	udiv	r3, r2, r3
70109dec:	60fb      	str	r3, [r7, #12]
            break;
70109dee:	e009      	b.n	70109e04 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70109df0:	f7fc fe3c 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70109df4:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
70109df6:	68fa      	ldr	r2, [r7, #12]
70109df8:	68bb      	ldr	r3, [r7, #8]
70109dfa:	fbb2 f3f3 	udiv	r3, r2, r3
70109dfe:	60fb      	str	r3, [r7, #12]
            break;
70109e00:	e000      	b.n	70109e04 <RCCEx_GetUSARTCLKFreq+0x364>
            break;
70109e02:	bf00      	nop
      break;
70109e04:	e063      	b.n	70109ece <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
70109e06:	f7f9 fc0b 	bl	70103620 <LL_RCC_IC14_IsEnabled>
70109e0a:	4603      	mov	r3, r0
70109e0c:	2b00      	cmp	r3, #0
70109e0e:	d060      	beq.n	70109ed2 <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
70109e10:	f7f9 fc28 	bl	70103664 <LL_RCC_IC14_GetDivider>
70109e14:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
70109e16:	f7f9 fc17 	bl	70103648 <LL_RCC_IC14_GetSource>
70109e1a:	4603      	mov	r3, r0
70109e1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70109e20:	d029      	beq.n	70109e76 <RCCEx_GetUSARTCLKFreq+0x3d6>
70109e22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70109e26:	d82f      	bhi.n	70109e88 <RCCEx_GetUSARTCLKFreq+0x3e8>
70109e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70109e2c:	d01a      	beq.n	70109e64 <RCCEx_GetUSARTCLKFreq+0x3c4>
70109e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70109e32:	d829      	bhi.n	70109e88 <RCCEx_GetUSARTCLKFreq+0x3e8>
70109e34:	2b00      	cmp	r3, #0
70109e36:	d003      	beq.n	70109e40 <RCCEx_GetUSARTCLKFreq+0x3a0>
70109e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70109e3c:	d009      	beq.n	70109e52 <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
70109e3e:	e023      	b.n	70109e88 <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70109e40:	f7fc fd42 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70109e44:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
70109e46:	68fa      	ldr	r2, [r7, #12]
70109e48:	68bb      	ldr	r3, [r7, #8]
70109e4a:	fbb2 f3f3 	udiv	r3, r2, r3
70109e4e:	60fb      	str	r3, [r7, #12]
            break;
70109e50:	e01b      	b.n	70109e8a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70109e52:	f7fc fd7f 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70109e56:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
70109e58:	68fa      	ldr	r2, [r7, #12]
70109e5a:	68bb      	ldr	r3, [r7, #8]
70109e5c:	fbb2 f3f3 	udiv	r3, r2, r3
70109e60:	60fb      	str	r3, [r7, #12]
            break;
70109e62:	e012      	b.n	70109e8a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70109e64:	f7fc fdbc 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70109e68:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
70109e6a:	68fa      	ldr	r2, [r7, #12]
70109e6c:	68bb      	ldr	r3, [r7, #8]
70109e6e:	fbb2 f3f3 	udiv	r3, r2, r3
70109e72:	60fb      	str	r3, [r7, #12]
            break;
70109e74:	e009      	b.n	70109e8a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
70109e76:	f7fc fdf9 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
70109e7a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
70109e7c:	68fa      	ldr	r2, [r7, #12]
70109e7e:	68bb      	ldr	r3, [r7, #8]
70109e80:	fbb2 f3f3 	udiv	r3, r2, r3
70109e84:	60fb      	str	r3, [r7, #12]
            break;
70109e86:	e000      	b.n	70109e8a <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
70109e88:	bf00      	nop
      break;
70109e8a:	e022      	b.n	70109ed2 <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
70109e8c:	f7f8 faa4 	bl	701023d8 <LL_RCC_HSI_IsReady>
70109e90:	4603      	mov	r3, r0
70109e92:	2b00      	cmp	r3, #0
70109e94:	d01f      	beq.n	70109ed6 <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
70109e96:	f7f8 fab1 	bl	701023fc <LL_RCC_HSI_GetDivider>
70109e9a:	4603      	mov	r3, r0
70109e9c:	09db      	lsrs	r3, r3, #7
70109e9e:	4a13      	ldr	r2, [pc, #76]	@ (70109eec <RCCEx_GetUSARTCLKFreq+0x44c>)
70109ea0:	fa22 f303 	lsr.w	r3, r2, r3
70109ea4:	60fb      	str	r3, [r7, #12]
      break;
70109ea6:	e016      	b.n	70109ed6 <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
70109ea8:	f7f8 fab6 	bl	70102418 <LL_RCC_MSI_IsReady>
70109eac:	4603      	mov	r3, r0
70109eae:	2b00      	cmp	r3, #0
70109eb0:	d013      	beq.n	70109eda <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
70109eb2:	4b0f      	ldr	r3, [pc, #60]	@ (70109ef0 <RCCEx_GetUSARTCLKFreq+0x450>)
70109eb4:	60fb      	str	r3, [r7, #12]
      break;
70109eb6:	e010      	b.n	70109eda <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
70109eb8:	f7f8 face 	bl	70102458 <LL_RCC_LSE_IsReady>
70109ebc:	4603      	mov	r3, r0
70109ebe:	2b00      	cmp	r3, #0
70109ec0:	d00d      	beq.n	70109ede <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
70109ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
70109ec6:	60fb      	str	r3, [r7, #12]
      break;
70109ec8:	e009      	b.n	70109ede <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
70109eca:	bf00      	nop
70109ecc:	e008      	b.n	70109ee0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
70109ece:	bf00      	nop
70109ed0:	e006      	b.n	70109ee0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
70109ed2:	bf00      	nop
70109ed4:	e004      	b.n	70109ee0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
70109ed6:	bf00      	nop
70109ed8:	e002      	b.n	70109ee0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
70109eda:	bf00      	nop
70109edc:	e000      	b.n	70109ee0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
70109ede:	bf00      	nop
  }

  return usart_frequency;
70109ee0:	68fb      	ldr	r3, [r7, #12]
}
70109ee2:	4618      	mov	r0, r3
70109ee4:	3710      	adds	r7, #16
70109ee6:	46bd      	mov	sp, r7
70109ee8:	bd80      	pop	{r7, pc}
70109eea:	bf00      	nop
70109eec:	03d09000 	.word	0x03d09000
70109ef0:	003d0900 	.word	0x003d0900

70109ef4 <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
70109ef4:	b580      	push	{r7, lr}
70109ef6:	b084      	sub	sp, #16
70109ef8:	af00      	add	r7, sp, #0
70109efa:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
70109efc:	2300      	movs	r3, #0
70109efe:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
70109f00:	6878      	ldr	r0, [r7, #4]
70109f02:	f7f8 fe69 	bl	70102bd8 <LL_RCC_GetUSBClockSource>
70109f06:	4603      	mov	r3, r0
70109f08:	4a4b      	ldr	r2, [pc, #300]	@ (7010a038 <RCCEx_GetOTGPHYCLKFreq+0x144>)
70109f0a:	4293      	cmp	r3, r2
70109f0c:	d035      	beq.n	70109f7a <RCCEx_GetOTGPHYCLKFreq+0x86>
70109f0e:	4a4a      	ldr	r2, [pc, #296]	@ (7010a038 <RCCEx_GetOTGPHYCLKFreq+0x144>)
70109f10:	4293      	cmp	r3, r2
70109f12:	f200 8085 	bhi.w	7010a020 <RCCEx_GetOTGPHYCLKFreq+0x12c>
70109f16:	4a49      	ldr	r2, [pc, #292]	@ (7010a03c <RCCEx_GetOTGPHYCLKFreq+0x148>)
70109f18:	4293      	cmp	r3, r2
70109f1a:	d02e      	beq.n	70109f7a <RCCEx_GetOTGPHYCLKFreq+0x86>
70109f1c:	4a47      	ldr	r2, [pc, #284]	@ (7010a03c <RCCEx_GetOTGPHYCLKFreq+0x148>)
70109f1e:	4293      	cmp	r3, r2
70109f20:	d87e      	bhi.n	7010a020 <RCCEx_GetOTGPHYCLKFreq+0x12c>
70109f22:	4a47      	ldr	r2, [pc, #284]	@ (7010a040 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
70109f24:	4293      	cmp	r3, r2
70109f26:	d038      	beq.n	70109f9a <RCCEx_GetOTGPHYCLKFreq+0xa6>
70109f28:	4a45      	ldr	r2, [pc, #276]	@ (7010a040 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
70109f2a:	4293      	cmp	r3, r2
70109f2c:	d878      	bhi.n	7010a020 <RCCEx_GetOTGPHYCLKFreq+0x12c>
70109f2e:	4a45      	ldr	r2, [pc, #276]	@ (7010a044 <RCCEx_GetOTGPHYCLKFreq+0x150>)
70109f30:	4293      	cmp	r3, r2
70109f32:	d032      	beq.n	70109f9a <RCCEx_GetOTGPHYCLKFreq+0xa6>
70109f34:	4a43      	ldr	r2, [pc, #268]	@ (7010a044 <RCCEx_GetOTGPHYCLKFreq+0x150>)
70109f36:	4293      	cmp	r3, r2
70109f38:	d872      	bhi.n	7010a020 <RCCEx_GetOTGPHYCLKFreq+0x12c>
70109f3a:	4a43      	ldr	r2, [pc, #268]	@ (7010a048 <RCCEx_GetOTGPHYCLKFreq+0x154>)
70109f3c:	4293      	cmp	r3, r2
70109f3e:	d00f      	beq.n	70109f60 <RCCEx_GetOTGPHYCLKFreq+0x6c>
70109f40:	4a41      	ldr	r2, [pc, #260]	@ (7010a048 <RCCEx_GetOTGPHYCLKFreq+0x154>)
70109f42:	4293      	cmp	r3, r2
70109f44:	d86c      	bhi.n	7010a020 <RCCEx_GetOTGPHYCLKFreq+0x12c>
70109f46:	4a41      	ldr	r2, [pc, #260]	@ (7010a04c <RCCEx_GetOTGPHYCLKFreq+0x158>)
70109f48:	4293      	cmp	r3, r2
70109f4a:	d009      	beq.n	70109f60 <RCCEx_GetOTGPHYCLKFreq+0x6c>
70109f4c:	4a3f      	ldr	r2, [pc, #252]	@ (7010a04c <RCCEx_GetOTGPHYCLKFreq+0x158>)
70109f4e:	4293      	cmp	r3, r2
70109f50:	d866      	bhi.n	7010a020 <RCCEx_GetOTGPHYCLKFreq+0x12c>
70109f52:	4a3f      	ldr	r2, [pc, #252]	@ (7010a050 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
70109f54:	4293      	cmp	r3, r2
70109f56:	d008      	beq.n	70109f6a <RCCEx_GetOTGPHYCLKFreq+0x76>
70109f58:	4a3e      	ldr	r2, [pc, #248]	@ (7010a054 <RCCEx_GetOTGPHYCLKFreq+0x160>)
70109f5a:	4293      	cmp	r3, r2
70109f5c:	d005      	beq.n	70109f6a <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
70109f5e:	e05f      	b.n	7010a020 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
70109f60:	2007      	movs	r0, #7
70109f62:	f7fd f8b5 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
70109f66:	60f8      	str	r0, [r7, #12]
      break;
70109f68:	e061      	b.n	7010a02e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
70109f6a:	f7f8 fa23 	bl	701023b4 <LL_RCC_HSE_IsReady>
70109f6e:	4603      	mov	r3, r0
70109f70:	2b00      	cmp	r3, #0
70109f72:	d057      	beq.n	7010a024 <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
70109f74:	4b38      	ldr	r3, [pc, #224]	@ (7010a058 <RCCEx_GetOTGPHYCLKFreq+0x164>)
70109f76:	60fb      	str	r3, [r7, #12]
      break;
70109f78:	e054      	b.n	7010a024 <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
70109f7a:	f7f8 fa1b 	bl	701023b4 <LL_RCC_HSE_IsReady>
70109f7e:	4603      	mov	r3, r0
70109f80:	2b00      	cmp	r3, #0
70109f82:	d051      	beq.n	7010a028 <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
70109f84:	f7f8 fa04 	bl	70102390 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
70109f88:	4603      	mov	r3, r0
70109f8a:	2b00      	cmp	r3, #0
70109f8c:	d102      	bne.n	70109f94 <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
70109f8e:	4b33      	ldr	r3, [pc, #204]	@ (7010a05c <RCCEx_GetOTGPHYCLKFreq+0x168>)
70109f90:	60fb      	str	r3, [r7, #12]
      break;
70109f92:	e049      	b.n	7010a028 <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
70109f94:	4b30      	ldr	r3, [pc, #192]	@ (7010a058 <RCCEx_GetOTGPHYCLKFreq+0x164>)
70109f96:	60fb      	str	r3, [r7, #12]
      break;
70109f98:	e046      	b.n	7010a028 <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
70109f9a:	f7f9 fb81 	bl	701036a0 <LL_RCC_IC15_IsEnabled>
70109f9e:	4603      	mov	r3, r0
70109fa0:	2b00      	cmp	r3, #0
70109fa2:	d043      	beq.n	7010a02c <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
70109fa4:	f7f9 fb9e 	bl	701036e4 <LL_RCC_IC15_GetDivider>
70109fa8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
70109faa:	f7f9 fb8d 	bl	701036c8 <LL_RCC_IC15_GetSource>
70109fae:	4603      	mov	r3, r0
70109fb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70109fb4:	d029      	beq.n	7010a00a <RCCEx_GetOTGPHYCLKFreq+0x116>
70109fb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
70109fba:	d82f      	bhi.n	7010a01c <RCCEx_GetOTGPHYCLKFreq+0x128>
70109fbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70109fc0:	d01a      	beq.n	70109ff8 <RCCEx_GetOTGPHYCLKFreq+0x104>
70109fc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
70109fc6:	d829      	bhi.n	7010a01c <RCCEx_GetOTGPHYCLKFreq+0x128>
70109fc8:	2b00      	cmp	r3, #0
70109fca:	d003      	beq.n	70109fd4 <RCCEx_GetOTGPHYCLKFreq+0xe0>
70109fcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
70109fd0:	d009      	beq.n	70109fe6 <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
70109fd2:	e023      	b.n	7010a01c <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
70109fd4:	f7fc fc78 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
70109fd8:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
70109fda:	68fa      	ldr	r2, [r7, #12]
70109fdc:	68bb      	ldr	r3, [r7, #8]
70109fde:	fbb2 f3f3 	udiv	r3, r2, r3
70109fe2:	60fb      	str	r3, [r7, #12]
            break;
70109fe4:	e01b      	b.n	7010a01e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
70109fe6:	f7fc fcb5 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
70109fea:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
70109fec:	68fa      	ldr	r2, [r7, #12]
70109fee:	68bb      	ldr	r3, [r7, #8]
70109ff0:	fbb2 f3f3 	udiv	r3, r2, r3
70109ff4:	60fb      	str	r3, [r7, #12]
            break;
70109ff6:	e012      	b.n	7010a01e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
70109ff8:	f7fc fcf2 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
70109ffc:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
70109ffe:	68fa      	ldr	r2, [r7, #12]
7010a000:	68bb      	ldr	r3, [r7, #8]
7010a002:	fbb2 f3f3 	udiv	r3, r2, r3
7010a006:	60fb      	str	r3, [r7, #12]
            break;
7010a008:	e009      	b.n	7010a01e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
7010a00a:	f7fc fd2f 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
7010a00e:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
7010a010:	68fa      	ldr	r2, [r7, #12]
7010a012:	68bb      	ldr	r3, [r7, #8]
7010a014:	fbb2 f3f3 	udiv	r3, r2, r3
7010a018:	60fb      	str	r3, [r7, #12]
            break;
7010a01a:	e000      	b.n	7010a01e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
7010a01c:	bf00      	nop
      break;
7010a01e:	e005      	b.n	7010a02c <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
7010a020:	bf00      	nop
7010a022:	e004      	b.n	7010a02e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
7010a024:	bf00      	nop
7010a026:	e002      	b.n	7010a02e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
7010a028:	bf00      	nop
7010a02a:	e000      	b.n	7010a02e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
7010a02c:	bf00      	nop
  }

  return usb_frequency;
7010a02e:	68fb      	ldr	r3, [r7, #12]
}
7010a030:	4618      	mov	r0, r3
7010a032:	3710      	adds	r7, #16
7010a034:	46bd      	mov	sp, r7
7010a036:	bd80      	pop	{r7, pc}
7010a038:	03031414 	.word	0x03031414
7010a03c:	03030c14 	.word	0x03030c14
7010a040:	03021414 	.word	0x03021414
7010a044:	03020c14 	.word	0x03020c14
7010a048:	03011414 	.word	0x03011414
7010a04c:	03010c14 	.word	0x03010c14
7010a050:	03000c14 	.word	0x03000c14
7010a054:	03001414 	.word	0x03001414
7010a058:	00b71b00 	.word	0x00b71b00
7010a05c:	016e3600 	.word	0x016e3600

7010a060 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
7010a060:	b580      	push	{r7, lr}
7010a062:	b084      	sub	sp, #16
7010a064:	af00      	add	r7, sp, #0
7010a066:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
7010a068:	2300      	movs	r3, #0
7010a06a:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
7010a06c:	6878      	ldr	r0, [r7, #4]
7010a06e:	f7f8 fdb3 	bl	70102bd8 <LL_RCC_GetUSBClockSource>
7010a072:	4603      	mov	r3, r0
7010a074:	4a1a      	ldr	r2, [pc, #104]	@ (7010a0e0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
7010a076:	4293      	cmp	r3, r2
7010a078:	d00f      	beq.n	7010a09a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
7010a07a:	4a19      	ldr	r2, [pc, #100]	@ (7010a0e0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
7010a07c:	4293      	cmp	r3, r2
7010a07e:	d826      	bhi.n	7010a0ce <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
7010a080:	4a18      	ldr	r2, [pc, #96]	@ (7010a0e4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
7010a082:	4293      	cmp	r3, r2
7010a084:	d009      	beq.n	7010a09a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
7010a086:	4a17      	ldr	r2, [pc, #92]	@ (7010a0e4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
7010a088:	4293      	cmp	r3, r2
7010a08a:	d820      	bhi.n	7010a0ce <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
7010a08c:	4a16      	ldr	r2, [pc, #88]	@ (7010a0e8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
7010a08e:	4293      	cmp	r3, r2
7010a090:	d013      	beq.n	7010a0ba <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
7010a092:	4a16      	ldr	r2, [pc, #88]	@ (7010a0ec <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
7010a094:	4293      	cmp	r3, r2
7010a096:	d015      	beq.n	7010a0c4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
7010a098:	e019      	b.n	7010a0ce <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
7010a09a:	f7f8 f98b 	bl	701023b4 <LL_RCC_HSE_IsReady>
7010a09e:	4603      	mov	r3, r0
7010a0a0:	2b00      	cmp	r3, #0
7010a0a2:	d016      	beq.n	7010a0d2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
7010a0a4:	f7f8 f974 	bl	70102390 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
7010a0a8:	4603      	mov	r3, r0
7010a0aa:	2b00      	cmp	r3, #0
7010a0ac:	d102      	bne.n	7010a0b4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
7010a0ae:	4b10      	ldr	r3, [pc, #64]	@ (7010a0f0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
7010a0b0:	60fb      	str	r3, [r7, #12]
      break;
7010a0b2:	e00e      	b.n	7010a0d2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
7010a0b4:	4b0f      	ldr	r3, [pc, #60]	@ (7010a0f4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
7010a0b6:	60fb      	str	r3, [r7, #12]
      break;
7010a0b8:	e00b      	b.n	7010a0d2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
7010a0ba:	480f      	ldr	r0, [pc, #60]	@ (7010a0f8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
7010a0bc:	f7ff ff1a 	bl	70109ef4 <RCCEx_GetOTGPHYCLKFreq>
7010a0c0:	60f8      	str	r0, [r7, #12]
      break;
7010a0c2:	e007      	b.n	7010a0d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
7010a0c4:	480d      	ldr	r0, [pc, #52]	@ (7010a0fc <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
7010a0c6:	f7ff ff15 	bl	70109ef4 <RCCEx_GetOTGPHYCLKFreq>
7010a0ca:	60f8      	str	r0, [r7, #12]
      break;
7010a0cc:	e002      	b.n	7010a0d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
7010a0ce:	bf00      	nop
7010a0d0:	e000      	b.n	7010a0d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
7010a0d2:	bf00      	nop
  }

  return usb_frequency;
7010a0d4:	68fb      	ldr	r3, [r7, #12]
}
7010a0d6:	4618      	mov	r0, r3
7010a0d8:	3710      	adds	r7, #16
7010a0da:	46bd      	mov	sp, r7
7010a0dc:	bd80      	pop	{r7, pc}
7010a0de:	bf00      	nop
7010a0e0:	01011814 	.word	0x01011814
7010a0e4:	01011014 	.word	0x01011014
7010a0e8:	01001014 	.word	0x01001014
7010a0ec:	01001814 	.word	0x01001814
7010a0f0:	016e3600 	.word	0x016e3600
7010a0f4:	00b71b00 	.word	0x00b71b00
7010a0f8:	03000c14 	.word	0x03000c14
7010a0fc:	03001414 	.word	0x03001414

7010a100 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
7010a100:	b580      	push	{r7, lr}
7010a102:	b084      	sub	sp, #16
7010a104:	af00      	add	r7, sp, #0
7010a106:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
7010a108:	2300      	movs	r3, #0
7010a10a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
7010a10c:	6878      	ldr	r0, [r7, #4]
7010a10e:	f7f8 fd6f 	bl	70102bf0 <LL_RCC_GetXSPIClockSource>
7010a112:	4603      	mov	r3, r0
7010a114:	4a76      	ldr	r2, [pc, #472]	@ (7010a2f0 <RCCEx_GetXSPICLKFreq+0x1f0>)
7010a116:	4293      	cmp	r3, r2
7010a118:	f000 809d 	beq.w	7010a256 <RCCEx_GetXSPICLKFreq+0x156>
7010a11c:	4a74      	ldr	r2, [pc, #464]	@ (7010a2f0 <RCCEx_GetXSPICLKFreq+0x1f0>)
7010a11e:	4293      	cmp	r3, r2
7010a120:	f200 80dc 	bhi.w	7010a2dc <RCCEx_GetXSPICLKFreq+0x1dc>
7010a124:	4a73      	ldr	r2, [pc, #460]	@ (7010a2f4 <RCCEx_GetXSPICLKFreq+0x1f4>)
7010a126:	4293      	cmp	r3, r2
7010a128:	f000 8095 	beq.w	7010a256 <RCCEx_GetXSPICLKFreq+0x156>
7010a12c:	4a71      	ldr	r2, [pc, #452]	@ (7010a2f4 <RCCEx_GetXSPICLKFreq+0x1f4>)
7010a12e:	4293      	cmp	r3, r2
7010a130:	f200 80d4 	bhi.w	7010a2dc <RCCEx_GetXSPICLKFreq+0x1dc>
7010a134:	4a70      	ldr	r2, [pc, #448]	@ (7010a2f8 <RCCEx_GetXSPICLKFreq+0x1f8>)
7010a136:	4293      	cmp	r3, r2
7010a138:	f000 808d 	beq.w	7010a256 <RCCEx_GetXSPICLKFreq+0x156>
7010a13c:	4a6e      	ldr	r2, [pc, #440]	@ (7010a2f8 <RCCEx_GetXSPICLKFreq+0x1f8>)
7010a13e:	4293      	cmp	r3, r2
7010a140:	f200 80cc 	bhi.w	7010a2dc <RCCEx_GetXSPICLKFreq+0x1dc>
7010a144:	4a6d      	ldr	r2, [pc, #436]	@ (7010a2fc <RCCEx_GetXSPICLKFreq+0x1fc>)
7010a146:	4293      	cmp	r3, r2
7010a148:	d041      	beq.n	7010a1ce <RCCEx_GetXSPICLKFreq+0xce>
7010a14a:	4a6c      	ldr	r2, [pc, #432]	@ (7010a2fc <RCCEx_GetXSPICLKFreq+0x1fc>)
7010a14c:	4293      	cmp	r3, r2
7010a14e:	f200 80c5 	bhi.w	7010a2dc <RCCEx_GetXSPICLKFreq+0x1dc>
7010a152:	4a6b      	ldr	r2, [pc, #428]	@ (7010a300 <RCCEx_GetXSPICLKFreq+0x200>)
7010a154:	4293      	cmp	r3, r2
7010a156:	d03a      	beq.n	7010a1ce <RCCEx_GetXSPICLKFreq+0xce>
7010a158:	4a69      	ldr	r2, [pc, #420]	@ (7010a300 <RCCEx_GetXSPICLKFreq+0x200>)
7010a15a:	4293      	cmp	r3, r2
7010a15c:	f200 80be 	bhi.w	7010a2dc <RCCEx_GetXSPICLKFreq+0x1dc>
7010a160:	4a68      	ldr	r2, [pc, #416]	@ (7010a304 <RCCEx_GetXSPICLKFreq+0x204>)
7010a162:	4293      	cmp	r3, r2
7010a164:	d033      	beq.n	7010a1ce <RCCEx_GetXSPICLKFreq+0xce>
7010a166:	4a67      	ldr	r2, [pc, #412]	@ (7010a304 <RCCEx_GetXSPICLKFreq+0x204>)
7010a168:	4293      	cmp	r3, r2
7010a16a:	f200 80b7 	bhi.w	7010a2dc <RCCEx_GetXSPICLKFreq+0x1dc>
7010a16e:	4a66      	ldr	r2, [pc, #408]	@ (7010a308 <RCCEx_GetXSPICLKFreq+0x208>)
7010a170:	4293      	cmp	r3, r2
7010a172:	d027      	beq.n	7010a1c4 <RCCEx_GetXSPICLKFreq+0xc4>
7010a174:	4a64      	ldr	r2, [pc, #400]	@ (7010a308 <RCCEx_GetXSPICLKFreq+0x208>)
7010a176:	4293      	cmp	r3, r2
7010a178:	f200 80b0 	bhi.w	7010a2dc <RCCEx_GetXSPICLKFreq+0x1dc>
7010a17c:	4a63      	ldr	r2, [pc, #396]	@ (7010a30c <RCCEx_GetXSPICLKFreq+0x20c>)
7010a17e:	4293      	cmp	r3, r2
7010a180:	d020      	beq.n	7010a1c4 <RCCEx_GetXSPICLKFreq+0xc4>
7010a182:	4a62      	ldr	r2, [pc, #392]	@ (7010a30c <RCCEx_GetXSPICLKFreq+0x20c>)
7010a184:	4293      	cmp	r3, r2
7010a186:	f200 80a9 	bhi.w	7010a2dc <RCCEx_GetXSPICLKFreq+0x1dc>
7010a18a:	4a61      	ldr	r2, [pc, #388]	@ (7010a310 <RCCEx_GetXSPICLKFreq+0x210>)
7010a18c:	4293      	cmp	r3, r2
7010a18e:	d019      	beq.n	7010a1c4 <RCCEx_GetXSPICLKFreq+0xc4>
7010a190:	4a5f      	ldr	r2, [pc, #380]	@ (7010a310 <RCCEx_GetXSPICLKFreq+0x210>)
7010a192:	4293      	cmp	r3, r2
7010a194:	f200 80a2 	bhi.w	7010a2dc <RCCEx_GetXSPICLKFreq+0x1dc>
7010a198:	4a5e      	ldr	r2, [pc, #376]	@ (7010a314 <RCCEx_GetXSPICLKFreq+0x214>)
7010a19a:	4293      	cmp	r3, r2
7010a19c:	d00a      	beq.n	7010a1b4 <RCCEx_GetXSPICLKFreq+0xb4>
7010a19e:	4a5d      	ldr	r2, [pc, #372]	@ (7010a314 <RCCEx_GetXSPICLKFreq+0x214>)
7010a1a0:	4293      	cmp	r3, r2
7010a1a2:	f200 809b 	bhi.w	7010a2dc <RCCEx_GetXSPICLKFreq+0x1dc>
7010a1a6:	4a5c      	ldr	r2, [pc, #368]	@ (7010a318 <RCCEx_GetXSPICLKFreq+0x218>)
7010a1a8:	4293      	cmp	r3, r2
7010a1aa:	d003      	beq.n	7010a1b4 <RCCEx_GetXSPICLKFreq+0xb4>
7010a1ac:	4a5b      	ldr	r2, [pc, #364]	@ (7010a31c <RCCEx_GetXSPICLKFreq+0x21c>)
7010a1ae:	4293      	cmp	r3, r2
7010a1b0:	f040 8094 	bne.w	7010a2dc <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
7010a1b4:	f7f8 f83a 	bl	7010222c <HAL_RCC_GetSysClockFreq>
7010a1b8:	4603      	mov	r3, r0
7010a1ba:	4618      	mov	r0, r3
7010a1bc:	f7fc fc9c 	bl	70106af8 <RCCEx_GetHCLKFreq>
7010a1c0:	60f8      	str	r0, [r7, #12]
      break;
7010a1c2:	e090      	b.n	7010a2e6 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
7010a1c4:	2007      	movs	r0, #7
7010a1c6:	f7fc ff83 	bl	701070d0 <RCCEx_GetCLKPCLKFreq>
7010a1ca:	60f8      	str	r0, [r7, #12]
      break;
7010a1cc:	e08b      	b.n	7010a2e6 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
7010a1ce:	f7f8 ffe7 	bl	701031a0 <LL_RCC_IC3_IsEnabled>
7010a1d2:	4603      	mov	r3, r0
7010a1d4:	2b00      	cmp	r3, #0
7010a1d6:	f000 8083 	beq.w	7010a2e0 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
7010a1da:	f7f9 f803 	bl	701031e4 <LL_RCC_IC3_GetDivider>
7010a1de:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
7010a1e0:	f7f8 fff2 	bl	701031c8 <LL_RCC_IC3_GetSource>
7010a1e4:	4603      	mov	r3, r0
7010a1e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010a1ea:	d029      	beq.n	7010a240 <RCCEx_GetXSPICLKFreq+0x140>
7010a1ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010a1f0:	d82f      	bhi.n	7010a252 <RCCEx_GetXSPICLKFreq+0x152>
7010a1f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010a1f6:	d01a      	beq.n	7010a22e <RCCEx_GetXSPICLKFreq+0x12e>
7010a1f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010a1fc:	d829      	bhi.n	7010a252 <RCCEx_GetXSPICLKFreq+0x152>
7010a1fe:	2b00      	cmp	r3, #0
7010a200:	d003      	beq.n	7010a20a <RCCEx_GetXSPICLKFreq+0x10a>
7010a202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
7010a206:	d009      	beq.n	7010a21c <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
7010a208:	e023      	b.n	7010a252 <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
7010a20a:	f7fc fb5d 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
7010a20e:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
7010a210:	68fa      	ldr	r2, [r7, #12]
7010a212:	68bb      	ldr	r3, [r7, #8]
7010a214:	fbb2 f3f3 	udiv	r3, r2, r3
7010a218:	60fb      	str	r3, [r7, #12]
            break;
7010a21a:	e01b      	b.n	7010a254 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
7010a21c:	f7fc fb9a 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
7010a220:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
7010a222:	68fa      	ldr	r2, [r7, #12]
7010a224:	68bb      	ldr	r3, [r7, #8]
7010a226:	fbb2 f3f3 	udiv	r3, r2, r3
7010a22a:	60fb      	str	r3, [r7, #12]
            break;
7010a22c:	e012      	b.n	7010a254 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
7010a22e:	f7fc fbd7 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010a232:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
7010a234:	68fa      	ldr	r2, [r7, #12]
7010a236:	68bb      	ldr	r3, [r7, #8]
7010a238:	fbb2 f3f3 	udiv	r3, r2, r3
7010a23c:	60fb      	str	r3, [r7, #12]
            break;
7010a23e:	e009      	b.n	7010a254 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
7010a240:	f7fc fc14 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
7010a244:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
7010a246:	68fa      	ldr	r2, [r7, #12]
7010a248:	68bb      	ldr	r3, [r7, #8]
7010a24a:	fbb2 f3f3 	udiv	r3, r2, r3
7010a24e:	60fb      	str	r3, [r7, #12]
            break;
7010a250:	e000      	b.n	7010a254 <RCCEx_GetXSPICLKFreq+0x154>
            break;
7010a252:	bf00      	nop
        }
      }
      break;
7010a254:	e044      	b.n	7010a2e0 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
7010a256:	f7f8 ffe3 	bl	70103220 <LL_RCC_IC4_IsEnabled>
7010a25a:	4603      	mov	r3, r0
7010a25c:	2b00      	cmp	r3, #0
7010a25e:	d041      	beq.n	7010a2e4 <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
7010a260:	f7f9 f800 	bl	70103264 <LL_RCC_IC4_GetDivider>
7010a264:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
7010a266:	f7f8 ffef 	bl	70103248 <LL_RCC_IC4_GetSource>
7010a26a:	4603      	mov	r3, r0
7010a26c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010a270:	d029      	beq.n	7010a2c6 <RCCEx_GetXSPICLKFreq+0x1c6>
7010a272:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
7010a276:	d82f      	bhi.n	7010a2d8 <RCCEx_GetXSPICLKFreq+0x1d8>
7010a278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010a27c:	d01a      	beq.n	7010a2b4 <RCCEx_GetXSPICLKFreq+0x1b4>
7010a27e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
7010a282:	d829      	bhi.n	7010a2d8 <RCCEx_GetXSPICLKFreq+0x1d8>
7010a284:	2b00      	cmp	r3, #0
7010a286:	d003      	beq.n	7010a290 <RCCEx_GetXSPICLKFreq+0x190>
7010a288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
7010a28c:	d009      	beq.n	7010a2a2 <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
7010a28e:	e023      	b.n	7010a2d8 <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
7010a290:	f7fc fb1a 	bl	701068c8 <HAL_RCCEx_GetPLL1CLKFreq>
7010a294:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
7010a296:	68fa      	ldr	r2, [r7, #12]
7010a298:	68bb      	ldr	r3, [r7, #8]
7010a29a:	fbb2 f3f3 	udiv	r3, r2, r3
7010a29e:	60fb      	str	r3, [r7, #12]
            break;
7010a2a0:	e01b      	b.n	7010a2da <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
7010a2a2:	f7fc fb57 	bl	70106954 <HAL_RCCEx_GetPLL2CLKFreq>
7010a2a6:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
7010a2a8:	68fa      	ldr	r2, [r7, #12]
7010a2aa:	68bb      	ldr	r3, [r7, #8]
7010a2ac:	fbb2 f3f3 	udiv	r3, r2, r3
7010a2b0:	60fb      	str	r3, [r7, #12]
            break;
7010a2b2:	e012      	b.n	7010a2da <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
7010a2b4:	f7fc fb94 	bl	701069e0 <HAL_RCCEx_GetPLL3CLKFreq>
7010a2b8:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
7010a2ba:	68fa      	ldr	r2, [r7, #12]
7010a2bc:	68bb      	ldr	r3, [r7, #8]
7010a2be:	fbb2 f3f3 	udiv	r3, r2, r3
7010a2c2:	60fb      	str	r3, [r7, #12]
            break;
7010a2c4:	e009      	b.n	7010a2da <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
7010a2c6:	f7fc fbd1 	bl	70106a6c <HAL_RCCEx_GetPLL4CLKFreq>
7010a2ca:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
7010a2cc:	68fa      	ldr	r2, [r7, #12]
7010a2ce:	68bb      	ldr	r3, [r7, #8]
7010a2d0:	fbb2 f3f3 	udiv	r3, r2, r3
7010a2d4:	60fb      	str	r3, [r7, #12]
            break;
7010a2d6:	e000      	b.n	7010a2da <RCCEx_GetXSPICLKFreq+0x1da>
            break;
7010a2d8:	bf00      	nop
        }
      }
      break;
7010a2da:	e003      	b.n	7010a2e4 <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
7010a2dc:	bf00      	nop
7010a2de:	e002      	b.n	7010a2e6 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
7010a2e0:	bf00      	nop
7010a2e2:	e000      	b.n	7010a2e6 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
7010a2e4:	bf00      	nop
  }

  return xspi_frequency;
7010a2e6:	68fb      	ldr	r3, [r7, #12]
}
7010a2e8:	4618      	mov	r0, r3
7010a2ea:	3710      	adds	r7, #16
7010a2ec:	46bd      	mov	sp, r7
7010a2ee:	bd80      	pop	{r7, pc}
7010a2f0:	03030814 	.word	0x03030814
7010a2f4:	03030414 	.word	0x03030414
7010a2f8:	03030014 	.word	0x03030014
7010a2fc:	03020814 	.word	0x03020814
7010a300:	03020414 	.word	0x03020414
7010a304:	03020014 	.word	0x03020014
7010a308:	03010814 	.word	0x03010814
7010a30c:	03010414 	.word	0x03010414
7010a310:	03010014 	.word	0x03010014
7010a314:	03000814 	.word	0x03000814
7010a318:	03000014 	.word	0x03000014
7010a31c:	03000414 	.word	0x03000414

7010a320 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
7010a320:	b480      	push	{r7}
7010a322:	b089      	sub	sp, #36	@ 0x24
7010a324:	af00      	add	r7, sp, #0
7010a326:	6078      	str	r0, [r7, #4]
7010a328:	6039      	str	r1, [r7, #0]
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));

  master_cid = POSITION_VAL(pConfig->MasterCID);
7010a32a:	683b      	ldr	r3, [r7, #0]
7010a32c:	681b      	ldr	r3, [r3, #0]
7010a32e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
7010a330:	693b      	ldr	r3, [r7, #16]
7010a332:	fa93 f3a3 	rbit	r3, r3
7010a336:	60fb      	str	r3, [r7, #12]
  return result;
7010a338:	68fb      	ldr	r3, [r7, #12]
7010a33a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
7010a33c:	697b      	ldr	r3, [r7, #20]
7010a33e:	2b00      	cmp	r3, #0
7010a340:	d101      	bne.n	7010a346 <HAL_RIF_RIMC_ConfigMasterAttributes+0x26>
    return 32U;
7010a342:	2320      	movs	r3, #32
7010a344:	e003      	b.n	7010a34e <HAL_RIF_RIMC_ConfigMasterAttributes+0x2e>
  return __builtin_clz(value);
7010a346:	697b      	ldr	r3, [r7, #20]
7010a348:	fab3 f383 	clz	r3, r3
7010a34c:	b2db      	uxtb	r3, r3
7010a34e:	61fb      	str	r3, [r7, #28]
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
7010a350:	4a10      	ldr	r2, [pc, #64]	@ (7010a394 <HAL_RIF_RIMC_ConfigMasterAttributes+0x74>)
7010a352:	687b      	ldr	r3, [r7, #4]
7010a354:	f503 7341 	add.w	r3, r3, #772	@ 0x304
7010a358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
7010a35c:	61bb      	str	r3, [r7, #24]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
7010a35e:	69bb      	ldr	r3, [r7, #24]
7010a360:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
7010a364:	61bb      	str	r3, [r7, #24]
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
7010a366:	69fb      	ldr	r3, [r7, #28]
7010a368:	011a      	lsls	r2, r3, #4
7010a36a:	683b      	ldr	r3, [r7, #0]
7010a36c:	685b      	ldr	r3, [r3, #4]
7010a36e:	021b      	lsls	r3, r3, #8
7010a370:	4313      	orrs	r3, r2
7010a372:	69ba      	ldr	r2, [r7, #24]
7010a374:	4313      	orrs	r3, r2
7010a376:	61bb      	str	r3, [r7, #24]
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
7010a378:	4906      	ldr	r1, [pc, #24]	@ (7010a394 <HAL_RIF_RIMC_ConfigMasterAttributes+0x74>)
7010a37a:	687b      	ldr	r3, [r7, #4]
7010a37c:	f503 7341 	add.w	r3, r3, #772	@ 0x304
7010a380:	69ba      	ldr	r2, [r7, #24]
7010a382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
7010a386:	bf00      	nop
7010a388:	3724      	adds	r7, #36	@ 0x24
7010a38a:	46bd      	mov	sp, r7
7010a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a390:	4770      	bx	lr
7010a392:	bf00      	nop
7010a394:	54024000 	.word	0x54024000

7010a398 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  * @param  SecPriv specifies the security and privilege attributes of the peripheral.
  *         This parameter can be one or a combination of @ref RIF_SEC_PRIV
  * @retval None
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
7010a398:	b480      	push	{r7}
7010a39a:	b085      	sub	sp, #20
7010a39c:	af00      	add	r7, sp, #0
7010a39e:	6078      	str	r0, [r7, #4]
7010a3a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
7010a3a2:	4a25      	ldr	r2, [pc, #148]	@ (7010a438 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
7010a3a4:	687b      	ldr	r3, [r7, #4]
7010a3a6:	0f1b      	lsrs	r3, r3, #28
7010a3a8:	3304      	adds	r3, #4
7010a3aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
7010a3ae:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1UL << (PeriphId & RIF_PERIPH_BIT_POSITION)));
7010a3b0:	687b      	ldr	r3, [r7, #4]
7010a3b2:	f003 031f 	and.w	r3, r3, #31
7010a3b6:	2201      	movs	r2, #1
7010a3b8:	fa02 f303 	lsl.w	r3, r2, r3
7010a3bc:	43da      	mvns	r2, r3
7010a3be:	68fb      	ldr	r3, [r7, #12]
7010a3c0:	4013      	ands	r3, r2
7010a3c2:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
7010a3c4:	683b      	ldr	r3, [r7, #0]
7010a3c6:	f003 0201 	and.w	r2, r3, #1
7010a3ca:	687b      	ldr	r3, [r7, #4]
7010a3cc:	f003 031f 	and.w	r3, r3, #31
7010a3d0:	409a      	lsls	r2, r3
7010a3d2:	68fb      	ldr	r3, [r7, #12]
7010a3d4:	4313      	orrs	r3, r2
7010a3d6:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
7010a3d8:	4917      	ldr	r1, [pc, #92]	@ (7010a438 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
7010a3da:	687b      	ldr	r3, [r7, #4]
7010a3dc:	0f1b      	lsrs	r3, r3, #28
7010a3de:	68fa      	ldr	r2, [r7, #12]
7010a3e0:	3304      	adds	r3, #4
7010a3e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
7010a3e6:	4a14      	ldr	r2, [pc, #80]	@ (7010a438 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
7010a3e8:	687b      	ldr	r3, [r7, #4]
7010a3ea:	0f1b      	lsrs	r3, r3, #28
7010a3ec:	330c      	adds	r3, #12
7010a3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
7010a3f2:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1UL << (PeriphId & RIF_PERIPH_BIT_POSITION)));
7010a3f4:	687b      	ldr	r3, [r7, #4]
7010a3f6:	f003 031f 	and.w	r3, r3, #31
7010a3fa:	2201      	movs	r2, #1
7010a3fc:	fa02 f303 	lsl.w	r3, r2, r3
7010a400:	43da      	mvns	r2, r3
7010a402:	68fb      	ldr	r3, [r7, #12]
7010a404:	4013      	ands	r3, r2
7010a406:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
7010a408:	683b      	ldr	r3, [r7, #0]
7010a40a:	085b      	lsrs	r3, r3, #1
7010a40c:	f003 0201 	and.w	r2, r3, #1
7010a410:	687b      	ldr	r3, [r7, #4]
7010a412:	f003 031f 	and.w	r3, r3, #31
7010a416:	409a      	lsls	r2, r3
7010a418:	68fb      	ldr	r3, [r7, #12]
7010a41a:	4313      	orrs	r3, r2
7010a41c:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
7010a41e:	4906      	ldr	r1, [pc, #24]	@ (7010a438 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
7010a420:	687b      	ldr	r3, [r7, #4]
7010a422:	0f1b      	lsrs	r3, r3, #28
7010a424:	68fa      	ldr	r2, [r7, #12]
7010a426:	330c      	adds	r3, #12
7010a428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
7010a42c:	bf00      	nop
7010a42e:	3714      	adds	r7, #20
7010a430:	46bd      	mov	sp, r7
7010a432:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a436:	4770      	bx	lr
7010a438:	54024000 	.word	0x54024000

7010a43c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
7010a43c:	b580      	push	{r7, lr}
7010a43e:	b084      	sub	sp, #16
7010a440:	af00      	add	r7, sp, #0
7010a442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
7010a444:	687b      	ldr	r3, [r7, #4]
7010a446:	681b      	ldr	r3, [r3, #0]
7010a448:	68db      	ldr	r3, [r3, #12]
7010a44a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
7010a44c:	687b      	ldr	r3, [r7, #4]
7010a44e:	681b      	ldr	r3, [r3, #0]
7010a450:	691b      	ldr	r3, [r3, #16]
7010a452:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
7010a454:	68bb      	ldr	r3, [r7, #8]
7010a456:	f003 0302 	and.w	r3, r3, #2
7010a45a:	2b00      	cmp	r3, #0
7010a45c:	d020      	beq.n	7010a4a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
7010a45e:	68fb      	ldr	r3, [r7, #12]
7010a460:	f003 0302 	and.w	r3, r3, #2
7010a464:	2b00      	cmp	r3, #0
7010a466:	d01b      	beq.n	7010a4a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
7010a468:	687b      	ldr	r3, [r7, #4]
7010a46a:	681b      	ldr	r3, [r3, #0]
7010a46c:	f06f 0202 	mvn.w	r2, #2
7010a470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
7010a472:	687b      	ldr	r3, [r7, #4]
7010a474:	2201      	movs	r2, #1
7010a476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
7010a478:	687b      	ldr	r3, [r7, #4]
7010a47a:	681b      	ldr	r3, [r3, #0]
7010a47c:	699b      	ldr	r3, [r3, #24]
7010a47e:	f003 0303 	and.w	r3, r3, #3
7010a482:	2b00      	cmp	r3, #0
7010a484:	d003      	beq.n	7010a48e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
7010a486:	6878      	ldr	r0, [r7, #4]
7010a488:	f000 f93b 	bl	7010a702 <HAL_TIM_IC_CaptureCallback>
7010a48c:	e005      	b.n	7010a49a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
7010a48e:	6878      	ldr	r0, [r7, #4]
7010a490:	f000 f92d 	bl	7010a6ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
7010a494:	6878      	ldr	r0, [r7, #4]
7010a496:	f000 f93e 	bl	7010a716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
7010a49a:	687b      	ldr	r3, [r7, #4]
7010a49c:	2200      	movs	r2, #0
7010a49e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
7010a4a0:	68bb      	ldr	r3, [r7, #8]
7010a4a2:	f003 0304 	and.w	r3, r3, #4
7010a4a6:	2b00      	cmp	r3, #0
7010a4a8:	d020      	beq.n	7010a4ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
7010a4aa:	68fb      	ldr	r3, [r7, #12]
7010a4ac:	f003 0304 	and.w	r3, r3, #4
7010a4b0:	2b00      	cmp	r3, #0
7010a4b2:	d01b      	beq.n	7010a4ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
7010a4b4:	687b      	ldr	r3, [r7, #4]
7010a4b6:	681b      	ldr	r3, [r3, #0]
7010a4b8:	f06f 0204 	mvn.w	r2, #4
7010a4bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
7010a4be:	687b      	ldr	r3, [r7, #4]
7010a4c0:	2202      	movs	r2, #2
7010a4c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
7010a4c4:	687b      	ldr	r3, [r7, #4]
7010a4c6:	681b      	ldr	r3, [r3, #0]
7010a4c8:	699b      	ldr	r3, [r3, #24]
7010a4ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
7010a4ce:	2b00      	cmp	r3, #0
7010a4d0:	d003      	beq.n	7010a4da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
7010a4d2:	6878      	ldr	r0, [r7, #4]
7010a4d4:	f000 f915 	bl	7010a702 <HAL_TIM_IC_CaptureCallback>
7010a4d8:	e005      	b.n	7010a4e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
7010a4da:	6878      	ldr	r0, [r7, #4]
7010a4dc:	f000 f907 	bl	7010a6ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
7010a4e0:	6878      	ldr	r0, [r7, #4]
7010a4e2:	f000 f918 	bl	7010a716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
7010a4e6:	687b      	ldr	r3, [r7, #4]
7010a4e8:	2200      	movs	r2, #0
7010a4ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
7010a4ec:	68bb      	ldr	r3, [r7, #8]
7010a4ee:	f003 0308 	and.w	r3, r3, #8
7010a4f2:	2b00      	cmp	r3, #0
7010a4f4:	d020      	beq.n	7010a538 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
7010a4f6:	68fb      	ldr	r3, [r7, #12]
7010a4f8:	f003 0308 	and.w	r3, r3, #8
7010a4fc:	2b00      	cmp	r3, #0
7010a4fe:	d01b      	beq.n	7010a538 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
7010a500:	687b      	ldr	r3, [r7, #4]
7010a502:	681b      	ldr	r3, [r3, #0]
7010a504:	f06f 0208 	mvn.w	r2, #8
7010a508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
7010a50a:	687b      	ldr	r3, [r7, #4]
7010a50c:	2204      	movs	r2, #4
7010a50e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
7010a510:	687b      	ldr	r3, [r7, #4]
7010a512:	681b      	ldr	r3, [r3, #0]
7010a514:	69db      	ldr	r3, [r3, #28]
7010a516:	f003 0303 	and.w	r3, r3, #3
7010a51a:	2b00      	cmp	r3, #0
7010a51c:	d003      	beq.n	7010a526 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
7010a51e:	6878      	ldr	r0, [r7, #4]
7010a520:	f000 f8ef 	bl	7010a702 <HAL_TIM_IC_CaptureCallback>
7010a524:	e005      	b.n	7010a532 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
7010a526:	6878      	ldr	r0, [r7, #4]
7010a528:	f000 f8e1 	bl	7010a6ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
7010a52c:	6878      	ldr	r0, [r7, #4]
7010a52e:	f000 f8f2 	bl	7010a716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
7010a532:	687b      	ldr	r3, [r7, #4]
7010a534:	2200      	movs	r2, #0
7010a536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
7010a538:	68bb      	ldr	r3, [r7, #8]
7010a53a:	f003 0310 	and.w	r3, r3, #16
7010a53e:	2b00      	cmp	r3, #0
7010a540:	d020      	beq.n	7010a584 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
7010a542:	68fb      	ldr	r3, [r7, #12]
7010a544:	f003 0310 	and.w	r3, r3, #16
7010a548:	2b00      	cmp	r3, #0
7010a54a:	d01b      	beq.n	7010a584 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
7010a54c:	687b      	ldr	r3, [r7, #4]
7010a54e:	681b      	ldr	r3, [r3, #0]
7010a550:	f06f 0210 	mvn.w	r2, #16
7010a554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
7010a556:	687b      	ldr	r3, [r7, #4]
7010a558:	2208      	movs	r2, #8
7010a55a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
7010a55c:	687b      	ldr	r3, [r7, #4]
7010a55e:	681b      	ldr	r3, [r3, #0]
7010a560:	69db      	ldr	r3, [r3, #28]
7010a562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
7010a566:	2b00      	cmp	r3, #0
7010a568:	d003      	beq.n	7010a572 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
7010a56a:	6878      	ldr	r0, [r7, #4]
7010a56c:	f000 f8c9 	bl	7010a702 <HAL_TIM_IC_CaptureCallback>
7010a570:	e005      	b.n	7010a57e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
7010a572:	6878      	ldr	r0, [r7, #4]
7010a574:	f000 f8bb 	bl	7010a6ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
7010a578:	6878      	ldr	r0, [r7, #4]
7010a57a:	f000 f8cc 	bl	7010a716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
7010a57e:	687b      	ldr	r3, [r7, #4]
7010a580:	2200      	movs	r2, #0
7010a582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
7010a584:	68bb      	ldr	r3, [r7, #8]
7010a586:	f003 0301 	and.w	r3, r3, #1
7010a58a:	2b00      	cmp	r3, #0
7010a58c:	d00c      	beq.n	7010a5a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
7010a58e:	68fb      	ldr	r3, [r7, #12]
7010a590:	f003 0301 	and.w	r3, r3, #1
7010a594:	2b00      	cmp	r3, #0
7010a596:	d007      	beq.n	7010a5a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
7010a598:	687b      	ldr	r3, [r7, #4]
7010a59a:	681b      	ldr	r3, [r3, #0]
7010a59c:	f06f 0201 	mvn.w	r2, #1
7010a5a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
7010a5a2:	6878      	ldr	r0, [r7, #4]
7010a5a4:	f000 f899 	bl	7010a6da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
7010a5a8:	68bb      	ldr	r3, [r7, #8]
7010a5aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7010a5ae:	2b00      	cmp	r3, #0
7010a5b0:	d104      	bne.n	7010a5bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
7010a5b2:	68bb      	ldr	r3, [r7, #8]
7010a5b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
7010a5b8:	2b00      	cmp	r3, #0
7010a5ba:	d00c      	beq.n	7010a5d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
7010a5bc:	68fb      	ldr	r3, [r7, #12]
7010a5be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7010a5c2:	2b00      	cmp	r3, #0
7010a5c4:	d007      	beq.n	7010a5d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
7010a5c6:	687b      	ldr	r3, [r7, #4]
7010a5c8:	681b      	ldr	r3, [r3, #0]
7010a5ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
7010a5ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
7010a5d0:	6878      	ldr	r0, [r7, #4]
7010a5d2:	f000 f8be 	bl	7010a752 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
7010a5d6:	68bb      	ldr	r3, [r7, #8]
7010a5d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
7010a5dc:	2b00      	cmp	r3, #0
7010a5de:	d00c      	beq.n	7010a5fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
7010a5e0:	68fb      	ldr	r3, [r7, #12]
7010a5e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7010a5e6:	2b00      	cmp	r3, #0
7010a5e8:	d007      	beq.n	7010a5fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
7010a5ea:	687b      	ldr	r3, [r7, #4]
7010a5ec:	681b      	ldr	r3, [r3, #0]
7010a5ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
7010a5f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
7010a5f4:	6878      	ldr	r0, [r7, #4]
7010a5f6:	f000 f8b6 	bl	7010a766 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
7010a5fa:	68bb      	ldr	r3, [r7, #8]
7010a5fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
7010a600:	2b00      	cmp	r3, #0
7010a602:	d00c      	beq.n	7010a61e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
7010a604:	68fb      	ldr	r3, [r7, #12]
7010a606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
7010a60a:	2b00      	cmp	r3, #0
7010a60c:	d007      	beq.n	7010a61e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
7010a60e:	687b      	ldr	r3, [r7, #4]
7010a610:	681b      	ldr	r3, [r3, #0]
7010a612:	f06f 0240 	mvn.w	r2, #64	@ 0x40
7010a616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
7010a618:	6878      	ldr	r0, [r7, #4]
7010a61a:	f000 f886 	bl	7010a72a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
7010a61e:	68bb      	ldr	r3, [r7, #8]
7010a620:	f003 0320 	and.w	r3, r3, #32
7010a624:	2b00      	cmp	r3, #0
7010a626:	d00c      	beq.n	7010a642 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
7010a628:	68fb      	ldr	r3, [r7, #12]
7010a62a:	f003 0320 	and.w	r3, r3, #32
7010a62e:	2b00      	cmp	r3, #0
7010a630:	d007      	beq.n	7010a642 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
7010a632:	687b      	ldr	r3, [r7, #4]
7010a634:	681b      	ldr	r3, [r3, #0]
7010a636:	f06f 0220 	mvn.w	r2, #32
7010a63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
7010a63c:	6878      	ldr	r0, [r7, #4]
7010a63e:	f000 f87e 	bl	7010a73e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
7010a642:	68bb      	ldr	r3, [r7, #8]
7010a644:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
7010a648:	2b00      	cmp	r3, #0
7010a64a:	d00c      	beq.n	7010a666 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
7010a64c:	68fb      	ldr	r3, [r7, #12]
7010a64e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
7010a652:	2b00      	cmp	r3, #0
7010a654:	d007      	beq.n	7010a666 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
7010a656:	687b      	ldr	r3, [r7, #4]
7010a658:	681b      	ldr	r3, [r3, #0]
7010a65a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
7010a65e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
7010a660:	6878      	ldr	r0, [r7, #4]
7010a662:	f000 f88a 	bl	7010a77a <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
7010a666:	68bb      	ldr	r3, [r7, #8]
7010a668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
7010a66c:	2b00      	cmp	r3, #0
7010a66e:	d00c      	beq.n	7010a68a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
7010a670:	68fb      	ldr	r3, [r7, #12]
7010a672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
7010a676:	2b00      	cmp	r3, #0
7010a678:	d007      	beq.n	7010a68a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
7010a67a:	687b      	ldr	r3, [r7, #4]
7010a67c:	681b      	ldr	r3, [r3, #0]
7010a67e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
7010a682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
7010a684:	6878      	ldr	r0, [r7, #4]
7010a686:	f000 f882 	bl	7010a78e <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
7010a68a:	68bb      	ldr	r3, [r7, #8]
7010a68c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
7010a690:	2b00      	cmp	r3, #0
7010a692:	d00c      	beq.n	7010a6ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
7010a694:	68fb      	ldr	r3, [r7, #12]
7010a696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
7010a69a:	2b00      	cmp	r3, #0
7010a69c:	d007      	beq.n	7010a6ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
7010a69e:	687b      	ldr	r3, [r7, #4]
7010a6a0:	681b      	ldr	r3, [r3, #0]
7010a6a2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
7010a6a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
7010a6a8:	6878      	ldr	r0, [r7, #4]
7010a6aa:	f000 f87a 	bl	7010a7a2 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
7010a6ae:	68bb      	ldr	r3, [r7, #8]
7010a6b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
7010a6b4:	2b00      	cmp	r3, #0
7010a6b6:	d00c      	beq.n	7010a6d2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
7010a6b8:	68fb      	ldr	r3, [r7, #12]
7010a6ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
7010a6be:	2b00      	cmp	r3, #0
7010a6c0:	d007      	beq.n	7010a6d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
7010a6c2:	687b      	ldr	r3, [r7, #4]
7010a6c4:	681b      	ldr	r3, [r3, #0]
7010a6c6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
7010a6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
7010a6cc:	6878      	ldr	r0, [r7, #4]
7010a6ce:	f000 f872 	bl	7010a7b6 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
7010a6d2:	bf00      	nop
7010a6d4:	3710      	adds	r7, #16
7010a6d6:	46bd      	mov	sp, r7
7010a6d8:	bd80      	pop	{r7, pc}

7010a6da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
7010a6da:	b480      	push	{r7}
7010a6dc:	b083      	sub	sp, #12
7010a6de:	af00      	add	r7, sp, #0
7010a6e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
7010a6e2:	bf00      	nop
7010a6e4:	370c      	adds	r7, #12
7010a6e6:	46bd      	mov	sp, r7
7010a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a6ec:	4770      	bx	lr

7010a6ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
7010a6ee:	b480      	push	{r7}
7010a6f0:	b083      	sub	sp, #12
7010a6f2:	af00      	add	r7, sp, #0
7010a6f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
7010a6f6:	bf00      	nop
7010a6f8:	370c      	adds	r7, #12
7010a6fa:	46bd      	mov	sp, r7
7010a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a700:	4770      	bx	lr

7010a702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
7010a702:	b480      	push	{r7}
7010a704:	b083      	sub	sp, #12
7010a706:	af00      	add	r7, sp, #0
7010a708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
7010a70a:	bf00      	nop
7010a70c:	370c      	adds	r7, #12
7010a70e:	46bd      	mov	sp, r7
7010a710:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a714:	4770      	bx	lr

7010a716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
7010a716:	b480      	push	{r7}
7010a718:	b083      	sub	sp, #12
7010a71a:	af00      	add	r7, sp, #0
7010a71c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
7010a71e:	bf00      	nop
7010a720:	370c      	adds	r7, #12
7010a722:	46bd      	mov	sp, r7
7010a724:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a728:	4770      	bx	lr

7010a72a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
7010a72a:	b480      	push	{r7}
7010a72c:	b083      	sub	sp, #12
7010a72e:	af00      	add	r7, sp, #0
7010a730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
7010a732:	bf00      	nop
7010a734:	370c      	adds	r7, #12
7010a736:	46bd      	mov	sp, r7
7010a738:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a73c:	4770      	bx	lr

7010a73e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
7010a73e:	b480      	push	{r7}
7010a740:	b083      	sub	sp, #12
7010a742:	af00      	add	r7, sp, #0
7010a744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
7010a746:	bf00      	nop
7010a748:	370c      	adds	r7, #12
7010a74a:	46bd      	mov	sp, r7
7010a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a750:	4770      	bx	lr

7010a752 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
7010a752:	b480      	push	{r7}
7010a754:	b083      	sub	sp, #12
7010a756:	af00      	add	r7, sp, #0
7010a758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
7010a75a:	bf00      	nop
7010a75c:	370c      	adds	r7, #12
7010a75e:	46bd      	mov	sp, r7
7010a760:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a764:	4770      	bx	lr

7010a766 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
7010a766:	b480      	push	{r7}
7010a768:	b083      	sub	sp, #12
7010a76a:	af00      	add	r7, sp, #0
7010a76c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
7010a76e:	bf00      	nop
7010a770:	370c      	adds	r7, #12
7010a772:	46bd      	mov	sp, r7
7010a774:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a778:	4770      	bx	lr

7010a77a <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
7010a77a:	b480      	push	{r7}
7010a77c:	b083      	sub	sp, #12
7010a77e:	af00      	add	r7, sp, #0
7010a780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
7010a782:	bf00      	nop
7010a784:	370c      	adds	r7, #12
7010a786:	46bd      	mov	sp, r7
7010a788:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a78c:	4770      	bx	lr

7010a78e <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
7010a78e:	b480      	push	{r7}
7010a790:	b083      	sub	sp, #12
7010a792:	af00      	add	r7, sp, #0
7010a794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
7010a796:	bf00      	nop
7010a798:	370c      	adds	r7, #12
7010a79a:	46bd      	mov	sp, r7
7010a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a7a0:	4770      	bx	lr

7010a7a2 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
7010a7a2:	b480      	push	{r7}
7010a7a4:	b083      	sub	sp, #12
7010a7a6:	af00      	add	r7, sp, #0
7010a7a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
7010a7aa:	bf00      	nop
7010a7ac:	370c      	adds	r7, #12
7010a7ae:	46bd      	mov	sp, r7
7010a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a7b4:	4770      	bx	lr

7010a7b6 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
7010a7b6:	b480      	push	{r7}
7010a7b8:	b083      	sub	sp, #12
7010a7ba:	af00      	add	r7, sp, #0
7010a7bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
7010a7be:	bf00      	nop
7010a7c0:	370c      	adds	r7, #12
7010a7c2:	46bd      	mov	sp, r7
7010a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
7010a7c8:	4770      	bx	lr

7010a7ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
7010a7ca:	b580      	push	{r7, lr}
7010a7cc:	b082      	sub	sp, #8
7010a7ce:	af00      	add	r7, sp, #0
7010a7d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
7010a7d2:	687b      	ldr	r3, [r7, #4]
7010a7d4:	2b00      	cmp	r3, #0
7010a7d6:	d101      	bne.n	7010a7dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
7010a7d8:	2301      	movs	r3, #1
7010a7da:	e042      	b.n	7010a862 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
7010a7dc:	687b      	ldr	r3, [r7, #4]
7010a7de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
7010a7e2:	2b00      	cmp	r3, #0
7010a7e4:	d106      	bne.n	7010a7f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
7010a7e6:	687b      	ldr	r3, [r7, #4]
7010a7e8:	2200      	movs	r2, #0
7010a7ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
7010a7ee:	6878      	ldr	r0, [r7, #4]
7010a7f0:	f7f7 f86c 	bl	701018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
7010a7f4:	687b      	ldr	r3, [r7, #4]
7010a7f6:	2224      	movs	r2, #36	@ 0x24
7010a7f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
7010a7fc:	687b      	ldr	r3, [r7, #4]
7010a7fe:	681b      	ldr	r3, [r3, #0]
7010a800:	681a      	ldr	r2, [r3, #0]
7010a802:	687b      	ldr	r3, [r7, #4]
7010a804:	681b      	ldr	r3, [r3, #0]
7010a806:	f022 0201 	bic.w	r2, r2, #1
7010a80a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
7010a80c:	687b      	ldr	r3, [r7, #4]
7010a80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7010a810:	2b00      	cmp	r3, #0
7010a812:	d002      	beq.n	7010a81a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
7010a814:	6878      	ldr	r0, [r7, #4]
7010a816:	f000 faa3 	bl	7010ad60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
7010a81a:	6878      	ldr	r0, [r7, #4]
7010a81c:	f000 f8b4 	bl	7010a988 <UART_SetConfig>
7010a820:	4603      	mov	r3, r0
7010a822:	2b01      	cmp	r3, #1
7010a824:	d101      	bne.n	7010a82a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
7010a826:	2301      	movs	r3, #1
7010a828:	e01b      	b.n	7010a862 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
7010a82a:	687b      	ldr	r3, [r7, #4]
7010a82c:	681b      	ldr	r3, [r3, #0]
7010a82e:	685a      	ldr	r2, [r3, #4]
7010a830:	687b      	ldr	r3, [r7, #4]
7010a832:	681b      	ldr	r3, [r3, #0]
7010a834:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
7010a838:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
7010a83a:	687b      	ldr	r3, [r7, #4]
7010a83c:	681b      	ldr	r3, [r3, #0]
7010a83e:	689a      	ldr	r2, [r3, #8]
7010a840:	687b      	ldr	r3, [r7, #4]
7010a842:	681b      	ldr	r3, [r3, #0]
7010a844:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
7010a848:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
7010a84a:	687b      	ldr	r3, [r7, #4]
7010a84c:	681b      	ldr	r3, [r3, #0]
7010a84e:	681a      	ldr	r2, [r3, #0]
7010a850:	687b      	ldr	r3, [r7, #4]
7010a852:	681b      	ldr	r3, [r3, #0]
7010a854:	f042 0201 	orr.w	r2, r2, #1
7010a858:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
7010a85a:	6878      	ldr	r0, [r7, #4]
7010a85c:	f000 fb22 	bl	7010aea4 <UART_CheckIdleState>
7010a860:	4603      	mov	r3, r0
}
7010a862:	4618      	mov	r0, r3
7010a864:	3708      	adds	r7, #8
7010a866:	46bd      	mov	sp, r7
7010a868:	bd80      	pop	{r7, pc}

7010a86a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
7010a86a:	b580      	push	{r7, lr}
7010a86c:	b08a      	sub	sp, #40	@ 0x28
7010a86e:	af02      	add	r7, sp, #8
7010a870:	60f8      	str	r0, [r7, #12]
7010a872:	60b9      	str	r1, [r7, #8]
7010a874:	603b      	str	r3, [r7, #0]
7010a876:	4613      	mov	r3, r2
7010a878:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
7010a87a:	68fb      	ldr	r3, [r7, #12]
7010a87c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
7010a880:	2b20      	cmp	r3, #32
7010a882:	d17b      	bne.n	7010a97c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
7010a884:	68bb      	ldr	r3, [r7, #8]
7010a886:	2b00      	cmp	r3, #0
7010a888:	d002      	beq.n	7010a890 <HAL_UART_Transmit+0x26>
7010a88a:	88fb      	ldrh	r3, [r7, #6]
7010a88c:	2b00      	cmp	r3, #0
7010a88e:	d101      	bne.n	7010a894 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
7010a890:	2301      	movs	r3, #1
7010a892:	e074      	b.n	7010a97e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
7010a894:	68fb      	ldr	r3, [r7, #12]
7010a896:	2200      	movs	r2, #0
7010a898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
7010a89c:	68fb      	ldr	r3, [r7, #12]
7010a89e:	2221      	movs	r2, #33	@ 0x21
7010a8a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
7010a8a4:	f7f7 f906 	bl	70101ab4 <HAL_GetTick>
7010a8a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
7010a8aa:	68fb      	ldr	r3, [r7, #12]
7010a8ac:	88fa      	ldrh	r2, [r7, #6]
7010a8ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
7010a8b2:	68fb      	ldr	r3, [r7, #12]
7010a8b4:	88fa      	ldrh	r2, [r7, #6]
7010a8b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
7010a8ba:	68fb      	ldr	r3, [r7, #12]
7010a8bc:	689b      	ldr	r3, [r3, #8]
7010a8be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
7010a8c2:	d108      	bne.n	7010a8d6 <HAL_UART_Transmit+0x6c>
7010a8c4:	68fb      	ldr	r3, [r7, #12]
7010a8c6:	691b      	ldr	r3, [r3, #16]
7010a8c8:	2b00      	cmp	r3, #0
7010a8ca:	d104      	bne.n	7010a8d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
7010a8cc:	2300      	movs	r3, #0
7010a8ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
7010a8d0:	68bb      	ldr	r3, [r7, #8]
7010a8d2:	61bb      	str	r3, [r7, #24]
7010a8d4:	e003      	b.n	7010a8de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
7010a8d6:	68bb      	ldr	r3, [r7, #8]
7010a8d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
7010a8da:	2300      	movs	r3, #0
7010a8dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
7010a8de:	e030      	b.n	7010a942 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
7010a8e0:	683b      	ldr	r3, [r7, #0]
7010a8e2:	9300      	str	r3, [sp, #0]
7010a8e4:	697b      	ldr	r3, [r7, #20]
7010a8e6:	2200      	movs	r2, #0
7010a8e8:	2180      	movs	r1, #128	@ 0x80
7010a8ea:	68f8      	ldr	r0, [r7, #12]
7010a8ec:	f000 fb84 	bl	7010aff8 <UART_WaitOnFlagUntilTimeout>
7010a8f0:	4603      	mov	r3, r0
7010a8f2:	2b00      	cmp	r3, #0
7010a8f4:	d005      	beq.n	7010a902 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
7010a8f6:	68fb      	ldr	r3, [r7, #12]
7010a8f8:	2220      	movs	r2, #32
7010a8fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
7010a8fe:	2303      	movs	r3, #3
7010a900:	e03d      	b.n	7010a97e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
7010a902:	69fb      	ldr	r3, [r7, #28]
7010a904:	2b00      	cmp	r3, #0
7010a906:	d10b      	bne.n	7010a920 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
7010a908:	69bb      	ldr	r3, [r7, #24]
7010a90a:	881b      	ldrh	r3, [r3, #0]
7010a90c:	461a      	mov	r2, r3
7010a90e:	68fb      	ldr	r3, [r7, #12]
7010a910:	681b      	ldr	r3, [r3, #0]
7010a912:	f3c2 0208 	ubfx	r2, r2, #0, #9
7010a916:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
7010a918:	69bb      	ldr	r3, [r7, #24]
7010a91a:	3302      	adds	r3, #2
7010a91c:	61bb      	str	r3, [r7, #24]
7010a91e:	e007      	b.n	7010a930 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
7010a920:	69fb      	ldr	r3, [r7, #28]
7010a922:	781a      	ldrb	r2, [r3, #0]
7010a924:	68fb      	ldr	r3, [r7, #12]
7010a926:	681b      	ldr	r3, [r3, #0]
7010a928:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
7010a92a:	69fb      	ldr	r3, [r7, #28]
7010a92c:	3301      	adds	r3, #1
7010a92e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
7010a930:	68fb      	ldr	r3, [r7, #12]
7010a932:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
7010a936:	b29b      	uxth	r3, r3
7010a938:	3b01      	subs	r3, #1
7010a93a:	b29a      	uxth	r2, r3
7010a93c:	68fb      	ldr	r3, [r7, #12]
7010a93e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
7010a942:	68fb      	ldr	r3, [r7, #12]
7010a944:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
7010a948:	b29b      	uxth	r3, r3
7010a94a:	2b00      	cmp	r3, #0
7010a94c:	d1c8      	bne.n	7010a8e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
7010a94e:	683b      	ldr	r3, [r7, #0]
7010a950:	9300      	str	r3, [sp, #0]
7010a952:	697b      	ldr	r3, [r7, #20]
7010a954:	2200      	movs	r2, #0
7010a956:	2140      	movs	r1, #64	@ 0x40
7010a958:	68f8      	ldr	r0, [r7, #12]
7010a95a:	f000 fb4d 	bl	7010aff8 <UART_WaitOnFlagUntilTimeout>
7010a95e:	4603      	mov	r3, r0
7010a960:	2b00      	cmp	r3, #0
7010a962:	d005      	beq.n	7010a970 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
7010a964:	68fb      	ldr	r3, [r7, #12]
7010a966:	2220      	movs	r2, #32
7010a968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
7010a96c:	2303      	movs	r3, #3
7010a96e:	e006      	b.n	7010a97e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
7010a970:	68fb      	ldr	r3, [r7, #12]
7010a972:	2220      	movs	r2, #32
7010a974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
7010a978:	2300      	movs	r3, #0
7010a97a:	e000      	b.n	7010a97e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
7010a97c:	2302      	movs	r3, #2
  }
}
7010a97e:	4618      	mov	r0, r3
7010a980:	3720      	adds	r7, #32
7010a982:	46bd      	mov	sp, r7
7010a984:	bd80      	pop	{r7, pc}
	...

7010a988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
7010a988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
7010a98c:	b090      	sub	sp, #64	@ 0x40
7010a98e:	af00      	add	r7, sp, #0
7010a990:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
7010a992:	2300      	movs	r3, #0
7010a994:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
7010a998:	697b      	ldr	r3, [r7, #20]
7010a99a:	681b      	ldr	r3, [r3, #0]
7010a99c:	4aa3      	ldr	r2, [pc, #652]	@ (7010ac2c <UART_SetConfig+0x2a4>)
7010a99e:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
7010a9a0:	697b      	ldr	r3, [r7, #20]
7010a9a2:	689a      	ldr	r2, [r3, #8]
7010a9a4:	697b      	ldr	r3, [r7, #20]
7010a9a6:	691b      	ldr	r3, [r3, #16]
7010a9a8:	431a      	orrs	r2, r3
7010a9aa:	697b      	ldr	r3, [r7, #20]
7010a9ac:	695b      	ldr	r3, [r3, #20]
7010a9ae:	431a      	orrs	r2, r3
7010a9b0:	697b      	ldr	r3, [r7, #20]
7010a9b2:	69db      	ldr	r3, [r3, #28]
7010a9b4:	4313      	orrs	r3, r2
7010a9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
7010a9b8:	697b      	ldr	r3, [r7, #20]
7010a9ba:	681b      	ldr	r3, [r3, #0]
7010a9bc:	681a      	ldr	r2, [r3, #0]
7010a9be:	4b9c      	ldr	r3, [pc, #624]	@ (7010ac30 <UART_SetConfig+0x2a8>)
7010a9c0:	4013      	ands	r3, r2
7010a9c2:	697a      	ldr	r2, [r7, #20]
7010a9c4:	6812      	ldr	r2, [r2, #0]
7010a9c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
7010a9c8:	430b      	orrs	r3, r1
7010a9ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
7010a9cc:	697b      	ldr	r3, [r7, #20]
7010a9ce:	681b      	ldr	r3, [r3, #0]
7010a9d0:	685b      	ldr	r3, [r3, #4]
7010a9d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
7010a9d6:	697b      	ldr	r3, [r7, #20]
7010a9d8:	68da      	ldr	r2, [r3, #12]
7010a9da:	697b      	ldr	r3, [r7, #20]
7010a9dc:	681b      	ldr	r3, [r3, #0]
7010a9de:	430a      	orrs	r2, r1
7010a9e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
7010a9e2:	697b      	ldr	r3, [r7, #20]
7010a9e4:	699b      	ldr	r3, [r3, #24]
7010a9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
7010a9e8:	697b      	ldr	r3, [r7, #20]
7010a9ea:	681b      	ldr	r3, [r3, #0]
7010a9ec:	4a8f      	ldr	r2, [pc, #572]	@ (7010ac2c <UART_SetConfig+0x2a4>)
7010a9ee:	4293      	cmp	r3, r2
7010a9f0:	d009      	beq.n	7010aa06 <UART_SetConfig+0x7e>
7010a9f2:	697b      	ldr	r3, [r7, #20]
7010a9f4:	681b      	ldr	r3, [r3, #0]
7010a9f6:	4a8f      	ldr	r2, [pc, #572]	@ (7010ac34 <UART_SetConfig+0x2ac>)
7010a9f8:	4293      	cmp	r3, r2
7010a9fa:	d004      	beq.n	7010aa06 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
7010a9fc:	697b      	ldr	r3, [r7, #20]
7010a9fe:	6a1b      	ldr	r3, [r3, #32]
7010aa00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
7010aa02:	4313      	orrs	r3, r2
7010aa04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
7010aa06:	697b      	ldr	r3, [r7, #20]
7010aa08:	681b      	ldr	r3, [r3, #0]
7010aa0a:	689b      	ldr	r3, [r3, #8]
7010aa0c:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
7010aa10:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
7010aa14:	697a      	ldr	r2, [r7, #20]
7010aa16:	6812      	ldr	r2, [r2, #0]
7010aa18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
7010aa1a:	430b      	orrs	r3, r1
7010aa1c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
7010aa1e:	697b      	ldr	r3, [r7, #20]
7010aa20:	681b      	ldr	r3, [r3, #0]
7010aa22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7010aa24:	f023 010f 	bic.w	r1, r3, #15
7010aa28:	697b      	ldr	r3, [r7, #20]
7010aa2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
7010aa2c:	697b      	ldr	r3, [r7, #20]
7010aa2e:	681b      	ldr	r3, [r3, #0]
7010aa30:	430a      	orrs	r2, r1
7010aa32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
7010aa34:	697b      	ldr	r3, [r7, #20]
7010aa36:	681b      	ldr	r3, [r3, #0]
7010aa38:	4a7f      	ldr	r2, [pc, #508]	@ (7010ac38 <UART_SetConfig+0x2b0>)
7010aa3a:	4293      	cmp	r3, r2
7010aa3c:	d106      	bne.n	7010aa4c <UART_SetConfig+0xc4>
7010aa3e:	f04f 0200 	mov.w	r2, #0
7010aa42:	f44f 7380 	mov.w	r3, #256	@ 0x100
7010aa46:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
7010aa4a:	e07d      	b.n	7010ab48 <UART_SetConfig+0x1c0>
7010aa4c:	697b      	ldr	r3, [r7, #20]
7010aa4e:	681b      	ldr	r3, [r3, #0]
7010aa50:	4a7a      	ldr	r2, [pc, #488]	@ (7010ac3c <UART_SetConfig+0x2b4>)
7010aa52:	4293      	cmp	r3, r2
7010aa54:	d106      	bne.n	7010aa64 <UART_SetConfig+0xdc>
7010aa56:	f04f 0200 	mov.w	r2, #0
7010aa5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
7010aa5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
7010aa62:	e071      	b.n	7010ab48 <UART_SetConfig+0x1c0>
7010aa64:	697b      	ldr	r3, [r7, #20]
7010aa66:	681b      	ldr	r3, [r3, #0]
7010aa68:	4a75      	ldr	r2, [pc, #468]	@ (7010ac40 <UART_SetConfig+0x2b8>)
7010aa6a:	4293      	cmp	r3, r2
7010aa6c:	d106      	bne.n	7010aa7c <UART_SetConfig+0xf4>
7010aa6e:	f04f 0200 	mov.w	r2, #0
7010aa72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
7010aa76:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
7010aa7a:	e065      	b.n	7010ab48 <UART_SetConfig+0x1c0>
7010aa7c:	697b      	ldr	r3, [r7, #20]
7010aa7e:	681b      	ldr	r3, [r3, #0]
7010aa80:	4a70      	ldr	r2, [pc, #448]	@ (7010ac44 <UART_SetConfig+0x2bc>)
7010aa82:	4293      	cmp	r3, r2
7010aa84:	d106      	bne.n	7010aa94 <UART_SetConfig+0x10c>
7010aa86:	f04f 0200 	mov.w	r2, #0
7010aa8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
7010aa8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
7010aa92:	e059      	b.n	7010ab48 <UART_SetConfig+0x1c0>
7010aa94:	697b      	ldr	r3, [r7, #20]
7010aa96:	681b      	ldr	r3, [r3, #0]
7010aa98:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
7010aa9c:	d106      	bne.n	7010aaac <UART_SetConfig+0x124>
7010aa9e:	f04f 0200 	mov.w	r2, #0
7010aaa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
7010aaa6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
7010aaaa:	e04d      	b.n	7010ab48 <UART_SetConfig+0x1c0>
7010aaac:	697b      	ldr	r3, [r7, #20]
7010aaae:	681b      	ldr	r3, [r3, #0]
7010aab0:	4a65      	ldr	r2, [pc, #404]	@ (7010ac48 <UART_SetConfig+0x2c0>)
7010aab2:	4293      	cmp	r3, r2
7010aab4:	d106      	bne.n	7010aac4 <UART_SetConfig+0x13c>
7010aab6:	f04f 0200 	mov.w	r2, #0
7010aaba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
7010aabe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
7010aac2:	e041      	b.n	7010ab48 <UART_SetConfig+0x1c0>
7010aac4:	697b      	ldr	r3, [r7, #20]
7010aac6:	681b      	ldr	r3, [r3, #0]
7010aac8:	4a60      	ldr	r2, [pc, #384]	@ (7010ac4c <UART_SetConfig+0x2c4>)
7010aaca:	4293      	cmp	r3, r2
7010aacc:	d106      	bne.n	7010aadc <UART_SetConfig+0x154>
7010aace:	f04f 0200 	mov.w	r2, #0
7010aad2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
7010aad6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
7010aada:	e035      	b.n	7010ab48 <UART_SetConfig+0x1c0>
7010aadc:	697b      	ldr	r3, [r7, #20]
7010aade:	681b      	ldr	r3, [r3, #0]
7010aae0:	4a5b      	ldr	r2, [pc, #364]	@ (7010ac50 <UART_SetConfig+0x2c8>)
7010aae2:	4293      	cmp	r3, r2
7010aae4:	d106      	bne.n	7010aaf4 <UART_SetConfig+0x16c>
7010aae6:	f04f 0200 	mov.w	r2, #0
7010aaea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
7010aaee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
7010aaf2:	e029      	b.n	7010ab48 <UART_SetConfig+0x1c0>
7010aaf4:	697b      	ldr	r3, [r7, #20]
7010aaf6:	681b      	ldr	r3, [r3, #0]
7010aaf8:	4a56      	ldr	r2, [pc, #344]	@ (7010ac54 <UART_SetConfig+0x2cc>)
7010aafa:	4293      	cmp	r3, r2
7010aafc:	d106      	bne.n	7010ab0c <UART_SetConfig+0x184>
7010aafe:	f04f 0200 	mov.w	r2, #0
7010ab02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
7010ab06:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
7010ab0a:	e01d      	b.n	7010ab48 <UART_SetConfig+0x1c0>
7010ab0c:	697b      	ldr	r3, [r7, #20]
7010ab0e:	681b      	ldr	r3, [r3, #0]
7010ab10:	4a51      	ldr	r2, [pc, #324]	@ (7010ac58 <UART_SetConfig+0x2d0>)
7010ab12:	4293      	cmp	r3, r2
7010ab14:	d106      	bne.n	7010ab24 <UART_SetConfig+0x19c>
7010ab16:	f04f 0200 	mov.w	r2, #0
7010ab1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
7010ab1e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
7010ab22:	e011      	b.n	7010ab48 <UART_SetConfig+0x1c0>
7010ab24:	697b      	ldr	r3, [r7, #20]
7010ab26:	681b      	ldr	r3, [r3, #0]
7010ab28:	4a40      	ldr	r2, [pc, #256]	@ (7010ac2c <UART_SetConfig+0x2a4>)
7010ab2a:	4293      	cmp	r3, r2
7010ab2c:	d106      	bne.n	7010ab3c <UART_SetConfig+0x1b4>
7010ab2e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
7010ab32:	f04f 0300 	mov.w	r3, #0
7010ab36:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
7010ab3a:	e005      	b.n	7010ab48 <UART_SetConfig+0x1c0>
7010ab3c:	f04f 0200 	mov.w	r2, #0
7010ab40:	f04f 0300 	mov.w	r3, #0
7010ab44:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
7010ab48:	697b      	ldr	r3, [r7, #20]
7010ab4a:	681b      	ldr	r3, [r3, #0]
7010ab4c:	4a37      	ldr	r2, [pc, #220]	@ (7010ac2c <UART_SetConfig+0x2a4>)
7010ab4e:	4293      	cmp	r3, r2
7010ab50:	d005      	beq.n	7010ab5e <UART_SetConfig+0x1d6>
7010ab52:	697b      	ldr	r3, [r7, #20]
7010ab54:	681b      	ldr	r3, [r3, #0]
7010ab56:	4a37      	ldr	r2, [pc, #220]	@ (7010ac34 <UART_SetConfig+0x2ac>)
7010ab58:	4293      	cmp	r3, r2
7010ab5a:	f040 8081 	bne.w	7010ac60 <UART_SetConfig+0x2d8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
7010ab5e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
7010ab62:	f7fb fa15 	bl	70105f90 <HAL_RCCEx_GetPeriphCLKFreq>
7010ab66:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
7010ab68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7010ab6a:	2b00      	cmp	r3, #0
7010ab6c:	f000 80e0 	beq.w	7010ad30 <UART_SetConfig+0x3a8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
7010ab70:	697b      	ldr	r3, [r7, #20]
7010ab72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7010ab74:	4a39      	ldr	r2, [pc, #228]	@ (7010ac5c <UART_SetConfig+0x2d4>)
7010ab76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
7010ab7a:	461a      	mov	r2, r3
7010ab7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7010ab7e:	fbb3 f3f2 	udiv	r3, r3, r2
7010ab82:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
7010ab84:	697b      	ldr	r3, [r7, #20]
7010ab86:	685a      	ldr	r2, [r3, #4]
7010ab88:	4613      	mov	r3, r2
7010ab8a:	005b      	lsls	r3, r3, #1
7010ab8c:	4413      	add	r3, r2
7010ab8e:	69fa      	ldr	r2, [r7, #28]
7010ab90:	429a      	cmp	r2, r3
7010ab92:	d305      	bcc.n	7010aba0 <UART_SetConfig+0x218>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
7010ab94:	697b      	ldr	r3, [r7, #20]
7010ab96:	685b      	ldr	r3, [r3, #4]
7010ab98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
7010ab9a:	69fa      	ldr	r2, [r7, #28]
7010ab9c:	429a      	cmp	r2, r3
7010ab9e:	d903      	bls.n	7010aba8 <UART_SetConfig+0x220>
      {
        ret = HAL_ERROR;
7010aba0:	2301      	movs	r3, #1
7010aba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
7010aba6:	e040      	b.n	7010ac2a <UART_SetConfig+0x2a2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
7010aba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7010abaa:	2200      	movs	r2, #0
7010abac:	60bb      	str	r3, [r7, #8]
7010abae:	60fa      	str	r2, [r7, #12]
7010abb0:	697b      	ldr	r3, [r7, #20]
7010abb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7010abb4:	4a29      	ldr	r2, [pc, #164]	@ (7010ac5c <UART_SetConfig+0x2d4>)
7010abb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
7010abba:	b29b      	uxth	r3, r3
7010abbc:	2200      	movs	r2, #0
7010abbe:	603b      	str	r3, [r7, #0]
7010abc0:	607a      	str	r2, [r7, #4]
7010abc2:	e9d7 2300 	ldrd	r2, r3, [r7]
7010abc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
7010abca:	f7f5 fddf 	bl	7010078c <__aeabi_uldivmod>
7010abce:	4602      	mov	r2, r0
7010abd0:	460b      	mov	r3, r1
7010abd2:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
7010abd6:	6979      	ldr	r1, [r7, #20]
7010abd8:	6849      	ldr	r1, [r1, #4]
7010abda:	0849      	lsrs	r1, r1, #1
7010abdc:	2000      	movs	r0, #0
7010abde:	460c      	mov	r4, r1
7010abe0:	4605      	mov	r5, r0
7010abe2:	eb12 0804 	adds.w	r8, r2, r4
7010abe6:	eb43 0905 	adc.w	r9, r3, r5
7010abea:	697b      	ldr	r3, [r7, #20]
7010abec:	685b      	ldr	r3, [r3, #4]
7010abee:	2200      	movs	r2, #0
7010abf0:	469a      	mov	sl, r3
7010abf2:	4693      	mov	fp, r2
7010abf4:	4652      	mov	r2, sl
7010abf6:	465b      	mov	r3, fp
7010abf8:	4640      	mov	r0, r8
7010abfa:	4649      	mov	r1, r9
7010abfc:	f7f5 fdc6 	bl	7010078c <__aeabi_uldivmod>
7010ac00:	4602      	mov	r2, r0
7010ac02:	460b      	mov	r3, r1
7010ac04:	4613      	mov	r3, r2
7010ac06:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
7010ac08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7010ac0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
7010ac0e:	d308      	bcc.n	7010ac22 <UART_SetConfig+0x29a>
7010ac10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7010ac12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
7010ac16:	d204      	bcs.n	7010ac22 <UART_SetConfig+0x29a>
        {
          huart->Instance->BRR = usartdiv;
7010ac18:	697b      	ldr	r3, [r7, #20]
7010ac1a:	681b      	ldr	r3, [r3, #0]
7010ac1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7010ac1e:	60da      	str	r2, [r3, #12]
7010ac20:	e003      	b.n	7010ac2a <UART_SetConfig+0x2a2>
        }
        else
        {
          ret = HAL_ERROR;
7010ac22:	2301      	movs	r3, #1
7010ac24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
7010ac28:	e082      	b.n	7010ad30 <UART_SetConfig+0x3a8>
7010ac2a:	e081      	b.n	7010ad30 <UART_SetConfig+0x3a8>
7010ac2c:	56000c00 	.word	0x56000c00
7010ac30:	cfff69f3 	.word	0xcfff69f3
7010ac34:	46000c00 	.word	0x46000c00
7010ac38:	52001000 	.word	0x52001000
7010ac3c:	50004400 	.word	0x50004400
7010ac40:	50004800 	.word	0x50004800
7010ac44:	50004c00 	.word	0x50004c00
7010ac48:	52001400 	.word	0x52001400
7010ac4c:	50007800 	.word	0x50007800
7010ac50:	50007c00 	.word	0x50007c00
7010ac54:	52001800 	.word	0x52001800
7010ac58:	52001c00 	.word	0x52001c00
7010ac5c:	7010bd2c 	.word	0x7010bd2c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
7010ac60:	697b      	ldr	r3, [r7, #20]
7010ac62:	69db      	ldr	r3, [r3, #28]
7010ac64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
7010ac68:	d138      	bne.n	7010acdc <UART_SetConfig+0x354>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
7010ac6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
7010ac6e:	f7fb f98f 	bl	70105f90 <HAL_RCCEx_GetPeriphCLKFreq>
7010ac72:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
7010ac74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7010ac76:	2b00      	cmp	r3, #0
7010ac78:	d05a      	beq.n	7010ad30 <UART_SetConfig+0x3a8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
7010ac7a:	697b      	ldr	r3, [r7, #20]
7010ac7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7010ac7e:	4a37      	ldr	r2, [pc, #220]	@ (7010ad5c <UART_SetConfig+0x3d4>)
7010ac80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
7010ac84:	461a      	mov	r2, r3
7010ac86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7010ac88:	fbb3 f3f2 	udiv	r3, r3, r2
7010ac8c:	005a      	lsls	r2, r3, #1
7010ac8e:	697b      	ldr	r3, [r7, #20]
7010ac90:	685b      	ldr	r3, [r3, #4]
7010ac92:	085b      	lsrs	r3, r3, #1
7010ac94:	441a      	add	r2, r3
7010ac96:	697b      	ldr	r3, [r7, #20]
7010ac98:	685b      	ldr	r3, [r3, #4]
7010ac9a:	fbb2 f3f3 	udiv	r3, r2, r3
7010ac9e:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
7010aca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7010aca2:	2b0f      	cmp	r3, #15
7010aca4:	d916      	bls.n	7010acd4 <UART_SetConfig+0x34c>
7010aca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7010aca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7010acac:	d212      	bcs.n	7010acd4 <UART_SetConfig+0x34c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
7010acae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7010acb0:	b29b      	uxth	r3, r3
7010acb2:	f023 030f 	bic.w	r3, r3, #15
7010acb6:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
7010acb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7010acba:	085b      	lsrs	r3, r3, #1
7010acbc:	b29b      	uxth	r3, r3
7010acbe:	f003 0307 	and.w	r3, r3, #7
7010acc2:	b29a      	uxth	r2, r3
7010acc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
7010acc6:	4313      	orrs	r3, r2
7010acc8:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
7010acca:	697b      	ldr	r3, [r7, #20]
7010accc:	681b      	ldr	r3, [r3, #0]
7010acce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
7010acd0:	60da      	str	r2, [r3, #12]
7010acd2:	e02d      	b.n	7010ad30 <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
7010acd4:	2301      	movs	r3, #1
7010acd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
7010acda:	e029      	b.n	7010ad30 <UART_SetConfig+0x3a8>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
7010acdc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
7010ace0:	f7fb f956 	bl	70105f90 <HAL_RCCEx_GetPeriphCLKFreq>
7010ace4:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
7010ace6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7010ace8:	2b00      	cmp	r3, #0
7010acea:	d021      	beq.n	7010ad30 <UART_SetConfig+0x3a8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
7010acec:	697b      	ldr	r3, [r7, #20]
7010acee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7010acf0:	4a1a      	ldr	r2, [pc, #104]	@ (7010ad5c <UART_SetConfig+0x3d4>)
7010acf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
7010acf6:	461a      	mov	r2, r3
7010acf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7010acfa:	fbb3 f2f2 	udiv	r2, r3, r2
7010acfe:	697b      	ldr	r3, [r7, #20]
7010ad00:	685b      	ldr	r3, [r3, #4]
7010ad02:	085b      	lsrs	r3, r3, #1
7010ad04:	441a      	add	r2, r3
7010ad06:	697b      	ldr	r3, [r7, #20]
7010ad08:	685b      	ldr	r3, [r3, #4]
7010ad0a:	fbb2 f3f3 	udiv	r3, r2, r3
7010ad0e:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
7010ad10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7010ad12:	2b0f      	cmp	r3, #15
7010ad14:	d909      	bls.n	7010ad2a <UART_SetConfig+0x3a2>
7010ad16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7010ad18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7010ad1c:	d205      	bcs.n	7010ad2a <UART_SetConfig+0x3a2>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
7010ad1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7010ad20:	b29a      	uxth	r2, r3
7010ad22:	697b      	ldr	r3, [r7, #20]
7010ad24:	681b      	ldr	r3, [r3, #0]
7010ad26:	60da      	str	r2, [r3, #12]
7010ad28:	e002      	b.n	7010ad30 <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
7010ad2a:	2301      	movs	r3, #1
7010ad2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
7010ad30:	697b      	ldr	r3, [r7, #20]
7010ad32:	2201      	movs	r2, #1
7010ad34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
7010ad38:	697b      	ldr	r3, [r7, #20]
7010ad3a:	2201      	movs	r2, #1
7010ad3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
7010ad40:	697b      	ldr	r3, [r7, #20]
7010ad42:	2200      	movs	r2, #0
7010ad44:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
7010ad46:	697b      	ldr	r3, [r7, #20]
7010ad48:	2200      	movs	r2, #0
7010ad4a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
7010ad4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
7010ad50:	4618      	mov	r0, r3
7010ad52:	3740      	adds	r7, #64	@ 0x40
7010ad54:	46bd      	mov	sp, r7
7010ad56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
7010ad5a:	bf00      	nop
7010ad5c:	7010bd2c 	.word	0x7010bd2c

7010ad60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
7010ad60:	b480      	push	{r7}
7010ad62:	b083      	sub	sp, #12
7010ad64:	af00      	add	r7, sp, #0
7010ad66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
7010ad68:	687b      	ldr	r3, [r7, #4]
7010ad6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7010ad6c:	f003 0308 	and.w	r3, r3, #8
7010ad70:	2b00      	cmp	r3, #0
7010ad72:	d00a      	beq.n	7010ad8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
7010ad74:	687b      	ldr	r3, [r7, #4]
7010ad76:	681b      	ldr	r3, [r3, #0]
7010ad78:	685b      	ldr	r3, [r3, #4]
7010ad7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
7010ad7e:	687b      	ldr	r3, [r7, #4]
7010ad80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
7010ad82:	687b      	ldr	r3, [r7, #4]
7010ad84:	681b      	ldr	r3, [r3, #0]
7010ad86:	430a      	orrs	r2, r1
7010ad88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
7010ad8a:	687b      	ldr	r3, [r7, #4]
7010ad8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7010ad8e:	f003 0301 	and.w	r3, r3, #1
7010ad92:	2b00      	cmp	r3, #0
7010ad94:	d00a      	beq.n	7010adac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
7010ad96:	687b      	ldr	r3, [r7, #4]
7010ad98:	681b      	ldr	r3, [r3, #0]
7010ad9a:	685b      	ldr	r3, [r3, #4]
7010ad9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
7010ada0:	687b      	ldr	r3, [r7, #4]
7010ada2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
7010ada4:	687b      	ldr	r3, [r7, #4]
7010ada6:	681b      	ldr	r3, [r3, #0]
7010ada8:	430a      	orrs	r2, r1
7010adaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
7010adac:	687b      	ldr	r3, [r7, #4]
7010adae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7010adb0:	f003 0302 	and.w	r3, r3, #2
7010adb4:	2b00      	cmp	r3, #0
7010adb6:	d00a      	beq.n	7010adce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
7010adb8:	687b      	ldr	r3, [r7, #4]
7010adba:	681b      	ldr	r3, [r3, #0]
7010adbc:	685b      	ldr	r3, [r3, #4]
7010adbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
7010adc2:	687b      	ldr	r3, [r7, #4]
7010adc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
7010adc6:	687b      	ldr	r3, [r7, #4]
7010adc8:	681b      	ldr	r3, [r3, #0]
7010adca:	430a      	orrs	r2, r1
7010adcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
7010adce:	687b      	ldr	r3, [r7, #4]
7010add0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7010add2:	f003 0304 	and.w	r3, r3, #4
7010add6:	2b00      	cmp	r3, #0
7010add8:	d00a      	beq.n	7010adf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
7010adda:	687b      	ldr	r3, [r7, #4]
7010addc:	681b      	ldr	r3, [r3, #0]
7010adde:	685b      	ldr	r3, [r3, #4]
7010ade0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
7010ade4:	687b      	ldr	r3, [r7, #4]
7010ade6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
7010ade8:	687b      	ldr	r3, [r7, #4]
7010adea:	681b      	ldr	r3, [r3, #0]
7010adec:	430a      	orrs	r2, r1
7010adee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
7010adf0:	687b      	ldr	r3, [r7, #4]
7010adf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7010adf4:	f003 0310 	and.w	r3, r3, #16
7010adf8:	2b00      	cmp	r3, #0
7010adfa:	d00a      	beq.n	7010ae12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
7010adfc:	687b      	ldr	r3, [r7, #4]
7010adfe:	681b      	ldr	r3, [r3, #0]
7010ae00:	689b      	ldr	r3, [r3, #8]
7010ae02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
7010ae06:	687b      	ldr	r3, [r7, #4]
7010ae08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
7010ae0a:	687b      	ldr	r3, [r7, #4]
7010ae0c:	681b      	ldr	r3, [r3, #0]
7010ae0e:	430a      	orrs	r2, r1
7010ae10:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
7010ae12:	687b      	ldr	r3, [r7, #4]
7010ae14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7010ae16:	f003 0320 	and.w	r3, r3, #32
7010ae1a:	2b00      	cmp	r3, #0
7010ae1c:	d00a      	beq.n	7010ae34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
7010ae1e:	687b      	ldr	r3, [r7, #4]
7010ae20:	681b      	ldr	r3, [r3, #0]
7010ae22:	689b      	ldr	r3, [r3, #8]
7010ae24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
7010ae28:	687b      	ldr	r3, [r7, #4]
7010ae2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
7010ae2c:	687b      	ldr	r3, [r7, #4]
7010ae2e:	681b      	ldr	r3, [r3, #0]
7010ae30:	430a      	orrs	r2, r1
7010ae32:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
7010ae34:	687b      	ldr	r3, [r7, #4]
7010ae36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7010ae38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
7010ae3c:	2b00      	cmp	r3, #0
7010ae3e:	d01a      	beq.n	7010ae76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
7010ae40:	687b      	ldr	r3, [r7, #4]
7010ae42:	681b      	ldr	r3, [r3, #0]
7010ae44:	685b      	ldr	r3, [r3, #4]
7010ae46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
7010ae4a:	687b      	ldr	r3, [r7, #4]
7010ae4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
7010ae4e:	687b      	ldr	r3, [r7, #4]
7010ae50:	681b      	ldr	r3, [r3, #0]
7010ae52:	430a      	orrs	r2, r1
7010ae54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
7010ae56:	687b      	ldr	r3, [r7, #4]
7010ae58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
7010ae5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
7010ae5e:	d10a      	bne.n	7010ae76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
7010ae60:	687b      	ldr	r3, [r7, #4]
7010ae62:	681b      	ldr	r3, [r3, #0]
7010ae64:	685b      	ldr	r3, [r3, #4]
7010ae66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
7010ae6a:	687b      	ldr	r3, [r7, #4]
7010ae6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
7010ae6e:	687b      	ldr	r3, [r7, #4]
7010ae70:	681b      	ldr	r3, [r3, #0]
7010ae72:	430a      	orrs	r2, r1
7010ae74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
7010ae76:	687b      	ldr	r3, [r7, #4]
7010ae78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7010ae7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7010ae7e:	2b00      	cmp	r3, #0
7010ae80:	d00a      	beq.n	7010ae98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
7010ae82:	687b      	ldr	r3, [r7, #4]
7010ae84:	681b      	ldr	r3, [r3, #0]
7010ae86:	685b      	ldr	r3, [r3, #4]
7010ae88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
7010ae8c:	687b      	ldr	r3, [r7, #4]
7010ae8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
7010ae90:	687b      	ldr	r3, [r7, #4]
7010ae92:	681b      	ldr	r3, [r3, #0]
7010ae94:	430a      	orrs	r2, r1
7010ae96:	605a      	str	r2, [r3, #4]
  }
}
7010ae98:	bf00      	nop
7010ae9a:	370c      	adds	r7, #12
7010ae9c:	46bd      	mov	sp, r7
7010ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
7010aea2:	4770      	bx	lr

7010aea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
7010aea4:	b580      	push	{r7, lr}
7010aea6:	b098      	sub	sp, #96	@ 0x60
7010aea8:	af02      	add	r7, sp, #8
7010aeaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
7010aeac:	687b      	ldr	r3, [r7, #4]
7010aeae:	2200      	movs	r2, #0
7010aeb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
7010aeb4:	f7f6 fdfe 	bl	70101ab4 <HAL_GetTick>
7010aeb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
7010aeba:	687b      	ldr	r3, [r7, #4]
7010aebc:	681b      	ldr	r3, [r3, #0]
7010aebe:	681b      	ldr	r3, [r3, #0]
7010aec0:	f003 0308 	and.w	r3, r3, #8
7010aec4:	2b08      	cmp	r3, #8
7010aec6:	d12f      	bne.n	7010af28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
7010aec8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
7010aecc:	9300      	str	r3, [sp, #0]
7010aece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
7010aed0:	2200      	movs	r2, #0
7010aed2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
7010aed6:	6878      	ldr	r0, [r7, #4]
7010aed8:	f000 f88e 	bl	7010aff8 <UART_WaitOnFlagUntilTimeout>
7010aedc:	4603      	mov	r3, r0
7010aede:	2b00      	cmp	r3, #0
7010aee0:	d022      	beq.n	7010af28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
7010aee2:	687b      	ldr	r3, [r7, #4]
7010aee4:	681b      	ldr	r3, [r3, #0]
7010aee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
7010aee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7010aeea:	e853 3f00 	ldrex	r3, [r3]
7010aeee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
7010aef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7010aef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
7010aef6:	653b      	str	r3, [r7, #80]	@ 0x50
7010aef8:	687b      	ldr	r3, [r7, #4]
7010aefa:	681b      	ldr	r3, [r3, #0]
7010aefc:	461a      	mov	r2, r3
7010aefe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
7010af00:	647b      	str	r3, [r7, #68]	@ 0x44
7010af02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
7010af04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
7010af06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
7010af08:	e841 2300 	strex	r3, r2, [r1]
7010af0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
7010af0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
7010af10:	2b00      	cmp	r3, #0
7010af12:	d1e6      	bne.n	7010aee2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
7010af14:	687b      	ldr	r3, [r7, #4]
7010af16:	2220      	movs	r2, #32
7010af18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
7010af1c:	687b      	ldr	r3, [r7, #4]
7010af1e:	2200      	movs	r2, #0
7010af20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
7010af24:	2303      	movs	r3, #3
7010af26:	e063      	b.n	7010aff0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
7010af28:	687b      	ldr	r3, [r7, #4]
7010af2a:	681b      	ldr	r3, [r3, #0]
7010af2c:	681b      	ldr	r3, [r3, #0]
7010af2e:	f003 0304 	and.w	r3, r3, #4
7010af32:	2b04      	cmp	r3, #4
7010af34:	d149      	bne.n	7010afca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
7010af36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
7010af3a:	9300      	str	r3, [sp, #0]
7010af3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
7010af3e:	2200      	movs	r2, #0
7010af40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
7010af44:	6878      	ldr	r0, [r7, #4]
7010af46:	f000 f857 	bl	7010aff8 <UART_WaitOnFlagUntilTimeout>
7010af4a:	4603      	mov	r3, r0
7010af4c:	2b00      	cmp	r3, #0
7010af4e:	d03c      	beq.n	7010afca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
7010af50:	687b      	ldr	r3, [r7, #4]
7010af52:	681b      	ldr	r3, [r3, #0]
7010af54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
7010af56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7010af58:	e853 3f00 	ldrex	r3, [r3]
7010af5c:	623b      	str	r3, [r7, #32]
   return(result);
7010af5e:	6a3b      	ldr	r3, [r7, #32]
7010af60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
7010af64:	64fb      	str	r3, [r7, #76]	@ 0x4c
7010af66:	687b      	ldr	r3, [r7, #4]
7010af68:	681b      	ldr	r3, [r3, #0]
7010af6a:	461a      	mov	r2, r3
7010af6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
7010af6e:	633b      	str	r3, [r7, #48]	@ 0x30
7010af70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
7010af72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
7010af74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
7010af76:	e841 2300 	strex	r3, r2, [r1]
7010af7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
7010af7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7010af7e:	2b00      	cmp	r3, #0
7010af80:	d1e6      	bne.n	7010af50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
7010af82:	687b      	ldr	r3, [r7, #4]
7010af84:	681b      	ldr	r3, [r3, #0]
7010af86:	3308      	adds	r3, #8
7010af88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
7010af8a:	693b      	ldr	r3, [r7, #16]
7010af8c:	e853 3f00 	ldrex	r3, [r3]
7010af90:	60fb      	str	r3, [r7, #12]
   return(result);
7010af92:	68fb      	ldr	r3, [r7, #12]
7010af94:	f023 0301 	bic.w	r3, r3, #1
7010af98:	64bb      	str	r3, [r7, #72]	@ 0x48
7010af9a:	687b      	ldr	r3, [r7, #4]
7010af9c:	681b      	ldr	r3, [r3, #0]
7010af9e:	3308      	adds	r3, #8
7010afa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
7010afa2:	61fa      	str	r2, [r7, #28]
7010afa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
7010afa6:	69b9      	ldr	r1, [r7, #24]
7010afa8:	69fa      	ldr	r2, [r7, #28]
7010afaa:	e841 2300 	strex	r3, r2, [r1]
7010afae:	617b      	str	r3, [r7, #20]
   return(result);
7010afb0:	697b      	ldr	r3, [r7, #20]
7010afb2:	2b00      	cmp	r3, #0
7010afb4:	d1e5      	bne.n	7010af82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
7010afb6:	687b      	ldr	r3, [r7, #4]
7010afb8:	2220      	movs	r2, #32
7010afba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
7010afbe:	687b      	ldr	r3, [r7, #4]
7010afc0:	2200      	movs	r2, #0
7010afc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
7010afc6:	2303      	movs	r3, #3
7010afc8:	e012      	b.n	7010aff0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
7010afca:	687b      	ldr	r3, [r7, #4]
7010afcc:	2220      	movs	r2, #32
7010afce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
7010afd2:	687b      	ldr	r3, [r7, #4]
7010afd4:	2220      	movs	r2, #32
7010afd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
7010afda:	687b      	ldr	r3, [r7, #4]
7010afdc:	2200      	movs	r2, #0
7010afde:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
7010afe0:	687b      	ldr	r3, [r7, #4]
7010afe2:	2200      	movs	r2, #0
7010afe4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
7010afe6:	687b      	ldr	r3, [r7, #4]
7010afe8:	2200      	movs	r2, #0
7010afea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
7010afee:	2300      	movs	r3, #0
}
7010aff0:	4618      	mov	r0, r3
7010aff2:	3758      	adds	r7, #88	@ 0x58
7010aff4:	46bd      	mov	sp, r7
7010aff6:	bd80      	pop	{r7, pc}

7010aff8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
7010aff8:	b580      	push	{r7, lr}
7010affa:	b084      	sub	sp, #16
7010affc:	af00      	add	r7, sp, #0
7010affe:	60f8      	str	r0, [r7, #12]
7010b000:	60b9      	str	r1, [r7, #8]
7010b002:	603b      	str	r3, [r7, #0]
7010b004:	4613      	mov	r3, r2
7010b006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
7010b008:	e04f      	b.n	7010b0aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
7010b00a:	69bb      	ldr	r3, [r7, #24]
7010b00c:	f1b3 3fff 	cmp.w	r3, #4294967295
7010b010:	d04b      	beq.n	7010b0aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
7010b012:	f7f6 fd4f 	bl	70101ab4 <HAL_GetTick>
7010b016:	4602      	mov	r2, r0
7010b018:	683b      	ldr	r3, [r7, #0]
7010b01a:	1ad3      	subs	r3, r2, r3
7010b01c:	69ba      	ldr	r2, [r7, #24]
7010b01e:	429a      	cmp	r2, r3
7010b020:	d302      	bcc.n	7010b028 <UART_WaitOnFlagUntilTimeout+0x30>
7010b022:	69bb      	ldr	r3, [r7, #24]
7010b024:	2b00      	cmp	r3, #0
7010b026:	d101      	bne.n	7010b02c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
7010b028:	2303      	movs	r3, #3
7010b02a:	e04e      	b.n	7010b0ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
7010b02c:	68fb      	ldr	r3, [r7, #12]
7010b02e:	681b      	ldr	r3, [r3, #0]
7010b030:	681b      	ldr	r3, [r3, #0]
7010b032:	f003 0304 	and.w	r3, r3, #4
7010b036:	2b00      	cmp	r3, #0
7010b038:	d037      	beq.n	7010b0aa <UART_WaitOnFlagUntilTimeout+0xb2>
7010b03a:	68bb      	ldr	r3, [r7, #8]
7010b03c:	2b80      	cmp	r3, #128	@ 0x80
7010b03e:	d034      	beq.n	7010b0aa <UART_WaitOnFlagUntilTimeout+0xb2>
7010b040:	68bb      	ldr	r3, [r7, #8]
7010b042:	2b40      	cmp	r3, #64	@ 0x40
7010b044:	d031      	beq.n	7010b0aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
7010b046:	68fb      	ldr	r3, [r7, #12]
7010b048:	681b      	ldr	r3, [r3, #0]
7010b04a:	69db      	ldr	r3, [r3, #28]
7010b04c:	f003 0308 	and.w	r3, r3, #8
7010b050:	2b08      	cmp	r3, #8
7010b052:	d110      	bne.n	7010b076 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
7010b054:	68fb      	ldr	r3, [r7, #12]
7010b056:	681b      	ldr	r3, [r3, #0]
7010b058:	2208      	movs	r2, #8
7010b05a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
7010b05c:	68f8      	ldr	r0, [r7, #12]
7010b05e:	f000 f838 	bl	7010b0d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
7010b062:	68fb      	ldr	r3, [r7, #12]
7010b064:	2208      	movs	r2, #8
7010b066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
7010b06a:	68fb      	ldr	r3, [r7, #12]
7010b06c:	2200      	movs	r2, #0
7010b06e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
7010b072:	2301      	movs	r3, #1
7010b074:	e029      	b.n	7010b0ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
7010b076:	68fb      	ldr	r3, [r7, #12]
7010b078:	681b      	ldr	r3, [r3, #0]
7010b07a:	69db      	ldr	r3, [r3, #28]
7010b07c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
7010b080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
7010b084:	d111      	bne.n	7010b0aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
7010b086:	68fb      	ldr	r3, [r7, #12]
7010b088:	681b      	ldr	r3, [r3, #0]
7010b08a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
7010b08e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
7010b090:	68f8      	ldr	r0, [r7, #12]
7010b092:	f000 f81e 	bl	7010b0d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
7010b096:	68fb      	ldr	r3, [r7, #12]
7010b098:	2220      	movs	r2, #32
7010b09a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
7010b09e:	68fb      	ldr	r3, [r7, #12]
7010b0a0:	2200      	movs	r2, #0
7010b0a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
7010b0a6:	2303      	movs	r3, #3
7010b0a8:	e00f      	b.n	7010b0ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
7010b0aa:	68fb      	ldr	r3, [r7, #12]
7010b0ac:	681b      	ldr	r3, [r3, #0]
7010b0ae:	69da      	ldr	r2, [r3, #28]
7010b0b0:	68bb      	ldr	r3, [r7, #8]
7010b0b2:	4013      	ands	r3, r2
7010b0b4:	68ba      	ldr	r2, [r7, #8]
7010b0b6:	429a      	cmp	r2, r3
7010b0b8:	bf0c      	ite	eq
7010b0ba:	2301      	moveq	r3, #1
7010b0bc:	2300      	movne	r3, #0
7010b0be:	b2db      	uxtb	r3, r3
7010b0c0:	461a      	mov	r2, r3
7010b0c2:	79fb      	ldrb	r3, [r7, #7]
7010b0c4:	429a      	cmp	r2, r3
7010b0c6:	d0a0      	beq.n	7010b00a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
7010b0c8:	2300      	movs	r3, #0
}
7010b0ca:	4618      	mov	r0, r3
7010b0cc:	3710      	adds	r7, #16
7010b0ce:	46bd      	mov	sp, r7
7010b0d0:	bd80      	pop	{r7, pc}

7010b0d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
7010b0d2:	b480      	push	{r7}
7010b0d4:	b095      	sub	sp, #84	@ 0x54
7010b0d6:	af00      	add	r7, sp, #0
7010b0d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
7010b0da:	687b      	ldr	r3, [r7, #4]
7010b0dc:	681b      	ldr	r3, [r3, #0]
7010b0de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
7010b0e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
7010b0e2:	e853 3f00 	ldrex	r3, [r3]
7010b0e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
7010b0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
7010b0ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
7010b0ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
7010b0f0:	687b      	ldr	r3, [r7, #4]
7010b0f2:	681b      	ldr	r3, [r3, #0]
7010b0f4:	461a      	mov	r2, r3
7010b0f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
7010b0f8:	643b      	str	r3, [r7, #64]	@ 0x40
7010b0fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
7010b0fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
7010b0fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
7010b100:	e841 2300 	strex	r3, r2, [r1]
7010b104:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
7010b106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
7010b108:	2b00      	cmp	r3, #0
7010b10a:	d1e6      	bne.n	7010b0da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
7010b10c:	687b      	ldr	r3, [r7, #4]
7010b10e:	681b      	ldr	r3, [r3, #0]
7010b110:	3308      	adds	r3, #8
7010b112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
7010b114:	6a3b      	ldr	r3, [r7, #32]
7010b116:	e853 3f00 	ldrex	r3, [r3]
7010b11a:	61fb      	str	r3, [r7, #28]
   return(result);
7010b11c:	69fb      	ldr	r3, [r7, #28]
7010b11e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
7010b122:	f023 0301 	bic.w	r3, r3, #1
7010b126:	64bb      	str	r3, [r7, #72]	@ 0x48
7010b128:	687b      	ldr	r3, [r7, #4]
7010b12a:	681b      	ldr	r3, [r3, #0]
7010b12c:	3308      	adds	r3, #8
7010b12e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
7010b130:	62fa      	str	r2, [r7, #44]	@ 0x2c
7010b132:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
7010b134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
7010b136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
7010b138:	e841 2300 	strex	r3, r2, [r1]
7010b13c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
7010b13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7010b140:	2b00      	cmp	r3, #0
7010b142:	d1e3      	bne.n	7010b10c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
7010b144:	687b      	ldr	r3, [r7, #4]
7010b146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
7010b148:	2b01      	cmp	r3, #1
7010b14a:	d118      	bne.n	7010b17e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
7010b14c:	687b      	ldr	r3, [r7, #4]
7010b14e:	681b      	ldr	r3, [r3, #0]
7010b150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
7010b152:	68fb      	ldr	r3, [r7, #12]
7010b154:	e853 3f00 	ldrex	r3, [r3]
7010b158:	60bb      	str	r3, [r7, #8]
   return(result);
7010b15a:	68bb      	ldr	r3, [r7, #8]
7010b15c:	f023 0310 	bic.w	r3, r3, #16
7010b160:	647b      	str	r3, [r7, #68]	@ 0x44
7010b162:	687b      	ldr	r3, [r7, #4]
7010b164:	681b      	ldr	r3, [r3, #0]
7010b166:	461a      	mov	r2, r3
7010b168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
7010b16a:	61bb      	str	r3, [r7, #24]
7010b16c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
7010b16e:	6979      	ldr	r1, [r7, #20]
7010b170:	69ba      	ldr	r2, [r7, #24]
7010b172:	e841 2300 	strex	r3, r2, [r1]
7010b176:	613b      	str	r3, [r7, #16]
   return(result);
7010b178:	693b      	ldr	r3, [r7, #16]
7010b17a:	2b00      	cmp	r3, #0
7010b17c:	d1e6      	bne.n	7010b14c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
7010b17e:	687b      	ldr	r3, [r7, #4]
7010b180:	2220      	movs	r2, #32
7010b182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
7010b186:	687b      	ldr	r3, [r7, #4]
7010b188:	2200      	movs	r2, #0
7010b18a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
7010b18c:	687b      	ldr	r3, [r7, #4]
7010b18e:	2200      	movs	r2, #0
7010b190:	675a      	str	r2, [r3, #116]	@ 0x74
}
7010b192:	bf00      	nop
7010b194:	3754      	adds	r7, #84	@ 0x54
7010b196:	46bd      	mov	sp, r7
7010b198:	f85d 7b04 	ldr.w	r7, [sp], #4
7010b19c:	4770      	bx	lr

7010b19e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
7010b19e:	b480      	push	{r7}
7010b1a0:	b085      	sub	sp, #20
7010b1a2:	af00      	add	r7, sp, #0
7010b1a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
7010b1a6:	687b      	ldr	r3, [r7, #4]
7010b1a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
7010b1ac:	2b01      	cmp	r3, #1
7010b1ae:	d101      	bne.n	7010b1b4 <HAL_UARTEx_DisableFifoMode+0x16>
7010b1b0:	2302      	movs	r3, #2
7010b1b2:	e027      	b.n	7010b204 <HAL_UARTEx_DisableFifoMode+0x66>
7010b1b4:	687b      	ldr	r3, [r7, #4]
7010b1b6:	2201      	movs	r2, #1
7010b1b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
7010b1bc:	687b      	ldr	r3, [r7, #4]
7010b1be:	2224      	movs	r2, #36	@ 0x24
7010b1c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
7010b1c4:	687b      	ldr	r3, [r7, #4]
7010b1c6:	681b      	ldr	r3, [r3, #0]
7010b1c8:	681b      	ldr	r3, [r3, #0]
7010b1ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
7010b1cc:	687b      	ldr	r3, [r7, #4]
7010b1ce:	681b      	ldr	r3, [r3, #0]
7010b1d0:	681a      	ldr	r2, [r3, #0]
7010b1d2:	687b      	ldr	r3, [r7, #4]
7010b1d4:	681b      	ldr	r3, [r3, #0]
7010b1d6:	f022 0201 	bic.w	r2, r2, #1
7010b1da:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
7010b1dc:	68fb      	ldr	r3, [r7, #12]
7010b1de:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
7010b1e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
7010b1e4:	687b      	ldr	r3, [r7, #4]
7010b1e6:	2200      	movs	r2, #0
7010b1e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
7010b1ea:	687b      	ldr	r3, [r7, #4]
7010b1ec:	681b      	ldr	r3, [r3, #0]
7010b1ee:	68fa      	ldr	r2, [r7, #12]
7010b1f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
7010b1f2:	687b      	ldr	r3, [r7, #4]
7010b1f4:	2220      	movs	r2, #32
7010b1f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
7010b1fa:	687b      	ldr	r3, [r7, #4]
7010b1fc:	2200      	movs	r2, #0
7010b1fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
7010b202:	2300      	movs	r3, #0
}
7010b204:	4618      	mov	r0, r3
7010b206:	3714      	adds	r7, #20
7010b208:	46bd      	mov	sp, r7
7010b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
7010b20e:	4770      	bx	lr

7010b210 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
7010b210:	b580      	push	{r7, lr}
7010b212:	b084      	sub	sp, #16
7010b214:	af00      	add	r7, sp, #0
7010b216:	6078      	str	r0, [r7, #4]
7010b218:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
7010b21a:	687b      	ldr	r3, [r7, #4]
7010b21c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
7010b220:	2b01      	cmp	r3, #1
7010b222:	d101      	bne.n	7010b228 <HAL_UARTEx_SetTxFifoThreshold+0x18>
7010b224:	2302      	movs	r3, #2
7010b226:	e02d      	b.n	7010b284 <HAL_UARTEx_SetTxFifoThreshold+0x74>
7010b228:	687b      	ldr	r3, [r7, #4]
7010b22a:	2201      	movs	r2, #1
7010b22c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
7010b230:	687b      	ldr	r3, [r7, #4]
7010b232:	2224      	movs	r2, #36	@ 0x24
7010b234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
7010b238:	687b      	ldr	r3, [r7, #4]
7010b23a:	681b      	ldr	r3, [r3, #0]
7010b23c:	681b      	ldr	r3, [r3, #0]
7010b23e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
7010b240:	687b      	ldr	r3, [r7, #4]
7010b242:	681b      	ldr	r3, [r3, #0]
7010b244:	681a      	ldr	r2, [r3, #0]
7010b246:	687b      	ldr	r3, [r7, #4]
7010b248:	681b      	ldr	r3, [r3, #0]
7010b24a:	f022 0201 	bic.w	r2, r2, #1
7010b24e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
7010b250:	687b      	ldr	r3, [r7, #4]
7010b252:	681b      	ldr	r3, [r3, #0]
7010b254:	689b      	ldr	r3, [r3, #8]
7010b256:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
7010b25a:	687b      	ldr	r3, [r7, #4]
7010b25c:	681b      	ldr	r3, [r3, #0]
7010b25e:	683a      	ldr	r2, [r7, #0]
7010b260:	430a      	orrs	r2, r1
7010b262:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
7010b264:	6878      	ldr	r0, [r7, #4]
7010b266:	f000 f84f 	bl	7010b308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
7010b26a:	687b      	ldr	r3, [r7, #4]
7010b26c:	681b      	ldr	r3, [r3, #0]
7010b26e:	68fa      	ldr	r2, [r7, #12]
7010b270:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
7010b272:	687b      	ldr	r3, [r7, #4]
7010b274:	2220      	movs	r2, #32
7010b276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
7010b27a:	687b      	ldr	r3, [r7, #4]
7010b27c:	2200      	movs	r2, #0
7010b27e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
7010b282:	2300      	movs	r3, #0
}
7010b284:	4618      	mov	r0, r3
7010b286:	3710      	adds	r7, #16
7010b288:	46bd      	mov	sp, r7
7010b28a:	bd80      	pop	{r7, pc}

7010b28c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
7010b28c:	b580      	push	{r7, lr}
7010b28e:	b084      	sub	sp, #16
7010b290:	af00      	add	r7, sp, #0
7010b292:	6078      	str	r0, [r7, #4]
7010b294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
7010b296:	687b      	ldr	r3, [r7, #4]
7010b298:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
7010b29c:	2b01      	cmp	r3, #1
7010b29e:	d101      	bne.n	7010b2a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
7010b2a0:	2302      	movs	r3, #2
7010b2a2:	e02d      	b.n	7010b300 <HAL_UARTEx_SetRxFifoThreshold+0x74>
7010b2a4:	687b      	ldr	r3, [r7, #4]
7010b2a6:	2201      	movs	r2, #1
7010b2a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
7010b2ac:	687b      	ldr	r3, [r7, #4]
7010b2ae:	2224      	movs	r2, #36	@ 0x24
7010b2b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
7010b2b4:	687b      	ldr	r3, [r7, #4]
7010b2b6:	681b      	ldr	r3, [r3, #0]
7010b2b8:	681b      	ldr	r3, [r3, #0]
7010b2ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
7010b2bc:	687b      	ldr	r3, [r7, #4]
7010b2be:	681b      	ldr	r3, [r3, #0]
7010b2c0:	681a      	ldr	r2, [r3, #0]
7010b2c2:	687b      	ldr	r3, [r7, #4]
7010b2c4:	681b      	ldr	r3, [r3, #0]
7010b2c6:	f022 0201 	bic.w	r2, r2, #1
7010b2ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
7010b2cc:	687b      	ldr	r3, [r7, #4]
7010b2ce:	681b      	ldr	r3, [r3, #0]
7010b2d0:	689b      	ldr	r3, [r3, #8]
7010b2d2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
7010b2d6:	687b      	ldr	r3, [r7, #4]
7010b2d8:	681b      	ldr	r3, [r3, #0]
7010b2da:	683a      	ldr	r2, [r7, #0]
7010b2dc:	430a      	orrs	r2, r1
7010b2de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
7010b2e0:	6878      	ldr	r0, [r7, #4]
7010b2e2:	f000 f811 	bl	7010b308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
7010b2e6:	687b      	ldr	r3, [r7, #4]
7010b2e8:	681b      	ldr	r3, [r3, #0]
7010b2ea:	68fa      	ldr	r2, [r7, #12]
7010b2ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
7010b2ee:	687b      	ldr	r3, [r7, #4]
7010b2f0:	2220      	movs	r2, #32
7010b2f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
7010b2f6:	687b      	ldr	r3, [r7, #4]
7010b2f8:	2200      	movs	r2, #0
7010b2fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
7010b2fe:	2300      	movs	r3, #0
}
7010b300:	4618      	mov	r0, r3
7010b302:	3710      	adds	r7, #16
7010b304:	46bd      	mov	sp, r7
7010b306:	bd80      	pop	{r7, pc}

7010b308 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
7010b308:	b480      	push	{r7}
7010b30a:	b085      	sub	sp, #20
7010b30c:	af00      	add	r7, sp, #0
7010b30e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
7010b310:	687b      	ldr	r3, [r7, #4]
7010b312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
7010b314:	2b00      	cmp	r3, #0
7010b316:	d108      	bne.n	7010b32a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
7010b318:	687b      	ldr	r3, [r7, #4]
7010b31a:	2201      	movs	r2, #1
7010b31c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
7010b320:	687b      	ldr	r3, [r7, #4]
7010b322:	2201      	movs	r2, #1
7010b324:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
7010b328:	e031      	b.n	7010b38e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
7010b32a:	2310      	movs	r3, #16
7010b32c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
7010b32e:	2310      	movs	r3, #16
7010b330:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
7010b332:	687b      	ldr	r3, [r7, #4]
7010b334:	681b      	ldr	r3, [r3, #0]
7010b336:	689b      	ldr	r3, [r3, #8]
7010b338:	0e5b      	lsrs	r3, r3, #25
7010b33a:	b2db      	uxtb	r3, r3
7010b33c:	f003 0307 	and.w	r3, r3, #7
7010b340:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
7010b342:	687b      	ldr	r3, [r7, #4]
7010b344:	681b      	ldr	r3, [r3, #0]
7010b346:	689b      	ldr	r3, [r3, #8]
7010b348:	0f5b      	lsrs	r3, r3, #29
7010b34a:	b2db      	uxtb	r3, r3
7010b34c:	f003 0307 	and.w	r3, r3, #7
7010b350:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
7010b352:	7bbb      	ldrb	r3, [r7, #14]
7010b354:	7b3a      	ldrb	r2, [r7, #12]
7010b356:	4911      	ldr	r1, [pc, #68]	@ (7010b39c <UARTEx_SetNbDataToProcess+0x94>)
7010b358:	5c8a      	ldrb	r2, [r1, r2]
7010b35a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
7010b35e:	7b3a      	ldrb	r2, [r7, #12]
7010b360:	490f      	ldr	r1, [pc, #60]	@ (7010b3a0 <UARTEx_SetNbDataToProcess+0x98>)
7010b362:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
7010b364:	fb93 f3f2 	sdiv	r3, r3, r2
7010b368:	b29a      	uxth	r2, r3
7010b36a:	687b      	ldr	r3, [r7, #4]
7010b36c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
7010b370:	7bfb      	ldrb	r3, [r7, #15]
7010b372:	7b7a      	ldrb	r2, [r7, #13]
7010b374:	4909      	ldr	r1, [pc, #36]	@ (7010b39c <UARTEx_SetNbDataToProcess+0x94>)
7010b376:	5c8a      	ldrb	r2, [r1, r2]
7010b378:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
7010b37c:	7b7a      	ldrb	r2, [r7, #13]
7010b37e:	4908      	ldr	r1, [pc, #32]	@ (7010b3a0 <UARTEx_SetNbDataToProcess+0x98>)
7010b380:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
7010b382:	fb93 f3f2 	sdiv	r3, r3, r2
7010b386:	b29a      	uxth	r2, r3
7010b388:	687b      	ldr	r3, [r7, #4]
7010b38a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
7010b38e:	bf00      	nop
7010b390:	3714      	adds	r7, #20
7010b392:	46bd      	mov	sp, r7
7010b394:	f85d 7b04 	ldr.w	r7, [sp], #4
7010b398:	4770      	bx	lr
7010b39a:	bf00      	nop
7010b39c:	7010bd44 	.word	0x7010bd44
7010b3a0:	7010bd4c 	.word	0x7010bd4c

7010b3a4 <std>:
7010b3a4:	2300      	movs	r3, #0
7010b3a6:	b510      	push	{r4, lr}
7010b3a8:	4604      	mov	r4, r0
7010b3aa:	6083      	str	r3, [r0, #8]
7010b3ac:	8181      	strh	r1, [r0, #12]
7010b3ae:	4619      	mov	r1, r3
7010b3b0:	6643      	str	r3, [r0, #100]	@ 0x64
7010b3b2:	81c2      	strh	r2, [r0, #14]
7010b3b4:	2208      	movs	r2, #8
7010b3b6:	6183      	str	r3, [r0, #24]
7010b3b8:	e9c0 3300 	strd	r3, r3, [r0]
7010b3bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
7010b3c0:	305c      	adds	r0, #92	@ 0x5c
7010b3c2:	f000 f9e7 	bl	7010b794 <memset>
7010b3c6:	4b0d      	ldr	r3, [pc, #52]	@ (7010b3fc <std+0x58>)
7010b3c8:	6224      	str	r4, [r4, #32]
7010b3ca:	6263      	str	r3, [r4, #36]	@ 0x24
7010b3cc:	4b0c      	ldr	r3, [pc, #48]	@ (7010b400 <std+0x5c>)
7010b3ce:	62a3      	str	r3, [r4, #40]	@ 0x28
7010b3d0:	4b0c      	ldr	r3, [pc, #48]	@ (7010b404 <std+0x60>)
7010b3d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
7010b3d4:	4b0c      	ldr	r3, [pc, #48]	@ (7010b408 <std+0x64>)
7010b3d6:	6323      	str	r3, [r4, #48]	@ 0x30
7010b3d8:	4b0c      	ldr	r3, [pc, #48]	@ (7010b40c <std+0x68>)
7010b3da:	429c      	cmp	r4, r3
7010b3dc:	d006      	beq.n	7010b3ec <std+0x48>
7010b3de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
7010b3e2:	4294      	cmp	r4, r2
7010b3e4:	d002      	beq.n	7010b3ec <std+0x48>
7010b3e6:	33d0      	adds	r3, #208	@ 0xd0
7010b3e8:	429c      	cmp	r4, r3
7010b3ea:	d105      	bne.n	7010b3f8 <std+0x54>
7010b3ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
7010b3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
7010b3f4:	f000 ba46 	b.w	7010b884 <__retarget_lock_init_recursive>
7010b3f8:	bd10      	pop	{r4, pc}
7010b3fa:	bf00      	nop
7010b3fc:	7010b5e5 	.word	0x7010b5e5
7010b400:	7010b607 	.word	0x7010b607
7010b404:	7010b63f 	.word	0x7010b63f
7010b408:	7010b663 	.word	0x7010b663
7010b40c:	340001c0 	.word	0x340001c0

7010b410 <stdio_exit_handler>:
7010b410:	4a02      	ldr	r2, [pc, #8]	@ (7010b41c <stdio_exit_handler+0xc>)
7010b412:	4903      	ldr	r1, [pc, #12]	@ (7010b420 <stdio_exit_handler+0x10>)
7010b414:	4803      	ldr	r0, [pc, #12]	@ (7010b424 <stdio_exit_handler+0x14>)
7010b416:	f000 b869 	b.w	7010b4ec <_fwalk_sglue>
7010b41a:	bf00      	nop
7010b41c:	3400000c 	.word	0x3400000c
7010b420:	7010bb85 	.word	0x7010bb85
7010b424:	3400001c 	.word	0x3400001c

7010b428 <cleanup_stdio>:
7010b428:	6841      	ldr	r1, [r0, #4]
7010b42a:	4b0c      	ldr	r3, [pc, #48]	@ (7010b45c <cleanup_stdio+0x34>)
7010b42c:	4299      	cmp	r1, r3
7010b42e:	b510      	push	{r4, lr}
7010b430:	4604      	mov	r4, r0
7010b432:	d001      	beq.n	7010b438 <cleanup_stdio+0x10>
7010b434:	f000 fba6 	bl	7010bb84 <_fflush_r>
7010b438:	68a1      	ldr	r1, [r4, #8]
7010b43a:	4b09      	ldr	r3, [pc, #36]	@ (7010b460 <cleanup_stdio+0x38>)
7010b43c:	4299      	cmp	r1, r3
7010b43e:	d002      	beq.n	7010b446 <cleanup_stdio+0x1e>
7010b440:	4620      	mov	r0, r4
7010b442:	f000 fb9f 	bl	7010bb84 <_fflush_r>
7010b446:	68e1      	ldr	r1, [r4, #12]
7010b448:	4b06      	ldr	r3, [pc, #24]	@ (7010b464 <cleanup_stdio+0x3c>)
7010b44a:	4299      	cmp	r1, r3
7010b44c:	d004      	beq.n	7010b458 <cleanup_stdio+0x30>
7010b44e:	4620      	mov	r0, r4
7010b450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
7010b454:	f000 bb96 	b.w	7010bb84 <_fflush_r>
7010b458:	bd10      	pop	{r4, pc}
7010b45a:	bf00      	nop
7010b45c:	340001c0 	.word	0x340001c0
7010b460:	34000228 	.word	0x34000228
7010b464:	34000290 	.word	0x34000290

7010b468 <global_stdio_init.part.0>:
7010b468:	b510      	push	{r4, lr}
7010b46a:	4b0b      	ldr	r3, [pc, #44]	@ (7010b498 <global_stdio_init.part.0+0x30>)
7010b46c:	2104      	movs	r1, #4
7010b46e:	4c0b      	ldr	r4, [pc, #44]	@ (7010b49c <global_stdio_init.part.0+0x34>)
7010b470:	4a0b      	ldr	r2, [pc, #44]	@ (7010b4a0 <global_stdio_init.part.0+0x38>)
7010b472:	4620      	mov	r0, r4
7010b474:	601a      	str	r2, [r3, #0]
7010b476:	2200      	movs	r2, #0
7010b478:	f7ff ff94 	bl	7010b3a4 <std>
7010b47c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
7010b480:	2201      	movs	r2, #1
7010b482:	2109      	movs	r1, #9
7010b484:	f7ff ff8e 	bl	7010b3a4 <std>
7010b488:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
7010b48c:	2202      	movs	r2, #2
7010b48e:	2112      	movs	r1, #18
7010b490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
7010b494:	f7ff bf86 	b.w	7010b3a4 <std>
7010b498:	340002f8 	.word	0x340002f8
7010b49c:	340001c0 	.word	0x340001c0
7010b4a0:	7010b411 	.word	0x7010b411

7010b4a4 <__sfp_lock_acquire>:
7010b4a4:	4801      	ldr	r0, [pc, #4]	@ (7010b4ac <__sfp_lock_acquire+0x8>)
7010b4a6:	f000 b9ee 	b.w	7010b886 <__retarget_lock_acquire_recursive>
7010b4aa:	bf00      	nop
7010b4ac:	34000301 	.word	0x34000301

7010b4b0 <__sfp_lock_release>:
7010b4b0:	4801      	ldr	r0, [pc, #4]	@ (7010b4b8 <__sfp_lock_release+0x8>)
7010b4b2:	f000 b9e9 	b.w	7010b888 <__retarget_lock_release_recursive>
7010b4b6:	bf00      	nop
7010b4b8:	34000301 	.word	0x34000301

7010b4bc <__sinit>:
7010b4bc:	b510      	push	{r4, lr}
7010b4be:	4604      	mov	r4, r0
7010b4c0:	f7ff fff0 	bl	7010b4a4 <__sfp_lock_acquire>
7010b4c4:	6a23      	ldr	r3, [r4, #32]
7010b4c6:	b11b      	cbz	r3, 7010b4d0 <__sinit+0x14>
7010b4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
7010b4cc:	f7ff bff0 	b.w	7010b4b0 <__sfp_lock_release>
7010b4d0:	4b04      	ldr	r3, [pc, #16]	@ (7010b4e4 <__sinit+0x28>)
7010b4d2:	6223      	str	r3, [r4, #32]
7010b4d4:	4b04      	ldr	r3, [pc, #16]	@ (7010b4e8 <__sinit+0x2c>)
7010b4d6:	681b      	ldr	r3, [r3, #0]
7010b4d8:	2b00      	cmp	r3, #0
7010b4da:	d1f5      	bne.n	7010b4c8 <__sinit+0xc>
7010b4dc:	f7ff ffc4 	bl	7010b468 <global_stdio_init.part.0>
7010b4e0:	e7f2      	b.n	7010b4c8 <__sinit+0xc>
7010b4e2:	bf00      	nop
7010b4e4:	7010b429 	.word	0x7010b429
7010b4e8:	340002f8 	.word	0x340002f8

7010b4ec <_fwalk_sglue>:
7010b4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
7010b4f0:	4607      	mov	r7, r0
7010b4f2:	4688      	mov	r8, r1
7010b4f4:	4614      	mov	r4, r2
7010b4f6:	2600      	movs	r6, #0
7010b4f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
7010b4fc:	f1b9 0901 	subs.w	r9, r9, #1
7010b500:	d505      	bpl.n	7010b50e <_fwalk_sglue+0x22>
7010b502:	6824      	ldr	r4, [r4, #0]
7010b504:	2c00      	cmp	r4, #0
7010b506:	d1f7      	bne.n	7010b4f8 <_fwalk_sglue+0xc>
7010b508:	4630      	mov	r0, r6
7010b50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
7010b50e:	89ab      	ldrh	r3, [r5, #12]
7010b510:	2b01      	cmp	r3, #1
7010b512:	d907      	bls.n	7010b524 <_fwalk_sglue+0x38>
7010b514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
7010b518:	3301      	adds	r3, #1
7010b51a:	d003      	beq.n	7010b524 <_fwalk_sglue+0x38>
7010b51c:	4629      	mov	r1, r5
7010b51e:	4638      	mov	r0, r7
7010b520:	47c0      	blx	r8
7010b522:	4306      	orrs	r6, r0
7010b524:	3568      	adds	r5, #104	@ 0x68
7010b526:	e7e9      	b.n	7010b4fc <_fwalk_sglue+0x10>

7010b528 <_puts_r>:
7010b528:	6a03      	ldr	r3, [r0, #32]
7010b52a:	b570      	push	{r4, r5, r6, lr}
7010b52c:	4605      	mov	r5, r0
7010b52e:	460e      	mov	r6, r1
7010b530:	6884      	ldr	r4, [r0, #8]
7010b532:	b90b      	cbnz	r3, 7010b538 <_puts_r+0x10>
7010b534:	f7ff ffc2 	bl	7010b4bc <__sinit>
7010b538:	6e63      	ldr	r3, [r4, #100]	@ 0x64
7010b53a:	07db      	lsls	r3, r3, #31
7010b53c:	d405      	bmi.n	7010b54a <_puts_r+0x22>
7010b53e:	89a3      	ldrh	r3, [r4, #12]
7010b540:	0598      	lsls	r0, r3, #22
7010b542:	d402      	bmi.n	7010b54a <_puts_r+0x22>
7010b544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
7010b546:	f000 f99e 	bl	7010b886 <__retarget_lock_acquire_recursive>
7010b54a:	89a3      	ldrh	r3, [r4, #12]
7010b54c:	0719      	lsls	r1, r3, #28
7010b54e:	d502      	bpl.n	7010b556 <_puts_r+0x2e>
7010b550:	6923      	ldr	r3, [r4, #16]
7010b552:	2b00      	cmp	r3, #0
7010b554:	d135      	bne.n	7010b5c2 <_puts_r+0x9a>
7010b556:	4621      	mov	r1, r4
7010b558:	4628      	mov	r0, r5
7010b55a:	f000 f8c5 	bl	7010b6e8 <__swsetup_r>
7010b55e:	b380      	cbz	r0, 7010b5c2 <_puts_r+0x9a>
7010b560:	f04f 35ff 	mov.w	r5, #4294967295
7010b564:	6e63      	ldr	r3, [r4, #100]	@ 0x64
7010b566:	07da      	lsls	r2, r3, #31
7010b568:	d405      	bmi.n	7010b576 <_puts_r+0x4e>
7010b56a:	89a3      	ldrh	r3, [r4, #12]
7010b56c:	059b      	lsls	r3, r3, #22
7010b56e:	d402      	bmi.n	7010b576 <_puts_r+0x4e>
7010b570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
7010b572:	f000 f989 	bl	7010b888 <__retarget_lock_release_recursive>
7010b576:	4628      	mov	r0, r5
7010b578:	bd70      	pop	{r4, r5, r6, pc}
7010b57a:	2b00      	cmp	r3, #0
7010b57c:	da04      	bge.n	7010b588 <_puts_r+0x60>
7010b57e:	69a2      	ldr	r2, [r4, #24]
7010b580:	429a      	cmp	r2, r3
7010b582:	dc17      	bgt.n	7010b5b4 <_puts_r+0x8c>
7010b584:	290a      	cmp	r1, #10
7010b586:	d015      	beq.n	7010b5b4 <_puts_r+0x8c>
7010b588:	6823      	ldr	r3, [r4, #0]
7010b58a:	1c5a      	adds	r2, r3, #1
7010b58c:	6022      	str	r2, [r4, #0]
7010b58e:	7019      	strb	r1, [r3, #0]
7010b590:	68a3      	ldr	r3, [r4, #8]
7010b592:	f816 1f01 	ldrb.w	r1, [r6, #1]!
7010b596:	3b01      	subs	r3, #1
7010b598:	60a3      	str	r3, [r4, #8]
7010b59a:	2900      	cmp	r1, #0
7010b59c:	d1ed      	bne.n	7010b57a <_puts_r+0x52>
7010b59e:	2b00      	cmp	r3, #0
7010b5a0:	da11      	bge.n	7010b5c6 <_puts_r+0x9e>
7010b5a2:	4622      	mov	r2, r4
7010b5a4:	210a      	movs	r1, #10
7010b5a6:	4628      	mov	r0, r5
7010b5a8:	f000 f85f 	bl	7010b66a <__swbuf_r>
7010b5ac:	3001      	adds	r0, #1
7010b5ae:	d0d7      	beq.n	7010b560 <_puts_r+0x38>
7010b5b0:	250a      	movs	r5, #10
7010b5b2:	e7d7      	b.n	7010b564 <_puts_r+0x3c>
7010b5b4:	4622      	mov	r2, r4
7010b5b6:	4628      	mov	r0, r5
7010b5b8:	f000 f857 	bl	7010b66a <__swbuf_r>
7010b5bc:	3001      	adds	r0, #1
7010b5be:	d1e7      	bne.n	7010b590 <_puts_r+0x68>
7010b5c0:	e7ce      	b.n	7010b560 <_puts_r+0x38>
7010b5c2:	3e01      	subs	r6, #1
7010b5c4:	e7e4      	b.n	7010b590 <_puts_r+0x68>
7010b5c6:	6823      	ldr	r3, [r4, #0]
7010b5c8:	1c5a      	adds	r2, r3, #1
7010b5ca:	6022      	str	r2, [r4, #0]
7010b5cc:	220a      	movs	r2, #10
7010b5ce:	701a      	strb	r2, [r3, #0]
7010b5d0:	e7ee      	b.n	7010b5b0 <_puts_r+0x88>
	...

7010b5d4 <puts>:
7010b5d4:	4b02      	ldr	r3, [pc, #8]	@ (7010b5e0 <puts+0xc>)
7010b5d6:	4601      	mov	r1, r0
7010b5d8:	6818      	ldr	r0, [r3, #0]
7010b5da:	f7ff bfa5 	b.w	7010b528 <_puts_r>
7010b5de:	bf00      	nop
7010b5e0:	34000018 	.word	0x34000018

7010b5e4 <__sread>:
7010b5e4:	b510      	push	{r4, lr}
7010b5e6:	460c      	mov	r4, r1
7010b5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
7010b5ec:	f000 f8fc 	bl	7010b7e8 <_read_r>
7010b5f0:	2800      	cmp	r0, #0
7010b5f2:	bfab      	itete	ge
7010b5f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
7010b5f6:	89a3      	ldrhlt	r3, [r4, #12]
7010b5f8:	181b      	addge	r3, r3, r0
7010b5fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
7010b5fe:	bfac      	ite	ge
7010b600:	6563      	strge	r3, [r4, #84]	@ 0x54
7010b602:	81a3      	strhlt	r3, [r4, #12]
7010b604:	bd10      	pop	{r4, pc}

7010b606 <__swrite>:
7010b606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
7010b60a:	461f      	mov	r7, r3
7010b60c:	898b      	ldrh	r3, [r1, #12]
7010b60e:	4605      	mov	r5, r0
7010b610:	460c      	mov	r4, r1
7010b612:	05db      	lsls	r3, r3, #23
7010b614:	4616      	mov	r6, r2
7010b616:	d505      	bpl.n	7010b624 <__swrite+0x1e>
7010b618:	2302      	movs	r3, #2
7010b61a:	2200      	movs	r2, #0
7010b61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
7010b620:	f000 f8d0 	bl	7010b7c4 <_lseek_r>
7010b624:	89a3      	ldrh	r3, [r4, #12]
7010b626:	4632      	mov	r2, r6
7010b628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
7010b62c:	4628      	mov	r0, r5
7010b62e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
7010b632:	81a3      	strh	r3, [r4, #12]
7010b634:	463b      	mov	r3, r7
7010b636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
7010b63a:	f000 b8e7 	b.w	7010b80c <_write_r>

7010b63e <__sseek>:
7010b63e:	b510      	push	{r4, lr}
7010b640:	460c      	mov	r4, r1
7010b642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
7010b646:	f000 f8bd 	bl	7010b7c4 <_lseek_r>
7010b64a:	1c43      	adds	r3, r0, #1
7010b64c:	89a3      	ldrh	r3, [r4, #12]
7010b64e:	bf15      	itete	ne
7010b650:	6560      	strne	r0, [r4, #84]	@ 0x54
7010b652:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
7010b656:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
7010b65a:	81a3      	strheq	r3, [r4, #12]
7010b65c:	bf18      	it	ne
7010b65e:	81a3      	strhne	r3, [r4, #12]
7010b660:	bd10      	pop	{r4, pc}

7010b662 <__sclose>:
7010b662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
7010b666:	f000 b89d 	b.w	7010b7a4 <_close_r>

7010b66a <__swbuf_r>:
7010b66a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
7010b66c:	460e      	mov	r6, r1
7010b66e:	4614      	mov	r4, r2
7010b670:	4605      	mov	r5, r0
7010b672:	b118      	cbz	r0, 7010b67c <__swbuf_r+0x12>
7010b674:	6a03      	ldr	r3, [r0, #32]
7010b676:	b90b      	cbnz	r3, 7010b67c <__swbuf_r+0x12>
7010b678:	f7ff ff20 	bl	7010b4bc <__sinit>
7010b67c:	69a3      	ldr	r3, [r4, #24]
7010b67e:	60a3      	str	r3, [r4, #8]
7010b680:	89a3      	ldrh	r3, [r4, #12]
7010b682:	071a      	lsls	r2, r3, #28
7010b684:	d501      	bpl.n	7010b68a <__swbuf_r+0x20>
7010b686:	6923      	ldr	r3, [r4, #16]
7010b688:	b943      	cbnz	r3, 7010b69c <__swbuf_r+0x32>
7010b68a:	4621      	mov	r1, r4
7010b68c:	4628      	mov	r0, r5
7010b68e:	f000 f82b 	bl	7010b6e8 <__swsetup_r>
7010b692:	b118      	cbz	r0, 7010b69c <__swbuf_r+0x32>
7010b694:	f04f 37ff 	mov.w	r7, #4294967295
7010b698:	4638      	mov	r0, r7
7010b69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
7010b69c:	6823      	ldr	r3, [r4, #0]
7010b69e:	b2f6      	uxtb	r6, r6
7010b6a0:	6922      	ldr	r2, [r4, #16]
7010b6a2:	4637      	mov	r7, r6
7010b6a4:	1a98      	subs	r0, r3, r2
7010b6a6:	6963      	ldr	r3, [r4, #20]
7010b6a8:	4283      	cmp	r3, r0
7010b6aa:	dc05      	bgt.n	7010b6b8 <__swbuf_r+0x4e>
7010b6ac:	4621      	mov	r1, r4
7010b6ae:	4628      	mov	r0, r5
7010b6b0:	f000 fa68 	bl	7010bb84 <_fflush_r>
7010b6b4:	2800      	cmp	r0, #0
7010b6b6:	d1ed      	bne.n	7010b694 <__swbuf_r+0x2a>
7010b6b8:	68a3      	ldr	r3, [r4, #8]
7010b6ba:	3b01      	subs	r3, #1
7010b6bc:	60a3      	str	r3, [r4, #8]
7010b6be:	6823      	ldr	r3, [r4, #0]
7010b6c0:	1c5a      	adds	r2, r3, #1
7010b6c2:	6022      	str	r2, [r4, #0]
7010b6c4:	701e      	strb	r6, [r3, #0]
7010b6c6:	1c43      	adds	r3, r0, #1
7010b6c8:	6962      	ldr	r2, [r4, #20]
7010b6ca:	429a      	cmp	r2, r3
7010b6cc:	d004      	beq.n	7010b6d8 <__swbuf_r+0x6e>
7010b6ce:	89a3      	ldrh	r3, [r4, #12]
7010b6d0:	07db      	lsls	r3, r3, #31
7010b6d2:	d5e1      	bpl.n	7010b698 <__swbuf_r+0x2e>
7010b6d4:	2e0a      	cmp	r6, #10
7010b6d6:	d1df      	bne.n	7010b698 <__swbuf_r+0x2e>
7010b6d8:	4621      	mov	r1, r4
7010b6da:	4628      	mov	r0, r5
7010b6dc:	f000 fa52 	bl	7010bb84 <_fflush_r>
7010b6e0:	2800      	cmp	r0, #0
7010b6e2:	d0d9      	beq.n	7010b698 <__swbuf_r+0x2e>
7010b6e4:	e7d6      	b.n	7010b694 <__swbuf_r+0x2a>
	...

7010b6e8 <__swsetup_r>:
7010b6e8:	b538      	push	{r3, r4, r5, lr}
7010b6ea:	4b29      	ldr	r3, [pc, #164]	@ (7010b790 <__swsetup_r+0xa8>)
7010b6ec:	4605      	mov	r5, r0
7010b6ee:	460c      	mov	r4, r1
7010b6f0:	6818      	ldr	r0, [r3, #0]
7010b6f2:	b118      	cbz	r0, 7010b6fc <__swsetup_r+0x14>
7010b6f4:	6a03      	ldr	r3, [r0, #32]
7010b6f6:	b90b      	cbnz	r3, 7010b6fc <__swsetup_r+0x14>
7010b6f8:	f7ff fee0 	bl	7010b4bc <__sinit>
7010b6fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
7010b700:	0719      	lsls	r1, r3, #28
7010b702:	d422      	bmi.n	7010b74a <__swsetup_r+0x62>
7010b704:	06da      	lsls	r2, r3, #27
7010b706:	d407      	bmi.n	7010b718 <__swsetup_r+0x30>
7010b708:	2209      	movs	r2, #9
7010b70a:	602a      	str	r2, [r5, #0]
7010b70c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7010b710:	f04f 30ff 	mov.w	r0, #4294967295
7010b714:	81a3      	strh	r3, [r4, #12]
7010b716:	e033      	b.n	7010b780 <__swsetup_r+0x98>
7010b718:	0758      	lsls	r0, r3, #29
7010b71a:	d512      	bpl.n	7010b742 <__swsetup_r+0x5a>
7010b71c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
7010b71e:	b141      	cbz	r1, 7010b732 <__swsetup_r+0x4a>
7010b720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
7010b724:	4299      	cmp	r1, r3
7010b726:	d002      	beq.n	7010b72e <__swsetup_r+0x46>
7010b728:	4628      	mov	r0, r5
7010b72a:	f000 f8af 	bl	7010b88c <_free_r>
7010b72e:	2300      	movs	r3, #0
7010b730:	6363      	str	r3, [r4, #52]	@ 0x34
7010b732:	89a3      	ldrh	r3, [r4, #12]
7010b734:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
7010b738:	81a3      	strh	r3, [r4, #12]
7010b73a:	2300      	movs	r3, #0
7010b73c:	6063      	str	r3, [r4, #4]
7010b73e:	6923      	ldr	r3, [r4, #16]
7010b740:	6023      	str	r3, [r4, #0]
7010b742:	89a3      	ldrh	r3, [r4, #12]
7010b744:	f043 0308 	orr.w	r3, r3, #8
7010b748:	81a3      	strh	r3, [r4, #12]
7010b74a:	6923      	ldr	r3, [r4, #16]
7010b74c:	b94b      	cbnz	r3, 7010b762 <__swsetup_r+0x7a>
7010b74e:	89a3      	ldrh	r3, [r4, #12]
7010b750:	f403 7320 	and.w	r3, r3, #640	@ 0x280
7010b754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
7010b758:	d003      	beq.n	7010b762 <__swsetup_r+0x7a>
7010b75a:	4621      	mov	r1, r4
7010b75c:	4628      	mov	r0, r5
7010b75e:	f000 fa5e 	bl	7010bc1e <__smakebuf_r>
7010b762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
7010b766:	f013 0201 	ands.w	r2, r3, #1
7010b76a:	d00a      	beq.n	7010b782 <__swsetup_r+0x9a>
7010b76c:	2200      	movs	r2, #0
7010b76e:	60a2      	str	r2, [r4, #8]
7010b770:	6962      	ldr	r2, [r4, #20]
7010b772:	4252      	negs	r2, r2
7010b774:	61a2      	str	r2, [r4, #24]
7010b776:	6922      	ldr	r2, [r4, #16]
7010b778:	b942      	cbnz	r2, 7010b78c <__swsetup_r+0xa4>
7010b77a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
7010b77e:	d1c5      	bne.n	7010b70c <__swsetup_r+0x24>
7010b780:	bd38      	pop	{r3, r4, r5, pc}
7010b782:	0799      	lsls	r1, r3, #30
7010b784:	bf58      	it	pl
7010b786:	6962      	ldrpl	r2, [r4, #20]
7010b788:	60a2      	str	r2, [r4, #8]
7010b78a:	e7f4      	b.n	7010b776 <__swsetup_r+0x8e>
7010b78c:	2000      	movs	r0, #0
7010b78e:	e7f7      	b.n	7010b780 <__swsetup_r+0x98>
7010b790:	34000018 	.word	0x34000018

7010b794 <memset>:
7010b794:	4402      	add	r2, r0
7010b796:	4603      	mov	r3, r0
7010b798:	4293      	cmp	r3, r2
7010b79a:	d100      	bne.n	7010b79e <memset+0xa>
7010b79c:	4770      	bx	lr
7010b79e:	f803 1b01 	strb.w	r1, [r3], #1
7010b7a2:	e7f9      	b.n	7010b798 <memset+0x4>

7010b7a4 <_close_r>:
7010b7a4:	b538      	push	{r3, r4, r5, lr}
7010b7a6:	2300      	movs	r3, #0
7010b7a8:	4d05      	ldr	r5, [pc, #20]	@ (7010b7c0 <_close_r+0x1c>)
7010b7aa:	4604      	mov	r4, r0
7010b7ac:	4608      	mov	r0, r1
7010b7ae:	602b      	str	r3, [r5, #0]
7010b7b0:	f7f5 fd79 	bl	701012a6 <_close>
7010b7b4:	1c43      	adds	r3, r0, #1
7010b7b6:	d102      	bne.n	7010b7be <_close_r+0x1a>
7010b7b8:	682b      	ldr	r3, [r5, #0]
7010b7ba:	b103      	cbz	r3, 7010b7be <_close_r+0x1a>
7010b7bc:	6023      	str	r3, [r4, #0]
7010b7be:	bd38      	pop	{r3, r4, r5, pc}
7010b7c0:	340002fc 	.word	0x340002fc

7010b7c4 <_lseek_r>:
7010b7c4:	b538      	push	{r3, r4, r5, lr}
7010b7c6:	4604      	mov	r4, r0
7010b7c8:	4d06      	ldr	r5, [pc, #24]	@ (7010b7e4 <_lseek_r+0x20>)
7010b7ca:	4608      	mov	r0, r1
7010b7cc:	4611      	mov	r1, r2
7010b7ce:	2200      	movs	r2, #0
7010b7d0:	602a      	str	r2, [r5, #0]
7010b7d2:	461a      	mov	r2, r3
7010b7d4:	f7f5 fd8e 	bl	701012f4 <_lseek>
7010b7d8:	1c43      	adds	r3, r0, #1
7010b7da:	d102      	bne.n	7010b7e2 <_lseek_r+0x1e>
7010b7dc:	682b      	ldr	r3, [r5, #0]
7010b7de:	b103      	cbz	r3, 7010b7e2 <_lseek_r+0x1e>
7010b7e0:	6023      	str	r3, [r4, #0]
7010b7e2:	bd38      	pop	{r3, r4, r5, pc}
7010b7e4:	340002fc 	.word	0x340002fc

7010b7e8 <_read_r>:
7010b7e8:	b538      	push	{r3, r4, r5, lr}
7010b7ea:	4604      	mov	r4, r0
7010b7ec:	4d06      	ldr	r5, [pc, #24]	@ (7010b808 <_read_r+0x20>)
7010b7ee:	4608      	mov	r0, r1
7010b7f0:	4611      	mov	r1, r2
7010b7f2:	2200      	movs	r2, #0
7010b7f4:	602a      	str	r2, [r5, #0]
7010b7f6:	461a      	mov	r2, r3
7010b7f8:	f7f5 fd1c 	bl	70101234 <_read>
7010b7fc:	1c43      	adds	r3, r0, #1
7010b7fe:	d102      	bne.n	7010b806 <_read_r+0x1e>
7010b800:	682b      	ldr	r3, [r5, #0]
7010b802:	b103      	cbz	r3, 7010b806 <_read_r+0x1e>
7010b804:	6023      	str	r3, [r4, #0]
7010b806:	bd38      	pop	{r3, r4, r5, pc}
7010b808:	340002fc 	.word	0x340002fc

7010b80c <_write_r>:
7010b80c:	b538      	push	{r3, r4, r5, lr}
7010b80e:	4604      	mov	r4, r0
7010b810:	4d06      	ldr	r5, [pc, #24]	@ (7010b82c <_write_r+0x20>)
7010b812:	4608      	mov	r0, r1
7010b814:	4611      	mov	r1, r2
7010b816:	2200      	movs	r2, #0
7010b818:	602a      	str	r2, [r5, #0]
7010b81a:	461a      	mov	r2, r3
7010b81c:	f7f5 fd27 	bl	7010126e <_write>
7010b820:	1c43      	adds	r3, r0, #1
7010b822:	d102      	bne.n	7010b82a <_write_r+0x1e>
7010b824:	682b      	ldr	r3, [r5, #0]
7010b826:	b103      	cbz	r3, 7010b82a <_write_r+0x1e>
7010b828:	6023      	str	r3, [r4, #0]
7010b82a:	bd38      	pop	{r3, r4, r5, pc}
7010b82c:	340002fc 	.word	0x340002fc

7010b830 <__errno>:
7010b830:	4b01      	ldr	r3, [pc, #4]	@ (7010b838 <__errno+0x8>)
7010b832:	6818      	ldr	r0, [r3, #0]
7010b834:	4770      	bx	lr
7010b836:	bf00      	nop
7010b838:	34000018 	.word	0x34000018

7010b83c <__libc_init_array>:
7010b83c:	b570      	push	{r4, r5, r6, lr}
7010b83e:	4d0d      	ldr	r5, [pc, #52]	@ (7010b874 <__libc_init_array+0x38>)
7010b840:	2600      	movs	r6, #0
7010b842:	4c0d      	ldr	r4, [pc, #52]	@ (7010b878 <__libc_init_array+0x3c>)
7010b844:	1b64      	subs	r4, r4, r5
7010b846:	10a4      	asrs	r4, r4, #2
7010b848:	42a6      	cmp	r6, r4
7010b84a:	d109      	bne.n	7010b860 <__libc_init_array+0x24>
7010b84c:	4d0b      	ldr	r5, [pc, #44]	@ (7010b87c <__libc_init_array+0x40>)
7010b84e:	2600      	movs	r6, #0
7010b850:	4c0b      	ldr	r4, [pc, #44]	@ (7010b880 <__libc_init_array+0x44>)
7010b852:	f000 fa53 	bl	7010bcfc <_init>
7010b856:	1b64      	subs	r4, r4, r5
7010b858:	10a4      	asrs	r4, r4, #2
7010b85a:	42a6      	cmp	r6, r4
7010b85c:	d105      	bne.n	7010b86a <__libc_init_array+0x2e>
7010b85e:	bd70      	pop	{r4, r5, r6, pc}
7010b860:	f855 3b04 	ldr.w	r3, [r5], #4
7010b864:	3601      	adds	r6, #1
7010b866:	4798      	blx	r3
7010b868:	e7ee      	b.n	7010b848 <__libc_init_array+0xc>
7010b86a:	f855 3b04 	ldr.w	r3, [r5], #4
7010b86e:	3601      	adds	r6, #1
7010b870:	4798      	blx	r3
7010b872:	e7f2      	b.n	7010b85a <__libc_init_array+0x1e>
7010b874:	7010bd5c 	.word	0x7010bd5c
7010b878:	7010bd5c 	.word	0x7010bd5c
7010b87c:	7010bd5c 	.word	0x7010bd5c
7010b880:	7010bd60 	.word	0x7010bd60

7010b884 <__retarget_lock_init_recursive>:
7010b884:	4770      	bx	lr

7010b886 <__retarget_lock_acquire_recursive>:
7010b886:	4770      	bx	lr

7010b888 <__retarget_lock_release_recursive>:
7010b888:	4770      	bx	lr
	...

7010b88c <_free_r>:
7010b88c:	b538      	push	{r3, r4, r5, lr}
7010b88e:	4605      	mov	r5, r0
7010b890:	2900      	cmp	r1, #0
7010b892:	d041      	beq.n	7010b918 <_free_r+0x8c>
7010b894:	f851 3c04 	ldr.w	r3, [r1, #-4]
7010b898:	1f0c      	subs	r4, r1, #4
7010b89a:	2b00      	cmp	r3, #0
7010b89c:	bfb8      	it	lt
7010b89e:	18e4      	addlt	r4, r4, r3
7010b8a0:	f000 f8e0 	bl	7010ba64 <__malloc_lock>
7010b8a4:	4a1d      	ldr	r2, [pc, #116]	@ (7010b91c <_free_r+0x90>)
7010b8a6:	6813      	ldr	r3, [r2, #0]
7010b8a8:	b933      	cbnz	r3, 7010b8b8 <_free_r+0x2c>
7010b8aa:	6063      	str	r3, [r4, #4]
7010b8ac:	6014      	str	r4, [r2, #0]
7010b8ae:	4628      	mov	r0, r5
7010b8b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
7010b8b4:	f000 b8dc 	b.w	7010ba70 <__malloc_unlock>
7010b8b8:	42a3      	cmp	r3, r4
7010b8ba:	d908      	bls.n	7010b8ce <_free_r+0x42>
7010b8bc:	6820      	ldr	r0, [r4, #0]
7010b8be:	1821      	adds	r1, r4, r0
7010b8c0:	428b      	cmp	r3, r1
7010b8c2:	bf01      	itttt	eq
7010b8c4:	6819      	ldreq	r1, [r3, #0]
7010b8c6:	685b      	ldreq	r3, [r3, #4]
7010b8c8:	1809      	addeq	r1, r1, r0
7010b8ca:	6021      	streq	r1, [r4, #0]
7010b8cc:	e7ed      	b.n	7010b8aa <_free_r+0x1e>
7010b8ce:	461a      	mov	r2, r3
7010b8d0:	685b      	ldr	r3, [r3, #4]
7010b8d2:	b10b      	cbz	r3, 7010b8d8 <_free_r+0x4c>
7010b8d4:	42a3      	cmp	r3, r4
7010b8d6:	d9fa      	bls.n	7010b8ce <_free_r+0x42>
7010b8d8:	6811      	ldr	r1, [r2, #0]
7010b8da:	1850      	adds	r0, r2, r1
7010b8dc:	42a0      	cmp	r0, r4
7010b8de:	d10b      	bne.n	7010b8f8 <_free_r+0x6c>
7010b8e0:	6820      	ldr	r0, [r4, #0]
7010b8e2:	4401      	add	r1, r0
7010b8e4:	1850      	adds	r0, r2, r1
7010b8e6:	6011      	str	r1, [r2, #0]
7010b8e8:	4283      	cmp	r3, r0
7010b8ea:	d1e0      	bne.n	7010b8ae <_free_r+0x22>
7010b8ec:	6818      	ldr	r0, [r3, #0]
7010b8ee:	685b      	ldr	r3, [r3, #4]
7010b8f0:	4408      	add	r0, r1
7010b8f2:	6053      	str	r3, [r2, #4]
7010b8f4:	6010      	str	r0, [r2, #0]
7010b8f6:	e7da      	b.n	7010b8ae <_free_r+0x22>
7010b8f8:	d902      	bls.n	7010b900 <_free_r+0x74>
7010b8fa:	230c      	movs	r3, #12
7010b8fc:	602b      	str	r3, [r5, #0]
7010b8fe:	e7d6      	b.n	7010b8ae <_free_r+0x22>
7010b900:	6820      	ldr	r0, [r4, #0]
7010b902:	1821      	adds	r1, r4, r0
7010b904:	428b      	cmp	r3, r1
7010b906:	bf02      	ittt	eq
7010b908:	6819      	ldreq	r1, [r3, #0]
7010b90a:	685b      	ldreq	r3, [r3, #4]
7010b90c:	1809      	addeq	r1, r1, r0
7010b90e:	6063      	str	r3, [r4, #4]
7010b910:	bf08      	it	eq
7010b912:	6021      	streq	r1, [r4, #0]
7010b914:	6054      	str	r4, [r2, #4]
7010b916:	e7ca      	b.n	7010b8ae <_free_r+0x22>
7010b918:	bd38      	pop	{r3, r4, r5, pc}
7010b91a:	bf00      	nop
7010b91c:	34000308 	.word	0x34000308

7010b920 <sbrk_aligned>:
7010b920:	b570      	push	{r4, r5, r6, lr}
7010b922:	4e0f      	ldr	r6, [pc, #60]	@ (7010b960 <sbrk_aligned+0x40>)
7010b924:	460c      	mov	r4, r1
7010b926:	4605      	mov	r5, r0
7010b928:	6831      	ldr	r1, [r6, #0]
7010b92a:	b911      	cbnz	r1, 7010b932 <sbrk_aligned+0x12>
7010b92c:	f000 f9d6 	bl	7010bcdc <_sbrk_r>
7010b930:	6030      	str	r0, [r6, #0]
7010b932:	4621      	mov	r1, r4
7010b934:	4628      	mov	r0, r5
7010b936:	f000 f9d1 	bl	7010bcdc <_sbrk_r>
7010b93a:	1c43      	adds	r3, r0, #1
7010b93c:	d103      	bne.n	7010b946 <sbrk_aligned+0x26>
7010b93e:	f04f 34ff 	mov.w	r4, #4294967295
7010b942:	4620      	mov	r0, r4
7010b944:	bd70      	pop	{r4, r5, r6, pc}
7010b946:	1cc4      	adds	r4, r0, #3
7010b948:	f024 0403 	bic.w	r4, r4, #3
7010b94c:	42a0      	cmp	r0, r4
7010b94e:	d0f8      	beq.n	7010b942 <sbrk_aligned+0x22>
7010b950:	1a21      	subs	r1, r4, r0
7010b952:	4628      	mov	r0, r5
7010b954:	f000 f9c2 	bl	7010bcdc <_sbrk_r>
7010b958:	3001      	adds	r0, #1
7010b95a:	d1f2      	bne.n	7010b942 <sbrk_aligned+0x22>
7010b95c:	e7ef      	b.n	7010b93e <sbrk_aligned+0x1e>
7010b95e:	bf00      	nop
7010b960:	34000304 	.word	0x34000304

7010b964 <_malloc_r>:
7010b964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
7010b968:	1ccd      	adds	r5, r1, #3
7010b96a:	4606      	mov	r6, r0
7010b96c:	f025 0503 	bic.w	r5, r5, #3
7010b970:	3508      	adds	r5, #8
7010b972:	2d0c      	cmp	r5, #12
7010b974:	bf38      	it	cc
7010b976:	250c      	movcc	r5, #12
7010b978:	2d00      	cmp	r5, #0
7010b97a:	db01      	blt.n	7010b980 <_malloc_r+0x1c>
7010b97c:	42a9      	cmp	r1, r5
7010b97e:	d904      	bls.n	7010b98a <_malloc_r+0x26>
7010b980:	230c      	movs	r3, #12
7010b982:	6033      	str	r3, [r6, #0]
7010b984:	2000      	movs	r0, #0
7010b986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
7010b98a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 7010ba60 <_malloc_r+0xfc>
7010b98e:	f000 f869 	bl	7010ba64 <__malloc_lock>
7010b992:	f8d8 3000 	ldr.w	r3, [r8]
7010b996:	461c      	mov	r4, r3
7010b998:	bb44      	cbnz	r4, 7010b9ec <_malloc_r+0x88>
7010b99a:	4629      	mov	r1, r5
7010b99c:	4630      	mov	r0, r6
7010b99e:	f7ff ffbf 	bl	7010b920 <sbrk_aligned>
7010b9a2:	1c43      	adds	r3, r0, #1
7010b9a4:	4604      	mov	r4, r0
7010b9a6:	d158      	bne.n	7010ba5a <_malloc_r+0xf6>
7010b9a8:	f8d8 4000 	ldr.w	r4, [r8]
7010b9ac:	4627      	mov	r7, r4
7010b9ae:	2f00      	cmp	r7, #0
7010b9b0:	d143      	bne.n	7010ba3a <_malloc_r+0xd6>
7010b9b2:	2c00      	cmp	r4, #0
7010b9b4:	d04b      	beq.n	7010ba4e <_malloc_r+0xea>
7010b9b6:	6823      	ldr	r3, [r4, #0]
7010b9b8:	4639      	mov	r1, r7
7010b9ba:	4630      	mov	r0, r6
7010b9bc:	eb04 0903 	add.w	r9, r4, r3
7010b9c0:	f000 f98c 	bl	7010bcdc <_sbrk_r>
7010b9c4:	4581      	cmp	r9, r0
7010b9c6:	d142      	bne.n	7010ba4e <_malloc_r+0xea>
7010b9c8:	6821      	ldr	r1, [r4, #0]
7010b9ca:	4630      	mov	r0, r6
7010b9cc:	1a6d      	subs	r5, r5, r1
7010b9ce:	4629      	mov	r1, r5
7010b9d0:	f7ff ffa6 	bl	7010b920 <sbrk_aligned>
7010b9d4:	3001      	adds	r0, #1
7010b9d6:	d03a      	beq.n	7010ba4e <_malloc_r+0xea>
7010b9d8:	6823      	ldr	r3, [r4, #0]
7010b9da:	442b      	add	r3, r5
7010b9dc:	6023      	str	r3, [r4, #0]
7010b9de:	f8d8 3000 	ldr.w	r3, [r8]
7010b9e2:	685a      	ldr	r2, [r3, #4]
7010b9e4:	bb62      	cbnz	r2, 7010ba40 <_malloc_r+0xdc>
7010b9e6:	f8c8 7000 	str.w	r7, [r8]
7010b9ea:	e00f      	b.n	7010ba0c <_malloc_r+0xa8>
7010b9ec:	6822      	ldr	r2, [r4, #0]
7010b9ee:	1b52      	subs	r2, r2, r5
7010b9f0:	d420      	bmi.n	7010ba34 <_malloc_r+0xd0>
7010b9f2:	2a0b      	cmp	r2, #11
7010b9f4:	d917      	bls.n	7010ba26 <_malloc_r+0xc2>
7010b9f6:	1961      	adds	r1, r4, r5
7010b9f8:	42a3      	cmp	r3, r4
7010b9fa:	6025      	str	r5, [r4, #0]
7010b9fc:	bf18      	it	ne
7010b9fe:	6059      	strne	r1, [r3, #4]
7010ba00:	6863      	ldr	r3, [r4, #4]
7010ba02:	bf08      	it	eq
7010ba04:	f8c8 1000 	streq.w	r1, [r8]
7010ba08:	5162      	str	r2, [r4, r5]
7010ba0a:	604b      	str	r3, [r1, #4]
7010ba0c:	4630      	mov	r0, r6
7010ba0e:	f000 f82f 	bl	7010ba70 <__malloc_unlock>
7010ba12:	f104 000b 	add.w	r0, r4, #11
7010ba16:	1d23      	adds	r3, r4, #4
7010ba18:	f020 0007 	bic.w	r0, r0, #7
7010ba1c:	1ac2      	subs	r2, r0, r3
7010ba1e:	bf1c      	itt	ne
7010ba20:	1a1b      	subne	r3, r3, r0
7010ba22:	50a3      	strne	r3, [r4, r2]
7010ba24:	e7af      	b.n	7010b986 <_malloc_r+0x22>
7010ba26:	6862      	ldr	r2, [r4, #4]
7010ba28:	42a3      	cmp	r3, r4
7010ba2a:	bf0c      	ite	eq
7010ba2c:	f8c8 2000 	streq.w	r2, [r8]
7010ba30:	605a      	strne	r2, [r3, #4]
7010ba32:	e7eb      	b.n	7010ba0c <_malloc_r+0xa8>
7010ba34:	4623      	mov	r3, r4
7010ba36:	6864      	ldr	r4, [r4, #4]
7010ba38:	e7ae      	b.n	7010b998 <_malloc_r+0x34>
7010ba3a:	463c      	mov	r4, r7
7010ba3c:	687f      	ldr	r7, [r7, #4]
7010ba3e:	e7b6      	b.n	7010b9ae <_malloc_r+0x4a>
7010ba40:	461a      	mov	r2, r3
7010ba42:	685b      	ldr	r3, [r3, #4]
7010ba44:	42a3      	cmp	r3, r4
7010ba46:	d1fb      	bne.n	7010ba40 <_malloc_r+0xdc>
7010ba48:	2300      	movs	r3, #0
7010ba4a:	6053      	str	r3, [r2, #4]
7010ba4c:	e7de      	b.n	7010ba0c <_malloc_r+0xa8>
7010ba4e:	230c      	movs	r3, #12
7010ba50:	4630      	mov	r0, r6
7010ba52:	6033      	str	r3, [r6, #0]
7010ba54:	f000 f80c 	bl	7010ba70 <__malloc_unlock>
7010ba58:	e794      	b.n	7010b984 <_malloc_r+0x20>
7010ba5a:	6005      	str	r5, [r0, #0]
7010ba5c:	e7d6      	b.n	7010ba0c <_malloc_r+0xa8>
7010ba5e:	bf00      	nop
7010ba60:	34000308 	.word	0x34000308

7010ba64 <__malloc_lock>:
7010ba64:	4801      	ldr	r0, [pc, #4]	@ (7010ba6c <__malloc_lock+0x8>)
7010ba66:	f7ff bf0e 	b.w	7010b886 <__retarget_lock_acquire_recursive>
7010ba6a:	bf00      	nop
7010ba6c:	34000300 	.word	0x34000300

7010ba70 <__malloc_unlock>:
7010ba70:	4801      	ldr	r0, [pc, #4]	@ (7010ba78 <__malloc_unlock+0x8>)
7010ba72:	f7ff bf09 	b.w	7010b888 <__retarget_lock_release_recursive>
7010ba76:	bf00      	nop
7010ba78:	34000300 	.word	0x34000300

7010ba7c <__sflush_r>:
7010ba7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
7010ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
7010ba84:	0716      	lsls	r6, r2, #28
7010ba86:	4605      	mov	r5, r0
7010ba88:	460c      	mov	r4, r1
7010ba8a:	d454      	bmi.n	7010bb36 <__sflush_r+0xba>
7010ba8c:	684b      	ldr	r3, [r1, #4]
7010ba8e:	2b00      	cmp	r3, #0
7010ba90:	dc02      	bgt.n	7010ba98 <__sflush_r+0x1c>
7010ba92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
7010ba94:	2b00      	cmp	r3, #0
7010ba96:	dd48      	ble.n	7010bb2a <__sflush_r+0xae>
7010ba98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
7010ba9a:	2e00      	cmp	r6, #0
7010ba9c:	d045      	beq.n	7010bb2a <__sflush_r+0xae>
7010ba9e:	2300      	movs	r3, #0
7010baa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
7010baa4:	682f      	ldr	r7, [r5, #0]
7010baa6:	6a21      	ldr	r1, [r4, #32]
7010baa8:	602b      	str	r3, [r5, #0]
7010baaa:	d030      	beq.n	7010bb0e <__sflush_r+0x92>
7010baac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
7010baae:	89a3      	ldrh	r3, [r4, #12]
7010bab0:	0759      	lsls	r1, r3, #29
7010bab2:	d505      	bpl.n	7010bac0 <__sflush_r+0x44>
7010bab4:	6863      	ldr	r3, [r4, #4]
7010bab6:	1ad2      	subs	r2, r2, r3
7010bab8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
7010baba:	b10b      	cbz	r3, 7010bac0 <__sflush_r+0x44>
7010babc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
7010babe:	1ad2      	subs	r2, r2, r3
7010bac0:	2300      	movs	r3, #0
7010bac2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
7010bac4:	6a21      	ldr	r1, [r4, #32]
7010bac6:	4628      	mov	r0, r5
7010bac8:	47b0      	blx	r6
7010baca:	1c43      	adds	r3, r0, #1
7010bacc:	89a3      	ldrh	r3, [r4, #12]
7010bace:	d106      	bne.n	7010bade <__sflush_r+0x62>
7010bad0:	6829      	ldr	r1, [r5, #0]
7010bad2:	291d      	cmp	r1, #29
7010bad4:	d82b      	bhi.n	7010bb2e <__sflush_r+0xb2>
7010bad6:	4a2a      	ldr	r2, [pc, #168]	@ (7010bb80 <__sflush_r+0x104>)
7010bad8:	40ca      	lsrs	r2, r1
7010bada:	07d6      	lsls	r6, r2, #31
7010badc:	d527      	bpl.n	7010bb2e <__sflush_r+0xb2>
7010bade:	2200      	movs	r2, #0
7010bae0:	04d9      	lsls	r1, r3, #19
7010bae2:	6062      	str	r2, [r4, #4]
7010bae4:	6922      	ldr	r2, [r4, #16]
7010bae6:	6022      	str	r2, [r4, #0]
7010bae8:	d504      	bpl.n	7010baf4 <__sflush_r+0x78>
7010baea:	1c42      	adds	r2, r0, #1
7010baec:	d101      	bne.n	7010baf2 <__sflush_r+0x76>
7010baee:	682b      	ldr	r3, [r5, #0]
7010baf0:	b903      	cbnz	r3, 7010baf4 <__sflush_r+0x78>
7010baf2:	6560      	str	r0, [r4, #84]	@ 0x54
7010baf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
7010baf6:	602f      	str	r7, [r5, #0]
7010baf8:	b1b9      	cbz	r1, 7010bb2a <__sflush_r+0xae>
7010bafa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
7010bafe:	4299      	cmp	r1, r3
7010bb00:	d002      	beq.n	7010bb08 <__sflush_r+0x8c>
7010bb02:	4628      	mov	r0, r5
7010bb04:	f7ff fec2 	bl	7010b88c <_free_r>
7010bb08:	2300      	movs	r3, #0
7010bb0a:	6363      	str	r3, [r4, #52]	@ 0x34
7010bb0c:	e00d      	b.n	7010bb2a <__sflush_r+0xae>
7010bb0e:	2301      	movs	r3, #1
7010bb10:	4628      	mov	r0, r5
7010bb12:	47b0      	blx	r6
7010bb14:	4602      	mov	r2, r0
7010bb16:	1c50      	adds	r0, r2, #1
7010bb18:	d1c9      	bne.n	7010baae <__sflush_r+0x32>
7010bb1a:	682b      	ldr	r3, [r5, #0]
7010bb1c:	2b00      	cmp	r3, #0
7010bb1e:	d0c6      	beq.n	7010baae <__sflush_r+0x32>
7010bb20:	2b1d      	cmp	r3, #29
7010bb22:	d001      	beq.n	7010bb28 <__sflush_r+0xac>
7010bb24:	2b16      	cmp	r3, #22
7010bb26:	d11d      	bne.n	7010bb64 <__sflush_r+0xe8>
7010bb28:	602f      	str	r7, [r5, #0]
7010bb2a:	2000      	movs	r0, #0
7010bb2c:	e021      	b.n	7010bb72 <__sflush_r+0xf6>
7010bb2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7010bb32:	b21b      	sxth	r3, r3
7010bb34:	e01a      	b.n	7010bb6c <__sflush_r+0xf0>
7010bb36:	690f      	ldr	r7, [r1, #16]
7010bb38:	2f00      	cmp	r7, #0
7010bb3a:	d0f6      	beq.n	7010bb2a <__sflush_r+0xae>
7010bb3c:	0793      	lsls	r3, r2, #30
7010bb3e:	680e      	ldr	r6, [r1, #0]
7010bb40:	600f      	str	r7, [r1, #0]
7010bb42:	bf0c      	ite	eq
7010bb44:	694b      	ldreq	r3, [r1, #20]
7010bb46:	2300      	movne	r3, #0
7010bb48:	eba6 0807 	sub.w	r8, r6, r7
7010bb4c:	608b      	str	r3, [r1, #8]
7010bb4e:	f1b8 0f00 	cmp.w	r8, #0
7010bb52:	ddea      	ble.n	7010bb2a <__sflush_r+0xae>
7010bb54:	4643      	mov	r3, r8
7010bb56:	463a      	mov	r2, r7
7010bb58:	6a21      	ldr	r1, [r4, #32]
7010bb5a:	4628      	mov	r0, r5
7010bb5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
7010bb5e:	47b0      	blx	r6
7010bb60:	2800      	cmp	r0, #0
7010bb62:	dc08      	bgt.n	7010bb76 <__sflush_r+0xfa>
7010bb64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
7010bb68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7010bb6c:	f04f 30ff 	mov.w	r0, #4294967295
7010bb70:	81a3      	strh	r3, [r4, #12]
7010bb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
7010bb76:	4407      	add	r7, r0
7010bb78:	eba8 0800 	sub.w	r8, r8, r0
7010bb7c:	e7e7      	b.n	7010bb4e <__sflush_r+0xd2>
7010bb7e:	bf00      	nop
7010bb80:	20400001 	.word	0x20400001

7010bb84 <_fflush_r>:
7010bb84:	b538      	push	{r3, r4, r5, lr}
7010bb86:	690b      	ldr	r3, [r1, #16]
7010bb88:	4605      	mov	r5, r0
7010bb8a:	460c      	mov	r4, r1
7010bb8c:	b913      	cbnz	r3, 7010bb94 <_fflush_r+0x10>
7010bb8e:	2500      	movs	r5, #0
7010bb90:	4628      	mov	r0, r5
7010bb92:	bd38      	pop	{r3, r4, r5, pc}
7010bb94:	b118      	cbz	r0, 7010bb9e <_fflush_r+0x1a>
7010bb96:	6a03      	ldr	r3, [r0, #32]
7010bb98:	b90b      	cbnz	r3, 7010bb9e <_fflush_r+0x1a>
7010bb9a:	f7ff fc8f 	bl	7010b4bc <__sinit>
7010bb9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
7010bba2:	2b00      	cmp	r3, #0
7010bba4:	d0f3      	beq.n	7010bb8e <_fflush_r+0xa>
7010bba6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
7010bba8:	07d0      	lsls	r0, r2, #31
7010bbaa:	d404      	bmi.n	7010bbb6 <_fflush_r+0x32>
7010bbac:	0599      	lsls	r1, r3, #22
7010bbae:	d402      	bmi.n	7010bbb6 <_fflush_r+0x32>
7010bbb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
7010bbb2:	f7ff fe68 	bl	7010b886 <__retarget_lock_acquire_recursive>
7010bbb6:	4628      	mov	r0, r5
7010bbb8:	4621      	mov	r1, r4
7010bbba:	f7ff ff5f 	bl	7010ba7c <__sflush_r>
7010bbbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
7010bbc0:	4605      	mov	r5, r0
7010bbc2:	07da      	lsls	r2, r3, #31
7010bbc4:	d4e4      	bmi.n	7010bb90 <_fflush_r+0xc>
7010bbc6:	89a3      	ldrh	r3, [r4, #12]
7010bbc8:	059b      	lsls	r3, r3, #22
7010bbca:	d4e1      	bmi.n	7010bb90 <_fflush_r+0xc>
7010bbcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
7010bbce:	f7ff fe5b 	bl	7010b888 <__retarget_lock_release_recursive>
7010bbd2:	e7dd      	b.n	7010bb90 <_fflush_r+0xc>

7010bbd4 <__swhatbuf_r>:
7010bbd4:	b570      	push	{r4, r5, r6, lr}
7010bbd6:	460c      	mov	r4, r1
7010bbd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
7010bbdc:	b096      	sub	sp, #88	@ 0x58
7010bbde:	4615      	mov	r5, r2
7010bbe0:	2900      	cmp	r1, #0
7010bbe2:	461e      	mov	r6, r3
7010bbe4:	da0c      	bge.n	7010bc00 <__swhatbuf_r+0x2c>
7010bbe6:	89a3      	ldrh	r3, [r4, #12]
7010bbe8:	2100      	movs	r1, #0
7010bbea:	f013 0f80 	tst.w	r3, #128	@ 0x80
7010bbee:	bf14      	ite	ne
7010bbf0:	2340      	movne	r3, #64	@ 0x40
7010bbf2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
7010bbf6:	2000      	movs	r0, #0
7010bbf8:	6031      	str	r1, [r6, #0]
7010bbfa:	602b      	str	r3, [r5, #0]
7010bbfc:	b016      	add	sp, #88	@ 0x58
7010bbfe:	bd70      	pop	{r4, r5, r6, pc}
7010bc00:	466a      	mov	r2, sp
7010bc02:	f000 f849 	bl	7010bc98 <_fstat_r>
7010bc06:	2800      	cmp	r0, #0
7010bc08:	dbed      	blt.n	7010bbe6 <__swhatbuf_r+0x12>
7010bc0a:	9901      	ldr	r1, [sp, #4]
7010bc0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
7010bc10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
7010bc14:	4259      	negs	r1, r3
7010bc16:	4159      	adcs	r1, r3
7010bc18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
7010bc1c:	e7eb      	b.n	7010bbf6 <__swhatbuf_r+0x22>

7010bc1e <__smakebuf_r>:
7010bc1e:	898b      	ldrh	r3, [r1, #12]
7010bc20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
7010bc22:	079d      	lsls	r5, r3, #30
7010bc24:	4606      	mov	r6, r0
7010bc26:	460c      	mov	r4, r1
7010bc28:	d507      	bpl.n	7010bc3a <__smakebuf_r+0x1c>
7010bc2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
7010bc2e:	6023      	str	r3, [r4, #0]
7010bc30:	6123      	str	r3, [r4, #16]
7010bc32:	2301      	movs	r3, #1
7010bc34:	6163      	str	r3, [r4, #20]
7010bc36:	b003      	add	sp, #12
7010bc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
7010bc3a:	ab01      	add	r3, sp, #4
7010bc3c:	466a      	mov	r2, sp
7010bc3e:	f7ff ffc9 	bl	7010bbd4 <__swhatbuf_r>
7010bc42:	9f00      	ldr	r7, [sp, #0]
7010bc44:	4605      	mov	r5, r0
7010bc46:	4630      	mov	r0, r6
7010bc48:	4639      	mov	r1, r7
7010bc4a:	f7ff fe8b 	bl	7010b964 <_malloc_r>
7010bc4e:	b948      	cbnz	r0, 7010bc64 <__smakebuf_r+0x46>
7010bc50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
7010bc54:	059a      	lsls	r2, r3, #22
7010bc56:	d4ee      	bmi.n	7010bc36 <__smakebuf_r+0x18>
7010bc58:	f023 0303 	bic.w	r3, r3, #3
7010bc5c:	f043 0302 	orr.w	r3, r3, #2
7010bc60:	81a3      	strh	r3, [r4, #12]
7010bc62:	e7e2      	b.n	7010bc2a <__smakebuf_r+0xc>
7010bc64:	89a3      	ldrh	r3, [r4, #12]
7010bc66:	6020      	str	r0, [r4, #0]
7010bc68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
7010bc6c:	81a3      	strh	r3, [r4, #12]
7010bc6e:	9b01      	ldr	r3, [sp, #4]
7010bc70:	e9c4 0704 	strd	r0, r7, [r4, #16]
7010bc74:	b15b      	cbz	r3, 7010bc8e <__smakebuf_r+0x70>
7010bc76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
7010bc7a:	4630      	mov	r0, r6
7010bc7c:	f000 f81e 	bl	7010bcbc <_isatty_r>
7010bc80:	b128      	cbz	r0, 7010bc8e <__smakebuf_r+0x70>
7010bc82:	89a3      	ldrh	r3, [r4, #12]
7010bc84:	f023 0303 	bic.w	r3, r3, #3
7010bc88:	f043 0301 	orr.w	r3, r3, #1
7010bc8c:	81a3      	strh	r3, [r4, #12]
7010bc8e:	89a3      	ldrh	r3, [r4, #12]
7010bc90:	431d      	orrs	r5, r3
7010bc92:	81a5      	strh	r5, [r4, #12]
7010bc94:	e7cf      	b.n	7010bc36 <__smakebuf_r+0x18>
	...

7010bc98 <_fstat_r>:
7010bc98:	b538      	push	{r3, r4, r5, lr}
7010bc9a:	2300      	movs	r3, #0
7010bc9c:	4d06      	ldr	r5, [pc, #24]	@ (7010bcb8 <_fstat_r+0x20>)
7010bc9e:	4604      	mov	r4, r0
7010bca0:	4608      	mov	r0, r1
7010bca2:	4611      	mov	r1, r2
7010bca4:	602b      	str	r3, [r5, #0]
7010bca6:	f7f5 fb0a 	bl	701012be <_fstat>
7010bcaa:	1c43      	adds	r3, r0, #1
7010bcac:	d102      	bne.n	7010bcb4 <_fstat_r+0x1c>
7010bcae:	682b      	ldr	r3, [r5, #0]
7010bcb0:	b103      	cbz	r3, 7010bcb4 <_fstat_r+0x1c>
7010bcb2:	6023      	str	r3, [r4, #0]
7010bcb4:	bd38      	pop	{r3, r4, r5, pc}
7010bcb6:	bf00      	nop
7010bcb8:	340002fc 	.word	0x340002fc

7010bcbc <_isatty_r>:
7010bcbc:	b538      	push	{r3, r4, r5, lr}
7010bcbe:	2300      	movs	r3, #0
7010bcc0:	4d05      	ldr	r5, [pc, #20]	@ (7010bcd8 <_isatty_r+0x1c>)
7010bcc2:	4604      	mov	r4, r0
7010bcc4:	4608      	mov	r0, r1
7010bcc6:	602b      	str	r3, [r5, #0]
7010bcc8:	f7f5 fb09 	bl	701012de <_isatty>
7010bccc:	1c43      	adds	r3, r0, #1
7010bcce:	d102      	bne.n	7010bcd6 <_isatty_r+0x1a>
7010bcd0:	682b      	ldr	r3, [r5, #0]
7010bcd2:	b103      	cbz	r3, 7010bcd6 <_isatty_r+0x1a>
7010bcd4:	6023      	str	r3, [r4, #0]
7010bcd6:	bd38      	pop	{r3, r4, r5, pc}
7010bcd8:	340002fc 	.word	0x340002fc

7010bcdc <_sbrk_r>:
7010bcdc:	b538      	push	{r3, r4, r5, lr}
7010bcde:	2300      	movs	r3, #0
7010bce0:	4d05      	ldr	r5, [pc, #20]	@ (7010bcf8 <_sbrk_r+0x1c>)
7010bce2:	4604      	mov	r4, r0
7010bce4:	4608      	mov	r0, r1
7010bce6:	602b      	str	r3, [r5, #0]
7010bce8:	f7f5 fb12 	bl	70101310 <_sbrk>
7010bcec:	1c43      	adds	r3, r0, #1
7010bcee:	d102      	bne.n	7010bcf6 <_sbrk_r+0x1a>
7010bcf0:	682b      	ldr	r3, [r5, #0]
7010bcf2:	b103      	cbz	r3, 7010bcf6 <_sbrk_r+0x1a>
7010bcf4:	6023      	str	r3, [r4, #0]
7010bcf6:	bd38      	pop	{r3, r4, r5, pc}
7010bcf8:	340002fc 	.word	0x340002fc

7010bcfc <_init>:
7010bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
7010bcfe:	bf00      	nop
7010bd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
7010bd02:	bc08      	pop	{r3}
7010bd04:	469e      	mov	lr, r3
7010bd06:	4770      	bx	lr

7010bd08 <_fini>:
7010bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
7010bd0a:	bf00      	nop
7010bd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
7010bd0e:	bc08      	pop	{r3}
7010bd10:	469e      	mov	lr, r3
7010bd12:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

7010bde0 <SECURE_SystemCoreClockUpdate>:
7010bde0:	e97f e97f 	sg
7010bde4:	f7f5 bce4 	b.w	701017b0 <__acle_se_SECURE_SystemCoreClockUpdate>

7010bde8 <SECURE_RegisterCallback>:
7010bde8:	e97f e97f 	sg
7010bdec:	f7f5 b9a4 	b.w	70101138 <__acle_se_SECURE_RegisterCallback>
	...
